{
  "name": "DecisionTree",
  "comment": "A decisionTree is used to find property values that are determined by traversing a tree\n of constraints. Each node in the tree has an associated constraint.  If the constraint is\n satisfied for a given test object, then its child nodes are tested to find more and more\n specific results.  When either there are no children in a node or none of the children\u0027s \n constraints are satisfied or by traversing those that are satisfied did not result in find\n a property match, the current node is check to see if it has a value for the property being\n search.  If so, that result is added as a Decision.\n \n  There can be multiple paths where all constraints a matched resulting in multiple possible\n decisions.\n  A non-leaf node can have properties as well, that serve as a default if it\u0027s constraint\n is satisfied, but not of its children is satisfied or resulted in a decision.",
  "javadoc": "A decisionTree is used to find property values that are determined by traversing a tree\n of constraints. Each node in the tree has an associated constraint.  If the constraint is\n satisfied for a given test object, then its child nodes are tested to find more and more\n specific results.  When either there are no children in a node or none of the children\u0027s \n constraints are satisfied or by traversing those that are satisfied did not result in find\n a property match, the current node is check to see if it has a value for the property being\n search.  If so, that result is added as a Decision.\n \n \u003cP\u003e There can be multiple paths where all constraints a matched resulting in multiple possible\n decisions.\u003c/P\u003e\n \u003cP\u003e A non-leaf node can have properties as well, that serve as a default if it\u0027s constraint\n is satisfied, but not of its children is satisfied or resulted in a decision.\u003c/P\u003e\n@param \u003cT\u003e the type of object that the constraints are checked against.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "root",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.constraint.DecisionNode\u003cT\u003e",
      "type_short": "DecisionNode",
      "constant_value": null
    },
    {
      "name": "constraintClassMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Class\u003c? extends generic.constraint.Constraint\u003cT\u003e\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "propertyNameSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cjava.lang.String\u003e",
      "type_short": "Set",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDecisionsSet",
      "comment": "Searches the decision tree for values of given property name that match the constraints\n within this tree.",
      "javadoc": "Searches the decision tree for values of given property name that match the constraints\n within this tree.\n@param testObject the object that the constraints are test against.\n@param propertyName the name of the property whose values are being collected.\n@return a DecisionSet containing all the values of the given property whose path in the\n tree matched all the constraints for the given test object.",
      "static": false,
      "params": [
        {
          "name": "testObject",
          "type_long": "T",
          "type_short": "T",
          "comment": "the object that the constraints are test against."
        },
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property whose values are being collected."
        }
      ],
      "return": {
        "type_long": "generic.constraint.DecisionSet",
        "type_short": "DecisionSet",
        "comment": "a DecisionSet containing all the values of the given property whose path in the\n tree matched all the constraints for the given test object."
      },
      "throws": []
    },
    {
      "name": "registerConstraintType",
      "comment": "Registers a constraint class to be recognized from an xml constraint specification file.",
      "javadoc": "Registers a constraint class to be recognized from an xml constraint specification file.\n@param name the name of the constraint which is also the xml tag value.\n@param constraintClass the constraint type which will be initialized from the xml constraint\n specification file.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the constraint which is also the xml tag value."
        },
        {
          "name": "constraintClass",
          "type_long": "java.lang.Class\u003c? extends generic.constraint.Constraint\u003cT\u003e\u003e",
          "type_short": "Class",
          "comment": "the constraint type which will be initialized from the xml constraint\n specification file."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerPropertyName",
      "comment": "Registers a property name.  Every tag in an xml constraint file (except the root tag which\n is unused) must be either a constraint name or a property name.",
      "javadoc": "Registers a property name.  Every tag in an xml constraint file (except the root tag which\n is unused) must be either a constraint name or a property name.\n@param propertyName the name of a valid property to be expected in an xml constraints file.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of a valid property to be expected in an xml constraints file."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadConstraints",
      "comment": "Loads the tree from an xml data contained within an input stream. Note: this method can be\n called multiple times, with each call appending to the existing tree.",
      "javadoc": "Loads the tree from an xml data contained within an input stream. Note: this method can be\n called multiple times, with each call appending to the existing tree.\n@param name the name of the input source so that decisions can be traced back to \n the appropriate xml constraints source.\n@param stream the InputStream from which to read an xml constraints specification.\n@throws IOException if an I/O problem occurs reading from the stream.\n@throws XmlParseException if the XML is not property formatted or a tag that is not\n a constraint name or property name is encountered.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the input source so that decisions can be traced back to \n the appropriate xml constraints source."
        },
        {
          "name": "stream",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "the InputStream from which to read an xml constraints specification."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O problem occurs reading from the stream."
        },
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": "if the XML is not property formatted or a tag that is not\n a constraint name or property name is encountered."
        }
      ]
    },
    {
      "name": "loadConstraints",
      "comment": "Loads the tree from an xml constraint file. Note: this method can be called multiple times,\n with each call appending to the existing tree.",
      "javadoc": "Loads the tree from an xml constraint file. Note: this method can be called multiple times,\n with each call appending to the existing tree.\n@param file the file that contains the xml for the constraint.\n@throws IOException if an I/O problem occurs reading from the stream.\n@throws XmlParseException if the XML is not property formatted or a tag that is not\n a constraint name or property name is encountered.",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the file that contains the xml for the constraint."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O problem occurs reading from the stream."
        },
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": "if the XML is not property formatted or a tag that is not\n a constraint name or property name is encountered."
        }
      ]
    },
    {
      "name": "processSubContraintsAndProperties",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "generic.constraint.DecisionNode\u003cT\u003e",
          "type_short": "DecisionNode",
          "comment": ""
        },
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getConstraint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.constraint.Constraint\u003cT\u003e",
        "type_short": "Constraint",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processPropertyElement",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "node",
          "type_long": "generic.constraint.DecisionNode\u003cT\u003e",
          "type_short": "DecisionNode",
          "comment": ""
        },
        {
          "name": "element",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": ""
        },
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readConstraint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "element",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.constraint.Constraint\u003cT\u003e",
        "type_short": "Constraint",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    }
  ]
}
