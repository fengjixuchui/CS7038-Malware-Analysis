{
  "name": "JarWriter",
  "comment": "JarWriter is a class for writing to a jar output stream.",
  "javadoc": "JarWriter is a class for writing to a jar output stream.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "jarOut",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.jar.JarOutputStream",
      "type_short": "JarOutputStream",
      "constant_value": null
    },
    {
      "name": "excludedExtensions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@param jarOut the the jar file output stream the zip entries are\n to be written to.",
      "static": false,
      "params": [
        {
          "name": "jarOut",
          "type_long": "java.util.jar.JarOutputStream",
          "type_short": "JarOutputStream",
          "comment": "the the jar file output stream the zip entries are\n to be written to."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "jarOut",
          "type_long": "java.util.jar.JarOutputStream",
          "type_short": "JarOutputStream",
          "comment": ""
        },
        {
          "name": "excludedExtensions",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "outputFile",
      "comment": "Outputs an individual file to the jar.",
      "javadoc": "Outputs an individual file to the jar.\n@param baseFile the file to be output\n@param jarPath the base path to prepend to the file as it is written\n to the jar output stream.\n@param monitor cancellable task monitor\n@return true if file is output to the jar file successfully.",
      "static": false,
      "params": [
        {
          "name": "baseFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to be output"
        },
        {
          "name": "jarPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the base path to prepend to the file as it is written\n to the jar output stream."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "cancellable task monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if file is output to the jar file successfully."
      },
      "throws": []
    },
    {
      "name": "outputEntry",
      "comment": "Outputs an individual entry to the jar.  The data input stream will be read until and EOF is read.",
      "javadoc": "Outputs an individual entry to the jar.  The data input stream will be read until and EOF is read.\n@param path entry path within the jar file\n@param time entry time\n@param in data input stream\n@param monitor cancellable task monitor\n@return true if entry is output to the jar file successfully.",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "entry path within the jar file"
        },
        {
          "name": "time",
          "type_long": "long",
          "type_short": "long",
          "comment": "entry time"
        },
        {
          "name": "in",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "data input stream"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "cancellable task monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if entry is output to the jar file successfully."
      },
      "throws": []
    },
    {
      "name": "outputRecursively",
      "comment": "Recursively outputs a directory to the jar output stream\n If baseFile is a file then it is simply output to the jar.",
      "javadoc": "Recursively outputs a directory to the jar output stream\n If baseFile is a file then it is simply output to the jar.\n@param baseFile the file or directory to be output\n@param jarPath the base path to prepend to the files as they are written\n to the jar output stream.\n@return true if all files are recursively output to the jar file.",
      "static": false,
      "params": [
        {
          "name": "baseFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file or directory to be output"
        },
        {
          "name": "jarPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the base path to prepend to the files as they are written\n to the jar output stream."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if all files are recursively output to the jar file."
      },
      "throws": []
    },
    {
      "name": "getJarOutputStream",
      "comment": "Return the jar output stream being used by this JarWriter.",
      "javadoc": "Return the jar output stream being used by this JarWriter.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.jar.JarOutputStream",
        "type_short": "JarOutputStream",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "main",
      "comment": "Simple test for the JarWriter",
      "javadoc": "Simple test for the JarWriter\n@param args args[0] is the source directory, args[1] is the output filename",
      "static": true,
      "params": [
        {
          "name": "args",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "args[0] is the source directory, args[1] is the output filename"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
