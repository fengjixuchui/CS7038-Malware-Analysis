{
  "name": "DequePush",
  "comment": "A context utility allowing stack management via a try-with-resources block",
  "javadoc": "A context utility allowing stack management via a try-with-resources block\n@param \u003cE\u003e the type of element pushed to the stack",
  "static": false,
  "implements": [
    "java.lang.AutoCloseable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "stack",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Deque\u003cE\u003e",
      "type_short": "Deque",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "stack",
          "type_long": "java.util.Deque\u003cE\u003e",
          "type_short": "Deque",
          "comment": ""
        },
        {
          "name": "elem",
          "type_long": "E",
          "type_short": "E",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "push",
      "comment": "Push an element to the given stack",
      "javadoc": "Push an element to the given stack\n@param stack the stack\n@param elem the element\n@return a context used to pop the element\n \n This is an idiomatic convenience, as in a try-with-resources block:\n \u003cpre\u003e\n {@code\n Deque\u003cString\u003e stack \u003d new LinkedList\u003c\u003e();\n try(DequePush\u003c?\u003e p \u003d DequePush.push(stack, \"Hello, World!\\n\")) {\n     System.out.println(stack.peek());\n }\n }\n \u003c/pre\u003e\n \n This idiom can be very useful if there is complex logic between the push and pop. It\u0027s easy\n to forget to pop; however, this convenience comes at the cost of a heap allocation.",
      "static": true,
      "params": [
        {
          "name": "stack",
          "type_long": "java.util.Deque\u003cE\u003e",
          "type_short": "Deque",
          "comment": "the stack"
        },
        {
          "name": "elem",
          "type_long": "E",
          "type_short": "E",
          "comment": "the element"
        }
      ],
      "return": {
        "type_long": "generic.util.DequePush\u003cE\u003e",
        "type_short": "DequePush",
        "comment": "a context used to pop the element\n \n This is an idiomatic convenience, as in a try-with-resources block:\n \n \n \n \n This idiom can be very useful if there is complex logic between the push and pop. It\u0027s easy\n to forget to pop; however, this convenience comes at the cost of a heap allocation."
      },
      "throws": []
    }
  ]
}
