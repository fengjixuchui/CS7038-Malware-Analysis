{
  "name": "Path",
  "comment": "A class to represent a PATH item.",
  "javadoc": "A class to represent a PATH item.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "GHIDRA_HOME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"$GHIDRA_HOME\""
    },
    {
      "name": "USER_HOME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"$USER_HOME\""
    },
    {
      "name": "file",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.jar.ResourceFile",
      "type_short": "ResourceFile",
      "constant_value": null
    },
    {
      "name": "isEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isEditable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isReadOnly",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Identifies an absolute directory path which has the following attributes:\n \n isEnabled \u003d true\n isEditable \u003d true\n isReadOnly \u003d false\n ",
      "javadoc": "Identifies an absolute directory path which has the following attributes:\n \u003cul\u003e\n \u003cli\u003eisEnabled \u003d true\u003c/li\u003e\n \u003cli\u003eisEditable \u003d true\u003c/li\u003e\n \u003cli\u003eisReadOnly \u003d false\u003c/li\u003e\n \u003c/ul\u003e\n@param file absolute directory path",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "absolute directory path"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Identifies an absolute directory path which has the following attributes:\n \n isEnabled \u003d true\n isEditable \u003d true\n isReadOnly \u003d false\n ",
      "javadoc": "Identifies an absolute directory path which has the following attributes:\n \u003cul\u003e\n \u003cli\u003eisEnabled \u003d true\u003c/li\u003e\n \u003cli\u003eisEditable \u003d true\u003c/li\u003e\n \u003cli\u003eisReadOnly \u003d false\u003c/li\u003e\n \u003c/ul\u003e\n@param file absolute directory path",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "absolute directory path"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Identifies an absolute directory path with the specified attributes.",
      "javadoc": "Identifies an absolute directory path with the specified attributes.\n@param file absolute directory path\n@param isEnabled directory path will be searched if true\n@param isEditable if true files contained within directory are considered editable\n@param isReadOnly if true files contained within directory are considered read-only",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "absolute directory path"
        },
        {
          "name": "isEnabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "directory path will be searched if true"
        },
        {
          "name": "isEditable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true files contained within directory are considered editable"
        },
        {
          "name": "isReadOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true files contained within directory are considered read-only"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Identifies an absolute directory path which has the following attributes:\n \n isEnabled \u003d true\n isEditable \u003d true\n isReadOnly \u003d false\n ",
      "javadoc": "Identifies an absolute directory path which has the following attributes:\n \u003cul\u003e\n \u003cli\u003eisEnabled \u003d true\u003c/li\u003e\n \u003cli\u003eisEditable \u003d true\u003c/li\u003e\n \u003cli\u003eisReadOnly \u003d false\u003c/li\u003e\n \u003c/ul\u003e\n@param path absolute directory path",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "absolute directory path"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Identifies an absolute directory path which has the following attributes:\n \n isEditable \u003d true\n isReadOnly \u003d false\n ",
      "javadoc": "Identifies an absolute directory path which has the following attributes:\n \u003cul\u003e\n \u003cli\u003eisEditable \u003d true\u003c/li\u003e\n \u003cli\u003eisReadOnly \u003d false\u003c/li\u003e\n \u003c/ul\u003e\n@param path absolute directory path\n@param enabled directory path will be searched if true",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "absolute directory path"
        },
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "directory path will be searched if true"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Identifies an absolute directory path with the specified attributes.",
      "javadoc": "Identifies an absolute directory path with the specified attributes.\n@param path absolute directory path\n@param isEnabled directory path will be searched if true\n@param isEditable if true files contained within directory are considered editable\n@param isReadOnly if true files contained within directory are considered read-only",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "absolute directory path"
        },
        {
          "name": "isEnabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "directory path will be searched if true"
        },
        {
          "name": "isEditable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true files contained within directory are considered editable"
        },
        {
          "name": "isReadOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true files contained within directory are considered read-only"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveGhidraHome",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "scriptPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isReadOnly",
      "comment": "Returns true if this path is read-only, which\n indicates the path cannot be written.",
      "javadoc": "Returns true if this path is read-only, which\n indicates the path cannot be written.\n@return true if this path is read-only",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this path is read-only"
      },
      "throws": []
    },
    {
      "name": "isEditable",
      "comment": "Returns true if this path can be modified.",
      "javadoc": "Returns true if this path can be modified.\n@return true if this path can be modified",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this path can be modified"
      },
      "throws": []
    },
    {
      "name": "isEnabled",
      "comment": "Returns true if this path is enabled.\n Enablement indicates the path should be used.",
      "javadoc": "Returns true if this path is enabled.\n Enablement indicates the path should be used.\n@return true if this path is enabled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this path is enabled"
      },
      "throws": []
    },
    {
      "name": "setEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "isEnabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fromPathString",
      "comment": "Parse the path string with path element placeholders, such as \n #GHIDRA_HOME.",
      "javadoc": "Parse the path string \u003cb\u003ewith path element placeholders\u003c/b\u003e, such as \n {@link #GHIDRA_HOME}.\n@param path the path\n@return the path as a ResourceFile.",
      "static": true,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path"
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": "the path as a ResourceFile."
      },
      "throws": []
    },
    {
      "name": "toPathString",
      "comment": "Returns the path as a string with path element placeholders, such as \n #GHIDRA_HOME.",
      "javadoc": "Returns the path as a string \u003cb\u003ewith path element placeholders\u003c/b\u003e, such as \n {@link #GHIDRA_HOME}.\n@param file the file to translate\n@return the path as a string .",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the file to translate"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the path as a string ."
      },
      "throws": []
    },
    {
      "name": "getPathAsString",
      "comment": "Returns the path as a string with path element placeholders, such as \n #GHIDRA_HOME.",
      "javadoc": "Returns the path as a string \u003cb\u003ewith path element placeholders\u003c/b\u003e, such as \n {@link #GHIDRA_HOME}.\n@return the path as a string .",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the path as a string ."
      },
      "throws": []
    },
    {
      "name": "isInstallationFile",
      "comment": "Returns true if the given path is a file inside of the current Ghidra application.",
      "javadoc": "Returns true if the given path is a file inside of the current Ghidra application.\n@return true if the given path is a file inside of the current Ghidra application.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given path is a file inside of the current Ghidra application."
      },
      "throws": []
    },
    {
      "name": "setPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "exists",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "generic.util.Path",
          "type_short": "Path",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
