{
  "name": "ImageUtils",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DEFAULT_TRANSPARENCY_ALPHA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "float",
      "type_short": "float",
      "constant_value": "0.4"
    },
    {
      "name": "mediaTrackerComponent",
      "comment": "A component to pass into the media tracker, as required by the constructor of the \n MediaTracker.",
      "javadoc": "A component to pass into the media tracker, as required by the constructor of the \n MediaTracker.",
      "static": true,
      "type_long": "javax.swing.JComponent",
      "type_short": "JComponent",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createImage",
      "comment": "Creates an image of the given component",
      "javadoc": "Creates an image of the given component\n@param c the component\n@return the image",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component"
        }
      ],
      "return": {
        "type_long": "java.awt.Image",
        "type_short": "Image",
        "comment": "the image"
      },
      "throws": []
    },
    {
      "name": "padImage",
      "comment": "Pads the given image with space in the amount given.",
      "javadoc": "Pads the given image with space in the amount given.\n@param i the image to pad\n@param c the color to use for the padding background\n@param top the top padding\n@param left the left padding\n@param right the right padding\n@param bottom the bottom padding\n@return a new image with the given image centered inside of padding",
      "static": true,
      "params": [
        {
          "name": "i",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": "the image to pad"
        },
        {
          "name": "c",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the color to use for the padding background"
        },
        {
          "name": "top",
          "type_long": "int",
          "type_short": "int",
          "comment": "the top padding"
        },
        {
          "name": "left",
          "type_long": "int",
          "type_short": "int",
          "comment": "the left padding"
        },
        {
          "name": "right",
          "type_long": "int",
          "type_short": "int",
          "comment": "the right padding"
        },
        {
          "name": "bottom",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bottom padding"
        }
      ],
      "return": {
        "type_long": "java.awt.Image",
        "type_short": "Image",
        "comment": "a new image with the given image centered inside of padding"
      },
      "throws": []
    },
    {
      "name": "crop",
      "comment": "Crops the given image, keeping the given bounds",
      "javadoc": "Crops the given image, keeping the given bounds\n@param i the image to crop\n@param bounds the new bounds\n@return a new image based on the given image, cropped to the given bounds.",
      "static": true,
      "params": [
        {
          "name": "i",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": "the image to crop"
        },
        {
          "name": "bounds",
          "type_long": "java.awt.Rectangle",
          "type_short": "Rectangle",
          "comment": "the new bounds"
        }
      ],
      "return": {
        "type_long": "java.awt.Image",
        "type_short": "Image",
        "comment": "a new image based on the given image, cropped to the given bounds."
      },
      "throws": []
    },
    {
      "name": "createEmptyImage",
      "comment": "Creates a new image of the given size.  This image is suitable for drawing operations.",
      "javadoc": "Creates a new image of the given size.  This image is suitable for drawing operations.\n@param width the width of the new image\n@param height the height of the new image\n@return a new image of the given size.  This image is suitable for drawing operations.",
      "static": true,
      "params": [
        {
          "name": "width",
          "type_long": "int",
          "type_short": "int",
          "comment": "the width of the new image"
        },
        {
          "name": "height",
          "type_long": "int",
          "type_short": "int",
          "comment": "the height of the new image"
        }
      ],
      "return": {
        "type_long": "java.awt.image.BufferedImage",
        "type_short": "BufferedImage",
        "comment": "a new image of the given size.  This image is suitable for drawing operations."
      },
      "throws": []
    },
    {
      "name": "placeImagesSideBySide",
      "comment": "Places the two given images side-by-side into a new image.",
      "javadoc": "Places the two given images side-by-side into a new image.\n@param left the left image\n@param right the right image\n@return a new image with the two given images side-by-side into a new image.",
      "static": true,
      "params": [
        {
          "name": "left",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": "the left image"
        },
        {
          "name": "right",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": "the right image"
        }
      ],
      "return": {
        "type_long": "java.awt.Image",
        "type_short": "Image",
        "comment": "a new image with the two given images side-by-side into a new image."
      },
      "throws": []
    },
    {
      "name": "toRenderedImage",
      "comment": "Turns the given image into a RenderedImage",
      "javadoc": "Turns the given image into a {@link RenderedImage}\n@param image the image\n@return the rendered image",
      "static": true,
      "params": [
        {
          "name": "image",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": "the image"
        }
      ],
      "return": {
        "type_long": "java.awt.image.RenderedImage",
        "type_short": "RenderedImage",
        "comment": "the rendered image"
      },
      "throws": []
    },
    {
      "name": "getBufferedImage",
      "comment": "Copies this image into a buffered image.  If this image is already a buffered image, then\n it will be returned.",
      "javadoc": "Copies this image into a buffered image.  If this image is already a buffered image, then\n it will be returned.\n@param image the image\n@return the buffered image",
      "static": true,
      "params": [
        {
          "name": "image",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": "the image"
        }
      ],
      "return": {
        "type_long": "java.awt.image.BufferedImage",
        "type_short": "BufferedImage",
        "comment": "the buffered image"
      },
      "throws": []
    },
    {
      "name": "waitForImage",
      "comment": "Waits a reasonable amount of time for the given image to load",
      "javadoc": "Waits a reasonable amount of time for the given image to load\n@param imageName the name of the image\n@param image the image for which to wait\n@return true if the wait was successful",
      "static": true,
      "params": [
        {
          "name": "imageName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the image"
        },
        {
          "name": "image",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": "the image for which to wait"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the wait was successful"
      },
      "throws": []
    },
    {
      "name": "writeFile",
      "comment": "Write the specified image to file in PNG format",
      "javadoc": "Write the specified image to file in PNG format\n@param i the image to save\n@param imageFile the file to save the image to\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "i",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": "the image to save"
        },
        {
          "name": "imageFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to save the image to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeFile",
      "comment": "Write the specified image to file in PNG format",
      "javadoc": "Write the specified image to file in PNG format\n@param i the image to save\n@param imageFile the file to save the image to\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "i",
          "type_long": "java.awt.image.RenderedImage",
          "type_short": "RenderedImage",
          "comment": "the image to save"
        },
        {
          "name": "imageFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to save the image to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readFile",
      "comment": "Load an image from a file",
      "javadoc": "Load an image from a file\n@param imageFile image source-data file\n@return the image, decoded from bytes in specified file\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "imageFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "image source-data file"
        }
      ],
      "return": {
        "type_long": "java.awt.image.BufferedImage",
        "type_short": "BufferedImage",
        "comment": "the image, decoded from bytes in specified file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeIconToPNG",
      "comment": "Writes the given icon out to the file denoted by filename  in the PNG format.",
      "javadoc": "Writes the given icon out to the file denoted by \u003ccode\u003efilename\u003c/code\u003e \u003cb\u003e in the PNG format\u003c/b\u003e.\n@param icon the icon to write\n@param filename the filename denoting the write destination\n@throws IOException see {@link ImageIO#write(RenderedImage, String, File)}",
      "static": true,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon to write"
        },
        {
          "name": "filename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the filename denoting the write destination"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "see ImageIO#write(RenderedImage, String, File)"
        }
      ]
    },
    {
      "name": "makeTransparent",
      "comment": "Make the specified icon semi-transparent using the default transparency alpha",
      "javadoc": "Make the specified icon semi-transparent using the default transparency alpha\n@param icon The icon to make semi-transparent\n@return a new icon, based on the original, made semi-transparent\n@see ImageUtils#DEFAULT_TRANSPARENCY_ALPHA",
      "static": true,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "The icon to make semi-transparent"
        }
      ],
      "return": {
        "type_long": "javax.swing.Icon",
        "type_short": "Icon",
        "comment": "a new icon, based on the original, made semi-transparent"
      },
      "throws": []
    },
    {
      "name": "makeTransparent",
      "comment": "Make the specified icon semi-transparent using the specified transparency alpha",
      "javadoc": "Make the specified icon semi-transparent using the specified transparency alpha\n@param icon the icon to make semi-transparent\n@param alpha the alpha value to use in making the icon transparent\n@return a new icon, based on the original, made semi-transparent",
      "static": true,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon to make semi-transparent"
        },
        {
          "name": "alpha",
          "type_long": "float",
          "type_short": "float",
          "comment": "the alpha value to use in making the icon transparent"
        }
      ],
      "return": {
        "type_long": "javax.swing.Icon",
        "type_short": "Icon",
        "comment": "a new icon, based on the original, made semi-transparent"
      },
      "throws": []
    },
    {
      "name": "createScaledImage",
      "comment": "Creates a scaled image based upon the given image.\n NOTE: Avoid invocation by a static initializer.",
      "javadoc": "Creates a scaled image based upon the given image.\n NOTE: Avoid invocation by a static initializer.\n@param image the image to scale\n@param width the new width\n@param height the new height\n@param hints {@link RenderingHints} used by {@link Graphics2D}\n@return a scaled version of the given image",
      "static": true,
      "params": [
        {
          "name": "image",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": "the image to scale"
        },
        {
          "name": "width",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new width"
        },
        {
          "name": "height",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new height"
        },
        {
          "name": "hints",
          "type_long": "int",
          "type_short": "int",
          "comment": "RenderingHints used by Graphics2D"
        }
      ],
      "return": {
        "type_long": "java.awt.Image",
        "type_short": "Image",
        "comment": "a scaled version of the given image"
      },
      "throws": []
    },
    {
      "name": "createDisabledImage",
      "comment": "Creates a disabled version of the given image.  The disabled version will be grayed\n and have the varying gray levels blended together.",
      "javadoc": "Creates a disabled version of the given image.  The disabled version will be grayed\n and have the varying gray levels blended together.\n@param image the image to disable\n@param brightnessPercent the amount of brightness to apply; 0-100\n@return the new image",
      "static": true,
      "params": [
        {
          "name": "image",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": "the image to disable"
        },
        {
          "name": "brightnessPercent",
          "type_long": "int",
          "type_short": "int",
          "comment": "the amount of brightness to apply; 0-100"
        }
      ],
      "return": {
        "type_long": "java.awt.Image",
        "type_short": "Image",
        "comment": "the new image"
      },
      "throws": []
    },
    {
      "name": "changeColor",
      "comment": "Creates a new image that is the same as the given image but has the given colored \n pixels replaced with the given new color",
      "javadoc": "Creates a new image that is the same as the given image but has the given colored \n pixels replaced with the given new color\n@param image the image to change\n@param oldColor the color to replace\n@param newColor the color to use\n@return the new image",
      "static": true,
      "params": [
        {
          "name": "image",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": "the image to change"
        },
        {
          "name": "oldColor",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the color to replace"
        },
        {
          "name": "newColor",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the color to use"
        }
      ],
      "return": {
        "type_long": "java.awt.Image",
        "type_short": "Image",
        "comment": "the new image"
      },
      "throws": []
    },
    {
      "name": "getMediaTrackerComponent",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "javax.swing.JComponent",
        "type_short": "JComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "filterRgbDisabledImage",
      "comment": "Takes in RGB pixel data and then converts the pixel into a gray color with a brightness\n based upon brightnessPercent.",
      "javadoc": "Takes in RGB pixel data and then converts the pixel into a gray color with a brightness\n based upon \u003ccode\u003ebrightnessPercent\u003c/code\u003e.\n@param rgbPixels The RGB pixel data for a given pixel.\n@param destination The converted pixel data.\n@param brightnessPercent The amount of brightness to include in the gray value, where 100\n        percent is the brightest possible value.\n@return The \u003ccode\u003edestination\u003c/code\u003e array filled with the new pixel data.",
      "static": true,
      "params": [
        {
          "name": "rgbPixels",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "The RGB pixel data for a given pixel."
        },
        {
          "name": "destination",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "The converted pixel data."
        },
        {
          "name": "brightnessPercent",
          "type_long": "int",
          "type_short": "int",
          "comment": "The amount of brightness to include in the gray value, where 100\n        percent is the brightest possible value."
        }
      ],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "The destination array filled with the new pixel data."
      },
      "throws": []
    },
    {
      "name": "filterRgbChangeColor",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "rgbPixels",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        },
        {
          "name": "destination",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        },
        {
          "name": "oldRgb",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        },
        {
          "name": "newRgb",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": ""
      },
      "throws": []
    }
  ]
}
