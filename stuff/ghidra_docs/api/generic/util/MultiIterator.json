{
  "name": "MultiIterator",
  "comment": "An iterator that is comprised of one or more PeekableIterators.  The type T of the \n the iterators must either implement Comparable directly or you must provide a \n Comparator for comparing the types.  Further, it is assumed that the iterators return\n values in sorted order.  If the sorted order is reversed, then that must be indicated in \n the constructor of this class.\n \n This class allows duplicate items in the iterators.  Thus, if you do not wish to process \n duplicate values, then you need to de-dup the data returned from #next().  \n Alternatively, you could subclass this iterator and de-dup the returned values.\n \n This class also does not handle null items returned during the iteration process.",
  "javadoc": "An iterator that is comprised of one or more {@link PeekableIterator}s.  The type \u003ccode\u003eT\u003c/code\u003e of the \n the iterators must either implement {@link Comparable} directly or you must provide a \n {@link Comparator} for comparing the types.  Further, it is assumed that the iterators return\n values in sorted order.  If the sorted order is reversed, then that must be indicated in \n the constructor of this class.\n \u003cp\u003e\n This class allows duplicate items in the iterators.  Thus, if you do not wish to process \n duplicate values, then you need to de-dup the data returned from {@link #next()}.  \n Alternatively, you could subclass this iterator and de-dup the returned values.\n \u003cp\u003e\n This class also does not handle null items returned during the iteration process.\n@param \u003cT\u003e the type of this iterator",
  "static": false,
  "implements": [
    "java.util.Iterator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "iterators",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cgeneric.util.PeekableIterator\u003cT\u003e\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "comparator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Comparator\u003cT\u003e",
      "type_short": "Comparator",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Use this constructor when the items of the iterators are naturally comparable (i.e., \n they implement Comparable).",
      "javadoc": "Use this constructor when the items of the iterators are naturally comparable (i.e., \n they implement {@link Comparable}).\n@param iterators the iterators that provide the data\n@param forward true if the iterators provide data sorted ascending; false for descending",
      "static": false,
      "params": [
        {
          "name": "iterators",
          "type_long": "java.util.List\u003cgeneric.util.PeekableIterator\u003cT\u003e\u003e",
          "type_short": "List",
          "comment": "the iterators that provide the data"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the iterators provide data sorted ascending; false for descending"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Use this constructor when the items of the iterators are not naturally comparable (i.e., \n they do not implement Comparable).",
      "javadoc": "Use this constructor when the items of the iterators are not naturally comparable (i.e., \n they do not implement {@link Comparable}).\n@param iterators the iterators that provide the data\n@param comparator the comparator used to find the next item\n@param forward true if the iterators provide data sorted ascending; false for descending",
      "static": false,
      "params": [
        {
          "name": "iterators",
          "type_long": "java.util.List\u003cgeneric.util.PeekableIterator\u003cT\u003e\u003e",
          "type_short": "List",
          "comment": "the iterators that provide the data"
        },
        {
          "name": "comparator",
          "type_long": "java.util.Comparator\u003cT\u003e",
          "type_short": "Comparator",
          "comment": "the comparator used to find the next item"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the iterators provide data sorted ascending; false for descending"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasNext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "next",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    }
  ]
}
