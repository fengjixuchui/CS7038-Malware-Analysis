{
  "name": "Lcs",
  "comment": "Abstract class for finding the Longest Common Subsequence (LCS) between two \n sequences of Matchable objects, x and y.\n \n The performance of this algorithm is O(n^2).  Thus, large inputs can cause much processor\n and memory usage.   This class has an upper limit (see #getSizeLimit()) to prevent\n accidental system failure.",
  "javadoc": "Abstract class for finding the Longest Common Subsequence (LCS) between two \n sequences of Matchable objects, \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e.\n \n \u003cp\u003eThe performance of this algorithm is O(n^2).  Thus, large inputs can cause much processor\n and memory usage.   This class has an upper limit (see {@link #getSizeLimit()}) to prevent\n accidental system failure.\n@param \u003cT\u003e the type of the objects being compared",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DEFAULT_SIZE_LIMIT",
      "comment": "Somewhat arbitrary upper-bound restriction.  1M is 1000 * 1000",
      "javadoc": "Somewhat arbitrary upper-bound restriction.  1M is 1000 * 1000",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "sizeLimit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "c",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[][]",
      "type_short": "int[][]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lengthOfX",
      "comment": "Returns the length of the x sequence",
      "javadoc": "Returns the length of the x sequence\n@return the length of the x sequence",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of the x sequence"
      },
      "throws": []
    },
    {
      "name": "lengthOfY",
      "comment": "Returns the length of the y sequence",
      "javadoc": "Returns the length of the y sequence\n@return the length of the y sequence",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of the y sequence"
      },
      "throws": []
    },
    {
      "name": "valueOfX",
      "comment": "Gets the value of the x sequence at the given index, where index is 1-based",
      "javadoc": "Gets the value of the x sequence at the given index, where index is 1-based\n@param index the 1-based position of interest in the x sequence\n@return the value in the x sequence at \u003ccode\u003eindex\u003c/code\u003e",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the 1-based position of interest in the x sequence"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the value in the x sequence at index"
      },
      "throws": []
    },
    {
      "name": "valueOfY",
      "comment": "Gets the value of the y sequence at the given index, where index is 1-based",
      "javadoc": "Gets the value of the y sequence at the given index, where index is 1-based\n@param index the 1-based position of interest in the Y sequence\n@return the value in the y sequence at \u003ccode\u003eindex\u003c/code\u003e",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the 1-based position of interest in the Y sequence"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the value in the y sequence at index"
      },
      "throws": []
    },
    {
      "name": "matches",
      "comment": "Returns true if the value of x and y match",
      "javadoc": "Returns true if the value of x and y match\n@param x the x-sequence element of interest\n@param y the y-sequence element of interest\n@return true if \u003ccode\u003ex\u003c/code\u003e matches \u003ccode\u003ey\u003c/code\u003e; false otherwise",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "T",
          "type_short": "T",
          "comment": "the x-sequence element of interest"
        },
        {
          "name": "y",
          "type_long": "T",
          "type_short": "T",
          "comment": "the y-sequence element of interest"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if x matches y; false otherwise"
      },
      "throws": []
    },
    {
      "name": "calculateLCS",
      "comment": "Compute the LCS",
      "javadoc": "Compute the LCS\n@param monitor the task monitor",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "tooBig",
      "comment": "Defines an limit in the overall size of the inputs that above which no processing will\n take place.  Any value over the limit will produce an empty LCS.",
      "javadoc": "Defines an limit in the overall size of the inputs that above which no processing will\n take place.  Any value over the limit will produce an empty LCS.\n@return true if too big",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if too big"
      },
      "throws": []
    },
    {
      "name": "setSizeLimit",
      "comment": "Changes the size limit of this LCS, past which no calculations will be performed",
      "javadoc": "Changes the size limit of this LCS, past which no calculations will be performed\n@param newLimit the new limit",
      "static": false,
      "params": [
        {
          "name": "newLimit",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new limit"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeLimit",
      "comment": "Returns the current size limit, past which no calculations will be performed",
      "javadoc": "Returns the current size limit, past which no calculations will be performed\n@return the size limit\n@see #setSizeLimit(int)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size limit"
      },
      "throws": []
    },
    {
      "name": "getLcs",
      "comment": "Returns a list of the longest common subsequence.  This result will be empty if the \n #getSizeLimit() has been reached.",
      "javadoc": "Returns a list of the longest common subsequence.  This result will be empty if the \n {@link #getSizeLimit()} has been reached.\n@return the list",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": "the list"
      },
      "throws": []
    },
    {
      "name": "getLcs",
      "comment": "Returns a list of the longest common subsequence. This result will be empty if the \n #getSizeLimit() has been reached.",
      "javadoc": "Returns a list of the longest common subsequence. This result will be empty if the \n {@link #getSizeLimit()} has been reached.\n@param monitor the task monitor\n@return the LCS list\n@throws CancelledException if the monitor is cancelled",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": "the LCS list"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor is cancelled"
        }
      ]
    },
    {
      "name": "doGetLcs",
      "comment": "Get the actual LCS based upon the already created matrix",
      "javadoc": "Get the actual LCS based upon the already created matrix\n@param monitor the task monitor\n@return the LCS list\n@throws CancelledException if the monitor is cancelled",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": "the LCS list"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor is cancelled"
        }
      ]
    }
  ]
}
