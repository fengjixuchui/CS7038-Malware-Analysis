{
  "name": "ReducingLcs",
  "comment": "Calculates the longest common subsequence (LCS) between two sequences of Matchable \n objects, x and y.\n \n This is an optimizing version of the Lcs that will pre-calculate all similar \n items from the beginning and end of the two given sequences.  Doing this will reduce \n the size of the matrix created by the parent class, greatly so in the case that the \n two inputs are mostly the same in the beginning and end.  (Imagine an edit of a source \n code file, where the typical change is somewhere in the middle of the file.  In this example, \n the optimization performed here can greatly decrease the amount of work to be performed when \n calculating the LCS.)\n \n Note: the parent LCS algorithm is bound by #getSizeLimit().  However, this class \n allows clients to work around this restriction when the data has a similar beginning and ending, \n as the similar parts will not be counted against the size limit.",
  "javadoc": "Calculates the longest common subsequence (LCS) between two sequences of Matchable \n objects, \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e.\n \n \u003cp\u003eThis is an optimizing version of the {@link Lcs} that will pre-calculate all similar \n items from the beginning and end of the two given sequences.  Doing this will reduce \n the size of the matrix created by the parent class, greatly so in the case that the \n two inputs are mostly the same in the beginning and end.  (Imagine an edit of a source \n code file, where the typical change is somewhere in the middle of the file.  In this example, \n the optimization performed here can greatly decrease the amount of work to be performed when \n calculating the LCS.)\n \n \u003cp\u003eNote: the parent LCS algorithm is bound by {@link #getSizeLimit()}.  However, this class \n allows clients to work around this restriction when the data has a similar beginning and ending, \n as the similar parts will not be counted against the size limit.\n@param \u003cI\u003e The input sequence type\n@param \u003cT\u003e the individual element type of the input sequence",
  "static": false,
  "implements": [],
  "extends": "generic.algorithms.Lcs",
  "fields": [
    {
      "name": "xSource",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "I",
      "type_short": "I",
      "constant_value": null
    },
    {
      "name": "ySource",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "I",
      "type_short": "I",
      "constant_value": null
    },
    {
      "name": "x",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "I",
      "type_short": "I",
      "constant_value": null
    },
    {
      "name": "y",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "I",
      "type_short": "I",
      "constant_value": null
    },
    {
      "name": "startn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "endn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param ix the input sequence \u003ccode\u003ex\u003c/code\u003e\n@param iy the input sequence \u003ccode\u003ey\u003c/code\u003e",
      "static": false,
      "params": [
        {
          "name": "ix",
          "type_long": "I",
          "type_short": "I",
          "comment": "the input sequence x"
        },
        {
          "name": "iy",
          "type_long": "I",
          "type_short": "I",
          "comment": "the input sequence y"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEnd",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "I",
          "type_short": "I",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "reduce",
      "comment": "Create a subsequence from the given input sequence.",
      "javadoc": "Create a subsequence from the given input sequence.\n@param i the input sequence; 0-based (x or y)\n@param start the start index; 0-based (inclusive)\n@param end the end index (exclusive)\n@return the subsequence",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "I",
          "type_short": "I",
          "comment": "the input sequence; 0-based (x or y)"
        },
        {
          "name": "start",
          "type_long": "int",
          "type_short": "int",
          "comment": "the start index; 0-based (inclusive)"
        },
        {
          "name": "end",
          "type_long": "int",
          "type_short": "int",
          "comment": "the end index (exclusive)"
        }
      ],
      "return": {
        "type_long": "I",
        "type_short": "I",
        "comment": "the subsequence"
      },
      "throws": []
    },
    {
      "name": "lengthOf",
      "comment": "Return the length of the given sequence",
      "javadoc": "Return the length of the given sequence\n@param i the input sequence (x or y)\n@return the length",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "I",
          "type_short": "I",
          "comment": "the input sequence (x or y)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length"
      },
      "throws": []
    },
    {
      "name": "valueOf",
      "comment": "Return the value at the given 0-based offset",
      "javadoc": "Return the value at the given 0-based offset\n@param i the input sequence (x or y)\n@param offset the offset\n@return the value",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "I",
          "type_short": "I",
          "comment": "the input sequence (x or y)"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the value"
      },
      "throws": []
    },
    {
      "name": "doGetLcs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "lengthOfX",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lengthOfY",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "valueOfX",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "valueOfY",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "matches",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tx",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        },
        {
          "name": "ty",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMatchCountFromStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMatchCountFromEnd",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
