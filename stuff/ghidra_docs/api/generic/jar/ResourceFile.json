{
  "name": "ResourceFile",
  "comment": "Class for representing file object regardless of whether they are actual files in the file system or\n or files stored inside of a jar file.  This class provides most all the same capabilities as the\n File class.",
  "javadoc": "Class for representing file object regardless of whether they are actual files in the file system or\n or files stored inside of a jar file.  This class provides most all the same capabilities as the\n File class.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "JAR_FILE_PREFIX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"jar:file:\""
    },
    {
      "name": "resource",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.jar.Resource",
      "type_short": "Resource",
      "constant_value": null
    },
    {
      "name": "jarRootsMap",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Map\u003cjava.lang.String,generic.jar.JarResource\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a ResourceFile that represents a normal file in the file system.",
      "javadoc": "Construct a ResourceFile that represents a normal file in the file system.\n@param file the file in the file system.",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file in the file system."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new ResourceFile from a parent file and a relative child path.",
      "javadoc": "Construct a new ResourceFile from a parent file and a relative child path.\n@param resourceFile the parent file\n@param path the child path.",
      "static": false,
      "params": [
        {
          "name": "resourceFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the parent file"
        },
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the child path."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "resource",
          "type_long": "generic.jar.Resource",
          "type_short": "Resource",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a Resource file from string path that can be either a file path or a jar url.",
      "javadoc": "Constructs a Resource file from string path that can be either a file path or a jar url.\n@param absolutePath the path to the file.",
      "static": false,
      "params": [
        {
          "name": "absolutePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path to the file."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a Resource file from string path that can be either a file path or a jar url.",
      "javadoc": "Constructs a Resource file from string path that can be either a file path or a jar url.\n@param absolutePath the path to the file.\n@param filter The filter used to exclude files from being loaded",
      "static": false,
      "params": [
        {
          "name": "absolutePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path to the file."
        },
        {
          "name": "filter",
          "type_long": "generic.jar.JarEntryFilter",
          "type_short": "JarEntryFilter",
          "comment": "The filter used to exclude files from being loaded"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "openJarResourceFile",
      "comment": "Creates a new Root ResourceFile for a given jar file.",
      "javadoc": "Creates a new Root ResourceFile for a given jar file.\n@param jarFile the jar file to open.\n@param filter JarEntryFilter that will filter out unwanted jar entries.\n@return A Resource file that represents the root of the jarfile file system.\n@throws IOException if the jar file can\u0027t be read.",
      "static": true,
      "params": [
        {
          "name": "jarFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the jar file to open."
        },
        {
          "name": "filter",
          "type_long": "generic.jar.JarEntryFilter",
          "type_short": "JarEntryFilter",
          "comment": "JarEntryFilter that will filter out unwanted jar entries."
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": "A Resource file that represents the root of the jarfile file system."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the jar file can\u0027t be read."
        }
      ]
    },
    {
      "name": "getAbsolutePath",
      "comment": "Returns the absolute file path for this file.",
      "javadoc": "Returns the absolute file path for this file.\n@return the absolute file path for this file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the absolute file path for this file."
      },
      "throws": []
    },
    {
      "name": "getCanonicalPath",
      "comment": "Returns the canonical file path for this file.",
      "javadoc": "Returns the canonical file path for this file.\n@return the absolute file path for this file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the absolute file path for this file."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "listFiles",
      "comment": "Returns a array of ResourceFiles if this ResourceFile is a directory. Otherwise return null.",
      "javadoc": "Returns a array of ResourceFiles if this ResourceFile is a directory. Otherwise return null.\n@return the child ResourceFiles if this is a directory, null otherwise.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "generic.jar.ResourceFile[]",
        "type_short": "generic.jar.ResourceFile[]",
        "comment": "the child ResourceFiles if this is a directory, null otherwise."
      },
      "throws": []
    },
    {
      "name": "listFiles",
      "comment": "Returns a array of ResourceFiles if this ResourceFile is a directory. Otherwise return null.",
      "javadoc": "Returns a array of ResourceFiles if this ResourceFile is a directory. Otherwise return null.\n@param filter a filter to restrict the array of files returned.\n@return the child ResourceFiles if this is a directory, null otherwise.",
      "static": false,
      "params": [
        {
          "name": "filter",
          "type_long": "generic.jar.ResourceFileFilter",
          "type_short": "ResourceFileFilter",
          "comment": "a filter to restrict the array of files returned."
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile[]",
        "type_short": "generic.jar.ResourceFile[]",
        "comment": "the child ResourceFiles if this is a directory, null otherwise."
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the simple name of the file.",
      "javadoc": "Returns the simple name of the file.\n@return the simple name of the file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the simple name of the file."
      },
      "throws": []
    },
    {
      "name": "isDirectory",
      "comment": "Returns true if this Resource file exists and is a directory.",
      "javadoc": "Returns true if this Resource file exists and is a directory.\n@return true if this Resource file exists and is a directory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this Resource file exists and is a directory."
      },
      "throws": []
    },
    {
      "name": "getParentFile",
      "comment": "Returns the parent of this ResourceFile or null if it is a root.",
      "javadoc": "Returns the parent of this ResourceFile or null if it is a root.\n@return the parent of this ResourceFile or null if it is a root.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": "the parent of this ResourceFile or null if it is a root."
      },
      "throws": []
    },
    {
      "name": "toURL",
      "comment": "Returns a URL that represents this file object.",
      "javadoc": "Returns a URL that represents this file object.\n@return a URL that represents this file object.\n@throws MalformedURLException if a URL can\u0027t be formed for this file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.net.URL",
        "type_short": "URL",
        "comment": "a URL that represents this file object."
      },
      "throws": [
        {
          "type_long": "java.net.MalformedURLException",
          "type_short": "MalformedURLException",
          "comment": "if a URL can\u0027t be formed for this file."
        }
      ]
    },
    {
      "name": "lastModified",
      "comment": "Returns the time that this file was last modified.",
      "javadoc": "Returns the time that this file was last modified.\n@return the time that this file was last modified.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the time that this file was last modified."
      },
      "throws": []
    },
    {
      "name": "getInputStream",
      "comment": "If this file exists and is not a directory, it will return an InputStream for the file\u0027s \n contents.",
      "javadoc": "If this file exists and is not a directory, it will return an InputStream for the file\u0027s \n contents.\n@return an InputStream for the file\u0027s contents.\n@throws FileNotFoundException if the file does not exist.\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": "an InputStream for the file\u0027s contents."
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the file does not exist."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "delete",
      "comment": "Attempts to delete the file.  Not supported (returns false) for files within a jar file.",
      "javadoc": "Attempts to delete the file.  Not supported (returns false) for files within a jar file.\n@return true if the file was deleted, false otherwise.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the file was deleted, false otherwise."
      },
      "throws": []
    },
    {
      "name": "exists",
      "comment": "Returns true if the file exists.",
      "javadoc": "Returns true if the file exists.\n@return true if the file exists.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the file exists."
      },
      "throws": []
    },
    {
      "name": "getOutputStream",
      "comment": "Returns an OutputStream if the file can be opened for writing.",
      "javadoc": "Returns an OutputStream if the file can be opened for writing.\n@return an OutputStream if the file can be opened for writing.\n@throws FileNotFoundException if the file can\u0027t be created or opened for writing.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.OutputStream",
        "type_short": "OutputStream",
        "comment": "an OutputStream if the file can be opened for writing."
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the file can\u0027t be created or opened for writing."
        }
      ]
    },
    {
      "name": "getFile",
      "comment": "Returns a File object.  If this ResourceFile represents a standard filesystem, then no\n copy is necessary to return a file.  If this ResourceFile represents a compressed \n filesystem, then a copy from that filesystem to the real filesystem is needed to create\n a File object.  copyIfNeeded allows you to dictate whether a copy should take \n place, if needed.\n \n If you just want the contents of a file, then call #getInputStream().",
      "javadoc": "Returns a File object.  If this ResourceFile represents a standard filesystem, then no\n copy is necessary to return a file.  If this ResourceFile represents a compressed \n filesystem, then a copy from that filesystem to the real filesystem is needed to create\n a File object.  \u003ccode\u003ecopyIfNeeded\u003c/code\u003e allows you to dictate whether a copy should take \n place, if needed.\n \u003cp\u003e\n If you just want the contents of a file, then call {@link #getInputStream()}.\n@param copyIfNeeded true to copy the file when embedded in a compressed filesystem; false\n                      to return null in that case.\n@return a File object or null if not a file and copyIfNeeded was false",
      "static": false,
      "params": [
        {
          "name": "copyIfNeeded",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to copy the file when embedded in a compressed filesystem; false\n                      to return null in that case."
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "a File object or null if not a file and copyIfNeeded was false"
      },
      "throws": []
    },
    {
      "name": "length",
      "comment": "Returns the size of this file.",
      "javadoc": "Returns the size of this file.\n@return the size of the file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the size of the file."
      },
      "throws": []
    },
    {
      "name": "isFile",
      "comment": "Returns true if this file exists and is not a directory.",
      "javadoc": "Returns true if this file exists and is not a directory.\n@return true if this file exists and is not a directory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this file exists and is not a directory."
      },
      "throws": []
    },
    {
      "name": "getCanonicalFile",
      "comment": "Returns the canonicalFile for this file.",
      "javadoc": "Returns the canonicalFile for this file.\n@return the canonicalFile for this file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": "the canonicalFile for this file."
      },
      "throws": []
    },
    {
      "name": "canWrite",
      "comment": "Returns true if this file can be written to.",
      "javadoc": "Returns true if this file can be written to.\n@return true if this file can be written to.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this file can be written to."
      },
      "throws": []
    },
    {
      "name": "mkdir",
      "comment": "Creates a directory for the path represented by this file.",
      "javadoc": "Creates a directory for the path represented by this file.\n@return true if a new directory was created.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a new directory was created."
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFileSystemRoot",
      "comment": "Returns the root file for this file.",
      "javadoc": "Returns the root file for this file.\n@return the root file for this file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the root file for this file."
      },
      "throws": []
    },
    {
      "name": "toURI",
      "comment": "Returns a URI for this file object.",
      "javadoc": "Returns a URI for this file object.\n@return a URI for this file object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.net.URI",
        "type_short": "URI",
        "comment": "a URI for this file object."
      },
      "throws": []
    }
  ]
}
