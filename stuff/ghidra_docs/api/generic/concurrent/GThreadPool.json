{
  "name": "GThreadPool",
  "comment": "Class for managing and sharing thread pools. The GThreadPool is simplified version of the\n ThreadPoolExecutor, which can be confusing to use with its many configuration parameters.\n The GThreadPool has a simple behavior that is controlled by only two configuration parameters -\n the minimum number of threads and the maximum number of threads.\n \n The simple behavior for when new tasks are submitted:\n  1) If there any idle threads, use that thread.\n  2) If all existing threads are busy and the number of threads is less than max threads, add a\n     new thread and use it.\n  3) if all threads are busy and there are max number of threads, queue the item until a thread\n     becomes free.\n \n The simple behavior for when tasks are completed by a thread:\n  1) If there are tasks in the queue, start processing a new item in the newly freed thread.\n  2) if there are more threads that min threads, allow this thread to die if no new\n     jobs arrive before\n     the \"KEEP ALIVE\" time expires which is currently 15 seconds.\n  3) if there are min threads or less, allow this thread to wait forever for a new job\n     to arrive.",
  "javadoc": "Class for managing and sharing thread pools. The GThreadPool is simplified version of the\n ThreadPoolExecutor, which can be confusing to use with its many configuration parameters.\n The GThreadPool has a simple behavior that is controlled by only two configuration parameters -\n the minimum number of threads and the maximum number of threads.\n \u003cp\u003e\n The simple behavior for when new tasks are submitted:\u003cbr\u003e\n  1) If there any idle threads, use that thread.\u003cbr\u003e\n  2) If all existing threads are busy and the number of threads is less than max threads, add a\n     new thread and use it.\u003cbr\u003e\n  3) if all threads are busy and there are max number of threads, queue the item until a thread\n     becomes free.\u003cbr\u003e\n \u003cp\u003e\n The simple behavior for when tasks are completed by a thread:\u003cbr\u003e\n  1) If there are tasks in the queue, start processing a new item in the newly freed thread.\u003cbr\u003e\n  2) if there are more threads that min threads, allow this thread to die if no new\n     jobs arrive before\n     the \"KEEP ALIVE\" time expires which is currently 15 seconds.\u003cbr\u003e\n  3) if there are min threads or less, allow this thread to wait forever for a new job\n     to arrive.\u003cbr\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DEFAULT_KEEP_ALIVE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "15"
    },
    {
      "name": "sharedPoolMap",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Map\u003cjava.lang.String,generic.concurrent.GThreadPool\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "executor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.concurrent.GThreadPool.GThreadPoolExecutor",
      "type_short": "GThreadPoolExecutor",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getPrivateThreadPool",
      "comment": "Creates a new, private thread pool with the given name.",
      "javadoc": "Creates a new, private thread pool with the given name.\n@param name the name of the thread pool\n@return a private GThreadPool with the given name.",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the thread pool"
        }
      ],
      "return": {
        "type_long": "generic.concurrent.GThreadPool",
        "type_short": "GThreadPool",
        "comment": "a private GThreadPool with the given name."
      },
      "throws": []
    },
    {
      "name": "getSharedThreadPool",
      "comment": "Returns a shared GThreadPool.  If a shared GThreadPool already exists with the given name,\n it is returned.  Otherwise, a new shared GThreadPool is created and returned.",
      "javadoc": "Returns a shared GThreadPool.  If a shared GThreadPool already exists with the given name,\n it is returned.  Otherwise, a new shared GThreadPool is created and returned.\n@param name the name of the GThreadPool.\n@return a shared GThreadPool with the given name.",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the GThreadPool."
        }
      ],
      "return": {
        "type_long": "generic.concurrent.GThreadPool",
        "type_short": "GThreadPool",
        "comment": "a shared GThreadPool with the given name."
      },
      "throws": []
    },
    {
      "name": "runAsync",
      "comment": "Runs the given runnable in a background thread using a shared thread pool of the given name.",
      "javadoc": "Runs the given runnable in a background thread using a shared thread pool of the given name.\n@param poolName the thread pool name\n@param r the runnable\n@return the future",
      "static": true,
      "params": [
        {
          "name": "poolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the thread pool name"
        },
        {
          "name": "r",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "the runnable"
        }
      ],
      "return": {
        "type_long": "java.util.concurrent.CompletableFuture\u003cjava.lang.Void\u003e",
        "type_short": "CompletableFuture",
        "comment": "the future"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMaxThreadCount",
      "comment": "Sets the max number of threads to use in this thread pool.  The default is the number\n of processors + 1.",
      "javadoc": "Sets the max number of threads to use in this thread pool.  The default is the number\n of processors + 1.\n@param maxThreadCount the maximum number of threads to use in this thread pool.",
      "static": false,
      "params": [
        {
          "name": "maxThreadCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "the maximum number of threads to use in this thread pool."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinThreadCount",
      "comment": "Returns the minimum number of threads to keep alive in this thread pool.",
      "javadoc": "Returns the minimum number of threads to keep alive in this thread pool.\n@return the minimum number of threads to keep alive in this thread pool.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the minimum number of threads to keep alive in this thread pool."
      },
      "throws": []
    },
    {
      "name": "setMinThreadCount",
      "comment": "Sets the minimum number of threads to keep alive in this thread pool.",
      "javadoc": "Sets the minimum number of threads to keep alive in this thread pool.\n@param minThreadCount the minimum number of threads to keep alive in this thread pool.",
      "static": false,
      "params": [
        {
          "name": "minThreadCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "the minimum number of threads to keep alive in this thread pool."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaxThreadCount",
      "comment": "Returns the maximum number of threads to use in this thread pool.",
      "javadoc": "Returns the maximum number of threads to use in this thread pool.\n@return the maximum number of threads to use in this thread pool.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the maximum number of threads to use in this thread pool."
      },
      "throws": []
    },
    {
      "name": "submit",
      "comment": "Submits a FutreTask to be executed by a thread in this thread pool.",
      "javadoc": "Submits a FutreTask to be executed by a thread in this thread pool.\n@param futureTask the future task to be executed.",
      "static": false,
      "params": [
        {
          "name": "futureTask",
          "type_long": "java.util.concurrent.FutureTask\u003c?\u003e",
          "type_short": "FutureTask",
          "comment": "the future task to be executed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "submit",
      "comment": "Submits a runnable to be executed by this thread pool.",
      "javadoc": "Submits a runnable to be executed by this thread pool.\n@param task the runnable to be executed.\n@return a Future for that runnable.",
      "static": false,
      "params": [
        {
          "name": "task",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "the runnable to be executed."
        }
      ],
      "return": {
        "type_long": "java.util.concurrent.Future\u003c?\u003e",
        "type_short": "Future",
        "comment": "a Future for that runnable."
      },
      "throws": []
    },
    {
      "name": "submit",
      "comment": "Submits a runnable to be executed by this thread pool.",
      "javadoc": "Submits a runnable to be executed by this thread pool.\n@param task the runnable to be executed.\n@param result the result to be returned after the runnable has executed.\n@return a Future for that runnable.",
      "static": false,
      "params": [
        {
          "name": "task",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "the runnable to be executed."
        },
        {
          "name": "result",
          "type_long": "T",
          "type_short": "T",
          "comment": "the result to be returned after the runnable has executed."
        }
      ],
      "return": {
        "type_long": "java.util.concurrent.Future\u003cT\u003e",
        "type_short": "Future",
        "comment": "a Future for that runnable."
      },
      "throws": []
    },
    {
      "name": "submit",
      "comment": "Submits a callable to be executed by this thread pool.",
      "javadoc": "Submits a callable to be executed by this thread pool.\n@param task the callable to be executed.\n@return a Future for that callable.",
      "static": false,
      "params": [
        {
          "name": "task",
          "type_long": "java.util.concurrent.Callable\u003cT\u003e",
          "type_short": "Callable",
          "comment": "the callable to be executed."
        }
      ],
      "return": {
        "type_long": "java.util.concurrent.Future\u003cT\u003e",
        "type_short": "Future",
        "comment": "a Future for that callable."
      },
      "throws": []
    },
    {
      "name": "shutdownNow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPrivate",
      "comment": "Returns true if this is not a shared thread pool.",
      "javadoc": "Returns true if this is not a shared thread pool.\n@return true if this is not a shared thread pool.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is not a shared thread pool."
      },
      "throws": []
    },
    {
      "name": "getExecutor",
      "comment": "Returns the Executor used by this thread pool.\n\n Note: normal usage of this thread pool contraindicates accessing the executor of\n this pool.  For managing your own jobs, you should use the method on this class directly.\n The intent of this method is to provide access to the executor so that it may be\n passed to other asynchronous APIs, such as the CompletableFuture.",
      "javadoc": "Returns the {@link Executor} used by this thread pool.\n\n \u003cP\u003eNote: normal usage of this thread pool contraindicates accessing the executor of\n this pool.  For managing your own jobs, you should use the method on this class directly.\n The intent of this method is to provide access to the executor so that it may be\n passed to other asynchronous APIs, such as the {@link CompletableFuture}.\n@return the executor",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.concurrent.Executor",
        "type_short": "Executor",
        "comment": "the executor"
      },
      "throws": []
    }
  ]
}
