{
  "name": "ProcessConsumer",
  "comment": "A class that allows clients to asynchronously consume the output of a Processs\n input and error streams.  The task is asynchronous to avoid deadlocks when both streams need\n to be read in order for the process to proceed.",
  "javadoc": "A class that allows clients to \u003cb\u003easynchronously\u003c/b\u003e consume the output of a {@link Process}s\n input and error streams.  The task is asynchronous to avoid deadlocks when both streams need\n to be read in order for the process to proceed.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "consume",
      "comment": "Read the given input stream line-by-line. \n \n To get all output after all reading is done you can call the blocking operation \n Future#get().",
      "javadoc": "Read the given input stream line-by-line. \n \n \u003cp\u003eTo get all output after all reading is done you can call the blocking operation \n {@link Future#get()}.\n@param is the input stream\n@return the future that will be complete when all lines are read",
      "static": true,
      "params": [
        {
          "name": "is",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "the input stream"
        }
      ],
      "return": {
        "type_long": "java.util.concurrent.Future\u003cgeneric.concurrent.io.IOResult\u003e",
        "type_short": "Future",
        "comment": "the future that will be complete when all lines are read"
      },
      "throws": []
    },
    {
      "name": "consume",
      "comment": "Read the given input stream line-by-line.\n \n If you wish to get all output after all reading is done you can call the blocking \n operation Future#get().",
      "javadoc": "Read the given input stream line-by-line.\n \n \u003cp\u003eIf you wish to get all output after all reading is done you can call the blocking \n operation {@link Future#get()}.\n@param is the input stream\n@param lineConsumer the line consumer; may be null\n@return the future that will be complete when all lines are read",
      "static": true,
      "params": [
        {
          "name": "is",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "the input stream"
        },
        {
          "name": "lineConsumer",
          "type_long": "java.util.function.Consumer\u003cjava.lang.String\u003e",
          "type_short": "Consumer",
          "comment": "the line consumer; may be null"
        }
      ],
      "return": {
        "type_long": "java.util.concurrent.Future\u003cgeneric.concurrent.io.IOResult\u003e",
        "type_short": "Future",
        "comment": "the future that will be complete when all lines are read"
      },
      "throws": []
    }
  ]
}
