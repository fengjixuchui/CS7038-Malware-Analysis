{
  "name": "QCallback",
  "comment": "Interface that defines the callback to work on the items given to the \n ConcurrentQ#add(Object) methods.  Each item that is processed will be handed to the\n #process(Object, TaskMonitor) method of the implementing class.",
  "javadoc": "Interface that defines the callback to work on the items given to the \n {@link ConcurrentQ#add(Object) ConcurrentQ.add(I)} methods.  Each item that is processed will be handed to the\n {@link #process(Object, TaskMonitor) process(I, TaskMonitor)} method of the implementing class.\n@param \u003cI\u003e The type of the items to be processed.\n@param \u003cR\u003e The type of objects resulting from processing an item; if you don\u0027t care about the\n            return value, then make this value whatever you want, like \u003ccode\u003eObject\u003c/code\u003e or the \n            same value as {@link I} and return null from {@link #process(Object, TaskMonitor) process(I, TaskMonitor)}.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "process",
      "comment": "Processes the given item in background thread provided by a GThreadPool.",
      "javadoc": "Processes the given item in background thread provided by a GThreadPool.\n@param item the item to process.\n@param monitor a monitor that can be used to check for cancellation and to report progress and\n transient messages.\n@return The return value resulting from processing the item.",
      "static": false,
      "params": [
        {
          "name": "item",
          "type_long": "I",
          "type_short": "I",
          "comment": "the item to process."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a monitor that can be used to check for cancellation and to report progress and\n transient messages."
        }
      ],
      "return": {
        "type_long": "R",
        "type_short": "R",
        "comment": "The return value resulting from processing the item."
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    }
  ]
}
