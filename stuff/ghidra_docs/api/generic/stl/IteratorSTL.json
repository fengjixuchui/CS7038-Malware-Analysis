{
  "name": "IteratorSTL",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "get",
      "comment": "Returns the current value of the iterator.",
      "javadoc": "Returns the current value of the iterator.\n@return the current value of the iterator.\n@throws IndexOutOfBoundsException if the iterator is positioned before the first value or\n after the last value.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the current value of the iterator."
      },
      "throws": []
    },
    {
      "name": "set",
      "comment": "Sets the current value of the iterator to the given value.",
      "javadoc": "Sets the current value of the iterator to the given value.\n@param value the value to set at the iterator position\n@throws IndexOutOfBoundsException if the iterator is positioned befor the first value or\n after the last value.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "T",
          "type_short": "T",
          "comment": "the value to set at the iterator position"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "increment",
      "comment": "Advances the iterator to the next position.",
      "javadoc": "Advances the iterator to the next position.\n@return a reference to the iterator itself\n@throws IndexOutOfBoundsException if the the iterator is already past the last element.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "generic.stl.IteratorSTL\u003cT\u003e",
        "type_short": "IteratorSTL",
        "comment": "a reference to the iterator itself"
      },
      "throws": []
    },
    {
      "name": "increment",
      "comment": "Advances the iterator n positions.",
      "javadoc": "Advances the iterator n positions.\n@return a reference to the iterator itself\n@throws IndexOutOfBoundsException if the n value pushes past the end of the collection.",
      "static": false,
      "params": [
        {
          "name": "n",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.stl.IteratorSTL\u003cT\u003e",
        "type_short": "IteratorSTL",
        "comment": "a reference to the iterator itself"
      },
      "throws": []
    },
    {
      "name": "decrement",
      "comment": "Devance the iterator to the previous position.  This method is only supported in \n bidirectional iterators.",
      "javadoc": "Devance the iterator to the previous position.  This method is only supported in \n bidirectional iterators.\n@return a reference to the iterator itself",
      "static": false,
      "params": [],
      "return": {
        "type_long": "generic.stl.IteratorSTL\u003cT\u003e",
        "type_short": "IteratorSTL",
        "comment": "a reference to the iterator itself"
      },
      "throws": []
    },
    {
      "name": "decrement",
      "comment": "Devances the iterator n positions.",
      "javadoc": "Devances the iterator n positions.\n@return a reference to the iterator itself\n@throws IndexOutOfBoundsException if the n value pushes past the beginning of the collection",
      "static": false,
      "params": [
        {
          "name": "n",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.stl.IteratorSTL\u003cT\u003e",
        "type_short": "IteratorSTL",
        "comment": "a reference to the iterator itself"
      },
      "throws": []
    },
    {
      "name": "isBegin",
      "comment": "Returns true if the iterator is positioned on the first first element of the collection.  If the\n collection is empty, this will always return false.",
      "javadoc": "Returns true if the iterator is positioned on the first first element of the collection.  If the\n collection is empty, this will always return false.\n@return true if the iterator is positioned on the first element of the collection.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the iterator is positioned on the first element of the collection."
      },
      "throws": []
    },
    {
      "name": "isEnd",
      "comment": "Returns true if the iterator is positioned past the last element of the collection.  If the\n collection is empty, this will always return true.",
      "javadoc": "Returns true if the iterator is positioned past the last element of the collection.  If the\n collection is empty, this will always return true.\n@return true if the iterator is positioned past the last element of the collection.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the iterator is positioned past the last element of the collection."
      },
      "throws": []
    },
    {
      "name": "insert",
      "comment": "Inserts the given value at the current position (the current value will be pushed to the next value).\n The iterator will be positioned on the new value.",
      "javadoc": "Inserts the given value at the current position (the current value will be pushed to the next value).\n The iterator will be positioned on the new value.\n@param value the value to insert into the collection.\n@throws IndexOutOfBoundsException if the iterator is positioned before the first item.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "T",
          "type_short": "T",
          "comment": "the value to insert into the collection."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "Creates a copy of this iterator.",
      "javadoc": "Creates a copy of this iterator.\n@return a copy of this iterator.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "generic.stl.IteratorSTL\u003cT\u003e",
        "type_short": "IteratorSTL",
        "comment": "a copy of this iterator."
      },
      "throws": []
    },
    {
      "name": "assign",
      "comment": "\u0027Assigns\u0027 this iterator to be equivalent to the given iterator.  This is equivalent to\n C++\u0027s \u0027\u003d\u0027 overloading mechanism",
      "javadoc": "\u0027Assigns\u0027 this iterator to be equivalent to the given iterator.  This is equivalent to\n C++\u0027s \u0027\u003d\u0027 overloading mechanism\n@param otherIterator The iterator to copy",
      "static": false,
      "params": [
        {
          "name": "otherIterator",
          "type_long": "generic.stl.IteratorSTL\u003cT\u003e",
          "type_short": "IteratorSTL",
          "comment": "The iterator to copy"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
