{
  "name": "RedBlackTree",
  "comment": "A RedBlack Tree implementation with K type keys and place to store V type values.",
  "javadoc": "A RedBlack Tree implementation with K type keys and place to store V type values.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "EOL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "root",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
      "type_short": "RedBlackNode",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "comparator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Comparator\u003cK\u003e",
      "type_short": "Comparator",
      "constant_value": null
    },
    {
      "name": "allowDuplicateKeys",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new RedBlackTree",
      "javadoc": "Creates a new RedBlackTree\n@param comparator the comparator for this tree\n@param allowDuplicateKeys true to allow duplicate keys",
      "static": false,
      "params": [
        {
          "name": "comparator",
          "type_long": "java.util.Comparator\u003cK\u003e",
          "type_short": "Comparator",
          "comment": "the comparator for this tree"
        },
        {
          "name": "allowDuplicateKeys",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to allow duplicate keys"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a copy of an existing RedBlackTree",
      "javadoc": "Creates a copy of an existing RedBlackTree\n@param tree the existing tree to copy",
      "static": false,
      "params": [
        {
          "name": "tree",
          "type_long": "generic.stl.RedBlackTree\u003cK,V\u003e",
          "type_short": "RedBlackTree",
          "comment": "the existing tree to copy"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "Returns the number keys in this set.",
      "javadoc": "Returns the number keys in this set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "containsKey",
      "comment": "Returns true if the key is in the set.",
      "javadoc": "Returns true if the key is in the set.\n@param key the key whose presence is to be tested.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": "the key whose presence is to be tested."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFirst",
      "comment": "Returns the first entry in this set.",
      "javadoc": "Returns the first entry in this set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
        "type_short": "RedBlackNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLast",
      "comment": "Returns the last entry in this set.",
      "javadoc": "Returns the last entry in this set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
        "type_short": "RedBlackNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lowerBound",
      "comment": "Finds the node with the lowest key that is \u003d to the given key.  Returns null if all nodes\n in the tree have keys less than the given key.",
      "javadoc": "Finds the node with the lowest key that is \u0026gt;\u003d to the given key.  Returns null if all nodes\n in the tree have keys less than the given key.\n@param key the key to search for.\n@return the node with the lowest key that is \u0026gt;\u003d to the given key or null if no such key exists.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": "the key to search for."
        }
      ],
      "return": {
        "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
        "type_short": "RedBlackNode",
        "comment": "the node with the lowest key that is \u003d to the given key or null if no such key exists."
      },
      "throws": []
    },
    {
      "name": "upperBound",
      "comment": "Finds the node with the lowest key that is  the given key.  Returns null if all nodes\n in the tree have keys less than or equal to the given key.",
      "javadoc": "Finds the node with the lowest key that is \u0026gt; the given key.  Returns null if all nodes\n in the tree have keys less than or equal to the given key.\n@param key the key to search for.\n@return the node with the lowest key that is \u0026gt; to the given key or null if no such key exists.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": "the key to search for."
        }
      ],
      "return": {
        "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
        "type_short": "RedBlackNode",
        "comment": "the node with the lowest key that is  to the given key or null if no such key exists."
      },
      "throws": []
    },
    {
      "name": "put",
      "comment": "Adds the given key,value to the map. If the map does not allow duplicate keys and a key\n already exists, the old value will be replaced by the new value and the old value will be\n returned.",
      "javadoc": "Adds the given key,value to the map. If the map does not allow duplicate keys and a key\n already exists, the old value will be replaced by the new value and the old value will be\n returned.\n@param key the key to add to the set.\n@param value the key\u0027s value.\n@return the old value associated with the key, or null if the key was not previously in the map.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": "the key to add to the set."
        },
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": "the key\u0027s value."
        }
      ],
      "return": {
        "type_long": "generic.stl.Pair\u003cgeneric.stl.RedBlackNode\u003cK,V\u003e,java.lang.Boolean\u003e",
        "type_short": "Pair",
        "comment": "the old value associated with the key, or null if the key was not previously in the map."
      },
      "throws": []
    },
    {
      "name": "findFirstNode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
        "type_short": "RedBlackNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findLastNode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
        "type_short": "RedBlackNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Removes the given key (first if duplicates are allowed) from the set.",
      "javadoc": "Removes the given key (first if duplicates are allowed) from the set.\n@param key the key to remove from the set.\n@return the value associated with the key removed or null if the key not found.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": "the key to remove from the set."
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": "the value associated with the key removed or null if the key not found."
      },
      "throws": []
    },
    {
      "name": "removeAll",
      "comment": "Removes all entrys from the set.",
      "javadoc": "Removes all entrys from the set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "Test if the set is empty.",
      "javadoc": "Test if the set is empty.\n@return true if the set is empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the set is empty."
      },
      "throws": []
    },
    {
      "name": "colorOf",
      "comment": "Returns the color of the given node.",
      "javadoc": "Returns the color of the given node.",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
          "type_short": "RedBlackNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.stl.RedBlackNode.NodeColor",
        "type_short": "NodeColor",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parentOf",
      "comment": "Returns the parent of the given node.",
      "javadoc": "Returns the parent of the given node.",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
          "type_short": "RedBlackNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
        "type_short": "RedBlackNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setColor",
      "comment": "Sets the color of the given node to the given color.",
      "javadoc": "Sets the color of the given node to the given color.",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
          "type_short": "RedBlackNode",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "generic.stl.RedBlackNode.NodeColor",
          "type_short": "NodeColor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "leftOf",
      "comment": "Returns the left child of the given node.",
      "javadoc": "Returns the left child of the given node.",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
          "type_short": "RedBlackNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
        "type_short": "RedBlackNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "rightOf",
      "comment": "Returns the right child of the given node.",
      "javadoc": "Returns the right child of the given node.",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
          "type_short": "RedBlackNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
        "type_short": "RedBlackNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "rotateLeft",
      "comment": "From CLR",
      "javadoc": "From CLR",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
          "type_short": "RedBlackNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "rotateRight",
      "comment": "From CLR",
      "javadoc": "From CLR",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
          "type_short": "RedBlackNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixAfterInsertion",
      "comment": "From CLR",
      "javadoc": "From CLR",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
          "type_short": "RedBlackNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteEntry",
      "comment": "Delete node p, and then rebalance the tree.",
      "javadoc": "Delete node p, and then rebalance the tree.",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
          "type_short": "RedBlackNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixAfterDeletion",
      "comment": "From CLR",
      "javadoc": "From CLR",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
          "type_short": "RedBlackNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "swapPosition",
      "comment": "Swap the linkages of two nodes in a tree.",
      "javadoc": "Swap the linkages of two nodes in a tree.",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
          "type_short": "RedBlackNode",
          "comment": ""
        },
        {
          "name": "y",
          "type_long": "generic.stl.RedBlackNode\u003cK,V\u003e",
          "type_short": "RedBlackNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
