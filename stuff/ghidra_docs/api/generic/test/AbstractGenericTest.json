{
  "name": "AbstractGenericTest",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "generic.test.AbstractGTest",
  "fields": [
    {
      "name": "GHIDRA_TEST_PROPERTY_REPORT_DIR",
      "comment": "Property that defines the test report output directory",
      "javadoc": "Property that defines the test report output directory",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"ghidra.test.property.report.dir\""
    },
    {
      "name": "debugDirectory",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.io.File",
      "type_short": "File",
      "constant_value": null
    },
    {
      "name": "TESTDATA_DIRECTORY_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"testdata\""
    },
    {
      "name": "DEFAULT_TOOL_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"CodeBrowser\""
    },
    {
      "name": "DEFAULT_TEST_TOOL_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"TestCodeBrowser\""
    },
    {
      "name": "initialized",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "printedApplicationConflictWaring",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "loadedApplicationLayout",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "utility.application.ApplicationLayout",
      "type_short": "ApplicationLayout",
      "constant_value": null
    },
    {
      "name": "loadedApplicationConfiguration",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.framework.ApplicationConfiguration",
      "type_short": "ApplicationConfiguration",
      "constant_value": null
    },
    {
      "name": "hasFailed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "watchman",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "org.junit.rules.TestWatcher",
      "type_short": "TestWatcher",
      "constant_value": null
    },
    {
      "name": "concurrentTestExceptionRule",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "org.junit.rules.TestRule",
      "type_short": "TestRule",
      "constant_value": null
    },
    {
      "name": "ruleChain",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "org.junit.rules.RuleChain",
      "type_short": "RuleChain",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "debugBatch",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "test",
          "type_long": "generic.test.AbstractGenericTest",
          "type_short": "AbstractGenericTest",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeSystemProperties",
      "comment": "A place to initialize and needed static properties",
      "javadoc": "A place to initialize and needed static properties",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeLayout",
      "comment": "A method to update any ApplicationLayout values",
      "javadoc": "A method to update any {@link ApplicationLayout} values\n@param layout the layout to initialize",
      "static": false,
      "params": [
        {
          "name": "layout",
          "type_long": "utility.application.ApplicationLayout",
          "type_short": "ApplicationLayout",
          "comment": "the layout to initialize"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "printWarningIfConflictingInitializationConfigs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "layout",
          "type_long": "utility.application.ApplicationLayout",
          "type_short": "ApplicationLayout",
          "comment": ""
        },
        {
          "name": "configuration",
          "type_long": "ghidra.framework.ApplicationConfiguration",
          "type_short": "ApplicationConfiguration",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createApplicationLayout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "utility.application.ApplicationLayout",
        "type_short": "ApplicationLayout",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createApplicationConfiguration",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.ApplicationConfiguration",
        "type_short": "ApplicationConfiguration",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasTestFailed",
      "comment": "Determine if test failure occur (for use within tear down methods)",
      "javadoc": "Determine if test failure occur (for use within tear down methods)\n@return true if test failure detected",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if test failure detected"
      },
      "throws": []
    },
    {
      "name": "testFailed",
      "comment": "A callback for subclasses when a test has failed. This will be called\n after tearDown().  This means that any diagnostics will have to\n take into account items that have already been disposed.",
      "javadoc": "A callback for subclasses when a test has failed. This will be called\n \u003cb\u003eafter\u003c/b\u003e \u003ccode\u003etearDown()\u003c/code\u003e.  This means that any diagnostics will have to\n take into account items that have already been disposed.\n@param e the exception that happened when the test failed",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.lang.Throwable",
          "type_short": "Throwable",
          "comment": "the exception that happened when the test failed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "windowForComponent",
      "comment": "Returns the window parent of c. If c is a window, then c is returned.\n\n \n Warning: this differs from\n SwingUtilities#windowForComponent(Component) in that the latter\n method will not return the given component if it is a window.",
      "javadoc": "Returns the window parent of c. If c is a window, then c is returned.\n\n \u003cP\u003e\n Warning: this differs from\n {@link SwingUtilities#windowForComponent(Component)} in that the latter\n method will not return the given component if it is a window.\n@param c the component\n@return the window",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component"
        }
      ],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": "the window"
      },
      "throws": []
    },
    {
      "name": "getAllWindows",
      "comment": "Gets all windows in the system (including Frames).",
      "javadoc": "Gets all windows in the system (including Frames).\n@return all windows",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cjava.awt.Window\u003e",
        "type_short": "Set",
        "comment": "all windows"
      },
      "throws": []
    },
    {
      "name": "getAllWindows",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.awt.Window\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLocalResourceFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "relativePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadTextResource",
      "comment": "Load a text resource file into an ArrayList. Each line of the file is\n stored as an item in the list.",
      "javadoc": "Load a text resource file into an ArrayList. Each line of the file is\n stored as an item in the list.\n@param cls class where resource exists\n@param name resource filename\n@return list of lines contained in file\n@throws IOException if an exception occurs reading the given resource",
      "static": true,
      "params": [
        {
          "name": "cls",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "class where resource exists"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "resource filename"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "list of lines contained in file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an exception occurs reading the given resource"
        }
      ]
    },
    {
      "name": "readText",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "br",
          "type_long": "java.io.BufferedReader",
          "type_short": "BufferedReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
        "type_short": "ArrayList",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "loadTextResource",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
        "type_short": "ArrayList",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getTestDataFile",
      "comment": "Returns the file within the data directory of the TestResources module\n that matches the given relative path\n \n A FileNotFoundException is throw if the file does not exist.",
      "javadoc": "Returns the file within the data directory of the TestResources module\n that matches the given relative path\n \u003cp\u003e\n A {@link FileNotFoundException} is throw if the file does not exist.\n@param path path relative to the data directory of the TestResources\n            module.\n@return the file within the data directory of the TestResources module\n         that matches the given relative path\n@throws FileNotFoundException if the given file does not exist",
      "static": true,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path relative to the data directory of the TestResources\n            module."
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the file within the data directory of the TestResources module\n         that matches the given relative path"
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the given file does not exist"
        }
      ]
    },
    {
      "name": "getTestDataDir",
      "comment": "Returns a file that points to the location on disk of the given relative\n path name. The path is relative to the test resources directory.",
      "javadoc": "Returns a file that points to the location on disk of the given relative\n path name. The path is relative to the test resources directory.\n@param relativePath the path of the file\n@return a file that points to the location on disk of the relative path.\n@throws FileNotFoundException If the directory does not exist\n@throws IOException if the given path does not represent a directory",
      "static": true,
      "params": [
        {
          "name": "relativePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path of the file"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "a file that points to the location on disk of the relative path."
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "If the directory does not exist"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the given path does not represent a directory"
        }
      ]
    },
    {
      "name": "findTestDataFile",
      "comment": "Returns the file within the data directory of the TestResources module\n that matches the given relative path.\n \n Null is returned if the file could not be found.",
      "javadoc": "Returns the file within the data directory of the TestResources module\n that matches the given relative path.\n \u003cp\u003e\n Null is returned if the file could not be found.\n@param path path relative to the data directory of the TestResources\n            module.\n@return the file within the data directory of the TestResources module\n         that matches the given relative path",
      "static": true,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path relative to the data directory of the TestResources\n            module."
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the file within the data directory of the TestResources module\n         that matches the given relative path"
      },
      "throws": []
    },
    {
      "name": "getTestDataDirectory",
      "comment": "Returns the data directory containing test programs and data",
      "javadoc": "Returns the data directory containing test programs and data\n@return the data directory containing test programs and data",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the data directory containing test programs and data"
      },
      "throws": []
    },
    {
      "name": "printMemory",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForTasks",
      "comment": "Waits for all system tasks to complete. These tasks are tracked by the\n SystemUtilities during testing only.",
      "javadoc": "Waits for all system tasks to complete. These tasks are tracked by the\n SystemUtilities during testing only.\n@throws AssertionFailedError if the timeout period expires while waiting\n             for tasks",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doWaitForTasks",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "timeout",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForPostedSwingRunnables",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findComponent",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": ""
        },
        {
          "name": "desiredClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findComponent",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": ""
        },
        {
          "name": "desiredClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "checkOwnedWindows",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInstanceFieldByClassType",
      "comment": "Get the first field object contained within object ownerInstance which\n has the type classType. This method is only really useful if it is known\n that only a single field of classType exists within the ownerInstance.",
      "javadoc": "Get the first field object contained within object ownerInstance which\n has the type classType. This method is only really useful if it is known\n that only a single field of classType exists within the ownerInstance.\n@param \u003cT\u003e the type\n@param classType the class type of the desired field\n@param ownerInstance the object instance that owns the field\n@return field object of type classType or null",
      "static": true,
      "params": [
        {
          "name": "classType",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the class type of the desired field"
        },
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the object instance that owns the field"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "field object of type classType or null"
      },
      "throws": []
    },
    {
      "name": "setInstanceField",
      "comment": "Sets the instance field by the given name on the given object instance.\n \n Note: if the field is static, then the ownerInstance field can\n be the class of the object that contains the variable.",
      "javadoc": "Sets the instance field by the given name on the given object instance.\n \u003cp\u003e\n Note: if the field is static, then the \u003ccode\u003eownerInstance\u003c/code\u003e field can\n be the class of the object that contains the variable.\n@param fieldName The name of the field to retrieve.\n@param ownerInstance The object instance from which to get the variable\n            instance.\n@param value The value to use when setting the given field\n@throws RuntimeException if there is a problem accessing the field using\n             reflection. A RuntimeException is used so that calling tests\n             can avoid using a try/catch block, but will still fail when\n             an error is encountered.\n@see Field#set(Object, Object)",
      "static": true,
      "params": [
        {
          "name": "fieldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the field to retrieve."
        },
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The object instance from which to get the variable\n            instance."
        },
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The value to use when setting the given field"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.RuntimeException",
          "type_short": "RuntimeException",
          "comment": "if there is a problem accessing the field using\n             reflection. A RuntimeException is used so that calling tests\n             can avoid using a try/catch block, but will still fail when\n             an error is encountered."
        }
      ]
    },
    {
      "name": "getInstanceField",
      "comment": "Gets the instance field by the given name on the given object instance.\n The value is a primitive wrapper if it is a primitive type.\n \n Note: if the field is static, then the ownerInstance field can\n be the class of the object that contains the variable.",
      "javadoc": "Gets the instance field by the given name on the given object instance.\n The value is a primitive wrapper if it is a primitive type.\n \u003cp\u003e\n Note: if the field is static, then the \u003ccode\u003eownerInstance\u003c/code\u003e field can\n be the class of the object that contains the variable.\n@param fieldName The name of the field to retrieve.\n@param ownerInstance The object instance from which to get the variable\n            instance.\n@return The field instance.\n@throws RuntimeException if there is a problem accessing the field using\n             reflection. A RuntimeException is used so that calling tests\n             can avoid using a try/catch block, but will still fail when\n             an error is encountered.\n@see Field#get(java.lang.Object)\n@since Tracker Id 267",
      "static": true,
      "params": [
        {
          "name": "fieldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the field to retrieve."
        },
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The object instance from which to get the variable\n            instance."
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "The field instance."
      },
      "throws": [
        {
          "type_long": "java.lang.RuntimeException",
          "type_short": "RuntimeException",
          "comment": "if there is a problem accessing the field using\n             reflection. A RuntimeException is used so that calling tests\n             can avoid using a try/catch block, but will still fail when\n             an error is encountered."
        }
      ]
    },
    {
      "name": "invokeConstructor",
      "comment": "Uses reflection to execute the constructor for the given class with the\n given parameters. The new instance of the given class will be returned.\n ",
      "javadoc": "Uses reflection to execute the constructor for the given class with the\n given parameters. The new instance of the given class will be returned.\n \u003cp\u003e\n@param containingClass The class that contains the desired constructor.\n@param parameterTypes The parameter \u003cb\u003etypes\u003c/b\u003e that the constructor\n            takes. This value can be null or zero length if there are no\n            parameters to pass\n@param args The parameter values that should be passed to the\n            constructor. This value can be null or zero length if there\n            are no parameters to pass\n@return The new class instance\n@throws RuntimeException if there is a problem accessing the constructor\n             using reflection. A RuntimeException is used so that calling\n             tests can avoid using a try/catch block, but will still fail\n             when an error is encountered.",
      "static": true,
      "params": [
        {
          "name": "containingClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "The class that contains the desired constructor."
        },
        {
          "name": "parameterTypes",
          "type_long": "java.lang.Class\u003c?\u003e[]",
          "type_short": "java.lang.Class\u003c?\u003e[]",
          "comment": "The parameter types that the constructor\n            takes. This value can be null or zero length if there are no\n            parameters to pass"
        },
        {
          "name": "args",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": "The parameter values that should be passed to the\n            constructor. This value can be null or zero length if there\n            are no parameters to pass"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "The new class instance"
      },
      "throws": [
        {
          "type_long": "java.lang.RuntimeException",
          "type_short": "RuntimeException",
          "comment": "if there is a problem accessing the constructor\n             using reflection. A RuntimeException is used so that calling\n             tests can avoid using a try/catch block, but will still fail\n             when an error is encountered."
        }
      ]
    },
    {
      "name": "invokeInstanceMethod",
      "comment": "Uses reflection to execute the method denoted by the given method name.\n If any value is returned from the method execution, then it will be\n returned from this method. Otherwise, null is returned.\n \n Note: if the method is static, then the ownerInstance field can\n be the class of the object that contains the method.",
      "javadoc": "Uses reflection to execute the method denoted by the given method name.\n If any value is returned from the method execution, then it will be\n returned from this method. Otherwise, \u003ccode\u003enull\u003c/code\u003e is returned.\n \u003cp\u003e\n Note: if the method is static, then the \u003ccode\u003eownerInstance\u003c/code\u003e field can\n be the class of the object that contains the method.\n@param methodName The name of the method to execute.\n@param ownerInstance The object instance of which the method will be\n            executed.\n@param parameterTypes The parameter \u003cb\u003etypes\u003c/b\u003e that the method takes.\n@param args The parameter values that should be passed to the method.\n            This value can be null or zero length if there are no\n            parameters to pass\n@return The return value as returned from executing the method.\n@see Method#invoke(java.lang.Object, java.lang.Object[])\n@throws RuntimeException if there is a problem accessing the field using\n             reflection. A RuntimeException is used so that calling tests\n             can avoid using a try/catch block, but will still fail when\n             an error is encountered.\n@since Tracker Id 267",
      "static": true,
      "params": [
        {
          "name": "methodName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the method to execute."
        },
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The object instance of which the method will be\n            executed."
        },
        {
          "name": "parameterTypes",
          "type_long": "java.lang.Class\u003c?\u003e[]",
          "type_short": "java.lang.Class\u003c?\u003e[]",
          "comment": "The parameter types that the method takes."
        },
        {
          "name": "args",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": "The parameter values that should be passed to the method.\n            This value can be null or zero length if there are no\n            parameters to pass"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "The return value as returned from executing the method."
      },
      "throws": [
        {
          "type_long": "java.lang.RuntimeException",
          "type_short": "RuntimeException",
          "comment": "if there is a problem accessing the field using\n             reflection. A RuntimeException is used so that calling tests\n             can avoid using a try/catch block, but will still fail when\n             an error is encountered."
        }
      ]
    },
    {
      "name": "invokeInstanceMethod",
      "comment": "This method is just a \"pass through\" method for\n #invokeInstanceMethod(String, Object, Class[], Object[]) so that\n callers do not need to pass null to that method when the underlying\n instance method does not have any parameters.",
      "javadoc": "This method is just a \"pass through\" method for\n {@link #invokeInstanceMethod(String, Object, Class[], Object[])} so that\n callers do not need to pass null to that method when the underlying\n instance method does not have any parameters.\n@param methodName The name of the method to execute.\n@param ownerInstance The object instance of which the method will be\n            executed.\n@return The return value as returned from executing the method.\n@see Method#invoke(java.lang.Object, java.lang.Object[])\n@throws RuntimeException if there is a problem accessing the field using\n             reflection. A RuntimeException is used so that calling tests\n             can avoid using a try/catch block, but will still fail when\n             an error is encountered.\n@see #invokeInstanceMethod(String, Object, Class[], Object[])",
      "static": true,
      "params": [
        {
          "name": "methodName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the method to execute."
        },
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The object instance of which the method will be\n            executed."
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "The return value as returned from executing the method."
      },
      "throws": [
        {
          "type_long": "java.lang.RuntimeException",
          "type_short": "RuntimeException",
          "comment": "if there is a problem accessing the field using\n             reflection. A RuntimeException is used so that calling tests\n             can avoid using a try/catch block, but will still fail when\n             an error is encountered."
        }
      ]
    },
    {
      "name": "findOwnedWindows",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "win",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        },
        {
          "name": "winList",
          "type_long": "java.util.Set\u003cjava.awt.Window\u003e",
          "type_short": "Set",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "pressButtonByText",
      "comment": "Finds the button with the indicated TEXT that is a sub-component of the\n indicated container, and then programmatically presses the button. \n The following is a sample JUnit test use:\n \n \n env.showTool();\n OptionDialog dialog \u003d (OptionDialog) env.waitForDialog(OptionDialog.class, 1000);\n assertNotNull(dialog);\n pressButtonByText(dialog, \"OK\");\n ",
      "javadoc": "Finds the button with the indicated TEXT that is a sub-component of the\n indicated container, and then programmatically presses the button. \u003cBR\u003e\n The following is a sample JUnit test use:\n \n \u003cPRE\u003e\n env.showTool();\n OptionDialog dialog \u003d (OptionDialog) env.waitForDialog(OptionDialog.class, 1000);\n assertNotNull(dialog);\n pressButtonByText(dialog, \"OK\");\n \u003c/PRE\u003e\n@param container the container to search. (Typically a dialog.)\n@param buttonText the text on the desired JButton.\n@throws AssertionError if the button isn\u0027t found, isn\u0027t showing or isn\u0027t\n             enabled",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": "the container to search. (Typically a dialog.)"
        },
        {
          "name": "buttonText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text on the desired JButton."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "pressButtonByText",
      "comment": "Finds the button with the indicated TEXT that is a sub-component of the\n indicated container, and then programmatically presses the button.",
      "javadoc": "Finds the button with the indicated TEXT that is a sub-component of the\n indicated container, and then programmatically presses the button.\n@param container the container to search. (Typically a dialog.)\n@param buttonText the text on the desired JButton.\n@param waitForCompletion if true wait for action to complete before\n            returning, otherwise schedule action to be performed and\n            return immediately.\n@throws AssertionError if the button isn\u0027t found, isn\u0027t showing or isn\u0027t\n             enabled",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": "the container to search. (Typically a dialog.)"
        },
        {
          "name": "buttonText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text on the desired JButton."
        },
        {
          "name": "waitForCompletion",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true wait for action to complete before\n            returning, otherwise schedule action to be performed and\n            return immediately."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "pressButtonByName",
      "comment": "Finds the button with the indicated NAME that is a subcomponent of the\n indicated container, and then programmatically presses the button.",
      "javadoc": "Finds the button with the indicated NAME that is a subcomponent of the\n indicated container, and then programmatically presses the button.\n@param container the container to search. (Typically a dialog)\n@param buttonName the name on the desired AbstractButton (see\n            Component.setName())",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": "the container to search. (Typically a dialog)"
        },
        {
          "name": "buttonName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name on the desired AbstractButton (see\n            Component.setName())"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "pressButtonByName",
      "comment": "Finds the button with the indicated NAME that is a subcomponent of the\n indicated container, and then programmatically presses the button.",
      "javadoc": "Finds the button with the indicated NAME that is a subcomponent of the\n indicated container, and then programmatically presses the button.\n@param container the container to search. (Typically a dialog.)\n@param buttonName the name on the desired AbstractButton (see\n            Component.setName()).\n@param waitForCompletion if true wait for action to complete before\n            returning, otherwise schedule action to be performed and\n            return immediately",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": "the container to search. (Typically a dialog.)"
        },
        {
          "name": "buttonName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name on the desired AbstractButton (see\n            Component.setName())."
        },
        {
          "name": "waitForCompletion",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true wait for action to complete before\n            returning, otherwise schedule action to be performed and\n            return immediately"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "pressButton",
      "comment": "Programmatically presses the indicated button.",
      "javadoc": "Programmatically presses the indicated button.\n@param button the button",
      "static": true,
      "params": [
        {
          "name": "button",
          "type_long": "javax.swing.AbstractButton",
          "type_short": "AbstractButton",
          "comment": "the button"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "pressButton",
      "comment": "Programmatically presses the indicated button.",
      "javadoc": "Programmatically presses the indicated button.\n@param button the button\n@param waitForCompletion if true wait for action to complete before\n            returning, otherwise schedule action to be performed and\n            return immediately.",
      "static": true,
      "params": [
        {
          "name": "button",
          "type_long": "javax.swing.AbstractButton",
          "type_short": "AbstractButton",
          "comment": "the button"
        },
        {
          "name": "waitForCompletion",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true wait for action to complete before\n            returning, otherwise schedule action to be performed and\n            return immediately."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findComponentByName",
      "comment": "Searches the subcomponents of the indicated container and returns the\n component with the specified name.",
      "javadoc": "Searches the subcomponents of the indicated container and returns the\n component with the specified name.\n@param container the container to search\n@param componentName the name of the desired component\n@return the component, or null if not found",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": "the container to search"
        },
        {
          "name": "componentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the desired component"
        }
      ],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": "the component, or null if not found"
      },
      "throws": []
    },
    {
      "name": "findComponentByName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": ""
        },
        {
          "name": "componentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "checkOwnedWindows",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findComponentsByName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": ""
        },
        {
          "name": "componentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "checkOwnedWindows",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.awt.Component\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findButtonByIcon",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": ""
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.JButton",
        "type_short": "JButton",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findButtonByText",
      "comment": "Searches the subcomponents of the the given container and returns the\n JButton that has the specified text.",
      "javadoc": "Searches the subcomponents of the the given container and returns the\n JButton that has the specified text.\n@param container the container to search\n@param text the button text\n@return the JButton, or null the button was not found",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": "the container to search"
        },
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the button text"
        }
      ],
      "return": {
        "type_long": "javax.swing.JButton",
        "type_short": "JButton",
        "comment": "the JButton, or null the button was not found"
      },
      "throws": []
    },
    {
      "name": "findAbstractButtonByText",
      "comment": "Searches the sub-components of the given container and returns the\n AbstractButton that has the specified text.\n \n This differs from #findButtonByText(Container, String) in that\n this method will find buttons that do not extend from JButton.\n That method is convenient when you do not wish to cast the result from\n AbstractButton to JButton. Other than that, this method can handle all\n cases the other method cannot.",
      "javadoc": "Searches the sub-components of the given container and returns the\n AbstractButton that has the specified text.\n \u003cp\u003e\n This differs from {@link #findButtonByText(Container, String)} in that\n this method will find buttons that do not extend from {@link JButton}.\n That method is convenient when you do not wish to cast the result from\n AbstractButton to JButton. Other than that, this method can handle all\n cases the other method cannot.\n@param container container to search\n@param text button text\n@return null if the button was not found",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": "container to search"
        },
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "button text"
        }
      ],
      "return": {
        "type_long": "javax.swing.AbstractButton",
        "type_short": "AbstractButton",
        "comment": "null if the button was not found"
      },
      "throws": []
    },
    {
      "name": "findAbstractButtonByName",
      "comment": "Searches the sub-components of the given container and returns the\n AbstractButton that has the specified name.",
      "javadoc": "Searches the sub-components of the given container and returns the\n AbstractButton that has the specified name.\n@param container container to search\n@param name the button name (you must set this manually).\n@return null if the button was not found",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": "container to search"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the button name (you must set this manually)."
        }
      ],
      "return": {
        "type_long": "javax.swing.AbstractButton",
        "type_short": "AbstractButton",
        "comment": "null if the button was not found"
      },
      "throws": []
    },
    {
      "name": "leftClick",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "comp",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": ""
        },
        {
          "name": "x",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "y",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "middleClick",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "comp",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": ""
        },
        {
          "name": "x",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "y",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "rightClick",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "comp",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": ""
        },
        {
          "name": "x",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "y",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doubleClick",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "comp",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": ""
        },
        {
          "name": "x",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "y",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clickMouse",
      "comment": "Simulates click the mouse button.",
      "javadoc": "Simulates click the mouse button.\n@param comp the component to click on.\n@param button the mouse button (1, 2, or 3)\n@param x the x coordinate of the click location\n@param y the y coordinate of the click location\n@param clickCount the number of clicks (2 \u003d double click)\n@param modifiers additional modifiers (e.g. MouseEvent.SHIFT_MASK)\n@param popupTrigger a boolean, true if this event is a trigger for a\n            popup menu",
      "static": true,
      "params": [
        {
          "name": "comp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to click on."
        },
        {
          "name": "button",
          "type_long": "int",
          "type_short": "int",
          "comment": "the mouse button (1, 2, or 3)"
        },
        {
          "name": "x",
          "type_long": "int",
          "type_short": "int",
          "comment": "the x coordinate of the click location"
        },
        {
          "name": "y",
          "type_long": "int",
          "type_short": "int",
          "comment": "the y coordinate of the click location"
        },
        {
          "name": "clickCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of clicks (2 \u003d double click)"
        },
        {
          "name": "modifiers",
          "type_long": "int",
          "type_short": "int",
          "comment": "additional modifiers (e.g. MouseEvent.SHIFT_MASK)"
        },
        {
          "name": "popupTrigger",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "a boolean, true if this event is a trigger for a\n            popup menu"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clickMouse",
      "comment": "Simulates click the mouse button.",
      "javadoc": "Simulates click the mouse button.\n@param comp the component to click on.\n@param button the mouse button (1, 2, or 3)\n@param x the x coordinate of the click location\n@param y the y coordinate of the click location\n@param clickCount the number of clicks (2 \u003d double click)\n@param modifiers additional modifiers (e.g. MouseEvent.SHIFT_MASK)",
      "static": true,
      "params": [
        {
          "name": "comp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to click on."
        },
        {
          "name": "button",
          "type_long": "int",
          "type_short": "int",
          "comment": "the mouse button (1, 2, or 3)"
        },
        {
          "name": "x",
          "type_long": "int",
          "type_short": "int",
          "comment": "the x coordinate of the click location"
        },
        {
          "name": "y",
          "type_long": "int",
          "type_short": "int",
          "comment": "the y coordinate of the click location"
        },
        {
          "name": "clickCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of clicks (2 \u003d double click)"
        },
        {
          "name": "modifiers",
          "type_long": "int",
          "type_short": "int",
          "comment": "additional modifiers (e.g. MouseEvent.SHIFT_MASK)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dragMouse",
      "comment": "Simulates a mouse drag action",
      "javadoc": "Simulates a mouse drag action\n@param comp the component to drag on.\n@param button the mouse button (1, 2, or 3)\n@param startX the x coordinate of the start drag location\n@param startY the y coordinate of the start drag location\n@param endX the x coordinate of the end drag location\n@param endY the y coordinate of the end drag location\n@param modifiers additional modifiers (e.g. MouseEvent.SHIFT_MASK)",
      "static": true,
      "params": [
        {
          "name": "comp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to drag on."
        },
        {
          "name": "button",
          "type_long": "int",
          "type_short": "int",
          "comment": "the mouse button (1, 2, or 3)"
        },
        {
          "name": "startX",
          "type_long": "int",
          "type_short": "int",
          "comment": "the x coordinate of the start drag location"
        },
        {
          "name": "startY",
          "type_long": "int",
          "type_short": "int",
          "comment": "the y coordinate of the start drag location"
        },
        {
          "name": "endX",
          "type_long": "int",
          "type_short": "int",
          "comment": "the x coordinate of the end drag location"
        },
        {
          "name": "endY",
          "type_long": "int",
          "type_short": "int",
          "comment": "the y coordinate of the end drag location"
        },
        {
          "name": "modifiers",
          "type_long": "int",
          "type_short": "int",
          "comment": "additional modifiers (e.g. MouseEvent.SHIFT_MASK)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveMouse",
      "comment": "Fire a mouse moved event for the given component.",
      "javadoc": "Fire a mouse moved event for the given component.\n@param comp source of the event.\n@param x x position relative to the component\n@param y y position relative to the component",
      "static": true,
      "params": [
        {
          "name": "comp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "source of the event."
        },
        {
          "name": "x",
          "type_long": "int",
          "type_short": "int",
          "comment": "x position relative to the component"
        },
        {
          "name": "y",
          "type_long": "int",
          "type_short": "int",
          "comment": "y position relative to the component"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "convertToExtendedModifiers",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "modifiers",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "button",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "postEvent",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "ev",
          "type_long": "java.awt.AWTEvent",
          "type_short": "AWTEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "runSwing",
      "comment": "Returns the value from the given Supplier, invoking the call in\n the Swing thread. This is useful when you may have values that are being\n changed on the Swing thread and you need the test thread to see the\n changes.",
      "javadoc": "Returns the value from the given {@link Supplier}, invoking the call in\n the Swing thread. This is useful when you may have values that are being\n changed on the Swing thread and you need the test thread to see the\n changes.\n@param s the supplier\n@return the value returned by the supplier",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.util.function.Supplier\u003cT\u003e",
          "type_short": "Supplier",
          "comment": "the supplier"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the value returned by the supplier"
      },
      "throws": []
    },
    {
      "name": "runSwing",
      "comment": "Run the given code snippet on the Swing thread and wait for it to finish",
      "javadoc": "Run the given code snippet on the Swing thread and wait for it to finish\n@param r the runnable code snippet",
      "static": true,
      "params": [
        {
          "name": "r",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "the runnable code snippet"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "runSwingLater",
      "comment": "Run the given code snippet on the Swing thread later, not blocking the current thread.  Use\n this if the code snippet causes a blocking operation.\n \n This is a shortcut for runSwing(r, false);.",
      "javadoc": "Run the given code snippet on the Swing thread later, not blocking the current thread.  Use\n this if the code snippet causes a blocking operation.\n \n \u003cP\u003eThis is a shortcut for \u003ccode\u003erunSwing(r, false);\u003c/code\u003e.\n@param r the runnable code snippet",
      "static": false,
      "params": [
        {
          "name": "r",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "the runnable code snippet"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "runSwingWithException",
      "comment": "Call this version of #runSwing(Runnable) when you expect your runnable may\n throw exceptions",
      "javadoc": "Call this version of {@link #runSwing(Runnable)} when you expect your runnable \u003cb\u003emay\u003c/b\u003e\n throw exceptions\n@param callback the runnable code snippet to call\n@throws Exception any exception that is thrown on the Swing thread",
      "static": true,
      "params": [
        {
          "name": "callback",
          "type_long": "utility.function.ExceptionalCallback\u003cE\u003e",
          "type_short": "ExceptionalCallback",
          "comment": "the runnable code snippet to call"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "any exception that is thrown on the Swing thread"
        }
      ]
    },
    {
      "name": "runSwing",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "runnable",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": ""
        },
        {
          "name": "wait",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "runSwingAndWait",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "runnable",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "executeOnSwingWithoutBlocking",
      "comment": "Launches the runnable on a new thread so as to not block the calling\n thread. This is very useful for performing actions on the Swing thread\n that show modal dialogs, which would otherwise block the calling thread,\n such as a testing thread.",
      "javadoc": "Launches the runnable on a new thread so as to not block the calling\n thread. This is very useful for performing actions on the Swing thread\n that show modal dialogs, which would otherwise block the calling thread,\n such as a testing thread.\n@param runnable The runnable that will be executed in a new Thread that\n            will place the runnable on the Swing thread.",
      "static": true,
      "params": [
        {
          "name": "runnable",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "The runnable that will be executed in a new Thread that\n            will place the runnable on the Swing thread."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clickTableCell",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "table",
          "type_long": "javax.swing.JTable",
          "type_short": "JTable",
          "comment": ""
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "clickCount",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clickListRange",
      "comment": "Clicks a range of items in a list (simulates holding SHIFT and selecting\n each item in the range in-turn)",
      "javadoc": "Clicks a range of items in a list (simulates holding SHIFT and selecting\n each item in the range in-turn)\n@param list the list to select from\n@param row the initial index\n@param count the number of rows to select",
      "static": true,
      "params": [
        {
          "name": "list",
          "type_long": "javax.swing.JList\u003c?\u003e",
          "type_short": "JList",
          "comment": "the list to select from"
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the initial index"
        },
        {
          "name": "count",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of rows to select"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clickTableRange",
      "comment": "Clicks a range of items in a table (simulates holding SHIFT and selecting\n each item in the range)",
      "javadoc": "Clicks a range of items in a table (simulates holding SHIFT and selecting\n each item in the range)\n@param table the table to select\n@param row the starting row index\n@param count the number of rows to select",
      "static": true,
      "params": [
        {
          "name": "table",
          "type_long": "javax.swing.JTable",
          "type_short": "JTable",
          "comment": "the table to select"
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the starting row index"
        },
        {
          "name": "count",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of rows to select"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "editCell",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "table",
          "type_long": "javax.swing.JTable",
          "type_short": "JTable",
          "comment": ""
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.table.TableCellEditor",
        "type_short": "TableCellEditor",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRenderedTableCellValue",
      "comment": "Gets the rendered value for the specified table cell.  The actual value at the cell may\n not be a String.  This method will get the String display value, as created by the table.",
      "javadoc": "Gets the rendered value for the specified table cell.  The actual value at the cell may\n not be a String.  This method will get the String display value, as created by the table.\n@param table the table to query\n@param row the row to query\n@param column the column to query\n@return the String value\n@throws IllegalArgumentException if there is no renderer or the rendered component is\n         something from which this method can get a String (such as a JLabel)",
      "static": true,
      "params": [
        {
          "name": "table",
          "type_long": "javax.swing.JTable",
          "type_short": "JTable",
          "comment": "the table to query"
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row to query"
        },
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column to query"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the String value"
      },
      "throws": []
    },
    {
      "name": "setComboBoxSelection",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "comboField",
          "type_long": "javax.swing.JComboBox\u003cT\u003e",
          "type_short": "JComboBox",
          "comment": ""
        },
        {
          "name": "selection",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setText",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "field",
          "type_long": "javax.swing.text.JTextComponent",
          "type_short": "JTextComponent",
          "comment": ""
        },
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getText",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "field",
          "type_long": "javax.swing.text.JTextComponent",
          "type_short": "JTextComponent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findTreePathToText",
      "comment": "Finds the path of a tree node in the indicated tree with the specified\n text. The matching tree node is determined by comparing the specified\n text with the string returned by the tree node\u0027s toString() method. \n Note: This method affects the expansion state of the tree. It will expand\n nodes starting at the root until a match is found or all of the tree is\n checked.",
      "javadoc": "Finds the path of a tree node in the indicated tree with the specified\n text. The matching tree node is determined by comparing the specified\n text with the string returned by the tree node\u0027s toString() method. \u003cbr\u003e\n Note: This method affects the expansion state of the tree. It will expand\n nodes starting at the root until a match is found or all of the tree is\n checked.\n@param tree the tree\n@param text the tree node\u0027s text\n@return the tree path",
      "static": true,
      "params": [
        {
          "name": "tree",
          "type_long": "javax.swing.JTree",
          "type_short": "JTree",
          "comment": "the tree"
        },
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the tree node\u0027s text"
        }
      ],
      "return": {
        "type_long": "javax.swing.tree.TreePath",
        "type_short": "TreePath",
        "comment": "the tree path"
      },
      "throws": []
    },
    {
      "name": "findPathToText",
      "comment": "Performs a depth first search for the named tree node.",
      "javadoc": "Performs a depth first search for the named tree node.\n@param tree the tree to search\n@param startTreePath path indicating node to begin searching from in the\n            tree\n@param text the name of the node to find\n@return the path to the named node or null if it can\u0027t be found.",
      "static": true,
      "params": [
        {
          "name": "tree",
          "type_long": "javax.swing.JTree",
          "type_short": "JTree",
          "comment": "the tree to search"
        },
        {
          "name": "startTreePath",
          "type_long": "javax.swing.tree.TreePath",
          "type_short": "TreePath",
          "comment": "path indicating node to begin searching from in the\n            tree"
        },
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the node to find"
        }
      ],
      "return": {
        "type_long": "javax.swing.tree.TreePath",
        "type_short": "TreePath",
        "comment": "the path to the named node or null if it can\u0027t be found."
      },
      "throws": []
    },
    {
      "name": "createStackTraceForAllThreads",
      "comment": "Returns a string which is a printout of a stack trace for each thread\n running in the current JVM",
      "javadoc": "Returns a string which is a printout of a stack trace for each thread\n running in the current JVM\n@return the stack trace string",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the stack trace string"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Prints the contents of the given collection by way of the\n Object#toString() method.",
      "javadoc": "Prints the contents of the given collection by way of the\n {@link Object#toString()} method.\n@param collection The contents of which to print\n@return A string representation of the given collection",
      "static": true,
      "params": [
        {
          "name": "collection",
          "type_long": "java.util.Collection\u003c?\u003e",
          "type_short": "Collection",
          "comment": "The contents of which to print"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "A string representation of the given collection"
      },
      "throws": []
    },
    {
      "name": "fixupGUI",
      "comment": "Invoke fixupGUI at the beginning of your JUnit test or in\n its setup() method to make your GUI for the JUnit test appear using the\n system Look and Feel. The system look and feel is the default that Ghidra\n uses. This will also change the default fonts for the JUnit test to be\n the same as those in Ghidra.",
      "javadoc": "Invoke \u003ccode\u003efixupGUI\u003c/code\u003e at the beginning of your JUnit test or in\n its setup() method to make your GUI for the JUnit test appear using the\n system Look and Feel. The system look and feel is the default that Ghidra\n uses. This will also change the default fonts for the JUnit test to be\n the same as those in Ghidra.\n@exception InterruptedException if we\u0027re interrupted while waiting for\n                the event dispatching thread to finish excecuting\n                \u003ccode\u003edoRun.run()\u003c/code\u003e\n@exception InvocationTargetException if an exception is thrown while\n                running \u003ccode\u003edoRun\u003c/code\u003e",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.InterruptedException",
          "type_short": "InterruptedException",
          "comment": ""
        },
        {
          "type_long": "java.lang.reflect.InvocationTargetException",
          "type_short": "InvocationTargetException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFontMetrics",
      "comment": "Returns a font metrics for the given font using a generic buffered image graphics context.",
      "javadoc": "Returns a font metrics for the given font using a generic buffered image graphics context.\n@param font the font\n@return the font metrics",
      "static": true,
      "params": [
        {
          "name": "font",
          "type_long": "java.awt.Font",
          "type_short": "Font",
          "comment": "the font"
        }
      ],
      "return": {
        "type_long": "java.awt.FontMetrics",
        "type_short": "FontMetrics",
        "comment": "the font metrics"
      },
      "throws": []
    },
    {
      "name": "setErrorsExpected",
      "comment": "Signals that the client expected the System Under Test (SUT) to report errors.  Use this\n when you wish to verify that errors are reported and you do not want those errors to\n fail the test.  The default value for this setting is false, which means that any\n errors reported will fail the running test.",
      "javadoc": "Signals that the client expected the System Under Test (SUT) to report errors.  Use this\n when you wish to verify that errors are reported and you do not want those errors to\n fail the test.  The default value for this setting is false, which means that any\n errors reported will fail the running test.\n@param expected true if errors are expected.",
      "static": true,
      "params": [
        {
          "name": "expected",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if errors are expected."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForSwing",
      "comment": "Waits for the Swing thread to process any pending events. This method\n also waits for any SwingUpdateManagers that have pending events\n to be flushed.",
      "javadoc": "Waits for the Swing thread to process any pending events. This method\n also waits for any {@link SwingUpdateManager}s that have pending events\n to be flushed.\n@return true if the any {@link SwingUpdateManager}s were busy.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the any SwingUpdateManagers were busy."
      },
      "throws": []
    },
    {
      "name": "waitForSwing",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "managers",
          "type_long": "java.util.Set\u003cghidra.util.task.AbstractSwingUpdateManager\u003e",
          "type_short": "Set",
          "comment": ""
        },
        {
          "name": "flush",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "flushAllManagers",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "managers",
          "type_long": "java.util.Set\u003cghidra.util.task.AbstractSwingUpdateManager\u003e",
          "type_short": "Set",
          "comment": ""
        },
        {
          "name": "flush",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doFlush",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "doFlush",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "manager",
          "type_long": "ghidra.util.task.AbstractSwingUpdateManager",
          "type_short": "AbstractSwingUpdateManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "privateWaitForPostedSwingRunnables_SwingSafe",
      "comment": "This is only for internal use. If you need to wait for the Swing thread\n from your test, then use #waitForSwing().",
      "javadoc": "This is only for internal use. If you need to wait for the Swing thread\n from your test, then use {@link #waitForSwing()}.\n@deprecated This is not a test writer\u0027s method, but instead an\n             infrastructure method.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "yieldToSwing",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDebugFileDirectory",
      "comment": "Returns the directory into which tests can write debug files, such as\n files containing print statements or image files.\n\n \n This is not a temporary directory that will be deleted between tests,\n which is useful in that the debug files will persist after a test run.\n\n \n Examples of this directory:\n \n server: {share dir}/junits.new/JunitTest_version/reports\n local gradle: {user home}/git/{repo}/ghidra/build/JUnit/reports\n eclipse: {module}/bin/\n ",
      "javadoc": "Returns the directory into which tests can write debug files, such as\n files containing print statements or image files.\n\n \u003cP\u003e\n This is not a temporary directory that will be deleted between tests,\n which is useful in that the debug files will persist after a test run.\n\n \u003cP\u003e\n Examples of this directory:\n \u003cUL\u003e\n \u003cLI\u003eserver: {share dir}/junits.new/JunitTest_version/reports\u003c/LI\u003e\n \u003cLI\u003elocal gradle: {user home}/git/{repo}/ghidra/build/JUnit/reports\u003c/LI\u003e\n \u003cLI\u003eeclipse: {module}/bin/\u003c/LI\u003e\n \u003c/UL\u003e\n@return the directory",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the directory"
      },
      "throws": []
    },
    {
      "name": "createTempDirectory",
      "comment": "Creates a sub-directory with the given name as a child of the Java\n temp directory. The given name will be the prefix of the new directory\n name, with any additional text as created by\n Files#createTempDirectory(Path, String, java.nio.file.attribute.FileAttribute...).\n Any left-over test directories will be cleaned-up before creating the new\n directory.\n \n \n Note: you should not call this method multiple times, as each call will\n cleanup the previously created directories.",
      "javadoc": "Creates a \u003cb\u003esub-directory\u003c/b\u003e with the given name as a child of the Java\n temp directory. The given name will be the prefix of the new directory\n name, with any additional text as created by\n {@link Files#createTempDirectory(Path, String, java.nio.file.attribute.FileAttribute...)}.\n Any left-over test directories will be cleaned-up before creating the new\n directory.\n \n \u003cp\u003e\n Note: you should not call this method multiple times, as each call will\n cleanup the previously created directories.\n@param name the name of the directory to create\n@return the newly created directory\n@throws IOException of there is a problem creating the new directory",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the directory to create"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the newly created directory"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "of there is a problem creating the new directory"
        }
      ]
    },
    {
      "name": "createTempFilePath",
      "comment": "Creates a file path with a filename that is under the system temp\n directory. The path returned will not point to an existing file. The\n suffix of the file will be .tmp.",
      "javadoc": "Creates a file path with a filename that is under the system temp\n directory. The path returned will not point to an existing file. The\n suffix of the file will be \u003ccode\u003e.tmp\u003c/code\u003e.\n@param name the filename\n@return a new file path\n@throws IOException if there is any problem ensuring that the created\n             path is non-existent\n@see #createTempFilePath(String, String)",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the filename"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a new file path"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is any problem ensuring that the created\n             path is non-existent"
        }
      ]
    },
    {
      "name": "createTempFilePath",
      "comment": "Creates a file path with a filename that is under the system temp\n directory. The path returned will not point to an existing file. This\n method is the same as #createTempFilePath(String), except that\n you must provide the extension.",
      "javadoc": "Creates a file path with a filename that is under the system temp\n directory. The path returned will not point to an existing file. This\n method is the same as {@link #createTempFilePath(String)}, except that\n you must provide the extension.\n@param name the filename\n@param extension the file extension\n@return a new file path\n@throws IOException if there is any problem ensuring that the created\n             path is non-existent\n@see #createTempFile(String, String)",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the filename"
        },
        {
          "name": "extension",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the file extension"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a new file path"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is any problem ensuring that the created\n             path is non-existent"
        }
      ]
    },
    {
      "name": "createTempFileForTest",
      "comment": "Creates a temp file for the current test, using the test name as a prefix\n for the filename. This method calls #createTempFile(String),\n which will cleanup any pre-existing temp files whose name pattern matches\n this test name. This helps to avoid old temp files from accumulating.",
      "javadoc": "Creates a temp file for the current test, using the test name as a prefix\n for the filename. This method calls {@link #createTempFile(String)},\n which will cleanup any pre-existing temp files whose name pattern matches\n this test name. This helps to avoid old temp files from accumulating.\n@return the new temp file\n@throws IOException if there is a problem creating the new file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the new temp file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem creating the new file"
        }
      ]
    },
    {
      "name": "createTempFileForTest",
      "comment": "Creates a temp file for the current test, using the test name as a prefix\n for the filename. This method calls #createTempFile(String),\n which will cleanup any pre-existing temp files whose name pattern matches\n this test name. This helps to avoid old temp files from accumulating.",
      "javadoc": "Creates a temp file for the current test, using the test name as a prefix\n for the filename. This method calls {@link #createTempFile(String)},\n which will cleanup any pre-existing temp files whose name pattern matches\n this test name. This helps to avoid old temp files from accumulating.\n@param suffix the suffix to provide for the temp file\n@return the new temp file\n@throws IOException if there is a problem creating the new file",
      "static": false,
      "params": [
        {
          "name": "suffix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the suffix to provide for the temp file"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the new temp file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem creating the new file"
        }
      ]
    },
    {
      "name": "createTempFile",
      "comment": "Creates a file in the Java temp directory using the given name as a\n prefix and the given suffix. The final filename will also include the\n current test name, as well as any data added by\n File#createTempFile(String, String). The file suffix will be\n .tmp\n \n The file will be marked to delete on JVM exit. This will not work if the\n JVM is taken down the hard way, as when pressing the stop button in\n Eclipse.",
      "javadoc": "Creates a file in the Java temp directory using the given name as a\n prefix and the given suffix. The final filename will also include the\n current test name, as well as any data added by\n {@link File#createTempFile(String, String)}. The file suffix will be\n \u003ccode\u003e.tmp\u003c/code\u003e\n \u003cp\u003e\n The file will be marked to delete on JVM exit. This will not work if the\n JVM is taken down the hard way, as when pressing the stop button in\n Eclipse.\n@param name the prefix to put on the file, before the test name\n@return the newly created file\n@throws IOException if there is a problem creating the new file\n@see #createTempFile(String, String)",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the prefix to put on the file, before the test name"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the newly created file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem creating the new file"
        }
      ]
    },
    {
      "name": "createTempFile",
      "comment": "Creates a file in the Java temp directory using the given name as a\n prefix and the given suffix. The final filename will also include the\n current test name, as well as any data added by\n File#createTempFile(String, String).\n \n The file will be marked to delete on JVM exit. This will not work if the\n JVM is taken down the hard way, as when pressing the stop button in\n Eclipse.\n \n Note: This method will create the file on disk! If you need the\n file to not exist, then you must delete the file yourself. Alternatively,\n you could instead call #createTempFilePath(String, String), which\n will ensure that the created temp file is deleted.\n\n \n Finally, this method will delete any files that match the given name and\n suffix values before creating the given temp file. This is important,\n as it will delete any files already created by the test that match this\n info.",
      "javadoc": "Creates a file in the Java temp directory using the given name as a\n prefix and the given suffix. The final filename will also include the\n current test name, as well as any data added by\n {@link File#createTempFile(String, String)}.\n \u003cp\u003e\n The file will be marked to delete on JVM exit. This will not work if the\n JVM is taken down the hard way, as when pressing the stop button in\n Eclipse.\n \u003cp\u003e\n Note: This method \u003cb\u003ewill\u003c/b\u003e create the file on disk! If you need the\n file to not exist, then you must delete the file yourself. Alternatively,\n you could instead call {@link #createTempFilePath(String, String)}, which\n will ensure that the created temp file is deleted.\n\n \u003cp\u003e\n Finally, this method will delete any files that match the given name and\n suffix values before creating the given temp file. \u003cb\u003eThis is important,\n as it will delete any files already created by the test that match this\n info.\u003c/b\u003e\n@param name the prefix to put on the file, before the test name\n@param suffix the file suffix\n@return the newly created file\n@throws IOException if there is a problem creating the new file\n@see #createTempFile(String)",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the prefix to put on the file, before the test name"
        },
        {
          "name": "suffix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the file suffix"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the newly created file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem creating the new file"
        }
      ]
    },
    {
      "name": "deleteSimilarTempFiles",
      "comment": "Delete any files under the Java temp directory that have the given text\n in their name.",
      "javadoc": "Delete any files under the Java temp directory that have the given text\n in their name.\n@param nameText the partial name text to match against the files\n@see #deleteMatchingTempFiles(String)",
      "static": true,
      "params": [
        {
          "name": "nameText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the partial name text to match against the files"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteMatchingTempFiles",
      "comment": "Delete any files under the this test case\u0027s specific temp directory that\n match the give regex Pattern",
      "javadoc": "Delete any files under the this test case\u0027s specific temp directory that\n match the give regex {@link Pattern}\n@param namePattern the pattern to match against the files\n@see #deleteSimilarTempFiles(String)",
      "static": true,
      "params": [
        {
          "name": "namePattern",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the pattern to match against the files"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
