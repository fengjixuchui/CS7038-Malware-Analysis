{
  "name": "AbstractGTest",
  "comment": "A root for system tests that provides known system information.\n\n This class exists so that fast unit tests have a place to share data without having the\n slowness of more heavy weight concepts like Application, logging, etc.\n\n \t\t\t\t\t\t!!\tWARNING  !!\n This test is meant to initialize quickly.  All file I/O should be avoided.",
  "javadoc": "A root for system tests that provides known system information.\n\n \u003cP\u003eThis class exists so that fast unit tests have a place to share data without having the\n slowness of more heavy weight concepts like {@link Application}, logging, etc.\n\n \u003cP\u003e\t\t\t\t\t\t!!\tWARNING  !!\n This test is meant to initialize quickly.  All file I/O should be avoided.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "BATCH_MODE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "PARALLEL_MODE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "DEFAULT_WAIT_DELAY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "DEFAULT_WAIT_TIMEOUT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "DEFAULT_WINDOW_TIMEOUT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "PRIVATE_LONG_WAIT_TIMEOUT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "testDirectoryPath",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "testName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "org.junit.rules.TestName",
      "type_short": "TestName",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createTestDirectoryPath",
      "comment": "Get the directory path within which all temporary test\n data files should be created.",
      "javadoc": "Get the directory path within which all temporary test\n data files should be created.\n@return test directory path ending with a File.separator character",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "test directory path ending with a File.separator character"
      },
      "throws": []
    },
    {
      "name": "buildBatchDirectoryPath",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildDevelopmentDirectoryPath",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTestDirectoryPath",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRandomInt",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRandomInt",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "min",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "max",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRandomString",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRandomString",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "min",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "max",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertArraysEqualOrdered",
      "comment": "Compares the contents of two arrays to determine if they are equal.  The contents must\n match in the same order. If message\n is null, then a generic error message will be printed.",
      "javadoc": "Compares the contents of two arrays to determine if they are equal.  The contents must\n match in the same order. If \u003ccode\u003emessage\u003c/code\u003e\n is \u003ccode\u003enull\u003c/code\u003e, then a generic error message will be printed.\n@param message The message to print upon failure; can be null\n@param expected The expected array.\n@param actual The actual array.",
      "static": true,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The message to print upon failure; can be null"
        },
        {
          "name": "expected",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": "The expected array."
        },
        {
          "name": "actual",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": "The actual array."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertArraysEqualUnordered",
      "comment": "Compares the contents of two arrays to determine if they are equal.  The contents do not have\n to be in the same order.  If message\n is null, then a generic error message will be printed.",
      "javadoc": "Compares the contents of two arrays to determine if they are equal.  The contents do not have\n to be in the same order.  If \u003ccode\u003emessage\u003c/code\u003e\n is \u003ccode\u003enull\u003c/code\u003e, then a generic error message will be printed.\n@param message The message to print upon failure; can be null\n@param expected The expected array.\n@param actual The actual array.",
      "static": true,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The message to print upon failure; can be null"
        },
        {
          "name": "expected",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": "The expected array."
        },
        {
          "name": "actual",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": "The actual array."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertListEqualOrdered",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "expected",
          "type_long": "java.util.List\u003c?\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "actual",
          "type_long": "java.util.List\u003c?\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertListEqualOrdered",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "expected",
          "type_long": "java.util.List\u003c?\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "actual",
          "type_long": "java.util.List\u003c?\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertListEqualUnordered",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "expected",
          "type_long": "java.util.List\u003c?\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "actual",
          "type_long": "java.util.List\u003c?\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertListEqualsArrayOrdered",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "actual",
          "type_long": "java.util.List\u003cT\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "expected",
          "type_long": "T[]",
          "type_short": "T[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertListEqualsArrayUnordered",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "actual",
          "type_long": "java.util.List\u003c?\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "expected",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertArraysEqualUnordered",
      "comment": "Compares the contents of two arrays to determine if they are equal",
      "javadoc": "Compares the contents of two arrays to determine if they are equal\n@param expected The expected array.\n@param actual The actual array.",
      "static": true,
      "params": [
        {
          "name": "expected",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "The expected array."
        },
        {
          "name": "actual",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "The actual array."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertContainsExactly",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "collection",
          "type_long": "java.util.Collection\u003cT\u003e",
          "type_short": "Collection",
          "comment": ""
        },
        {
          "name": "expected",
          "type_long": "T[]",
          "type_short": "T[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertContainsExactly",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "expected",
          "type_long": "java.util.Collection\u003cT\u003e",
          "type_short": "Collection",
          "comment": ""
        },
        {
          "name": "actual",
          "type_long": "java.util.Collection\u003cT\u003e",
          "type_short": "Collection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "printListFailureMessage",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "expected",
          "type_long": "java.util.List\u003c?\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "actual",
          "type_long": "java.util.List\u003c?\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "failWithException",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "e",
          "type_long": "java.lang.Throwable",
          "type_short": "Throwable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the current test method name",
      "javadoc": "Returns the current test method name\n@return the current test method name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the current test method name"
      },
      "throws": []
    },
    {
      "name": "bytes",
      "comment": "Friendly way to create an array of bytes with static values.",
      "javadoc": "Friendly way to create an array of bytes with static values.\n@param unsignedBytes var-args list of unsigned byte values (ie. 0..255)\n@return array of bytes",
      "static": true,
      "params": [
        {
          "name": "unsignedBytes",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "var-args list of unsigned byte values (ie. 0..255)"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "array of bytes"
      },
      "throws": []
    },
    {
      "name": "sleep",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "timeMs",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitFor",
      "comment": "Waits for the given latch to be counted-down",
      "javadoc": "Waits for the given latch to be counted-down\n@param latch the latch to await\n@throws AssertionFailedError if the condition is not met within the timeout period",
      "static": true,
      "params": [
        {
          "name": "latch",
          "type_long": "java.util.concurrent.CountDownLatch",
          "type_short": "CountDownLatch",
          "comment": "the latch to await"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitFor",
      "comment": "Waits for the given AtomicBoolean to return true.  This is a convenience method for\n #waitFor(BooleanSupplier).",
      "javadoc": "Waits for the given AtomicBoolean to return true.  This is a convenience method for\n {@link #waitFor(BooleanSupplier)}.\n@param ab the atomic boolean\n@throws AssertionFailedError if the condition is not met within the timeout period",
      "static": true,
      "params": [
        {
          "name": "ab",
          "type_long": "java.util.concurrent.atomic.AtomicBoolean",
          "type_short": "AtomicBoolean",
          "comment": "the atomic boolean"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "junit.framework.AssertionFailedError",
          "type_short": "AssertionFailedError",
          "comment": "if the condition is not met within the timeout period"
        }
      ]
    },
    {
      "name": "waitFor",
      "comment": "Waits for the given condition to return true",
      "javadoc": "Waits for the given condition to return true\n@param condition the condition that returns true when satisfied\n@throws AssertionFailedError if the condition is not met within the timeout period",
      "static": true,
      "params": [
        {
          "name": "condition",
          "type_long": "java.util.function.BooleanSupplier",
          "type_short": "BooleanSupplier",
          "comment": "the condition that returns true when satisfied"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "junit.framework.AssertionFailedError",
          "type_short": "AssertionFailedError",
          "comment": "if the condition is not met within the timeout period"
        }
      ]
    },
    {
      "name": "waitForCondition",
      "comment": "Waits for the given condition to return true",
      "javadoc": "Waits for the given condition to return true\n@param condition the condition that returns true when satisfied\n@throws AssertionFailedError if the condition is not met within the timeout period",
      "static": true,
      "params": [
        {
          "name": "condition",
          "type_long": "java.util.function.BooleanSupplier",
          "type_short": "BooleanSupplier",
          "comment": "the condition that returns true when satisfied"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "junit.framework.AssertionFailedError",
          "type_short": "AssertionFailedError",
          "comment": "if the condition is not met within the timeout period"
        }
      ]
    },
    {
      "name": "waitForCondition",
      "comment": "Waits for the given condition to return true",
      "javadoc": "Waits for the given condition to return true\n@param condition the condition that returns true when satisfied\n@param failureMessage the message to print upon the timeout being reached\n@throws AssertionFailedError if the condition is not met within the timeout period",
      "static": true,
      "params": [
        {
          "name": "condition",
          "type_long": "java.util.function.BooleanSupplier",
          "type_short": "BooleanSupplier",
          "comment": "the condition that returns true when satisfied"
        },
        {
          "name": "failureMessage",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the message to print upon the timeout being reached"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "junit.framework.AssertionFailedError",
          "type_short": "AssertionFailedError",
          "comment": "if the condition is not met within the timeout period"
        }
      ]
    },
    {
      "name": "waitForCondition",
      "comment": "Waits for the given condition to return true",
      "javadoc": "Waits for the given condition to return true\n@param condition the condition that returns true when satisfied\n@param failureMessageSupplier the function that will supply the failure message in the\n        event of a timeout.\n@throws AssertionFailedError if the condition is not met within the timeout period",
      "static": true,
      "params": [
        {
          "name": "condition",
          "type_long": "java.util.function.BooleanSupplier",
          "type_short": "BooleanSupplier",
          "comment": "the condition that returns true when satisfied"
        },
        {
          "name": "failureMessageSupplier",
          "type_long": "java.util.function.Supplier\u003cjava.lang.String\u003e",
          "type_short": "Supplier",
          "comment": "the function that will supply the failure message in the\n        event of a timeout."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "junit.framework.AssertionFailedError",
          "type_short": "AssertionFailedError",
          "comment": "if the condition is not met within the timeout period"
        }
      ]
    },
    {
      "name": "waitForConditionWithoutFailing",
      "comment": "Waits for the given condition to return true.  Most of the waitForCondition()\n methods throw an AssertionFailedError if the timeout period expires.\n  This method allows you to setup a longer wait period by repeatedly calling this method.\n\n Most clients should use #waitForCondition(BooleanSupplier).",
      "javadoc": "Waits for the given condition to return true.  Most of the \u003ccode\u003ewaitForCondition()\u003c/code\u003e\n methods throw an {@link AssertionFailedError} if the timeout period expires.\n  This method allows you to setup a longer wait period by repeatedly calling this method.\n\n \u003cP\u003eMost clients should use {@link #waitForCondition(BooleanSupplier)}.\n@param supplier the supplier that returns true when satisfied",
      "static": true,
      "params": [
        {
          "name": "supplier",
          "type_long": "java.util.function.BooleanSupplier",
          "type_short": "BooleanSupplier",
          "comment": "the supplier that returns true when satisfied"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForCondition",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "condition",
          "type_long": "java.util.function.BooleanSupplier",
          "type_short": "BooleanSupplier",
          "comment": ""
        },
        {
          "name": "failOnTimeout",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "failureMessage",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "junit.framework.AssertionFailedError",
          "type_short": "AssertionFailedError",
          "comment": ""
        }
      ]
    },
    {
      "name": "waitForCondition",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "condition",
          "type_long": "java.util.function.BooleanSupplier",
          "type_short": "BooleanSupplier",
          "comment": ""
        },
        {
          "name": "failOnTimeout",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "failureMessageSupplier",
          "type_long": "java.util.function.Supplier\u003cjava.lang.String\u003e",
          "type_short": "Supplier",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "junit.framework.AssertionFailedError",
          "type_short": "AssertionFailedError",
          "comment": ""
        }
      ]
    },
    {
      "name": "waitFor",
      "comment": "Waits for the value returned by the supplier to be non-null, throwing an exception if\n that does not happen by the default timeout.",
      "javadoc": "Waits for the value returned by the supplier to be non-null, throwing an exception if\n that does not happen by the default timeout.\n@param supplier the supplier of the value\n@param failureMessage the message to print upon the timeout being reached\n@return the non-null value\n@throws AssertionFailedError if a non-null value is not returned within the timeout period",
      "static": true,
      "params": [
        {
          "name": "supplier",
          "type_long": "java.util.function.Supplier\u003cT\u003e",
          "type_short": "Supplier",
          "comment": "the supplier of the value"
        },
        {
          "name": "failureMessage",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the message to print upon the timeout being reached"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the non-null value"
      },
      "throws": []
    },
    {
      "name": "waitFor",
      "comment": "Waits for the value returned by the supplier to be non-null, throwing an exception if\n that does not happen by the default timeout.",
      "javadoc": "Waits for the value returned by the supplier to be non-null, throwing an exception if\n that does not happen by the default timeout.\n@param supplier the supplier of the value\n@return the non-null value\n@throws AssertionFailedError if a non-null value is not returned within the timeout period",
      "static": true,
      "params": [
        {
          "name": "supplier",
          "type_long": "java.util.function.Supplier\u003cT\u003e",
          "type_short": "Supplier",
          "comment": "the supplier of the value"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the non-null value"
      },
      "throws": []
    },
    {
      "name": "waitForValue",
      "comment": "Waits for the value returned by the supplier to be non-null, throwing an exception if\n that does not happen by the default timeout.",
      "javadoc": "Waits for the value returned by the supplier to be non-null, throwing an exception if\n that does not happen by the default timeout.\n@param supplier the supplier of the value\n@return the non-null value\n@throws AssertionFailedError if a non-null value is not returned within the timeout period",
      "static": true,
      "params": [
        {
          "name": "supplier",
          "type_long": "java.util.function.Supplier\u003cT\u003e",
          "type_short": "Supplier",
          "comment": "the supplier of the value"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the non-null value"
      },
      "throws": []
    },
    {
      "name": "waitForValueWithoutFailing",
      "comment": "Waits for the value returned by the supplier to be non-null.  If the timeout period\n expires, then null will be returned.   Most of the waitXyz() methods\n throw an AssertionFailedError if the timeout period expires.  This method allows\n you to setup a longer wait period by repeatedly calling this method.\n\n Most clients should use #waitForValue(Supplier).",
      "javadoc": "Waits for the value returned by the supplier to be non-null.  If the timeout period\n expires, then null will be returned.   Most of the \u003ccode\u003ewaitXyz()\u003c/code\u003e methods\n throw an {@link AssertionFailedError} if the timeout period expires.  This method allows\n you to setup a longer wait period by repeatedly calling this method.\n\n \u003cP\u003eMost clients should use {@link #waitForValue(Supplier)}.\n@param supplier the supplier of the value\n@return the value; may be null\n@see #waitForValue(Supplier)",
      "static": true,
      "params": [
        {
          "name": "supplier",
          "type_long": "java.util.function.Supplier\u003cT\u003e",
          "type_short": "Supplier",
          "comment": "the supplier of the value"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the value; may be null"
      },
      "throws": []
    },
    {
      "name": "waitForValue",
      "comment": "Waits for the value returned by the supplier to be non-null, optionally\n throwing an exception if that does not happen by the given timeout.",
      "javadoc": "Waits for the value returned by the supplier to be non-null, optionally\n throwing an exception if that does not happen by the given timeout.\n@param supplier the supplier of the value\n@param failureMessage the message to print upon the timeout being reached\n@param failOnTimeout if true, an exception will be thrown if the timeout is reached\n@return the value\n@throws AssertionFailedError if a non-null value is not returned within the timeout period",
      "static": true,
      "params": [
        {
          "name": "supplier",
          "type_long": "java.util.function.Supplier\u003cT\u003e",
          "type_short": "Supplier",
          "comment": "the supplier of the value"
        },
        {
          "name": "failureMessage",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the message to print upon the timeout being reached"
        },
        {
          "name": "failOnTimeout",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, an exception will be thrown if the timeout is reached"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the value"
      },
      "throws": []
    }
  ]
}
