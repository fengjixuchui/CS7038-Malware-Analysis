{
  "name": "TestUtils",
  "comment": "Actually, not.  At least not soon...all the *TestCase classes now can\n be split apart into static-style utility methods, and instance-type\n test harness/scaffold methods, but they will need to live at their\n respective layer, not all here in Base.\n \n Future home of utility methods (many methods of TestCase can be put here).\n \n A primary motivating factor for creating this class is to gain access to some of the myriad \n functionality in TestCase without loading its static data.",
  "javadoc": "Actually, not.  At least not soon...all the *TestCase classes now can\n be split apart into static-style utility methods, and instance-type\n test harness/scaffold methods, but they will need to live at their\n respective layer, not all here in Base.\n \n Future home of utility methods (many methods of TestCase can be put here).\n \u003cP\u003e\n A primary motivating factor for creating this class is to gain access to some of the myriad \n functionality in TestCase without loading its static data.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createStackTraceForAllThreads",
      "comment": "Returns a string which is a printout of a stack trace for each thread running in the\n current JVM",
      "javadoc": "Returns a string which is a printout of a stack trace for each thread running in the\n current JVM\n@return the stack trace string",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the stack trace string"
      },
      "throws": []
    },
    {
      "name": "setInstanceField",
      "comment": "Sets the instance field by the given name on the given object \n instance.  \n \n Note: if the field is static, then the ownerInstance field \n can be the class of the object that contains the variable.",
      "javadoc": "Sets the instance field by the given name on the given object \n instance.  \n \u003cp\u003e\n Note: if the field is static, then the \u003ccode\u003eownerInstance\u003c/code\u003e field \n can be the class of the object that contains the variable.\n@param fieldName The name of the field to retrieve.\n@param ownerInstance The object instance from which to get the \n         variable instance.\n@param value The value to use when setting the given field\n@throws RuntimeException if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered.\n@see Field#set(Object, Object)",
      "static": true,
      "params": [
        {
          "name": "fieldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the field to retrieve."
        },
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The object instance from which to get the \n         variable instance."
        },
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The value to use when setting the given field"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.RuntimeException",
          "type_short": "RuntimeException",
          "comment": "if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered."
        }
      ]
    },
    {
      "name": "getInstanceField",
      "comment": "Gets the instance field by the given name on the given object \n instance.  The value is a primitive wrapper if it is a primitive type.\n \n Note: if the field is static, then the ownerInstance field \n can be the class of the object that contains the variable.",
      "javadoc": "Gets the instance field by the given name on the given object \n instance.  The value is a primitive wrapper if it is a primitive type.\n \u003cp\u003e\n Note: if the field is static, then the \u003ccode\u003eownerInstance\u003c/code\u003e field \n can be the class of the object that contains the variable.\n@param fieldName The name of the field to retrieve.\n@param ownerInstance The object instance from which to get the \n         variable instance.\n@return The field instance.\n@throws RuntimeException if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered.\n@see Field#get(java.lang.Object)\n@since Tracker Id 267",
      "static": true,
      "params": [
        {
          "name": "fieldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the field to retrieve."
        },
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The object instance from which to get the \n         variable instance."
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "The field instance."
      },
      "throws": [
        {
          "type_long": "java.lang.RuntimeException",
          "type_short": "RuntimeException",
          "comment": "if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered."
        }
      ]
    },
    {
      "name": "getAllInstanceFields",
      "comment": "Gets all fields of the given object.  Only objects on the immediate instance are \n returned.",
      "javadoc": "Gets all fields of the given object.  Only objects on the immediate instance are \n returned.\n@param ownerInstance the object from which to get fields\n@return the fields",
      "static": true,
      "params": [
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the object from which to get fields"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.Object\u003e",
        "type_short": "List",
        "comment": "the fields"
      },
      "throws": []
    },
    {
      "name": "invokeInstanceMethod",
      "comment": "Uses reflection to execute the method denoted by the given method\n name.  If any value is returned from the method execution, then it \n will be returned from this method.  Otherwise, null is returned.\n \n Note: if the method is static, then the ownerInstance field \n can be the class of the object that contains the method.",
      "javadoc": "Uses reflection to execute the method denoted by the given method\n name.  If any value is returned from the method execution, then it \n will be returned from this method.  Otherwise, \u003ccode\u003enull\u003c/code\u003e is returned.\n \u003cp\u003e\n Note: if the method is static, then the \u003ccode\u003eownerInstance\u003c/code\u003e field \n can be the class of the object that contains the method.\n@param methodName The name of the method to execute.\n@param ownerInstance The object instance of which the method will be\n        executed.\n@param parameterTypes The parameter \u003cb\u003etypes\u003c/b\u003e that the method takes.\n@param args The parameter values that should be passed to the method.\n        This value can be null or zero length if there are no parameters\n        to pass\n@return The return value as returned from executing the method.\n@see Method#invoke(java.lang.Object, java.lang.Object[])\n@throws RuntimeException if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered.\n@since Tracker Id 267",
      "static": true,
      "params": [
        {
          "name": "methodName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the method to execute."
        },
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The object instance of which the method will be\n        executed."
        },
        {
          "name": "parameterTypes",
          "type_long": "java.lang.Class\u003c?\u003e[]",
          "type_short": "java.lang.Class\u003c?\u003e[]",
          "comment": "The parameter types that the method takes."
        },
        {
          "name": "args",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": "The parameter values that should be passed to the method.\n        This value can be null or zero length if there are no parameters\n        to pass"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "The return value as returned from executing the method."
      },
      "throws": [
        {
          "type_long": "java.lang.RuntimeException",
          "type_short": "RuntimeException",
          "comment": "if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered."
        }
      ]
    },
    {
      "name": "invokeInstanceMethod",
      "comment": "Uses reflection to execute the method denoted by the given method\n name.  If any value is returned from the method execution, then it \n will be returned from this method.  Otherwise, null is returned.\n \n Note: if the method is static, then the ownerInstance field \n can be the class of the object that contains the method.\n \n This method is just a convenience for calling \n #invokeInstanceMethod(String, Object, Class[], Object[]).  As the following \n example shows, this method\u0027s uses is a bit cleaner:\n \n  \t// The call below is equivalent to calling:  System.out.println(\"Hi\")\n \tinvokeInstanceMethod(\"println\", System.out, Arrays.asList(String.class), Arrays.asList(\"Hi\"));\n \t\n ",
      "javadoc": "Uses reflection to execute the method denoted by the given method\n name.  If any value is returned from the method execution, then it \n will be returned from this method.  Otherwise, \u003ccode\u003enull\u003c/code\u003e is returned.\n \u003cp\u003e\n Note: if the method is static, then the \u003ccode\u003eownerInstance\u003c/code\u003e field \n can be the class of the object that contains the method.\n \n \u003cP\u003eThis method is just a convenience for calling \n {@link #invokeInstanceMethod(String, Object, Class[], Object[])}.  As the following \n example shows, this method\u0027s uses is a bit cleaner:\n \u003cPRE\u003e\n  \t// The call below is equivalent to calling: \u003cCODE\u003e System.out.println(\"Hi\")\n \tinvokeInstanceMethod(\"println\", System.out, Arrays.asList(String.class), Arrays.asList(\"Hi\"));\n \t\u003c/CODE\u003e\n \u003c/PRE\u003e\n@param methodName The name of the method to execute.\n@param ownerInstance The object instance of which the method will be\n        executed.\n@param parameterTypes The parameter \u003cb\u003etypes\u003c/b\u003e that the method takes.\n@param args The parameter values that should be passed to the method.\n        This value can be null or zero length if there are no parameters\n        to pass\n@return The return value as returned from executing the method.\n@throws RuntimeException if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered.",
      "static": true,
      "params": [
        {
          "name": "methodName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the method to execute."
        },
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The object instance of which the method will be\n        executed."
        },
        {
          "name": "parameterTypes",
          "type_long": "java.util.List\u003cjava.lang.Class\u003c?\u003e\u003e",
          "type_short": "List",
          "comment": "The parameter types that the method takes."
        },
        {
          "name": "args",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": "The parameter values that should be passed to the method.\n        This value can be null or zero length if there are no parameters\n        to pass"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "The return value as returned from executing the method."
      },
      "throws": [
        {
          "type_long": "java.lang.RuntimeException",
          "type_short": "RuntimeException",
          "comment": "if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered."
        }
      ]
    },
    {
      "name": "invokeInstanceMethod",
      "comment": "Uses reflection to execute the method denoted by the given method\n name.  If any value is returned from the method execution, then it \n will be returned from this method.  Otherwise, null is returned.\n \n Note: if the method is static, then the ownerInstance field \n can be the class of the object that contains the method.\n \n If the method you are calling takes no parameters, then call \n #invokeInstanceMethod(String, Object) instead.\n \n This method is just a convenience for calling \n #invokeInstanceMethod(String, Object, Class[], Object[]) when the method only\n takes a single parameter, so that you don\u0027t have the ugliness of creating arrays as the\n parameters for this method.\n \n As an example:\n \n  \t// The call below is equivalent to calling:  System.out.println(\"Hi\")\n \tinvokeInstanceMethod(\"println\", System.out, String.class, \"Hi\");\n \t\n ",
      "javadoc": "Uses reflection to execute the method denoted by the given method\n name.  If any value is returned from the method execution, then it \n will be returned from this method.  Otherwise, \u003ccode\u003enull\u003c/code\u003e is returned.\n \u003cp\u003e\n Note: if the method is static, then the \u003ccode\u003eownerInstance\u003c/code\u003e field \n can be the class of the object that contains the method.\n \n \u003cP\u003eIf the method you are calling takes no parameters, then call \n {@link #invokeInstanceMethod(String, Object)} instead.\n \n \u003cP\u003eThis method is just a convenience for calling \n {@link #invokeInstanceMethod(String, Object, Class[], Object[])} when the method only\n takes a single parameter, so that you don\u0027t have the ugliness of creating arrays as the\n parameters for this method.\n \n \u003cP\u003eAs an example:\n \u003cPRE\u003e\n  \t// The call below is equivalent to calling: \u003cCODE\u003e System.out.println(\"Hi\")\n \tinvokeInstanceMethod(\"println\", System.out, String.class, \"Hi\");\n \t\u003c/CODE\u003e\n \u003c/PRE\u003e\n@param methodName The name of the method to execute.\n@param ownerInstance The object instance of which the method will be\n        executed.\n@param parameterType The parameter types that the method takes.\n@param arg The parameter value that should be passed to the method.\n@return The return value as returned from executing the method.\n@throws RuntimeException if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered.",
      "static": true,
      "params": [
        {
          "name": "methodName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the method to execute."
        },
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The object instance of which the method will be\n        executed."
        },
        {
          "name": "parameterType",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "The parameter types that the method takes."
        },
        {
          "name": "arg",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The parameter value that should be passed to the method."
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "The return value as returned from executing the method."
      },
      "throws": [
        {
          "type_long": "java.lang.RuntimeException",
          "type_short": "RuntimeException",
          "comment": "if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered."
        }
      ]
    },
    {
      "name": "invokeInstanceMethod",
      "comment": "Uses reflection to execute the method denoted by the given method\n name.  If any value is returned from the method execution, then it \n will be returned from this method.  Otherwise, null is returned.\n \n Note: if the method is static, then the ownerInstance field \n can be the class of the object that contains the method.\n \n Warning: The exact class of each arg will be used as the class type\n of the parameter for the method being called.  If the method you are calling takes \n parameters that do not match exactly the class of the args you wish to use, then \n call #invokeInstanceMethod(String, Object, List, List) instead so that you \n can specify the parameter types explicitly.\n \n \n If the method you are calling takes no parameters, then call \n #invokeInstanceMethod(String, Object) instead.\n \n This method is just a convenience for calling \n #invokeInstanceMethod(String, Object, Class[], Object[]) when the method only\n takes a single parameter, so that you don\u0027t have the ugliness of creating arrays as the\n parameters for this method.\n \n As an example:\n \n  \t// The call below is equivalent to calling:  System.out.println(\"Hi\")\n \tinvokeInstanceMethod(\"println\", System.out, \"Hi\");\n \n \t// This call is equivalent to the one above\n \tinvokeInstanceMethod(\"println\", System.out, Arrays.asList(String.class), Arrays.asList(\"Hi\"));\n \t\n \t\n ",
      "javadoc": "Uses reflection to execute the method denoted by the given method\n name.  If any value is returned from the method execution, then it \n will be returned from this method.  Otherwise, \u003ccode\u003enull\u003c/code\u003e is returned.\n \u003cp\u003e\n Note: if the method is static, then the \u003ccode\u003eownerInstance\u003c/code\u003e field \n can be the class of the object that contains the method.\n \n \u003cP\u003e\u003cB\u003eWarning: The exact class of each \u003cCODE\u003earg\u003c/CODE\u003e will be used as the class type\n of the parameter for the method being called.  If the method you are calling takes \n parameters that do not match exactly the class of the args you wish to use, then \n call {@link #invokeInstanceMethod(String, Object, List, List)} instead so that you \n can specify the parameter types explicitly.\n \u003c/B\u003e\n \n \u003cP\u003eIf the method you are calling takes no parameters, then call \n {@link #invokeInstanceMethod(String, Object)} instead.\n \n \u003cP\u003eThis method is just a convenience for calling \n {@link #invokeInstanceMethod(String, Object, Class[], Object[])} when the method only\n takes a single parameter, so that you don\u0027t have the ugliness of creating arrays as the\n parameters for this method.\n \n \u003cP\u003eAs an example:\n \u003cPRE\u003e\n  \t// The call below is equivalent to calling: \u003cCODE\u003e System.out.println(\"Hi\")\n \tinvokeInstanceMethod(\"println\", System.out, \"Hi\");\n \n \t// This call is equivalent to the one above\n \tinvokeInstanceMethod(\"println\", System.out, Arrays.asList(String.class), Arrays.asList(\"Hi\"));\n \t\n \t\u003c/CODE\u003e\n \u003c/PRE\u003e\n@param methodName The name of the method to execute.\n@param ownerInstance The object instance of which the method will be\n        executed.\n@param args The parameter value that should be passed to the method.\n@return The return value as returned from executing the method.\n@throws RuntimeException if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered.",
      "static": true,
      "params": [
        {
          "name": "methodName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the method to execute."
        },
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The object instance of which the method will be\n        executed."
        },
        {
          "name": "args",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": "The parameter value that should be passed to the method."
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "The return value as returned from executing the method."
      },
      "throws": [
        {
          "type_long": "java.lang.RuntimeException",
          "type_short": "RuntimeException",
          "comment": "if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered."
        }
      ]
    },
    {
      "name": "getClasses",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "args",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Class\u003c?\u003e[]",
        "type_short": "java.lang.Class\u003c?\u003e[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "invokeInstanceMethod",
      "comment": "This method is just a \"pass through\" method for \n #invokeInstanceMethod(String, Object, Class[], Object[]) so \n that callers do not need to pass null to that method when the \n underlying instance method does not have any parameters.",
      "javadoc": "This method is just a \"pass through\" method for \n {@link #invokeInstanceMethod(String, Object, Class[], Object[])} so \n that callers do not need to pass null to that method when the \n underlying instance method does not have any parameters.\n@param methodName The name of the method to execute.\n@param ownerInstance The object instance of which the method will be\n        executed.\n@return The return value as returned from executing the method.\n@see Method#invoke(java.lang.Object, java.lang.Object[])\n@throws RuntimeException if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered.\n@see #invokeInstanceMethod(String, Object, Class[], Object[])",
      "static": true,
      "params": [
        {
          "name": "methodName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the method to execute."
        },
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The object instance of which the method will be\n        executed."
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "The return value as returned from executing the method."
      },
      "throws": [
        {
          "type_long": "java.lang.RuntimeException",
          "type_short": "RuntimeException",
          "comment": "if there is a problem accessing the field\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered."
        }
      ]
    },
    {
      "name": "invokeConstructor",
      "comment": "Uses reflection to execute the constructor for the given class with the given parameters.\n The new instance of the given class will be returned.\n ",
      "javadoc": "Uses reflection to execute the constructor for the given class with the given parameters.\n The new instance of the given class will be returned.\n \u003cp\u003e\n@param containingClass The class that contains the desired constructor.\n@param parameterTypes The parameter \u003cb\u003etypes\u003c/b\u003e that the constructor takes.\n        This value can be null or zero length if there are no parameters\n        to pass\n@param args The parameter values that should be passed to the constructor.\n        This value can be null or zero length if there are no parameters\n        to pass\n@return The new class instance\n@throws RuntimeException if there is a problem accessing the constructor\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered.",
      "static": true,
      "params": [
        {
          "name": "containingClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "The class that contains the desired constructor."
        },
        {
          "name": "parameterTypes",
          "type_long": "java.lang.Class\u003c?\u003e[]",
          "type_short": "java.lang.Class\u003c?\u003e[]",
          "comment": "The parameter types that the constructor takes.\n        This value can be null or zero length if there are no parameters\n        to pass"
        },
        {
          "name": "args",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": "The parameter values that should be passed to the constructor.\n        This value can be null or zero length if there are no parameters\n        to pass"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "The new class instance"
      },
      "throws": [
        {
          "type_long": "java.lang.RuntimeException",
          "type_short": "RuntimeException",
          "comment": "if there is a problem accessing the constructor\n         using reflection.  A RuntimeException is used so that calling\n         tests can avoid using a try/catch block, but will still fail\n         when an error is encountered."
        }
      ]
    },
    {
      "name": "argTypes",
      "comment": "A convenience method that can be statically  imported to use with the class, allowing \n you to avoid your own ugly manual array creation.",
      "javadoc": "A convenience method that can be statically  imported to use with the class, allowing \n you to avoid your own ugly manual array creation.\n@param classes the classes\n@return the classes array",
      "static": true,
      "params": [
        {
          "name": "classes",
          "type_long": "java.lang.Class\u003c?\u003e[]",
          "type_short": "java.lang.Class\u003c?\u003e[]",
          "comment": "the classes"
        }
      ],
      "return": {
        "type_long": "java.lang.Class\u003c?\u003e[]",
        "type_short": "java.lang.Class\u003c?\u003e[]",
        "comment": "the classes array"
      },
      "throws": []
    },
    {
      "name": "args",
      "comment": "A convenience method that can be statically  imported to use with the class, allowing \n you to avoid your own ugly manual array creation.",
      "javadoc": "A convenience method that can be statically  imported to use with the class, allowing \n you to avoid your own ugly manual array creation.\n@param objects the objects\n@return the objects array",
      "static": true,
      "params": [
        {
          "name": "objects",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": "the objects"
        }
      ],
      "return": {
        "type_long": "java.lang.Object[]",
        "type_short": "java.lang.Object[]",
        "comment": "the objects array"
      },
      "throws": []
    },
    {
      "name": "locateConstructorOnClass",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "containingClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "parameterTypes",
          "type_long": "java.lang.Class\u003c?\u003e[]",
          "type_short": "java.lang.Class\u003c?\u003e[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.reflect.Constructor\u003c?\u003e",
        "type_short": "Constructor",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "locateMethodObjectOnClass",
      "comment": "Locates the method of the name methodName on the given \n class.  If the given class does not contain the method, then this \n method will recursively call up containingClass\u0027s \n implementation tree looking for a parent implementation of the \n requested method.",
      "javadoc": "Locates the method of the name \u003ccode\u003emethodName\u003c/code\u003e on the given \n class.  If the given class does not contain the method, then this \n method will recursively call up \u003ccode\u003econtainingClass\u003c/code\u003e\u0027s \n implementation tree looking for a parent implementation of the \n requested method.\n@param methodName The name of the method to locate.\n@param containingClass The class that contains the desired method.\n@param parameterTypes The parameters of the desired method (may be null).\n@return The Method object that matches the given name, or null if not\n         suitable method could be found.",
      "static": true,
      "params": [
        {
          "name": "methodName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the method to locate."
        },
        {
          "name": "containingClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "The class that contains the desired method."
        },
        {
          "name": "parameterTypes",
          "type_long": "java.lang.Class\u003c?\u003e[]",
          "type_short": "java.lang.Class\u003c?\u003e[]",
          "comment": "The parameters of the desired method (may be null)."
        }
      ],
      "return": {
        "type_long": "java.lang.reflect.Method",
        "type_short": "Method",
        "comment": "The Method object that matches the given name, or null if not\n         suitable method could be found."
      },
      "throws": []
    },
    {
      "name": "getInstanceFieldByClassType",
      "comment": "Get the first field object contained within object ownerInstance which has the type classType.\n This method is only really useful if it is known that only a single field of \n classType exists within the ownerInstance.",
      "javadoc": "Get the first field object contained within object ownerInstance which has the type classType.\n This method is only really useful if it is known that only a single field of \n classType exists within the ownerInstance.\n@param \u003cT\u003e the type\n@param classType the class type of the desired field\n@param ownerInstance the object instance that owns the field\n@return field object of type classType or null",
      "static": true,
      "params": [
        {
          "name": "classType",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the class type of the desired field"
        },
        {
          "name": "ownerInstance",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the object instance that owns the field"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "field object of type classType or null"
      },
      "throws": []
    },
    {
      "name": "locateFieldByTypeOnClass",
      "comment": "Get the first field specification contained within containingClass which has the type classType.\n This method is only really useful if it is known that only a single field of \n classType exists within the containingClass hierarchy.",
      "javadoc": "Get the first field specification contained within containingClass which has the type classType.\n This method is only really useful if it is known that only a single field of \n classType exists within the containingClass hierarchy.\n@param classType the class\n@param containingClass the class that contains a field of the given type\n@return field which corresponds to type classType or null",
      "static": true,
      "params": [
        {
          "name": "classType",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "the class"
        },
        {
          "name": "containingClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "the class that contains a field of the given type"
        }
      ],
      "return": {
        "type_long": "java.lang.reflect.Field",
        "type_short": "Field",
        "comment": "field which corresponds to type classType or null"
      },
      "throws": []
    }
  ]
}
