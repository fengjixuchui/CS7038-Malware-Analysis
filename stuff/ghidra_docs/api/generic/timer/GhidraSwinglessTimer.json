{
  "name": "GhidraSwinglessTimer",
  "comment": "The GhidraSwinglessTimer is similar to the javax.swing.Timer class.  The big difference is\n that it does NOT use the swing thread for its callbacks.  Similar to the swing timer, only \n one timer thread is ever used no matter how many GhidraSwinglessTimers are instantiated.\n \n It fires one or more s at specified\n intervals. \n Setting up a timer\n involves creating a GhidraSwinglessTimer object,\n registering one or more TimerCallbacks on it,\n and starting the timer using\n the start method.",
  "javadoc": "The GhidraSwinglessTimer is similar to the javax.swing.Timer class.  The big difference is\n that it does NOT use the swing thread for its callbacks.  Similar to the swing timer, only \n one timer thread is ever used no matter how many GhidraSwinglessTimers are instantiated.\n \n It fires one or more {@code TimerCallback}s at specified\n intervals. \n Setting up a timer\n involves creating a \u003ccode\u003eGhidraSwinglessTimer\u003c/code\u003e object,\n registering one or more TimerCallbacks on it,\n and starting the timer using\n the \u003ccode\u003estart\u003c/code\u003e method.",
  "static": false,
  "implements": [
    "generic.timer.GhidraTimer"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "CLEANUP_TIMER_THREAD_DELAY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "60000"
    },
    {
      "name": "timer",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Timer",
      "type_short": "Timer",
      "constant_value": null
    },
    {
      "name": "taskCount",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "cleanupTask",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "generic.timer.GhidraSwinglessTimer.CleanupTimerTask",
      "type_short": "CleanupTimerTask",
      "constant_value": null
    },
    {
      "name": "callback",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.timer.TimerCallback",
      "type_short": "TimerCallback",
      "constant_value": null
    },
    {
      "name": "repeats",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "delay",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "initialDelay",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "timerTask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.TimerTask",
      "type_short": "TimerTask",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getTimer",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.Timer",
        "type_short": "Timer",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "incrementCount",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decrementCount",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cleanupTimer",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new repeating timer with a initial delay of 100ms and a continual delay of 100ms.",
      "javadoc": "Creates a new repeating timer with a initial delay of 100ms and a continual delay of 100ms.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new repeating timer with a initial and continual delay with the given delay.",
      "javadoc": "Creates a new repeating timer with a initial and continual delay with the given delay.\n@param delay the delay to use for the first and subsequent timer callbacks.\n@param callback the callback the be called with the timer fires.",
      "static": false,
      "params": [
        {
          "name": "delay",
          "type_long": "int",
          "type_short": "int",
          "comment": "the delay to use for the first and subsequent timer callbacks."
        },
        {
          "name": "callback",
          "type_long": "generic.timer.TimerCallback",
          "type_short": "TimerCallback",
          "comment": "the callback the be called with the timer fires."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new repeating timer with an initial and continual delay.",
      "javadoc": "Creates a new repeating timer with an initial and continual delay.\n@param initialDelay the delay to use for the first timer callbacks.\n@param delay the delay to use for subsequent timer callbacks.\n@param callback the callback the be called with the timer fires.",
      "static": false,
      "params": [
        {
          "name": "initialDelay",
          "type_long": "int",
          "type_short": "int",
          "comment": "the delay to use for the first timer callbacks."
        },
        {
          "name": "delay",
          "type_long": "int",
          "type_short": "int",
          "comment": "the delay to use for subsequent timer callbacks."
        },
        {
          "name": "callback",
          "type_long": "generic.timer.TimerCallback",
          "type_short": "TimerCallback",
          "comment": "the callback the be called with the timer fires."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDelay",
      "comment": "Returns the delay for all callbacks after the first callback.",
      "javadoc": "Returns the delay for all callbacks after the first callback.\n@return the delay for all callbacks after the first callback.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the delay for all callbacks after the first callback."
      },
      "throws": []
    },
    {
      "name": "getInitialDelay",
      "comment": "Returns the delay for the first callback.",
      "javadoc": "Returns the delay for the first callback.\n@return the delay for the first callback.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the delay for the first callback."
      },
      "throws": []
    },
    {
      "name": "isRepeats",
      "comment": "Returns true if this timer is set to repeating.",
      "javadoc": "Returns true if this timer is set to repeating.\n@return true if this timer is set to repeating.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this timer is set to repeating."
      },
      "throws": []
    },
    {
      "name": "setDelay",
      "comment": "Sets the delay for all callbacks after the first callback",
      "javadoc": "Sets the delay for all callbacks after the first callback",
      "static": false,
      "params": [
        {
          "name": "delay",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setInitialDelay",
      "comment": "Sets the delay for the first callbacks.",
      "javadoc": "Sets the delay for the first callbacks.",
      "static": false,
      "params": [
        {
          "name": "initialDelay",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRepeats",
      "comment": "Sets whether this timer repeats.",
      "javadoc": "Sets whether this timer repeats.\n@param repeats if true, the timer will repeat, if false the timer will only fire once.",
      "static": false,
      "params": [
        {
          "name": "repeats",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the timer will repeat, if false the timer will only fire once."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTimerCallback",
      "comment": "Sets the callback to be called when the timer fires.",
      "javadoc": "Sets the callback to be called when the timer fires.",
      "static": false,
      "params": [
        {
          "name": "callback",
          "type_long": "generic.timer.TimerCallback",
          "type_short": "TimerCallback",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "start",
      "comment": "Starts the timer.",
      "javadoc": "Starts the timer.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "stop",
      "comment": "Stops the timer.",
      "javadoc": "Stops the timer.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isRunning",
      "comment": "Returns true if the timer is running.",
      "javadoc": "Returns true if the timer is running.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "main",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "args",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.InterruptedException",
          "type_short": "InterruptedException",
          "comment": ""
        }
      ]
    }
  ]
}
