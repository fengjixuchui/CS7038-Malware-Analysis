{
  "name": "ExpiringSwingTimer",
  "comment": "This class allows clients to run swing action at some point in the future, when the given \n condition is met, allowing for the task to timeout.  While this class implements the\n GhidraTimer interface, it is really meant to be used to execute a code snippet one\n time at some point in the future.  \n \n Both the call to check for readiness and the actual client code will be run on the Swing\n thread.",
  "javadoc": "This class allows clients to run swing action at some point in the future, when the given \n condition is met, allowing for the task to timeout.  While this class implements the\n {@link GhidraTimer} interface, it is really meant to be used to execute a code snippet one\n time at some point in the future.  \n \n \u003cp\u003eBoth the call to check for readiness and the actual client code will be run on the Swing\n thread.",
  "static": false,
  "implements": [],
  "extends": "generic.timer.GhidraSwingTimer",
  "fields": [
    {
      "name": "startMs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "expireMs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "isReady",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.function.BooleanSupplier",
      "type_short": "BooleanSupplier",
      "constant_value": null
    },
    {
      "name": "expiringTimerCallback",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.timer.ExpiringSwingTimer.ExpiringTimerCallback",
      "type_short": "ExpiringTimerCallback",
      "constant_value": null
    },
    {
      "name": "clientCallback",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.timer.TimerCallback",
      "type_short": "TimerCallback",
      "constant_value": null
    },
    {
      "name": "didRun",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.concurrent.atomic.AtomicBoolean",
      "type_short": "AtomicBoolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "runWhen",
      "comment": "Runs the given client runnable when the given condition returns true.  The returned timer \n will be running.\n \n Once the timer has performed the work, any calls to start the returned timer will \n not perform any work.  You can check #didRun() to see if the work has been completed.",
      "javadoc": "Runs the given client runnable when the given condition returns true.  The returned timer \n will be running.\n \n \u003cp\u003eOnce the timer has performed the work, any calls to start the returned timer will \n not perform any work.  You can check {@link #didRun()} to see if the work has been completed.\n@param isReady true if the code should be run\n@param expireMs the amount of time past which the code will not be run\n@param runnable the code to run\n@return the timer object that is running, which will execute the given code when ready",
      "static": true,
      "params": [
        {
          "name": "isReady",
          "type_long": "java.util.function.BooleanSupplier",
          "type_short": "BooleanSupplier",
          "comment": "true if the code should be run"
        },
        {
          "name": "expireMs",
          "type_long": "int",
          "type_short": "int",
          "comment": "the amount of time past which the code will not be run"
        },
        {
          "name": "runnable",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "the code to run"
        }
      ],
      "return": {
        "type_long": "generic.timer.ExpiringSwingTimer",
        "type_short": "ExpiringSwingTimer",
        "comment": "the timer object that is running, which will execute the given code when ready"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor\n \n Note: this class sets the parent\u0027s initial delay to 0.  This is to allow the client \n code to be executed without delay when the ready condition is true.",
      "javadoc": "Constructor\n \n \u003cp\u003eNote: this class sets the parent\u0027s initial delay to 0.  This is to allow the client \n code to be executed without delay when the ready condition is true.\n@param delay the delay between calls to check \u003ccode\u003eisReady\u003c/code\u003e\n@param isReady true if the code should be run\n@param expireMs the amount of time past which the code will not be run\n@param runnable the code to run",
      "static": false,
      "params": [
        {
          "name": "delay",
          "type_long": "int",
          "type_short": "int",
          "comment": "the delay between calls to check isReady"
        },
        {
          "name": "expireMs",
          "type_long": "int",
          "type_short": "int",
          "comment": "the amount of time past which the code will not be run"
        },
        {
          "name": "isReady",
          "type_long": "java.util.function.BooleanSupplier",
          "type_short": "BooleanSupplier",
          "comment": "true if the code should be run"
        },
        {
          "name": "runnable",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "the code to run"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "didRun",
      "comment": "Returns true if the client runnable was run",
      "javadoc": "Returns true if the client runnable was run\n@return true if the client runnable was run",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the client runnable was run"
      },
      "throws": []
    },
    {
      "name": "start",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isExpired",
      "comment": "Returns true the initial expiration period has passed",
      "javadoc": "Returns true the initial expiration period has passed\n@return true if expired",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if expired"
      },
      "throws": []
    },
    {
      "name": "setTimerCallback",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "callback",
          "type_long": "generic.timer.TimerCallback",
          "type_short": "TimerCallback",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
