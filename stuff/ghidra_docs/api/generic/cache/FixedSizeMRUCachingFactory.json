{
  "name": "FixedSizeMRUCachingFactory",
  "comment": "An object that will cache values returned from the given factory.  This class lets you combine\n the work of building items as needed with cache maintenance operations, such as get and put \n (and move, in the case of a sized cache).\n   \n \n The caching of this class\n is bound by the size parameter of the constructor.   Further, the caching strategy is an \n Most Recently Used strategy, meaning that the least accessed cache items will fall off of the\n cache.",
  "javadoc": "An object that will cache values returned from the given factory.  This class lets you combine\n the work of building items as needed with cache maintenance operations, such as get and put \n (and move, in the case of a sized cache).\n   \n \u003cP\u003e\n The caching of this class\n is bound by the size parameter of the constructor.   Further, the caching strategy is an \n Most Recently Used strategy, meaning that the least accessed cache items will fall off of the\n cache.\n@param \u003cK\u003e the key used to get a value\n@param \u003cV\u003e the value returned for the given key",
  "static": false,
  "implements": [
    "generic.cache.Factory"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "cache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.LRUMap\u003cK,V\u003e",
      "type_short": "LRUMap",
      "constant_value": null
    },
    {
      "name": "delegate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.cache.Factory\u003cK,V\u003e",
      "type_short": "Factory",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "factory",
          "type_long": "generic.cache.Factory\u003cK,V\u003e",
          "type_short": "Factory",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    }
  ]
}
