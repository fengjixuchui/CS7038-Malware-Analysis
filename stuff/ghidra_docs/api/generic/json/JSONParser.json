{
  "name": "JSONParser",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "JSMN_STRICT",
      "comment": "JSON parser. Contains an array of token blocks available. Also stores\n the string being parsed now and current position in that string",
      "javadoc": "JSON parser. Contains an array of token blocks available. Also stores\n the string being parsed now and current position in that string",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "pos",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "toknext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "toksuper",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "ndx",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new parser based over a given  buffer with an array of tokens \n available.",
      "javadoc": "Creates a new parser based over a given  buffer with an array of tokens \n available.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "allocateToken",
      "comment": "Allocates a fresh unused token from the token pull.",
      "javadoc": "Allocates a fresh unused token from the token pull.",
      "static": false,
      "params": [
        {
          "name": "tokens",
          "type_long": "java.util.List\u003cgeneric.json.JSONToken\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "generic.json.JSONType",
          "type_short": "JSONType",
          "comment": ""
        },
        {
          "name": "start",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.json.JSONToken",
        "type_short": "JSONToken",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parsePrimitive",
      "comment": "Fills next available token with JSON primitive.",
      "javadoc": "Fills next available token with JSON primitive.",
      "static": false,
      "params": [
        {
          "name": "js",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": ""
        },
        {
          "name": "tokens",
          "type_long": "java.util.List\u003cgeneric.json.JSONToken\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.json.JSONError",
        "type_short": "JSONError",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseString",
      "comment": "Filsl next token with JSON string.",
      "javadoc": "Filsl next token with JSON string.",
      "static": false,
      "params": [
        {
          "name": "js",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": ""
        },
        {
          "name": "tokens",
          "type_long": "java.util.List\u003cgeneric.json.JSONToken\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.json.JSONError",
        "type_short": "JSONError",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parse",
      "comment": "Parse JSON string and fill tokens.",
      "javadoc": "Parse JSON string and fill tokens.",
      "static": false,
      "params": [
        {
          "name": "js",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": ""
        },
        {
          "name": "tokens",
          "type_long": "java.util.List\u003cgeneric.json.JSONToken\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.json.JSONError",
        "type_short": "JSONError",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "expands",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "convert",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": ""
        },
        {
          "name": "t",
          "type_long": "java.util.List\u003cgeneric.json.JSONToken\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isxdigit",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "b",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
