{
  "name": "MessageDigest",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getAlgorithm",
      "comment": "Returns a string that identifies the algorithm, independent of\n implementation details.",
      "javadoc": "Returns a string that identifies the algorithm, independent of\n implementation details.\n@return the name of the algorithm",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the algorithm"
      },
      "throws": []
    },
    {
      "name": "getDigestLength",
      "comment": "Returns the length of the digest in bytes.",
      "javadoc": "Returns the length of the digest in bytes.\n@return the digest length in bytes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the digest length in bytes"
      },
      "throws": []
    },
    {
      "name": "update",
      "comment": "Updates the digest using the specified byte.",
      "javadoc": "Updates the digest using the specified byte.\n@param input the byte with which to update the digest",
      "static": false,
      "params": [
        {
          "name": "input",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "the byte with which to update the digest"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "update",
      "comment": "Updates the digest using the specified short.",
      "javadoc": "Updates the digest using the specified short.\n@param input the short with which to update the digest (big endian)",
      "static": false,
      "params": [
        {
          "name": "input",
          "type_long": "short",
          "type_short": "short",
          "comment": "the short with which to update the digest (big endian)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "update",
      "comment": "Updates the digest using the specified int.",
      "javadoc": "Updates the digest using the specified int.\n@param input the int with which to update the digest (big endian)",
      "static": false,
      "params": [
        {
          "name": "input",
          "type_long": "int",
          "type_short": "int",
          "comment": "the int with which to update the digest (big endian)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "update",
      "comment": "Updates the digest using the specified long.",
      "javadoc": "Updates the digest using the specified long.\n@param input the long with which to update the digest (big endian)",
      "static": false,
      "params": [
        {
          "name": "input",
          "type_long": "long",
          "type_short": "long",
          "comment": "the long with which to update the digest (big endian)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "update",
      "comment": "Updates the digest using the specified array of bytes. Do not use a monitor",
      "javadoc": "Updates the digest using the specified array of bytes. Do not use a monitor\n@param input the array of bytes",
      "static": false,
      "params": [
        {
          "name": "input",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the array of bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "update",
      "comment": "Updates the digest using the specified array of bytes, starting at the\n specified offset (and for the specified length). Do not use a monitor.",
      "javadoc": "Updates the digest using the specified array of bytes, starting at the\n specified offset (and for the specified length). Do not use a monitor.\n@param input the array of bytes\n@param offset the offset to start from in the array of bytes\n@param len the number of bytes to use, starting at offset",
      "static": false,
      "params": [
        {
          "name": "input",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the array of bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset to start from in the array of bytes"
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to use, starting at offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "update",
      "comment": "Updates the digest using the specified array of bytes.",
      "javadoc": "Updates the digest using the specified array of bytes.\n@param input the array of bytes\n@param monitor the monitor to check during loops\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "input",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the array of bytes"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor to check during loops"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "update",
      "comment": "Updates the digest using the specified array of bytes, starting at the\n specified offset (and for the specified length).",
      "javadoc": "Updates the digest using the specified array of bytes, starting at the\n specified offset (and for the specified length).\n@param input the array of bytes\n@param offset the offset to start from in the array of bytes\n@param len the number of bytes to use, starting at offset\n@param monitor the monitor to check during loops\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "input",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the array of bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset to start from in the array of bytes"
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to use, starting at offset"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor to check during loops"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "digest",
      "comment": "Completes the hash computation by performing final operations such as\n padding.  The digest is reset after this call is made.",
      "javadoc": "Completes the hash computation by performing final operations such as\n padding.  The digest is reset after this call is made.\n@return the array of bytes for the resulting hash value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the array of bytes for the resulting hash value"
      },
      "throws": []
    },
    {
      "name": "digestLong",
      "comment": "Completes the hash computation by performing final operations such as\n padding, and returns (up to) the first 8 bytes as a big-endian long\n value.  The digest is reset after this call is made.",
      "javadoc": "Completes the hash computation by performing final operations such as\n padding, and returns (up to) the first 8 bytes as a big-endian long\n value.  The digest is reset after this call is made.\n@return the digest value as a long value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the digest value as a long value"
      },
      "throws": []
    },
    {
      "name": "digest",
      "comment": "Completes the hash computation by performing final operations such as\n padding.  The digest is reset after this call is made.",
      "javadoc": "Completes the hash computation by performing final operations such as\n padding.  The digest is reset after this call is made.\n@param buf output buffer for the computed digest\n@param offset offset into the output buffer to begin storing the digest\n@param len number of bytes within buf allocated for the digest\n@return the number of bytes placed into buf",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "output buffer for the computed digest"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into the output buffer to begin storing the digest"
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes within buf allocated for the digest"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of bytes placed into buf"
      },
      "throws": []
    },
    {
      "name": "reset",
      "comment": "Resets the digest for further use.",
      "javadoc": "Resets the digest for further use.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
