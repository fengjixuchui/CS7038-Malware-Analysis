{
  "name": "LSHVectorFactory",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "weightFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.lsh.vector.WeightFactory",
      "type_short": "WeightFactory",
      "constant_value": null
    },
    {
      "name": "idfLookup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.lsh.vector.IDFLookup",
      "type_short": "IDFLookup",
      "constant_value": null
    },
    {
      "name": "settings",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildZeroVector",
      "comment": "Generate vector with all coefficients zero.",
      "javadoc": "Generate vector with all coefficients zero.\n@return the zero vector",
      "static": false,
      "params": [],
      "return": {
        "type_long": "generic.lsh.vector.LSHVector",
        "type_short": "LSHVector",
        "comment": "the zero vector"
      },
      "throws": []
    },
    {
      "name": "buildVector",
      "comment": "Generate an LSHVector from a feature set, individual features are integer hashes.\n The integers MUST already be sorted.\n The same integer can occur more than once in the array (term frequency (TF)  1).\n The factory decides internally how to create weights based on term frequency and any\n knowledge of Inverse Document Frequency (IDF)",
      "javadoc": "Generate an LSHVector from a feature set, individual features are integer hashes.\n The integers MUST already be sorted.\n The same integer can occur more than once in the array (term frequency (TF) \u0026gt; 1).\n The factory decides internally how to create weights based on term frequency and any\n knowledge of Inverse Document Frequency (IDF)\n@param feature is the sorted array of integer features\n@return the newly minted LSHVector",
      "static": false,
      "params": [
        {
          "name": "feature",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "is the sorted array of integer features"
        }
      ],
      "return": {
        "type_long": "generic.lsh.vector.LSHVector",
        "type_short": "LSHVector",
        "comment": "the newly minted LSHVector"
      },
      "throws": []
    },
    {
      "name": "restoreVectorFromXml",
      "comment": "Generate an LSHVector based on XML tag seen by pull parser.\n Factory generates weights based on term frequency info in the XML tag and its internal IDF knowledge",
      "javadoc": "Generate an LSHVector based on XML tag seen by pull parser.\n Factory generates weights based on term frequency info in the XML tag and its internal IDF knowledge\n@param parser is the XML parser\n@return the newly minted LSHVector",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML parser"
        }
      ],
      "return": {
        "type_long": "generic.lsh.vector.LSHVector",
        "type_short": "LSHVector",
        "comment": "the newly minted LSHVector"
      },
      "throws": []
    },
    {
      "name": "restoreVectorFromSql",
      "comment": "Generate an LSHVector based on string returned from SQL query\n Factory generates weights based on term frequency info in the string and its internal IDF knowledge",
      "javadoc": "Generate an LSHVector based on string returned from SQL query\n Factory generates weights based on term frequency info in the string and its internal IDF knowledge\n@param sql is the column data string returned by an SQL query\n@return the newly minted LSHVector\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "sql",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the column data string returned by an SQL query"
        }
      ],
      "return": {
        "type_long": "generic.lsh.vector.LSHVector",
        "type_short": "LSHVector",
        "comment": "the newly minted LSHVector"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "set",
      "comment": "Load the factory with weights and the feature map",
      "javadoc": "Load the factory with weights and the feature map\n@param wFactory is the weight table of IDF and TF weights\n@param iLookup is the map from features int the weight table\n@param settings is an integer id for this particular weighting scheme",
      "static": false,
      "params": [
        {
          "name": "wFactory",
          "type_long": "generic.lsh.vector.WeightFactory",
          "type_short": "WeightFactory",
          "comment": "is the weight table of IDF and TF weights"
        },
        {
          "name": "iLookup",
          "type_long": "generic.lsh.vector.IDFLookup",
          "type_short": "IDFLookup",
          "comment": "is the map from features int the weight table"
        },
        {
          "name": "settings",
          "type_long": "int",
          "type_short": "int",
          "comment": "is an integer id for this particular weighting scheme"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isLoaded",
      "comment": "",
      "javadoc": "@return true if this factory has weights and lookup loaded",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this factory has weights and lookup loaded"
      },
      "throws": []
    },
    {
      "name": "getSignificanceScale",
      "comment": "",
      "javadoc": "@return the weighttable\u0027s significance scale for this factory",
      "static": false,
      "params": [],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": "the weighttable\u0027s significance scale for this factory"
      },
      "throws": []
    },
    {
      "name": "getSignificanceAddend",
      "comment": "",
      "javadoc": "@return the weighttable\u0027s significance addend for this factory",
      "static": false,
      "params": [],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": "the weighttable\u0027s significance addend for this factory"
      },
      "throws": []
    },
    {
      "name": "getSettings",
      "comment": "",
      "javadoc": "@return settings ID used to generate factory\u0027s current weights",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "settings ID used to generate factory\u0027s current weights"
      },
      "throws": []
    },
    {
      "name": "getSelfSignificance",
      "comment": "Calculate a vector\u0027s significance as compared to itself, normalized for this factory\u0027s specific weight settings",
      "javadoc": "Calculate a vector\u0027s significance as compared to itself, normalized for this factory\u0027s specific weight settings\n@param vector is the LSHVector\n@return the vector\u0027s significance score",
      "static": false,
      "params": [
        {
          "name": "vector",
          "type_long": "generic.lsh.vector.LSHVector",
          "type_short": "LSHVector",
          "comment": "is the LSHVector"
        }
      ],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": "the vector\u0027s significance score"
      },
      "throws": []
    },
    {
      "name": "calculateSignificance",
      "comment": "Given comparison data generated by the LSHVector.compare() method,\n calculate the significance of any similarity between the two vectors,\n normalized for this factory\u0027s specific weight settings",
      "javadoc": "Given comparison data generated by the LSHVector.compare() method,\n calculate the significance of any similarity between the two vectors,\n normalized for this factory\u0027s specific weight settings\n@param data is the comparison object produced when comparing two LSHVectors\n@return the significance score",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "generic.lsh.vector.VectorCompare",
          "type_short": "VectorCompare",
          "comment": "is the comparison object produced when comparing two LSHVectors"
        }
      ],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": "the significance score"
      },
      "throws": []
    },
    {
      "name": "readWeights",
      "comment": "Read both the weights and the lookup hashes from an XML stream",
      "javadoc": "Read both the weights and the lookup hashes from an XML stream\n@param parser is the XML parser\n@throws SAXException",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML parser"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "org.xml.sax.SAXException",
          "type_short": "SAXException",
          "comment": ""
        }
      ]
    }
  ]
}
