{
  "name": "ArrayUtilities",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "reverse",
      "comment": "Returns a new copy of the specified byte  with the elements in reversed order.",
      "javadoc": "Returns a new copy of the specified byte {@code array} with the elements in reversed order.\n@param array byte array to reverse\n@return new array instance with elements in reverse order",
      "static": true,
      "params": [
        {
          "name": "array",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array to reverse"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "new array instance with elements in reverse order"
      },
      "throws": []
    },
    {
      "name": "isArrayPrimativeEqual",
      "comment": "Compares two primitive arrays for equality",
      "javadoc": "Compares two primitive arrays for equality\n@param o1 the first array\n@param o2 the second array\n@return true if each element of the array is equal\n@throws IllegalArgumentException if either argument is not an array",
      "static": true,
      "params": [
        {
          "name": "o1",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the first array"
        },
        {
          "name": "o2",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the second array"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if each element of the array is equal"
      },
      "throws": []
    },
    {
      "name": "arrayRangesEquals",
      "comment": "Returns true if a portion of byte array b1 equals an equally sized portion of byte array\n b2.\n \n If the sizes of b1 or b2 do not allow for a full comparison of  bytes, this\n function will return false.\n ",
      "javadoc": "Returns true if a portion of byte array b1 equals an equally sized portion of byte array\n b2.\n \u003cp\u003e\n If the sizes of b1 or b2 do not allow for a full comparison of {@code len} bytes, this\n function will return false.\n \u003cp\u003e\n@param b1 first byte array\n@param start_b1 offset to start comparison in b1\n@param b2 second byte array\n@param start_b2 offset to start comparison in b2\n@param len number of bytes to compare\n@return true or false if the portion is equal",
      "static": true,
      "params": [
        {
          "name": "b1",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "first byte array"
        },
        {
          "name": "start_b1",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset to start comparison in b1"
        },
        {
          "name": "b2",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "second byte array"
        },
        {
          "name": "start_b2",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset to start comparison in b2"
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes to compare"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true or false if the portion is equal"
      },
      "throws": []
    },
    {
      "name": "copyAndAppend",
      "comment": "Returns a copy of the given array with the provided element appended.  The length of\n the returned array will be one element greater than the given array.",
      "javadoc": "Returns a copy of the given array with the provided element appended.  The length of\n the returned array will be one element greater than the given array.\n@param array The array to copy.\n@param element The element to append to the copy.\n@return A copy of the given array with the provided element appended.",
      "static": true,
      "params": [
        {
          "name": "array",
          "type_long": "T[]",
          "type_short": "T[]",
          "comment": "The array to copy."
        },
        {
          "name": "element",
          "type_long": "T",
          "type_short": "T",
          "comment": "The element to append to the copy."
        }
      ],
      "return": {
        "type_long": "T[]",
        "type_short": "T[]",
        "comment": "A copy of the given array with the provided element appended."
      },
      "throws": []
    },
    {
      "name": "compare",
      "comment": "Compare two byte arrays by their corresponding entries\n \n If the two arrays have differing lengths, the shorter precedes the longer. Otherwise, they\n are compared as in C\u0027s , except that Java s are signed.",
      "javadoc": "Compare two byte arrays by their corresponding entries\n \n If the two arrays have differing lengths, the shorter precedes the longer. Otherwise, they\n are compared as in C\u0027s {@code memcmp}, except that Java {@code byte}s are signed.\n@param a the first array\n@param b the second array\n@return a comparison result as in {@link Comparable#compareTo(Object)}",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the first array"
        },
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the second array"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "a comparison result as in Comparable#compareTo(Object)"
      },
      "throws": []
    }
  ]
}
