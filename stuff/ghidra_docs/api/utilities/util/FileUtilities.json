{
  "name": "FileUtilities",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "MAX_FILE_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "268435456"
    },
    {
      "name": "IO_BUFFER_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32768"
    },
    {
      "name": "SIZE_FORMAT_THREAD_LOCAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.ThreadLocal\u003cjava.text.NumberFormat\u003e",
      "type_short": "ThreadLocal",
      "constant_value": null
    },
    {
      "name": "ACCEPT_ALL_FILE_FILTER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.io.FileFilter",
      "type_short": "FileFilter",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "directoryExistsAndIsNotEmpty",
      "comment": "Returns true if the give file is not null, exists, is a directory and contains files.",
      "javadoc": "Returns true if the give file is not null, exists, is a directory and contains files.\n@param directory the directory to test\n@return true if the give file is not null, exists, is a directory and contains files.\n@see #directoryIsEmpty(File)",
      "static": true,
      "params": [
        {
          "name": "directory",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the directory to test"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the give file is not null, exists, is a directory and contains files."
      },
      "throws": []
    },
    {
      "name": "directoryIsEmpty",
      "comment": "Returns true if the given file is not null, exits, is a directory and has no files.",
      "javadoc": "Returns true if the given file is not null, exits, is a directory and has no files.\n@param directory the directory to test for emptiness\n@return true if the given file is a directory and has not files.",
      "static": true,
      "params": [
        {
          "name": "directory",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the directory to test for emptiness"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given file is a directory and has not files."
      },
      "throws": []
    },
    {
      "name": "getBytesFromFile",
      "comment": "Return an array of bytes read from the given file.",
      "javadoc": "Return an array of bytes read from the given file.\n@param sourceFile the source file\n@return the bytes\n@throws IOException if the file could not be accessed",
      "static": true,
      "params": [
        {
          "name": "sourceFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the source file"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the bytes"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the file could not be accessed"
        }
      ]
    },
    {
      "name": "getBytesFromFile",
      "comment": "Return an array of bytes read from the sourceFile, starting at the\n given offset",
      "javadoc": "Return an array of bytes read from the sourceFile, starting at the\n given offset\n@param sourceFile file to read from\n@param offset offset into the file to begin reading\n@param length size of returned array of bytes\n@return array of bytes, size length\n@throws IOException thrown if there was a problem accessing the file or if there weren\u0027t\n at least {@code length} bytes read.",
      "static": true,
      "params": [
        {
          "name": "sourceFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "file to read from"
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "offset into the file to begin reading"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "size of returned array of bytes"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "array of bytes, size length"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if there was a problem accessing the file or if there weren\u0027t\n at least  bytes read."
        }
      ]
    },
    {
      "name": "getBytesFromFile",
      "comment": "Return an array of bytes read from the given file.",
      "javadoc": "Return an array of bytes read from the given file.\n@param sourceFile the source file\n@return the bytes\n@throws IOException if the file could not be accessed",
      "static": true,
      "params": [
        {
          "name": "sourceFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the source file"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the bytes"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the file could not be accessed"
        }
      ]
    },
    {
      "name": "writeBytes",
      "comment": "Writes an array of bytes to a file.",
      "javadoc": "Writes an array of bytes to a file.\n@param file the file to write to\n@param bytes the array of bytes to write\n@throws FileNotFoundException thrown if the file path is invalid\n@throws IOException thrown if the file can\u0027t be written to.",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to write to"
        },
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the array of bytes to write"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "thrown if the file path is invalid"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if the file can\u0027t be written to."
        }
      ]
    },
    {
      "name": "getBytesFromFile",
      "comment": "Return an array of bytes read from the sourceFile, starting at the\n given offset",
      "javadoc": "Return an array of bytes read from the sourceFile, starting at the\n given offset\n@param sourceFile file to read from\n@param offset offset into the file to begin reading\n@param length size of returned array of bytes\n@return array of bytes, size length\n@throws IOException thrown if there was a problem accessing the file or if there weren\u0027t\n at least {@code length} bytes read.",
      "static": true,
      "params": [
        {
          "name": "sourceFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "file to read from"
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "offset into the file to begin reading"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "size of returned array of bytes"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "array of bytes, size length"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if there was a problem accessing the file or if there weren\u0027t\n at least  bytes read."
        }
      ]
    },
    {
      "name": "getBytesFromStream",
      "comment": "Reads the bytes from the stream into a byte array",
      "javadoc": "Reads the bytes from the stream into a byte array\n@param is the input stream to read\n@return a byte[] containing the bytes from the stream.\n@throws IOException if an I/O error occurs reading",
      "static": true,
      "params": [
        {
          "name": "is",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "the input stream to read"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "a byte[] containing the bytes from the stream."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs reading"
        }
      ]
    },
    {
      "name": "getBytesFromStream",
      "comment": "Reads the number of bytes indicated by the expectedLength from the input stream and returns\n them in a byte array.",
      "javadoc": "Reads the number of bytes indicated by the expectedLength from the input stream and returns\n them in a byte array.\n@param inputStream the input stream\n@param expectedLength the number of bytes to be read\n@return an array of bytes, that is the expectedLength, that was read from the stream.\n@throws IOException if the \"expectedLength\" number of bytes can\u0027t be read from the input stream.",
      "static": true,
      "params": [
        {
          "name": "inputStream",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "the input stream"
        },
        {
          "name": "expectedLength",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to be read"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "an array of bytes, that is the expectedLength, that was read from the stream."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the \"expectedLength\" number of bytes can\u0027t be read from the input stream."
        }
      ]
    },
    {
      "name": "copyFile",
      "comment": "Copy the fromFile contents to the toFile.  The toFile will be overwritten or created.",
      "javadoc": "Copy the fromFile contents to the toFile.  The toFile will be overwritten or created.\n@param fromFile source file\n@param toFile destination file\n@param append if true and the file exists, the fromFile contents will be\n appended to the toFile.\n@param monitor if specified the progress will be reset and will advance to\n 100% when the copy is complete.\n@return number of bytes copied from source file to destination file\n@throws IOException thrown if there was a problem accessing the files",
      "static": true,
      "params": [
        {
          "name": "fromFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "source file"
        },
        {
          "name": "toFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "destination file"
        },
        {
          "name": "append",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true and the file exists, the fromFile contents will be\n appended to the toFile."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "if specified the progress will be reset and will advance to\n 100% when the copy is complete."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "number of bytes copied from source file to destination file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if there was a problem accessing the files"
        }
      ]
    },
    {
      "name": "copyFile",
      "comment": "Copy the fromFile contents to the toFile.",
      "javadoc": "Copy the fromFile contents to the toFile.\n@param fromFile source file\n@param toFile destination file\n@param append if true and the file exists, the fromFile contents will be\n \t\t\t\t appended to the toFile.\n@param monitor if specified the progress will be reset and will advance to\n \t\t\t\t  100% when the copy is complete.\n@throws IOException thrown if there was a problem accessing the files",
      "static": true,
      "params": [
        {
          "name": "fromFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "source file"
        },
        {
          "name": "toFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "destination file"
        },
        {
          "name": "append",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true and the file exists, the fromFile contents will be\n \t\t\t\t appended to the toFile."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "if specified the progress will be reset and will advance to\n \t\t\t\t  100% when the copy is complete."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if there was a problem accessing the files"
        }
      ]
    },
    {
      "name": "copyFile",
      "comment": "Copy the fromFile contents to the toFile.  The toFile will be overwritten or created.",
      "javadoc": "Copy the fromFile contents to the toFile.  The toFile will be overwritten or created.\n@param fromFile source file\n@param toFile destination file\n@param monitor if specified the progress will be reset and will advance to\n \t\t\t\t  100% when the copy is complete.\n@throws IOException thrown if there was a problem accessing the files",
      "static": true,
      "params": [
        {
          "name": "fromFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "source file"
        },
        {
          "name": "toFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "destination file"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "if specified the progress will be reset and will advance to\n \t\t\t\t  100% when the copy is complete."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if there was a problem accessing the files"
        }
      ]
    },
    {
      "name": "createDir",
      "comment": "Ensures the specified leaf directory exists.\n \n Does not create any missing parent directories.  See #mkdirs(File) instead.\n \n Takes into account race conditions with external threads/processes\n creating the same directory at the same time.\n ",
      "javadoc": "Ensures the specified leaf directory exists.\n \u003cp\u003e\n Does not create any missing parent directories.  See {@link #mkdirs(File)} instead.\n \u003cp\u003e\n Takes into account race conditions with external threads/processes\n creating the same directory at the same time.\n \u003cp\u003e\n@param dir The directory to create.\n@return True If the directory exists when this method completes; otherwise, false.",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "The directory to create."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True If the directory exists when this method completes; otherwise, false."
      },
      "throws": []
    },
    {
      "name": "mkdirs",
      "comment": "Make all directories in the full directory path specified. This is a\n replacement for the File.mkdirs() which fails due to a problem with the\n File.exists() method with remote file systems on Windows. After renaming\n a directory, the exists() method frequently reports the old directory as\n still existing. In the case of File.mkdirs() the recreation of the old\n directory would fail. The File.mkdir() method does not perform this\n check.",
      "javadoc": "Make all directories in the full directory path specified. This is a\n replacement for the File.mkdirs() which fails due to a problem with the\n File.exists() method with remote file systems on Windows. After renaming\n a directory, the exists() method frequently reports the old directory as\n still existing. In the case of File.mkdirs() the recreation of the old\n directory would fail. The File.mkdir() method does not perform this\n check.\n@param dir directory path to be created\n@return True If the directory exists when this method completes; otherwise, false.",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "directory path to be created"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True If the directory exists when this method completes; otherwise, false."
      },
      "throws": []
    },
    {
      "name": "checkedMkdir",
      "comment": "Ensures the specified leaf directory exists.\n \n Throws an IOException if there is any problem while creating the directory.\n \n Does not create any missing parent directories.  See #checkedMkdirs(File) instead.\n \n Takes into account race conditions with external threads/processes\n creating the same directory at the same time.\n ",
      "javadoc": "Ensures the specified leaf directory exists.\n \u003cp\u003e\n Throws an {@link IOException} if there is any problem while creating the directory.\n \u003cp\u003e\n Does not create any missing parent directories.  See {@link #checkedMkdirs(File)} instead.\n \u003cp\u003e\n Takes into account race conditions with external threads/processes\n creating the same directory at the same time.\n \u003cp\u003e\n@param dir The directory to create.\n@return a reference to the same {@link File} instance that was passed in.\n@throws IOException if there was a failure when creating the directory (ie. the\n parent directory did not exist or other issue).",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "The directory to create."
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "a reference to the same File instance that was passed in."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a failure when creating the directory (ie. the\n parent directory did not exist or other issue)."
        }
      ]
    },
    {
      "name": "checkedMkdirs",
      "comment": "Ensures the specified full directory path exists, creating any missing\n directories as needed.\n \n Throws an IOException if there is any problem while creating the directory.\n \n Uses #createDir(File) to create new directories (which handles\n race conditions if other processes are also trying to create the same directory).\n ",
      "javadoc": "Ensures the specified full directory path exists, creating any missing\n directories as needed.\n \u003cp\u003e\n Throws an {@link IOException} if there is any problem while creating the directory.\n \u003cp\u003e\n Uses {@link #createDir(File)} to create new directories (which handles\n race conditions if other processes are also trying to create the same directory).\n \u003cp\u003e\n@param dir directory path to be created\n@return a reference to the same {@link File} instance that was passed in.\n@throws IOException if there was a failure when creating a directory.",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "directory path to be created"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "a reference to the same File instance that was passed in."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a failure when creating a directory."
        }
      ]
    },
    {
      "name": "deleteDir",
      "comment": "Delete a file or directory and all of its contents",
      "javadoc": "Delete a file or directory and all of its contents\n@param dir the directory to delete\n@return true if delete was successful. If false is returned, a partial\n         delete may have occurred.",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "java.nio.file.Path",
          "type_short": "Path",
          "comment": "the directory to delete"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if delete was successful. If false is returned, a partial\n         delete may have occurred."
      },
      "throws": []
    },
    {
      "name": "deleteDir",
      "comment": "Delete a file or directory and all of its contents",
      "javadoc": "Delete a file or directory and all of its contents\n@param dir the dir to delete\n@return true if delete was successful. If false is returned, a partial\n         delete may have occurred.",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the dir to delete"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if delete was successful. If false is returned, a partial\n         delete may have occurred."
      },
      "throws": []
    },
    {
      "name": "deleteDir",
      "comment": "Delete a directory and all of its contents",
      "javadoc": "Delete a directory and all of its contents\n@param dir the dir to delete\n@param monitor the task monitor\n@return true if delete was successful. If false is returned, a partial\n         delete may have occurred.\n@throws CancelledException if the operation is cancelled",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the dir to delete"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if delete was successful. If false is returned, a partial\n         delete may have occurred."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the operation is cancelled"
        }
      ]
    },
    {
      "name": "doDeleteDir",
      "comment": "A version of #deleteDir(File,TaskMonitor) that does not alter\n the progress value of the given monitor, only the status text.  This allows this recursive\n method to send status updates while the caller of this method controls the progress.",
      "javadoc": "A version of {@link #deleteDir(File,TaskMonitor)} that does not alter\n the progress value of the given monitor, only the status text.  This allows this recursive\n method to send status updates while the caller of this method controls the progress.",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "copyDir",
      "comment": "This is the same as calling #copyDir(File, File, FileFilter, TaskMonitor) with\n a FileFilter that accepts all files.",
      "javadoc": "This is the same as calling {@link #copyDir(File, File, FileFilter, TaskMonitor)} with\n a {@link FileFilter} that accepts all files.\n@param originalDir the source dir\n@param copyDir the destination dir\n@param monitor the task monitor\n@return the number of filed copied\n@throws IOException if there is an issue copying the files\n@throws CancelledException if the operation is cancelled",
      "static": true,
      "params": [
        {
          "name": "originalDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the source dir"
        },
        {
          "name": "copyDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the destination dir"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of filed copied"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an issue copying the files"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the operation is cancelled"
        }
      ]
    },
    {
      "name": "copyDir",
      "comment": "Copies the contents of originalDir to copyDir.  If the originalDir\n does not exist, then this method will do nothing.  If copyDir does not exist, then\n it will be created as necessary.",
      "javadoc": "Copies the contents of \u003ccode\u003eoriginalDir\u003c/code\u003e to \u003ccode\u003ecopyDir\u003c/code\u003e.  If the \u003ccode\u003eoriginalDir\u003c/code\u003e\n does not exist, then this method will do nothing.  If \u003ccode\u003ecopyDir\u003c/code\u003e does not exist, then\n it will be created as necessary.\n@param originalDir The directory from which to extract contents\n@param copyDir The directory in which the extracted contents will be placed\n@param filter a filter to apply against the directory\u0027s contents\n@param monitor the task monitor\n@return the number of filed copied\n@throws IOException if there was a problem accessing the files\n@throws CancelledException if the copy is cancelled",
      "static": true,
      "params": [
        {
          "name": "originalDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "The directory from which to extract contents"
        },
        {
          "name": "copyDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "The directory in which the extracted contents will be placed"
        },
        {
          "name": "filter",
          "type_long": "java.io.FileFilter",
          "type_short": "FileFilter",
          "comment": "a filter to apply against the directory\u0027s contents"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of filed copied"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the files"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the copy is cancelled"
        }
      ]
    },
    {
      "name": "doCopyDir",
      "comment": "A version of #copyDir(File, File, FileFilter, TaskMonitor) that does not alter\n the progress value of the given monitor, only the status text.  This allows this recursive\n method to send status updates while the caller of this method controls the progress.",
      "javadoc": "A version of {@link #copyDir(File, File, FileFilter, TaskMonitor)} that does not alter\n the progress value of the given monitor, only the status text.  This allows this recursive\n method to send status updates while the caller of this method controls the progress.",
      "static": true,
      "params": [
        {
          "name": "originalDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "copyDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "filter",
          "type_long": "java.io.FileFilter",
          "type_short": "FileFilter",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "printDebug",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copyStreamToFile",
      "comment": "Copy the in stream to the toFile.  The toFile will be overwritten or created.",
      "javadoc": "Copy the in stream to the toFile.  The toFile will be overwritten or created.\n@param in source input stream\n@param toFile destination file\n@param append if true and the file exists, the fromFile contents will be\n appended to the toFile.\n@param monitor if specified the progress will be reset and will advance to\n 100% when the copy is complete.\n@return number of bytes copied from source file to destination file\n@throws IOException thrown if there was a problem accessing the files",
      "static": true,
      "params": [
        {
          "name": "in",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "source input stream"
        },
        {
          "name": "toFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "destination file"
        },
        {
          "name": "append",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true and the file exists, the fromFile contents will be\n appended to the toFile."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "if specified the progress will be reset and will advance to\n 100% when the copy is complete."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "number of bytes copied from source file to destination file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if there was a problem accessing the files"
        }
      ]
    },
    {
      "name": "copyFileToStream",
      "comment": "Copy the contents of the specified fromFile to the out stream.",
      "javadoc": "Copy the contents of the specified fromFile to the out stream.\n@param fromFile file data source\n@param out destination stream\n@param monitor if specified the progress will be reset and will advance to\n 100% when the copy is complete.\n@throws IOException thrown if there was a problem accessing the files",
      "static": true,
      "params": [
        {
          "name": "fromFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "file data source"
        },
        {
          "name": "out",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": "destination stream"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "if specified the progress will be reset and will advance to\n 100% when the copy is complete."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if there was a problem accessing the files"
        }
      ]
    },
    {
      "name": "copyStreamToStream",
      "comment": "Copy the in stream to the out stream.  The output stream will\n not be closed when the copy operation is finished.",
      "javadoc": "Copy the \u003ccode\u003ein\u003c/code\u003e stream to the \u003ccode\u003eout\u003c/code\u003e stream.  The output stream will\n \u003cb\u003enot\u003c/b\u003e be closed when the copy operation is finished.\n@param in source input stream\n@param out the destination output stream\n@param monitor if specified the progress will be reset and will advance to\n \t\t\t\t 100% when the copy is complete.\n@return the number of bytes copied from the input stream to the output stream.\n@throws IOException thrown if there was a problem accessing the files",
      "static": true,
      "params": [
        {
          "name": "in",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "source input stream"
        },
        {
          "name": "out",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": "the destination output stream"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "if specified the progress will be reset and will advance to\n \t\t\t\t 100% when the copy is complete."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the number of bytes copied from the input stream to the output stream."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if there was a problem accessing the files"
        }
      ]
    },
    {
      "name": "getLines",
      "comment": "Returns all of the lines in the file without any newline characters",
      "javadoc": "Returns all of the lines in the file without any newline characters\n@param file The file to read in\n@return a list of file lines\n@throws IOException if an error occurs reading the file",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "The file to read in"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "a list of file lines"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an error occurs reading the file"
        }
      ]
    },
    {
      "name": "getLines",
      "comment": "Returns all of the lines in the file without any newline characters.\n \n The file is treated as UTF-8 encoded.\n ",
      "javadoc": "Returns all of the lines in the file without any newline characters.\n \u003cp\u003e\n The file is treated as UTF-8 encoded.\n \u003cp\u003e\n@param file The text file to read in\n@return a list of file lines\n@throws IOException if an error occurs reading the file",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "The text file to read in"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "a list of file lines"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an error occurs reading the file"
        }
      ]
    },
    {
      "name": "getLinesQuietly",
      "comment": "Returns all of the lines in the file without any newline characters.  This method\n is the same as #getLines(ResourceFile), except that it handles the exception\n that is thrown by that method.",
      "javadoc": "Returns all of the lines in the file without any newline characters.  This method\n is the same as {@link #getLines(ResourceFile)}, except that it handles the exception\n that is thrown by that method.\n@param file The file to read in\n@return a list of file lines",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "The file to read in"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "a list of file lines"
      },
      "throws": []
    },
    {
      "name": "getLines",
      "comment": "Returns all of the lines in the BufferedReader without any newline characters.\n \n The file is treated as UTF-8 encoded.\n ",
      "javadoc": "Returns all of the lines in the BufferedReader without any newline characters.\n \u003cp\u003e\n The file is treated as UTF-8 encoded.\n \u003cp\u003e\n@param url the input stream from which to read\n@return a list of file lines\n@throws IOException thrown if there was a problem accessing the files",
      "static": true,
      "params": [
        {
          "name": "url",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": "the input stream from which to read"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "a list of file lines"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if there was a problem accessing the files"
        }
      ]
    },
    {
      "name": "getLines",
      "comment": "Returns all of the lines in the given InputStream without any newline characters.\n ",
      "javadoc": "Returns all of the lines in the given {@link InputStream} without any newline characters.\n \u003cp\u003e\n@param is the input stream from which to read\n@return a {@link List} of strings representing the text lines of the file\n@throws IOException if there are any issues reading the file",
      "static": true,
      "params": [
        {
          "name": "is",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "the input stream from which to read"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "a List of strings representing the text lines of the file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there are any issues reading the file"
        }
      ]
    },
    {
      "name": "getText",
      "comment": "Returns all of the text in the given InputStream.\n \n EOL characters are normalized to simple \u0027\\n\u0027s.\n ",
      "javadoc": "Returns all of the text in the given {@link InputStream}.\n \u003cp\u003e\n EOL characters are normalized to simple \u0027\\n\u0027s.\n \u003cp\u003e\n@param is the input stream from which to read\n@return the content as a String\n@throws IOException if there are any issues reading the file",
      "static": true,
      "params": [
        {
          "name": "is",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "the input stream from which to read"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the content as a String"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there are any issues reading the file"
        }
      ]
    },
    {
      "name": "getText",
      "comment": "Returns all of the text in the given File.\n \n See #getText(InputStream)\n ",
      "javadoc": "Returns all of the text in the given {@link File}.\n \u003cp\u003e\n See {@link #getText(InputStream)}\n \u003cp\u003e\n@param f the file to read\n@return the content as a String\n@throws IOException if there are any issues reading the file or file is too large.",
      "static": true,
      "params": [
        {
          "name": "f",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to read"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the content as a String"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there are any issues reading the file or file is too large."
        }
      ]
    },
    {
      "name": "getLines",
      "comment": "Returns all of the lines in the BufferedReader without any newline characters.",
      "javadoc": "Returns all of the lines in the {@link BufferedReader} without any newline characters.\n@param in BufferedReader to read lines from. The caller is responsible for closing the reader\n@return a {@link List} of strings representing the text lines of the file\n@throws IOException if there are any issues reading the file",
      "static": true,
      "params": [
        {
          "name": "in",
          "type_long": "java.io.BufferedReader",
          "type_short": "BufferedReader",
          "comment": "BufferedReader to read lines from. The caller is responsible for closing the reader"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "a List of strings representing the text lines of the file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there are any issues reading the file"
        }
      ]
    },
    {
      "name": "writeLinesToFile",
      "comment": "Writes the given list of Strings to the file, separating each by a newline character.\n \n \n This will overwrite the contents of the given file!\n ",
      "javadoc": "Writes the given list of Strings to the file, separating each by a newline character.\n \u003cp\u003e\n \u003cb\u003e\n This will overwrite the contents of the given file!\n \u003c/b\u003e\n@param file the file to which the lines will be written\n@param lines the lines to write\n@throws IOException if there are any issues writing to the file",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to which the lines will be written"
        },
        {
          "name": "lines",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": "the lines to write"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there are any issues writing to the file"
        }
      ]
    },
    {
      "name": "writeStringToFile",
      "comment": "Writes the given String to the specified File.",
      "javadoc": "Writes the given String to the specified {@link File}.\n@param file {@link File} to write to.\n@param s String to write to the file.\n@throws IOException if there were any issues while writing to the file.",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "File to write to."
        },
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String to write to the file."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there were any issues while writing to the file."
        }
      ]
    },
    {
      "name": "isEmpty",
      "comment": "Returns true if the given file:\n \n   is null, or  \n \tFile#isFile() is true, \n  and File#length() is \u003d\u003d 0.\n  ",
      "javadoc": "Returns true if the given file:\n \u003col\u003e\n  \u003cli\u003e is \u003ccode\u003enull\u003c/code\u003e, or  \u003c/li\u003e\n \t\u003cli\u003e{@link File#isFile()} is true, \u003c/li\u003e\n  \u003cli\u003eand {@link File#length()} is \u003d\u003d 0.\u003c/li\u003e\n  \u003c/ol\u003e\n@param f the file to check\n@return true if the file is not empty",
      "static": true,
      "params": [
        {
          "name": "f",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the file is not empty"
      },
      "throws": []
    },
    {
      "name": "isPathContainedWithin",
      "comment": "Returns true if the given potentialParentFile is the parent path of\n the given otherFile, or if the two file paths point to the same path.",
      "javadoc": "Returns true if the given \u003ccode\u003epotentialParentFile\u003c/code\u003e is the parent path of\n the given \u003ccode\u003eotherFile\u003c/code\u003e, or if the two file paths point to the same path.\n@param potentialParentFile The file that may be the parent\n@param otherFile The file that may be the child\n@return boolean true if otherFile\u0027s path is within potentialParentFile\u0027s path.",
      "static": true,
      "params": [
        {
          "name": "potentialParentFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "The file that may be the parent"
        },
        {
          "name": "otherFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "The file that may be the child"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if otherFile\u0027s path is within potentialParentFile\u0027s path."
      },
      "throws": []
    },
    {
      "name": "relativizePath",
      "comment": "Returns the portion of the second file that trails the full path of the first file.  If\n the paths are the same or unrelated, then null is returned.\n\n For example, given, in this order, two files with these paths\n  /a/b and /a/b/c, this method will return \u0027c\u0027.",
      "javadoc": "Returns the portion of the second file that trails the full path of the first file.  If\n the paths are the same or unrelated, then null is returned.\n\n \u003cP\u003eFor example, given, in this order, two files with these paths\n  \u003ccode\u003e/a/b\u003c/code\u003e and \u003ccode\u003e/a/b/c\u003c/code\u003e, this method will return \u0027c\u0027.\n@param f1 the parent file\n@param f2 the child file\n@return the portion of the second file that trails the full path of the first file.\n@throws IOException if there is an error canonicalizing the path",
      "static": true,
      "params": [
        {
          "name": "f1",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the parent file"
        },
        {
          "name": "f2",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the child file"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the portion of the second file that trails the full path of the first file."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an error canonicalizing the path"
        }
      ]
    },
    {
      "name": "relativizePath",
      "comment": "Return the relative path string of one resource file in another. If\n no path can be constructed or the files are the same, then null is returned.\n \n Note: unlike #relativizePath(File, File), this function does not resolve symbolic links.\n\n For example, given, in this order, two files with these paths\n  /a/b and /a/b/c, this method will return \u0027c\u0027.",
      "javadoc": "Return the relative path string of one resource file in another. If\n no path can be constructed or the files are the same, then null is returned.\n \n Note: unlike {@link #relativizePath(File, File)}, this function does not resolve symbolic links.\n\n \u003cP\u003eFor example, given, in this order, two files with these paths\n  \u003ccode\u003e/a/b\u003c/code\u003e and \u003ccode\u003e/a/b/c\u003c/code\u003e, this method will return \u0027c\u0027.\n@param f1 the parent resource file\n@param f2 the child resource file\n@return the relative path of {@code f2} in {@code f1}",
      "static": true,
      "params": [
        {
          "name": "f1",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the parent resource file"
        },
        {
          "name": "f2",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the child resource file"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the relative path of  in "
      },
      "throws": []
    },
    {
      "name": "exists",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "uri",
          "type_long": "java.net.URI",
          "type_short": "URI",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOrCreateJarFS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "jarURI",
          "type_long": "java.net.URI",
          "type_short": "URI",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.nio.file.FileSystem",
        "type_short": "FileSystem",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "existsAndIsCaseDependent",
      "comment": "Returns true if a file exists on disk and has a case that matches the filesystem.\n This method is handy for\n comparing file paths provided externally (like from a user or a config file) to\n determine if the case of the file path matches the case of the file on the filesystem.",
      "javadoc": "Returns true if a file exists on disk and has a case that matches the filesystem.\n This method is handy for\n comparing file paths provided externally (like from a user or a config file) to\n determine if the case of the file path matches the case of the file on the filesystem.\n@param file the file to be tested\n@return a result object that reports the status of the file",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to be tested"
        }
      ],
      "return": {
        "type_long": "utilities.util.FileResolutionResult",
        "type_short": "FileResolutionResult",
        "comment": "a result object that reports the status of the file"
      },
      "throws": []
    },
    {
      "name": "existsAndIsCaseDependent",
      "comment": "Returns true if a file exists on disk and has a case that matches the filesystem.\n This method is handy for\n comparing file paths provided externally (like from a user or a config file) to\n determine if the case of the file path matches the case of the file on the filesystem.",
      "javadoc": "Returns true if a file exists on disk and has a case that matches the filesystem.\n This method is handy for\n comparing file paths provided externally (like from a user or a config file) to\n determine if the case of the file path matches the case of the file on the filesystem.\n@param file the file to be tested\n@return a result object that reports the status of the file",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the file to be tested"
        }
      ],
      "return": {
        "type_long": "utilities.util.FileResolutionResult",
        "type_short": "FileResolutionResult",
        "comment": "a result object that reports the status of the file"
      },
      "throws": []
    },
    {
      "name": "pathIsCaseDependent",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "canonicalPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "absolutePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "utilities.util.FileResolutionResult",
        "type_short": "FileResolutionResult",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveFileCaseSensitive",
      "comment": "Ensures that the specified File param points to a file on the filesystem with a\n filename that has the exact same character case as the filename portion of the\n specified File.\n \n This does not ensure that the path components are case-sensitive.\n \n If the specified File and filesystem file do not match case a NULL is returned,\n otherwise the original File parameter is returned.\n \n This method is useful on OS\u0027s that have filesystems that are case-insensitive and allow\n using File(\"A\") to open real file \"a\", and you do not wish to allow this.\n \n If the specified file being queried is a symbolic link to a file with a different name,\n no case sensitivity checks are done and the original specified File param is returned\n unchanged.\n \n (Put another way: symlink \"FILE1\" - \"../path/file2\", no case sensitive enforcing can be done,\n but symlink \"FILE1\" - \"../path/file1\" will be enforced by this method.)\n \n Querying a filepath that does not exist will result in a \u0027success\u0027 and the caller will\n receive the non-existent File instance back.\n ",
      "javadoc": "Ensures that the specified {@link File} param points to a file on the filesystem with a\n filename that has the exact same character case as the filename portion of the\n specified File.\n \u003cp\u003e\n This does not ensure that the path components are case-sensitive.\n \u003cp\u003e\n If the specified File and filesystem file do not match case a NULL is returned,\n otherwise the original File parameter is returned.\n \u003cp\u003e\n This method is useful on OS\u0027s that have filesystems that are case-insensitive and allow\n using File(\"A\") to open real file \"a\", and you do not wish to allow this.\n \u003cp\u003e\n If the specified file being queried is a symbolic link to a file with a different name,\n no case sensitivity checks are done and the original specified File param is returned\n unchanged.\n \u003cp\u003e\n (Put another way: symlink \"FILE1\" -\u0026gt; \"../path/file2\", no case sensitive enforcing can be done,\n but symlink \"FILE1\" -\u0026gt; \"../path/file1\" will be enforced by this method.)\n \u003cp\u003e\n Querying a filepath that does not exist will result in a \u0027success\u0027 and the caller will\n receive the non-existent File instance back.\n \u003cp\u003e\n@param caseSensitiveFile {@link File} to enforce case-sensitive-ness of the name portion\n@return the same {@link File} instance if it points to a file on the filesystem with\n the same case, or a NULL if the case does not match.",
      "static": true,
      "params": [
        {
          "name": "caseSensitiveFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "File to enforce case-sensitive-ness of the name portion"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the same File instance if it points to a file on the filesystem with\n the same case, or a NULL if the case does not match."
      },
      "throws": []
    },
    {
      "name": "resolveFileCaseInsensitive",
      "comment": "Ensures the specified File points to a valid existing file,\n regardless of case match of the file\u0027s name.\n \n Does not fixup any case-mismatching of the parent directories of the specified\n file.\n \n If the exact filename already exists, it is returned unchanged, otherwise\n an all-lowercase version of the filename is probed, and then an all-uppercase\n version of the filename is probed, returning it if found.\n \n Finally, the entire parent directory of the specified file is listed, and the first\n file that matches, case-insensitively to the target file, is returned.\n \n If no file is found that matches, the original File instance is returned.\n \n See also #existsAndIsCaseDependent(ResourceFile).\n ",
      "javadoc": "Ensures the specified {@link File} points to a valid existing file,\n regardless of case match of the file\u0027s name.\n \u003cp\u003e\n Does not fixup any case-mismatching of the parent directories of the specified\n file.\n \u003cp\u003e\n If the exact filename already exists, it is returned unchanged, otherwise\n an all-lowercase version of the filename is probed, and then an all-uppercase\n version of the filename is probed, returning it if found.\n \u003cp\u003e\n Finally, the entire parent directory of the specified file is listed, and the first\n file that matches, case-insensitively to the target file, is returned.\n \u003cp\u003e\n If no file is found that matches, the original File instance is returned.\n \u003cp\u003e\n See also {@link #existsAndIsCaseDependent(ResourceFile)}.\n \u003cp\u003e\n@param f File instance\n@return File instance pointing to a case-insensitive match of the File parameter",
      "static": true,
      "params": [
        {
          "name": "f",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "File instance"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "File instance pointing to a case-insensitive match of the File parameter"
      },
      "throws": []
    },
    {
      "name": "pathToParts",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrettySize",
      "comment": "Returns the size of the given file as a human readable String.\n \n See #formatLength(long)\n ",
      "javadoc": "Returns the size of the given file as a human readable String.\n \u003cp\u003e\n See {@link #formatLength(long)}\n \u003cp\u003e\n@param file the file for which to get size\n@return the pretty string",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file for which to get size"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the pretty string"
      },
      "throws": []
    },
    {
      "name": "formatLength",
      "comment": "Returns a human readable string representing the length of something in bytes.\n \n Larger sizes are represented in rounded off kilo and mega bytes.\n \n TODO: why is the method using 1000 vs. 1024 for K?",
      "javadoc": "Returns a human readable string representing the length of something in bytes.\n \u003cp\u003e\n Larger sizes are represented in rounded off kilo and mega bytes.\n \u003cp\u003e\n TODO: why is the method using 1000 vs. 1024 for K?\n@param length the length to format\n@return pretty string - \"1.1KB\", \"5.0MB\"",
      "static": true,
      "params": [
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the length to format"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "pretty string - \"1.1KB\", \"5.0MB\""
      },
      "throws": []
    },
    {
      "name": "createTempDirectory",
      "comment": "Creates a temporary directory using the given prefix",
      "javadoc": "Creates a temporary directory using the given prefix\n@param prefix the prefix\n@return the temp file",
      "static": true,
      "params": [
        {
          "name": "prefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the prefix"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the temp file"
      },
      "throws": []
    },
    {
      "name": "setOwnerOnlyPermissions",
      "comment": "Sets the given file (or directory) to readable and writable by only the owner.",
      "javadoc": "Sets the given file (or directory) to readable and writable by only the owner.\n@param f The file (or directory) to set the permissions of.",
      "static": true,
      "params": [
        {
          "name": "f",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "The file (or directory) to set the permissions of."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "openNative",
      "comment": "Uses the Desktop API to open the specified file using the user\u0027s operating\n system\u0027s native widgets (ie. Windows File Explorer, Mac Finder, etc).\n \n If the specified file is a directory, a file explorer will tend to be opened.\n \n If the specified file is a file, the operating system will decide what to do based\n on the contents or name of the file.\n \n If the Desktop API isn\u0027t support in the current env (unknown when\n this will actually happen) an error dialog will be displayed.",
      "javadoc": "Uses the {@link Desktop} API to open the specified file using the user\u0027s operating\n system\u0027s native widgets (ie. Windows File Explorer, Mac Finder, etc).\n \u003cp\u003e\n If the specified file is a directory, a file explorer will tend to be opened.\n \u003cp\u003e\n If the specified file is a file, the operating system will decide what to do based\n on the contents or name of the file.\n \u003cp\u003e\n If the {@link Desktop} API isn\u0027t support in the current env (unknown when\n this will actually happen) an error dialog will be displayed.\n@param file {@link File} ref to a directory or file on the local filesystem.\n@throws IOException if the OS doesn\u0027t know what to do with the file.",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "File ref to a directory or file on the local filesystem."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the OS doesn\u0027t know what to do with the file."
        }
      ]
    },
    {
      "name": "forEachFile",
      "comment": "A convenience method to list the contents of the given directory path and pass each to the\n given consumer.  If the given path does not represent a directory, nothing will happen.\n \n This method handles closing resources by using the try-with-resources construct on \n Files#list(Path)",
      "javadoc": "A convenience method to list the contents of the given directory path and pass each to the\n given consumer.  If the given path does not represent a directory, nothing will happen.\n \n \u003cp\u003eThis method handles closing resources by using the try-with-resources construct on \n {@link Files#list(Path)}\n@param path the directory\n@param consumer the consumer of each child in the given directory\n@throws IOException if there is any problem reading the directory contents",
      "static": true,
      "params": [
        {
          "name": "path",
          "type_long": "java.nio.file.Path",
          "type_short": "Path",
          "comment": "the directory"
        },
        {
          "name": "consumer",
          "type_long": "java.util.function.Consumer\u003cjava.util.stream.Stream\u003cjava.nio.file.Path\u003e\u003e",
          "type_short": "Consumer",
          "comment": "the consumer of each child in the given directory"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is any problem reading the directory contents"
        }
      ]
    }
  ]
}
