{
  "name": "DockingActionIf",
  "comment": "The base interface for clients that wish to create commands to be registered with a tool.\n \n An action may appear in a primary menu, a popup menu or a toolbar.   Further, an action \n may have a key binding assigned.\n \n The particular support for key bindings is defined by KeyBindingType.   Almost all\n client actions will use the default setting of KeyBindingType#INDIVIDUAL.   To control\n the level of key binding support, you can pass the desired KeyBindingType to the\n base implementation of this interface.\n \n ActionContext is a key concept for tool actions so that they can be context sensitive if \n appropriate. The context provides a \n consistent way for plugins and components to share tool state with actions. Actions can then\n use that context to make decisions, such as if they should be enabled or added to a popup menu.\n The context information is also typically used when the action is invoked.  For example, an\n action context from a table element may provide the row in a table component that is selected and\n then a \"delete table row\" action can use that information to be enabled when a table selection \n exists and then delete that row if the action is invoked.\n \n  To make the overall action experience more convenient for the user, action processing\n supports the concept of a \"default tool context\".  This allows actions to work on a more global\n level than just the component that is focused.  The idea is that if an action is not valid for\n the current focused context (and it has be declared to work this way using \n the #setSupportsDefaultToolContext(boolean)), then it can be validated against the default \n tool context.  The \"default tool context\" is defined to be the action context of the tool\u0027s \n primary component.  This is primarily intended for tool-level actions which are the ones that appear\n in the tool\u0027s main menu bar or toolbar.  This allows the tool actions to mostly work on the\n tool\u0027s main component context regardless of what has focus, and yet still work on the  \n focused component if appropriate (such as a snapshot of the main component).",
  "javadoc": "The base interface for clients that wish to create commands to be registered with a tool.\n \n \u003cp\u003eAn action may appear in a primary menu, a popup menu or a toolbar.   Further, an action \n may have a key binding assigned.\n \n \u003cp\u003eThe particular support for key bindings is defined by {@link KeyBindingType}.   Almost all\n client actions will use the default setting of {@link KeyBindingType#INDIVIDUAL}.   To control\n the level of key binding support, you can pass the desired {@link KeyBindingType} to the\n base implementation of this interface.\n \n \u003cp\u003eActionContext is a key concept for tool actions so that they can be context sensitive if \n appropriate. The context provides a \n consistent way for plugins and components to share tool state with actions. Actions can then\n use that context to make decisions, such as if they should be enabled or added to a popup menu.\n The context information is also typically used when the action is invoked.  For example, an\n action context from a table element may provide the row in a table component that is selected and\n then a \"delete table row\" action can use that information to be enabled when a table selection \n exists and then delete that row if the action is invoked.\n \n \u003cp\u003e To make the overall action experience more convenient for the user, action processing\n supports the concept of a \"default tool context\".  This allows actions to work on a more global\n level than just the component that is focused.  The idea is that if an action is not valid for\n the current focused context (and it has be declared to work this way using \n the {@link #setSupportsDefaultToolContext(boolean)}), then it can be validated against the default \n tool context.  The \"default tool context\" is defined to be the action context of the tool\u0027s \n primary component.  This is primarily intended for tool-level actions which are the ones that appear\n in the tool\u0027s main menu bar or toolbar.  This allows the tool actions to mostly work on the\n tool\u0027s main component context regardless of what has focus, and yet still work on the  \n focused component if appropriate (such as a snapshot of the main component).",
  "static": false,
  "implements": [
    "docking.help.HelpDescriptor"
  ],
  "fields": [
    {
      "name": "ENABLEMENT_PROPERTY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"enabled\""
    },
    {
      "name": "GLOBALCONTEXT_PROPERTY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"globalContext\""
    },
    {
      "name": "DESCRIPTION_PROPERTY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"description\""
    },
    {
      "name": "KEYBINDING_DATA_PROPERTY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"KeyBindings\""
    },
    {
      "name": "MENUBAR_DATA_PROPERTY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"MenuBar\""
    },
    {
      "name": "POPUP_MENU_DATA_PROPERTY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"PopupMenu\""
    },
    {
      "name": "TOOLBAR_DATA_PROPERTY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"ToolBar\""
    }
  ],
  "methods": [
    {
      "name": "getName",
      "comment": "Returns the name of the action",
      "javadoc": "Returns the name of the action\n@return the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "getOwner",
      "comment": "Returns the owner of this action",
      "javadoc": "Returns the owner of this action\n@return the owner",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the owner"
      },
      "throws": []
    },
    {
      "name": "getOwnerDescription",
      "comment": "Returns a description of this actions owner.  For most actions this will return the \n same value as #getOwner().",
      "javadoc": "Returns a description of this actions owner.  For most actions this will return the \n same value as {@link #getOwner()}.\n@return the description",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the description"
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "Returns a short description of this action. Generally used for a tooltip",
      "javadoc": "Returns a short description of this action. Generally used for a tooltip\n@return the description",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the description"
      },
      "throws": []
    },
    {
      "name": "addPropertyChangeListener",
      "comment": "Adds a listener to be notified if any property changes",
      "javadoc": "Adds a listener to be notified if any property changes\n@param listener The property change listener that will be notified of\n        property change events.\n@see Action#addPropertyChangeListener(java.beans.PropertyChangeListener)",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "java.beans.PropertyChangeListener",
          "type_short": "PropertyChangeListener",
          "comment": "The property change listener that will be notified of\n        property change events."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removePropertyChangeListener",
      "comment": "Removes a listener to be notified of property changes.",
      "javadoc": "Removes a listener to be notified of property changes.\n@param listener The property change listener that will be notified of\n        property change events.\n@see #addPropertyChangeListener(PropertyChangeListener)\n@see Action#addPropertyChangeListener(java.beans.PropertyChangeListener)",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "java.beans.PropertyChangeListener",
          "type_short": "PropertyChangeListener",
          "comment": "The property change listener that will be notified of\n        property change events."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setEnabled",
      "comment": "Enables or disables the action",
      "javadoc": "Enables or disables the action\n@param newValue true to enable the action, false to disable it",
      "static": false,
      "params": [
        {
          "name": "newValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to enable the action, false to disable it"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSupportsDefaultToolContext",
      "comment": "Sets whether or not this action should be activated using the default tool context if the\n current focused provider\u0027s context is not valid for this action.  Typically, this should\n be set on actions that are mostly independent of which component has focus such as those\n on the tool\u0027s main toolbar.",
      "javadoc": "Sets whether or not this action should be activated using the default tool context if the\n current focused provider\u0027s context is not valid for this action.  Typically, this should\n be set on actions that are mostly independent of which component has focus such as those\n on the tool\u0027s main toolbar.\n@param newValue if true, the action will be activated using the default tool context if the\n local context is not valid for this action.  If false, the action will only ever be\n activated using the focused context.",
      "static": false,
      "params": [
        {
          "name": "newValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the action will be activated using the default tool context if the\n local context is not valid for this action.  If false, the action will only ever be\n activated using the focused context."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "supportsDefaultToolContext",
      "comment": "Returns true if this action can be activated using the default tool context if the focused\n context is invalid for this action. See #setSupportsDefaultToolContext(boolean)",
      "javadoc": "Returns true if this action can be activated using the default tool context if the focused\n context is invalid for this action. See {@link #setSupportsDefaultToolContext(boolean)}\n@return true if this action can be activated using the default tool context if the local\n context is invalid for this action.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this action can be activated using the default tool context if the local\n context is invalid for this action."
      },
      "throws": []
    },
    {
      "name": "isEnabled",
      "comment": "Returns true if the action is enabled.",
      "javadoc": "Returns true if the action is enabled.\n@return true if the action is enabled, false otherwise",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the action is enabled, false otherwise"
      },
      "throws": []
    },
    {
      "name": "getMenuBarData",
      "comment": "Returns the MenuData to be used to put this action in the menu bar.  The MenuData will be\n null if the action in not set to be in the menu bar.",
      "javadoc": "Returns the {@link MenuData} to be used to put this action in the menu bar.  The MenuData will be\n null if the action in not set to be in the menu bar.\n@return the {@link MenuData} for the menu bar or null if the action is not in the menu bar.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.MenuData",
        "type_short": "MenuData",
        "comment": "the MenuData for the menu bar or null if the action is not in the menu bar."
      },
      "throws": []
    },
    {
      "name": "getPopupMenuData",
      "comment": "Returns the MenuData to be used to put this action in a popup menu.  The MenuData will be\n null if the action in not set to be in a popup menu.",
      "javadoc": "Returns the {@link MenuData} to be used to put this action in a popup menu.  The MenuData will be\n null if the action in not set to be in a popup menu.\n@return the {@link MenuData} for a popup menu or null if the action is not to be in a popup menu.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.MenuData",
        "type_short": "MenuData",
        "comment": "the MenuData for a popup menu or null if the action is not to be in a popup menu."
      },
      "throws": []
    },
    {
      "name": "getToolBarData",
      "comment": "Returns the ToolBarData to be used to put this action in a toolbar.  The ToolBarData will be\n null if the action in not set to be in a toolbar.",
      "javadoc": "Returns the {@link ToolBarData} to be used to put this action in a toolbar.  The ToolBarData will be\n null if the action in not set to be in a toolbar.\n@return the {@link ToolBarData} for the popup menu or null if the action is not in a popup menu.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.ToolBarData",
        "type_short": "ToolBarData",
        "comment": "the ToolBarData for the popup menu or null if the action is not in a popup menu."
      },
      "throws": []
    },
    {
      "name": "getKeyBindingData",
      "comment": "Returns the KeyBindingData to be used to assign this action to a key binding.  The \n KeyBindingData will be null if the action is not set to have a keyBinding.",
      "javadoc": "Returns the {@link KeyBindingData} to be used to assign this action to a key binding.  The \n KeyBindingData will be null if the action is not set to have a keyBinding.\n@return the {@link KeyBindingData} for the action or null if the action does not have a keyBinding.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.KeyBindingData",
        "type_short": "KeyBindingData",
        "comment": "the KeyBindingData for the action or null if the action does not have a keyBinding."
      },
      "throws": []
    },
    {
      "name": "getDefaultKeyBindingData",
      "comment": "Returns the default KeyBindingData to be used to assign this action to a \n key binding.  The KeyBindingData will be null if the action is not set to have a keyBinding.\n The value of this method is that which is set from a call to \n #setKeyBindingData(KeyBindingData).",
      "javadoc": "Returns the default {@link KeyBindingData} to be used to assign this action to a \n key binding.  The KeyBindingData will be null if the action is not set to have a keyBinding.\n The value of this method is that which is set from a call to \n {@link #setKeyBindingData(KeyBindingData)}.\n@return the {@link KeyBindingData} for the action or null if the action does not have a keyBinding.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.KeyBindingData",
        "type_short": "KeyBindingData",
        "comment": "the KeyBindingData for the action or null if the action does not have a keyBinding."
      },
      "throws": []
    },
    {
      "name": "getKeyBinding",
      "comment": "Convenience method for getting the keybinding for this action.",
      "javadoc": "Convenience method for getting the keybinding for this action.\n@return the {@link KeyStroke} to be used as a keybinding for this action or null if there is no",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.KeyStroke",
        "type_short": "KeyStroke",
        "comment": "the KeyStroke to be used as a keybinding for this action or null if there is no"
      },
      "throws": []
    },
    {
      "name": "getFullName",
      "comment": "Returns the full name (the action name combined with the owner name)",
      "javadoc": "Returns the full name (the action name combined with the owner name)\n@return the full name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the full name"
      },
      "throws": []
    },
    {
      "name": "actionPerformed",
      "comment": "method to actually perform the action logic for this action.",
      "javadoc": "method to actually perform the action logic for this action.\n@param context the {@link ActionContext} object that provides information about where and how\n this action was invoked.",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": "the ActionContext object that provides information about where and how\n this action was invoked."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isAddToPopup",
      "comment": "method is used to determine if this action should be displayed on the current popup.  This \n method will only be called if the action has popup PopupMenuData set.\n \n Generally, actions don\u0027t need to override this method as the default implementation will \n defer to the #isEnabledForContext(ActionContext), which will have the effect \n of adding the action to the popup only if it is enabled for a given context.  \n By overriding this method,\n you can change this behavior so that the action will be added to the popup, even if it is\n disabled for the context, by having this method return true even if the \n #isEnabledForContext(ActionContext) method will return false, resulting in the \n action appearing in the popup menu, but begin disabled.",
      "javadoc": "method is used to determine if this action should be displayed on the current popup.  This \n method will only be called if the action has popup {@link PopupMenuData} set.\n \u003cp\u003e\n Generally, actions don\u0027t need to override this method as the default implementation will \n defer to the {@link #isEnabledForContext(ActionContext)}, which will have the effect \n of adding the action to the popup only if it is enabled for a given context.  \n By overriding this method,\n you can change this behavior so that the action will be added to the popup, even if it is\n disabled for the context, by having this method return true even if the \n {@link #isEnabledForContext(ActionContext)} method will return false, resulting in the \n action appearing in the popup menu, but begin disabled.\n@param context the {@link ActionContext} from the active provider.\n@return true if this action is appropriate for the given context.",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": "the ActionContext from the active provider."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this action is appropriate for the given context."
      },
      "throws": []
    },
    {
      "name": "isValidContext",
      "comment": "Method that actions implement to indicate if this action is valid (knows how to work with, is\n appropriate for) for the given context.  This method is used\n to determine if the action should be enabled based on the either the local context or the\n global context.  The action is first asked if it is valid for the local context and if not,\n then it is asked if it is valid for the global context.  If a context is valid, then it will\n then be asked if it is enabled for that context.",
      "javadoc": "Method that actions implement to indicate if this action is valid (knows how to work with, is\n appropriate for) for the given context.  This method is used\n to determine if the action should be enabled based on the either the local context or the\n global context.  The action is first asked if it is valid for the local context and if not,\n then it is asked if it is valid for the global context.  If a context is valid, then it will\n then be asked if it is enabled for that context.\n@param context the {@link ActionContext} from the active provider.\n@return true if this action is appropriate for the given context.",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": "the ActionContext from the active provider."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this action is appropriate for the given context."
      },
      "throws": []
    },
    {
      "name": "isEnabledForContext",
      "comment": "Method used to determine if this action should be enabled for the given context.  \n \n This is the method implementors override to control when the action may be used.\n \n This method\n will be called by the DockingWindowManager for actions on the global menuBar and toolBar\n and for actions that have a keyBinding. \n \n This method will be called whenever\n one of the following events occur: \n \n    when the user invokes the action via its keyBinding,\n    the user changes focus from one component provider to another,  \n \t  the user moves a component to another position in the window or into another window, \n    a component provider reports a change in it\u0027s context, \n    any plugin or software component reports a general change in context (calls the \n tool.contextChanged(ComponentProvider) with a null parameter).\n \n  The default implementation will simply return this action\u0027s enablement state.",
      "javadoc": "Method used to determine if this action should be enabled for the given context.  \n \u003cp\u003e\n \u003cb\u003eThis is the method implementors override to control when the action may be used.\u003c/b\u003e\n \u003cp\u003e\n This method\n will be called by the DockingWindowManager for actions on the global menuBar and toolBar\n and for actions that have a keyBinding. \n \u003cp\u003e\n This method will be called whenever\n one of the following events occur: \n \u003col\u003e\n    \u003cli\u003ewhen the user invokes the action via its keyBinding,\u003c/li\u003e\n    \u003cli\u003ethe user changes focus from one component provider to another,\u003c/li\u003e  \n \t  \u003cli\u003ethe user moves a component to another position in the window or into another window,\u003c/li\u003e \n    \u003cli\u003ea component provider reports a change in it\u0027s context,\u003c/li\u003e \n    \u003cli\u003eany plugin or software component reports a general change in context (calls the \n tool.contextChanged(ComponentProvider) with a null parameter).\u003c/li\u003e\n \u003c/ol\u003e\n  The default implementation will simply return this action\u0027s enablement state.\n@param context the current {@link ActionContext} for the window.\n@return true if the action should be enabled for the context or false otherwise.",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": "the current ActionContext for the window."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the action should be enabled for the context or false otherwise."
      },
      "throws": []
    },
    {
      "name": "getInceptionInformation",
      "comment": "Returns a string that includes source file and line number information of where \n this action was created",
      "javadoc": "Returns a string that includes source file and line number information of where \n this action was created\n@return the inception information",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the inception information"
      },
      "throws": []
    },
    {
      "name": "createButton",
      "comment": "Returns a JButton that is suitable for this action.  For example, It creates a ToggleButton\n if the action is a ToggleDockingActionIf.",
      "javadoc": "Returns a JButton that is suitable for this action.  For example, It creates a ToggleButton\n if the action is a {@link ToggleDockingActionIf}.\n@return a JButton to be used in a toolbar or null if the action does not have ToolBarData set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JButton",
        "type_short": "JButton",
        "comment": "a JButton to be used in a toolbar or null if the action does not have ToolBarData set."
      },
      "throws": []
    },
    {
      "name": "createMenuItem",
      "comment": "Returns a JMenuItem that is suitable for this action.  For example, if the action is a \n ToggleDockingActionIf, then a JCheckBoxMenuItem will be created.",
      "javadoc": "Returns a JMenuItem that is suitable for this action.  For example, if the action is a \n {@link ToggleDockingActionIf}, then a JCheckBoxMenuItem will be created.\n@param isPopup true if the action should use its Popup MenuData, else it uses the MenuBar MenuData.\n@return a JMenuItem for placement in either the menu bar or a popup menu.",
      "static": false,
      "params": [
        {
          "name": "isPopup",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the action should use its Popup MenuData, else it uses the MenuBar MenuData."
        }
      ],
      "return": {
        "type_long": "javax.swing.JMenuItem",
        "type_short": "JMenuItem",
        "comment": "a JMenuItem for placement in either the menu bar or a popup menu."
      },
      "throws": []
    },
    {
      "name": "shouldAddToWindow",
      "comment": "Determines whether this action should be added to a window (either the main window or a\n secondary detached window).  By default, this method will return true for the main window\n and false otherwise.",
      "javadoc": "Determines whether this action should be added to a window (either the main window or a\n secondary detached window).  By default, this method will return true for the main window\n and false otherwise.\n@param isMainWindow true if the window in question is the main window\n@param contextTypes a list of contextTypes (Classes) based on the providers that are currently\n in the window.\n@return true if this action should be added to the window, false otherwise.",
      "static": false,
      "params": [
        {
          "name": "isMainWindow",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the window in question is the main window"
        },
        {
          "name": "contextTypes",
          "type_long": "java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e",
          "type_short": "Set",
          "comment": "a list of contextTypes (Classes) based on the providers that are currently\n in the window."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this action should be added to the window, false otherwise."
      },
      "throws": []
    },
    {
      "name": "getKeyBindingType",
      "comment": "Returns this actions level of support for key binding accelerator keys\n \n Actions support key bindings by default.  Some reserved actions do not support \n key bindings, while others wish to share the same key bindings with multiple, equivalent\n actions (this allows the user to set one binding that works in many different contexts).",
      "javadoc": "Returns this actions level of support for key binding accelerator keys\n \n \u003cp\u003eActions support key bindings by default.  Some reserved actions do not support \n key bindings, while others wish to share the same key bindings with multiple, equivalent\n actions (this allows the user to set one binding that works in many different contexts).\n@return the key binding support",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.KeyBindingType",
        "type_short": "KeyBindingType",
        "comment": "the key binding support"
      },
      "throws": []
    },
    {
      "name": "setKeyBindingData",
      "comment": "Sets the KeyBindingData on an action to either assign a keybinding or remove it\n  (keyBindingData \u003d null).",
      "javadoc": "Sets the {@link KeyBindingData} on an action to either assign a keybinding or remove it\n  (keyBindingData \u003d null).\n@param keyBindingData if non-null, assigns a keybinding to the action. Otherwise, removes\n any keybinding from the action.",
      "static": false,
      "params": [
        {
          "name": "keyBindingData",
          "type_long": "docking.action.KeyBindingData",
          "type_short": "KeyBindingData",
          "comment": "if non-null, assigns a keybinding to the action. Otherwise, removes\n any keybinding from the action."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setUnvalidatedKeyBindingData",
      "comment": "Users creating actions should not call this method, but should instead call\n #setKeyBindingData(KeyBindingData).\n \n Call this method when you wish to bypass the validation of \n #setKeyBindingData(KeyBindingData) so that keybindings are set exactly as they\n are given (such as when set by the user and not by the programmer).",
      "javadoc": "\u003cb\u003eUsers creating actions should not call this method, but should instead call\n {@link #setKeyBindingData(KeyBindingData)}.\u003c/b\u003e\n \u003cp\u003e\n Call this method when you wish to bypass the validation of \n {@link #setKeyBindingData(KeyBindingData)} so that keybindings are set exactly as they\n are given (such as when set by the user and not by the programmer).\n@param newKeyBindingData the KeyBindingData to be used to assign this action to a keybinding",
      "static": false,
      "params": [
        {
          "name": "newKeyBindingData",
          "type_long": "docking.action.KeyBindingData",
          "type_short": "KeyBindingData",
          "comment": "the KeyBindingData to be used to assign this action to a keybinding"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "Called when the action\u0027s owner is removed from the tool",
      "javadoc": "Called when the action\u0027s owner is removed from the tool",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
