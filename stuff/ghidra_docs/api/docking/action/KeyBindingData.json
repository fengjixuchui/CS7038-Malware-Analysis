{
  "name": "KeyBindingData",
  "comment": "An object that contains a key stroke and the precedence for when that key stroke should be used.\n \n Note: this class creates key strokes that work on key .  This effectively\n normalizes all client key bindings to work on the same type of key stroke (pressed, typed or\n released).",
  "javadoc": "An object that contains a key stroke and the precedence for when that key stroke should be used.\n \n \u003cp\u003eNote: this class creates key strokes that work on key {@code pressed}.  This effectively\n normalizes all client key bindings to work on the same type of key stroke (pressed, typed or\n released).",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "keyStroke",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.KeyStroke",
      "type_short": "KeyStroke",
      "constant_value": null
    },
    {
      "name": "keyBindingPrecedence",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.KeyBindingPrecedence",
      "type_short": "KeyBindingPrecedence",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "keyStroke",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        },
        {
          "name": "modifiers",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "keyCode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "modifiers",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a key stroke from the given text.  See\n KeyBindingUtils#parseKeyStroke(KeyStroke).   The key stroke created for this class\n will always be a key  key stroke.",
      "javadoc": "Creates a key stroke from the given text.  See\n {@link KeyBindingUtils#parseKeyStroke(KeyStroke)}.   The key stroke created for this class\n will always be a key {@code pressed} key stroke.\n@param keyStrokeString the key stroke string to parse",
      "static": false,
      "params": [
        {
          "name": "keyStrokeString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the key stroke string to parse"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseKeyStrokeString",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "keyStrokeString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.KeyStroke",
        "type_short": "KeyStroke",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "keyStroke",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": ""
        },
        {
          "name": "precedence",
          "type_long": "docking.KeyBindingPrecedence",
          "type_short": "KeyBindingPrecedence",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKeyBinding",
      "comment": "Returns an accelerator keystroke to be associated with this action.",
      "javadoc": "Returns an accelerator keystroke to be associated with this action.\n@return the binding",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.KeyStroke",
        "type_short": "KeyStroke",
        "comment": "the binding"
      },
      "throws": []
    },
    {
      "name": "getKeyBindingPrecedence",
      "comment": "Returns the keyBindingPrecedence for this action",
      "javadoc": "Returns the keyBindingPrecedence for this action\n@return the precedence",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.KeyBindingPrecedence",
        "type_short": "KeyBindingPrecedence",
        "comment": "the precedence"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createReservedKeyBindingData",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "keyStroke",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "docking.action.KeyBindingData",
        "type_short": "KeyBindingData",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "validateKeyBindingData",
      "comment": "Updates the given data with system-independent versions of key modifiers.  For example,\n the control key will be converted to the command key on the Mac.",
      "javadoc": "Updates the given data with system-independent versions of key modifiers.  For example,\n the \u003ccode\u003econtrol\u003c/code\u003e key will be converted to the \u003ccode\u003ecommand\u003c/code\u003e key on the Mac.\n@param newKeyBindingData the data to validate\n@return the potentially changed data",
      "static": true,
      "params": [
        {
          "name": "newKeyBindingData",
          "type_long": "docking.action.KeyBindingData",
          "type_short": "KeyBindingData",
          "comment": "the data to validate"
        }
      ],
      "return": {
        "type_long": "docking.action.KeyBindingData",
        "type_short": "KeyBindingData",
        "comment": "the potentially changed data"
      },
      "throws": []
    }
  ]
}
