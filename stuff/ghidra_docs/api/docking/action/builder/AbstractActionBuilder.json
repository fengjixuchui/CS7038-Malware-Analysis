{
  "name": "AbstractActionBuilder",
  "comment": "Base class for DockingAction builders.\n \n Building an action requires a few steps.  One of the few required calls when using a builder\n is #onAction(Consumer).   This is the callback used when the action is invoked.   A\n typical action will also complete the #enabledWhen(Predicate) method, which tells the\n tool when an action is valid.\n \n To see more detailed documentation for a given method of this builder, or to understand\n how actions are used in the tool, see the DockingActionIf \n interface.",
  "javadoc": "Base class for DockingAction builders.\n \n \u003cp\u003eBuilding an action requires a few steps.  One of the few required calls when using a builder\n is {@link #onAction(Consumer)}.   This is the callback used when the action is invoked.   A\n typical action will also complete the {@link #enabledWhen(Predicate)} method, which tells the\n tool when an action is valid.\n \n \u003cp\u003eTo see more detailed documentation for a given method of this builder, or to understand\n how actions are used in the tool, see the {@link DockingActionIf} \n interface.\n@param \u003cT\u003e The type of DockingAction to build\n@param \u003cB\u003e the Type of action builder\n@param \u003cC\u003e The type of ActionContext. By default, the ActionContext type always starts as\n the base ActionContext class.  If the client calls the {@link #withContext(Class)} method on \n the builder, then that class (which must be a subclass of ActionContext) becomes the ActionContext\n type that will be used for future calls to the builder methods that take predicates with\n ActionContext (i.e. {@link #enabledWhen(Predicate)} and {@link #validContextWhen(Predicate)}. \n This works by substituting a builder with a different ActionContext type when chaining after\n the {@link #withContext(Class)} call.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "ALWAYS_TRUE",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.function.Predicate\u003cC\u003e",
      "type_short": "Predicate",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "Name for the ",
      "javadoc": "Name for the {@code DockingAction}",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "owner",
      "comment": "Owner for the ",
      "javadoc": "Owner for the {@code DockingAction}",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "actionContextClass",
      "comment": "Specifies the type of ActionContext that the built action works on.",
      "javadoc": "Specifies the type of ActionContext that the built action works on.",
      "static": false,
      "type_long": "java.lang.Class\u003c? extends docking.ActionContext\u003e",
      "type_short": "Class",
      "constant_value": null
    },
    {
      "name": "keyBindingType",
      "comment": "The  for this ",
      "javadoc": "The {@code KeyBindingType} for this {@code DockingAction}",
      "static": false,
      "type_long": "docking.action.KeyBindingType",
      "type_short": "KeyBindingType",
      "constant_value": null
    },
    {
      "name": "actionCallback",
      "comment": "The callback to perform when the action is invoked",
      "javadoc": "The callback to perform when the action is invoked",
      "static": false,
      "type_long": "java.util.function.Consumer\u003cC\u003e",
      "type_short": "Consumer",
      "constant_value": null
    },
    {
      "name": "description",
      "comment": "Description for the .  (optional)",
      "javadoc": "Description for the {@code DockingAction}.  (optional)",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "isEnabled",
      "comment": "Whether this  is enabled",
      "javadoc": "Whether this {@code DockingAction} is enabled",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "helpLocation",
      "comment": "The  for this ",
      "javadoc": "The {@code HelpLocation} for this {@code DockingAction}",
      "static": false,
      "type_long": "ghidra.util.HelpLocation",
      "type_short": "HelpLocation",
      "constant_value": null
    },
    {
      "name": "menuPath",
      "comment": "The menu bar path.  This is the key attribute for including the action on the menu bar.",
      "javadoc": "The menu bar path.  This is the key attribute for including the action on the menu bar.",
      "static": false,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "menuIcon",
      "comment": "The menu bar menu item icon.  (optional)",
      "javadoc": "The menu bar menu item icon.  (optional)",
      "static": false,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    },
    {
      "name": "menuSubGroup",
      "comment": "The menu bar menu item sub group.  (optional)",
      "javadoc": "The menu bar menu item sub group.  (optional)",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "menuGroup",
      "comment": "The menu bar menu item group.  (optional)",
      "javadoc": "The menu bar menu item group.  (optional)",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "menuMnemonic",
      "comment": "The mnemonic for the menu action (optional)",
      "javadoc": "The mnemonic for the menu action (optional)",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "popupIcon",
      "comment": "The icon for the  menu item (optional)",
      "javadoc": "The icon for the  menu item (optional)",
      "static": false,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    },
    {
      "name": "popupPath",
      "comment": "The menu path in a pop-up menu.  This is the key attribute for pop-up menu actions",
      "javadoc": "The menu path in a pop-up menu.  This is the key attribute for pop-up menu actions",
      "static": false,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "popupGroup",
      "comment": "The menu group for the item in the pop-up menu (optional)",
      "javadoc": "The menu group for the item in the pop-up menu (optional)",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "popupSubGroup",
      "comment": "The menu sub group for the item in the pop-up menu (optional)",
      "javadoc": "The menu sub group for the item in the pop-up menu (optional)",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "toolbarIcon",
      "comment": "The icon for the tool bar action.  This is the key attribute for actions in the toolbar.",
      "javadoc": "The icon for the tool bar action.  This is the key attribute for actions in the toolbar.",
      "static": false,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    },
    {
      "name": "toolBarGroup",
      "comment": "The group for the items on the tool bar (optional)",
      "javadoc": "The group for the items on the tool bar (optional)",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "toolBarSubGroup",
      "comment": "The menu group for the item in the tool bar menu (optional)",
      "javadoc": "The menu group for the item in the tool bar menu (optional)",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "keyBinding",
      "comment": "The key binding to assign to the action",
      "javadoc": "The key binding to assign to the action",
      "static": false,
      "type_long": "javax.swing.KeyStroke",
      "type_short": "KeyStroke",
      "constant_value": null
    },
    {
      "name": "enabledPredicate",
      "comment": "Predicate for determining if an action is enabled for a given context",
      "javadoc": "Predicate for determining if an action is enabled for a given context",
      "static": false,
      "type_long": "java.util.function.Predicate\u003cC\u003e",
      "type_short": "Predicate",
      "constant_value": null
    },
    {
      "name": "popupPredicate",
      "comment": "Predicate for determining if an action should be included on the pop-up menu",
      "javadoc": "Predicate for determining if an action should be included on the pop-up menu",
      "static": false,
      "type_long": "java.util.function.Predicate\u003cC\u003e",
      "type_short": "Predicate",
      "constant_value": null
    },
    {
      "name": "validContextPredicate",
      "comment": "Predicate for determining if an action is applicable for a given context",
      "javadoc": "Predicate for determining if an action is applicable for a given context",
      "static": false,
      "type_long": "java.util.function.Predicate\u003cC\u003e",
      "type_short": "Predicate",
      "constant_value": null
    },
    {
      "name": "supportsDefaultToolContext",
      "comment": "Set to true if the action supports using the default tool context if the local context is invalid",
      "javadoc": "Set to true if the action supports using the default tool context if the local context is invalid",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "windowWhen",
      "comment": "Specifies when the action should appear in a window.",
      "javadoc": "Specifies when the action should appear in a window.",
      "static": false,
      "type_long": "docking.action.builder.AbstractActionBuilder.When",
      "type_short": "When",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Builder constructor",
      "javadoc": "Builder constructor\n@param name the name of the action to be built\n@param owner the owner of the action to be built",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the action to be built"
        },
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the owner of the action to be built"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "self",
      "comment": "Returns this (typed for subclass) for chaining",
      "javadoc": "Returns this (typed for subclass) for chaining\n@return this for chaining",
      "static": false,
      "params": [],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this for chaining"
      },
      "throws": []
    },
    {
      "name": "build",
      "comment": "Builds the action.  To build and install the action in one step, use \n #buildAndInstall(Tool) or #buildAndInstallLocal(ComponentProvider).\n #inWindow(When)",
      "javadoc": "Builds the action.  To build and install the action in one step, use \n {@link #buildAndInstall(Tool)} or {@link #buildAndInstallLocal(ComponentProvider)}.\n {@link #inWindow(When)}\n@return the newly build action",
      "static": false,
      "params": [],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the newly build action"
      },
      "throws": []
    },
    {
      "name": "buildAndInstall",
      "comment": "Builds and adds the action globally to the tool",
      "javadoc": "Builds and adds the action globally to the tool\n@param tool the tool to add the action to\n@return the newly created action\n@see #build()\n@see #buildAndInstallLocal(ComponentProvider)",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "docking.Tool",
          "type_short": "Tool",
          "comment": "the tool to add the action to"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the newly created action"
      },
      "throws": []
    },
    {
      "name": "buildAndInstallLocal",
      "comment": "Builds and adds the action as a local action for the given provider",
      "javadoc": "Builds and adds the action as a local action for the given provider\n@param provider the provider to add the action to\n@return the newly created action\n@see #build()\n@see #buildAndInstall(Tool)",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider to add the action to"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the newly created action"
      },
      "throws": []
    },
    {
      "name": "description",
      "comment": "Configure the description for the action.  This description will appear as a tooltip\n over tool bar buttons.",
      "javadoc": "Configure the description for the action.  This description will appear as a tooltip\n over tool bar buttons.\n@param text the description\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the description"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "enabled",
      "comment": "Configure whether this  is enabled.\n \n Note: most clients do not need to use this method.  Enablement is controlled by \n #validContextWhen(Predicate).\n ",
      "javadoc": "Configure whether this {@code DockingAction} is enabled.\n \n \u003cp\u003e\u003cb\u003eNote: most clients do not need to use this method.  Enablement is controlled by \n {@link #validContextWhen(Predicate)}.\n \u003c/b\u003e\n@param b {@code true} if enabled\n@return this builder (for chaining)\n@see #validContextWhen(Predicate)",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": " if enabled"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "sharedKeyBinding",
      "comment": "Marks this action as one that shares a key binding with other actions in the tool.  This\n allows multiple clients to supply actions that use the same key binding, each working\n within its respective action context.  See KeyBindingType.\n \n Actions are not shared by default; they are KeyBindingType#INDIVIDUAL.  This \n means that each action must have its key binding assigned individually.",
      "javadoc": "Marks this action as one that shares a key binding with other actions in the tool.  This\n allows multiple clients to supply actions that use the same key binding, each working\n within its respective action context.  See {@link KeyBindingType}.\n \n \u003cp\u003eActions are not shared by default; they are {@link KeyBindingType#INDIVIDUAL}.  This \n means that each action must have its key binding assigned individually.\n@return this builder (for chaining)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "helpLocation",
      "comment": "Configure HelpLocation for this \n \n Clients are free to specify their help location directly, but many do not.  A default\n help location is created that uses the action name as the anchor name and the action\n owner as the topic.   If your anchor or topic do not follow this convention, then you \n need to set help topic yourself.",
      "javadoc": "Configure {@link HelpLocation} for this {@code DockingAction}\n \n \u003cp\u003eClients are free to specify their help location directly, but many do not.  A default\n help location is created that uses the action name as the anchor name and the action\n owner as the topic.   If your anchor or topic do not follow this convention, then you \n need to set help topic yourself.\n@param help the {@link HelpLocation} to configure\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "help",
          "type_long": "ghidra.util.HelpLocation",
          "type_short": "HelpLocation",
          "comment": "the HelpLocation to configure"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "menuPath",
      "comment": "Sets the menu bar path for the action.  Setting this attribute is what causes the action\n to appear on the tools menu bar.",
      "javadoc": "Sets the menu bar path for the action.  Setting this attribute is what causes the action\n to appear on the tools menu bar.\n@param pathElement the menu bar path for the action\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "pathElement",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "the menu bar path for the action"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "menuGroup",
      "comment": "Sets the group for the action in the menu bar.  Actions in the same group will appear\n next to other actions in the same group and actions in different groups will be separated\n by menu dividers.",
      "javadoc": "Sets the group for the action in the menu bar.  Actions in the same group will appear\n next to other actions in the same group and actions in different groups will be separated\n by menu dividers.\n@param group for this action\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "group",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "for this action"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "menuGroup",
      "comment": "Sets the group and sub-group for the action in the menu bar.  Actions in the same group \n will appear next to other actions in the same group and actions in different groups will \n be separated by menu dividers.  The sub-group is used to order the actions within the group.",
      "javadoc": "Sets the group and sub-group for the action in the menu bar.  Actions in the same group \n will appear next to other actions in the same group and actions in different groups will \n be separated by menu dividers.  The sub-group is used to order the actions within the group.\n@param group the group used to clump actions together\n@param subGroup the sub-group used to order actions within a group\n@return this builder (for chaining)\n@see #menuGroup(String)",
      "static": false,
      "params": [
        {
          "name": "group",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the group used to clump actions together"
        },
        {
          "name": "subGroup",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the sub-group used to order actions within a group"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "menuIcon",
      "comment": "Sets the icon to use in this action\u0027s menu bar item",
      "javadoc": "Sets the icon to use in this action\u0027s menu bar item\n@param icon the icon to use in the action\u0027s menu bar item\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon to use in the action\u0027s menu bar item"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "menuMnemonic",
      "comment": "Sets the mnemonic to use in this action\u0027s menu bar item",
      "javadoc": "Sets the mnemonic to use in this action\u0027s menu bar item\n@param mnemonic the mnemonic to use for this action\u0027s menu bar item.\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "mnemonic",
          "type_long": "int",
          "type_short": "int",
          "comment": "the mnemonic to use for this action\u0027s menu bar item."
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "popupMenuPath",
      "comment": "Sets the pop-up menu path for the action.  Setting this attribute is what causes the action\n to appear on the tool\u0027s pop-up menu (assuming it is applicable for the context).",
      "javadoc": "Sets the pop-up menu path for the action.  Setting this attribute is what causes the action\n to appear on the tool\u0027s pop-up menu (assuming it is applicable for the context).\n@param pathElement the menu path for the action in the pop-up menu\n@return this builder (for chaining)\n@see #popupMenuGroup(String)",
      "static": false,
      "params": [
        {
          "name": "pathElement",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "the menu path for the action in the pop-up menu"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "popupMenuGroup",
      "comment": "Sets the group for the action in the pop-up menu.  Actions in the same group will appear\n next to other actions in the same group and actions in different groups will be separated\n by menu dividers.",
      "javadoc": "Sets the group for the action in the pop-up menu.  Actions in the same group will appear\n next to other actions in the same group and actions in different groups will be separated\n by menu dividers.\n@param group for this action\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "group",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "for this action"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "popupMenuGroup",
      "comment": "Sets the group and sub-group for the action in the pop-up menu.  Actions in the same group\n will appear next to other actions in the same group and actions in different groups will\n be separated by menu dividers.  The sub-group is used to order the actions within the group",
      "javadoc": "Sets the group and sub-group for the action in the pop-up menu.  Actions in the same group\n will appear next to other actions in the same group and actions in different groups will\n be separated by menu dividers.  The sub-group is used to order the actions within the group\n@param group the group used to clump actions together\n@param subGroup the sub-group used to order actions within a group\n@return this builder (for chaining)\n@see #popupMenuGroup(String)",
      "static": false,
      "params": [
        {
          "name": "group",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the group used to clump actions together"
        },
        {
          "name": "subGroup",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the sub-group used to order actions within a group"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "popupMenuIcon",
      "comment": "Sets the icon to use in this action\u0027s pop-up menu item",
      "javadoc": "Sets the icon to use in this action\u0027s pop-up menu item\n@param icon the icon to use in the action\u0027s pop-up menu item\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon to use in the action\u0027s pop-up menu item"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "toolBarIcon",
      "comment": "Sets the icon to use in this action\u0027s tool bar button.  Setting this attribute is what \n causes the action to appear on the tool\u0027s or component provider\u0027s action tool bar.",
      "javadoc": "Sets the icon to use in this action\u0027s tool bar button.  Setting this attribute is what \n causes the action to appear on the tool\u0027s or component provider\u0027s action tool bar.\n@param icon the icon to use in the action\u0027s tool bar\n@return this builder (for chaining)\n@see #toolBarIcon(String)",
      "static": false,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon to use in the action\u0027s tool bar"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "toolBarIcon",
      "comment": "Sets the path for the icon to use in this action\u0027s tool bar button.  Setting this attribute\n causes the action to appear on the tool\u0027s or component provider\u0027s action tool bar.",
      "javadoc": "Sets the path for the icon to use in this action\u0027s tool bar button.  Setting this attribute\n causes the action to appear on the tool\u0027s or component provider\u0027s action tool bar.\n@param iconFilepath the module-relative path for the icon to use in the action\u0027s tool bar\n@return this builder (for chaining)\n@see #toolBarIcon(Icon)",
      "static": false,
      "params": [
        {
          "name": "iconFilepath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the module-relative path for the icon to use in the action\u0027s tool bar"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "toolBarGroup",
      "comment": "Sets the group for the action in the tool bar.  Actions in the same group will appear\n next to other actions in the same group and actions in different groups will be separated\n by menu dividers.\n \n Note: you must call #toolBarIcon(Icon) or #toolBarIcon(String) for\n this action to appear in the toolbar.  Calling this method without the other will not \n cause this action to be placed in the tool bar.\n ",
      "javadoc": "Sets the group for the action in the tool bar.  Actions in the same group will appear\n next to other actions in the same group and actions in different groups will be separated\n by menu dividers.\n \n \u003cp\u003e\u003cb\u003eNote: you must call {@link #toolBarIcon(Icon)} or {@link #toolBarIcon(String)} for\n this action to appear in the toolbar.  Calling this method without the other will not \n cause this action to be placed in the tool bar.\n \u003c/b\u003e\n@param group for this action\n@return this builder (for chaining)\n@see #toolBarGroup(String, String)",
      "static": false,
      "params": [
        {
          "name": "group",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "for this action"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "toolBarGroup",
      "comment": "Sets the group and sub-group for the action in the tool bar.  Actions in the same group\n will appear next to other actions in the same group and actions in different groups will\n be separated by menu dividers.  The sub-group is used to order the actions within the group.\n \n Note: you must call #toolBarIcon(Icon) or #toolBarIcon(String) for\n this action to appear in the toolbar.  Calling this method without the other will not \n cause this action to be placed in the tool bar.\n ",
      "javadoc": "Sets the group and sub-group for the action in the tool bar.  Actions in the same group\n will appear next to other actions in the same group and actions in different groups will\n be separated by menu dividers.  The sub-group is used to order the actions within the group.\n \n \u003cp\u003e\u003cb\u003eNote: you must call {@link #toolBarIcon(Icon)} or {@link #toolBarIcon(String)} for\n this action to appear in the toolbar.  Calling this method without the other will not \n cause this action to be placed in the tool bar.\n \u003c/b\u003e\n@param group the group used to clump actions together.\n@param subGroup the sub-group used to order actions within a group.\n@return this builder (for chaining)\n@see #toolBarGroup(String)",
      "static": false,
      "params": [
        {
          "name": "group",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the group used to clump actions together."
        },
        {
          "name": "subGroup",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the sub-group used to order actions within a group."
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "keyBinding",
      "comment": "Sets the key binding for this action",
      "javadoc": "Sets the key binding for this action\n@param keyStroke the KeyStroke to bind to this action\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "keyStroke",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": "the KeyStroke to bind to this action"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "keyBinding",
      "comment": "Sets the key binding for this action",
      "javadoc": "Sets the key binding for this action\n@param keyStrokeString the string to parse as a KeyStroke. See\n  {@link KeyStroke#getKeyStroke(String)} for the format of the string.\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "keyStrokeString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to parse as a KeyStroke. See\n  KeyStroke#getKeyStroke(String) for the format of the string."
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "onAction",
      "comment": "Sets the primary callback to be executed when this action is invoked.  This builder will\n throw an IllegalStateException if one of the build methods is called without\n providing this callback.",
      "javadoc": "Sets the primary callback to be executed when this action is invoked.  This builder will\n throw an {@link IllegalStateException} if one of the build methods is called without\n providing this callback.\n@param action the callback to execute when the action is invoked\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "java.util.function.Consumer\u003cC\u003e",
          "type_short": "Consumer",
          "comment": "the callback to execute when the action is invoked"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "enabledWhen",
      "comment": "Sets a predicate for dynamically determining the action\u0027s enabled state.  See \n DockingActionIf#isEnabledForContext(ActionContext)\n \n If this predicate is not set, the action\u0027s enable state must be controlled \n directly using the DockingAction#setEnabled(boolean) method.  We do not recommend\n controlling enablement directly. And, of course, if you do set this predicate, you should \n not later call DockingAction#setEnabled(boolean) to manually manage enablement.",
      "javadoc": "Sets a predicate for dynamically determining the action\u0027s enabled state.  See \n {@link DockingActionIf#isEnabledForContext(ActionContext)}\n \n \u003cp\u003eIf this predicate is not set, the action\u0027s enable state must be controlled \n directly using the {@link DockingAction#setEnabled(boolean)} method.  We do not recommend\n controlling enablement directly. And, of course, if you do set this predicate, you should \n not later call {@link DockingAction#setEnabled(boolean)} to manually manage enablement.\n@param predicate the predicate that will be used to dynamically determine an action\u0027s \n        enabled state\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "predicate",
          "type_long": "java.util.function.Predicate\u003cC\u003e",
          "type_short": "Predicate",
          "comment": "the predicate that will be used to dynamically determine an action\u0027s \n        enabled state"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "popupWhen",
      "comment": "Sets a predicate for dynamically determining if this action should be included in\n an impending pop-up menu.  If this predicate is not set, the action will be included\n in an impending pop-up, if it is enabled. See \n DockingActionIf#isAddToPopup(ActionContext).\n \n Note: use this method when you wish for an action to be added to a popup menu regardless\n of whether it is enabled.  As mentioned above, standard popup actions will only be added\n to the popup when they are enabled. \n  \n Note: using this method is not sufficient to cause the action to appear in a popup \n menu.  You must also use #popupMenuPath(String...).",
      "javadoc": "Sets a predicate for dynamically determining if this action should be included in\n an impending pop-up menu.  If this predicate is not set, the action will be included\n in an impending pop-up, if it is enabled. See \n {@link DockingActionIf#isAddToPopup(ActionContext)}.\n \n \u003cp\u003eNote: use this method when you wish for an action to be added to a popup menu regardless\n of whether it is enabled.  As mentioned above, standard popup actions will only be added\n to the popup when they are enabled. \n  \n \u003cp\u003eNote: using this method is not sufficient to cause the action to appear in a popup \n menu.  You must also use {@link #popupMenuPath(String...)}.\n@param predicate the predicate that will be used to dynamically determine whether an \n        action is added to a popup menu\n@return this builder (for chaining)\n@see #popupMenuPath(String...)",
      "static": false,
      "params": [
        {
          "name": "predicate",
          "type_long": "java.util.function.Predicate\u003cC\u003e",
          "type_short": "Predicate",
          "comment": "the predicate that will be used to dynamically determine whether an \n        action is added to a popup menu"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "validContextWhen",
      "comment": "Sets a predicate for dynamically determining if this action is valid for the current \n ActionContext.  See DockingActionIf#isValidContext(ActionContext).\n \n Note: most actions will not use this method, but rely instead on \n #enabledWhen(Predicate). \n \n Note: this triggers automatic action enablement so you should not later call \n DockingAction#setEnabled(boolean) to manually manage action enablement.",
      "javadoc": "Sets a predicate for dynamically determining if this action is valid for the current \n {@link ActionContext}.  See {@link DockingActionIf#isValidContext(ActionContext)}.\n \n \u003cp\u003eNote: most actions will not use this method, but rely instead on \n {@link #enabledWhen(Predicate)}. \n \n \u003cp\u003eNote: this triggers automatic action enablement so you should not later call \n {@link DockingAction#setEnabled(boolean)} to manually manage action enablement.\n@param predicate the predicate that will be used to dynamically determine an action\u0027s \n validity for a given {@link ActionContext}\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "predicate",
          "type_long": "java.util.function.Predicate\u003cC\u003e",
          "type_short": "Predicate",
          "comment": "the predicate that will be used to dynamically determine an action\u0027s \n validity for a given ActionContext"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "supportsDefaultToolContext",
      "comment": "Sets whether the action will support using the default tool context if the focused provider\u0027s\n context is invalid.\n \n By default, actions only work on the current focused provider\u0027s context.  Setting this\n to true will cause the action to be evaluated against the default tool context if the\n focused context is not valid for this action.",
      "javadoc": "Sets whether the action will support using the default tool context if the focused provider\u0027s\n context is invalid.\n \u003cP\u003e\n By default, actions only work on the current focused provider\u0027s context.  Setting this\n to true will cause the action to be evaluated against the default tool context if the\n focused context is not valid for this action.\n@param b the new value\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "the new value"
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "inWindow",
      "comment": "Specifies when a global action should appear in a window (main or secondary).\n \n Global menu or toolbar actions can be configured to appear in 1) only the main \n window, or 2) all windows, or 3) any window that has a provider that\n generates an action context that matches the context that this action\n consumes. If the \"context matches\" options is chosen, then the \n #withContext(Class) method must also be called to specify the matching\n context; otherwise an exception will be thrown when the action is built.\n \n  \n  The default is that the action will only appear in the main window.",
      "javadoc": "Specifies when a global action should appear in a window (main or secondary).\n \u003cP\u003e\n Global menu or toolbar actions can be configured to appear in 1) only the main \n window, or 2) all windows, or 3) any window that has a provider that\n generates an action context that matches the context that this action\n consumes. If the \"context matches\" options is chosen, then the \n {@link #withContext(Class)} method must also be called to specify the matching\n context; otherwise an exception will be thrown when the action is built.\n \u003cP\u003e\n  \n  The default is that the action will only appear in the main window.\n@param when use the {@link When} enum to specify the windowing behavior\n of the action.\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "when",
          "type_long": "docking.action.builder.AbstractActionBuilder.When",
          "type_short": "When",
          "comment": "use the When enum to specify the windowing behavior\n of the action."
        }
      ],
      "return": {
        "type_long": "B",
        "type_short": "B",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "withContext",
      "comment": "Sets the specific ActionContext type to use for the various predicate calls \n (#validContextWhen(Predicate), #enabledWhen(Predicate), and \n #popupWhen(Predicate)).\n \n In other words, this allows the client to specify the type of ActionContext that is valid for\n the action being built.\n \n To be effective, this method must be called  before setting any of the predicates \n such as the #enabledWhen(Predicate).  Once this method is called you can define your\n predicates using the more specific ActionContext and be assured your predicates will only\n be called when the current action context is the type (or sub-type) of the context you have\n specified here.\n \n For example, assume you have an action that is only enabled when the context is of type\n FooActionContext.  If you don\u0027t call this method to set the ActionContext type,  you would have\n to write your predicate something like this:\n \n {\n     if (!(context instanceof FooContext)) {\n         return false;\n     }\n     return ((FooContext) context).isAwesome();\n });\n \n But by first calling the builder method withContext(FooContext.class), you can \n simply write:\n\n \n }\n \n\n Note: this triggers automatic action enablement so you should not later call \n DockingAction#setEnabled(boolean) to manually manage action enablement.",
      "javadoc": "Sets the specific ActionContext type to use for the various predicate calls \n ({@link #validContextWhen(Predicate)}, {@link #enabledWhen(Predicate)}, and \n {@link #popupWhen(Predicate)}).\n \u003cP\u003e\n In other words, this allows the client to specify the type of ActionContext that is valid for\n the action being built.\n \u003cP\u003e\n To be effective, this method must be called  \u003cb\u003ebefore\u003c/b\u003e setting any of the predicates \n such as the {@link #enabledWhen(Predicate)}.  Once this method is called you can define your\n predicates using the more specific ActionContext and be assured your predicates will only\n be called when the current action context is the type (or sub-type) of the context you have\n specified here.\n \u003cP\u003e\n For example, assume you have an action that is only enabled when the context is of type\n FooActionContext.  If you don\u0027t call this method to set the ActionContext type,  you would have\n to write your predicate something like this:\n \u003cpre\u003e\n {@literal builder.enabledWhen(context -\u003e }{\n     if (!(context instanceof FooContext)) {\n         return false;\n     }\n     return ((FooContext) context).isAwesome();\n });\n \u003c/pre\u003e\n But by first calling the builder method \u003cCODE\u003ewithContext(FooContext.class)\u003c/CODE\u003e, you can \n simply write:\n\n \u003cpre\u003e\n {@literal builder.enabledWhen(context -\u003e return context.isAwesome() }}\n \u003c/pre\u003e\n\n \u003cp\u003eNote: this triggers automatic action enablement so you should not later call \n {@link DockingAction#setEnabled(boolean)} to manually manage action enablement.\n@param newActionContextClass the more specific ActionContext type.\n@param \u003cAC2\u003e The new ActionContext type (as determined by the newActionContextClass) that\n the returned builder will have.\n@param \u003cB2\u003e the new builder type.\n@return an ActionBuilder whose generic types have been modified to match the new ActionContext.\n It still contains all the configuration that has been applied so far.",
      "static": false,
      "params": [
        {
          "name": "newActionContextClass",
          "type_long": "java.lang.Class\u003cAC2\u003e",
          "type_short": "Class",
          "comment": "the more specific ActionContext type."
        }
      ],
      "return": {
        "type_long": "B2",
        "type_short": "B2",
        "comment": "an ActionBuilder whose generic types have been modified to match the new ActionContext.\n It still contains all the configuration that has been applied so far."
      },
      "throws": []
    },
    {
      "name": "validate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decorateAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingAction",
          "type_short": "DockingAction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adaptPredicate",
      "comment": "Since the built action will need a predicate that handles any action type, this method \n creates a predicate that adapts a user supplied predicate for a more specific ActionContext\n to a general predicate that can accept any ActionContext.",
      "javadoc": "Since the built action will need a predicate that handles any action type, this method \n creates a predicate that adapts a user supplied predicate for a more specific ActionContext\n to a general predicate that can accept any ActionContext.\n@param predicate the client supplied predicate that expects a more specific ActionContext\n@return a predicate that can handle any ActionContext",
      "static": false,
      "params": [
        {
          "name": "predicate",
          "type_long": "java.util.function.Predicate\u003cC\u003e",
          "type_short": "Predicate",
          "comment": "the client supplied predicate that expects a more specific ActionContext"
        }
      ],
      "return": {
        "type_long": "java.util.function.Predicate\u003cdocking.ActionContext\u003e",
        "type_short": "Predicate",
        "comment": "a predicate that can handle any ActionContext"
      },
      "throws": []
    },
    {
      "name": "isPopupAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isToolbarAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isMenuAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isKeyBindingAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPopupMenuData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingAction",
          "type_short": "DockingAction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToolbarData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingAction",
          "type_short": "DockingAction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMenuData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingAction",
          "type_short": "DockingAction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setKeyBindingData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingAction",
          "type_short": "DockingAction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
