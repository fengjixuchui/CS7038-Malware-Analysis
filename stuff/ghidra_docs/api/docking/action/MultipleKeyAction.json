{
  "name": "MultipleKeyAction",
  "comment": "Action that manages multiple DockingActions mapped to a given key binding",
  "javadoc": "Action that manages multiple {@link DockingAction}s mapped to a given key binding",
  "static": false,
  "implements": [],
  "extends": "docking.DockingKeyBindingAction",
  "fields": [
    {
      "name": "actions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cdocking.action.MultipleKeyAction.ActionData\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "dialog",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.MultiActionDialog",
      "type_short": "MultiActionDialog",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates new MultipleKeyAction",
      "javadoc": "Creates new MultipleKeyAction\n@param tool used to determine context\n@param provider the provider, if any, associated with the action\n@param action action that will be added to the list of actions bound to a keystroke\n@param keyStroke the keystroke, if any, associated with the action",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "docking.Tool",
          "type_short": "Tool",
          "comment": "used to determine context"
        },
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider, if any, associated with the action"
        },
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "action that will be added to the list of actions bound to a keystroke"
        },
        {
          "name": "keyStroke",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": "the keystroke, if any, associated with the action"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": ""
        },
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEnabled",
      "comment": "Returns the enabled state of the Action. When enabled,\n any component associated with this object is active and\n able to fire this object\u0027s actionPerformed method.",
      "javadoc": "Returns the enabled state of the \u003ccode\u003eAction\u003c/code\u003e. When enabled,\n any component associated with this object is active and\n able to fire this object\u0027s \u003ccode\u003eactionPerformed\u003c/code\u003e method.\n@return true if this \u003ccode\u003eAction\u003c/code\u003e is enabled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this Action is enabled"
      },
      "throws": []
    },
    {
      "name": "setEnabled",
      "comment": "Enables or disables the action.  This affects all uses of the action.  Note that for popups, \n this affects whether or not the option is \"grayed out\", not whether the action is added\n to the popup.",
      "javadoc": "Enables or disables the action.  This affects all uses of the action.  Note that for popups, \n this affects whether or not the option is \"grayed out\", not whether the action is added\n to the popup.\n@param newValue true to enable the action, false to disable it\n@see Action#setEnabled",
      "static": false,
      "params": [
        {
          "name": "newValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to enable the action, false to disable it"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "actionPerformed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "java.awt.event.ActionEvent",
          "type_short": "ActionEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "ignoreActionWhileMenuShowing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValidContextActions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "localContext",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": ""
        },
        {
          "name": "globalContext",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cdocking.ExecutableAction\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValidAndEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "actionData",
          "type_long": "docking.action.MultipleKeyAction.ActionData",
          "type_short": "ActionData",
          "comment": ""
        },
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValidAndEnabledGlobally",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "actionData",
          "type_long": "docking.action.MultipleKeyAction.ActionData",
          "type_short": "ActionData",
          "comment": ""
        },
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isReservedKeybindingPrecedence",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKeyBindingPrecedence",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.KeyBindingPrecedence",
        "type_short": "KeyBindingPrecedence",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "geValidKeyBindingPrecedence",
      "comment": "This is a special version of #getKeyBindingPrecedence() that allows the internal\n key event processing to specify the source component when determining how precedence should\n be established for the actions contained herein.",
      "javadoc": "This is a special version of {@link #getKeyBindingPrecedence()} that allows the internal\n key event processing to specify the source component when determining how precedence should\n be established for the actions contained herein.\n@param source the component; may be null\n@return the precedence; may be null",
      "static": false,
      "params": [
        {
          "name": "source",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component; may be null"
        }
      ],
      "return": {
        "type_long": "docking.KeyBindingPrecedence",
        "type_short": "KeyBindingPrecedence",
        "comment": "the precedence; may be null"
      },
      "throws": []
    },
    {
      "name": "getActionsForCurrentOrDefaultContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "eventSource",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cdocking.ExecutableAction\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDialogActions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "window",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cdocking.ExecutableAction\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dwm",
          "type_long": "docking.DockingWindowManager",
          "type_short": "DockingWindowManager",
          "comment": ""
        },
        {
          "name": "eventSource",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "docking.ComponentProvider",
        "type_short": "ComponentProvider",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWindow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dwm",
          "type_long": "docking.DockingWindowManager",
          "type_short": "DockingWindowManager",
          "comment": ""
        },
        {
          "name": "eventSource",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getActions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cdocking.action.DockingActionIf\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKeyBindingsAsString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
