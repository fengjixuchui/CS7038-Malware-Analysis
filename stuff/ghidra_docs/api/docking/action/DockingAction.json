{
  "name": "DockingAction",
  "comment": "DockingAction defines a user action associated with a toolbar icon and/or\n menu item.  All actions must specify an action name which will be used to associate key bindings\n and will be used as the popup menu item when needed.  This name should be unique across\n the entire application.\n \n DockingActions can be invoked from the global menu, a popup menu, a toolbar, and/or a keybinding,\n depending on whether or not menuBarData, popupMenuData, toolBarData, and/or keyBindingData have \n been set.\n \n  \n Implementors of this class should override #actionPerformed(ActionContext).\n \n \n Generally, implementors should also override #isEnabledForContext(ActionContext).  This\n method is used to determine if an action if applicable to the current context.   Overriding this\n method allows actions to manage their own enablement.  Otherwise, the default behavior for this\n method is to return the current enabled property of the action.  This allows for the possibility\n for plugins to externally manage the enablement of its actions.\n \n NOTE: If you wish to do your own external enablement management for an action (which is highly\n discouraged), it is very important that you don\u0027t use any of the internal enablement mechanisms\n by setting the predicates #enabledWhen(Predicate), #validContextWhen(Predicate)\n or overriding #isValidContext(ActionContext). These predicates and methods trigger\n internal enablement management which will interfere with you own calls to\n DockingAction#setEnabled(boolean).",
  "javadoc": "\u003ccode\u003eDockingAction\u003c/code\u003e defines a user action associated with a toolbar icon and/or\n menu item.  All actions must specify an action name which will be used to associate key bindings\n and will be used as the popup menu item when needed.  This name should be unique across\n the entire application.\n \u003cp\u003e\n DockingActions can be invoked from the global menu, a popup menu, a toolbar, and/or a keybinding,\n depending on whether or not menuBarData, popupMenuData, toolBarData, and/or keyBindingData have \n been set.\n \u003cp\u003e\n \u003cb\u003e \n Implementors of this class should override {@link #actionPerformed(ActionContext)}.\n \u003c/b\u003e\n \u003cp\u003e\n Generally, implementors should also override {@link #isEnabledForContext(ActionContext)}.  This\n method is used to determine if an action if applicable to the current context.   Overriding this\n method allows actions to manage their own enablement.  Otherwise, the default behavior for this\n method is to return the current enabled property of the action.  This allows for the possibility\n for plugins to externally manage the enablement of its actions.\n \u003cP\u003e\n NOTE: If you wish to do your own external enablement management for an action (which is highly\n discouraged), it is very important that you don\u0027t use any of the internal enablement mechanisms\n by setting the predicates {@link #enabledWhen(Predicate)}, {@link #validContextWhen(Predicate)}\n or overriding {@link #isValidContext(ActionContext)}. These predicates and methods trigger\n internal enablement management which will interfere with you own calls to\n {@link DockingAction#setEnabled(boolean)}.",
  "static": false,
  "implements": [
    "docking.action.DockingActionIf"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "propertyListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.WeakSet\u003cjava.beans.PropertyChangeListener\u003e",
      "type_short": "WeakSet",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "owner",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "description",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "inceptionInformation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "isEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "keyBindingType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.action.KeyBindingType",
      "type_short": "KeyBindingType",
      "constant_value": null
    },
    {
      "name": "defaultKeyBindingData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.action.KeyBindingData",
      "type_short": "KeyBindingData",
      "constant_value": null
    },
    {
      "name": "keyBindingData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.action.KeyBindingData",
      "type_short": "KeyBindingData",
      "constant_value": null
    },
    {
      "name": "menuBarData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.action.MenuBarData",
      "type_short": "MenuBarData",
      "constant_value": null
    },
    {
      "name": "popupMenuData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.action.PopupMenuData",
      "type_short": "PopupMenuData",
      "constant_value": null
    },
    {
      "name": "toolBarData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.action.ToolBarData",
      "type_short": "ToolBarData",
      "constant_value": null
    },
    {
      "name": "enabledPredicate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.function.Predicate\u003cdocking.ActionContext\u003e",
      "type_short": "Predicate",
      "constant_value": null
    },
    {
      "name": "popupPredicate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.function.Predicate\u003cdocking.ActionContext\u003e",
      "type_short": "Predicate",
      "constant_value": null
    },
    {
      "name": "validContextPredicate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.function.Predicate\u003cdocking.ActionContext\u003e",
      "type_short": "Predicate",
      "constant_value": null
    },
    {
      "name": "shouldAddToAllWindows",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "addToWindowWhenContextClass",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Class\u003c? extends docking.ActionContext\u003e",
      "type_short": "Class",
      "constant_value": null
    },
    {
      "name": "supportsDefaultToolContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "kbType",
          "type_long": "docking.action.KeyBindingType",
          "type_short": "KeyBindingType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "supportsKeyBindings",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPreferredKeyBindingType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.KeyBindingType",
        "type_short": "KeyBindingType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "actionPerformed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPropertyChangeListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "java.beans.PropertyChangeListener",
          "type_short": "PropertyChangeListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removePropertyChangeListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "java.beans.PropertyChangeListener",
          "type_short": "PropertyChangeListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFullName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMenuBarData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.MenuData",
        "type_short": "MenuData",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOwner",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPopupMenuData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.MenuData",
        "type_short": "MenuData",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToolBarData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.ToolBarData",
        "type_short": "ToolBarData",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInceptionInformation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isAddToPopup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEnabledForContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValidContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "shouldAddToWindow",
      "comment": "Determines if this action should be added to a window.\n \n If the client wants the action on all windows, then they can call #shouldAddToAllWindows\n \n If the client wants the action to be on a window only when the window can produce \n a certain context type, the the client should call \n #addToWindowWhen(Class)\n \n Otherwise, by default, the action will only be on the main window.",
      "javadoc": "Determines if this action should be added to a window.\n \u003cP\u003e\n If the client wants the action on all windows, then they can call {@link #shouldAddToAllWindows}\n \u003cP\u003e\n If the client wants the action to be on a window only when the window can produce \n a certain context type, the the client should call \n {@link #addToWindowWhen(Class)}\n \u003cP\u003e\n Otherwise, by default, the action will only be on the main window.",
      "static": false,
      "params": [
        {
          "name": "isMainWindow",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "contextTypes",
          "type_long": "java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e",
          "type_short": "Set",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setHelpLocation",
      "comment": "Set a specific Help location for this action.\n This will replace the default help location",
      "javadoc": "Set a specific Help location for this action.\n This will replace the default help location\n@param location the help location for the action.",
      "static": false,
      "params": [
        {
          "name": "location",
          "type_long": "ghidra.util.HelpLocation",
          "type_short": "HelpLocation",
          "comment": "the help location for the action."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markHelpUnnecessary",
      "comment": "Signals the the help system that this action does not need a help entry.   Some actions\n are so obvious that they do not require help, such as an action that renames a file.\n \n The method should be sparsely used, as most actions should provide help.",
      "javadoc": "Signals the the help system that this action does not need a help entry.   Some actions\n are so obvious that they do not require help, such as an action that renames a file.\n \u003cp\u003e\n The method should be sparsely used, as most actions should provide help.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSupportsDefaultToolContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "supportsDefaultToolContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createButton",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JButton",
        "type_short": "JButton",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createMenuItem",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "isPopup",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.JMenuItem",
        "type_short": "JMenuItem",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKeyBindingType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.KeyBindingType",
        "type_short": "KeyBindingType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKeyBinding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.KeyStroke",
        "type_short": "KeyStroke",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKeyBindingData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.KeyBindingData",
        "type_short": "KeyBindingData",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultKeyBindingData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.KeyBindingData",
        "type_short": "KeyBindingData",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setKeyBindingData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newKeyBindingData",
          "type_long": "docking.action.KeyBindingData",
          "type_short": "KeyBindingData",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "supportsKeyBinding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "kbData",
          "type_long": "docking.action.KeyBindingData",
          "type_short": "KeyBindingData",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setUnvalidatedKeyBindingData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newKeyBindingData",
          "type_long": "docking.action.KeyBindingData",
          "type_short": "KeyBindingData",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMenuBarData",
      "comment": "Sets the MenuData to be used to put this action on the tool\u0027s menu bar",
      "javadoc": "Sets the {@link MenuData} to be used to put this action on the tool\u0027s menu bar\n@param newMenuData the MenuData to be used to put this action on the tool\u0027s menu bar",
      "static": false,
      "params": [
        {
          "name": "newMenuData",
          "type_long": "docking.action.MenuData",
          "type_short": "MenuData",
          "comment": "the MenuData to be used to put this action on the tool\u0027s menu bar"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPopupMenuData",
      "comment": "Sets the MenuData to be used to put this action in the tool\u0027s popup menu",
      "javadoc": "Sets the {@link MenuData} to be used to put this action in the tool\u0027s popup menu\n@param newMenuData the MenuData to be used to put this action on the tool\u0027s popup menu",
      "static": false,
      "params": [
        {
          "name": "newMenuData",
          "type_long": "docking.action.MenuData",
          "type_short": "MenuData",
          "comment": "the MenuData to be used to put this action on the tool\u0027s popup menu"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToolBarData",
      "comment": "Sets the ToolBarData to be used to put this action on the tool\u0027s toolbar",
      "javadoc": "Sets the {@link ToolBarData} to be used to put this action on the tool\u0027s toolbar\n@param newToolBarData the ToolBarData to be used to put this action on the tool\u0027s toolbar",
      "static": false,
      "params": [
        {
          "name": "newToolBarData",
          "type_long": "docking.action.ToolBarData",
          "type_short": "ToolBarData",
          "comment": "the ToolBarData to be used to put this action on the tool\u0027s toolbar"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createReservedKeyBinding",
      "comment": "Creates a reserved keybinding for this action. Reserved keybindings cannot be changed by\n the user and have a special high precedence for being process before other actions. Also,\n other actions are prevented from using the same KeyStroke as a reserved keybinding.",
      "javadoc": "Creates a reserved keybinding for this action. Reserved keybindings cannot be changed by\n the user and have a special high precedence for being process before other actions. Also,\n other actions are prevented from using the same KeyStroke as a reserved keybinding.\n@param keyStroke the keystroke to be used for the keybinding",
      "static": false,
      "params": [
        {
          "name": "keyStroke",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": "the keystroke to be used for the keybinding"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDescription",
      "comment": "Sets the description to be used in the tooltip.",
      "javadoc": "Sets the description to be used in the tooltip.\n@param newDescription the description to be set.",
      "static": false,
      "params": [
        {
          "name": "newDescription",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the description to be set."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "Cleans up any resources used by the action.",
      "javadoc": "Cleans up any resources used by the action.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHelpInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "firePropertyChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "oldValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "newValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHelpObject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "enabledWhen",
      "comment": "Sets a predicate for dynamically determining the action\u0027s enabled state.  If this\n predicate is not set, the action\u0027s enable state must be controlled directly using the\n DockingAction#setEnabled(boolean) method. See \n DockingActionIf#isEnabledForContext(ActionContext)",
      "javadoc": "Sets a predicate for dynamically determining the action\u0027s enabled state.  If this\n predicate is not set, the action\u0027s enable state must be controlled directly using the\n {@link DockingAction#setEnabled(boolean)} method. See \n {@link DockingActionIf#isEnabledForContext(ActionContext)}\n@param predicate the predicate that will be used to dynamically determine an action\u0027s \n enabled state.",
      "static": false,
      "params": [
        {
          "name": "predicate",
          "type_long": "java.util.function.Predicate\u003cdocking.ActionContext\u003e",
          "type_short": "Predicate",
          "comment": "the predicate that will be used to dynamically determine an action\u0027s \n enabled state."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "popupWhen",
      "comment": "Sets a predicate for dynamically determining if this action should be included in\n an impending pop-up menu.  If this predicate is not set, the action\u0027s will be included\n in an impending pop-up, if it is enabled. See \n DockingActionIf#isAddToPopup(ActionContext)",
      "javadoc": "Sets a predicate for dynamically determining if this action should be included in\n an impending pop-up menu.  If this predicate is not set, the action\u0027s will be included\n in an impending pop-up, if it is enabled. See \n {@link DockingActionIf#isAddToPopup(ActionContext)}\n@param predicate the predicate that will be used to dynamically determine an action\u0027s \n enabled state.",
      "static": false,
      "params": [
        {
          "name": "predicate",
          "type_long": "java.util.function.Predicate\u003cdocking.ActionContext\u003e",
          "type_short": "Predicate",
          "comment": "the predicate that will be used to dynamically determine an action\u0027s \n enabled state."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "validContextWhen",
      "comment": "Sets a predicate for dynamically determining if this action is valid for the current \n ActionContext.  See DockingActionIf#isValidContext(ActionContext)",
      "javadoc": "Sets a predicate for dynamically determining if this action is valid for the current \n {@link ActionContext}.  See {@link DockingActionIf#isValidContext(ActionContext)}\n@param predicate the predicate that will be used to dynamically determine an action\u0027s \n validity for a given {@link ActionContext}",
      "static": false,
      "params": [
        {
          "name": "predicate",
          "type_long": "java.util.function.Predicate\u003cdocking.ActionContext\u003e",
          "type_short": "Predicate",
          "comment": "the predicate that will be used to dynamically determine an action\u0027s \n validity for a given ActionContext"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addToWindowWhen",
      "comment": "Sets the ActionContext class for when this action should be added to a window\n \n If this is set, the the action will only be added to windows that have providers\n that can produce an ActionContext that is appropriate for this action.\n ",
      "javadoc": "Sets the ActionContext class for when this action should be added to a window\n \u003cP\u003e\n If this is set, the the action will only be added to windows that have providers\n that can produce an ActionContext that is appropriate for this action.\n \u003cP\u003e\n@param contextClass the ActionContext class required to be producible by a\n provider that is hosted in that window before this action is added to that \n window.",
      "static": false,
      "params": [
        {
          "name": "contextClass",
          "type_long": "java.lang.Class\u003c? extends docking.ActionContext\u003e",
          "type_short": "Class",
          "comment": "the ActionContext class required to be producible by a\n provider that is hosted in that window before this action is added to that \n window."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setAddToAllWindows",
      "comment": "Tells this action to add itself to all windows\n ",
      "javadoc": "Tells this action to add itself to all windows\n \u003cP\u003e\n@param b to add to all windows or not",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "to add to all windows or not"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doCreateButton",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JButton",
        "type_short": "JButton",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doCreateMenuItem",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JMenuItem",
        "type_short": "JMenuItem",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "recordInception",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInceptionFromTheFirstClassThatIsNotUsOrABuilder",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
