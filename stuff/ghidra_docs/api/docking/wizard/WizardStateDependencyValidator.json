{
  "name": "WizardStateDependencyValidator",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "dependentSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cT\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "dependentMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cT,java.util.Set\u003cT\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "valueMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cT,java.lang.Object\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDependency",
      "comment": "Registers a dependency from one property state to another.  If the predecessor is null, then\n the dependent is registered such that a call to #findAffectedDependants(WizardState)\n will include that property key only if its cached value is null.  (i.e. the first time it \n is called.)",
      "javadoc": "Registers a dependency from one property state to another.  If the predecessor is null, then\n the dependent is registered such that a call to {@link #findAffectedDependants(WizardState)}\n will include that property key only if its cached value is null.  (i.e. the first time it \n is called.)\n@param dependent the property key that depends on a previous property being set.\n@param predecessor the property key of the property that affects the dependent property.",
      "static": false,
      "params": [
        {
          "name": "dependent",
          "type_long": "T",
          "type_short": "T",
          "comment": "the property key that depends on a previous property being set."
        },
        {
          "name": "predecessor",
          "type_long": "T",
          "type_short": "T",
          "comment": "the property key of the property that affects the dependent property."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findAffectedDependants",
      "comment": "Returns a set of all property keys that need to have their values set because a predecessor \n property has been changed that may affect the valid values for this property.  Also, any\n property keys that don\u0027t have a value in the local cache will be returned.",
      "javadoc": "Returns a set of all property keys that need to have their values set because a predecessor \n property has been changed that may affect the valid values for this property.  Also, any\n property keys that don\u0027t have a value in the local cache will be returned.\n@param globalState the global WizardState that is passed from one wizard panel to the next.\n@return the set of property keys whose values should be (re)computed.",
      "static": false,
      "params": [
        {
          "name": "globalState",
          "type_long": "docking.wizard.WizardState\u003cT\u003e",
          "type_short": "WizardState",
          "comment": "the global WizardState that is passed from one wizard panel to the next."
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cT\u003e",
        "type_short": "Set",
        "comment": "the set of property keys whose values should be (re)computed."
      },
      "throws": []
    },
    {
      "name": "updatePropertyValues",
      "comment": "Updates the local cache values for all the relevant properties.  This method should be\n called from a wizard panel when the \"next\" action is invoked (i.e. the user values have been\n accepted).",
      "javadoc": "Updates the local cache values for all the relevant properties.  This method should be\n called from a wizard panel when the \"next\" action is invoked (i.e. the user values have been\n accepted).\n@param globalState The WizardState containing all the property values.",
      "static": false,
      "params": [
        {
          "name": "globalState",
          "type_long": "docking.wizard.WizardState\u003cT\u003e",
          "type_short": "WizardState",
          "comment": "The WizardState containing all the property values."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
