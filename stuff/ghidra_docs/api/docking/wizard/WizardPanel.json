{
  "name": "WizardPanel",
  "comment": "Interface to define methods for panels to be shown in the wizard dialog.",
  "javadoc": "Interface to define methods for panels to be shown in the wizard dialog.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getTitle",
      "comment": "Get the title for this panel.",
      "javadoc": "Get the title for this panel.\n@return String title",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String title"
      },
      "throws": []
    },
    {
      "name": "getPanel",
      "comment": "Get the panel object",
      "javadoc": "Get the panel object\n@return JPanel panel",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JPanel",
        "type_short": "JPanel",
        "comment": "JPanel panel"
      },
      "throws": []
    },
    {
      "name": "isValidInformation",
      "comment": "Return true if the user entered valid information for this panel.",
      "javadoc": "Return true if the user entered valid information for this panel.\n@return boolean whether or not the info on the panel valid",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean whether or not the info on the panel valid"
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "Initialize the panel as though this is the first time it is\n being displayed.",
      "javadoc": "Initialize the panel as though this is the first time it is\n being displayed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addWizardPanelListener",
      "comment": "Add a listener to this panel.",
      "javadoc": "Add a listener to this panel.\n@param l listener to add",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "docking.wizard.WizardPanelListener",
          "type_short": "WizardPanelListener",
          "comment": "listener to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeWizardPanelListener",
      "comment": "Remove the listener from this panel.",
      "javadoc": "Remove the listener from this panel.\n@param l listener to remove",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "docking.wizard.WizardPanelListener",
          "type_short": "WizardPanelListener",
          "comment": "listener to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHelpLocation",
      "comment": "Returns the help content location for this panel.",
      "javadoc": "Returns the help content location for this panel.\n@return String help location for this panel; return null if default help\n location should be used.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.HelpLocation",
        "type_short": "HelpLocation",
        "comment": "String help location for this panel; return null if default help\n location should be used."
      },
      "throws": []
    },
    {
      "name": "getDefaultFocusComponent",
      "comment": "Returns the component, if any, that should receive focus when this panel is shown.",
      "javadoc": "Returns the component, if any, that should receive focus when this panel is shown.\n@return the component, if any, that should receive focus when this panel is shown; null\n         if no preferred focus component exists.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": "the component, if any, that should receive focus when this panel is shown; null\n         if no preferred focus component exists."
      },
      "throws": []
    }
  ]
}
