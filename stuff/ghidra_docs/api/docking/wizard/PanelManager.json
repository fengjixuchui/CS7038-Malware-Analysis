{
  "name": "PanelManager",
  "comment": "Interface to define methods that control what panel is displayed in a\n wizard.",
  "javadoc": "Interface to define methods that control what panel is displayed in a\n wizard.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "canFinish",
      "comment": "Return true if the \"finish\" step can be completed.",
      "javadoc": "Return true if the \"finish\" step can be completed.\n@return boolean true if ok to finish",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if ok to finish"
      },
      "throws": []
    },
    {
      "name": "hasNextPanel",
      "comment": "Return true if there is a \"next\" panel.",
      "javadoc": "Return true if there is a \"next\" panel.\n@return boolean true means there is a next panel to display",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true means there is a next panel to display"
      },
      "throws": []
    },
    {
      "name": "hasPreviousPanel",
      "comment": "Return true if there is a \"previous\" panel.",
      "javadoc": "Return true if there is a \"previous\" panel.\n@return boolean true means there is a previous panel to display",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true means there is a previous panel to display"
      },
      "throws": []
    },
    {
      "name": "getNextPanel",
      "comment": "Get the next panel in the process.",
      "javadoc": "Get the next panel in the process.\n@return WizardPanel the next panel\n@throws IllegalPanelStateException if an IOException or other unexpected error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.wizard.WizardPanel",
        "type_short": "WizardPanel",
        "comment": "WizardPanel the next panel"
      },
      "throws": [
        {
          "type_long": "docking.wizard.IllegalPanelStateException",
          "type_short": "IllegalPanelStateException",
          "comment": "if an IOException or other unexpected error occurs"
        }
      ]
    },
    {
      "name": "getInitialPanel",
      "comment": "Get the first panel in the process.",
      "javadoc": "Get the first panel in the process.\n@return WizardPanel the first panel\n@throws IllegalPanelStateException if an IOException or other unexpected error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.wizard.WizardPanel",
        "type_short": "WizardPanel",
        "comment": "WizardPanel the first panel"
      },
      "throws": [
        {
          "type_long": "docking.wizard.IllegalPanelStateException",
          "type_short": "IllegalPanelStateException",
          "comment": "if an IOException or other unexpected error occurs"
        }
      ]
    },
    {
      "name": "getPreviousPanel",
      "comment": "Get the previous panel in the process.",
      "javadoc": "Get the previous panel in the process.\n@return WizardPanel the previous panel\n@throws IllegalPanelStateException if an IOException or other unexpected error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.wizard.WizardPanel",
        "type_short": "WizardPanel",
        "comment": "WizardPanel the previous panel"
      },
      "throws": [
        {
          "type_long": "docking.wizard.IllegalPanelStateException",
          "type_short": "IllegalPanelStateException",
          "comment": "if an IOException or other unexpected error occurs"
        }
      ]
    },
    {
      "name": "getStatusMessage",
      "comment": "Get the status message for the current panel.",
      "javadoc": "Get the status message for the current panel.\n@return String message to display;\n                may be null if there is no message that should be displayed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String message to display;\n                may be null if there is no message that should be displayed"
      },
      "throws": []
    },
    {
      "name": "finish",
      "comment": "Method called when the user wants to finish the process.",
      "javadoc": "Method called when the user wants to finish the process.\n@throws IllegalPanelStateException if an IOException or other unexpected error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "docking.wizard.IllegalPanelStateException",
          "type_short": "IllegalPanelStateException",
          "comment": "if an IOException or other unexpected error occurs"
        }
      ]
    },
    {
      "name": "cancel",
      "comment": "Method called when the user wants to cancel the process.",
      "javadoc": "Method called when the user wants to cancel the process.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "Set up the panel process.   This may also be called to clear the state of an existing panel, \n such as when the overall wizard is finished.",
      "javadoc": "Set up the panel process.   This may also be called to clear the state of an existing panel, \n such as when the overall wizard is finished.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPanelSize",
      "comment": "Get the size of the panels.",
      "javadoc": "Get the size of the panels.\n@return Dimension size of the panel",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Dimension",
        "type_short": "Dimension",
        "comment": "Dimension size of the panel"
      },
      "throws": []
    },
    {
      "name": "setWizardManager",
      "comment": "Set the wizard manager for this panel manager.",
      "javadoc": "Set the wizard manager for this panel manager.\n@param wm wizard manager that calls the methods on this panel \n manager",
      "static": false,
      "params": [
        {
          "name": "wm",
          "type_long": "docking.wizard.WizardManager",
          "type_short": "WizardManager",
          "comment": "wizard manager that calls the methods on this panel \n manager"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWizardManager",
      "comment": "Get the wizard manager.",
      "javadoc": "Get the wizard manager.\n@return WizardManager wizard manager for this panel manager",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.wizard.WizardManager",
        "type_short": "WizardManager",
        "comment": "WizardManager wizard manager for this panel manager"
      },
      "throws": []
    }
  ]
}
