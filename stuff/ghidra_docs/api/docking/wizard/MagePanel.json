{
  "name": "MagePanel",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "docking.wizard.WizardPanel"
  ],
  "fields": [],
  "methods": [
    {
      "name": "addDependencies",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "docking.wizard.WizardState\u003cT\u003e",
          "type_short": "WizardState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPanelDisplayabilityAndUpdateState",
      "comment": "Enter and leave panel for pretend; take your state from the state object and then add\n whatever state you need into it to pretend finish the wizard (if possible).  Return\n whether you must, can, or should not be displayed.",
      "javadoc": "Enter and leave panel for pretend; take your state from the state object and then add\n whatever state you need into it to pretend finish the wizard (if possible).  Return\n whether you must, can, or should not be displayed.\n@param state the state object\n@return displayability",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "docking.wizard.WizardState\u003cT\u003e",
          "type_short": "WizardState",
          "comment": "the state object"
        }
      ],
      "return": {
        "type_long": "docking.wizard.WizardPanelDisplayability",
        "type_short": "WizardPanelDisplayability",
        "comment": "displayability"
      },
      "throws": []
    },
    {
      "name": "enterPanel",
      "comment": "Enter panel for real; take your state from the state object and then\n populate your external state accordingly.",
      "javadoc": "Enter panel for real; take your state from the state object and then\n populate your external state accordingly.\n@param state the state object\n@throws IllegalPanelStateException indicates that something bad has happened and we should\n return to the very first panel - unless we are the first panel in which case we\n should abort the wizard.",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "docking.wizard.WizardState\u003cT\u003e",
          "type_short": "WizardState",
          "comment": "the state object"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "docking.wizard.IllegalPanelStateException",
          "type_short": "IllegalPanelStateException",
          "comment": "indicates that something bad has happened and we should\n return to the very first panel - unless we are the first panel in which case we\n should abort the wizard."
        }
      ]
    },
    {
      "name": "leavePanel",
      "comment": "Leave panel for real; inject your external state into the state object.",
      "javadoc": "Leave panel for real; inject your external state into the state object.\n@param state the state object",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "docking.wizard.WizardState\u003cT\u003e",
          "type_short": "WizardState",
          "comment": "the state object"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateStateObjectWithPanelInfo",
      "comment": "Updates the state object, being passed as a parameter, with the current state information \n from this panel. Only state information that the panel is intended to set should be modified \n within the state object by this method. For example, a summary panel might display state \n information, but doesn\u0027t set it and therefore wouldn\u0027t change it in the state object.",
      "javadoc": "Updates the state object, being passed as a parameter, with the current state information \n from this panel. Only state information that the panel is intended to set should be modified \n within the state object by this method. For example, a summary panel might display state \n information, but doesn\u0027t set it and therefore wouldn\u0027t change it in the state object.\n@param state the state object to update",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "docking.wizard.WizardState\u003cT\u003e",
          "type_short": "WizardState",
          "comment": "the state object to update"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "Called when the wizard is cancelled or otherwise finished being shown",
      "javadoc": "Called when the wizard is cancelled or otherwise finished being shown",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
