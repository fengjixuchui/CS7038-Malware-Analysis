{
  "name": "KeyEntryTextField",
  "comment": "Text field captures key strokes and notifies a listener to process the key entry.",
  "javadoc": "Text field captures key strokes and notifies a listener to process the key entry.",
  "static": false,
  "implements": [],
  "extends": "javax.swing.JTextField",
  "fields": [
    {
      "name": "listener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.KeyEntryListener",
      "type_short": "KeyEntryListener",
      "constant_value": null
    },
    {
      "name": "ksName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "currentKeyStroke",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.KeyStroke",
      "type_short": "KeyStroke",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new entry text field.",
      "javadoc": "Construct a new entry text field.\n@param columns number of columns in the text field\n@param listener listener that is notified when the a key is pressed",
      "static": false,
      "params": [
        {
          "name": "columns",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of columns in the text field"
        },
        {
          "name": "listener",
          "type_long": "docking.KeyEntryListener",
          "type_short": "KeyEntryListener",
          "comment": "listener that is notified when the a key is pressed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKeyStroke",
      "comment": "Get the current key stroke",
      "javadoc": "Get the current key stroke\n@return the key stroke",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.KeyStroke",
        "type_short": "KeyStroke",
        "comment": "the key stroke"
      },
      "throws": []
    },
    {
      "name": "setKeyStroke",
      "comment": "Sets the current key stroke",
      "javadoc": "Sets the current key stroke\n@param ks the new key stroke",
      "static": false,
      "params": [
        {
          "name": "ks",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": "the new key stroke"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseKeyStroke",
      "comment": "Converts the toString() form of the keyStroke, e.g., Ctrl-M is returned as \n \"keyCode CtrlM-P\" and we want it to look like: \"Ctrl-M\"",
      "javadoc": "Converts the toString() form of the keyStroke, e.g., Ctrl-M is returned as \n \"keyCode CtrlM-P\" and we want it to look like: \"Ctrl-M\"\n@param ks the keystroke to parse\n@return the parse string for the keystroke",
      "static": true,
      "params": [
        {
          "name": "ks",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": "the keystroke to parse"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the parse string for the keystroke"
      },
      "throws": []
    },
    {
      "name": "clearField",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processEntry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ks",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
