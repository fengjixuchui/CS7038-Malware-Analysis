{
  "name": "DockingToolActions",
  "comment": "Represents the collection of actions registered with the tool, along with method for adding\n and removing actions.",
  "javadoc": "Represents the collection of actions registered with the tool, along with method for adding\n and removing actions.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "addLocalAction",
      "comment": "Adds the given action that enabled when the given provider is active",
      "javadoc": "Adds the given action that enabled when the given provider is active\n@param provider the provider\n@param action the action",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider"
        },
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "the action"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLocalAction",
      "comment": "Gets the provider action by the given name",
      "javadoc": "Gets the provider action by the given name\n@param provider the provider\n@param actionName the action name\n@return the action",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider"
        },
        {
          "name": "actionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the action name"
        }
      ],
      "return": {
        "type_long": "docking.action.DockingActionIf",
        "type_short": "DockingActionIf",
        "comment": "the action"
      },
      "throws": []
    },
    {
      "name": "removeLocalAction",
      "comment": "Removes the given provider\u0027s local action",
      "javadoc": "Removes the given provider\u0027s local action\n@param provider the provider\n@param action the action",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider"
        },
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "the action"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addGlobalAction",
      "comment": "Adds the given action that is enabled, regardless of the active provider",
      "javadoc": "Adds the given action that is enabled, regardless of the active provider\n@param action the action",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "the action"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeGlobalAction",
      "comment": "Removes the given global action",
      "javadoc": "Removes the given global action\n@param action the action",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "the action"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeActions",
      "comment": "Removes all global actions for the given owner",
      "javadoc": "Removes all global actions for the given owner\n@param owner the owner",
      "static": false,
      "params": [
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the owner"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeActions",
      "comment": "Removes all local actions for the given provider",
      "javadoc": "Removes all local actions for the given provider\n@param provider the provider",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getActions",
      "comment": "Returns all actions with the given owner",
      "javadoc": "Returns all actions with the given owner\n@param owner the owner\n@return the actions",
      "static": false,
      "params": [
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the owner"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cdocking.action.DockingActionIf\u003e",
        "type_short": "Set",
        "comment": "the actions"
      },
      "throws": []
    },
    {
      "name": "getAllActions",
      "comment": "Returns all actions known to the tool",
      "javadoc": "Returns all actions known to the tool\n@return the actions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cdocking.action.DockingActionIf\u003e",
        "type_short": "Set",
        "comment": "the actions"
      },
      "throws": []
    },
    {
      "name": "registerSharedActionPlaceholder",
      "comment": "Allows clients to register an action by using a placeholder.  This is useful when \n an API wishes to have a central object (like a plugin) register actions for transient\n providers, that may not be loaded until needed.\n \n This method may be called multiple times with the same conceptual placeholder--the\n placeholder will only be added once.",
      "javadoc": "Allows clients to register an action by using a placeholder.  This is useful when \n an API wishes to have a central object (like a plugin) register actions for transient\n providers, that may not be loaded until needed.\n \n \u003cp\u003eThis method may be called multiple times with the same conceptual placeholder--the\n placeholder will only be added once.\n@param placeholder the placeholder containing information related to the action it represents",
      "static": false,
      "params": [
        {
          "name": "placeholder",
          "type_long": "docking.actions.SharedDockingActionPlaceholder",
          "type_short": "SharedDockingActionPlaceholder",
          "comment": "the placeholder containing information related to the action it represents"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
