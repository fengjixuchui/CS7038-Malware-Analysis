{
  "name": "SharedDockingActionPlaceholder",
  "comment": "A marker interface to signal that the implementing action serves as an action that should\n not be itself used in the tool, but should only be used to register and manager keybindings.\n \n \n This action is merely a tool by which transient components can ensure that their actions\n are correctly managed when the component is created.  Normal actions will get registered when\n the tool first starts-up.  Alternatively, transient components only appear when called upon\n by some event, such as a user request.  The issue heretofore was that the tool will remove\n any options that are not longer used. Thus, if an action belonging to a transient component\n does not get registered every time the tool is used, then the options (and key bindings) for\n that action are removed from the too.   This interface allows a second-party to register \n an action on behalf of a transient provider, thus preventing the tool from removing any \n previously applied options.",
  "javadoc": "A marker interface to signal that the implementing action serves as an action that should\n not be itself used in the tool, but should only be used to register and manager keybindings.\n \n \n \u003cp\u003eThis action is merely a tool by which transient components can ensure that their actions\n are correctly managed when the component is created.  Normal actions will get registered when\n the tool first starts-up.  Alternatively, transient components only appear when called upon\n by some event, such as a user request.  The issue heretofore was that the tool will remove\n any options that are not longer used. Thus, if an action belonging to a transient component\n does not get registered every time the tool is used, then the options (and key bindings) for\n that action are removed from the too.   This interface allows a second-party to register \n an action on behalf of a transient provider, thus preventing the tool from removing any \n previously applied options.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getName",
      "comment": "The action name.  This name must exactly match the name of the action represented by \n this placeholder.",
      "javadoc": "The action name.  This name must exactly match the name of the action represented by \n this placeholder.\n@return the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "getOwner",
      "comment": "Returns an owner name to use in place of .  \n This should only be used when the client knows for certain that all shared actions are \n shared by a single owner.  This is not typical for shared actions.  This can happen when one\n owner (such as a plugin) has multiple component providers that share action key  bindings.",
      "javadoc": "Returns an owner name to use in place of {@value ToolConstants#SHARED_OWNER}.  \n This should only be used when the client knows for certain that all shared actions are \n shared by a single owner.  This is not typical for shared actions.  This can happen when one\n owner (such as a plugin) has multiple component providers that share action key  bindings.\n@return the owner",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the owner"
      },
      "throws": []
    },
    {
      "name": "getKeyBinding",
      "comment": "The default key binding for the action represented by this placeholder",
      "javadoc": "The default key binding for the action represented by this placeholder\n@return the key binding; may be null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.KeyStroke",
        "type_short": "KeyStroke",
        "comment": "the key binding; may be null"
      },
      "throws": []
    }
  ]
}
