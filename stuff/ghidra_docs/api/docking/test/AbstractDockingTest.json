{
  "name": "AbstractDockingTest",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "generic.test.AbstractGenericTest",
  "fields": [
    {
      "name": "useErrorGUI",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "ERROR_DISPLAY_WRAPPER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "docking.test.TestFailingErrorDisplayWrapper",
      "type_short": "TestFailingErrorDisplayWrapper",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "installNonNativeSystemClipboard",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dockingSetUp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dockingTearDown",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createApplicationLayout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "utility.application.ApplicationLayout",
        "type_short": "ApplicationLayout",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createApplicationConfiguration",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.ApplicationConfiguration",
        "type_short": "ApplicationConfiguration",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForUpdateOnChooser",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "chooser",
          "type_long": "docking.widgets.filechooser.GhidraFileChooser",
          "type_short": "GhidraFileChooser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "pendingUpdate",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "chooser",
          "type_long": "docking.widgets.filechooser.GhidraFileChooser",
          "type_short": "GhidraFileChooser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWindowByTitleContaining",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "parentWindow",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        },
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWindow",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWindowByTitle",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "parentWindow",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForErrorDialog",
      "comment": "Waits for the system error dialog to appear",
      "javadoc": "Waits for the system error dialog to appear\n@return the dialog",
      "static": true,
      "params": [],
      "return": {
        "type_long": "docking.AbstractErrDialog",
        "type_short": "AbstractErrDialog",
        "comment": "the dialog"
      },
      "throws": []
    },
    {
      "name": "waitForInfoDialog",
      "comment": "Waits for the system info dialog to appear",
      "javadoc": "Waits for the system info dialog to appear\n@return the dialog",
      "static": true,
      "params": [],
      "return": {
        "type_long": "docking.widgets.OkDialog",
        "type_short": "OkDialog",
        "comment": "the dialog"
      },
      "throws": []
    },
    {
      "name": "waitForWindow",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "windowClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForWindowByTitleContaining",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForWindow",
      "comment": "Waits for a window with the given name.",
      "javadoc": "Waits for a window with the given name.\n@param title The title of the window for which to search\n@param timeoutMS The timeout after which this method will wait no more\n@return The window, if found, null otherwise.\n@deprecated Instead call one of the methods that does not take a timeout\n             (we are standardizing timeouts).  The timeouts passed to this method will\n             be ignored in favor of the standard value.",
      "static": true,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The title of the window for which to search"
        },
        {
          "name": "timeoutMS",
          "type_long": "int",
          "type_short": "int",
          "comment": "The timeout after which this method will wait no more"
        }
      ],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": "The window, if found, null otherwise."
      },
      "throws": []
    },
    {
      "name": "waitForWindow",
      "comment": "Waits for a window with the given name",
      "javadoc": "Waits for a window with the given name\n@param title The title of the window for which to search\n@return The window, if found, null otherwise.",
      "static": true,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The title of the window for which to search"
        }
      ],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": "The window, if found, null otherwise."
      },
      "throws": []
    },
    {
      "name": "waitForWindowByName",
      "comment": "Waits for a window with the given name.",
      "javadoc": "Waits for a window with the given name.\n@param name The name of the window for which to search\n@return The window, if found, null otherwise",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the window for which to search"
        }
      ],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": "The window, if found, null otherwise"
      },
      "throws": []
    },
    {
      "name": "getMessageText",
      "comment": "Check for and display message component text associated with OptionDialog windows",
      "javadoc": "Check for and display message component text associated with OptionDialog windows\n@param w any window\n@return the message string if one can be found; \u003ccode\u003enull\u003c/code\u003e otherwise",
      "static": true,
      "params": [
        {
          "name": "w",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": "any window"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the message string if one can be found; null otherwise"
      },
      "throws": []
    },
    {
      "name": "getStatusText",
      "comment": "Get the dialog provider\u0027s status text",
      "javadoc": "Get the dialog provider\u0027s status text\n@param provider dialog component provider\n@return status text",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": "dialog component provider"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "status text"
      },
      "throws": []
    },
    {
      "name": "closeSaveChangesDialog",
      "comment": "Will try to close dialogs prompting for changes to be saved, whether from program changes\n or from tool config changes.",
      "javadoc": "Will try to close dialogs prompting for changes to be saved, whether from program changes\n or from tool config changes.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dialog",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "w",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOnlyFrame",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "window",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "closeAllWindows",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "showError",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "closeAllWindowsAndFrames",
      "comment": "A convenience method to close all of the windows and frames that the current Java\n windowing environment knows about",
      "javadoc": "A convenience method to close all of the windows and frames that the current Java\n windowing environment knows about\n@deprecated instead call the new {@link #closeAllWindows()}",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "closeAllWindows",
      "comment": "A convenience method to close all of the windows and frames that the current Java\n windowing environment knows about",
      "javadoc": "A convenience method to close all of the windows and frames that the current Java\n windowing environment knows about",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTitleForWindow",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "window",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDebugTitleForWindow",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "window",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDebugTitleForWindow",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "window",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        },
        {
          "name": "defaultTitle",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForJDialog",
      "comment": "Waits for the JDialog with the given title\n \n Note: Sometimes the task dialog might have the same title as the dialog you pop up and\n you want to get yours instead of the one for the task monitor.",
      "javadoc": "Waits for the JDialog with the given title\n \u003cP\u003e\n Note: Sometimes the task dialog might have the same title as the dialog you pop up and\n you want to get yours instead of the one for the task monitor.\n@param title the title of the dialog\n@return the dialog",
      "static": true,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title of the dialog"
        }
      ],
      "return": {
        "type_long": "javax.swing.JDialog",
        "type_short": "JDialog",
        "comment": "the dialog"
      },
      "throws": []
    },
    {
      "name": "waitForJDialog",
      "comment": "Waits for the JDialog with the indicated title and that is parented to the indicated window\n \n Note: Sometimes the task dialog might have the same title as the dialog you pop up and\n you want to get yours instead of the one for the task monitor.",
      "javadoc": "Waits for the JDialog with the indicated title and that is parented to the indicated window\n \u003cP\u003e\n Note: Sometimes the task dialog might have the same title as the dialog you pop up and\n you want to get yours instead of the one for the task monitor.\n@param window the parent window\n@param title the title of the dialog\n@param timeoutMS Maximum time to wait for the dialog\n@return the dialog\n@deprecated use {@link #waitForJDialog(String)} instead",
      "static": true,
      "params": [
        {
          "name": "window",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": "the parent window"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title of the dialog"
        },
        {
          "name": "timeoutMS",
          "type_long": "int",
          "type_short": "int",
          "comment": "Maximum time to wait for the dialog"
        }
      ],
      "return": {
        "type_long": "javax.swing.JDialog",
        "type_short": "JDialog",
        "comment": "the dialog"
      },
      "throws": []
    },
    {
      "name": "findComponent",
      "comment": "Returns the first Component of the given type inside of the given dialog",
      "javadoc": "Returns the first {@link Component} of the given type inside of the given dialog\n@param provider the dialog\n@param desiredClass the class of the component\n@return the component; null if none was found",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": "the dialog"
        },
        {
          "name": "desiredClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the class of the component"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the component; null if none was found"
      },
      "throws": []
    },
    {
      "name": "waitForDialogComponent",
      "comment": "Returns the DialogComponentProvider with the given title.  This method is\n not preferred, but instead you should use a #waitForDialogComponent(Class)\n that takes a class so that you can get the correct return type.  This method is meant\n for clients that need a dialog, but that type is private of package restricted and thus\n cannot be referenced by a test.   Also, code that relies on a title is more subject to\n breaking when code is refactored; code that relies on class types will get refactored\n along side the referenced code.\n\n This method will fail if no dialog can be found",
      "javadoc": "Returns the {@link DialogComponentProvider} with the given title.  This method is\n not preferred, but instead you should use a {@link #waitForDialogComponent(Class)}\n that takes a class so that you can get the correct return type.  This method is meant\n for clients that need a dialog, but that type is private of package restricted and thus\n cannot be referenced by a test.   Also, code that relies on a title is more subject to\n breaking when code is refactored; code that relies on class types will get refactored\n along side the referenced code.\n\n \u003cP\u003eThis method will fail if no dialog can be found\n@param title the title of the desired dialog\n@return the dialog",
      "static": true,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title of the desired dialog"
        }
      ],
      "return": {
        "type_long": "docking.DialogComponentProvider",
        "type_short": "DialogComponentProvider",
        "comment": "the dialog"
      },
      "throws": []
    },
    {
      "name": "waitForDialogComponent",
      "comment": "Waits for the first window of the given class.",
      "javadoc": "Waits for the first window of the given class.\n@param ghidraClass The class of the dialog the user desires\n@return The first occurrence of a dialog that extends the given \u003ccode\u003eghirdraClass\u003c/code\u003e\n@see #waitForDialogComponent(Window, Class, int)",
      "static": true,
      "params": [
        {
          "name": "ghidraClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "The class of the dialog the user desires"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "The first occurrence of a dialog that extends the given ghirdraClass"
      },
      "throws": []
    },
    {
      "name": "waitForDialogComponent",
      "comment": "Waits for the first window of the given class.  This method assumes that the desired dialog\n is parented by parentWindow.",
      "javadoc": "Waits for the first window of the given class.  This method assumes that the desired dialog\n is parented by \u003ccode\u003eparentWindow\u003c/code\u003e.\n@param parentWindow The parent of the desired dialog; may be null\n@param clazz The class of the dialog the user desires\n@param timeoutMS The max amount of time in milliseconds to wait for the requested dialog\n        to appear.\n@return The first occurrence of a dialog that extends the given \u003ccode\u003eghirdraClass\u003c/code\u003e\n@deprecated Instead call one of the methods that does not take a timeout\n             (we are standardizing timeouts).  The timeouts passed to this method will\n             be ignored in favor of the standard value.",
      "static": true,
      "params": [
        {
          "name": "parentWindow",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": "The parent of the desired dialog; may be null"
        },
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "The class of the dialog the user desires"
        },
        {
          "name": "timeoutMS",
          "type_long": "int",
          "type_short": "int",
          "comment": "The max amount of time in milliseconds to wait for the requested dialog\n        to appear."
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "The first occurrence of a dialog that extends the given ghirdraClass"
      },
      "throws": []
    },
    {
      "name": "getDialogComponent",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "parentWindow",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        },
        {
          "name": "ghidraClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDialogComponent",
      "comment": "Gets a dialog component provider of the given type",
      "javadoc": "Gets a dialog component provider of the given type\n@param ghidraClass the class of the desired {@link DialogComponentProvider}.\n@return the dialog or null if it cannot be found",
      "static": true,
      "params": [
        {
          "name": "ghidraClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the class of the desired DialogComponentProvider."
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the dialog or null if it cannot be found"
      },
      "throws": []
    },
    {
      "name": "getDialogComponentProvider",
      "comment": "Gets the dialog component provider that is inside the given window or null if a\n provider of the given class type is not in the window.",
      "javadoc": "Gets the dialog component provider \u003cb\u003ethat is inside the given window\u003c/b\u003e or null if a\n provider of the given class type is not in the window.\n@param window the window that contains the desired provider.\n@param ghidraClass the class of the desired provider\n@return the desired provider or null if the window does not contain a provider of the given type.",
      "static": true,
      "params": [
        {
          "name": "window",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": "the window that contains the desired provider."
        },
        {
          "name": "ghidraClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the class of the desired provider"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the desired provider or null if the window does not contain a provider of the given type."
      },
      "throws": []
    },
    {
      "name": "getComponentProvider",
      "comment": "Searches for the first occurrence of a ComponentProvider that is an instance of\n the given providerClass.",
      "javadoc": "Searches for the first occurrence of a {@link ComponentProvider} that is an instance of\n the given \u003ccode\u003eproviderClass\u003c/code\u003e.\n@param clazz The class of the ComponentProvider to locate\n@return The component provider, or null if one cannot be found",
      "static": true,
      "params": [
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "The class of the ComponentProvider to locate"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "The component provider, or null if one cannot be found"
      },
      "throws": []
    },
    {
      "name": "getComponentProvider",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "windowManager",
          "type_long": "docking.DockingWindowManager",
          "type_short": "DockingWindowManager",
          "comment": ""
        },
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForComponentProvider",
      "comment": "Searches for the first occurrence of a ComponentProvider that is an instance of\n the given providerClass.  This method will repeat the search every\n #DEFAULT_WAIT_DELAY milliseconds\n until the provider is found, or the maximum number of searches has been reached, where\n maximum number of searches \u003d MaxTimeMS / #DEFAULT_WAIT_DELAY ",
      "javadoc": "Searches for the first occurrence of a {@link ComponentProvider} that is an instance of\n the given \u003ccode\u003eproviderClass\u003c/code\u003e.  This method will repeat the search every\n {@link #DEFAULT_WAIT_DELAY} milliseconds\n until the provider is found, or the maximum number of searches has been reached, where\n \u003ccode\u003emaximum number of searches \u003d MaxTimeMS / {@link #DEFAULT_WAIT_DELAY} \u003c/code\u003e\n@param clazz The class of the ComponentProvider to locate\n@return The component provider, or null if one cannot be found",
      "static": true,
      "params": [
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "The class of the ComponentProvider to locate"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "The component provider, or null if one cannot be found"
      },
      "throws": []
    },
    {
      "name": "waitForComponentProvider",
      "comment": "Allows you to find a component provider with the given title.  Most plugins will\n only ever have a single provider.   In those cases, use \n #waitForComponentProvider(Class).  This version of that method is to allow you to\n differentiate between multiple instances of a given provider that have different titles.",
      "javadoc": "Allows you to find a component provider \u003cb\u003ewith the given title\u003c/b\u003e.  Most plugins will\n only ever have a single provider.   In those cases, use \n {@link #waitForComponentProvider(Class)}.  This version of that method is to allow you to\n differentiate between multiple instances of a given provider that have different titles.\n@param clazz The class of the ComponentProvider to locate\n@param title the title of the component provider\n@return The component provider, or null if one cannot be found",
      "static": true,
      "params": [
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "The class of the ComponentProvider to locate"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title of the component provider"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "The component provider, or null if one cannot be found"
      },
      "throws": []
    },
    {
      "name": "findActiveDockingWindowManager",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "docking.DockingWindowManager",
        "type_short": "DockingWindowManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doWaitForComponentProvider",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "windowManager",
          "type_long": "docking.DockingWindowManager",
          "type_short": "DockingWindowManager",
          "comment": ""
        },
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doWaitForComponentProvider",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "windowManager",
          "type_long": "docking.DockingWindowManager",
          "type_short": "DockingWindowManager",
          "comment": ""
        },
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDetachedWindowProvider",
      "comment": "These providers are those that appear in dialogs outside of the main frame",
      "javadoc": "These providers are those that appear in dialogs outside of the main frame",
      "static": true,
      "params": [
        {
          "name": "providerClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "windowManager",
          "type_long": "docking.DockingWindowManager",
          "type_short": "DockingWindowManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponentProviderFromNode",
      "comment": "A recursive method to get the first encountered ComponentProvider instance of the give\n component provider class.\n \n Note: this method assumes the given node is not a RootNode, but a child thereof",
      "javadoc": "A recursive method to get the first encountered ComponentProvider instance of the give\n component provider class.\n \u003cp\u003e\n Note: this method assumes the given node is not a RootNode, but a child thereof\n@param node The \u003ccode\u003eNode\u003c/code\u003e instance that contains the desired \u003ccode\u003eComponentProvider\u003c/code\u003e\n        or other nodes.\n@param providerClass The \u003ccode\u003eComponentProvider\u003c/code\u003e class for which to search.",
      "static": true,
      "params": [
        {
          "name": "node",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The Node instance that contains the desired ComponentProvider\n        or other nodes."
        },
        {
          "name": "providerClass",
          "type_long": "java.lang.Class\u003c? extends docking.ComponentProvider\u003e",
          "type_short": "Class",
          "comment": "The ComponentProvider class for which to search."
        }
      ],
      "return": {
        "type_long": "docking.ComponentProvider",
        "type_short": "ComponentProvider",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForComponentProvider",
      "comment": "Searches for the first occurrence of a ComponentProvider that is an instance of\n the given providerClass.  This method will repeat the search every\n #DEFAULT_WAIT_DELAY milliseconds\n until the provider is found, or the maximum number of searches has been reached, where\n maximum number of searches \u003d MaxTimeMS / #DEFAULT_WAIT_DELAY ",
      "javadoc": "Searches for the first occurrence of a {@link ComponentProvider} that is an instance of\n the given \u003ccode\u003eproviderClass\u003c/code\u003e.  This method will repeat the search every\n {@link #DEFAULT_WAIT_DELAY} milliseconds\n until the provider is found, or the maximum number of searches has been reached, where\n \u003ccode\u003emaximum number of searches \u003d MaxTimeMS / {@link #DEFAULT_WAIT_DELAY} \u003c/code\u003e\n@param parentWindow The window that will become the parent window of the provider (this is\n        typically the tool\u0027s frame).\n@param providerClass The class of the ComponentProvider to locate.\n@param maxTimeMS The maximum amount of time to wait.  This is an approximation (see above).\n@return The component provider, or null if one cannot be found\n@deprecated Instead call one of the methods that does not take a timeout\n             (we are standardizing timeouts).  The timeouts passed to this method will\n             be ignored in favor of the standard value.",
      "static": true,
      "params": [
        {
          "name": "parentWindow",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": "The window that will become the parent window of the provider (this is\n        typically the tool\u0027s frame)."
        },
        {
          "name": "providerClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "The class of the ComponentProvider to locate."
        },
        {
          "name": "maxTimeMS",
          "type_long": "int",
          "type_short": "int",
          "comment": "The maximum amount of time to wait.  This is an approximation (see above)."
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "The component provider, or null if one cannot be found"
      },
      "throws": []
    },
    {
      "name": "getWindows",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "parentWindow",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cjava.awt.Window\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findWindows",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "win",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        },
        {
          "name": "windowSet",
          "type_long": "java.util.Set\u003cjava.awt.Window\u003e",
          "type_short": "Set",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "pressButtonByText",
      "comment": "Finds the button with the indicated TEXT that is a sub-component\n of the indicated container, and then programmatically presses\n the button.\n The following is a sample JUnit test use:\n \n \tenv.showTool();\n \tOptionDialog dialog \u003d (OptionDialog)env.waitForDialog(OptionDialog.class, 1000);\n \tassertNotNull(dialog);\n \tpressButtonByText(dialog, \"OK\");\n ",
      "javadoc": "Finds the button with the indicated TEXT that is a sub-component\n of the indicated container, and then programmatically presses\n the button.\n \u003cBR\u003eThe following is a sample JUnit test use:\n \u003cPRE\u003e\n \tenv.showTool();\n \tOptionDialog dialog \u003d (OptionDialog)env.waitForDialog(OptionDialog.class, 1000);\n \tassertNotNull(dialog);\n \tpressButtonByText(dialog, \"OK\");\n \u003c/PRE\u003e\n@param provider the DialogComponentProvider containing the button.\n@param buttonText the text on the desired JButton.",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": "the DialogComponentProvider containing the button."
        },
        {
          "name": "buttonText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text on the desired JButton."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "pressButtonByText",
      "comment": "Finds the button with the indicated TEXT that is a sub-component\n of the indicated container, and then programmatically presses\n the button.",
      "javadoc": "Finds the button with the indicated TEXT that is a sub-component\n of the indicated container, and then programmatically presses\n the button.\n@param provider the DialogComponentProvider containing the button.\n@param buttonText the text on the desired JButton.\n@param waitForCompletion if true wait for action to complete before returning,\n otherwise schedule action to be performed and return immediately.",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": "the DialogComponentProvider containing the button."
        },
        {
          "name": "buttonText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text on the desired JButton."
        },
        {
          "name": "waitForCompletion",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true wait for action to complete before returning,\n otherwise schedule action to be performed and return immediately."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToggleButtonSelected",
      "comment": "Finds the toggle button with the given name inside of the given container and then\n ensures that the selected state of the button matches selected.\n \n Note: this works for any instanceof JToggleButton, such as:\n \n \tJCheckBox\n  JRadioButton\n \n as well as EmptyBorderToggleButtons.",
      "javadoc": "Finds the toggle button with the given name inside of the given container and then\n ensures that the selected state of the button matches \u003ccode\u003eselected\u003c/code\u003e.\n \u003cp\u003e\n Note: this works for any instanceof {@link JToggleButton}, such as:\n \u003cul\u003e\n \t\u003cli\u003e{@link JCheckBox}\u003c/li\u003e\n  \u003cli\u003e{@link JRadioButton}\u003c/li\u003e\n \u003c/ul\u003e\n as well as {@link EmptyBorderToggleButton}s.\n@param container a container that has the desired button as a descendant\n@param buttonName the name of the button (you must set this on the button when it is\n                   constructed; if there is no button with the given name found, then this\n                   method will search for a button with the given text\n@param selected true to toggle the button to selected; false for de-selected",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": "a container that has the desired button as a descendant"
        },
        {
          "name": "buttonName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the button (you must set this on the button when it is\n                   constructed; if there is no button with the given name found, then this\n                   method will search for a button with the given text"
        },
        {
          "name": "selected",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to toggle the button to selected; false for de-selected"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToggleButtonSelected",
      "comment": "Ensures that the selected state of the button matches selected.\n \n Note: this works for most toggle button implementations which are derived from\n AbstractButton and relay on AbstractButton#isSelected() and\n AbstractButton#doClick() for toggling, such as:\n \n \tJCheckBox\n  JRadioButton\n  EmptyBorderToggleButton\n ",
      "javadoc": "Ensures that the selected state of the button matches \u003ccode\u003eselected\u003c/code\u003e.\n \u003cp\u003e\n Note: this works for most toggle button implementations which are derived from\n AbstractButton and relay on {@link AbstractButton#isSelected()} and\n {@link AbstractButton#doClick()} for toggling, such as:\n \u003cul\u003e\n \t\u003cli\u003e{@link JCheckBox}\u003c/li\u003e\n  \u003cli\u003e{@link JRadioButton}\u003c/li\u003e\n  \u003cli\u003e{@link EmptyBorderToggleButton}\u003c/li\u003e\n \u003c/ul\u003e\n@param button the button to select\n@param selected true to toggle the button to selected; false for de-selected",
      "static": true,
      "params": [
        {
          "name": "button",
          "type_long": "javax.swing.AbstractButton",
          "type_short": "AbstractButton",
          "comment": "the button to select"
        },
        {
          "name": "selected",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to toggle the button to selected; false for de-selected"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertToggleButtonSelected",
      "comment": "Checks the selected state of a JToggleButton in a thread safe way.",
      "javadoc": "Checks the selected state of a JToggleButton in a thread safe way.\n@param button the toggle button for which to check the selected state.\n@param selected the expected state of the toggle button.",
      "static": true,
      "params": [
        {
          "name": "button",
          "type_long": "javax.swing.JToggleButton",
          "type_short": "JToggleButton",
          "comment": "the toggle button for which to check the selected state."
        },
        {
          "name": "selected",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "the expected state of the toggle button."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertEnabled",
      "comment": "Checks the enablement state of a JComponent in a thread safe way.",
      "javadoc": "Checks the enablement state of a JComponent in a thread safe way.\n@param component the component for which to check the enablement state.\n@param enabled the expected enablement state for the component.",
      "static": true,
      "params": [
        {
          "name": "component",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": "the component for which to check the enablement state."
        },
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "the expected enablement state for the component."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getActionsByName",
      "comment": "A helper method to find all actions with the given name",
      "javadoc": "A helper method to find all actions with the given name\n@param tool the tool containing all system actions\n@param name the name to match\n@return the matching actions; empty list if no matches",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "docking.Tool",
          "type_short": "Tool",
          "comment": "the tool containing all system actions"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name to match"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cdocking.action.DockingActionIf\u003e",
        "type_short": "Set",
        "comment": "the matching actions; empty list if no matches"
      },
      "throws": []
    },
    {
      "name": "getActionsByOwner",
      "comment": "A helper method to find all actions with the given owner\u0027s name (this will not include\n reserved system actions)",
      "javadoc": "A helper method to find all actions with the given owner\u0027s name (this will not include\n reserved system actions)\n@param tool the tool containing all system actions\n@param name the owner\u0027s name to match\n@return the matching actions; empty list if no matches",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "docking.Tool",
          "type_short": "Tool",
          "comment": "the tool containing all system actions"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the owner\u0027s name to match"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cdocking.action.DockingActionIf\u003e",
        "type_short": "Set",
        "comment": "the matching actions; empty list if no matches"
      },
      "throws": []
    },
    {
      "name": "getActionsByOwnerAndName",
      "comment": "A helper method to find all actions by name, with the given owner\u0027s name (this will not \n include reserved system actions)",
      "javadoc": "A helper method to find all actions by name, with the given owner\u0027s name (this will not \n include reserved system actions)\n@param tool the tool containing all system actions\n@param owner the owner\u0027s name\n@param name the owner\u0027s name to match\n@return the matching actions; empty list if no matches",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "docking.Tool",
          "type_short": "Tool",
          "comment": "the tool containing all system actions"
        },
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the owner\u0027s name"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the owner\u0027s name to match"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cdocking.action.DockingActionIf\u003e",
        "type_short": "Set",
        "comment": "the matching actions; empty list if no matches"
      },
      "throws": []
    },
    {
      "name": "getAction",
      "comment": "Finds the singular tool action by the given name.  If more than one action exists with\n that name, then an exception is thrown.  If you want more than one matching action,\n the call #getActionsByName(Tool, String) instead.\n\n Note: more specific test case subclasses provide other methods for finding actions\n when you have an owner name (which is usually the plugin name).",
      "javadoc": "Finds the singular tool action by the given name.  If more than one action exists with\n that name, then an exception is thrown.  If you want more than one matching action,\n the call {@link #getActionsByName(Tool, String)} instead.\n\n \u003cP\u003eNote: more specific test case subclasses provide other methods for finding actions\n when you have an owner name (which is usually the plugin name).\n@param tool the tool containing all system actions\n@param name the name to match\n@return the matching action; null if no matching action can be found",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "docking.Tool",
          "type_short": "Tool",
          "comment": "the tool containing all system actions"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name to match"
        }
      ],
      "return": {
        "type_long": "docking.action.DockingActionIf",
        "type_short": "DockingActionIf",
        "comment": "the matching action; null if no matching action can be found"
      },
      "throws": []
    },
    {
      "name": "getAction",
      "comment": "Finds the action by the given owner name and action name.  \n If you do not know the owner name, then use  \n the call #getActionsByName(Tool, String) instead  (this will not include\n reserved system actions).\n \n Note: more specific test case subclasses provide other methods for finding actions \n when you have an owner name (which is usually the plugin name).",
      "javadoc": "Finds the action by the given owner name and action name.  \n If you do not know the owner name, then use  \n the call {@link #getActionsByName(Tool, String)} instead  (this will not include\n reserved system actions).\n \n \u003cP\u003eNote: more specific test case subclasses provide other methods for finding actions \n when you have an owner name (which is usually the plugin name).\n@param tool the tool containing all system actions\n@param owner the owner of the action\n@param name the name to match\n@return the matching action; null if no matching action can be found",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "docking.Tool",
          "type_short": "Tool",
          "comment": "the tool containing all system actions"
        },
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the owner of the action"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name to match"
        }
      ],
      "return": {
        "type_long": "docking.action.DockingActionIf",
        "type_short": "DockingActionIf",
        "comment": "the matching action; null if no matching action can be found"
      },
      "throws": []
    },
    {
      "name": "getLocalAction",
      "comment": "Returns the action by the given name that belongs to the given provider",
      "javadoc": "Returns the action by the given name that belongs to the given provider\n@param provider the provider\n@param actionName the action name\n@return the action",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider"
        },
        {
          "name": "actionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the action name"
        }
      ],
      "return": {
        "type_long": "docking.action.DockingActionIf",
        "type_short": "DockingActionIf",
        "comment": "the action"
      },
      "throws": []
    },
    {
      "name": "getAction",
      "comment": "Returns the given dialog\u0027s action that has the given name",
      "javadoc": "Returns the given dialog\u0027s action that has the given name\n@param provider the dialog provider\n@param actionName the name of the action\n@return the action",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": "the dialog provider"
        },
        {
          "name": "actionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the action"
        }
      ],
      "return": {
        "type_long": "docking.action.DockingActionIf",
        "type_short": "DockingActionIf",
        "comment": "the action"
      },
      "throws": []
    },
    {
      "name": "performAction",
      "comment": "Performs the specified action within the Swing Thread.  This method will block until the\n action completes.  Do not use this method if the given actions triggers a modal\n dialog.  Instead, call #performAction(DockingActionIf, boolean) with a false\n value.\n\n If the action results in a modal dialog, then call\n #performAction(DockingActionIf, boolean) with a value of false.",
      "javadoc": "Performs the specified action within the Swing Thread.  This method will block until the\n action completes.  Do not use this method if the given actions triggers a modal\n dialog.  Instead, call {@link #performAction(DockingActionIf, boolean)} with a false\n value.\n\n \u003cP\u003eIf the action results in a modal dialog, then call\n {@link #performAction(DockingActionIf, boolean)} with a value of false.\n@param action action to be performed (event will be null)",
      "static": true,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "action to be performed (event will be null)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "performAction",
      "comment": "Performs the specified action within the Swing Thread.  If the action results\n in a modal dialog, waitForCompletion must be false.",
      "javadoc": "Performs the specified action within the Swing Thread.  If the action results\n in a modal dialog, waitForCompletion must be false.\n@param action action to be performed\n@param waitForCompletion if true wait for action to complete before returning,\n otherwise schedule action to be performed and return immediately.",
      "static": true,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "action to be performed"
        },
        {
          "name": "waitForCompletion",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true wait for action to complete before returning,\n otherwise schedule action to be performed and return immediately."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doPerformAction",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": ""
        },
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": ""
        },
        {
          "name": "waitForCompletion",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "performAction",
      "comment": "Performs the specified action with context within the Swing Thread.  If the action results\n in a modal dialog, waitForCompletion must be false.",
      "javadoc": "Performs the specified action with context within the Swing Thread.  If the action results\n in a modal dialog, waitForCompletion must be false.\n@param action action to be performed\n@param provider the component provider from which to get action context; if null,\n        then an empty context will used\n@param wait if true wait for action to complete before returning,\n \t\totherwise schedule action to be performed and return immediately.",
      "static": true,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "action to be performed"
        },
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the component provider from which to get action context; if null,\n        then an empty context will used"
        },
        {
          "name": "wait",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true wait for action to complete before returning,\n \t\totherwise schedule action to be performed and return immediately."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "performDialogAction",
      "comment": "Performs the specified action with context within the Swing Thread.  If the action results\n in a modal dialog, waitForCompletion must be false.",
      "javadoc": "Performs the specified action with context within the Swing Thread.  If the action results\n in a modal dialog, waitForCompletion must be false.\n@param action action to be performed\n@param provider the component provider from which to get action context\n@param wait if true wait for action to complete before returning,\n        otherwise schedule action to be performed and return immediately.",
      "static": true,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "action to be performed"
        },
        {
          "name": "provider",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": "the component provider from which to get action context"
        },
        {
          "name": "wait",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true wait for action to complete before returning,\n        otherwise schedule action to be performed and return immediately."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "performAction",
      "comment": "Performs the specified action with context within the Swing Thread.  If the action results\n in a modal dialog, waitForCompletion must be false.",
      "javadoc": "Performs the specified action with context within the Swing Thread.  If the action results\n in a modal dialog, waitForCompletion must be false.\n@param action action to be performed\n@param context the context to use with the action\n@param wait if true wait for action to complete before returning,\n        otherwise schedule action to be performed and return immediately.",
      "static": true,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "action to be performed"
        },
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": "the context to use with the action"
        },
        {
          "name": "wait",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true wait for action to complete before returning,\n        otherwise schedule action to be performed and return immediately."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToggleActionSelected",
      "comment": "Ensures the given toggle action is in the given selected state.  If it is not, then the\n action will be performed.  This call will wait for the action to finish.",
      "javadoc": "Ensures the given toggle action is in the given selected state.  If it is not, then the\n action will be performed.  This call will wait for the action to finish.\n@param toggleAction the action\n@param context the context for the action\n@param selected true if the action is be be selected; false for not selected",
      "static": true,
      "params": [
        {
          "name": "toggleAction",
          "type_long": "docking.action.ToggleDockingActionIf",
          "type_short": "ToggleDockingActionIf",
          "comment": "the action"
        },
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": "the context for the action"
        },
        {
          "name": "selected",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the action is be be selected; false for not selected"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToggleActionSelected",
      "comment": "Ensures the given toggle action is in the given selected state.  If it is not, then the\n action will be performed.  This call will wait for the action to finish.",
      "javadoc": "Ensures the given toggle action is in the given selected state.  If it is not, then the\n action will be performed.  This call will wait for the action to finish.\n@param toggleAction the action\n@param context the context for the action\n@param selected true if the action is be be selected; false for not selected\n@param wait true to wait for the action to finish; false to invoke later",
      "static": true,
      "params": [
        {
          "name": "toggleAction",
          "type_long": "docking.action.ToggleDockingActionIf",
          "type_short": "ToggleDockingActionIf",
          "comment": "the action"
        },
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": "the context for the action"
        },
        {
          "name": "selected",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the action is be be selected; false for not selected"
        },
        {
          "name": "wait",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to wait for the action to finish; false to invoke later"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findComponentByName",
      "comment": "Searches the component and subcomponents of the indicated provider and returns the\n component with the specified name.",
      "javadoc": "Searches the component and subcomponents of the indicated provider and returns the\n component with the specified name.\n@param provider the provider of the component to search\n@param componentName the name of the desired component\n@return the component, or null if not found",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": "the provider of the component to search"
        },
        {
          "name": "componentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the desired component"
        }
      ],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": "the component, or null if not found"
      },
      "throws": []
    },
    {
      "name": "findButtonByText",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": ""
        },
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.JButton",
        "type_short": "JButton",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findButtonByIcon",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": ""
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.JButton",
        "type_short": "JButton",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findButtonByActionName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.JButton",
        "type_short": "JButton",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "triggerActionKey",
      "comment": "Simulates a user typing a single key.\n\n This method should used for the special keyboard keys\n (ARROW, F1, END, etc) and alpha keys when associated with actions.",
      "javadoc": "Simulates a user typing a single key.\n\n This method should used for the special keyboard keys\n (ARROW, F1, END, etc) and alpha keys when associated with actions.\n@param c the component that should be the receiver of the key event; the event source\n@param modifiers the modifier keys down during event (shift, ctrl, alt, meta)\n                  Either extended _DOWN_MASK or old _MASK modifiers\n                  should be used, but both models should not be mixed\n                  in one event. Use of the extended modifiers is\n                  preferred.\n@param keyCode the integer code for an actual key.",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component that should be the receiver of the key event; the event source"
        },
        {
          "name": "modifiers",
          "type_long": "int",
          "type_short": "int",
          "comment": "the modifier keys down during event (shift, ctrl, alt, meta)\n                  Either extended _DOWN_MASK or old _MASK modifiers\n                  should be used, but both models should not be mixed\n                  in one event. Use of the extended modifiers is\n                  preferred."
        },
        {
          "name": "keyCode",
          "type_long": "int",
          "type_short": "int",
          "comment": "the integer code for an actual key."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "forceTextComponentFocus",
      "comment": "Really unusual method to call non-public libraries to force the text components to\n focus on what we want and not what Java thinks the focus should be.",
      "javadoc": "Really unusual method to call non-public libraries to force the text components to\n focus on what we want and not what Java thinks the focus should be.\n@param tc the text component",
      "static": true,
      "params": [
        {
          "name": "tc",
          "type_long": "javax.swing.text.JTextComponent",
          "type_short": "JTextComponent",
          "comment": "the text component"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "triggerActionKey",
      "comment": "Simulates a user initiated keystroke using the keybinding of the given action",
      "javadoc": "Simulates a user initiated keystroke using the keybinding of the given action\n@param destination the component for the action being executed\n@param action The action to simulate pressing",
      "static": true,
      "params": [
        {
          "name": "destination",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component for the action being executed"
        },
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "The action to simulate pressing"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "triggerEscapeKey",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "triggerBackspaceKey",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "triggerEnter",
      "comment": "Simulates the user pressing the \u0027Enter\u0027 key on the given text field",
      "javadoc": "Simulates the user pressing the \u0027Enter\u0027 key on the given text field\n@param c the component",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "triggerFocusGained",
      "comment": "Simulates a focus event on the given component",
      "javadoc": "Simulates a focus event on the given component\n@param component the component upon which to trigger focus",
      "static": true,
      "params": [
        {
          "name": "component",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component upon which to trigger focus"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "triggerText",
      "comment": "Types the indicated string using the\n #triggerKey(Component, int, int, char) method.\n\n This method should be used when typing into\n text components. For example, JTextFields and JTextAreas.\n All three events are fired, KEY_PRESSED, KEY_TYPED, and KEY_RELEASED.\n\n Note: Handles the following characters:\n \n ABCDEFGHIJKLMNOPQRSTUVWXYZ\n abcdefghijklmnopqrstuvwxyz\n `1234567890-\u003d[]\\;\u0027,./\n \n \n It also handles \u0027\\n\u0027, \u0027\\t\u0027, and \u0027\\b\u0027.",
      "javadoc": "Types the indicated string using the\n {@link #triggerKey(Component, int, int, char)} method.\n\n This method should be used when typing into\n text components. For example, JTextFields and JTextAreas.\n All three events are fired, KEY_PRESSED, KEY_TYPED, and KEY_RELEASED.\n\n \u003cbr\u003eNote: Handles the following characters:\n \u003cbr\u003e\n \u003cbr\u003eABCDEFGHIJKLMNOPQRSTUVWXYZ\n \u003cbr\u003eabcdefghijklmnopqrstuvwxyz\n \u003cbr\u003e`1234567890-\u003d[]\\;\u0027,./\n \u003cbr\u003e{@literal ~!@#$%^\u0026*()_+{}|:\"\u003c\u003e?}\n \u003cbr\u003e\n \u003cbr\u003eIt also handles \u0027\\n\u0027, \u0027\\t\u0027, and \u0027\\b\u0027.\n@param destination the component to receive the events\n@param string the string to be typed.",
      "static": true,
      "params": [
        {
          "name": "destination",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to receive the events"
        },
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to be typed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "triggerText",
      "comment": "Types the indicated string using the\n #triggerKey(Component, int, int, char) method.\n\n This method should be used when typing into\n text components. For example, JTextFields and JTextAreas.\n All three events are fired, KEY_PRESSED, KEY_TYPED, and KEY_RELEASED.\n\n Note: Handles the following characters:\n \n ABCDEFGHIJKLMNOPQRSTUVWXYZ\n abcdefghijklmnopqrstuvwxyz\n `1234567890-\u003d[]\\;\u0027,./\n \n \n It also handles \u0027\\n\u0027, \u0027\\t\u0027, and \u0027\\b\u0027.",
      "javadoc": "Types the indicated string using the\n {@link #triggerKey(Component, int, int, char)} method.\n\n This method should be used when typing into\n text components. For example, JTextFields and JTextAreas.\n All three events are fired, KEY_PRESSED, KEY_TYPED, and KEY_RELEASED.\n\n \u003cbr\u003eNote: Handles the following characters:\n \u003cbr\u003e\n \u003cbr\u003eABCDEFGHIJKLMNOPQRSTUVWXYZ\n \u003cbr\u003eabcdefghijklmnopqrstuvwxyz\n \u003cbr\u003e`1234567890-\u003d[]\\;\u0027,./\n \u003cbr\u003e{@literal ~!@#$%^\u0026*()_+{}|:\"\u003c\u003e?}\n \u003cbr\u003e\n \u003cbr\u003eIt also handles \u0027\\n\u0027, \u0027\\t\u0027, and \u0027\\b\u0027.\n@param destination the component to receive the events\n@param string the string to be typed.\n@param consumer the consumer of the text to be generated",
      "static": true,
      "params": [
        {
          "name": "destination",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to receive the events"
        },
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to be typed."
        },
        {
          "name": "consumer",
          "type_long": "java.util.function.BiConsumer\u003cjava.awt.Component,java.awt.event.KeyEvent\u003e",
          "type_short": "BiConsumer",
          "comment": "the consumer of the text to be generated"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "triggerKey",
      "comment": "Fires a KeyListener#keyPressed(KeyEvent), \n KeyListener#keyTyped(KeyEvent)\n and KeyListener#keyReleased(KeyEvent) for the given key stroke",
      "javadoc": "Fires a {@link KeyListener#keyPressed(KeyEvent)}, \n {@link KeyListener#keyTyped(KeyEvent)}\n and {@link KeyListener#keyReleased(KeyEvent)} for the given key stroke\n@param c the destination component\n@param ks the key stroke",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the destination component"
        },
        {
          "name": "ks",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": "the key stroke"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "triggerKey",
      "comment": "Fires a KeyListener#keyPressed(KeyEvent), KeyListener#keyTyped(KeyEvent)\n and KeyListener#keyReleased(KeyEvent) for the given key code and char.\n\n If the key you need is not a character, but is an action, pass\n KeyEvent#CHAR_UNDEFINED for the keyChar parameter.",
      "javadoc": "Fires a {@link KeyListener#keyPressed(KeyEvent)}, {@link KeyListener#keyTyped(KeyEvent)}\n and {@link KeyListener#keyReleased(KeyEvent)} for the given key code and char.\n\n \u003cP\u003eIf the key you need is not a character, but is an action, pass\n {@link KeyEvent#CHAR_UNDEFINED} for the \u003cCODE\u003ekeyChar\u003c/CODE\u003e parameter.\n@param c the destination component\n@param modifiers any modifiers, like Control\n@param keyCode the key code (see {@link KeyEvent}\u0027s VK_xyz values)\n@param keyChar the key char or {@link KeyEvent#CHAR_UNDEFINED}",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the destination component"
        },
        {
          "name": "modifiers",
          "type_long": "int",
          "type_short": "int",
          "comment": "any modifiers, like Control"
        },
        {
          "name": "keyCode",
          "type_long": "int",
          "type_short": "int",
          "comment": "the key code (see KeyEvent\u0027s VK_xyz values)"
        },
        {
          "name": "keyChar",
          "type_long": "char",
          "type_short": "char",
          "comment": "the key char or KeyEvent#CHAR_UNDEFINED"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "triggerKey",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        },
        {
          "name": "modifiers",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "keyCode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "keyChar",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        },
        {
          "name": "consumer",
          "type_long": "java.util.function.BiConsumer\u003cjava.awt.Component,java.awt.event.KeyEvent\u003e",
          "type_short": "BiConsumer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processEvent",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        },
        {
          "name": "e",
          "type_long": "java.awt.event.KeyEvent",
          "type_short": "KeyEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispatchKeyEventDirectlyToComponent",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        },
        {
          "name": "e",
          "type_long": "java.awt.event.KeyEvent",
          "type_short": "KeyEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getClipboardText",
      "comment": "Gets any current text on the clipboard",
      "javadoc": "Gets any current text on the clipboard\n@return the text on the clipboard; null if no text is on the clipboard\n@throws Exception if there are any issues copying from the clipboard",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the text on the clipboard; null if no text is on the clipboard"
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if there are any issues copying from the clipboard"
        }
      ]
    },
    {
      "name": "isUseErrorGUI",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setErrorGUIEnabled",
      "comment": "By default Ghidra will use a modal error dialog to display errors when running tests.  This\n method should be used to disable this feature, as opposed to calling:\n \n      Err.setErrorDisplay( new ConsoleErrorDisplay() );\n ",
      "javadoc": "By default Ghidra will use a modal error dialog to display errors when running tests.  This\n method should be used to disable this feature, as opposed to calling:\n \u003cpre\u003e\n      Err.setErrorDisplay( new ConsoleErrorDisplay() );\n \u003c/pre\u003e\n@param enable true to use the GUI; false to use the error console",
      "static": true,
      "params": [
        {
          "name": "enable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to use the GUI; false to use the error console"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disposeErrorGUI",
      "comment": "Turns off the gui displays for errors.  This does not change the \"isUseErrorGUI()\" value for\n other tests in the TestCase.",
      "javadoc": "Turns off the gui displays for errors.  This does not change the \"isUseErrorGUI()\" value for\n other tests in the TestCase.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showProvider",
      "comment": "Shows the provider by the given name.",
      "javadoc": "Shows the provider by the given name.\n@param tool the tool in which the provider lives\n@param name the name of the provider to show\n@return the newly shown provider",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "docking.Tool",
          "type_short": "Tool",
          "comment": "the tool in which the provider lives"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the provider to show"
        }
      ],
      "return": {
        "type_long": "docking.ComponentProvider",
        "type_short": "ComponentProvider",
        "comment": "the newly shown provider"
      },
      "throws": []
    },
    {
      "name": "closeProvider",
      "comment": "Closes the given provider.  You could just call\n Tool#removeComponentProvider(ComponentProvider), but some providers have extra\n logic that happens when ComponentProvider#closeComponent() is called.   This will\n likely change in the future.",
      "javadoc": "Closes the given provider.  You could just call\n {@link Tool#removeComponentProvider(ComponentProvider)}, but some providers have extra\n logic that happens when {@link ComponentProvider#closeComponent()} is called.   This will\n likely change in the future.\n@param p the provider to close",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider to close"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clickComponentProvider",
      "comment": "Performs a single left mouse click in the center of the given provider.  This is\n useful when trying to  make a provider the active provider, while making sure\n that one of the provider\u0027s components has focus.",
      "javadoc": "Performs a single left mouse click in the center of the given provider.  This is\n useful when trying to  make a provider the active provider, while making sure\n that one of the provider\u0027s components has focus.\n@param provider The provider to click\n@return the actual Java JComponent that was clicked.\n@see #clickComponentProvider(ComponentProvider, int, int, int, int, int, boolean)",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "The provider to click"
        }
      ],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": "the actual Java JComponent that was clicked."
      },
      "throws": []
    },
    {
      "name": "selectTabIfAvailable",
      "comment": "If this dockable component is in a tabbed pane then select the associated tab.",
      "javadoc": "If this dockable component is in a tabbed pane then select the associated tab.\n@param dockableComponent the dockable component of interest",
      "static": true,
      "params": [
        {
          "name": "dockableComponent",
          "type_long": "docking.DockableComponent",
          "type_short": "DockableComponent",
          "comment": "the dockable component of interest"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDockableComponent",
      "comment": "Get the dockable component that contains this component if there is one.",
      "javadoc": "Get the dockable component that contains this component if there is one.\n@param component the component that may be within a dockable component.\n@return the dockable component or null",
      "static": true,
      "params": [
        {
          "name": "component",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": "the component that may be within a dockable component."
        }
      ],
      "return": {
        "type_long": "docking.DockableComponent",
        "type_short": "DockableComponent",
        "comment": "the dockable component or null"
      },
      "throws": []
    },
    {
      "name": "clickComponentProvider",
      "comment": "Clicks the JComponent at the given point from within the given provider.",
      "javadoc": "Clicks the JComponent at the given point from within the given provider.\n@param provider The provider to be clicked.\n@param button The mouse button to use (left, center, right)\n@param x the x location of the click\n@param y the y location of the click\n@param clickCount the number of times to click\n@param modifiers the modifiers to apply (Ctrl, Alt, etc; 0 is none)\n@param popupTrigger true if this click should show a popup menu\n@return the actual Java JComponent that was clicked",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "The provider to be clicked."
        },
        {
          "name": "button",
          "type_long": "int",
          "type_short": "int",
          "comment": "The mouse button to use (left, center, right)"
        },
        {
          "name": "x",
          "type_long": "int",
          "type_short": "int",
          "comment": "the x location of the click"
        },
        {
          "name": "y",
          "type_long": "int",
          "type_short": "int",
          "comment": "the y location of the click"
        },
        {
          "name": "clickCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of times to click"
        },
        {
          "name": "modifiers",
          "type_long": "int",
          "type_short": "int",
          "comment": "the modifiers to apply (Ctrl, Alt, etc; 0 is none)"
        },
        {
          "name": "popupTrigger",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if this click should show a popup menu"
        }
      ],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": "the actual Java JComponent that was clicked"
      },
      "throws": []
    },
    {
      "name": "printOpenWindows",
      "comment": "Prints all found windows that are showing, nesting by parent-child relationship.",
      "javadoc": "Prints all found windows that are showing, nesting by parent-child relationship.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOpenWindowsAsString",
      "comment": "Returns a pretty-print string of all found windows that are showing, nesting by\n parent-child relationship.",
      "javadoc": "Returns a pretty-print string of all found windows that are showing, nesting by\n parent-child relationship.\n@return the result string",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the result string"
      },
      "throws": []
    },
    {
      "name": "isHierarchyShowing",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "w",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "windowToString",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "w",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        },
        {
          "name": "depth",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "buffy",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForTableModel",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "model",
          "type_long": "docking.widgets.table.threaded.ThreadedTableModel\u003cT,?\u003e",
          "type_short": "ThreadedTableModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doWaitForTableModel",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "model",
          "type_long": "docking.widgets.table.threaded.ThreadedTableModel\u003cT,?\u003e",
          "type_short": "ThreadedTableModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBusyState",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "model",
          "type_long": "docking.widgets.table.threaded.ThreadedTableModel\u003c?,?\u003e",
          "type_short": "ThreadedTableModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNode",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tree",
          "type_long": "docking.widgets.tree.GTree",
          "type_short": "GTree",
          "comment": ""
        },
        {
          "name": "path",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "docking.widgets.tree.GTreeNode",
        "type_short": "GTreeNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "expandPath",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tree",
          "type_long": "docking.widgets.tree.GTree",
          "type_short": "GTree",
          "comment": ""
        },
        {
          "name": "path",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "expandTree",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tree",
          "type_long": "docking.widgets.tree.GTree",
          "type_short": "GTree",
          "comment": ""
        },
        {
          "name": "path",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "selectPath",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tree",
          "type_long": "docking.widgets.tree.GTree",
          "type_short": "GTree",
          "comment": ""
        },
        {
          "name": "path",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForTree",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "gTree",
          "type_long": "docking.widgets.tree.GTree",
          "type_short": "GTree",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doWaitForTree",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "gTree",
          "type_long": "docking.widgets.tree.GTree",
          "type_short": "GTree",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEnabled",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEnabled",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "button",
          "type_long": "javax.swing.AbstractButton",
          "type_short": "AbstractButton",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSelected",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "button",
          "type_long": "javax.swing.AbstractButton",
          "type_short": "AbstractButton",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createContext",
      "comment": "Creates a generic action context with no provider, with the given context object",
      "javadoc": "Creates a generic action context with no provider, with the given context object\n@param contextObject the generic object to put in the context\n@return the new context",
      "static": false,
      "params": [
        {
          "name": "contextObject",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the generic object to put in the context"
        }
      ],
      "return": {
        "type_long": "docking.ActionContext",
        "type_short": "ActionContext",
        "comment": "the new context"
      },
      "throws": []
    },
    {
      "name": "createContext",
      "comment": "Creates a generic action context with the given provider, with the given context object",
      "javadoc": "Creates a generic action context with the given provider, with the given context object\n@param provider the provider\n@param contextObject the generic object to put in the context\n@return the new context",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider"
        },
        {
          "name": "contextObject",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the generic object to put in the context"
        }
      ],
      "return": {
        "type_long": "docking.ActionContext",
        "type_short": "ActionContext",
        "comment": "the new context"
      },
      "throws": []
    },
    {
      "name": "capture",
      "comment": "Creates and writes to file an image of the given component.  The file will be written\n to the reports directory (this differs depending upon how the test was run), nested\n inside a directory structure of the form {test class name}/{test name}.  A console\n statement will be written indicating the location of the written file.",
      "javadoc": "Creates and writes to file an image of the given component.  The file will be written\n to the reports directory (this differs depending upon how the test was run), nested\n inside a directory structure of the form {test class name}/{test name}.  A console\n statement will be written indicating the location of the written file.\n@param c the component to capture\n@param name the file name suffix\n@throws Exception if there is any issue capturing the component",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to capture"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the file name suffix"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if there is any issue capturing the component"
        }
      ]
    },
    {
      "name": "writeImage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "image",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeImage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "image",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": ""
        },
        {
          "name": "dir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createScreenImage",
      "comment": "Creates a png of the given component by capturing a screenshot of the image.  This\n differs from creating the image by rendering it via a Graphics object.",
      "javadoc": "Creates a png of the given component \u003cb\u003eby capturing a screenshot of the image\u003c/b\u003e.  This\n differs from creating the image by rendering it via a {@link Graphics} object.\n@param c the component\n@return the new image\n@throws AWTException if there is a problem creating the image",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component"
        }
      ],
      "return": {
        "type_long": "java.awt.Image",
        "type_short": "Image",
        "comment": "the new image"
      },
      "throws": [
        {
          "type_long": "java.awt.AWTException",
          "type_short": "AWTException",
          "comment": "if there is a problem creating the image"
        }
      ]
    },
    {
      "name": "createRenderedImage",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Image",
        "type_short": "Image",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doCreateRenderedImage",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Image",
        "type_short": "Image",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "writeImage",
      "comment": "Writes the given image to the given file",
      "javadoc": "Writes the given image to the given file\n@param image the image\n@param imageFile the file\n@throws IOException if there is any issue writing the image",
      "static": true,
      "params": [
        {
          "name": "image",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": "the image"
        },
        {
          "name": "imageFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is any issue writing the image"
        }
      ]
    }
  ]
}
