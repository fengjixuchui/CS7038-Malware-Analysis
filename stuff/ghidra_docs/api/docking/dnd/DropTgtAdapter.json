{
  "name": "DropTgtAdapter",
  "comment": "Class to handle notifications of drag and drop operations that occur on the DropTarget \n object. The DropTarget is the component that accepts drops during a drag and drop operation. \n The drop method actually transfers the data.",
  "javadoc": "Class to handle notifications of drag and drop operations that occur on the DropTarget \n object. The DropTarget is the component that accepts drops during a drag and drop operation. \n The \u003ccode\u003edrop\u003c/code\u003e method actually transfers the data.",
  "static": false,
  "implements": [
    "java.awt.dnd.DropTargetListener"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "dropComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.dnd.Droppable",
      "type_short": "Droppable",
      "constant_value": null
    },
    {
      "name": "dropActions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "dropFlavors",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.datatransfer.DataFlavor[]",
      "type_short": "java.awt.datatransfer.DataFlavor[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param dropComponent the drop target\n@param acceptableDropActions a DnDConstants variable that defines dnd actions\n@param acceptableDropFlavors acceptable data formats that the drop target can handle",
      "static": false,
      "params": [
        {
          "name": "dropComponent",
          "type_long": "docking.dnd.Droppable",
          "type_short": "Droppable",
          "comment": "the drop target"
        },
        {
          "name": "acceptableDropActions",
          "type_long": "int",
          "type_short": "int",
          "comment": "a DnDConstants variable that defines dnd actions"
        },
        {
          "name": "acceptableDropFlavors",
          "type_long": "java.awt.datatransfer.DataFlavor[]",
          "type_short": "java.awt.datatransfer.DataFlavor[]",
          "comment": "acceptable data formats that the drop target can handle"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setAcceptableDropFlavors",
      "comment": "Set the data flavors acceptable to the associated drop target",
      "javadoc": "Set the data flavors acceptable to the associated drop target\n@param dropFlavors the flavors",
      "static": false,
      "params": [
        {
          "name": "dropFlavors",
          "type_long": "java.awt.datatransfer.DataFlavor[]",
          "type_short": "java.awt.datatransfer.DataFlavor[]",
          "comment": "the flavors"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dragEnter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.dnd.DropTargetDragEvent",
          "type_short": "DropTargetDragEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dragOver",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.dnd.DropTargetDragEvent",
          "type_short": "DropTargetDragEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dragExit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.dnd.DropTargetEvent",
          "type_short": "DropTargetEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dropActionChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.dnd.DropTargetDragEvent",
          "type_short": "DropTargetDragEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "drop",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.dnd.DropTargetDropEvent",
          "type_short": "DropTargetDropEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isDropOk",
      "comment": "Returns true if the drop operation is OK. A drop is deemed to be okay if\n \n \tthe drop target accepts one of the data flavors that the event\u0027s transferable provides\n \t\n \tthe drop action (i.e. COPY, MOVE, etc.) is accepted by the target\n \t\n \tthe drop is accepted by the Droppable component\n \t\n ",
      "javadoc": "Returns true if the drop operation is OK. A drop is deemed to be okay if\n \u003cOL\u003e\n \t\u003cLI\u003ethe drop target accepts one of the data flavors that the event\u0027s transferable provides\n \t\u003c/LI\u003e\n \t\u003cLI\u003ethe drop action (i.e. COPY, MOVE, etc.) is accepted by the target\n \t\u003c/LI\u003e\n \t\u003cLI\u003ethe drop is accepted by the Droppable component\n \t\u003c/LI\u003e\n \u003c/OL\u003e\n@param e event that has current state of drag and drop operation\n@return true if the drop operation is OK",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.dnd.DropTargetDragEvent",
          "type_short": "DropTargetDragEvent",
          "comment": "event that has current state of drag and drop operation"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the drop operation is OK"
      },
      "throws": []
    },
    {
      "name": "isDragFlavorSupported",
      "comment": "Returns true if the drop target can accept the data flavor that is to be dropped",
      "javadoc": "Returns true if the drop target can accept the data flavor that is to be dropped\n@param e event that has current state of drag and drop operation\n@return true if the drop target can accept the data flavor that is to be dropped",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.dnd.DropTargetDragEvent",
          "type_short": "DropTargetDragEvent",
          "comment": "event that has current state of drag and drop operation"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the drop target can accept the data flavor that is to be dropped"
      },
      "throws": []
    },
    {
      "name": "getFirstMatchingFlavor",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.dnd.DropTargetDragEvent",
          "type_short": "DropTargetDragEvent",
          "comment": ""
        },
        {
          "name": "acceptableFlavors",
          "type_long": "java.awt.datatransfer.DataFlavor[]",
          "type_short": "java.awt.datatransfer.DataFlavor[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.datatransfer.DataFlavor",
        "type_short": "DataFlavor",
        "comment": ""
      },
      "throws": []
    }
  ]
}
