{
  "name": "Draggable",
  "comment": "Interface to define a drag source.",
  "javadoc": "Interface to define a drag source.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "isStartDragOk",
      "comment": "Return true if the object at the location in the DragGesture \n event is draggable.",
      "javadoc": "Return true if the object at the location in the DragGesture \n event is draggable.\n@param e event passed to a DragGestureListener via its \n dragGestureRecognized() method when a particular DragGestureRecognizer \n detects a platform dependent Drag and Drop action initiating \n gesture has occurred on the Component it is tracking.\n@see docking.dnd.DragGestureAdapter",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.dnd.DragGestureEvent",
          "type_short": "DragGestureEvent",
          "comment": "event passed to a DragGestureListener via its \n dragGestureRecognized() method when a particular DragGestureRecognizer \n detects a platform dependent Drag and Drop action initiating \n gesture has occurred on the Component it is tracking."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDragSourceListener",
      "comment": "Called by the DragGestureAdapter to start the drag.",
      "javadoc": "Called by the DragGestureAdapter to start the drag.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.dnd.DragSourceListener",
        "type_short": "DragSourceListener",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "move",
      "comment": "Do the move operation; called when the drag and drop operation\n completes.",
      "javadoc": "Do the move operation; called when the drag and drop operation\n completes.\n@see docking.dnd.DragSrcAdapter#dragDropEnd",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dragCanceled",
      "comment": "Method called when the drag operation exits the drop target \n without dropping.",
      "javadoc": "Method called when the drag operation exits the drop target \n without dropping.\n@param event TODO",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "java.awt.dnd.DragSourceDropEvent",
          "type_short": "DragSourceDropEvent",
          "comment": "TODO"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDragAction",
      "comment": "Get the drag actions supported by this drag source:\n \n DnDConstants.ACTION_MOVE\n DnDConstants.ACTION_COPY\n DnDConstants.ACTION_COPY_OR_MOVE\n ",
      "javadoc": "Get the drag actions supported by this drag source:\n \u003cUL\u003e\n \u003cli\u003eDnDConstants.ACTION_MOVE\n \u003cli\u003eDnDConstants.ACTION_COPY\n \u003cli\u003eDnDConstants.ACTION_COPY_OR_MOVE\n \u003c/UL\u003e\n@return the drag actions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the drag actions"
      },
      "throws": []
    },
    {
      "name": "getTransferable",
      "comment": "Get the object to transfer.",
      "javadoc": "Get the object to transfer.\n@param p location of object to transfer\n@return object to transfer",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "java.awt.Point",
          "type_short": "Point",
          "comment": "location of object to transfer"
        }
      ],
      "return": {
        "type_long": "java.awt.datatransfer.Transferable",
        "type_short": "Transferable",
        "comment": "object to transfer"
      },
      "throws": []
    }
  ]
}
