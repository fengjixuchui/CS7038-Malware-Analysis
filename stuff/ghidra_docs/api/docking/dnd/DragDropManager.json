{
  "name": "DragDropManager",
  "comment": "Interface used by the DragDropTree to know how to handle the\n drag and drop operations.",
  "javadoc": "Interface used by the DragDropTree to know how to handle the\n drag and drop operations.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "isStartDragOk",
      "comment": "Return true if the dragNode can be dragged.",
      "javadoc": "Return true if the dragNode can be dragged.\n@param dragNode node where user is initiating the drag operation\n@param dragAction user action for the drag operation",
      "static": false,
      "params": [
        {
          "name": "dragNode",
          "type_long": "docking.dnd.DragDropNode",
          "type_short": "DragDropNode",
          "comment": "node where user is initiating the drag operation"
        },
        {
          "name": "dragAction",
          "type_long": "int",
          "type_short": "int",
          "comment": "user action for the drag operation"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isDropSiteOk",
      "comment": "Return true if the drop site is valid for the given target and drag event.",
      "javadoc": "Return true if the drop site is valid for the given target and drag event.\n@param destNode destination for node being dragged\n@param e the drag event",
      "static": false,
      "params": [
        {
          "name": "destNode",
          "type_long": "docking.dnd.DragDropNode",
          "type_short": "DragDropNode",
          "comment": "destination for node being dragged"
        },
        {
          "name": "e",
          "type_long": "java.awt.dnd.DropTargetDragEvent",
          "type_short": "DropTargetDragEvent",
          "comment": "the drag event"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Add the given data to the destination node.",
      "javadoc": "Add the given data to the destination node.\n@param destNode destination node for the data.\n@param data data to add\n@param chosen data flavor for the data being added\n@param dropAction user action for drop operation",
      "static": false,
      "params": [
        {
          "name": "destNode",
          "type_long": "docking.dnd.DragDropNode",
          "type_short": "DragDropNode",
          "comment": "destination node for the data."
        },
        {
          "name": "data",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "data to add"
        },
        {
          "name": "chosen",
          "type_long": "java.awt.datatransfer.DataFlavor",
          "type_short": "DataFlavor",
          "comment": "data flavor for the data being added"
        },
        {
          "name": "dropAction",
          "type_long": "int",
          "type_short": "int",
          "comment": "user action for drop operation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "move",
      "comment": "Remove the given sourceNodes. (It got moved, so remove it at the source)",
      "javadoc": "Remove the given sourceNodes. (It got moved, so remove it at the source)\n@param sourceNodes nodes to remove.",
      "static": false,
      "params": [
        {
          "name": "sourceNodes",
          "type_long": "docking.dnd.DragDropNode[]",
          "type_short": "docking.dnd.DragDropNode[]",
          "comment": "nodes to remove."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAcceptableFlavors",
      "comment": "Return the data flavors that can be dragged and dropped.",
      "javadoc": "Return the data flavors that can be dragged and dropped.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.datatransfer.DataFlavor[]",
        "type_short": "java.awt.datatransfer.DataFlavor[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTransferable",
      "comment": "Get the transferable at the given point.",
      "javadoc": "Get the transferable at the given point.\n@param p point where the mouse pointer is when the drag begins",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "java.awt.Point",
          "type_short": "Point",
          "comment": "point where the mouse pointer is when the drag begins"
        }
      ],
      "return": {
        "type_long": "java.awt.datatransfer.Transferable",
        "type_short": "Transferable",
        "comment": ""
      },
      "throws": []
    }
  ]
}
