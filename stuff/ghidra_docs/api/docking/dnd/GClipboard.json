{
  "name": "GClipboard",
  "comment": "Provides a place for clients to retrieve the Clipboard they should be using.  This class\n provides a level of indirection that allows us to inject clipboards as needed.\n \n Note: if a test needs to check the contents of the native clipboard, such as after \n executing a native Java action that uses the system clipboard, then that test must use some \n other mechanism to know that the native action was executed.   This is due to the fact that \n the system clipboard is potentially used by multiple Java test processes at once.",
  "javadoc": "Provides a place for clients to retrieve the Clipboard they should be using.  This class\n provides a level of indirection that allows us to inject clipboards as needed.\n \n \u003cP\u003eNote: if a test needs to check the contents of the native clipboard, such as after \n executing a native Java action that uses the system clipboard, then that test must use some \n other mechanism to know that the native action was executed.   This is due to the fact that \n the system clipboard is potentially used by multiple Java test processes at once.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "systemClipboard",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.awt.datatransfer.Clipboard",
      "type_short": "Clipboard",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getSystemClipboard",
      "comment": "Returns the clipboard that should be used by the current JVM",
      "javadoc": "Returns the clipboard that should be used by the current JVM\n@return the clipboard",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.awt.datatransfer.Clipboard",
        "type_short": "Clipboard",
        "comment": "the clipboard"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
