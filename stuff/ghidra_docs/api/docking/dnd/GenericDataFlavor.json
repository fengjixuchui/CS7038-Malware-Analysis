{
  "name": "GenericDataFlavor",
  "comment": "Generic data flavor class to override the equals(DataFlavor) method\n in order to have data flavors support the same general class types\n such as an ArrayList.",
  "javadoc": "Generic data flavor class to override the equals(DataFlavor) method\n in order to have data flavors support the same general class types\n such as an ArrayList.",
  "static": false,
  "implements": [],
  "extends": "java.awt.datatransfer.DataFlavor",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new GenericDataFlavor.",
      "javadoc": "Construct a new GenericDataFlavor.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a GenericDataFlavor that represents a Java class",
      "javadoc": "Construct a GenericDataFlavor that represents a Java class\n@param representationClass the class used to transfer data in this flavor\n@param humanPresentableName the human-readable string used to \n identify this flavor. If this parameter is null then the value of \n the the MIME Content Type is used.",
      "static": false,
      "params": [
        {
          "name": "representationClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "the class used to transfer data in this flavor"
        },
        {
          "name": "humanPresentableName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the human-readable string used to \n identify this flavor. If this parameter is null then the value of \n the the MIME Content Type is used."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "construct a GenericDataFlavor from a Mime Type string.",
      "javadoc": "construct a GenericDataFlavor from a Mime Type string.\n@param mimeType he string used to identify the MIME type for this flavor\n The string must specify a \"class\u003d\"\n  parameter in order to succeed in constructing a DataFlavor.\n@exception ClassNotFoundException if the class could not be loaded\n@exception IllegalArgumentException thrown if mimeType does not\n specify a \"class\u003d\" parameter",
      "static": false,
      "params": [
        {
          "name": "mimeType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "he string used to identify the MIME type for this flavor\n The string must specify a \"class\u003d\"\n  parameter in order to succeed in constructing a DataFlavor."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.ClassNotFoundException",
          "type_short": "ClassNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a GenericDataFlavor that represents a MimeType \n If the mimeType is \n ",
      "javadoc": "Construct a GenericDataFlavor that represents a MimeType \n If the mimeType is \n {@code \"application/x-java-serialized-object; class\u003d\u003crepresentation class\u003e\",\n the result is the same as calling \n new GenericDataFlavor(Class:forName(\u003crepresentation class\u003e)}\n@param mimeType the string used to identify the MIME type for \n this flavor\n@param humanPresentableName the human-readable string used to \n identify this flavor\n@exception IllegalArgumentException thrown if the mimeType does not \n specify a \"class\u003d\" parameter, or if the class is not\n successfully loaded",
      "static": false,
      "params": [
        {
          "name": "mimeType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string used to identify the MIME type for \n this flavor"
        },
        {
          "name": "humanPresentableName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the human-readable string used to \n identify this flavor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a GenericDataFlavor that represents a MimeType \n If the mimeType is \n ",
      "javadoc": "Construct a GenericDataFlavor that represents a MimeType \n If the mimeType is \n {@code \"application/x-java-serialized-object; class\u003d\u003crepresentation class\u003e\",\n the result is the same as calling \n new GenericDataFlavor(Class:forName(\u003crepresentation class\u003e).}\n@param mimeType the string used to identify the MIME type for this flavor\n@param humanPresentableName the human-readable string used to \n identify this flavor.\n@param classLoader class loader to load the class\n@exception ClassNotFoundException is thrown if class could not be loaded",
      "static": false,
      "params": [
        {
          "name": "mimeType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string used to identify the MIME type for this flavor"
        },
        {
          "name": "humanPresentableName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the human-readable string used to \n identify this flavor."
        },
        {
          "name": "classLoader",
          "type_long": "java.lang.ClassLoader",
          "type_short": "ClassLoader",
          "comment": "class loader to load the class"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.ClassNotFoundException",
          "type_short": "ClassNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "equals",
      "comment": "Return true if dataFlavor equals this generic data flavor.",
      "javadoc": "Return true if dataFlavor equals this generic data flavor.",
      "static": false,
      "params": [
        {
          "name": "dataFlavor",
          "type_long": "java.awt.datatransfer.DataFlavor",
          "type_short": "DataFlavor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "Return true if obj is equal this generic data flavor.",
      "javadoc": "Return true if obj is equal this generic data flavor.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
