{
  "name": "Tool",
  "comment": "Generic tool interface for managing ComponentProviders and\n DockingActionIf",
  "javadoc": "Generic tool interface for managing {@link ComponentProvider}s and\n {@link DockingActionIf actions}",
  "static": false,
  "implements": [
    "ghidra.framework.plugintool.ServiceProvider"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getName",
      "comment": "Returns a combination of the tool name and the instance name of the form\n tool name(instance name), e.g., SomeTool(2)",
      "javadoc": "Returns a combination of the tool name and the instance name of the form\n tool name(instance name), e.g., SomeTool(2)\n@return the tool name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the tool name"
      },
      "throws": []
    },
    {
      "name": "isVisible",
      "comment": "Returns true if tool is visible",
      "javadoc": "Returns true if tool is visible\n@return true if tool is visible",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if tool is visible"
      },
      "throws": []
    },
    {
      "name": "setVisible",
      "comment": "Sets the tool visible or invisible.  This method is used by\n the Project to make it\u0027s tools visible or invisible depending on whether\n this tool is in is the active workspace.",
      "javadoc": "Sets the tool visible or invisible.  This method is used by\n the Project to make it\u0027s tools visible or invisible depending on whether\n this tool is in is the active workspace.\n@param visibility true specifies that the tool should be visible",
      "static": false,
      "params": [
        {
          "name": "visibility",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true specifies that the tool should be visible"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toFront",
      "comment": "Brings this tool to the front. Places this tool at the top of the\n stacking order and shows it in front of any other tools.",
      "javadoc": "Brings this tool to the front. Places this tool at the top of the\n stacking order and shows it in front of any other tools.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIcon",
      "comment": "Get the icon that the tool is using",
      "javadoc": "Get the icon that the tool is using\n@return the icon that the tool is using",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": "the icon that the tool is using"
      },
      "throws": []
    },
    {
      "name": "addComponentProvider",
      "comment": "Adds the ComponentProvider to the tool, optionally making it visible.",
      "javadoc": "Adds the ComponentProvider to the tool, optionally making it visible.\n@param componentProvider the provider to add to the tool\n@param show if true, the component is made visible.",
      "static": false,
      "params": [
        {
          "name": "componentProvider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider to add to the tool"
        },
        {
          "name": "show",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the component is made visible."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeComponentProvider",
      "comment": "Removes the given ComponentProvider from the tool.  When a provider has been removed\n from the tool it is considered disposed and should not be reused.",
      "javadoc": "Removes the given ComponentProvider from the tool.  When a provider has been removed\n from the tool it is considered disposed and should not be reused.\n@param componentProvider the provider to remove from the tool",
      "static": false,
      "params": [
        {
          "name": "componentProvider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider to remove from the tool"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponentProvider",
      "comment": "Gets the ComponentProvider with the given name.",
      "javadoc": "Gets the ComponentProvider with the given name.\n@param name the name of the provider to get\n@return the provider",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the provider to get"
        }
      ],
      "return": {
        "type_long": "docking.ComponentProvider",
        "type_short": "ComponentProvider",
        "comment": "the provider"
      },
      "throws": []
    },
    {
      "name": "setStatusInfo",
      "comment": "Set the status information",
      "javadoc": "Set the status information\n@param text non-html string to be displayed in the Status display area",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "non-html string to be displayed in the Status display area"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStatusInfo",
      "comment": "Set the status information",
      "javadoc": "Set the status information\n@param text string to be displayed in the Status display area\n@param beep whether to be or not",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string to be displayed in the Status display area"
        },
        {
          "name": "beep",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "whether to be or not"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearStatusInfo",
      "comment": "Clear the status information",
      "javadoc": "Clear the status information",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMenuGroup",
      "comment": "Set the menu group associated with a cascaded submenu.  This allows\n a cascading menu item to be grouped with a specific set of actions.\n \n The default group for a cascaded submenu is the name of the submenu.\n ",
      "javadoc": "Set the menu group associated with a cascaded submenu.  This allows\n a cascading menu item to be grouped with a specific set of actions.\n \u003cp\u003e\n The default group for a cascaded submenu is the name of the submenu.\n \u003cp\u003e\n@param menuPath menu name path where the last element corresponds to the specified group name.\n@param group group name\n@param menuSubGroup the name used to sort the cascaded menu within other menu items at\n                     its level",
      "static": false,
      "params": [
        {
          "name": "menuPath",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "menu name path where the last element corresponds to the specified group name."
        },
        {
          "name": "group",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "group name"
        },
        {
          "name": "menuSubGroup",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name used to sort the cascaded menu within other menu items at\n                     its level"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addAction",
      "comment": "Adds the action to the tool.",
      "javadoc": "Adds the action to the tool.\n@param action the action to be added.",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "the action to be added."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAction",
      "comment": "Removes the given action from the tool.  When an action is removed from the tool it will\n be disposed and should not be reused.",
      "javadoc": "Removes the given action from the tool.  When an action is removed from the tool it will\n be disposed and should not be reused.\n@param action the action to be removed.",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "the action to be removed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addLocalAction",
      "comment": "Adds the action to the given provider as a local action.",
      "javadoc": "Adds the action to the given provider as a local action.\n@param componentProvider the provider to add the action to.\n@param action the DockingAction to add to the componentProvider.",
      "static": false,
      "params": [
        {
          "name": "componentProvider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider to add the action to."
        },
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "the DockingAction to add to the componentProvider."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeLocalAction",
      "comment": "Removes the action from the provider",
      "javadoc": "Removes the action from the provider\n@param componentProvider the component provider from which to remove the action.\n@param action the action to remove.",
      "static": false,
      "params": [
        {
          "name": "componentProvider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the component provider from which to remove the action."
        },
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "the action to remove."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPopupActionProvider",
      "comment": "Adds the given popup action provider to this tool.   This provider will be called each\n time the popup menu is about to be shown.",
      "javadoc": "Adds the given popup action provider to this tool.   This provider will be called each\n time the popup menu is about to be shown.\n@param provider the provider",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.actions.PopupActionProvider",
          "type_short": "PopupActionProvider",
          "comment": "the provider"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removePopupActionProvider",
      "comment": "Removes the given popup action provider",
      "javadoc": "Removes the given popup action provider\n@param provider the provider",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.actions.PopupActionProvider",
          "type_short": "PopupActionProvider",
          "comment": "the provider"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllActions",
      "comment": "Return a set of all actions in the tool.\n \n Note: the result may contain conceptually duplicate actions, which is when multiple\n actions exist that share the same full name (the full name is the action name with the\n owner name, such as \"My Action (MyPlugin)\".",
      "javadoc": "Return a set of all actions in the tool.\n \n \u003cp\u003eNote: the result may contain conceptually duplicate actions, which is when multiple\n actions exist that share the same full name (the full name is the action name with the\n owner name, such as \"My Action (MyPlugin)\".\n@return set of all actions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cdocking.action.DockingActionIf\u003e",
        "type_short": "Set",
        "comment": "set of all actions"
      },
      "throws": []
    },
    {
      "name": "getDockingActionsByOwnerName",
      "comment": "Returns all actions for the given owner\n \n Note: the result may contain conceptually duplicate actions, which is when multiple\n actions exist that share the same full name (the full name is the action name with the\n owner name, such as \"My Action (MyPlugin)\".",
      "javadoc": "Returns all actions for the given owner\n \n \u003cp\u003eNote: the result may contain conceptually duplicate actions, which is when multiple\n actions exist that share the same full name (the full name is the action name with the\n owner name, such as \"My Action (MyPlugin)\".\n@param owner the action owner\u0027s name\n@return the actions",
      "static": false,
      "params": [
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the action owner\u0027s name"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cdocking.action.DockingActionIf\u003e",
        "type_short": "Set",
        "comment": "the actions"
      },
      "throws": []
    },
    {
      "name": "getActiveComponentProvider",
      "comment": "Returns the active component provider, that which has focus",
      "javadoc": "Returns the active component provider, that which has focus\n@return the active provider",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.ComponentProvider",
        "type_short": "ComponentProvider",
        "comment": "the active provider"
      },
      "throws": []
    },
    {
      "name": "showComponentProvider",
      "comment": "Shows or hides the component provider in the tool",
      "javadoc": "Shows or hides the component provider in the tool\n@param componentProvider the provider to either show or hide.\n@param visible true to show the provider, false to hide it.",
      "static": false,
      "params": [
        {
          "name": "componentProvider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider to either show or hide."
        },
        {
          "name": "visible",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to show the provider, false to hide it."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showDialog",
      "comment": "Shows the dialog using the tool\u0027s root frame as a parent.  Also, remembers any size and location\n adjustments made by the user for the next time the dialog is shown.",
      "javadoc": "Shows the dialog using the tool\u0027s root frame as a parent.  Also, remembers any size and location\n adjustments made by the user for the next time the dialog is shown.\n@param dialogComponent the DialogComponentProvider object to be shown in a dialog.",
      "static": false,
      "params": [
        {
          "name": "dialogComponent",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": "the DialogComponentProvider object to be shown in a dialog."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProviderWindow",
      "comment": "Returns the parent window for the given provider",
      "javadoc": "Returns the parent window for the given provider\n@param componentProvider the provider\n@return the window",
      "static": false,
      "params": [
        {
          "name": "componentProvider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider"
        }
      ],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": "the window"
      },
      "throws": []
    },
    {
      "name": "toFront",
      "comment": "Makes the given ComponentProvider move to the front if it is tabbed with other components.",
      "javadoc": "Makes the given ComponentProvider move to the front if it is tabbed with other components.\n@param componentProvider the provider to move to the top of its stacking order.",
      "static": false,
      "params": [
        {
          "name": "componentProvider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider to move to the top of its stacking order."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isVisible",
      "comment": "Returns true if the given ComponentProvider is currently visible.",
      "javadoc": "Returns true if the given ComponentProvider is currently visible.\n@param componentProvider the provider to check for visibility.\n@return true if the given ComponentProvider is currently visible.",
      "static": false,
      "params": [
        {
          "name": "componentProvider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider to check for visibility."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given ComponentProvider is currently visible."
      },
      "throws": []
    },
    {
      "name": "isActive",
      "comment": "Returns true if the ComponentProvider is the currently active provider. The active provider\n is the provider that has keyboard focus and provides the current action context.",
      "javadoc": "Returns true if the ComponentProvider is the currently active provider. The active provider\n is the provider that has keyboard focus and provides the current action context.\n@param componentProvider the provider to check for active.\n@return true if the ComponentProvider is the currently active provider.",
      "static": false,
      "params": [
        {
          "name": "componentProvider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider to check for active."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the ComponentProvider is the currently active provider."
      },
      "throws": []
    },
    {
      "name": "updateTitle",
      "comment": "Indicates to the tool that the given componentProvider\u0027s title has changed.",
      "javadoc": "Indicates to the tool that the given componentProvider\u0027s title has changed.\n@param componentProvider the componentProvider whose title has changed.",
      "static": false,
      "params": [
        {
          "name": "componentProvider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the componentProvider whose title has changed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contextChanged",
      "comment": "Signals to the tool that the provider\u0027s context has changed.  This lets toolbar and\n menu actions update enablement based on current context.\n \n Pass null to signal that the entire tool\u0027s context has changed",
      "javadoc": "Signals to the tool that the provider\u0027s context has changed.  This lets toolbar and\n menu actions update enablement based on current context.\n \n \u003cp\u003ePass \u003ccode\u003enull\u003c/code\u003e to signal that the entire tool\u0027s context has changed\n@param provider the provider whose context changed; null to signal the tool\u0027s context",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider whose context changed; null to signal the tool\u0027s context"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addContextListener",
      "comment": "Adds the given context listener to this tool",
      "javadoc": "Adds the given context listener to this tool\n@param listener the listener to add",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "docking.DockingContextListener",
          "type_short": "DockingContextListener",
          "comment": "the listener to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeContextListener",
      "comment": "Removes the given context listener to this tool",
      "javadoc": "Removes the given context listener to this tool\n@param listener the listener to add",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "docking.DockingContextListener",
          "type_short": "DockingContextListener",
          "comment": "the listener to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWindowManager",
      "comment": "Returns the DockingWindowManger for this tool.",
      "javadoc": "Returns the DockingWindowManger for this tool.\n@return the DockingWindowManger for this tool.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.DockingWindowManager",
        "type_short": "DockingWindowManager",
        "comment": "the DockingWindowManger for this tool."
      },
      "throws": []
    },
    {
      "name": "getOptions",
      "comment": "Get the options for the given category name; if no options exist with\n the given name, then one is created.",
      "javadoc": "Get the options for the given category name; if no options exist with\n the given name, then one is created.\n@param categoryName the category name\n@return the options",
      "static": false,
      "params": [
        {
          "name": "categoryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the category name"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.options.ToolOptions",
        "type_short": "ToolOptions",
        "comment": "the options"
      },
      "throws": []
    },
    {
      "name": "setConfigChanged",
      "comment": "Toggles the \"change\" state of the tool...",
      "javadoc": "Toggles the \"change\" state of the tool...\n@param changed true indicates that the tool config has changed.",
      "static": false,
      "params": [
        {
          "name": "changed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates that the tool config has changed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasConfigChanged",
      "comment": "Return true if the tool\u0027s configuration has changed",
      "javadoc": "Return true if the tool\u0027s configuration has changed\n@return true if the tool\u0027s configuration has changed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the tool\u0027s configuration has changed"
      },
      "throws": []
    },
    {
      "name": "getToolActions",
      "comment": "Returns the class that manages actions for the tool.\n \n Most clients will not need to use this methods.  Instead, actions should be added to\n the tool via #addAction(DockingActionIf) and\n #addLocalAction(ComponentProvider, DockingActionIf).",
      "javadoc": "Returns the class that manages actions for the tool.\n \n \u003cp\u003eMost clients will not need to use this methods.  Instead, actions should be added to\n the tool via {@link #addAction(DockingActionIf)} and\n {@link #addLocalAction(ComponentProvider, DockingActionIf)}.\n@return the action manager",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.actions.DockingToolActions",
        "type_short": "DockingToolActions",
        "comment": "the action manager"
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "Suggests the tool to attempt to close().  This will be as though the user\n selected the close menu option on the tool or hit the closeWindow x button in\n the upper corner (Windows systems).",
      "javadoc": "Suggests the tool to attempt to close().  This will be as though the user\n selected the close menu option on the tool or hit the closeWindow x button in\n the upper corner (Windows systems).",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultToolContext",
      "comment": "Returns the default ActionContext for the tool.  The default context is the context\n the default ComponentProvider for the tool.",
      "javadoc": "Returns the default {@link ActionContext} for the tool.  The default context is the context\n the default ComponentProvider for the tool.\n@return the default {@link ActionContext} for the tool",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.ActionContext",
        "type_short": "ActionContext",
        "comment": "the default ActionContext for the tool"
      },
      "throws": []
    }
  ]
}
