{
  "name": "ActionToGuiHelper",
  "comment": "A class that exists primarily to provide access to action-related package-level methods of the\n DockingWindowManager.  This allows the manager\u0027s interface to hide methods that \n don\u0027t make sense for public consumption.",
  "javadoc": "A class that exists primarily to provide access to action-related package-level methods of the\n {@link DockingWindowManager}.  This allows the manager\u0027s interface to hide methods that \n don\u0027t make sense for public consumption.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "windowManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.DockingWindowManager",
      "type_short": "DockingWindowManager",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "windowManager",
          "type_long": "docking.DockingWindowManager",
          "type_short": "DockingWindowManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addToolAction",
      "comment": "Adds an action to the global menu or toolbar which appear in the main frame. If the action \n has a menu path, it will be in the menu.  If it has an icon, it will appear in the toolbar.",
      "javadoc": "Adds an action to the global menu or toolbar which appear in the main frame. If the action \n has a menu path, it will be in the menu.  If it has an icon, it will appear in the toolbar.\n@param action the action to be added",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "the action to be added"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeToolAction",
      "comment": "Removes the given action from the global menu and toolbar",
      "javadoc": "Removes the given action from the global menu and toolbar\n@param action the action to be removed",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "the action to be removed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addLocalAction",
      "comment": "Adds an action that will be associated with the given provider.  These actions will\n appear in the local header for the component as a toolbar button or a drop-down menu\n item if it has an icon and menu path respectively.",
      "javadoc": "Adds an action that will be associated with the given provider.  These actions will\n appear in the local header for the component as a toolbar button or a drop-down menu\n item if it has an icon and menu path respectively.\n@param provider the provider whose header on which the action is to be placed\n@param action the action to add to the providers header bar",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider whose header on which the action is to be placed"
        },
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "the action to add to the providers header bar"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponentActions",
      "comment": "Get an iterator over the actions for the given provider",
      "javadoc": "Get an iterator over the actions for the given provider\n@param provider the component provider for which to iterate over all its owned actions\n@return null if the provider does not exist in the window manager",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the component provider for which to iterate over all its owned actions"
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cdocking.action.DockingActionIf\u003e",
        "type_short": "Iterator",
        "comment": "null if the provider does not exist in the window manager"
      },
      "throws": []
    },
    {
      "name": "removeProviderAction",
      "comment": "Removes the action from the given provider\u0027s header bar.",
      "javadoc": "Removes the action from the given provider\u0027s header bar.\n@param provider the provider whose header bar from which the action should be removed.\n@param action the action to be removed from the provider\u0027s header bar.",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider whose header bar from which the action should be removed."
        },
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "the action to be removed from the provider\u0027s header bar."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "keyBindingsChanged",
      "comment": "Call this method to signal that key bindings for one or more actions have changed",
      "javadoc": "Call this method to signal that key bindings for one or more actions have changed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
