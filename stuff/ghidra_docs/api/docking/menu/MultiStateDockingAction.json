{
  "name": "MultiStateDockingAction",
  "comment": "An action that can be in one of multiple states.   The button of this action has a\n drop-down icon that allows users to change the state of the button.  Also, by default, as\n the user presses the button, it will execute the action corresponding to the current\n state.\n\n Warning: if you use this action in a toolbar, then be sure to call the\n #MultiStateDockingAction(String, String, boolean).  If you call\n another constructor, or pass false for this boolean above, your\n #doActionPerformed(ActionContext) method will get called twice.",
  "javadoc": "An action that can be in one of multiple states.   The button of this action has a\n drop-down icon that allows users to change the state of the button.  Also, by default, as\n the user presses the button, it will execute the action corresponding to the current\n state.\n\n \u003cp\u003eWarning: if you use this action in a toolbar, then be sure to call the\n {@link #MultiStateDockingAction(String, String, boolean) correct constructor}.  If you call\n another constructor, or pass false for this boolean above, your\n {@link #doActionPerformed(ActionContext)} method will get called twice.\n@param \u003cT\u003e the type of the user data\n@see MultiActionDockingAction",
  "static": false,
  "implements": [],
  "extends": "docking.action.DockingAction",
  "fields": [
    {
      "name": "EMPTY_ICON",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    },
    {
      "name": "actionStates",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cdocking.menu.ActionState\u003cT\u003e\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "currentStateIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "multiActionGenerator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.action.MultiActionDockingActionIf",
      "type_short": "MultiActionDockingActionIf",
      "constant_value": null
    },
    {
      "name": "multipleButton",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.menu.MultipleActionDockingToolbarButton",
      "type_short": "MultipleActionDockingToolbarButton",
      "constant_value": null
    },
    {
      "name": "performActionOnPrimaryButtonClick",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "defaultIcon",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    },
    {
      "name": "useCheckboxForIcons",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "clickListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.event.ActionListener",
      "type_short": "ActionListener",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Call this constructor with this action will not be added to a toolbar",
      "javadoc": "Call this constructor with this action will not be added to a toolbar\n@param name the action name\n@param owner the owner\n@see #MultiStateDockingAction(String, String, boolean)",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the action name"
        },
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the owner"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Use this constructor explicitly when this action is used in a toolbar, passing true\n for isToolbarAction (see the javadoc header note).",
      "javadoc": "Use this constructor explicitly when this action is used in a toolbar, passing true\n for \u003ccode\u003eisToolbarAction\u003c/code\u003e (see the javadoc header note).\n@param name the action name\n@param owner the owner\n@param isToolbarAction true if this action is a toolbar action",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the action name"
        },
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the owner"
        },
        {
          "name": "isToolbarAction",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if this action is a toolbar action"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "actionStateChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newActionState",
          "type_long": "docking.menu.ActionState\u003cT\u003e",
          "type_short": "ActionState",
          "comment": ""
        },
        {
          "name": "trigger",
          "type_long": "docking.widgets.EventTrigger",
          "type_short": "EventTrigger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPerformActionOnPrimaryButtonClick",
      "comment": "If doPerformAction is true, then, when the user clicks the\n button and not the drop-down arrow, the #doActionPerformed(ActionContext)\n method will be called.  If doPerformAction is false, then, when\n the user clicks the button and not the drop-down arrow, the popup menu will be shown, just\n as if the user had clicked the drop-down arrow.\n \n Also, if the parameter is true, then the button will behave like a button in terms of\n mouse feedback.  If false, then the button will behave more like a label.",
      "javadoc": "If \u003ccode\u003edoPerformAction\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, then, when the user clicks the\n button and not the drop-down arrow, the {@link #doActionPerformed(ActionContext)}\n method will be called.  If \u003ccode\u003edoPerformAction\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e, then, when\n the user clicks the button and not the drop-down arrow, the popup menu will be shown, just\n as if the user had clicked the drop-down arrow.\n \u003cp\u003e\n Also, if the parameter is true, then the button will behave like a button in terms of\n mouse feedback.  If false, then the button will behave more like a label.\n@param doPerformAction true to call {@link #doActionPerformed(ActionContext)} when the\n        user presses the button for this action (not the drop-down menu; see above)",
      "static": false,
      "params": [
        {
          "name": "doPerformAction",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to call #doActionPerformed(ActionContext) when the\n        user presses the button for this action (not the drop-down menu; see above)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setUseCheckboxForIcons",
      "comment": "Overrides the default icons for actions shown in popup menu of the multi-state action.  By\n default, the popup menu items will use the icons as provided by the ActionState.\n By passing true to this method, icons will not be used in the popup menu.  Instead, a\n checkbox icon will be used to show the active action state.",
      "javadoc": "Overrides the default icons for actions shown in popup menu of the multi-state action.  By\n default, the popup menu items will use the icons as provided by the {@link ActionState}.\n By passing true to this method, icons will not be used in the popup menu.  Instead, a\n checkbox icon will be used to show the active action state.\n@param useCheckboxForIcons true to use a checkbox",
      "static": false,
      "params": [
        {
          "name": "useCheckboxForIcons",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to use a checkbox"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDefaultIcon",
      "comment": "Sets the icon to use if the active action state does not supply an icon.  This is useful if\n you wish for your action states to not use icon, but desire the action itself to have an\n icon.",
      "javadoc": "Sets the icon to use if the active action state does not supply an icon.  This is useful if\n you wish for your action states to not use icon, but desire the action itself to have an\n icon.\n@param icon the icon",
      "static": false,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "actionPerformed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doActionPerformed",
      "comment": "This is the callback to be overridden when the child wishes to respond to user button\n presses that are on the button and not the drop-down.  This will only be called if\n #performActionOnPrimaryButtonClick is true.",
      "javadoc": "This is the callback to be overridden when the child wishes to respond to user button\n presses that are on the button and not the drop-down.  This will only be called if\n {@link #performActionOnPrimaryButtonClick} is true.\n@param context the action context",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": "the action context"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getActionContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.ActionContext",
        "type_short": "ActionContext",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStateActions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cdocking.action.DockingActionIf\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setGroup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "group",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSubGroup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "subGroup",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addActionState",
      "comment": "add the supplied \n if  is  the first one will fire its event",
      "javadoc": "add the supplied {@code ActionState}\n if {@code fireFirstEvent} is {@code true} the first one will fire its event\n@param actionState the {@code ActionState} to add",
      "static": false,
      "params": [
        {
          "name": "actionState",
          "type_long": "docking.menu.ActionState\u003cT\u003e",
          "type_short": "ActionState",
          "comment": "the  to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setActionStates",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newStates",
          "type_long": "java.util.List\u003cdocking.menu.ActionState\u003cT\u003e\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCurrentUserData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCurrentState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.menu.ActionState\u003cT\u003e",
        "type_short": "ActionState",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllActionStates",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cdocking.menu.ActionState\u003cT\u003e\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCurrentActionStateByUserData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "t",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCurrentActionState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "actionState",
          "type_long": "docking.menu.ActionState\u003cT\u003e",
          "type_short": "ActionState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCurrentActionStateWithTrigger",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "actionState",
          "type_long": "docking.menu.ActionState\u003cT\u003e",
          "type_short": "ActionState",
          "comment": ""
        },
        {
          "name": "trigger",
          "type_long": "docking.widgets.EventTrigger",
          "type_short": "EventTrigger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIcon",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "actionState",
          "type_long": "docking.menu.ActionState\u003cT\u003e",
          "type_short": "ActionState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.Icon",
        "type_short": "Icon",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doCreateButton",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JButton",
        "type_short": "JButton",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setButtonState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "actionState",
          "type_long": "docking.menu.ActionState\u003cT\u003e",
          "type_short": "ActionState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMenuBarData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newMenuData",
          "type_long": "docking.action.MenuData",
          "type_short": "MenuData",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "superSetMenuBarData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newMenuData",
          "type_long": "docking.action.MenuData",
          "type_short": "MenuData",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPopupMenuData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newMenuData",
          "type_long": "docking.action.MenuData",
          "type_short": "MenuData",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToolTipText",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
