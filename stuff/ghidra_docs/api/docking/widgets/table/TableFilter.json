{
  "name": "TableFilter",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "acceptsRow",
      "comment": "Returns true if this filter matches the given row (data)",
      "javadoc": "Returns true if this filter matches the given row (data)\n@param rowObject the current row object\n@return true if the element at the given row matches this filter.",
      "static": false,
      "params": [
        {
          "name": "rowObject",
          "type_long": "ROW_OBJECT",
          "type_short": "ROW_OBJECT",
          "comment": "the current row object"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the element at the given row matches this filter."
      },
      "throws": []
    },
    {
      "name": "isSubFilterOf",
      "comment": "Returns true if this filter is a more specific version of the given filter.\n\n For example, if this filter is a \u0027starts with\u0027 text filter, with the\n value of \u0027bobo\u0027, then if the given filter is also a \u0027starts with\u0027 filter,\n with a value of \u0027bob\u0027, then this\n filter is considered a sub-filter of the given sub-filter.",
      "javadoc": "Returns true if this filter is a more specific version of the given filter.\n\n \u003cP\u003eFor example, if this filter is a \u0027starts with\u0027 text filter, with the\n value of \u0027bobo\u0027, then if the given filter is also a \u0027starts with\u0027 filter,\n with a value of \u0027bob\u0027, then this\n filter is considered a sub-filter of the given sub-filter.\n@param tableFilter the filter to check\n@return true if this filter is a sub-filter of the given filter",
      "static": false,
      "params": [
        {
          "name": "tableFilter",
          "type_long": "docking.widgets.table.TableFilter\u003c?\u003e",
          "type_short": "TableFilter",
          "comment": "the filter to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this filter is a sub-filter of the given filter"
      },
      "throws": []
    },
    {
      "name": "hasColumnFilter",
      "comment": "Returns true if the there is a column filter on the column specified",
      "javadoc": "Returns true if the there is a column filter on the column specified\n@param columnModelIndex the model index of the column to test for column filters.\n@return true if the there is a column filter on the column specified.",
      "static": false,
      "params": [
        {
          "name": "columnModelIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the model index of the column to test for column filters."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the there is a column filter on the column specified."
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "A method that allows filters to report that they have nothing to actually filter.  This\n is useful for empty/null filters.",
      "javadoc": "A method that allows filters to report that they have nothing to actually filter.  This\n is useful for empty/null filters.\n@return true if this filter will not perform any filtering",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this filter will not perform any filtering"
      },
      "throws": []
    }
  ]
}
