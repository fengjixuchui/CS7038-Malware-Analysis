{
  "name": "DiscoverableTableUtils",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "columnConstraints",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.List\u003cdocking.widgets.table.constraint.ColumnConstraint\u003c?\u003e\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adaptColumForModel",
      "comment": "Returns a column object that is usable by the given model.\n \n Dynamic columns and models work on row types.  This method allows clients to use columns\n with row types that differ from the model\u0027s row type, as long as a suitable mapper can\n be found.  If no mapper can be found, then an IllegalArgumentException is thrown.  Also,\n if the given column is of the correct type, then that column is returned.",
      "javadoc": "Returns a column object that is usable by the given model.\n \u003cp\u003e\n Dynamic columns and models work on row types.  This method allows clients to use columns\n with row types that differ from the model\u0027s row type, as long as a suitable mapper can\n be found.  If no mapper can be found, then an IllegalArgumentException is thrown.  Also,\n if the given column is of the correct type, then that column is returned.\n@param \u003cROW_TYPE\u003e the \u003cb\u003emodel\u0027s\u003c/b\u003e row type\n@param \u003cCOLUMN_TYPE\u003e the \u003cb\u003emodel\u0027s\u003c/b\u003e row type\n@param model the table model for which a column is needed\n@param column the column that you want to use with the given model\n@return a column object that is usable by the given model.\n@throws IllegalArgumentException if this method cannot figure out how to map the given\n         column\u0027s row type to the given model\u0027s row type.",
      "static": true,
      "params": [
        {
          "name": "model",
          "type_long": "docking.widgets.table.GDynamicColumnTableModel\u003cROW_TYPE,COLUMN_TYPE\u003e",
          "type_short": "GDynamicColumnTableModel",
          "comment": "the table model for which a column is needed"
        },
        {
          "name": "column",
          "type_long": "docking.widgets.table.AbstractDynamicTableColumn\u003c?,?,?\u003e",
          "type_short": "AbstractDynamicTableColumn",
          "comment": "the column that you want to use with the given model"
        }
      ],
      "return": {
        "type_long": "docking.widgets.table.DynamicTableColumn\u003cROW_TYPE,COLUMN_TYPE,DATA_SOURCE\u003e",
        "type_short": "DynamicTableColumn",
        "comment": "a column object that is usable by the given model."
      },
      "throws": []
    },
    {
      "name": "getDynamicTableColumns",
      "comment": "Returns all \"discovered\" AbstractDynamicTableColumn classes that are compatible with the\n given class, which represents the object for a table\u0027s row.  For example, many tables use\n Address as the row type.  In this case, passing Address.class as the\n parameter to this method will return all AbstractDynamicTableColumns that can provide column\n data by working with Address instances.\n \n Usage Notes:  This class will not only discover AbstractDynamicTableColumns\n that directly support the given class type, but will also use discovered\n TableRowMapper objects to create adapters that allow the\n use of table row data that does not exactly match the supported type of discovered\n AbstractDynamicTableColumn classes.  For example, suppose that a table\u0027s row type is\n Address.  This methods will return at least all AbstractDynamicTableColumns\n that support Address data.  In order to support extra columns, Ghidra has\n created a TableRowMapper that can convert a ProgramLocation into an\n Address.  This method will find and use this mapper to return a\n MappedTableColumn instance (which is an AbstractDynamicTableColumn).  By doing\n this, any table that has Address objects as its row type can now use\n AbstractDynamicTableColumns that support ProgramLocations in addition to\n Address objects.  These mappers provide a way for tables that have non-standard\n Ghidra data as their row type to take advantage of existing dynamic columns for standard\n Ghidra data (like ProgramLocations and Addresses).",
      "javadoc": "Returns all \"discovered\" {@link AbstractDynamicTableColumn} classes that are compatible with the\n given class, which represents the object for a table\u0027s row.  For example, many tables use\n \u003ccode\u003eAddress\u003c/code\u003e as the row type.  In this case, passing \u003ccode\u003eAddress.class\u003c/code\u003e as the\n parameter to this method will return all {@link AbstractDynamicTableColumn}s that can provide column\n data by working with \u003ccode\u003eAddress\u003c/code\u003e instances.\n \n \u003cp\u003e\u003cu\u003eUsage Notes:\u003c/u\u003e  This class will not only discover {@link AbstractDynamicTableColumn}s\n that directly support the given class type, but will also use discovered\n {@link TableRowMapper} objects to create adapters that allow the\n use of table row data that does not exactly match the supported type of discovered\n {@link AbstractDynamicTableColumn} classes.  For example, suppose that a table\u0027s row type is\n \u003ccode\u003eAddress\u003c/code\u003e.  This methods will return at least all {@link AbstractDynamicTableColumn}s\n that support \u003ccode\u003eAddress\u003c/code\u003e data.  In order to support extra columns, Ghidra has\n created a {@link TableRowMapper} that can convert a \u003ccode\u003eProgramLocation\u003c/code\u003e into an\n \u003ccode\u003eAddress\u003c/code\u003e.  This method will find and use this mapper to return a\n {@link MappedTableColumn} instance (which is an {@link AbstractDynamicTableColumn}).  By doing\n this, any table that has \u003ccode\u003eAddress\u003c/code\u003e objects as its row type can now use\n {@link AbstractDynamicTableColumn}s that support \u003ccode\u003eProgramLocations\u003c/code\u003e in addition to\n \u003ccode\u003eAddress\u003c/code\u003e objects.  These mappers provide a way for tables that have non-standard\n Ghidra data as their row type to take advantage of existing dynamic columns for standard\n Ghidra data (like ProgramLocations and Addresses).\n@param rowTypeClass table\u0027s row type\n@return the discovered column",
      "static": true,
      "params": [
        {
          "name": "rowTypeClass",
          "type_long": "java.lang.Class\u003cROW_TYPE\u003e",
          "type_short": "Class",
          "comment": "table\u0027s row type"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cdocking.widgets.table.DynamicTableColumn\u003cROW_TYPE,?,?\u003e\u003e",
        "type_short": "Collection",
        "comment": "the discovered column"
      },
      "throws": []
    },
    {
      "name": "getTableColumExtensions",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cdocking.widgets.table.DynamicTableColumn\u003c?,?,?\u003e\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableColumnForTypes",
      "comment": "If the given DynamicTableColumn is a match for the given rowTypeClass, then\n it will be added to the given list.\n \n Implementation Notes:\n This method does some odd things with Java Generics.  Specifically, it declares three\n generic types, but only relies on the caller of the method to provide one of those types.\n Further, in some cases the method uses the Generic wildcard \u0027?\u0027 feature.  In one case it\n does not use this feature, since we need to create a new object, and the\n compiler requires that we have a type and not a wildcard to do this.  In this usage, we are\n just guaranteeing that the created type matches our needs, even though we don\u0027t know what\n that type actually is.",
      "javadoc": "If the given \u003ccode\u003eDynamicTableColumn\u003c/code\u003e is a match for the given \u003ccode\u003erowTypeClass\u003c/code\u003e, then\n it will be added to the given list.\n \u003cp\u003e\n \u003cu\u003eImplementation Notes:\u003c/u\u003e\n This method does some odd things with Java Generics.  Specifically, it declares three\n generic types, but only relies on the caller of the method to provide one of those types.\n Further, in some cases the method uses the Generic wildcard \u0027?\u0027 feature.  In one case it\n does not use this feature, since we need to create a new object, and the\n compiler requires that we have a type and not a wildcard to do this.  In this usage, we are\n just guaranteeing that the created type matches our needs, even though we don\u0027t know what\n that type actually is.\n@param \u003cCOLUMN_ROW_TYPE\u003e A placeholder type for discovered column row types\n                          that may differ from the given TABLE_ROW_TYPE.\n@param \u003cTABLE_ROW_TYPE\u003e The class of the table\u0027s row data\n@param \u003cCOLUMN_TYPE\u003e The type of object that the column generates from the call to\n                          column\u0027s \u003ctt\u003egetValue()\u003c/t\u003e method.\n@param rowTypeClass The class of the table\u0027s row data (with the same type as\n \t\t\t\t\t\t    COLUMN_ROW_TYPE)\n@param tableColumn The column to add to the given collection if it supports the\n                          given \u003ccode\u003erowTypeClass\u003c/code\u003e.",
      "static": true,
      "params": [
        {
          "name": "rowTypeClass",
          "type_long": "java.lang.Class\u003cTABLE_ROW_TYPE\u003e",
          "type_short": "Class",
          "comment": "The class of the table\u0027s row data (with the same type as\n \t\t\t\t\t\t    COLUMN_ROW_TYPE)"
        },
        {
          "name": "tableColumn",
          "type_long": "docking.widgets.table.DynamicTableColumn\u003c?,?,?\u003e",
          "type_short": "DynamicTableColumn",
          "comment": "The column to add to the given collection if it supports the\n                          given rowTypeClass."
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cdocking.widgets.table.DynamicTableColumn\u003cTABLE_ROW_TYPE,COLUMN_TYPE,DATA_SOURCE\u003e\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableRowObjectMapper",
      "comment": "Returns a TableRowMapper for the given class types if one is found.  The\n returned mapper will know how to translate instances of fromType to\n toType.",
      "javadoc": "Returns a {@link TableRowMapper} for the given class types if one is found.  The\n returned mapper will know how to translate instances of \u003ccode\u003efromType\u003c/code\u003e to\n \u003ccode\u003etoType\u003c/code\u003e.\n@param \u003cROW_TYPE\u003e The type of row that is defined by the table\n@param \u003cEXPECTED_TYPE\u003e The type of row object that is desired\n@param fromType The \u003ccode\u003eClass\u003c/code\u003e object of the given row type\n@param toType The \u003ccode\u003eClass\u003c/code\u003e object of the desired row type\n@return a new TableRowMapper",
      "static": true,
      "params": [
        {
          "name": "fromType",
          "type_long": "java.lang.Class\u003cROW_TYPE\u003e",
          "type_short": "Class",
          "comment": "The Class object of the given row type"
        },
        {
          "name": "toType",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "The Class object of the desired row type"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cdocking.widgets.table.TableRowMapper\u003cROW_TYPE,EXPECTED_TYPE,DATA_SOURCE\u003e\u003e",
        "type_short": "Collection",
        "comment": "a new TableRowMapper"
      },
      "throws": []
    },
    {
      "name": "createMappedTableColumn",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "mappers",
          "type_long": "java.util.Collection\u003cdocking.widgets.table.TableRowMapper\u003cROW_TYPE,EXPECTED_TYPE,DATA_SOURCE\u003e\u003e",
          "type_short": "Collection",
          "comment": ""
        },
        {
          "name": "wrappedColumn",
          "type_long": "docking.widgets.table.DynamicTableColumn\u003cEXPECTED_TYPE,COLUMN_TYPE,DATA_SOURCE\u003e",
          "type_short": "DynamicTableColumn",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cdocking.widgets.table.DynamicTableColumn\u003cROW_TYPE,COLUMN_TYPE,DATA_SOURCE\u003e\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColumnConstraints",
      "comment": "Returns a list of all the ColumnConstraint that are capable of filtering the\n destination type of the given mapper.  The mapper will be used to create a mapped constraint\n that will be called with an instance of the type T.",
      "javadoc": "Returns a list of all the {@link ColumnConstraint} that are capable of filtering the\n destination type of the given mapper.  The mapper will be used to create a mapped constraint\n that will be called with an instance of the type \u003ccode\u003eT\u003c/code\u003e.\n@param mapper the mapper that will be used to convert\n@return a list of all the {@link ColumnConstraint} that are capable of filtering the\n \t\t   given column type",
      "static": true,
      "params": [
        {
          "name": "mapper",
          "type_long": "docking.widgets.table.constraint.ColumnTypeMapper\u003cT,M\u003e",
          "type_short": "ColumnTypeMapper",
          "comment": "the mapper that will be used to convert"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cdocking.widgets.table.constraint.ColumnConstraint\u003cT\u003e\u003e",
        "type_short": "Collection",
        "comment": "a list of all the ColumnConstraint that are capable of filtering the\n \t\t   given column type"
      },
      "throws": []
    },
    {
      "name": "getColumnConstraints",
      "comment": "Returns a list of all the ColumnConstraint that are capable of filtering the\n given column type.",
      "javadoc": "Returns a list of all the {@link ColumnConstraint} that are capable of filtering the\n given column type.\n@param columnType the class of the data that is return by the table model for specific column.\n@return a list of all the {@link ColumnConstraint} that are capable of filtering the\n given column type.",
      "static": true,
      "params": [
        {
          "name": "columnType",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the class of the data that is return by the table model for specific column."
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cdocking.widgets.table.constraint.ColumnConstraint\u003cT\u003e\u003e",
        "type_short": "Collection",
        "comment": "a list of all the ColumnConstraint that are capable of filtering the\n given column type."
      },
      "throws": []
    },
    {
      "name": "initializeColumnConstraints",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generateMappedConstraints",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "mapper",
          "type_long": "docking.widgets.table.constraint.ColumnTypeMapper\u003cT,M\u003e",
          "type_short": "ColumnTypeMapper",
          "comment": ""
        },
        {
          "name": "foundConstraints",
          "type_long": "java.util.List\u003cdocking.widgets.table.constraint.ColumnConstraint\u003c?\u003e\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cdocking.widgets.table.constraint.ColumnConstraint\u003c?\u003e\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mapConstraints",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "mapper",
          "type_long": "docking.widgets.table.constraint.ColumnTypeMapper\u003cT,M\u003e",
          "type_short": "ColumnTypeMapper",
          "comment": ""
        },
        {
          "name": "constraints",
          "type_long": "java.util.Collection\u003cdocking.widgets.table.constraint.ColumnConstraint\u003cM\u003e\u003e",
          "type_short": "Collection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cdocking.widgets.table.constraint.ColumnConstraint\u003cT\u003e\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMatchingConstraints",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "constraints",
          "type_long": "java.util.List\u003cdocking.widgets.table.constraint.ColumnConstraint\u003c?\u003e\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "destinationType",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cdocking.widgets.table.constraint.ColumnConstraint\u003cT\u003e\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasGoodStringConversion",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "columnType",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "wrapToStringConstraints",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "type",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "stringConstraints",
          "type_long": "java.util.Collection\u003cdocking.widgets.table.constraint.ColumnConstraint\u003cjava.lang.String\u003e\u003e",
          "type_short": "Collection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cdocking.widgets.table.constraint.ColumnConstraint\u003cT\u003e\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findColumnConstraints",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cdocking.widgets.table.constraint.ColumnConstraint\u003c?\u003e\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    }
  ]
}
