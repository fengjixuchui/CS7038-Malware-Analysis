{
  "name": "ColumnConstraint",
  "comment": "ColumnConstraints are objects used to filter table rows based on values from a particular column.",
  "javadoc": "ColumnConstraints are objects used to filter table rows based on values from a particular column.\n@param \u003cT\u003e The column type",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "fields": [],
  "methods": [
    {
      "name": "accepts",
      "comment": "Compares value against the current constraint value to determine\n acceptance; true if value satisfies the constraints\u0027 value, false\n otherwise",
      "javadoc": "Compares value against the current constraint value to determine\n acceptance; true if value satisfies the constraints\u0027 value, false\n otherwise\n@param value the column value to be tested.\n@param context provides additional information about the the table and its data. This\n allows the filter to base its decision on information other than just the column value.\n@return true if the column value passes the constraint, false otherwise",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "T",
          "type_short": "T",
          "comment": "the column value to be tested."
        },
        {
          "name": "context",
          "type_long": "docking.widgets.table.constraint.TableFilterContext",
          "type_short": "TableFilterContext",
          "comment": "provides additional information about the the table and its data. This\n allows the filter to base its decision on information other than just the column value."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the column value passes the constraint, false otherwise"
      },
      "throws": []
    },
    {
      "name": "asString",
      "comment": "Returns a reasonable String version of this constraint useful for debugging.",
      "javadoc": "Returns a reasonable String version of this constraint useful for debugging.\n@return the String representation of this constraint",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the String representation of this constraint"
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the name of the constraint",
      "javadoc": "Returns the name of the constraint\n@return the name of the constraint.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the constraint."
      },
      "throws": []
    },
    {
      "name": "getColumnType",
      "comment": "Returns the column type that this constraint can be used to filter.",
      "javadoc": "Returns the column type that this constraint can be used to filter.\n@return the column type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003cT\u003e",
        "type_short": "Class",
        "comment": "the column type"
      },
      "throws": []
    },
    {
      "name": "getEditor",
      "comment": "Returns a ColumnConstraintEditor which will provide gui components for users to edit the\n constraint values.",
      "javadoc": "Returns a ColumnConstraintEditor which will provide gui components for users to edit the\n constraint values.\n@param columnDataSource This provides the constraint with access to the column data in the\n table model as well as the DataProvider of the table (if it has one)\n@return A columnConstraintEditor for editing the constraints value.",
      "static": false,
      "params": [
        {
          "name": "columnDataSource",
          "type_long": "docking.widgets.table.constraint.ColumnData\u003cT\u003e",
          "type_short": "ColumnData",
          "comment": "This provides the constraint with access to the column data in the\n table model as well as the DataProvider of the table (if it has one)"
        }
      ],
      "return": {
        "type_long": "docking.widgets.table.constrainteditor.ColumnConstraintEditor\u003cT\u003e",
        "type_short": "ColumnConstraintEditor",
        "comment": "A columnConstraintEditor for editing the constraints value."
      },
      "throws": []
    },
    {
      "name": "getGroup",
      "comment": "Returns a \"group\" string that is used to logically group column constraints for\n presentation to the user",
      "javadoc": "Returns a \"group\" string that is used to logically group column constraints for\n presentation to the user\n@return the group this constraint belongs to.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the group this constraint belongs to."
      },
      "throws": []
    },
    {
      "name": "getConstraintValueTooltip",
      "comment": "returns a description of the constraint suitable for displaying in a tooltip",
      "javadoc": "returns a description of the constraint suitable for displaying in a tooltip\n@return a description of the constraint.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a description of the constraint."
      },
      "throws": []
    },
    {
      "name": "getConstraintValueString",
      "comment": "Returns the \"value\" of the constraint in string form\n\n This is used for serializing the constraint.",
      "javadoc": "Returns the \"value\" of the constraint in string form\n\n \u003cP\u003eThis is used for serializing the constraint.\n@return the \"value\" of the constraint in string form.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the \"value\" of the constraint in string form."
      },
      "throws": []
    },
    {
      "name": "parseConstraintValue",
      "comment": "Parses the constraint value string for deserialization purposes.",
      "javadoc": "Parses the constraint value string for deserialization purposes.\n@param constraintValueString the value of the constraint in string form.\n@param dataSource the DataSource from the Table.\n@return a new ColumnConstraint",
      "static": false,
      "params": [
        {
          "name": "constraintValueString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the value of the constraint in string form."
        },
        {
          "name": "dataSource",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the DataSource from the Table."
        }
      ],
      "return": {
        "type_long": "docking.widgets.table.constraint.ColumnConstraint\u003cT\u003e",
        "type_short": "ColumnConstraint",
        "comment": "a new ColumnConstraint"
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "ColumnConstraints are displayed by group and then by name",
      "javadoc": "ColumnConstraints are displayed by group and then by name",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "docking.widgets.table.constraint.ColumnConstraint\u003cT\u003e",
          "type_short": "ColumnConstraint",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
