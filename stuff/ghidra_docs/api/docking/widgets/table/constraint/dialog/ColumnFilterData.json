{
  "name": "ColumnFilterData",
  "comment": "This class provides all known ColumnConstraints for a given table column.\n \n Class for maintaining information about a particular table\u0027s column for the purpose of \n configuring filters based on that column\u0027s values.  Instances of this class are generated \n by examining a table\u0027s column types and finding any ColumnConstraints that support \n that type. If column constraints are found, a ColumnFilterData is created for that column \n which then allows filtering on that columns data via the column constraints mechanism (which\n is different than the traditional text filter).",
  "javadoc": "This class provides all known {@link ColumnConstraint}s for a given table column.\n \n \u003cP\u003eClass for maintaining information about a particular table\u0027s column for the purpose of \n configuring filters based on that column\u0027s values.  Instances of this class are generated \n by examining a table\u0027s column types and finding any {@link ColumnConstraint}s that support \n that type. If column constraints are found, a {@link ColumnFilterData} is created for that column \n which then allows filtering on that columns data via the column constraints mechanism (which\n is different than the traditional text filter).\n@param \u003cT\u003e the column type.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "modelIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "applicableConstraints",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cdocking.widgets.table.constraint.ColumnConstraint\u003cT\u003e\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "viewIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new ColumnFilterData for a table column",
      "javadoc": "Constructs a new ColumnFilterData for a table column\n@param model the table model\n@param columnModelIndex the model index of the column\n@param columnViewIndex the view index of the column\n@param columnClass the class (type) of the column",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "docking.widgets.table.RowObjectFilterModel\u003c?\u003e",
          "type_short": "RowObjectFilterModel",
          "comment": "the table model"
        },
        {
          "name": "columnModelIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the model index of the column"
        },
        {
          "name": "columnViewIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the view index of the column"
        },
        {
          "name": "columnClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the class (type) of the column"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeConstraints",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "docking.widgets.table.RowObjectFilterModel\u003c?\u003e",
          "type_short": "RowObjectFilterModel",
          "comment": ""
        },
        {
          "name": "columnClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cdocking.widgets.table.constraint.ColumnConstraint\u003cT\u003e\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setViewIndex",
      "comment": "Sets the viewIndex\n\n This needs to be updated whenever columns are added, deleted, or moved.",
      "javadoc": "Sets the viewIndex\n\n \u003cP\u003eThis needs to be updated whenever columns are added, deleted, or moved.\n@param viewIndex the new view index",
      "static": false,
      "params": [
        {
          "name": "viewIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new view index"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getViewIndex",
      "comment": "Returns the view index of the column",
      "javadoc": "Returns the view index of the column\n@return the view index of the column.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the view index of the column."
      },
      "throws": []
    },
    {
      "name": "isFilterable",
      "comment": "Returns true if the column represented by this data has applicable column filters.",
      "javadoc": "Returns true if the column represented by this data has applicable column filters.\n@return true if the column represented by this data has applicable column filters.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the column represented by this data has applicable column filters."
      },
      "throws": []
    },
    {
      "name": "getConstraints",
      "comment": "Returns the list of applicable constraints for this column",
      "javadoc": "Returns the list of applicable constraints for this column\n@return the list of applicable constraints for this column",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.table.constraint.ColumnConstraint\u003c?\u003e[]",
        "type_short": "docking.widgets.table.constraint.ColumnConstraint\u003c?\u003e[]",
        "comment": "the list of applicable constraints for this column"
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the name of the column represented by this ColumnFilterData",
      "javadoc": "Returns the name of the column represented by this ColumnFilterData\n@return the name of the column represented by this ColumnFilterData",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the column represented by this ColumnFilterData"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConstraint",
      "comment": "Returns the ColumnConstraint with the given name",
      "javadoc": "Returns the ColumnConstraint with the given name\n@param constraintName the name of the constraint to retrieve\n@return the ColumnConstraint with the given name.",
      "static": false,
      "params": [
        {
          "name": "constraintName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the constraint to retrieve"
        }
      ],
      "return": {
        "type_long": "docking.widgets.table.constraint.ColumnConstraint\u003cT\u003e",
        "type_short": "ColumnConstraint",
        "comment": "the ColumnConstraint with the given name."
      },
      "throws": []
    },
    {
      "name": "getColumnModelIndex",
      "comment": "Returns the model index for the column represented by this class.",
      "javadoc": "Returns the model index for the column represented by this class.\n@return the model index for the column represented by this class.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the model index for the column represented by this class."
      },
      "throws": []
    },
    {
      "name": "getFirstConstraint",
      "comment": "Returns the first constraint in the list.",
      "javadoc": "Returns the first constraint in the list.\n@return the constraint",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.table.constraint.ColumnConstraint\u003cT\u003e",
        "type_short": "ColumnConstraint",
        "comment": "the constraint"
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "docking.widgets.table.constraint.dialog.ColumnFilterData\u003cT\u003e",
          "type_short": "ColumnFilterData",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "replace",
      "comment": "Replace the same named constraint with the given constraint.  This allows the\n column constraint to remember the last used value.",
      "javadoc": "Replace the same named constraint with the given constraint.  This allows the\n column constraint to remember the last used value.\n@param value the constraint to be used to replace the existing one with the same name.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "docking.widgets.table.constraint.ColumnConstraint\u003cT\u003e",
          "type_short": "ColumnConstraint",
          "comment": "the constraint to be used to replace the existing one with the same name."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
