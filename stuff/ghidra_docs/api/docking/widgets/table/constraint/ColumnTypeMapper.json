{
  "name": "ColumnTypeMapper",
  "comment": "ColumnConstraintTypeMappers allows columns of one type be filterable using an existing ColumnConstraint\n for a different type by defining a  mapping from the column type to the desired\n filter type. To get the benefit of one of these mappers, all that is required is to implement\n one of these mappers.  The mapper class must be public and it\u0027s name must end in \"TypeMapper\".\n\n \n For example, if you have a column type of \"Person\" that holds various information about a person\n including their age and you want to filter on their age, you could define a ColumnTypeMapper that\n converts a \"Person\" to an int.  Just by creating such a mapper class, any table with \"Person\"\n column types would now be able to filter on a person\u0027s age.\n \n In the example above, you created a filter of a single attribute of person.  If, however, you\n want more than that, you could instead create a new ColumnConstraint that filters on\n more attributes of a Person.  See NumberColumnConstraintProvider for an example\n of how to create these ColumnConstraints and their associated editors.\n ",
  "javadoc": "ColumnConstraintTypeMappers allows columns of one type be filterable using an existing {@link ColumnConstraint}\n for a different type by defining a  mapping from the column type to the desired\n filter type. To get the benefit of one of these mappers, all that is required is to implement\n one of these mappers.  The mapper class must be public and it\u0027s name must end in \"TypeMapper\".\n\n \u003cP\u003e\n For example, if you have a column type of \"Person\" that holds various information about a person\n including their age and you want to filter on their age, you could define a ColumnTypeMapper that\n converts a \"Person\" to an int.  Just by creating such a mapper class, any table with \"Person\"\n column types would now be able to filter on a person\u0027s age.\n \u003cP\u003e\n In the example above, you created a filter of a single attribute of person.  If, however, you\n want more than that, you could instead create a new {@link ColumnConstraint} that filters on\n more attributes of a Person.  See {@link NumberColumnConstraintProvider} for an example\n of how to create these ColumnConstraints and their associated editors.\n \u003cP\u003e\n@param \u003cT\u003e The column type that has no inherent {@link ColumnConstraint} for filtering that\n column type.\n@param \u003cM\u003e The column type to map to that already has {@link ColumnConstraint}s defined\n for that type.",
  "static": false,
  "implements": [
    "ghidra.util.classfinder.ExtensionPoint"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "sourceType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Class\u003cT\u003e",
      "type_short": "Class",
      "constant_value": null
    },
    {
      "name": "destinationType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Class\u003cM\u003e",
      "type_short": "Class",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceType",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "destinationType",
          "type_long": "java.lang.Class\u003cM\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "convert",
      "comment": "Converts an object of type T1 to an object of type T2",
      "javadoc": "Converts an object of type T1 to an object of type T2\n@param value the object to convert.\n@return the converted object.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "T",
          "type_short": "T",
          "comment": "the object to convert."
        }
      ],
      "return": {
        "type_long": "M",
        "type_short": "M",
        "comment": "the converted object."
      },
      "throws": []
    },
    {
      "name": "getSourceType",
      "comment": "Returns the class of the objects that this mapper will convert from.",
      "javadoc": "Returns the class of the objects that this mapper will convert from.\n@return the class of the objects that this mapper will convert from.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003cT\u003e",
        "type_short": "Class",
        "comment": "the class of the objects that this mapper will convert from."
      },
      "throws": []
    },
    {
      "name": "getDestinationType",
      "comment": "Returns the class of the objects that this mapper will convert to.",
      "javadoc": "Returns the class of the objects that this mapper will convert to.\n@return the class of the objects that this mapper will convert to.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003cM\u003e",
        "type_short": "Class",
        "comment": "the class of the objects that this mapper will convert to."
      },
      "throws": []
    },
    {
      "name": "findSourceType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003cT\u003e",
        "type_short": "Class",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findDestinationType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003cM\u003e",
        "type_short": "Class",
        "comment": ""
      },
      "throws": []
    }
  ]
}
