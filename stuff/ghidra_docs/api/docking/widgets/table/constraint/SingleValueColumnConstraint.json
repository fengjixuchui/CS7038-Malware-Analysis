{
  "name": "SingleValueColumnConstraint",
  "comment": "Abstract base class for single value constraints such as \"At Most\" or \"At Least\"",
  "javadoc": "Abstract base class for single value constraints such as \"At Most\" or \"At Least\"\n@param \u003cT\u003e the column type",
  "static": false,
  "implements": [
    "docking.widgets.table.constraint.ColumnConstraint"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "name",
      "comment": "This constraints\u0027 name\n \n It sometimes makes grammatical sense to set a more useful name than the default;\n while \u0027at least\u0027 makes sense for a number-based constraint, \u0027after\u0027 reads better for\n date-based constraints.",
      "javadoc": "This constraints\u0027 name\n \u003cp\u003e\n It sometimes makes grammatical sense to set a more useful name than the default;\n while \u0027at least\u0027 makes sense for a number-based constraint, \u0027after\u0027 reads better for\n date-based constraints.",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "constraintValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "T",
      "type_short": "T",
      "constant_value": null
    },
    {
      "name": "editorProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.table.constraint.provider.EditorProvider\u003cT\u003e",
      "type_short": "EditorProvider",
      "constant_value": null
    },
    {
      "name": "group",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param name the name of the constraint.\n@param constraintValue the value of this constraint to be compared with column values.\n@param editorProvider the editor provider that generates the appropriate editors for\n constraints of this type.\n@param group the group of the constraint for visual grouping when presenting to the user.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the constraint."
        },
        {
          "name": "constraintValue",
          "type_long": "T",
          "type_short": "T",
          "comment": "the value of this constraint to be compared with column values."
        },
        {
          "name": "editorProvider",
          "type_long": "docking.widgets.table.constraint.provider.EditorProvider\u003cT\u003e",
          "type_short": "EditorProvider",
          "comment": "the editor provider that generates the appropriate editors for\n constraints of this type."
        },
        {
          "name": "group",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the group of the constraint for visual grouping when presenting to the user."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGroup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConstraintValue",
      "comment": "Returns the constraint value",
      "javadoc": "Returns the constraint value\n@return the constraint value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the constraint value"
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "subclasses must override to generate new versions of themselves but with new comparison value.",
      "javadoc": "subclasses must override to generate new versions of themselves but with new comparison value.\n@param newValue the new value to compare column values against.\n@return a new ColumnConstraint that is the same type as this constraint but with a new comparison value.",
      "static": false,
      "params": [
        {
          "name": "newValue",
          "type_long": "T",
          "type_short": "T",
          "comment": "the new value to compare column values against."
        }
      ],
      "return": {
        "type_long": "docking.widgets.table.constraint.SingleValueColumnConstraint\u003cT\u003e",
        "type_short": "SingleValueColumnConstraint",
        "comment": "a new ColumnConstraint that is the same type as this constraint but with a new comparison value."
      },
      "throws": []
    },
    {
      "name": "getEditor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "columnDataSource",
          "type_long": "docking.widgets.table.constraint.ColumnData\u003cT\u003e",
          "type_short": "ColumnData",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "docking.widgets.table.constrainteditor.ColumnConstraintEditor\u003cT\u003e",
        "type_short": "ColumnConstraintEditor",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConstraintValueString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseConstraintValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "dataSource",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "docking.widgets.table.constraint.ColumnConstraint\u003cT\u003e",
        "type_short": "ColumnConstraint",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColumnType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003cT\u003e",
        "type_short": "Class",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
