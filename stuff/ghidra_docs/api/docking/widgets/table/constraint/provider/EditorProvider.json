{
  "name": "EditorProvider",
  "comment": "Class used by some generic constraints to fulfill their requirement to provide and editor. These types\n of constraints are passed in an EditorProvider in their constructor.  This allows these constraint\n types to be created using generics without subclassing.",
  "javadoc": "Class used by some generic constraints to fulfill their requirement to provide and editor. These types\n of constraints are passed in an EditorProvider in their constructor.  This allows these constraint\n types to be created using generics without subclassing.\n@param \u003cT\u003e the constraint type.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getEditor",
      "comment": "Returns an editor initialized to the given columnConstraint.",
      "javadoc": "Returns an editor initialized to the given columnConstraint.\n@param columnConstraint the constraint whose value is to be edited.\n@param columnData the context of the data in the table.\n@return an editor initialized to the given columnConstraint.",
      "static": false,
      "params": [
        {
          "name": "columnConstraint",
          "type_long": "docking.widgets.table.constraint.ColumnConstraint\u003cT\u003e",
          "type_short": "ColumnConstraint",
          "comment": "the constraint whose value is to be edited."
        },
        {
          "name": "columnData",
          "type_long": "docking.widgets.table.constraint.ColumnData\u003cT\u003e",
          "type_short": "ColumnData",
          "comment": "the context of the data in the table."
        }
      ],
      "return": {
        "type_long": "docking.widgets.table.constrainteditor.ColumnConstraintEditor\u003cT\u003e",
        "type_short": "ColumnConstraintEditor",
        "comment": "an editor initialized to the given columnConstraint."
      },
      "throws": []
    },
    {
      "name": "parseValue",
      "comment": "Parses the given string into a T object.",
      "javadoc": "Parses the given string into a T object.\n@param value the value to parse.\n@param dataSource the table\u0027s context object.\n@return a new T object created by parsing the given string.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the value to parse."
        },
        {
          "name": "dataSource",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the table\u0027s context object."
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "a new T object created by parsing the given string."
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Converts the T value into a string that can be parsed back by the #parseValue(String, Object) method.",
      "javadoc": "Converts the T value into a string that can be parsed back by the {@link #parseValue(String, Object)} method.\n@param value the value to convert to a parsable string.\n@return The parsable string fromthe T value.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "T",
          "type_short": "T",
          "comment": "the value to convert to a parsable string."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The parsable string fromthe T value."
      },
      "throws": []
    }
  ]
}
