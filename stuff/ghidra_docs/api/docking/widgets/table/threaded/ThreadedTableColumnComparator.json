{
  "name": "ThreadedTableColumnComparator",
  "comment": "A comparator for comparing table column values for threaded table models.  This comparator\n uses the column cache of the ThreadedTableModel.",
  "javadoc": "A comparator for comparing table column values for threaded table models.  This comparator\n uses the column cache of the {@link ThreadedTableModel}.\n@param \u003cT\u003e the row type",
  "static": false,
  "implements": [],
  "extends": "docking.widgets.table.sort.RowBasedColumnComparator",
  "fields": [
    {
      "name": "threadedModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.table.threaded.ThreadedTableModel\u003cT,?\u003e",
      "type_short": "ThreadedTableModel",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs this class with the given column comparator that will get called after the\n given row is converted to the column value for the given sort column",
      "javadoc": "Constructs this class with the given column comparator that will get called after the\n given row is converted to the column value for the given sort column\n@param model the table model using this comparator\n@param sortColumn the column being sorted\n@param comparator the column comparator to use for sorting\n@see RowBasedColumnComparator",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "docking.widgets.table.threaded.ThreadedTableModel\u003cT,?\u003e",
          "type_short": "ThreadedTableModel",
          "comment": "the table model using this comparator"
        },
        {
          "name": "sortColumn",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column being sorted"
        },
        {
          "name": "comparator",
          "type_long": "java.util.Comparator\u003cjava.lang.Object\u003e",
          "type_short": "Comparator",
          "comment": "the column comparator to use for sorting"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "This version of the constructor is used for the default case where the client will \n supply a backup row comparator that will get called if the given column comparator returns\n a \u00270\u0027 value.",
      "javadoc": "This version of the constructor is used for the default case where the client will \n supply a backup row comparator that will get called if the given column comparator returns\n a \u00270\u0027 value.\n@param model the table model using this comparator\n@param sortColumn the column being sorted\n@param comparator the column comparator to use for sorting\n@param backupRowComparator the backup row comparator\n@see RowBasedColumnComparator",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "docking.widgets.table.threaded.ThreadedTableModel\u003cT,?\u003e",
          "type_short": "ThreadedTableModel",
          "comment": "the table model using this comparator"
        },
        {
          "name": "sortColumn",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column being sorted"
        },
        {
          "name": "comparator",
          "type_long": "java.util.Comparator\u003cjava.lang.Object\u003e",
          "type_short": "Comparator",
          "comment": "the column comparator to use for sorting"
        },
        {
          "name": "backupRowComparator",
          "type_long": "java.util.Comparator\u003cjava.lang.Object\u003e",
          "type_short": "Comparator",
          "comment": "the backup row comparator"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColumnValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "t",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    }
  ]
}
