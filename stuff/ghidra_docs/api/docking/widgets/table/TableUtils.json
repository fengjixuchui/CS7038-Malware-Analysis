{
  "name": "TableUtils",
  "comment": "A utility class for JTables used in Ghidra.",
  "javadoc": "A utility class for JTables used in Ghidra.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableCellStringValue",
      "comment": "Uses the given row-based table model, row object and column index to determine what the\n String value should be for that cell.\n \n This is used to provide a means for filtering on the text that is displayed to the user.",
      "javadoc": "Uses the given row-based table model, row object and column index to determine what the\n String value should be for that cell.\n \n \u003cP\u003eThis is used to provide a means for filtering on the text that is displayed to the user.\n@param \u003cROW_OBJECT\u003e The model\u0027s row object type\n@param model the model\n@param rowObject the row object for the row being queried\n@param column the column index \u003cb\u003ein the table model\u003c/b\u003e\n@return the string value; null if no value can be fabricated",
      "static": true,
      "params": [
        {
          "name": "model",
          "type_long": "docking.widgets.table.RowObjectTableModel\u003cROW_OBJECT\u003e",
          "type_short": "RowObjectTableModel",
          "comment": "the model"
        },
        {
          "name": "rowObject",
          "type_long": "ROW_OBJECT",
          "type_short": "ROW_OBJECT",
          "comment": "the row object for the row being queried"
        },
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column index in the table model"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string value; null if no value can be fabricated"
      },
      "throws": []
    },
    {
      "name": "getRenderedColumnValue",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "model",
          "type_long": "docking.widgets.table.RowObjectTableModel\u003cROW_OBJECT\u003e",
          "type_short": "RowObjectTableModel",
          "comment": ""
        },
        {
          "name": "columnValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "columnIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColumnRenderer",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "columnBasedModel",
          "type_long": "docking.widgets.table.DynamicColumnTableModel\u003cROW_OBJECT\u003e",
          "type_short": "DynamicColumnTableModel",
          "comment": ""
        },
        {
          "name": "columnIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.table.column.GColumnRenderer\u003cjava.lang.Object\u003e",
        "type_short": "GColumnRenderer",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "columnSelected",
      "comment": "Attempts to sort the given table based upon the given column index.  If the TableModel\n of the given table is not a SortedTableModel, then this method will do nothing.\n \n If the given column index is not sortable, then this method will not change the state of\n the model.  Otherwise, the sorted model will be sorted on the given column index.  The \n results of calling this method depend upon the current sorted state of the given column:\n \n if the column is not yet the sorted column, then the column is made the sorted \n column, if sortable, and any other sorted columns will be made unsorted, or\n if the column is the sorted column and the direction will simply be toggled.\n ",
      "javadoc": "Attempts to sort the given table based upon the given column index.  If the {@link TableModel}\n of the given table is not a {@link SortedTableModel}, then this method will do nothing.\n \u003cp\u003e\n If the given column index is not sortable, then this method will not change the state of\n the model.  Otherwise, the sorted model will be sorted on the given column index.  The \n results of calling this method depend upon the current sorted state of the given column:\n \u003col\u003e\n \u003cli\u003eif the column is not yet the sorted column, then the column is made the sorted \n column, if sortable, \u003cb\u003eand any other sorted columns will be made unsorted\u003c/b\u003e, or\u003c/li\u003e\n \u003cli\u003eif the column is the sorted column and the direction will simply be toggled.\u003c/li\u003e\n \u003c/ol\u003e\n@param table The table whose model shall be sorted.\n@param columnIndex The column index upon which to sort.",
      "static": true,
      "params": [
        {
          "name": "table",
          "type_long": "javax.swing.JTable",
          "type_short": "JTable",
          "comment": "The table whose model shall be sorted."
        },
        {
          "name": "columnIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column index upon which to sort."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "columnAlternativelySelected",
      "comment": "Attempts to sort the given table based upon the given column index.  If the TableModel\n of the given table is not a SortedTableModel, then this method will do nothing.\n \n If the given column index is not sortable, then this method will not change the state of\n the model. The results of calling this method depend upon the current sorted state \n of the given column:\n \n   if the column is not yet sorted, then the column is made sorted, if sortable, \n   and any other sorted columns will not be changed, or\n   if the column is sorted, then:\n     \n      if there are other sorted columns, this column will no longer be sorted\n      if there are no other sorted columns, then no action will be taken\n     \n   \n ",
      "javadoc": "Attempts to sort the given table based upon the given column index.  If the {@link TableModel}\n of the given table is not a {@link SortedTableModel}, then this method will do nothing.\n \u003cp\u003e\n If the given column index is not sortable, then this method will not change the state of\n the model. The results of calling this method depend upon the current sorted state \n of the given column:\n \u003col\u003e\n   \u003cli\u003eif the column is not yet sorted, then the column is made sorted, if sortable, \n   \u003cb\u003eand any other sorted columns will not be changed\u003c/b\u003e, or\u003c/li\u003e\n   \u003cli\u003eif the column is sorted, then:\n     \u003col\u003e\n      \u003cli\u003eif there are other sorted columns, this column will no longer be sorted\u003c/li\u003e\n      \u003cli\u003eif there are no other sorted columns, then no action will be taken\u003c/li\u003e\n     \u003c/ol\u003e\n   \u003c/li\u003e\n \u003c/ol\u003e\n@param table The table whose model shall be sorted.\n@param columnIndex The column index upon which to sort.",
      "static": true,
      "params": [
        {
          "name": "table",
          "type_long": "javax.swing.JTable",
          "type_short": "JTable",
          "comment": "The table whose model shall be sorted."
        },
        {
          "name": "columnIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column index upon which to sort."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSortedTableModel",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "table",
          "type_long": "javax.swing.JTable",
          "type_short": "JTable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "docking.widgets.table.SortedTableModel",
        "type_short": "SortedTableModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColumnModelIndex",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "table",
          "type_long": "javax.swing.JTable",
          "type_short": "JTable",
          "comment": ""
        },
        {
          "name": "columnIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "repaintTableHeader",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "table",
          "type_long": "javax.swing.JTable",
          "type_short": "JTable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
