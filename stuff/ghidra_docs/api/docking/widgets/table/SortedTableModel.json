{
  "name": "SortedTableModel",
  "comment": "A table model that allows for setting the sorted column(s) and direction",
  "javadoc": "A table model that allows for setting the sorted column(s) and direction",
  "static": false,
  "implements": [
    "javax.swing.table.TableModel"
  ],
  "fields": [
    {
      "name": "ASCENDING_ORDER",
      "comment": "Sort order in ascending order.",
      "javadoc": "Sort order in ascending order.",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": "true"
    },
    {
      "name": "DESCENDING_ORDER",
      "comment": "Sort order in descending order.",
      "javadoc": "Sort order in descending order.",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": "false"
    }
  ],
  "methods": [
    {
      "name": "isSortable",
      "comment": "Returns true if the specified columnIndex is sortable.",
      "javadoc": "Returns true if the specified columnIndex is sortable.\n@param columnIndex the column index\n@return true if the specified columnIndex is sortable",
      "static": false,
      "params": [
        {
          "name": "columnIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column index"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the specified columnIndex is sortable"
      },
      "throws": []
    },
    {
      "name": "getPrimarySortColumnIndex",
      "comment": "Returns the column index that is the primary sorted column; -1 if no column is sorted",
      "javadoc": "Returns the column index that is the primary sorted column; -1 if no column is sorted\n@return the index",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index"
      },
      "throws": []
    },
    {
      "name": "setTableSortState",
      "comment": "Sets the sort state for this table model",
      "javadoc": "Sets the sort state for this table model\n@param state the sort state",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "docking.widgets.table.TableSortState",
          "type_short": "TableSortState",
          "comment": "the sort state"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableSortState",
      "comment": "Gets the sort state of this sorted model",
      "javadoc": "Gets the sort state of this sorted model\n@return the current sort state",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.table.TableSortState",
        "type_short": "TableSortState",
        "comment": "the current sort state"
      },
      "throws": []
    },
    {
      "name": "addSortListener",
      "comment": "Adds a listener to be notified when the sort state of this model changes. \n \n Note: the listener may be stored in a weak collection, which means you have to \n          maintain a handle to the listener so that it does not get garbage collected.\n ",
      "javadoc": "Adds a listener to be notified when the sort state of this model changes. \n \u003cbr\u003e\n \u003cb\u003eNote: the listener may be stored in a weak collection, which means you have to \n          maintain a handle to the listener so that it does not get garbage collected.\n \u003c/b\u003e\n@param l the listener",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "docking.widgets.table.SortListener",
          "type_short": "SortListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
