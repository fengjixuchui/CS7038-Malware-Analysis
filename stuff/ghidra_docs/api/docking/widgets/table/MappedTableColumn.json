{
  "name": "MappedTableColumn",
  "comment": "A class that is an Adapter in order to allow for the use of existing \n DynamicTableColumns when the actual row type of the table is\n not the same as the row type that the DynamicTableColumn supports.",
  "javadoc": "A class that is an Adapter in order to allow for the use of existing \n {@link DynamicTableColumn}s when the actual row type of the table is\n not the same as the row type that the {@link DynamicTableColumn} supports.\n@param \u003cROW_TYPE\u003e The table\u0027s actual row type\n@param \u003cEXPECTED_ROW_TYPE\u003e The row type expected by the given {@link DynamicTableColumn}\n@param \u003cCOLUMN_TYPE\u003e The column type provided by the given {@link DynamicTableColumn}\n@param \u003cDATA_SOURCE\u003e the type of the data for each column; can be Object for columns that\n                      do not have a data source",
  "static": false,
  "implements": [],
  "extends": "docking.widgets.table.AbstractDynamicTableColumn",
  "fields": [
    {
      "name": "mapper",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.table.TableRowMapper\u003cROW_TYPE,EXPECTED_ROW_TYPE,DATA_SOURCE\u003e",
      "type_short": "TableRowMapper",
      "constant_value": null
    },
    {
      "name": "tableColumn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.table.DynamicTableColumn\u003cEXPECTED_ROW_TYPE,COLUMN_TYPE,DATA_SOURCE\u003e",
      "type_short": "DynamicTableColumn",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "mapper",
          "type_long": "docking.widgets.table.TableRowMapper\u003cROW_TYPE,EXPECTED_ROW_TYPE,DATA_SOURCE\u003e",
          "type_short": "TableRowMapper",
          "comment": ""
        },
        {
          "name": "tableColumn",
          "type_long": "docking.widgets.table.DynamicTableColumn\u003cEXPECTED_ROW_TYPE,COLUMN_TYPE,DATA_SOURCE\u003e",
          "type_short": "DynamicTableColumn",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "mapper",
          "type_long": "docking.widgets.table.TableRowMapper\u003cROW_TYPE,EXPECTED_ROW_TYPE,DATA_SOURCE\u003e",
          "type_short": "TableRowMapper",
          "comment": ""
        },
        {
          "name": "tableColumn",
          "type_long": "docking.widgets.table.DynamicTableColumn\u003cEXPECTED_ROW_TYPE,COLUMN_TYPE,DATA_SOURCE\u003e",
          "type_short": "DynamicTableColumn",
          "comment": ""
        },
        {
          "name": "uniqueIdentifier",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMappedColumnClass",
      "comment": "Returns the class of the column that this mapper wraps",
      "javadoc": "Returns the class of the column that this mapper wraps\n@return the class of the column that this mapper wraps",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003c?\u003e",
        "type_short": "Class",
        "comment": "the class of the column that this mapper wraps"
      },
      "throws": []
    },
    {
      "name": "getColumnClass",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003cCOLUMN_TYPE\u003e",
        "type_short": "Class",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSupportedRowType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003cROW_TYPE\u003e",
        "type_short": "Class",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColumnDisplayName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColumnDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColumnName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaxLines",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColumnRenderer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.table.column.GColumnRenderer\u003cCOLUMN_TYPE\u003e",
        "type_short": "GColumnRenderer",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSettingsDefinitions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.docking.settings.SettingsDefinition[]",
        "type_short": "ghidra.docking.settings.SettingsDefinition[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColumnPreferredWidth",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComparator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Comparator\u003cCOLUMN_TYPE\u003e",
        "type_short": "Comparator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rowObject",
          "type_long": "ROW_TYPE",
          "type_short": "ROW_TYPE",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "data",
          "type_long": "DATA_SOURCE",
          "type_short": "DATA_SOURCE",
          "comment": ""
        },
        {
          "name": "serviceProvider",
          "type_long": "ghidra.framework.plugintool.ServiceProvider",
          "type_short": "ServiceProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "COLUMN_TYPE",
        "type_short": "COLUMN_TYPE",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
