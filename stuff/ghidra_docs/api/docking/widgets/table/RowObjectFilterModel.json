{
  "name": "RowObjectFilterModel",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "docking.widgets.table.RowObjectTableModel"
  ],
  "fields": [
    {
      "name": "SUB_FILTERING_DISABLED_PROPERTY",
      "comment": "This property allows for the disabling of \u0027sub-filtering\u0027.  When enabled, which is the\n default, data from current filters will be reused when additional filter criteria is\n added to that current filter.  For example,\n \n \n Given a table has a \u0027contains\u0027 filter with a text value of \u0027bob\u0027,\n \n then, if the users types an \u0027o\u0027 into the filter field, producing a value of \u0027bobo\u0027,\n \n then the data that matched \u0027bob\u0027 will be used as the data to filter for the new \u0027bobo\u0027\n text.\n \n\n The downside of this is that we cache data for every completed filter.  So, in a\n degenerate case, with a large dataset, with many incremental filtering steps, where each\n did not significantly reduce the previous set of data, the table could then consume\n a large amount of memory, roughly equal to allData.size() * numberOfFilterSteps\n\n Most tables do not have enough data for this to have a significant impact.",
      "javadoc": "This property allows for the disabling of \u0027sub-filtering\u0027.  When enabled, which is the\n default, data from current filters will be reused when additional filter criteria is\n added to that current filter.  For example,\n \u003cblockquote\u003e\n \u003cp\u003e\n Given a table has a \u0027contains\u0027 filter with a text value of \u0027bob\u0027,\n \u003cp\u003e\n then, if the users types an \u0027o\u0027 into the filter field, producing a value of \u0027bobo\u0027,\n \u003cp\u003e\n then the data that matched \u0027bob\u0027 will be used as the data to filter for the new \u0027bobo\u0027\n text.\n \u003c/blockquote\u003e\n\n \u003cp\u003eThe downside of this is that we cache data for every completed filter.  So, in a\n degenerate case, with a large dataset, with many incremental filtering steps, where each\n did not significantly reduce the previous set of data, the table could then consume\n a large amount of memory, roughly equal to \u003ccode\u003eallData.size() * numberOfFilterSteps\u003c/code\u003e\n\n \u003cp\u003eMost tables do not have enough data for this to have a significant impact.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"tables.subfilter.disabled\""
    }
  ],
  "methods": [
    {
      "name": "setTableFilter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "filter",
          "type_long": "docking.widgets.table.TableFilter\u003cROW_OBJECT\u003e",
          "type_short": "TableFilter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableFilter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.table.TableFilter\u003cROW_OBJECT\u003e",
        "type_short": "TableFilter",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isFiltered",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUnfilteredRowCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUnfilteredData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cROW_OBJECT\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getModelRow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "viewRow",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getViewRow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "modelRow",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getViewIndex",
      "comment": "Returns the view index of the given item.  When filtered, this is the index is the smaller,\n visible set of data; when unfiltered, this index is the same as that returned by\n #getModelIndex(Object).\n \n This operation will be O(n) unless the implementation is sorted, in which case the \n operation is O(log n), as it uses a binary search.",
      "javadoc": "Returns the view index of the given item.  When filtered, this is the index is the smaller,\n visible set of data; when unfiltered, this index is the same as that returned by\n {@link #getModelIndex(Object)}.\n \n \u003cp\u003eThis operation will be O(n) unless the implementation is sorted, in which case the \n operation is O(log n), as it uses a binary search.\n@param t the item\n@return the view index",
      "static": false,
      "params": [
        {
          "name": "t",
          "type_long": "ROW_OBJECT",
          "type_short": "ROW_OBJECT",
          "comment": "the item"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the view index"
      },
      "throws": []
    },
    {
      "name": "getModelIndex",
      "comment": "Returns the model index of the given item.  When filtered, this is the index is the larger,\n set of data; when unfiltered, this index is the same as that returned by\n #getModelIndex(Object).\n \n This operation will be O(n) unless the implementation is sorted, in which case the \n operation is O(log n), as it uses a binary search.",
      "javadoc": "Returns the model index of the given item.  When filtered, this is the index is the larger,\n set of data; when unfiltered, this index is the same as that returned by\n {@link #getModelIndex(Object)}.\n \n \u003cp\u003eThis operation will be O(n) unless the implementation is sorted, in which case the \n operation is O(log n), as it uses a binary search.\n@param t the item\n@return the model index",
      "static": false,
      "params": [
        {
          "name": "t",
          "type_long": "ROW_OBJECT",
          "type_short": "ROW_OBJECT",
          "comment": "the item"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the model index"
      },
      "throws": []
    }
  ]
}
