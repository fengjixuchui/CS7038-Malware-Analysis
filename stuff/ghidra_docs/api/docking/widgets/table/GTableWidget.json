{
  "name": "GTableWidget",
  "comment": "A GUI that provides a filterable table.  You are required to provide the method names\n of T that should be used to create columns in the table.",
  "javadoc": "A GUI that provides a filterable table.  You are required to provide the method names\n of \u003ccode\u003eT\u003c/code\u003e that should be used to create columns in the table.\n@param \u003cT\u003e the row object type that will be in the table",
  "static": false,
  "implements": [],
  "extends": "javax.swing.JPanel",
  "fields": [
    {
      "name": "myModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.table.AnyObjectTableModel\u003cT\u003e",
      "type_short": "AnyObjectTableModel",
      "constant_value": null
    },
    {
      "name": "gFilterTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.table.GFilterTable\u003cT\u003e",
      "type_short": "GFilterTable",
      "constant_value": null
    },
    {
      "name": "table",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.table.GTable",
      "type_short": "GTable",
      "constant_value": null
    },
    {
      "name": "listener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.table.TableItemPickedListener\u003cT\u003e",
      "type_short": "TableItemPickedListener",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "modelName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "tClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "methodNames",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "modelName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "methods",
          "type_long": "java.lang.reflect.Method[]",
          "type_short": "java.lang.reflect.Method[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "modelName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "tClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "methodNames",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "modelName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "methodNames",
          "type_long": "java.util.List\u003cjava.lang.reflect.Method\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "init",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "docking.widgets.table.AnyObjectTableModel\u003cT\u003e",
          "type_short": "AnyObjectTableModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setColumnPreferredWidths",
      "comment": "Sets the column preferred widths.  If you give less widths then there are columns, then\n the widths will be applied in order, with the remaining columns going untouched.\n \n Note: this method needs to be called after building your columns. So, call this after\n making any calls to #addColumn(AbstractDynamicTableColumn).\n \n WARNING!  If you set the widths to a size that is smaller than the total display,\n then the table model will apply the extra space equally across your columns, resulting\n in sizes that you did not set.  So, the best way to use this method is to set the\n actual preferred size for your small columns and then set a very large size (400 or so)\n for your columns that can be any size.\n ",
      "javadoc": "Sets the column preferred widths.  If you give less widths then there are columns, then\n the widths will be applied in order, with the remaining columns going untouched.\n \u003cp\u003e\n Note: this method needs to be called after building your columns. So, call this after\n making any calls to {@link #addColumn(AbstractDynamicTableColumn)}.\n \u003cp\u003e\n \u003cb\u003eWARNING!\u003c/b\u003e  If you set the widths to a size that is smaller than the total display,\n then the table model will apply the extra space equally across your columns, resulting\n in sizes that you did not set.  So, the best way to use this method is to set the\n actual preferred size for your small columns and then set a very large size (400 or so)\n for your columns that can be any size.\n \u003cp\u003e\n@param widths the widths to apply",
      "static": false,
      "params": [
        {
          "name": "widths",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "the widths to apply"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSortColumn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSortColumn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "ascending",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processMouseClicked",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setItemPickListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "docking.widgets.table.TableItemPickedListener\u003cT\u003e",
          "type_short": "TableItemPickedListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "java.util.List\u003cT\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "java.util.Collection\u003cT\u003e",
          "type_short": "Collection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSelectedRowObjects",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSelectedRowCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addSelectionListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "docking.widgets.table.ObjectSelectedListener\u003cT\u003e",
          "type_short": "ObjectSelectedListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeSelectionListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "docking.widgets.table.ObjectSelectedListener\u003cT\u003e",
          "type_short": "ObjectSelectedListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getItemAt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "point",
          "type_long": "java.awt.Point",
          "type_short": "Point",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.table.AnyObjectTableModel\u003cT\u003e",
        "type_short": "AnyObjectTableModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addColumn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "column",
          "type_long": "docking.widgets.table.AbstractDynamicTableColumn\u003cT,?,java.lang.Object\u003e",
          "type_short": "AbstractDynamicTableColumn",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addColumn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "column",
          "type_long": "docking.widgets.table.AbstractDynamicTableColumn\u003cT,?,java.lang.Object\u003e",
          "type_short": "AbstractDynamicTableColumn",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRowCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRowObject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "selectRow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "selectRowObject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rowObject",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSelectedRow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "rowAtPoint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "point",
          "type_long": "java.awt.Point",
          "type_short": "Point",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isRowSelected",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.table.GTable",
        "type_short": "GTable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "focusFilter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFilterText",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
