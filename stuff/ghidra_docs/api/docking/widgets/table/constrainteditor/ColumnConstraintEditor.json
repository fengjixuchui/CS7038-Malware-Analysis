{
  "name": "ColumnConstraintEditor",
  "comment": "Defines the contract for building user-interface elements for manipulating\n constraint configuration.",
  "javadoc": "Defines the contract for building user-interface elements for manipulating\n constraint configuration.\n@param \u003cT\u003e the column type",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getInlineComponent",
      "comment": "The inline component resides in the configuration interface on the same\n visual line as the column and constraint selection widgets. It is intended to be\n a relatively small and simple interface for configuring the constraints\u0027 values.",
      "javadoc": "The \u003ci\u003einline\u003c/i\u003e component resides in the configuration interface on the same\n visual line as the column and constraint selection widgets. It is intended to be\n a relatively small and simple interface for configuring the constraints\u0027 values.\n@return the inline editor component",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": "the inline editor component"
      },
      "throws": []
    },
    {
      "name": "getDetailComponent",
      "comment": "The detail component resides in the configuration interface below\n the column and constraint selection widgets, and is afforded greater space.\n It is intended to be a more feature-rich editor that provides greater\n insight or control of the constraints value definition.",
      "javadoc": "The \u003ci\u003edetail\u003c/i\u003e component resides in the configuration interface below\n the column and constraint selection widgets, and is afforded greater space.\n It is intended to be a more feature-rich editor that provides greater\n insight or control of the constraints value definition.\n@return the detail editor component",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": "the detail editor component"
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "Get the current value from the editor, in the form of a constraint.",
      "javadoc": "Get the current value from the editor, in the form of a constraint.\n@return the editors\u0027 current value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.table.constraint.ColumnConstraint\u003cT\u003e",
        "type_short": "ColumnConstraint",
        "comment": "the editors\u0027 current value"
      },
      "throws": []
    },
    {
      "name": "setValue",
      "comment": "Set the current value within the editor",
      "javadoc": "Set the current value within the editor\n@param value the new value to set",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "docking.widgets.table.constraint.ColumnConstraint\u003cT\u003e",
          "type_short": "ColumnConstraint",
          "comment": "the new value to set"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "reset",
      "comment": "Reset the editor to a known-good state.",
      "javadoc": "Reset the editor to a known-good state.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasValidValue",
      "comment": "Determine if the editor contains a valid value; do the UI widgets and state\n match, is the state sensible for the constraint.",
      "javadoc": "Determine if the editor contains a valid value; do the UI widgets and state\n match, is the state sensible for the constraint.\n@return true if the configuration is valid, false otherwise",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the configuration is valid, false otherwise"
      },
      "throws": []
    },
    {
      "name": "getErrorMessage",
      "comment": "If the editor contains and invalid value, this message should indicate\n why the value is invalid. Only called if hasValidValue() returns false.",
      "javadoc": "If the editor contains and invalid value, this message should indicate\n why the value is invalid. Only called if \u003ccode\u003ehasValidValue()\u003c/code\u003e returns false.\n@return an error message, or an empty string if no error",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "an error message, or an empty string if no error"
      },
      "throws": []
    },
    {
      "name": "addChangeListener",
      "comment": "Register a callback handler for responding to changes made within the editor",
      "javadoc": "Register a callback handler for responding to changes made within the editor\n@param constraintEditorChangeListener listener callback",
      "static": false,
      "params": [
        {
          "name": "constraintEditorChangeListener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "listener callback"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeChangeListener",
      "comment": "Remove a callback handler that was responding changes made within the editor",
      "javadoc": "Remove a callback handler that was responding changes made within the editor\n@param constraintEditorChangeListener listener callback",
      "static": false,
      "params": [
        {
          "name": "constraintEditorChangeListener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "listener callback"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
