{
  "name": "MappedColumnConstraintEditor",
  "comment": "A constraint editor that supports object type conversions, wrapping the editor for the\n converted-to type. This is used to convert one column type to another that we already have\n editors for. For example, suppose there is a Foo type where the column is returning Foo objects\n but the rendering is just displaying Foo.getName().  In this case you would create a FooEditor\n that wraps the various string editors. So even though the column uses Foo objects, the user\n filters on just strings.",
  "javadoc": "A constraint editor that supports object type conversions, wrapping the editor for the\n converted-to type. This is used to convert one column type to another that we already have\n editors for. For example, suppose there is a Foo type where the column is returning Foo objects\n but the rendering is just displaying Foo.getName().  In this case you would create a FooEditor\n that wraps the various string editors. So even though the column uses Foo objects, the user\n filters on just strings.\n@param \u003cT\u003e The column (mapped from) type.\n@param \u003cM\u003e the mapped to type.",
  "static": false,
  "implements": [
    "docking.widgets.table.constrainteditor.ColumnConstraintEditor"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "delegateEditor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.table.constrainteditor.ColumnConstraintEditor\u003cM\u003e",
      "type_short": "ColumnConstraintEditor",
      "constant_value": null
    },
    {
      "name": "constraint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.table.constraint.MappedColumnConstraint\u003cT,M\u003e",
      "type_short": "MappedColumnConstraint",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor.",
      "javadoc": "Constructor.\n@param constraint Type-converting constraint for which this component is an editor.\n@param delegateEditor Editor for the converted-to type.",
      "static": false,
      "params": [
        {
          "name": "constraint",
          "type_long": "docking.widgets.table.constraint.MappedColumnConstraint\u003cT,M\u003e",
          "type_short": "MappedColumnConstraint",
          "comment": "Type-converting constraint for which this component is an editor."
        },
        {
          "name": "delegateEditor",
          "type_long": "docking.widgets.table.constrainteditor.ColumnConstraintEditor\u003cM\u003e",
          "type_short": "ColumnConstraintEditor",
          "comment": "Editor for the converted-to type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInlineComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDetailComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.table.constraint.ColumnConstraint\u003cT\u003e",
        "type_short": "ColumnConstraint",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setValue",
      "comment": "Sets the T-converted-to-W type in the delegate editor\n \n ",
      "javadoc": "Sets the \u003ccode\u003eT\u003c/code\u003e-converted-to-\u003ccode\u003eW\u003c/code\u003e type in the delegate editor\n \u003cp\u003e\n {@inheritDoc}\n@param value the new value to set",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "docking.widgets.table.constraint.ColumnConstraint\u003cT\u003e",
          "type_short": "ColumnConstraint",
          "comment": "the new value to set"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "reset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasValidValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getErrorMessage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addChangeListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "constraintEditorChangeListener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeChangeListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "constraintEditorChangeListener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
