{
  "name": "GTableCellRenderer",
  "comment": "A default table cell renderer that relies on the toString() method\n when rendering the cells of the table.",
  "javadoc": "A default table cell renderer that relies on the \u003ccode\u003etoString()\u003c/code\u003e method\n when rendering the cells of the table.",
  "static": false,
  "implements": [
    "javax.swing.table.TableCellRenderer"
  ],
  "extends": "docking.widgets.AbstractGCellRenderer",
  "fields": [
    {
      "name": "INTEGER_RADIX_SETTING",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.docking.settings.FormatSettingsDefinition",
      "type_short": "FormatSettingsDefinition",
      "constant_value": null
    },
    {
      "name": "INTEGER_SIGNEDNESS_MODE_SETTING",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.docking.settings.IntegerSignednessFormattingModeSettingsDefinition",
      "type_short": "IntegerSignednessFormattingModeSettingsDefinition",
      "constant_value": null
    },
    {
      "name": "FLOATING_POINT_PRECISION_SETTING",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.docking.settings.FloatingPointPrecisionSettingsDefinition",
      "type_short": "FloatingPointPrecisionSettingsDefinition",
      "constant_value": null
    },
    {
      "name": "decimalFormat",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.text.DecimalFormat",
      "type_short": "DecimalFormat",
      "constant_value": null
    },
    {
      "name": "decimalFormatCache",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Map\u003cjava.lang.Integer,java.text.DecimalFormat\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new GTableCellRenderer.",
      "javadoc": "Constructs a new GTableCellRenderer.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new GTableCellRenderer using the specified font.",
      "javadoc": "Constructs a new GTableCellRenderer using the specified font.\n@param f the font to use when rendering text in the table cells",
      "static": false,
      "params": [
        {
          "name": "f",
          "type_long": "java.awt.Font",
          "type_short": "Font",
          "comment": "the font to use when rendering text in the table cells"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getText",
      "comment": "Return the cell renderer text",
      "javadoc": "Return the cell renderer text\n@param value Cell object value\n@return A string interpretation of value; generated by calling value.toString()",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "Cell object value"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "A string interpretation of value; generated by calling value.toString()"
      },
      "throws": []
    },
    {
      "name": "getTableCellRendererComponent",
      "comment": "Satisfies the Java javax.swing.table.TableCellRenderer interface; retrieves\n column data via a GTableCellRenderingData object, and defers painting to\n #getTableCellRendererComponent(GTableCellRenderingData).\n \n This is marked final to redirect subclasses to the enhanced method,\n #getTableCellRendererComponent(GTableCellRenderingData).\n \n Throws an AssertException if the table this renderer is used with is not a\n docking.widgets.table.GTable instance.",
      "javadoc": "Satisfies the Java {@link javax.swing.table.TableCellRenderer} interface; retrieves\n column data via a GTableCellRenderingData object, and defers painting to\n {@link #getTableCellRendererComponent(GTableCellRenderingData)}.\n \u003cp\u003e\n This is marked \u003ccode\u003efinal\u003c/code\u003e to redirect subclasses to the enhanced method,\n {@link #getTableCellRendererComponent(GTableCellRenderingData)}.\n \u003cp\u003e\n Throws an AssertException if the table this renderer is used with is not a\n {@link docking.widgets.table.GTable} instance.\n@see javax.swing.table.TableCellRenderer#getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)\n@see #getTableCellRendererComponent(GTableCellRenderingData)",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "javax.swing.JTable",
          "type_short": "JTable",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "isSelected",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "hasFocus",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableCellRendererComponent",
      "comment": "Provide basic cell rendering -- setting foreground and background colors, font, text,\n alignment, drop color, and border. Additional data that may be of use to the renderer\n is passed through the docking.widgets.table.GTableCellRenderingData object.",
      "javadoc": "Provide basic cell rendering -- setting foreground and background colors, font, text,\n alignment, drop color, and border. Additional data that may be of use to the renderer\n is passed through the {@link docking.widgets.table.GTableCellRenderingData} object.\n@param data Context data used in the rendering of a data cell.\n@return The component used for drawing the table cell.",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "docking.widgets.table.GTableCellRenderingData",
          "type_short": "GTableCellRenderingData",
          "comment": "Context data used in the rendering of a data cell."
        }
      ],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": "The component used for drawing the table cell."
      },
      "throws": []
    },
    {
      "name": "setForegroundColor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "javax.swing.JTable",
          "type_short": "JTable",
          "comment": ""
        },
        {
          "name": "model",
          "type_long": "javax.swing.table.TableModel",
          "type_short": "TableModel",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "configureFont",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "javax.swing.JTable",
          "type_short": "JTable",
          "comment": ""
        },
        {
          "name": "model",
          "type_long": "javax.swing.table.TableModel",
          "type_short": "TableModel",
          "comment": ""
        },
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "formatNumber",
      "comment": "Format a Number per the Settings parameters.",
      "javadoc": "Format a Number per the Settings parameters.\n@param value the number to format\n@param settings settings controlling the display of the Number parameter\n@return a formatted representation of the Number value",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "java.lang.Number",
          "type_short": "Number",
          "comment": "the number to format"
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "settings controlling the display of the Number parameter"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a formatted representation of the Number value"
      },
      "throws": []
    },
    {
      "name": "getFormatter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "digitsPrecision",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.text.DecimalFormat",
        "type_short": "DecimalFormat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initFormatCache",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createDecimalFormat",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "digitsPrecision",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
