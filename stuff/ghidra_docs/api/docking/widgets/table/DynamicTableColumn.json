{
  "name": "DynamicTableColumn",
  "comment": "The root interface for defining columns for GDynamicColumnTableModels.  The \n class allows you to create objects for tables that know how to give a column value for a\n given row.",
  "javadoc": "The root interface for defining columns for {@link GDynamicColumnTableModel}s.  The \n class allows you to create objects for tables that know how to give a column value for a\n given row.\n@param \u003cROW_TYPE\u003e The row object class supported by this column\n@param \u003cCOLUMN_TYPE\u003e The column object class supported by this column\n@param \u003cDATA_SOURCE\u003e The object class type that will be passed to \n \t\t\t\t\t\tsee \u003ccode\u003egetValue(ROW_TYPE, Settings, DATA_SOURCE, ServiceProvider)\u003c/code\u003e",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getColumnName",
      "comment": "Determines the unique column heading that may be used to identify a column instance.\n This name must be non-changing and is used to save/restore state information.",
      "javadoc": "Determines the unique column heading that may be used to identify a column instance.\n This name must be non-changing and is used to save/restore state information.\n@return the field instance name.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the field instance name."
      },
      "throws": []
    },
    {
      "name": "getColumnClass",
      "comment": "Determines the class of object that is associated with this field (column).",
      "javadoc": "Determines the class of object that is associated with this field (column).\n@return the column class",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003cCOLUMN_TYPE\u003e",
        "type_short": "Class",
        "comment": "the column class"
      },
      "throws": []
    },
    {
      "name": "getColumnPreferredWidth",
      "comment": "Returns the preferred width for this column.  Column should either return a valid positive \n preferred size or -1.",
      "javadoc": "Returns the preferred width for this column.  Column should either return a valid positive \n preferred size or -1.\n@return the preferred width for this column.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the preferred width for this column."
      },
      "throws": []
    },
    {
      "name": "getSupportedRowType",
      "comment": "Returns the single class type of the data that this table field can use to \n     generate columnar data.",
      "javadoc": "Returns the single class type of the data that this table field can use to \n     generate columnar data.\n@return the single class type of the data that this table field can use to \n     generate columnar data.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003cROW_TYPE\u003e",
        "type_short": "Class",
        "comment": "the single class type of the data that this table field can use to \n     generate columnar data."
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "Creates an object that is appropriate for this field (table column) and for the \n object that is associated with this row of the table.",
      "javadoc": "Creates an object that is appropriate for this field (table column) and for the \n object that is associated with this row of the table.\n@param rowObject the object associated with the row in the table.\n@param settings field settings\n@param data the expected data object, as defined by the DATA_SOURCE type\n@param serviceProvider the {@link ServiceProvider} associated with the table.\n@return the object for the model to display in the table cell.\n@throws IllegalArgumentException if the rowObject is not one supported by this class.",
      "static": false,
      "params": [
        {
          "name": "rowObject",
          "type_long": "ROW_TYPE",
          "type_short": "ROW_TYPE",
          "comment": "the object associated with the row in the table."
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "field settings"
        },
        {
          "name": "data",
          "type_long": "DATA_SOURCE",
          "type_short": "DATA_SOURCE",
          "comment": "the expected data object, as defined by the DATA_SOURCE type"
        },
        {
          "name": "serviceProvider",
          "type_long": "ghidra.framework.plugintool.ServiceProvider",
          "type_short": "ServiceProvider",
          "comment": "the ServiceProvider associated with the table."
        }
      ],
      "return": {
        "type_long": "COLUMN_TYPE",
        "type_short": "COLUMN_TYPE",
        "comment": "the object for the model to display in the table cell."
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if the rowObject is not one supported by this class."
        }
      ]
    },
    {
      "name": "getColumnRenderer",
      "comment": "Returns the optional cell renderer for this column; null if no renderer is used.\n \n This method allows columns to define custom rendering.  The interface returned here \n ensures that the text used for filtering matches what the users sees (via the\n GColumnRenderer#getFilterString(Object, Settings) method).\n \n Note: some types should not make use of the aforementioned filter string.  These types\n include the Number wrapper types, Date and Enums.  (This is \n because the filtering system works naturally with these types.)   See GColumnRenderer.",
      "javadoc": "Returns the optional cell renderer for this column; null if no renderer is used.\n \n \u003cP\u003eThis method allows columns to define custom rendering.  The interface returned here \n ensures that the text used for filtering matches what the users sees (via the\n {@link GColumnRenderer#getFilterString(Object, Settings)} method).\n \n \u003cP\u003eNote: some types should not make use of the aforementioned filter string.  These types\n include the {@link Number} wrapper types, {@link Date} and {@link Enum}s.  (This is \n because the filtering system works naturally with these types.)   See {@link GColumnRenderer}.\n@return the renderer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.table.column.GColumnRenderer\u003cCOLUMN_TYPE\u003e",
        "type_short": "GColumnRenderer",
        "comment": "the renderer"
      },
      "throws": []
    },
    {
      "name": "getSettingsDefinitions",
      "comment": "Returns a list of settings definitions for this field.",
      "javadoc": "Returns a list of settings definitions for this field.\n@return list of settings definitions for this field.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.docking.settings.SettingsDefinition[]",
        "type_short": "ghidra.docking.settings.SettingsDefinition[]",
        "comment": "list of settings definitions for this field."
      },
      "throws": []
    },
    {
      "name": "getMaxLines",
      "comment": "Gets the maximum number of text display lines needed for any given cell with the \n specified settings.",
      "javadoc": "Gets the maximum number of text display lines needed for any given cell with the \n specified settings.\n@param settings field settings\n@return maximum number of lines needed",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "field settings"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "maximum number of lines needed"
      },
      "throws": []
    },
    {
      "name": "getColumnDisplayName",
      "comment": "Determines the column heading that will be displayed.",
      "javadoc": "Determines the column heading that will be displayed.\n@param settings the settings\n@return the field name to display as the column heading.",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "the settings"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the field name to display as the column heading."
      },
      "throws": []
    },
    {
      "name": "getColumnDescription",
      "comment": "Returns a description of this column.  This may be used as a tooltip for the column header",
      "javadoc": "Returns a description of this column.  This may be used as a tooltip for the column header\n@return a description of this column.  This may be used as a tooltip for the column header.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a description of this column.  This may be used as a tooltip for the column header."
      },
      "throws": []
    },
    {
      "name": "getUniqueIdentifier",
      "comment": "Returns a value that is unique for this table column.  This is different than getting\n the display name, which may be shared by different columns.",
      "javadoc": "Returns a value that is unique for this table column.  This is different than getting\n the display name, which may be shared by different columns.\n@return the identifier",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the identifier"
      },
      "throws": []
    },
    {
      "name": "getComparator",
      "comment": "If implemented, will return a comparator that knows how to sort values for this column.  \n Implementors should return null if they do not wish to provider a comparator",
      "javadoc": "If implemented, will return a comparator that knows how to sort values for this column.  \n Implementors should return \u003ccode\u003enull\u003c/code\u003e if they do not wish to provider a comparator\n@return the comparator",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Comparator\u003cCOLUMN_TYPE\u003e",
        "type_short": "Comparator",
        "comment": "the comparator"
      },
      "throws": []
    }
  ]
}
