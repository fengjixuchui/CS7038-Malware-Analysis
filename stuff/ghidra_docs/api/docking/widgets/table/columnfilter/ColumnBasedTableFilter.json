{
  "name": "ColumnBasedTableFilter",
  "comment": "A TableFilter  that filters based on column values\n\n This class maintains a list of ColumnConstraintSet objects that are logically combined\n to determine if the overall filter accepts the given row object. Each ColumnConstraint has an\n associated LogicOperation which determines how its result are combined with the constraint\n set before it. (The first ConstraintSets LogicOperation is not used).  AND operations have higher\n precedence than the OR operations.",
  "javadoc": "A {@link TableFilter}  that filters based on column values\n\n \u003cP\u003eThis class maintains a list of {@link ColumnConstraintSet} objects that are logically combined\n to determine if the overall filter accepts the given row object. Each ColumnConstraint has an\n associated {@link LogicOperation} which determines how its result are combined with the constraint\n set before it. (The first ConstraintSets LogicOperation is not used).  AND operations have higher\n precedence than the OR operations.\n@param \u003cR\u003e the row type of the table",
  "static": false,
  "implements": [
    "docking.widgets.table.TableFilter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "model",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.table.RowObjectTableModel\u003cR\u003e",
      "type_short": "RowObjectTableModel",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "constraintSets",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cdocking.widgets.table.columnfilter.ColumnConstraintSet\u003cR,?\u003e\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "tableFilterContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.table.constraint.TableFilterContext",
      "type_short": "TableFilterContext",
      "constant_value": null
    },
    {
      "name": "orList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.table.columnfilter.ColumnBasedTableFilter\u003cR\u003e.OrList",
      "type_short": "OrList",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new empty ColumnBasedTableFilter",
      "javadoc": "Constructs a new empty ColumnBasedTableFilter\n@param model the table model",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "docking.widgets.table.RowObjectTableModel\u003cR\u003e",
          "type_short": "RowObjectTableModel",
          "comment": "the table model"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.table.columnfilter.ColumnBasedTableFilter\u003cR\u003e",
        "type_short": "ColumnBasedTableFilter",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "acceptsRow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rowObject",
          "type_long": "R",
          "type_short": "R",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildOrList",
      "comment": "Organizes the list of constraint sets into groups that will first be \"ANDed\" together, then\n those \"AND\" groups will be \"ORed\" together.",
      "javadoc": "Organizes the list of constraint sets into groups that will first be \"ANDed\" together, then\n those \"AND\" groups will be \"ORed\" together.\n@return the list of \"AND\" groups that will be \"ORed\" together.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.table.columnfilter.ColumnBasedTableFilter\u003cR\u003e.OrList",
        "type_short": "OrList",
        "comment": "the list of \"AND\" groups that will be \"ORed\" together."
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the name of this filter.\n\n Names are used for saving filters, so unless they are saved they typically don\u0027t have a name.",
      "javadoc": "Returns the name of this filter.\n\n \u003cP\u003eNames are used for saving filters, so unless they are saved they typically don\u0027t have a name.\n@return the name of this filter.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of this filter."
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "Sets the name of this filter.",
      "javadoc": "Sets the name of this filter.\n@param name the new name for this filter.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new name for this filter."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addConstraintSet",
      "comment": "Adds a new constraintSet to this ColumnBasedTableFilter",
      "javadoc": "Adds a new constraintSet to this ColumnBasedTableFilter\n@param logicalOp The logic operation (AND or OR) for how the new ConstraintSet\u0027s result will be\n combined with the previous ConstraintSet\u0027s result.\n@param columnIndex the model index of the column whose values must past the given constraint filters.\n@param constraints a list of ColumnConstraints where at least one must pass for the constraintSet to pass.",
      "static": false,
      "params": [
        {
          "name": "logicalOp",
          "type_long": "docking.widgets.table.columnfilter.LogicOperation",
          "type_short": "LogicOperation",
          "comment": "The logic operation (AND or OR) for how the new ConstraintSet\u0027s result will be\n combined with the previous ConstraintSet\u0027s result."
        },
        {
          "name": "columnIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the model index of the column whose values must past the given constraint filters."
        },
        {
          "name": "constraints",
          "type_long": "java.util.List\u003cdocking.widgets.table.constraint.ColumnConstraint\u003cT\u003e\u003e",
          "type_short": "List",
          "comment": "a list of ColumnConstraints where at least one must pass for the constraintSet to pass."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSubFilterOf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tableFilter",
          "type_long": "docking.widgets.table.TableFilter\u003c?\u003e",
          "type_short": "TableFilter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasColumnFilter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "columnModelIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConstraintSets",
      "comment": "Return the list of ConstraintSets in this TableFilter",
      "javadoc": "Return the list of ConstraintSets in this TableFilter\n@return the list of ConstraintSets in this TableFilter",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cdocking.widgets.table.columnfilter.ColumnConstraintSet\u003cR,?\u003e\u003e",
        "type_short": "List",
        "comment": "the list of ConstraintSets in this TableFilter"
      },
      "throws": []
    },
    {
      "name": "save",
      "comment": "Serializes this filter into a SaveState object.",
      "javadoc": "Serializes this filter into a SaveState object.\n@return the SaveState serialized version of this filter.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.options.SaveState",
        "type_short": "SaveState",
        "comment": "the SaveState serialized version of this filter."
      },
      "throws": []
    },
    {
      "name": "restore",
      "comment": "Restore this filter from the given saveState.",
      "javadoc": "Restore this filter from the given saveState.\n@param saveState that contains the serialized filter data\n@param dataSource the Table\u0027s DataSource which some objects might need to restore themselves.",
      "static": false,
      "params": [
        {
          "name": "saveState",
          "type_long": "ghidra.framework.options.SaveState",
          "type_short": "SaveState",
          "comment": "that contains the serialized filter data"
        },
        {
          "name": "dataSource",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the Table\u0027s DataSource which some objects might need to restore themselves."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHtmlRepresentation",
      "comment": "Returns an HTML description of this filter.\n \n Note: the HTML string returned does NOT start with the HTML tag so that it can be combined\n with other text.",
      "javadoc": "Returns an HTML description of this filter.\n \u003cP\u003e\n Note: the HTML string returned does NOT start with the HTML tag so that it can be combined\n with other text.\n@return an HTML description of this filter.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "an HTML description of this filter."
      },
      "throws": []
    },
    {
      "name": "getToolTip",
      "comment": "Return a tooltip  that describes the effect of this filter for a specific filter.",
      "javadoc": "Return a tooltip  that describes the effect of this filter for a specific filter.\n@param columnIndex the model index of the column to get a filter description of.\n@return a tooltip that describes this filter for a specific column.",
      "static": false,
      "params": [
        {
          "name": "columnIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the model index of the column to get a filter description of."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a tooltip that describes this filter for a specific column."
      },
      "throws": []
    },
    {
      "name": "getHtmlRepresentation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "filters",
          "type_long": "java.util.List\u003cdocking.widgets.table.columnfilter.ColumnConstraintSet\u003cR,?\u003e\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEquivalent",
      "comment": "Checks if the given ColumnBasedTableFilter is the same as this one except for\n its name.",
      "javadoc": "Checks if the given {@link ColumnBasedTableFilter} is the same as this one except for\n its name.\n@param other the other filter to check for equivalence.\n@return true if the other filter is the same as this one except for its name",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "docking.widgets.table.columnfilter.ColumnBasedTableFilter\u003c?\u003e",
          "type_short": "ColumnBasedTableFilter",
          "comment": "the other filter to check for equivalence."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the other filter is the same as this one except for its name"
      },
      "throws": []
    },
    {
      "name": "getDataSource",
      "comment": "Gets the table\u0027s DataSource (if it has one). Only table models\n that extends GDynamicColumnTableModel can have a data source.",
      "javadoc": "Gets the table\u0027s DataSource (if it has one). Only table models\n that extends {@link GDynamicColumnTableModel} can have a data source.\n@return the table\u0027s data source or null if the table doesn\u0027t have one.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "the table\u0027s data source or null if the table doesn\u0027t have one."
      },
      "throws": []
    },
    {
      "name": "isSaved",
      "comment": "Returns true if this filter has been saved (i.e. has a name)",
      "javadoc": "Returns true if this filter has been saved (i.e. has a name)\n@return true if this filter has been saved (i.e. has a name)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this filter has been saved (i.e. has a name)"
      },
      "throws": []
    }
  ]
}
