{
  "name": "GhidraFile",
  "comment": "An extension of File that does not translate to the\n native operating system\u0027s file separator.\n For example, on Windows:\n \n File f \u003d new File(\"c:/temp/foo.txt\");\n String path \u003d f.getAbsolutePath();\n In this case, path equals \"c:\\temp\\foo.txt\".\n However using GhidraFile, path would still equal \"c:/temp/foo.txt\"",
  "javadoc": "An extension of File that does not translate to the\n native operating system\u0027s file separator.\n For example, on Windows:\n \u003cbr\u003e\n \u003ccode\u003eFile f \u003d new File(\"c:/temp/foo.txt\");\u003c/code\u003e\u003cbr\u003e\n \u003ccode\u003eString path \u003d f.getAbsolutePath();\u003c/code\u003e\u003cbr\u003e\n In this case, path equals \"c:\\temp\\foo.txt\".\n However using GhidraFile, path would still equal \"c:/temp/foo.txt\"",
  "static": false,
  "implements": [],
  "extends": "java.io.File",
  "fields": [
    {
      "name": "serialVersionUID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "nativeSeparator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "char",
      "type_short": "char",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new GhidraFile.",
      "javadoc": "Construct a new GhidraFile.\n@param parent the parent directory; eg, \"c:\\temp\"\n@param child the child file name; eg, \"foo.txt\"\n@param separator the separator character; eg, \u0027/\u0027 or \u0027\\\u0027",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the parent directory; eg, \"c:\\temp\""
        },
        {
          "name": "child",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the child file name; eg, \"foo.txt\""
        },
        {
          "name": "separator",
          "type_long": "char",
          "type_short": "char",
          "comment": "the separator character; eg, \u0027/\u0027 or \u0027\\\u0027"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new GhidraFile.",
      "javadoc": "Construct a new GhidraFile.\n@param path the path to the file; eg, \"c:\\temp\\foo.txt\" or \"temp\\foo.txt\"\n@param separator the separator character; eg, \u0027/\u0027 or \u0027\\\u0027",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path to the file; eg, \"c:\\temp\\foo.txt\" or \"temp\\foo.txt\""
        },
        {
          "name": "separator",
          "type_long": "char",
          "type_short": "char",
          "comment": "the separator character; eg, \u0027/\u0027 or \u0027\\\u0027"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new GhidraFile.",
      "javadoc": "Construct a new GhidraFile.\n@param parent the parent file path\n@param name the name of the file\n@param separator the separator character; eg, \u0027/\u0027 or \u0027\\\u0027",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the parent file path"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the file"
        },
        {
          "name": "separator",
          "type_long": "char",
          "type_short": "char",
          "comment": "the separator character; eg, \u0027/\u0027 or \u0027\\\u0027"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAbsoluteFile",
      "comment": "",
      "javadoc": "@see java.io.File#getAbsoluteFile()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCanonicalFile",
      "comment": "",
      "javadoc": "@see java.io.File#getCanonicalFile()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getAbsolutePath",
      "comment": "",
      "javadoc": "@see java.io.File#getAbsolutePath()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCanonicalPath",
      "comment": "",
      "javadoc": "@see java.io.File#getCanonicalPath()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getParent",
      "comment": "",
      "javadoc": "@see java.io.File#getParent()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParentFile",
      "comment": "",
      "javadoc": "@see java.io.File#getParentFile()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPath",
      "comment": "",
      "javadoc": "@see java.io.File#getPath()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
