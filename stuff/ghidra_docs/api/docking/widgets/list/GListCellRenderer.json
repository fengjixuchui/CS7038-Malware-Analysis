{
  "name": "GListCellRenderer",
  "comment": "Provides a common implementation of a list renderer, for use in both JList and JComboBox.\n \n HTML rendering defaults to disabled.  See #setHTMLRenderingEnabled(boolean).",
  "javadoc": "Provides a common implementation of a list renderer, for use in both JList and JComboBox.\n \u003cp\u003e\n HTML rendering defaults to disabled.  See {@link #setHTMLRenderingEnabled(boolean)}.\n@param \u003cE\u003e the element-type this list models.",
  "static": false,
  "implements": [
    "javax.swing.ListCellRenderer"
  ],
  "extends": "docking.widgets.AbstractGCellRenderer",
  "fields": [],
  "methods": [
    {
      "name": "createDefaultCellTextRenderer",
      "comment": "Returns a new ListCellRenderer that maps the list\u0027s data instance to a string used in the cell.\n \n Use this if you only need to provide a way to get the string value from the type being shown\n in the list.",
      "javadoc": "Returns a new ListCellRenderer that maps the list\u0027s data instance to a string used in the cell.\n \u003cp\u003e\n Use this if you only need to provide a way to get the string value from the type being shown\n in the list.\n@param cellToTextMappingFunction a function that maps your custom type to a string value\n@return new GListCellRenderer instance",
      "static": true,
      "params": [
        {
          "name": "cellToTextMappingFunction",
          "type_long": "java.util.function.Function\u003cE,java.lang.String\u003e",
          "type_short": "Function",
          "comment": "a function that maps your custom type to a string value"
        }
      ],
      "return": {
        "type_long": "docking.widgets.list.GListCellRenderer\u003cE\u003e",
        "type_short": "GListCellRenderer",
        "comment": "new GListCellRenderer instance"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new GListCellRenderer.",
      "javadoc": "Constructs a new GListCellRenderer.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getItemText",
      "comment": "Return the cell renderer text",
      "javadoc": "Return the cell renderer text\n@param value Cell object value\n@return A string interpretation of value; generated by calling value.toString()",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "E",
          "type_short": "E",
          "comment": "Cell object value"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "A string interpretation of value; generated by calling value.toString()"
      },
      "throws": []
    },
    {
      "name": "getListCellRendererComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "javax.swing.JList\u003c? extends E\u003e",
          "type_short": "JList",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "E",
          "type_short": "E",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "isSelected",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "hasFocus",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setForegroundColor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "javax.swing.JList\u003c? extends E\u003e",
          "type_short": "JList",
          "comment": ""
        },
        {
          "name": "model",
          "type_long": "javax.swing.ListModel\u003c? extends E\u003e",
          "type_short": "ListModel",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "configureFont",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "javax.swing.JList\u003c? extends E\u003e",
          "type_short": "JList",
          "comment": ""
        },
        {
          "name": "model",
          "type_long": "javax.swing.ListModel\u003c? extends E\u003e",
          "type_short": "ListModel",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "computePlainTextListCellDimensions",
      "comment": "Returns the width, height necessary to display the largest element in this list.\n \n Useful for setting a JList\u0027s fixed cell width and height to the actual necessary size.\n \n NOTE: the items and the renderer must be in plain text mode, not HTML rendering mode.",
      "javadoc": "Returns the width, height necessary to display the largest element in this list.\n \u003cp\u003e\n Useful for setting a JList\u0027s fixed cell width and height to the actual necessary size.\n \u003cp\u003e\n NOTE: the items and the renderer must be in plain text mode, not HTML rendering mode.\n@param list the JList that uses this cell renderer\n@param items the items to measure\n@param minWidth the minimum width that can be returned\n@param minHeight the minimum height that can be returned\n@return a new Dimension containing a width and height value necessary to display the largest\n element in the list",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "javax.swing.JList\u003c? extends E\u003e",
          "type_short": "JList",
          "comment": "the JList that uses this cell renderer"
        },
        {
          "name": "items",
          "type_long": "java.util.List\u003cE\u003e",
          "type_short": "List",
          "comment": "the items to measure"
        },
        {
          "name": "minWidth",
          "type_long": "int",
          "type_short": "int",
          "comment": "the minimum width that can be returned"
        },
        {
          "name": "minHeight",
          "type_long": "int",
          "type_short": "int",
          "comment": "the minimum height that can be returned"
        }
      ],
      "return": {
        "type_long": "java.awt.Dimension",
        "type_short": "Dimension",
        "comment": "a new Dimension containing a width and height value necessary to display the largest\n element in the list"
      },
      "throws": []
    }
  ]
}
