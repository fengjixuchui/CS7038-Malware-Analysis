{
  "name": "DropDownSelectionTextField",
  "comment": "A text field that handles comparing text typed by the user to the list of objects\n and then presenting potential matches in a drop down window.  This class differs from \n its parent in that it allows the user to select items from the popup list.\n \n Usage note: Typically this text field will not be used directly, but will \n instead be used indirectly by way of an editor.\n If this field is used directly, then the user should use #setSelectedValue(Object) and\n #getSelectedValue() to get and set data on this field, rather than calling \n #setText(String) and #getText().\n \n Usage notes:\n \t\n \t\tPressing ENTER with the drop-down list open will select and item and close \n \t\t\tthe list\n \t\tPressing ENTER with the drop-down list not showing will trigger an\n \t\t\teditingStopped() event, signaling that the user has made a choice\n \t\tPressing ESCAPE with the drop-down list open will close the list\n \t\tPressing ESCAPE with the drop-down list not showing will trigger an \n \t\t\teditingCancelled() event, signaling that the user has cancelled editing\n  ",
  "javadoc": "A text field that handles comparing text typed by the user to the list of objects\n and then presenting potential matches in a drop down window.  This class differs from \n its parent in that it allows the user to select items from the popup list.\n \n \u003cP\u003e\u003cb\u003eUsage note:\u003c/b\u003e Typically this text field will not be used directly, but will \n instead be used indirectly by way of an editor.\n If this field is used directly, then the user should use \u003cins\u003e{@link #setSelectedValue(Object)}\u003c/ins\u003e and\n \u003cins\u003e{@link #getSelectedValue()}\u003c/ins\u003e to get and set data on this field, rather than calling \n \u003cdel\u003e{@link #setText(String)}\u003c/del\u003e and \u003cdel\u003e{@link #getText()}\u003c/del\u003e.\n \n \u003cP\u003eUsage notes:\n \t\u003cUL\u003e\n \t\t\u003cLI\u003ePressing ENTER with the drop-down list open will select and item and close \n \t\t\tthe list\u003c/LI\u003e\n \t\t\u003cLI\u003ePressing ENTER with the drop-down list not showing will trigger an\n \t\t\teditingStopped() event, signaling that the user has made a choice\u003c/LI\u003e\n \t\t\u003cLI\u003ePressing ESCAPE with the drop-down list open will close the list\u003c/LI\u003e\n \t\t\u003cLI\u003ePressing ESCAPE with the drop-down list not showing will trigger an \n \t\t\teditingCancelled() event, signaling that the user has cancelled editing\u003c/LI\u003e\n  \u003c/UL\u003e\n@param \u003cT\u003e The type of object that this model manipulates",
  "static": false,
  "implements": [],
  "extends": "docking.widgets.DropDownTextField",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataModel",
          "type_long": "docking.widgets.DropDownTextFieldDataModel\u003cT\u003e",
          "type_short": "DropDownTextFieldDataModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createListSelectionModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.ListSelectionModel",
        "type_short": "ListSelectionModel",
        "comment": ""
      },
      "throws": []
    }
  ]
}
