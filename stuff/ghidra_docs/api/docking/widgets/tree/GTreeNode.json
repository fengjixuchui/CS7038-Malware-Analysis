{
  "name": "GTreeNode",
  "comment": "Base implementation for GTree nodes. Direct subclasses of this class are expected to have\n all their children in hand when initially constructed (either in their constructor or externally\n using #addNode(GTreeNode) or #setChildren(List).  For large trees, subclasses\n should instead extend GTreeLazyNode or GTreeSlowLoadingNode\n \n All methods in this class that mutate the children node must perform that operation in\n the swing thread.\n \n To create a simple GTreeNode where nodes will be added immediately\n using the addNode() methods, simply extend this class and implement the following methods:\n \n \t\tgetName()\n \t\tgetToolTip()\n \t\tisLeaf()\n \t\tgetIcon()\n \n\n Usage Notes:\n \n \tThe equals() method:  The GTree has the ability to remember expanded and\n      selected states.  This will only work if the nodes in the saved state can be matched\n      with the nodes in the GTree.  Java will do this by using the equals() method.\n      There is a potential problem with this usage.  If nodes within the GTree get rebuilt (\n      i.e., new nodes are created), then, by default, the expanded and selected state\n      feature will be unable to find the correct nodes, since the default equals()\n      method on GTreeNode performs a comparison based upon instances.  To fix this problem,\n      the #equals(Object) method has been implemented such that nodes are considered equal if they have\n      the same name (see #getName()). The #hashCode() method will return the hash of the name.  The name\n      attribute was chosen because it should be the most unique and descriptive piece of information\n      available in a generic GTreeNode.\n      \n      \n      There are two situations where the #equals(Object) and #hashCode() using the\n      name are insufficient.  One is if your tree implementation allows nodes with the same name\n      with the same parent.  The other possible situation is if your nodes can change their name, \n      which may confuse the tree.  If either of these situations apply, just override the \n      #equals(Object) and #hashCode() methods to make them more robust.\n      \n   \n ",
  "javadoc": "Base implementation for GTree nodes. Direct subclasses of this class are expected to have\n all their children in hand when initially constructed (either in their constructor or externally\n using {@link #addNode(GTreeNode)} or {@link #setChildren(List)}.  For large trees, subclasses\n should instead extend {@link GTreeLazyNode} or {@link GTreeSlowLoadingNode}\n \u003cP\u003e\n All methods in this class that mutate the children node must perform that operation in\n the swing thread.\n \u003cP\u003e\n To create a simple GTreeNode where nodes will be added immediately\n using the addNode() methods, simply extend this class and implement the following methods:\n \u003cul\u003e\n \t\t\u003cli\u003egetName()\u003c/li\u003e\n \t\t\u003cli\u003egetToolTip()\u003c/li\u003e\n \t\t\u003cli\u003eisLeaf()\u003c/li\u003e\n \t\t\u003cli\u003egetIcon()\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003ca id\u003d\"usage\"\u003e\u003c/a\u003eUsage Notes:\n \u003cul\u003e\n \t\u003cli\u003eThe \u003cb\u003e\u003ccode\u003eequals()\u003c/code\u003e\u003c/b\u003e method:  The \u003ccode\u003eGTree\u003c/code\u003e has the ability to remember expanded and\n      selected states.  This will only work if the nodes in the saved state can be matched\n      with the nodes in the \u003ccode\u003eGTree\u003c/code\u003e.  Java will do this by using the \u003ccode\u003eequals()\u003c/code\u003e method.\n      There is a potential problem with this usage.  If nodes within the \u003ccode\u003eGTree\u003c/code\u003e get rebuilt (\n      i.e., new nodes are created), then, by default, the expanded and selected state\n      feature will be unable to find the correct nodes, since the default \u003ccode\u003eequals()\u003c/code\u003e\n      method on \u003ccode\u003eGTreeNode\u003c/code\u003e performs a comparison based upon instances.  To fix this problem,\n      the {@link #equals(Object)} method has been implemented such that nodes are considered equal if they have\n      the same name (see {@link #getName()}). The {@link #hashCode()} method will return the hash of the name.  The name\n      attribute was chosen because it should be the most unique and descriptive piece of information\n      available in a generic GTreeNode.\n      \u003cp\u003e\u003cbr\u003e\n      \u003cp\u003e\n      There are two situations where the {@link #equals(Object)} and {@link #hashCode()} using the\n      name are insufficient.  One is if your tree implementation allows nodes with the same name\n      with the same parent.  The other possible situation is if your nodes can change their name, \n      which may confuse the tree.  If either of these situations apply, just override the \n      {@link #equals(Object)} and {@link #hashCode()} methods to make them more robust.\n      \u003cp\u003e\u003cbr\u003e\n   \u003c/li\u003e\n \u003c/ul\u003e",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "docking.widgets.tree.CoreGTreeNode",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generateChildren",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cdocking.widgets.tree.GTreeNode\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDisplayText",
      "comment": "Returns the display text for the node.  By default, this is the same as the name of the node.\n The name of the node usually serves two purposes: 1) to uniquely identify the node (the \n identity) and 2) the display text (what you see in the tree). Sometimes, it is useful to \n display more information in the tree without affecting the nodes identity.  In this case,\n you can override this method to return the \"display\" name, while #getName() will\n still return the name used to identify the node.",
      "javadoc": "Returns the display text for the node.  By default, this is the same as the name of the node.\n The name of the node usually serves two purposes: 1) to uniquely identify the node (the \n identity) and 2) the display text (what you see in the tree). Sometimes, it is useful to \n display more information in the tree without affecting the nodes identity.  In this case,\n you can override this method to return the \"display\" name, while {@link #getName()} will\n still return the name used to identify the node.\n@return the display text for the node.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the display text for the node."
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the name of the node.  If #getDisplayText() is not overridden, then this is\n also the text that will be displayed in the tree for that node. In general, the name of a node\n should not change. If the text displayed in the tree changes over time, override\n #getDisplayText().",
      "javadoc": "Returns the name of the node.  If {@link #getDisplayText()} is not overridden, then this is\n also the text that will be displayed in the tree for that node. In general, the name of a node\n should not change. If the text displayed in the tree changes over time, override\n {@link #getDisplayText()}.\n@return the name of the node",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the node"
      },
      "throws": []
    },
    {
      "name": "getIcon",
      "comment": "Returns the Icon to be displayed for this node in the tree",
      "javadoc": "Returns the Icon to be displayed for this node in the tree\n@param expanded true if the node is expanded\n@return the icon to be displayed for this node in the tree",
      "static": false,
      "params": [
        {
          "name": "expanded",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the node is expanded"
        }
      ],
      "return": {
        "type_long": "javax.swing.Icon",
        "type_short": "Icon",
        "comment": "the icon to be displayed for this node in the tree"
      },
      "throws": []
    },
    {
      "name": "getToolTip",
      "comment": "Returns the string to be displayed as a tooltip when the user \n hovers the mouse on this node in the tree",
      "javadoc": "Returns the string to be displayed as a tooltip when the user \n hovers the mouse on this node in the tree\n@return the tooltip to be displayed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the tooltip to be displayed"
      },
      "throws": []
    },
    {
      "name": "isLeaf",
      "comment": "Returns true if this node never has children",
      "javadoc": "Returns true if this node never has children\n@return true if this node is a leaf",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this node is a leaf"
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "node",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addNode",
      "comment": "Adds the given node as a child to this node.  Note: this method may be inefficient so if you\n have many nodes to add, you should use either #addNodes(List) or #setChildren(List)",
      "javadoc": "Adds the given node as a child to this node.  Note: this method may be inefficient so if you\n have many nodes to add, you should use either {@link #addNodes(List)} or {@link #setChildren(List)}\n@param node the node to add as a child",
      "static": false,
      "params": [
        {
          "name": "node",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": "the node to add as a child"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addNodes",
      "comment": "Adds the given nodes as children to this node",
      "javadoc": "Adds the given nodes as children to this node\n@param nodes the nodes to add",
      "static": false,
      "params": [
        {
          "name": "nodes",
          "type_long": "java.util.List\u003cdocking.widgets.tree.GTreeNode\u003e",
          "type_short": "List",
          "comment": "the nodes to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addNode",
      "comment": "Adds the given node at the given index as a child to this node",
      "javadoc": "Adds the given node at the given index as a child to this node\n@param index the index to place the node\n@param node the node to add as a child of this node",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index to place the node"
        },
        {
          "name": "node",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": "the node to add as a child of this node"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getChildren",
      "comment": "Returns all of the visible children of this node.  If there are filtered nodes, then\n they will not be returned.",
      "javadoc": "Returns all of the \u003cb\u003evisible\u003c/b\u003e children of this node.  If there are filtered nodes, then\n they will not be returned.\n@return all of the \u003cb\u003evisible\u003c/b\u003e children of this node.  If there are filtered nodes, then\n \t\t   they will not be returned.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cdocking.widgets.tree.GTreeNode\u003e",
        "type_short": "List",
        "comment": "all of the visible children of this node.  If there are filtered nodes, then\n \t\t   they will not be returned."
      },
      "throws": []
    },
    {
      "name": "getChildCount",
      "comment": "Returns the number of visible children of this node.  Does not include\n nodes that are current filtered out",
      "javadoc": "Returns the number of \u003cb\u003evisible\u003c/b\u003e children of this node.  Does not include\n nodes that are current filtered out\n@return the number of \u003cb\u003evisible\u003c/b\u003e children of this node",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of visible children of this node"
      },
      "throws": []
    },
    {
      "name": "getChild",
      "comment": "Returns the child node of this node with the given name.",
      "javadoc": "Returns the child node of this node with the given name.\n@param name the name of the child to be returned\n@return the child with the given name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the child to be returned"
        }
      ],
      "return": {
        "type_long": "docking.widgets.tree.GTreeNode",
        "type_short": "GTreeNode",
        "comment": "the child with the given name"
      },
      "throws": []
    },
    {
      "name": "getChild",
      "comment": "Returns the child node at the given index. Returns null if the index is out of\n bounds.",
      "javadoc": "Returns the child node at the given index. Returns null if the index is out of\n bounds.\n@param index the index of the child to be returned\n@return the child at the given index",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the child to be returned"
        }
      ],
      "return": {
        "type_long": "docking.widgets.tree.GTreeNode",
        "type_short": "GTreeNode",
        "comment": "the child at the given index"
      },
      "throws": []
    },
    {
      "name": "getNodeCount",
      "comment": "Returns the total number of nodes in the subtree rooted at this node.  Leaf\n nodes return 1.",
      "javadoc": "Returns the total number of nodes in the subtree rooted at this node.  Leaf\n nodes return 1.\n@return the number of nodes from this node downward",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of nodes from this node downward"
      },
      "throws": []
    },
    {
      "name": "getLeafCount",
      "comment": "Returns the total number of leaf nodes in the subtree from this node.  Note that if any\n nodes are \"lazy\" (see GTreeLazyNode) and not currently loaded, then it will be\n considered as a leaf and return 1.",
      "javadoc": "Returns the total number of leaf nodes in the subtree from this node.  Note that if any\n nodes are \"lazy\" (see {@link GTreeLazyNode}) and not currently loaded, then it will be\n considered as a leaf and return 1.\n@return the total number of leaf nodes in the subtree from this node",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the total number of leaf nodes in the subtree from this node"
      },
      "throws": []
    },
    {
      "name": "getIndexInParent",
      "comment": "Returns the index of this node within its parent node",
      "javadoc": "Returns the index of this node within its parent node\n@return the index of this node within its parent node",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index of this node within its parent node"
      },
      "throws": []
    },
    {
      "name": "getIndexOfChild",
      "comment": "Returns the index of the given node within this node.  -1 is returned\n if the node is not a child of this node.",
      "javadoc": "Returns the index of the given node within this node.  -1 is returned\n if the node is not a child of this node.\n@param node whose index we want\n@return the index of the given node within this node",
      "static": false,
      "params": [
        {
          "name": "node",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": "whose index we want"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index of the given node within this node"
      },
      "throws": []
    },
    {
      "name": "getTreePath",
      "comment": "Returns the TreePath for this node",
      "javadoc": "Returns the TreePath for this node\n@return the TreePath for this node",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.tree.TreePath",
        "type_short": "TreePath",
        "comment": "the TreePath for this node"
      },
      "throws": []
    },
    {
      "name": "removeAll",
      "comment": "Removes all children from this node.  The children nodes will be disposed.",
      "javadoc": "Removes all children from this node.  The children nodes will be disposed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeNode",
      "comment": "Remove the given node from this node",
      "javadoc": "Remove the given node from this node\n@param node the to be removed",
      "static": false,
      "params": [
        {
          "name": "node",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": "the to be removed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setChildren",
      "comment": "Sets the children on this node.  Any existing current children will be dispose.",
      "javadoc": "Sets the children on this node.  Any existing current children will be dispose.\n@param childList this list of nodes to be set as children of this node",
      "static": false,
      "params": [
        {
          "name": "childList",
          "type_long": "java.util.List\u003cdocking.widgets.tree.GTreeNode\u003e",
          "type_short": "List",
          "comment": "this list of nodes to be set as children of this node"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isAncestor",
      "comment": "Returns true if the given node is a child of this node or one of its children.",
      "javadoc": "Returns true if the given node is a child of this node or one of its children.\n@param node the potential descendant node to check\n@return true if the given node is a child of this node or one of its children",
      "static": false,
      "params": [
        {
          "name": "node",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": "the potential descendant node to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given node is a child of this node or one of its children"
      },
      "throws": []
    },
    {
      "name": "valueChanged",
      "comment": "Notification method called when a cell editor completes editing to notify this\n node that its value has changed.  If you override this method you must also override \n #isEditable().",
      "javadoc": "Notification method called when a cell editor completes editing to notify this\n node that its value has changed.  If you override this method you must also override \n {@link #isEditable()}.\n@param newValue the new value provided by the cell editor\n@see #isEditable()",
      "static": false,
      "params": [
        {
          "name": "newValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the new value provided by the cell editor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEditable",
      "comment": "Returns true if this node is allowed to be edited in the tree.  You must override this\n method to allow a node to be edited.  You must also override #valueChanged(Object)\n to handle the result of the edit.",
      "javadoc": "Returns true if this node is allowed to be edited in the tree.  You must override this\n method to allow a node to be edited.  You must also override {@link #valueChanged(Object)}\n to handle the result of the edit.\n@return true if this node is allowed to be edited in the tree\n@see #valueChanged(Object)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this node is allowed to be edited in the tree"
      },
      "throws": []
    },
    {
      "name": "getRoot",
      "comment": "Returns the rootNode for this tree or null if there is no parent path to a\n root node.",
      "javadoc": "Returns the rootNode for this tree or null if there is no parent path to a\n root node.\n@return the rootNode for a tree of nodes in a {@link GTree}",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.tree.GTreeNode",
        "type_short": "GTreeNode",
        "comment": "the rootNode for a tree of nodes in a GTree"
      },
      "throws": []
    },
    {
      "name": "filter",
      "comment": "Generates a filtered copy of this node and its children.\n \n A node will be included if it or any of its descendants are accepted by the filter.\n NOTE: the filter will only be applied to a nodes children if they are loaded. So to \n perform a filter on all the nodes in the tree, the #loadAll(TaskMonitor) should\n be called before the filter call.",
      "javadoc": "Generates a filtered copy of this node and its children.\n \u003cP\u003e\n A node will be included if it or any of its descendants are accepted by the filter.\n NOTE: the filter will only be applied to a nodes children if they are loaded. So to \n perform a filter on all the nodes in the tree, the {@link #loadAll(TaskMonitor)} should\n be called before the filter call.\n@param filter the filter being applied\n@param monitor a TaskMonitor for tracking the progress and cancelling\n@return A copy of this node and its children that matches the filter or null \n if this node and none of its children match the filter.\n@throws CancelledException if the operation is cancelled via the TaskMonitor\n@throws CloneNotSupportedException if any nodes in the tree explicitly prevents cloning",
      "static": false,
      "params": [
        {
          "name": "filter",
          "type_long": "docking.widgets.tree.support.GTreeFilter",
          "type_short": "GTreeFilter",
          "comment": "the filter being applied"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a TaskMonitor for tracking the progress and cancelling"
        }
      ],
      "return": {
        "type_long": "docking.widgets.tree.GTreeNode",
        "type_short": "GTreeNode",
        "comment": "A copy of this node and its children that matches the filter or null \n if this node and none of its children match the filter."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the operation is cancelled via the TaskMonitor"
        },
        {
          "type_long": "java.lang.CloneNotSupportedException",
          "type_short": "CloneNotSupportedException",
          "comment": "if any nodes in the tree explicitly prevents cloning"
        }
      ]
    },
    {
      "name": "loadAll",
      "comment": "Causes any lazy or slow loading nodes in the tree to load their children so that the tree \n is fully loaded. Nodes that are already loaded (including normal nodes which are always loaded)\n do nothing except recursively call #loadAll(TaskMonitor) on their children.",
      "javadoc": "Causes any lazy or slow loading nodes in the tree to load their children so that the tree \n is fully loaded. Nodes that are already loaded (including normal nodes which are always loaded)\n do nothing except recursively call {@link #loadAll(TaskMonitor)} on their children.\n@param monitor the TaskMonitor to monitor progress and provide cancel checking\n@return the total number of nodes in the subtree of this node\n@throws CancelledException if the operation is cancelled using the monitor",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the TaskMonitor to monitor progress and provide cancel checking"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the total number of nodes in the subtree of this node"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the operation is cancelled using the monitor"
        }
      ]
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "stream",
      "comment": "Returns a stream of the GTree nodes in the subtree of this node",
      "javadoc": "Returns a stream of the GTree nodes in the subtree of this node\n@param depthFirst if true, the nodes will be streamed in depth-first order, otherwise breadth-first order\n@return a stream of the GTree nodes in the subtree of this node",
      "static": false,
      "params": [
        {
          "name": "depthFirst",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the nodes will be streamed in depth-first order, otherwise breadth-first order"
        }
      ],
      "return": {
        "type_long": "java.util.stream.Stream\u003cdocking.widgets.tree.GTreeNode\u003e",
        "type_short": "Stream",
        "comment": "a stream of the GTree nodes in the subtree of this node"
      },
      "throws": []
    },
    {
      "name": "iterator",
      "comment": "Returns an iterator of the GTree nodes in the subtree of this node",
      "javadoc": "Returns an iterator of the GTree nodes in the subtree of this node\n@param depthFirst if true, the nodes will be returned in depth-first order, otherwise breadth-first order\n@return an iterator of the GTree nodes in the subtree of this node",
      "static": false,
      "params": [
        {
          "name": "depthFirst",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the nodes will be returned in depth-first order, otherwise breadth-first order"
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cdocking.widgets.tree.GTreeNode\u003e",
        "type_short": "Iterator",
        "comment": "an iterator of the GTree nodes in the subtree of this node"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fireNodeStructureChanged",
      "comment": "Notifies the tree that the node has different children.  This method",
      "javadoc": "Notifies the tree that the node has different children.  This method\n@param node the node that has changed.",
      "static": false,
      "params": [
        {
          "name": "node",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": "the node that has changed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fireNodeChanged",
      "comment": "Notifies the tree that a node has changed",
      "javadoc": "Notifies the tree that a node has changed\n@param parentNode the node that contains the node that was changed\n@param node the that changed",
      "static": false,
      "params": [
        {
          "name": "parentNode",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": "the node that contains the node that was changed"
        },
        {
          "name": "node",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": "the that changed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "expand",
      "comment": "Convenience method for expanding (opening) this node in the tree.  If this node is not\n currently attached to a visible tree, then this call does nothing",
      "javadoc": "Convenience method for expanding (opening) this node in the tree.  If this node is not\n currently attached to a visible tree, then this call does nothing",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "collapse",
      "comment": "Convenience method for collapsing (closing) this node in the tree.  If this node is not\n currently attached to a visible tree, then this call does nothing",
      "javadoc": "Convenience method for collapsing (closing) this node in the tree.  If this node is not\n currently attached to a visible tree, then this call does nothing",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isExpanded",
      "comment": "Convenience method determining if this node is expanded in a tree.  If the node is not\n currently attached to a visible tree, then this call returns false",
      "javadoc": "Convenience method determining if this node is expanded in a tree.  If the node is not\n currently attached to a visible tree, then this call returns false\n@return true if the node is expanded in a currently visible tree.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the node is expanded in a currently visible tree."
      },
      "throws": []
    },
    {
      "name": "getPathToRoot",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "node",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": ""
        },
        {
          "name": "depth",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "docking.widgets.tree.GTreeNode[]",
        "type_short": "docking.widgets.tree.GTreeNode[]",
        "comment": ""
      },
      "throws": []
    }
  ]
}
