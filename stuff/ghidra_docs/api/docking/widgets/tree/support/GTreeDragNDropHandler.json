{
  "name": "GTreeDragNDropHandler",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "docking.widgets.tree.support.GTreeTransferHandler"
  ],
  "fields": [],
  "methods": [
    {
      "name": "isStartDragOk",
      "comment": "Return true if the dragUserData can be dragged.",
      "javadoc": "Return true if the dragUserData can be dragged.\n@param dragUserData data where user is initiating the drag operation\n@param dragAction user action for the drag operation",
      "static": false,
      "params": [
        {
          "name": "dragUserData",
          "type_long": "java.util.List\u003cdocking.widgets.tree.GTreeNode\u003e",
          "type_short": "List",
          "comment": "data where user is initiating the drag operation"
        },
        {
          "name": "dragAction",
          "type_long": "int",
          "type_short": "int",
          "comment": "user action for the drag operation"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSupportedDragActions",
      "comment": "Returns the supported Drag actions for this tree.  For available actions see\n DnDConstants.",
      "javadoc": "Returns the supported Drag actions for this tree.  For available actions see\n {@link DnDConstants}.\n@return the supported Drag actions.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the supported Drag actions."
      },
      "throws": []
    },
    {
      "name": "isDropSiteOk",
      "comment": "Return true if the drop site is valid for the given target.",
      "javadoc": "Return true if the drop site is valid for the given target.\n@param destUserData destination for node being dragged\n@param flavors flavor(s) being dragged\n@param dropAction user action for drop operation",
      "static": false,
      "params": [
        {
          "name": "destUserData",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": "destination for node being dragged"
        },
        {
          "name": "flavors",
          "type_long": "java.awt.datatransfer.DataFlavor[]",
          "type_short": "java.awt.datatransfer.DataFlavor[]",
          "comment": "flavor(s) being dragged"
        },
        {
          "name": "dropAction",
          "type_long": "int",
          "type_short": "int",
          "comment": "user action for drop operation"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "drop",
      "comment": "Add the given transferable\u0027s data to the destination user data.",
      "javadoc": "Add the given transferable\u0027s data to the destination user data.\n@param destUserData destination node for the data.\n@param transferable the transferable being dragged whose data will be dropped.\n@param dropAction user action for drop operation",
      "static": false,
      "params": [
        {
          "name": "destUserData",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": "destination node for the data."
        },
        {
          "name": "transferable",
          "type_long": "java.awt.datatransfer.Transferable",
          "type_short": "Transferable",
          "comment": "the transferable being dragged whose data will be dropped."
        },
        {
          "name": "dropAction",
          "type_long": "int",
          "type_short": "int",
          "comment": "user action for drop operation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
