{
  "name": "GTreeTask",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.worker.PriorityJob",
  "fields": [
    {
      "name": "tree",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.tree.GTree",
      "type_short": "GTree",
      "constant_value": null
    },
    {
      "name": "jTree",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JTree",
      "type_short": "JTree",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tree",
          "type_long": "docking.widgets.tree.GTree",
          "type_short": "GTree",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTaskMonitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "runOnSwingThread",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "runnable",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "translatePath",
      "comment": "This method allows us to take a TreePath from a previous tree and apply that path to a new\n tree (or a tree that has been reloaded with new nodes).  This method is required due to the\n fact that JTree allows you to set any path values, valid or not, and will return those path\n values on later calls to getSelectedPaths().  So, to handle that \u0027feature\u0027 of the JTree, we\n need to translate the given path to the equivalent path in the current tree (this code may\n not be needed in all uses of this task, but it protects us from the aforementioned case).",
      "javadoc": "This method allows us to take a TreePath from a previous tree and apply that path to a new\n tree (or a tree that has been reloaded with new nodes).  This method is required due to the\n fact that JTree allows you to set any path values, valid or not, and will return those path\n values on later calls to getSelectedPaths().  So, to handle that \u0027feature\u0027 of the JTree, we\n need to translate the given path to the equivalent path in the current tree (this code may\n not be needed in all uses of this task, but it protects us from the aforementioned case).\n@param path the path to translate\n@param monitor the monitor\n@return the translated path",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "javax.swing.tree.TreePath",
          "type_short": "TreePath",
          "comment": "the path to translate"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor"
        }
      ],
      "return": {
        "type_long": "javax.swing.tree.TreePath",
        "type_short": "TreePath",
        "comment": "the translated path"
      },
      "throws": []
    }
  ]
}
