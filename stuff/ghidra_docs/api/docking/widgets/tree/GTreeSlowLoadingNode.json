{
  "name": "GTreeSlowLoadingNode",
  "comment": "Base class for nodes that generate their children on demand, but because generating their children\n is slow, that operation is moved to a background thread.  While the children are being generated,\n an InProgressGTreeNode will appear in the tree until the LoadChildrenTask has completed.",
  "javadoc": "Base class for nodes that generate their children on demand, but because generating their children\n is slow, that operation is moved to a background thread.  While the children are being generated,\n an {@link InProgressGTreeNode} will appear in the tree until the {@link LoadChildrenTask} has completed.",
  "static": false,
  "implements": [],
  "extends": "docking.widgets.tree.GTreeLazyNode",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generateChildren",
      "comment": "Subclass must implement this method to generate their children. This operation will always be\n performed in a background thread (i.e. Not the swing thread)",
      "javadoc": "Subclass must implement this method to generate their children. This operation will always be\n performed in a background thread (i.e. Not the swing thread)\n@param monitor a TaskMonitor for reporting progress and cancel notification.\n@return the list of children for this node.\n@throws CancelledException if the monitor is cancelled",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a TaskMonitor for reporting progress and cancel notification."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cdocking.widgets.tree.GTreeNode\u003e",
        "type_short": "List",
        "comment": "the list of children for this node."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor is cancelled"
        }
      ]
    },
    {
      "name": "generateChildren",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cdocking.widgets.tree.GTreeNode\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadAll",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "generateChildrenNow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cdocking.widgets.tree.GTreeNode\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMonitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tree",
          "type_long": "docking.widgets.tree.GTree",
          "type_short": "GTree",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.task.TaskMonitor",
        "type_short": "TaskMonitor",
        "comment": ""
      },
      "throws": []
    }
  ]
}
