{
  "name": "FieldPanelOverLayoutEvent",
  "comment": "An event related to component layout over a FieldPanel.",
  "javadoc": "An event related to component layout over a {@link FieldPanel}.\n@see FieldPanelOverLayoutManager",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "field",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.fieldpanel.field.Field",
      "type_short": "Field",
      "constant_value": null
    },
    {
      "name": "loc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
      "type_short": "FieldLocation",
      "constant_value": null
    },
    {
      "name": "component",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Component",
      "type_short": "Component",
      "constant_value": null
    },
    {
      "name": "consumed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "cancelled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new event on the given field, location, and component.",
      "javadoc": "Create a new event on the given field, location, and component.\n@param field the field that will have a component placed over it\n@param loc the location of the field\n@param component the component to be placed over the field",
      "static": false,
      "params": [
        {
          "name": "field",
          "type_long": "docking.widgets.fieldpanel.field.Field",
          "type_short": "Field",
          "comment": "the field that will have a component placed over it"
        },
        {
          "name": "loc",
          "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
          "type_short": "FieldLocation",
          "comment": "the location of the field"
        },
        {
          "name": "component",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to be placed over the field"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getField",
      "comment": "Get the field that will have a component placed over it",
      "javadoc": "Get the field that will have a component placed over it\n@return the field",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.fieldpanel.field.Field",
        "type_short": "Field",
        "comment": "the field"
      },
      "throws": []
    },
    {
      "name": "getLocation",
      "comment": "Get the field location",
      "javadoc": "Get the field location\n@return the location of the field",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
        "type_short": "FieldLocation",
        "comment": "the location of the field"
      },
      "throws": []
    },
    {
      "name": "getComponent",
      "comment": "Get the component to be placed over the field",
      "javadoc": "Get the component to be placed over the field\n@return the component",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": "the component"
      },
      "throws": []
    },
    {
      "name": "consume",
      "comment": "Prevent this event from being further processed.\n \n The actual layout will still occur, though.",
      "javadoc": "Prevent this event from being further processed.\n \n The actual layout will still occur, though.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isConsumed",
      "comment": "Check if this event has been consumed by an earlier listener.",
      "javadoc": "Check if this event has been consumed by an earlier listener.\n@return true if the event has been consumed, i.e., should not be further processed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the event has been consumed, i.e., should not be further processed"
      },
      "throws": []
    },
    {
      "name": "cancel",
      "comment": "Prevent the actual layout from taking place.\n \n Further listeners may still process this event, though.",
      "javadoc": "Prevent the actual layout from taking place.\n \n Further listeners may still process this event, though.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCancelled",
      "comment": "Check if the actual layout will be performed.",
      "javadoc": "Check if the actual layout will be performed.\n@return true if the layout has been cancelled.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the layout has been cancelled."
      },
      "throws": []
    }
  ]
}
