{
  "name": "FieldPanelOverLayoutManager",
  "comment": "A LayoutManager that can be applied to a FieldPanel, allowing\n Components to be placed over a given field location.\n \n To apply it, use Container#setLayout(LayoutManager) to install it. In this case, the\n Container must be a FieldPanel. Then, use\n Container#add(Component, Object), passing a FieldLocation as the constraint.\n Currently, you must call #layoutContainer(Container) manually after you add or remove\n any components.\n \n When this layout manager is removed from the FieldPanel, you should call\n #unregister() in order to dispose of internal resources.",
  "javadoc": "A {@link LayoutManager} that can be applied to a {@link FieldPanel}, allowing\n {@link Component}s to be placed over a given field location.\n \n To apply it, use {@link Container#setLayout(LayoutManager)} to install it. In this case, the\n {@link Container} must be a {@link FieldPanel}. Then, use\n {@link Container#add(Component, Object)}, passing a {@link FieldLocation} as the constraint.\n Currently, you must call {@link #layoutContainer(Container)} manually after you add or remove\n any components.\n \n When this layout manager is removed from the {@link FieldPanel}, you should call\n {@link #unregister()} in order to dispose of internal resources.",
  "static": false,
  "implements": [
    "java.awt.LayoutManager2"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "componentsByLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cdocking.widgets.fieldpanel.support.FieldLocation,java.awt.Component\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "locationsByComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.awt.Component,docking.widgets.fieldpanel.support.FieldLocation\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "fieldpane",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.fieldpanel.FieldPanel",
      "type_short": "FieldPanel",
      "constant_value": null
    },
    {
      "name": "listener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.fieldpanel.FieldPanelOverLayoutManager.MyListener",
      "type_short": "MyListener",
      "constant_value": null
    },
    {
      "name": "layoutListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cdocking.widgets.fieldpanel.FieldPanelOverLayoutListener\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fieldpane",
          "type_long": "docking.widgets.fieldpanel.FieldPanel",
          "type_short": "FieldPanel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "unregister",
      "comment": "Remove my callbacks from the FieldPanel",
      "javadoc": "Remove my callbacks from the {@link FieldPanel}",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addComponent",
      "comment": "Add a component to be position over the given location",
      "javadoc": "Add a component to be position over the given location\n@param loc the location of the field to occlude\n@param comp the component to be placed over the field",
      "static": false,
      "params": [
        {
          "name": "loc",
          "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
          "type_short": "FieldLocation",
          "comment": "the location of the field to occlude"
        },
        {
          "name": "comp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to be placed over the field"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeComponent",
      "comment": "Remove a component by its field location",
      "javadoc": "Remove a component by its field location\n@param loc the location of the field\n@return true if there was a component placed at the given location",
      "static": false,
      "params": [
        {
          "name": "loc",
          "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
          "type_short": "FieldLocation",
          "comment": "the location of the field"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there was a component placed at the given location"
      },
      "throws": []
    },
    {
      "name": "removeComponent",
      "comment": "Remove a component",
      "javadoc": "Remove a component\n@param comp the component to remove\n@return true if the component existed",
      "static": false,
      "params": [
        {
          "name": "comp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to remove"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the component existed"
      },
      "throws": []
    },
    {
      "name": "trickMapComponents",
      "comment": "Tickle the layout manager, so we get a callback to map the components onto the layout.",
      "javadoc": "Tickle the layout manager, so we get a callback to map the components onto the layout.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addLayoutListener",
      "comment": "Add a listener for overlay layout events",
      "javadoc": "Add a listener for overlay layout events\n@param listener the listener to add",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "docking.widgets.fieldpanel.FieldPanelOverLayoutListener",
          "type_short": "FieldPanelOverLayoutListener",
          "comment": "the listener to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeLayoutListener",
      "comment": "Remove a listener for overlay layout events",
      "javadoc": "Remove a listener for overlay layout events\n@param listener the listener to remove",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "docking.widgets.fieldpanel.FieldPanelOverLayoutListener",
          "type_short": "FieldPanelOverLayoutListener",
          "comment": "the listener to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLayoutListeners",
      "comment": "Get the list of register overlay layout event listeners",
      "javadoc": "Get the list of register overlay layout event listeners\n@return the array",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.fieldpanel.FieldPanelOverLayoutListener[]",
        "type_short": "docking.widgets.fieldpanel.FieldPanelOverLayoutListener[]",
        "comment": "the array"
      },
      "throws": []
    },
    {
      "name": "getListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listenerType",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T[]",
        "type_short": "T[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fireLayoutListeners",
      "comment": "Fire the given overlay layout event to all registered listeners",
      "javadoc": "Fire the given overlay layout event to all registered listeners\n@param ev",
      "static": false,
      "params": [
        {
          "name": "ev",
          "type_long": "docking.widgets.fieldpanel.FieldPanelOverLayoutEvent",
          "type_short": "FieldPanelOverLayoutEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addLayoutComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "comp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addLayoutComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "comp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        },
        {
          "name": "constraints",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeLayoutComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "comp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "preferredLayoutSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Dimension",
        "type_short": "Dimension",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "minimumLayoutSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Dimension",
        "type_short": "Dimension",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "maximumLayoutSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "target",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Dimension",
        "type_short": "Dimension",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "layoutContainer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLayoutAlignmentX",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "target",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "float",
        "type_short": "float",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLayoutAlignmentY",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "target",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "float",
        "type_short": "float",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "invalidateLayout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "target",
          "type_long": "java.awt.Container",
          "type_short": "Container",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
