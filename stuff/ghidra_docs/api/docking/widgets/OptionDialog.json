{
  "name": "OptionDialog",
  "comment": "A utility class to easily show dialogs that require input from the user.\n\n\n Option Dialogs\n \n \n The primary type of\n dialog provided herein is the basic option dialog that allows the user to specify the buttons\n that appear on the dialog.  By default, the given option text will appear as a button(s),\n followed by a Cancel button (you can call the\n #showOptionNoCancelDialog(Component, String, String, String, String, int) methods if\n you do not want a Cancel button.  To use this type of dialog you can use the\n various showOptionDialog* methods.\n \n \n Each of the option dialog methods will return a result, which is a number indicating the\n choice made by the user.  See each method for more details.\n \n \n\n\n Data Input and Choice Dialogs\n \n \t\t\n \t\tThe methods listed here allow the user to either enter data from the keyboard or to choose\n \t\tfrom a pre-populated list of data.\n \t\t\n \t\t\n \t\t#showInputChoiceDialog(Component, String, String, String[], String, int)\n \t\t#showInputMultilineDialog(Component, String, String, String)\n \t\t#showInputSingleLineDialog(Component, String, String, String)\n \t\n \n\n\n Yes/No Dialogs\n \n \n Finally, there are a series of methods that present Yes and No buttons in\n a dialog.  There are versions that do and do not have a Cancel button.\n \n \n\n\n Basic Message / Warning / Error Dialogs\n \n \n If you would like to display a simple message to the user, but do not require input from the\n user, then you should use the various methods of Msg, such as\n Msg#showInfo(Object, Component, String, Object).\n \n \n Note, the user will be unable to select any text shown in the message area of the dialog.\n \n \n \n \"Apply to All\" / \"Don\u0027t Show Again\"\n \n For more advanced input dialog usage, to include allowing the user to tell the dialog\n to remember a particular decision, or to apply a given choice to all future request, see\n OptionDialogBuilder.\n ",
  "javadoc": "A utility class to easily show dialogs that require input from the user.\n\n\n \u003ch2\u003eOption Dialogs\u003c/h2\u003e\u003cbr\u003e\n \u003cblockquote\u003e\n \u003cp\u003e\n The primary type of\n dialog provided herein is the basic option dialog that allows the user to specify the buttons\n that appear on the dialog.  By default, the given option text will appear as a button(s),\n followed by a \u003ccode\u003eCancel\u003c/code\u003e button (you can call the\n {@link #showOptionNoCancelDialog(Component, String, String, String, String, int)} methods if\n you do not want a \u003ccode\u003eCancel\u003c/code\u003e button.  To use this type of dialog you can use the\n various \u003cb\u003e\u003ccode\u003eshowOptionDialog*\u003c/code\u003e\u003c/b\u003e methods.\n \u003c/p\u003e\n \u003cp\u003e\n Each of the option dialog methods will return a result, which is a number indicating the\n choice made by the user.  See each method for more details.\n \u003c/p\u003e\n \u003c/blockquote\u003e\n\n\n \u003ch3\u003eData Input and Choice Dialogs\u003c/h3\u003e\u003cbr\u003e\n \u003cblockquote\u003e\n \t\t\u003cp\u003e\n \t\tThe methods listed here allow the user to either enter data from the keyboard or to choose\n \t\tfrom a pre-populated list of data.\n \t\t\u003c/p\u003e\n \t\t\u003cblockquote\u003e\n \t\t{@link #showInputChoiceDialog(Component, String, String, String[], String, int)}\u003cbr\u003e\n \t\t{@link #showInputMultilineDialog(Component, String, String, String)}\u003cbr\u003e\n \t\t{@link #showInputSingleLineDialog(Component, String, String, String)}\n \t\u003c/blockquote\u003e\n \u003c/blockquote\u003e\n\n\n \u003ch3\u003eYes/No Dialogs\u003c/h3\u003e\u003cbr\u003e\n \u003cblockquote\u003e\n \u003cp\u003e\n Finally, there are a series of methods that present \u003ccode\u003eYes\u003c/code\u003e and \u003ccode\u003eNo\u003c/code\u003e buttons in\n a dialog.  There are versions that do and do not have a \u003ccode\u003eCancel\u003c/code\u003e button.\n \u003c/p\u003e\n \u003c/blockquote\u003e\n\n\n \u003ch3\u003eBasic Message / Warning / Error Dialogs\u003c/h3\u003e\u003cbr\u003e\n \u003cblockquote\u003e\n \u003cp\u003e\n If you would like to display a simple message to the user, but do not require input from the\n user, then you should use the various methods of {@link Msg}, such as\n {@link Msg#showInfo(Object, Component, String, Object)}.\n \u003c/p\u003e\n \u003cp\u003e\n Note, the user will be unable to select any text shown in the message area of the dialog.\n \u003c/p\u003e\n \u003c/blockquote\u003e\n \n \u003ch3\u003e\"Apply to All\" / \"Don\u0027t Show Again\"\u003c/h3\u003e\u003cbr\u003e\n \u003cblockquote\u003e\n \u003cp\u003eFor more advanced input dialog usage, to include allowing the user to tell the dialog\n to remember a particular decision, or to apply a given choice to all future request, see\n {@link OptionDialogBuilder}.\n \u003c/blockquote\u003e\n@see Msg\n@see OptionDialogBuilder",
  "static": false,
  "implements": [],
  "extends": "docking.DialogComponentProvider",
  "fields": [
    {
      "name": "MESSAGE_COMPONENT_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"MESSAGE-COMPONENT\""
    },
    {
      "name": "ERROR_MESSAGE",
      "comment": "Used for error messages.",
      "javadoc": "Used for error messages.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "INFORMATION_MESSAGE",
      "comment": "Used for information messages.",
      "javadoc": "Used for information messages.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "WARNING_MESSAGE",
      "comment": "Used for warning messages.",
      "javadoc": "Used for warning messages.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "QUESTION_MESSAGE",
      "comment": "Used for questions.",
      "javadoc": "Used for questions.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "PLAIN_MESSAGE",
      "comment": "No icon is used.",
      "javadoc": "No icon is used.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "CANCEL_OPTION",
      "comment": "Identifier for the cancel option.",
      "javadoc": "Identifier for the cancel option.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "YES_OPTION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "NO_OPTION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "OPTION_ONE",
      "comment": "Identifier for option one.",
      "javadoc": "Identifier for option one.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "OPTION_TWO",
      "comment": "Identifier for option two.",
      "javadoc": "Identifier for option two.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "OPTION_THREE",
      "comment": "Identifier for option three.",
      "javadoc": "Identifier for option three.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "result",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "rememberOption",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.DialogRememberOption",
      "type_short": "DialogRememberOption",
      "constant_value": null
    },
    {
      "name": "rememberOptionCheckBox",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JCheckBox",
      "type_short": "JCheckBox",
      "constant_value": null
    },
    {
      "name": "dialogMessage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a simple informational dialog with a single OK button.",
      "javadoc": "Construct a simple informational dialog with a single OK button.\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param messageType used to specify a default icon\n              \u003cul\u003e\n                  \u003cli\u003eERROR_MESSAGE\u003c/li\u003e\n                  \u003cli\u003eINFORMATION_MESSAGE\u003c/li\u003e\n                  \u003cli\u003eWARNING_MESSAGE\u003c/li\u003e\n                  \u003cli\u003eQUESTION_MESSAGE\u003c/li\u003e\n                  \u003cli\u003ePLAIN_MESSAGE\u003c/li\u003e\n              \u003c/ul\u003e\n@param icon allows the user to specify the icon to be used.\n              If non-null, this will override the messageType.",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify a default icon\n              \n                  ERROR_MESSAGE\n                  INFORMATION_MESSAGE\n                  WARNING_MESSAGE\n                  QUESTION_MESSAGE\n                  PLAIN_MESSAGE\n              "
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "allows the user to specify the icon to be used.\n              If non-null, this will override the messageType."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a simple two-option dialog.",
      "javadoc": "Construct a simple two-option dialog.\n@param title the String to place in the dialog\u0027s title area.\n@param message the message string explaining the user\u0027s option.\n@param option1 The text to place on the first option button.\n@param option2 The text to place on the second option button.\n@param messageType used to specify a default icon, can be ERROR_MESSAGE,\n\t \t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)\n@param icon allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType.\n@param addCancel true means add a Cancel button",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the String to place in the dialog\u0027s title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the message string explaining the user\u0027s option."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the first option button."
        },
        {
          "name": "option2",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the second option button."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify a default icon, can be ERROR_MESSAGE,\n\t \t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)"
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType."
        },
        {
          "name": "addCancel",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means add a Cancel button"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a simple two-option dialog.",
      "javadoc": "Construct a simple two-option dialog.\n@param title the String to place in the dialog\u0027s title area.\n@param message the message string explaining the user\u0027s option.\n@param option1 The text to place on the first option button.\n@param option2 The text to place on the second option button.\n@param messageType used to specify a default icon, can be ERROR_MESSAGE,\n\t \t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)\n@param icon allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType.\n@param addCancel true means add a Cancel button\n@param defaultButtonName The default button name",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the String to place in the dialog\u0027s title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the message string explaining the user\u0027s option."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the first option button."
        },
        {
          "name": "option2",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the second option button."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify a default icon, can be ERROR_MESSAGE,\n\t \t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)"
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType."
        },
        {
          "name": "addCancel",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means add a Cancel button"
        },
        {
          "name": "defaultButtonName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The default button name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a simple one-option dialog with a Cancel button.",
      "javadoc": "Construct a simple one-option dialog with a Cancel button.\n@param title the String to place in the dialog\u0027s title area.\n@param message the message string explaining the user\u0027s option.\n@param option1 The text to place on the first option button.\n@param messageType used to specify a default icon, can be ERROR_MESSAGE,\n\t \t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)\n@param icon allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType.",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the String to place in the dialog\u0027s title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the message string explaining the user\u0027s option."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the first option button."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify a default icon, can be ERROR_MESSAGE,\n\t \t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)"
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a simple one-option dialog with a Cancel button.",
      "javadoc": "Construct a simple one-option dialog with a Cancel button.\n@param title the String to place in the dialog\u0027s title area.\n@param message the message string explaining the user\u0027s option.\n@param option1 The text to place on the first option button.\n@param messageType used to specify a default icon, can be ERROR_MESSAGE,\n\t \t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)\n@param icon allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType.\n@param defaultButtonName the name of the button to be made the default.",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the String to place in the dialog\u0027s title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the message string explaining the user\u0027s option."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the first option button."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify a default icon, can be ERROR_MESSAGE,\n\t \t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)"
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType."
        },
        {
          "name": "defaultButtonName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the button to be made the default."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "option2",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "option3",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": ""
        },
        {
          "name": "addCancel",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": ""
        },
        {
          "name": "addCancelButton",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "savedDialogChoice",
          "type_long": "docking.widgets.DialogRememberOption",
          "type_short": "DialogRememberOption",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "defaultOption",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toList",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "option",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildMainPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": ""
        },
        {
          "name": "rememberOptionChoice",
          "type_long": "docking.widgets.DialogRememberOption",
          "type_short": "DialogRememberOption",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildRememberOptionChoicePanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rememberOptionChoice",
          "type_long": "docking.widgets.DialogRememberOption",
          "type_short": "DialogRememberOption",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.JPanel",
        "type_short": "JPanel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildMessagePanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.JPanel",
        "type_short": "JPanel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildButtons",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "addCancel",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "defaultButtonName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeDefaultButton",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "defaultButtonName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "buttons",
          "type_long": "java.util.List\u003cjavax.swing.JButton\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createOptionButton",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "callbackValue",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.JButton",
        "type_short": "JButton",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createTextPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.JPanel",
        "type_short": "JPanel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMessage",
      "comment": "Returns the dialog\u0027s message to the user",
      "javadoc": "Returns the dialog\u0027s message to the user\n@return the message",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the message"
      },
      "throws": []
    },
    {
      "name": "show",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "show",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createBuilder",
      "comment": "A convenience method to create a OptionDialogBuilder",
      "javadoc": "A convenience method to create a {@link OptionDialogBuilder}\n@param title the dialog title\n@param message the dialog message\n@return the builder",
      "static": true,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the dialog title"
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the dialog message"
        }
      ],
      "return": {
        "type_long": "docking.widgets.OptionDialogBuilder",
        "type_short": "OptionDialogBuilder",
        "comment": "the builder"
      },
      "throws": []
    },
    {
      "name": "showOptionDialog",
      "comment": "Static helper method to easily display an single-option dialog.  The dialog\n will remain until the user presses the Option1 button or the Cancel button.",
      "javadoc": "Static helper method to easily display an single-option dialog.  The dialog\n will remain until the user presses the Option1 button or the Cancel button.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param option1 The text to place on the option button.\n@return The options selected by the user. 1 if the option button is pressed\n  or 0 if the operation is cancelled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the option button."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user. 1 if the option button is pressed\n  or 0 if the operation is cancelled."
      },
      "throws": []
    },
    {
      "name": "showOptionDialogWithCancelAsDefaultButton",
      "comment": "Static helper method to easily display an single-option dialog.  The dialog\n will remain until the user presses the Option1 button or the Cancel button.\n \n The dialog shown by this method will have the cancel button set as the default button so\n that an Enter key press will trigger a cancel action.",
      "javadoc": "Static helper method to easily display an single-option dialog.  The dialog\n will remain until the user presses the Option1 button or the Cancel button.\n \u003cp\u003e\n The dialog shown by this method will have the cancel button set as the default button so\n that an Enter key press will trigger a cancel action.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param option1 The text to place on the option button.\n@return The options selected by the user. 1 if the option button is pressed\n  or 0 if the operation is cancelled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the option button."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user. 1 if the option button is pressed\n  or 0 if the operation is cancelled."
      },
      "throws": []
    },
    {
      "name": "showOptionDialogWithCancelAsDefaultButton",
      "comment": "Static helper method to easily display an single-option dialog.  The dialog\n will remain until the user presses the Option1 button or the Cancel button.\n \n The dialog shown by this method will have the cancel button set as the default button so\n that an Enter key press will trigger a cancel action.",
      "javadoc": "Static helper method to easily display an single-option dialog.  The dialog\n will remain until the user presses the Option1 button or the Cancel button.\n \u003cp\u003e\n The dialog shown by this method will have the cancel button set as the default button so\n that an Enter key press will trigger a cancel action.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param option1 The text to place on the option button.\n@param messageType used to specify a default icon, can be ERROR_MESSAGE,\n\t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)\n@return The options selected by the user. 1 if the option button is pressed\n  or 0 if the operation is cancelled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the option button."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify a default icon, can be ERROR_MESSAGE,\n\t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user. 1 if the option button is pressed\n  or 0 if the operation is cancelled."
      },
      "throws": []
    },
    {
      "name": "showOptionDialog",
      "comment": "Static helper method to easily display an single-option dialog.  The dialog\n will remain until the user presses the Option1 button or the Cancel button.",
      "javadoc": "Static helper method to easily display an single-option dialog.  The dialog\n will remain until the user presses the Option1 button or the Cancel button.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param option1 The text to place on the option button.\n@param messageType used to specify a default icon, can be ERROR_MESSAGE,\n\t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)\n@return The options selected by the user. 1 if the option button is pressed\n  or 0 if the operation is cancelled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the option button."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify a default icon, can be ERROR_MESSAGE,\n\t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user. 1 if the option button is pressed\n  or 0 if the operation is cancelled."
      },
      "throws": []
    },
    {
      "name": "showOptionDialog",
      "comment": "Static helper method to easily display an single-option dialog.  The dialog\n will remain until the user presses the Option1 button or the Cancel button.",
      "javadoc": "Static helper method to easily display an single-option dialog.  The dialog\n will remain until the user presses the Option1 button or the Cancel button.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param option1 The text to place on the option button.\n@param messageType used to specify a default icon, can be ERROR_MESSAGE,\n\t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)\n@param defaultButtonName the name of the button to be the default.  Null will make the first\n button the default\n@return The options selected by the user. 1 if the option button is pressed\n  or 0 if the operation is cancelled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the option button."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify a default icon, can be ERROR_MESSAGE,\n\t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)"
        },
        {
          "name": "defaultButtonName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the button to be the default.  Null will make the first\n button the default"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user. 1 if the option button is pressed\n  or 0 if the operation is cancelled."
      },
      "throws": []
    },
    {
      "name": "showOptionDialog",
      "comment": "Static helper method to easily display an single-option dialog.  The dialog\n will remain until the user presses the Option1 button or the Cancel button.",
      "javadoc": "Static helper method to easily display an single-option dialog.  The dialog\n will remain until the user presses the Option1 button or the Cancel button.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param option1 The text to place on the option button.\n@param icon allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType.\n@return The options selected by the user. 1 if the option button is pressed\n  or 0 if the operation is cancelled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the option button."
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user. 1 if the option button is pressed\n  or 0 if the operation is cancelled."
      },
      "throws": []
    },
    {
      "name": "showOptionDialog",
      "comment": "Static helper method to easily display an three-option dialog.  The dialog\n will remain until the user presses the Option1, Option2, Option3 or Cancel button.",
      "javadoc": "Static helper method to easily display an \u003cb\u003ethree-option\u003c/b\u003e dialog.  The dialog\n will remain until the user presses the Option1, Option2, Option3 or Cancel button.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used.\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param option1 The text to place on the first option button.\n@param option2 The text to place on the second option button.\n@param option3 The text to place on the third option button.\n@param messageType The type of message to display\n@return The options selected by the user. 1 for the first option and\n  2 for the second option and so on.  0 is returned if the operation is cancelled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used."
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the first option button."
        },
        {
          "name": "option2",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the second option button."
        },
        {
          "name": "option3",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the third option button."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "The type of message to display"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user. 1 for the first option and\n  2 for the second option and so on.  0 is returned if the operation is cancelled."
      },
      "throws": []
    },
    {
      "name": "showOptionDialog",
      "comment": "Static helper method to easily display an two-option dialog.  The dialog\n will remain until the user presses the Option1, Option2 or Cancel button.",
      "javadoc": "Static helper method to easily display an two-option dialog.  The dialog\n will remain until the user presses the Option1, Option2 or Cancel button.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param option1 The text to place on the first option button.\n@param option2 The text to place on the second option button.\\\n@return The options selected by the user. 1 for the first option and\n  2 for the second option.  0 is returned if the operation is cancelled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the first option button."
        },
        {
          "name": "option2",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the second option button.\\"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user. 1 for the first option and\n  2 for the second option.  0 is returned if the operation is cancelled."
      },
      "throws": []
    },
    {
      "name": "showOptionDialog",
      "comment": "Static helper method to easily display an two-option dialog.  The dialog\n will remain until the user presses the Option1, Option2 or Cancel button.",
      "javadoc": "Static helper method to easily display an two-option dialog.  The dialog\n will remain until the user presses the Option1, Option2 or Cancel button.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param option1 The text to place on the first option button.\n@param option2 The text to place on the second option button.\n@param messageType used to specify a default icon, can be ERROR_MESSAGE,\n\t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)\n@return The options selected by the user. 1 for the first option and\n  2 for the second option.  0 is returned if the operation is cancelled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the first option button."
        },
        {
          "name": "option2",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the second option button."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify a default icon, can be ERROR_MESSAGE,\n\t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user. 1 for the first option and\n  2 for the second option.  0 is returned if the operation is cancelled."
      },
      "throws": []
    },
    {
      "name": "showOptionDialog",
      "comment": "Static helper method to easily display an two-option dialog.  The dialog\n will remain until the user presses the Option1, Option2 or Cancel button.",
      "javadoc": "Static helper method to easily display an two-option dialog.  The dialog\n will remain until the user presses the Option1, Option2 or Cancel button.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param option1 The text to place on the first option button.\n@param option2 The text to place on the second option button.\n@param icon allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType.\n@return The options selected by the user. 1 for the first option and\n  2 for the second option.  0 is returned if the operation is cancelled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the first option button."
        },
        {
          "name": "option2",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the second option button."
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user. 1 for the first option and\n  2 for the second option.  0 is returned if the operation is cancelled."
      },
      "throws": []
    },
    {
      "name": "showOptionNoCancelDialog",
      "comment": "Static helper method to easily display an two-option dialog.  The dialog\n will remain until the user presses the Option1, Option2 or Cancel button.",
      "javadoc": "Static helper method to easily display an two-option dialog.  The dialog\n will remain until the user presses the Option1, Option2 or Cancel button.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param option1 The text to place on the first option button.\n@param option2 The text to place on the second option button.\n@param messageType used to specify a default icon, can be ERROR_MESSAGE,\n\t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)\n@return The options selected by the user. 1 for the first option and\n  2 for the second option.  0 is returned if the operation is cancelled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the first option button."
        },
        {
          "name": "option2",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the second option button."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify a default icon, can be ERROR_MESSAGE,\n\t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user. 1 for the first option and\n  2 for the second option.  0 is returned if the operation is cancelled."
      },
      "throws": []
    },
    {
      "name": "showOptionNoCancelDialog",
      "comment": "Static helper method to easily display an two-option dialog with no Cancel button.\n The dialog will remain until the user presses the Option1 or Option 2 button.",
      "javadoc": "Static helper method to easily display an two-option dialog with no Cancel button.\n The dialog will remain until the user presses the Option1 or Option 2 button.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param option1 The text to place on the first option button.\n@param option2 The text to place on the second option button.\n@param icon allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType.\n@return The options selected by the user. 1 for the first option and\n  2 for the second option.  0 is returned if the operation is cancelled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the first option button."
        },
        {
          "name": "option2",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the second option button."
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "allows the user to specify the icon to be used.  If non-null,\n     this will override the messageType."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user. 1 for the first option and\n  2 for the second option.  0 is returned if the operation is cancelled."
      },
      "throws": []
    },
    {
      "name": "showOptionNoCancelDialog",
      "comment": "Static helper method to easily display an three-option dialog with no Cancel button.\n The dialog will remain until the user presses the\n Option1, Option 2, or Option 3 button.",
      "javadoc": "Static helper method to easily display an three-option dialog with no Cancel button.\n The dialog will remain until the user presses the\n Option1, Option 2, or Option 3 button.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@param option1 The text to place on the first option button.\n@param option2 The text to place on the second option button.\n@param option3 The text to place on the third option button.\n@param messageType used to specify a default icon, can be ERROR_MESSAGE,\n \t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)\n@return The options selected by the user. 1 for the first option and\n  2 for the second option.  0 is returned if the operation is cancelled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        },
        {
          "name": "option1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the first option button."
        },
        {
          "name": "option2",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the second option button."
        },
        {
          "name": "option3",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to place on the third option button."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify a default icon, can be ERROR_MESSAGE,\n \t\tINFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user. 1 for the first option and\n  2 for the second option.  0 is returned if the operation is cancelled."
      },
      "throws": []
    },
    {
      "name": "showYesNoDialog",
      "comment": "Dialog with only YES/NO options, no CANCEL",
      "javadoc": "Dialog with only YES/NO options, no CANCEL\n@param parent The parent dialog or frame of this dialog. (Can be null)\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@return The options selected by the user:\n \u003cpre\u003e\n                  0 is returned if the operation is cancelled\n                  1 for \u003cb\u003eYes\u003c/b\u003e\n                  2 for \u003cb\u003eNo\u003c/b\u003e\n \u003c/pre\u003e",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent dialog or frame of this dialog. (Can be null)"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user:\n \n                  0 is returned if the operation is cancelled\n                  1 for Yes\n                  2 for No\n "
      },
      "throws": []
    },
    {
      "name": "showYesNoDialogWithNoAsDefaultButton",
      "comment": "Dialog with only YES/NO options, no CANCEL\n \n The dialog shown by this method will have the No button set as the default button so\n that an Enter key press will trigger a No action.",
      "javadoc": "Dialog with only YES/NO options, \u003cb\u003eno CANCEL\u003c/b\u003e\n \u003cp\u003e\n The dialog shown by this method will have the \u003ccode\u003eNo\u003c/code\u003e button set as the default button so\n that an Enter key press will trigger a \u003ccode\u003eNo\u003c/code\u003e action.\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@return The options selected by the user:\n \u003cpre\u003e\n                  1 for \u003cb\u003eYes\u003c/b\u003e\n                  2 for \u003cb\u003eNo\u003c/b\u003e\n \u003c/pre\u003e",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user:\n \n                  1 for Yes\n                  2 for No\n "
      },
      "throws": []
    },
    {
      "name": "showYesNoCancelDialog",
      "comment": "Dialog with only YES/NO options, no CANCEL",
      "javadoc": "Dialog with only YES/NO options, \u003cb\u003eno CANCEL\u003c/b\u003e\n@param parent The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior\n@param title The String to be placed in the dialogs title area.\n@param message The information message to be displayed in the dialog.\n@return The options selected by the user:\n \u003cpre\u003e\n                  0 is returned if the operation is cancelled\n                  1 for the first option\n                  2 for the second option\n \u003c/pre\u003e",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "The parent component of this dialog. If the given component is\n a frame or dialog, then the component will be used to parent the option dialog.\n Otherwise, the parent frame or dialog will be found by traversing up the given\n component\u0027s parent hierarchy.  Also, null can be used to not parent the dialog at all,\n but this promotes poor dialog behavior"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The String to be placed in the dialogs title area."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The information message to be displayed in the dialog."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The options selected by the user:\n \n                  0 is returned if the operation is cancelled\n                  1 for the first option\n                  2 for the second option\n "
      },
      "throws": []
    },
    {
      "name": "showInputSingleLineDialog",
      "comment": "Displays a dialog for the user to enter a string value on a single line.",
      "javadoc": "Displays a dialog for the user to enter a string value on a single line.\n@param parent the component to parent this dialog to\n@param title the title to display on the input dialog\n@param label the label to display in front of the text field\n@param initialValue an optional value to set in the text field, can be null\n@return the string entered OR null if the dialog was canceled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to parent this dialog to"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title to display on the input dialog"
        },
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the label to display in front of the text field"
        },
        {
          "name": "initialValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "an optional value to set in the text field, can be null"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string entered OR null if the dialog was canceled."
      },
      "throws": []
    },
    {
      "name": "showInputMultilineDialog",
      "comment": "Displays a dialog for the user to enter a multi-line string value.",
      "javadoc": "Displays a dialog for the user to enter a \u003cb\u003emulti-line\u003c/b\u003e string value.\n@param parent the component to parent this dialog to\n@param title the title to display on the input dialog\n@param label the label to display in front of the text area\n@param initialValue an optional value that will be set in the text area, can be null\n@return the string entered OR null if the dialog was canceled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to parent this dialog to"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title to display on the input dialog"
        },
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the label to display in front of the text area"
        },
        {
          "name": "initialValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "an optional value that will be set in the text area, can be null"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string entered OR null if the dialog was canceled."
      },
      "throws": []
    },
    {
      "name": "showInputChoiceDialog",
      "comment": "Displays a dialog for the user to enter a string value by either typing it or\n selecting from a list of possible strings.",
      "javadoc": "Displays a dialog for the user to enter a string value by either typing it or\n selecting from a list of possible strings.\n@param parent the component to parent this dialog to\n@param title the title to display on the input dialog\n@param label the label to display in front of the combo box\n@param selectableValues an array of string to choose from\n@param initialValue an optional value to set the combo box to, can be null\n in which the combo box will have the first item from the selectable values.\n@param messageType used to specify a default icon, can be ERROR_MESSAGE,\n     INFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)\n@return the string entered or chosen OR null if the dialog was canceled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to parent this dialog to"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title to display on the input dialog"
        },
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the label to display in front of the combo box"
        },
        {
          "name": "selectableValues",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "an array of string to choose from"
        },
        {
          "name": "initialValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "an optional value to set the combo box to, can be null\n in which the combo box will have the first item from the selectable values."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify a default icon, can be ERROR_MESSAGE,\n     INFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string entered or chosen OR null if the dialog was canceled."
      },
      "throws": []
    },
    {
      "name": "showEditableInputChoiceDialog",
      "comment": "Displays a dialog for the user to enter a string value by either typing it or\n selecting from a list of possible strings.  The list of possible values is editable\n such that the user can enter their own value by typing text.",
      "javadoc": "Displays a dialog for the user to enter a string value by either typing it or\n selecting from a list of possible strings.  The list of possible values is editable\n such that the user can enter their own value by typing text.\n@param parent the component to parent this dialog to\n@param title the title to display on the input dialog\n@param label the label to display in front of the combo box\n@param selectableValues an array of string to choose from\n@param initialValue an optional value to set the combo box to, can be null\n in which the combo box will have the first item from the selectable values.\n@param messageType used to specify a default icon, can be ERROR_MESSAGE,\n     INFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)\n@return the string entered or chosen OR null if the dialog was canceled.",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to parent this dialog to"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title to display on the input dialog"
        },
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the label to display in front of the combo box"
        },
        {
          "name": "selectableValues",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "an array of string to choose from"
        },
        {
          "name": "initialValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "an optional value to set the combo box to, can be null\n in which the combo box will have the first item from the selectable values."
        },
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify a default icon, can be ERROR_MESSAGE,\n     INFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE)"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string entered or chosen OR null if the dialog was canceled."
      },
      "throws": []
    },
    {
      "name": "getResult",
      "comment": "Returns which option was selected:\n CANCEL_OPTION if the operation was cancelled;\n OPTION_ONE if Option 1 was selected;\n OPTION_TWO if Option 2 was selected.",
      "javadoc": "Returns which option was selected:\n CANCEL_OPTION if the operation was cancelled;\n OPTION_ONE if Option 1 was selected;\n OPTION_TWO if Option 2 was selected.\n@return selected option; returns CANCEL_OPTION for informational dialogs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "selected option; returns CANCEL_OPTION for informational dialogs"
      },
      "throws": []
    },
    {
      "name": "okCallback",
      "comment": "callback for when the \"OK\" button is pressed.",
      "javadoc": "callback for when the \"OK\" button is pressed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cancelCallback",
      "comment": "Callback for when the cancel button is pressed.",
      "javadoc": "Callback for when the cancel button is pressed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIconForMessageType",
      "comment": "Returns the Icon to use for the given message type.",
      "javadoc": "Returns the Icon to use for the given message type.\n@param messageType the type of message being displayed.\n@return the appropriate Icon.",
      "static": true,
      "params": [
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the type of message being displayed."
        }
      ],
      "return": {
        "type_long": "javax.swing.Icon",
        "type_short": "Icon",
        "comment": "the appropriate Icon."
      },
      "throws": []
    }
  ]
}
