{
  "name": "OptionDialogBuilder",
  "comment": "Class for creating OptionDialogs using the builder pattern.\n\n At a minimum, an OptionDialog requires a title and a message.  They can be specified\n in the constructor or set later.\n\n You can also, specify the messageType or an icon.  The messageType is used to set the\n icon to one of several predefined ones appropriate for the message(ERROR, WARNING, etc.)\n You should not specify both, but if you do, the specified Icon will be used and the\n MessageType will be ignored.\n\n You can also add \"options\" which are custom buttons with the given text. Each option\n button is mapped to a different integer dialog result.  The result values start at 1\n for the first option and increment by 1 for each additional option.\n For example, if you add options \"yes\" and \"no\" in that order, then pressing the \"yes\"\n button will produce a dialog result of 1, and pressing the \"no\" button will produce a\n dialog result of 2.  If no options are added, then an \"OK\" button will automatically be added.\n\n You can also set the default button by calling #setDefaultButton(String) where the\n string is the text of the button (the option) that you want to be the default .  For example, if you\n have the options \"yes\" and \"no\", you can make the \"no\" button the default by specifying\n \"no\" as the defaultOption.\n\n You can also add a Cancel button, which will return a result of 0 if pressed. Note that this\n is different than adding an option named \"Cancel\" which would return a result greater than\n 0, depending on where in the order it was added.\n\n A \"Remember Option\" can be added to OptionDialog to\n present the user with a choice for remembering a dialog result and automatically\n returning that result instead of showing the dialog or similar dialogs in the future.\n Note that for simple OK dialogs, there really isn\u0027t a meaningful result to remember, other\n than a decision was made not to show the dialog again.\n\n The \"Remember Option\" is represented as a checkBox at the bottom of an OptionDialog.\n The checkBox text will be either \"Apply to all\", \"Remember my decision\",\n or \"Don\u0027t show again\" depending on whether #addApplyToAllOption(),\n #addDontShowAgainOption(), or #addRememberMyDecisionOption() method is\n called.\n\n If the user selects the checkBox, then the dialog result will be remembered.\n In future calls to display that dialog (or any dialog sharing\n the same DialogRememberChoice object), the dialog will first check if has a\n DialogRememberChoice object and that it has a remembered result, and if so, will just return\n the remembered result instead of showing the dialog.",
  "javadoc": "Class for creating OptionDialogs using the builder pattern.\n\n \u003cP\u003eAt a minimum, an OptionDialog requires a title and a message.  They can be specified\n in the constructor or set later.\n\n \u003cP\u003eYou can also, specify the messageType or an icon.  The messageType is used to set the\n icon to one of several predefined ones appropriate for the message(ERROR, WARNING, etc.)\n You should not specify both, but if you do, the specified Icon will be used and the\n MessageType will be ignored.\n\n \u003cP\u003eYou can also add \"options\" which are custom buttons with the given text. Each option\n button is mapped to a different integer dialog result.  The result values start at 1\n for the first option and increment by 1 for each additional option.\n For example, if you add options \"yes\" and \"no\" in that order, then pressing the \"yes\"\n button will produce a dialog result of 1, and pressing the \"no\" button will produce a\n dialog result of 2.  If no options are added, then an \"OK\" button will automatically be added.\n\n \u003cP\u003eYou can also set the default button by calling {@link #setDefaultButton(String)} where the\n string is the text of the button (the option) that you want to be the default .  For example, if you\n have the options \"yes\" and \"no\", you can make the \"no\" button the default by specifying\n \"no\" as the defaultOption.\n\n \u003cP\u003eYou can also add a Cancel button, which will return a result of 0 if pressed. Note that this\n is different than adding an option named \"Cancel\" which would return a result greater than\n \u003ccode\u003e0\u003c/code\u003e, depending on where in the order it was added.\n\n \u003cP\u003e\u003ca id\u003d\"RememberOption\"\u003e\u003c/a\u003eA \"Remember Option\" can be added to OptionDialog to\n present the user with a choice for remembering a dialog result and automatically\n returning that result instead of showing the dialog or similar dialogs in the future.\n Note that for simple OK dialogs, there really isn\u0027t a meaningful result to remember, other\n than a decision was made not to show the dialog again.\n\n \u003cP\u003eThe \"Remember Option\" is represented as a checkBox at the bottom of an OptionDialog.\n The checkBox text will be either \"Apply to all\", \"Remember my decision\",\n or \"Don\u0027t show again\" depending on whether {@link #addApplyToAllOption()},\n {@link #addDontShowAgainOption()}, or {@link #addRememberMyDecisionOption()} method is\n called.\n\n \u003cP\u003eIf the user selects the checkBox, then the dialog result will be remembered.\n In future calls to display that dialog (or any dialog sharing\n the same DialogRememberChoice object), the dialog will first check if has a\n DialogRememberChoice object and that it has a remembered result, and if so, will just return\n the remembered result instead of showing the dialog.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "title",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "message",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "icon",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    },
    {
      "name": "messageType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "addCancelButton",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "options",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cjava.lang.String\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "defaultOption",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "rememberOption",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.DialogRememberOption",
      "type_short": "DialogRememberOption",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs an OptionDialogBuilder with not even the minimal information required. If\n this constructor is used, then both #setTitle(String) and the\n #setMessage(String) methods must be called\n or else the dialog will have no title or message.",
      "javadoc": "Constructs an OptionDialogBuilder with not even the minimal information required. If\n this constructor is used, then both {@link #setTitle(String)} and the\n {@link #setMessage(String)} methods must be called\n or else the dialog will have no title or message.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs an OptionDialogBuilder with not even the minimal information required. If\n this constructor is used, then the #setMessage(String) method must be called\n or else the dialog will be blank.",
      "javadoc": "Constructs an OptionDialogBuilder with not even the minimal information required. If\n this constructor is used, then the {@link #setMessage(String)} method must be called\n or else the dialog will be blank.\n@param title the title of the dialog",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title of the dialog"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs an OptionDialogBuilder with the minimal information required. If no\n other information is set, the builder will create the simplest dialog that has\n a title, message and an \"Ok\" button.",
      "javadoc": "Constructs an OptionDialogBuilder with the minimal information required. If no\n other information is set, the builder will create the simplest dialog that has\n a title, message and an \"Ok\" button.\n@param title the title of the dialog.\n@param message the main message to be displayed in the dialog.",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title of the dialog."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the main message to be displayed in the dialog."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTitle",
      "comment": "Sets the title for the OptionDialog.",
      "javadoc": "Sets the title for the OptionDialog.\n@param title the title for the dialog.\n@return this builder object.",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title for the dialog."
        }
      ],
      "return": {
        "type_long": "docking.widgets.OptionDialogBuilder",
        "type_short": "OptionDialogBuilder",
        "comment": "this builder object."
      },
      "throws": []
    },
    {
      "name": "setMessage",
      "comment": "Sets the main message for the OptionDialog.",
      "javadoc": "Sets the main message for the OptionDialog.\n@param message the main message for the dialog.\n@return this builder object.",
      "static": false,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the main message for the dialog."
        }
      ],
      "return": {
        "type_long": "docking.widgets.OptionDialogBuilder",
        "type_short": "OptionDialogBuilder",
        "comment": "this builder object."
      },
      "throws": []
    },
    {
      "name": "setIcon",
      "comment": "Sets the Icon for the OptionDialog.\n \n If both an Icon and a message type are specified,\n the icon will take precedence.",
      "javadoc": "Sets the Icon for the OptionDialog.\n \u003cP\u003e\n If both an Icon and a message type are specified,\n the icon will take precedence.\n@param icon the icon to display in the dialog.\n@return this builder object.",
      "static": false,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon to display in the dialog."
        }
      ],
      "return": {
        "type_long": "docking.widgets.OptionDialogBuilder",
        "type_short": "OptionDialogBuilder",
        "comment": "this builder object."
      },
      "throws": []
    },
    {
      "name": "setMessageType",
      "comment": "Sets the message type for the OptionDialog which will determine the icon that\n is in the dialog.",
      "javadoc": "Sets the message type for the OptionDialog which will determine the icon that\n is in the dialog.\n@param messageType used to specify that this dialog is one of the set types.  See\n {@link OptionDialog} for the list of defined messageTypes.\n@return this builder object.",
      "static": false,
      "params": [
        {
          "name": "messageType",
          "type_long": "int",
          "type_short": "int",
          "comment": "used to specify that this dialog is one of the set types.  See\n OptionDialog for the list of defined messageTypes."
        }
      ],
      "return": {
        "type_long": "docking.widgets.OptionDialogBuilder",
        "type_short": "OptionDialogBuilder",
        "comment": "this builder object."
      },
      "throws": []
    },
    {
      "name": "addCancel",
      "comment": "Adds a cancel button to the OptionDialog.",
      "javadoc": "Adds a cancel button to the OptionDialog.\n@return this builder object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.OptionDialogBuilder",
        "type_short": "OptionDialogBuilder",
        "comment": "this builder object."
      },
      "throws": []
    },
    {
      "name": "addOption",
      "comment": "Adds a button option to the dialog.",
      "javadoc": "Adds a button option to the dialog.\n@param optionName the name of the button to be added to the dialog\n@return this builder object.",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the button to be added to the dialog"
        }
      ],
      "return": {
        "type_long": "docking.widgets.OptionDialogBuilder",
        "type_short": "OptionDialogBuilder",
        "comment": "this builder object."
      },
      "throws": []
    },
    {
      "name": "setDefaultButton",
      "comment": "Sets the name of the button to be used as the default button.",
      "javadoc": "Sets the name of the button to be used as the default button.\n@param optionName the name of the option to be the default.\n@return this builder object.",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the option to be the default."
        }
      ],
      "return": {
        "type_long": "docking.widgets.OptionDialogBuilder",
        "type_short": "OptionDialogBuilder",
        "comment": "this builder object."
      },
      "throws": []
    },
    {
      "name": "addApplyToAllOption",
      "comment": "Adds an \"Apply to all\" option to the dialog. See \n header documentation for details.\n \n This will replace any previously added \"checkBox\" options.",
      "javadoc": "Adds an \"Apply to all\" option to the dialog. See \u003ca href\u003d\"#RememberOption\"\u003e\n header documentation\u003c/a\u003e for details.\n \u003cP\u003e\n This will replace any previously added \"checkBox\" options.\n@return this builder object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.OptionDialogBuilder",
        "type_short": "OptionDialogBuilder",
        "comment": "this builder object."
      },
      "throws": []
    },
    {
      "name": "addDontShowAgainOption",
      "comment": "Adds a \"Don\u0027t show again\" option to the dialog. See \n header documentation for details.\n \n This will replace any previously added \"checkBox\" options.",
      "javadoc": "Adds a \"Don\u0027t show again\" option to the dialog. See \u003ca href\u003d\"#RememberOption\"\u003e\n header documentation\u003c/a\u003e for details.\n \u003cP\u003e\n This will replace any previously added \"checkBox\" options.\n@return this builder object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.OptionDialogBuilder",
        "type_short": "OptionDialogBuilder",
        "comment": "this builder object."
      },
      "throws": []
    },
    {
      "name": "addRememberMyDecisionOption",
      "comment": "Adds a \"Remember my decision\" option to the dialog. See \n header documentation for details.\n \n This will replace any previously added \"checkBox\" options.",
      "javadoc": "Adds a \"Remember my decision\" option to the dialog. See \u003ca href\u003d\"#RememberOption\"\u003e\n header documentation\u003c/a\u003e for details.\n \u003cP\u003e\n This will replace any previously added \"checkBox\" options.\n@return this builder object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.OptionDialogBuilder",
        "type_short": "OptionDialogBuilder",
        "comment": "this builder object."
      },
      "throws": []
    },
    {
      "name": "build",
      "comment": "Builds an OptionDialog based on the values set in this builder.",
      "javadoc": "Builds an OptionDialog based on the values set in this builder.\n@return an OptionDialog built based on the values set in this builder.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.OptionDialog",
        "type_short": "OptionDialog",
        "comment": "an OptionDialog built based on the values set in this builder."
      },
      "throws": []
    },
    {
      "name": "show",
      "comment": "Builds and shows an OptionDialog based on the values set in this builder.",
      "javadoc": "Builds and shows an OptionDialog based on the values set in this builder.\n@return the result returned from the OptionDialog after the user selected an option.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the result returned from the OptionDialog after the user selected an option."
      },
      "throws": []
    },
    {
      "name": "show",
      "comment": "Builds and shows an OptionDialog based on the values set in this builder.",
      "javadoc": "Builds and shows an OptionDialog based on the values set in this builder.\n@param parent the component to use as the OptionDialog\u0027s parent when displaying it.\n@return the result returned from the OptionDialog after the user selected an option.",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to use as the OptionDialog\u0027s parent when displaying it."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the result returned from the OptionDialog after the user selected an option."
      },
      "throws": []
    }
  ]
}
