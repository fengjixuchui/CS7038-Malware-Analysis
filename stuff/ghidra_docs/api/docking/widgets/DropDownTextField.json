{
  "name": "DropDownTextField",
  "comment": "A text field that handles comparing text typed by the user to the list of objects\n and then presenting potential matches in a drop down window.  The items in this window\n cannot be selected.\n\n This class will fire #fireEditingStopped() and #fireEditingCancelled()\n events when the user makes a choice by pressing the ENTER key, thus allowing the client\n code to use this class similar in fashion to a property editor.  This behavior can be\n configured to:\n \n \tNot consume the ENTER key press (it consumes by default), allowing the parent container\n      to process the event (see #setConsumeEnterKeyPress(boolean)\n  \n  Ignore the ENTER key press completely (see #setIgnoreEnterKeyPress(boolean)\n  \n \n\n This class is subclassed to not only have the matching behavior, but to also allow for\n user selections.",
  "javadoc": "A text field that handles comparing text typed by the user to the list of objects\n and then presenting potential matches in a drop down window.  The items in this window\n cannot be selected.\n\n \u003cP\u003eThis class will fire {@link #fireEditingStopped()} and {@link #fireEditingCancelled()}\n events when the user makes a choice by pressing the ENTER key, thus allowing the client\n code to use this class similar in fashion to a property editor.  This behavior can be\n configured to:\n \u003cUL\u003e\n \t\u003cLI\u003eNot consume the ENTER key press (it consumes by default), allowing the parent container\n      to process the event (see {@link #setConsumeEnterKeyPress(boolean)}\n  \u003c/LI\u003e\n  \u003cLI\u003eIgnore the ENTER key press completely (see {@link #setIgnoreEnterKeyPress(boolean)}\n  \u003c/LI\u003e\n \u003c/UL\u003e\n\n \u003cp\u003eThis class is subclassed to not only have the matching behavior, but to also allow for\n user selections.\n@param \u003cT\u003e The type of object that this model manipulates",
  "static": false,
  "implements": [
    "docking.widgets.GComponent"
  ],
  "extends": "javax.swing.JTextField",
  "fields": [
    {
      "name": "DEFAULT_MAX_UPDATE_DELAY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2000"
    },
    {
      "name": "MIN_HEIGHT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "300"
    },
    {
      "name": "MIN_WIDTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "200"
    },
    {
      "name": "TOOLTIP_WINDOW_BGCOLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "toolTipWindow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JWindow",
      "type_short": "JWindow",
      "constant_value": null
    },
    {
      "name": "matchingWindow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JWindow",
      "type_short": "JWindow",
      "constant_value": null
    },
    {
      "name": "windowVisibilityListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.DropDownWindowVisibilityListener\u003cT\u003e",
      "type_short": "DropDownWindowVisibilityListener",
      "constant_value": null
    },
    {
      "name": "previewLabel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.label.GDHtmlLabel",
      "type_short": "GDHtmlLabel",
      "constant_value": null
    },
    {
      "name": "list",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.list.GList\u003cT\u003e",
      "type_short": "GList",
      "constant_value": null
    },
    {
      "name": "choiceListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.WeakSet\u003cdocking.widgets.DropDownSelectionChoiceListener\u003cT\u003e\u003e",
      "type_short": "WeakSet",
      "constant_value": null
    },
    {
      "name": "cellEditorListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Collection\u003cjavax.swing.event.CellEditorListener\u003e",
      "type_short": "Collection",
      "constant_value": null
    },
    {
      "name": "documentListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.event.DocumentListener",
      "type_short": "DocumentListener",
      "constant_value": null
    },
    {
      "name": "caretListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.event.CaretListener",
      "type_short": "CaretListener",
      "constant_value": null
    },
    {
      "name": "keyListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.DropDownTextField\u003cT\u003e.InternalKeyListener",
      "type_short": "InternalKeyListener",
      "constant_value": null
    },
    {
      "name": "parentWindowListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.DropDownTextField\u003cT\u003e.WindowComponentListener",
      "type_short": "WindowComponentListener",
      "constant_value": null
    },
    {
      "name": "selectedValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "T",
      "type_short": "T",
      "constant_value": null
    },
    {
      "name": "cellHeight",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "matchingWindowHeight",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "lastLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Point",
      "type_short": "Point",
      "constant_value": null
    },
    {
      "name": "dataModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.DropDownTextFieldDataModel\u003cT\u003e",
      "type_short": "DropDownTextFieldDataModel",
      "constant_value": null
    },
    {
      "name": "internallyDrivenUpdate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "consumeEnterKeyPress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "ignoreEnterKeyPress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "ignoreCaretChanges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "pendingTextUpdate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "updateManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.SwingUpdateManager",
      "type_short": "SwingUpdateManager",
      "constant_value": null
    },
    {
      "name": "currentMatchingText",
      "comment": "The text that was used to generate the current list of matches.  This can be different\n than the text of this text field, as the user can move the cursor around, which will\n change the list of matches.  Also, we can set the value of the text field as the user\n arrows through the list, which will change the contents of the text field, but not the\n list of matches.",
      "javadoc": "The text that was used to generate the current list of matches.  This can be different\n than the text of this text field, as the user can move the cursor around, which will\n change the list of matches.  Also, we can set the value of the text field as the user\n arrows through the list, which will change the contents of the text field, but not the\n list of matches.",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor.\n \n Uses the default refresh delay of 350ms.",
      "javadoc": "Constructor.\n \u003cp\u003e\n Uses the default refresh delay of 350ms.\n@param dataModel provides element storage and search capabilities to this component.",
      "static": false,
      "params": [
        {
          "name": "dataModel",
          "type_long": "docking.widgets.DropDownTextFieldDataModel\u003cT\u003e",
          "type_short": "DropDownTextFieldDataModel",
          "comment": "provides element storage and search capabilities to this component."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor.",
      "javadoc": "Constructor.\n@param dataModel provides element storage and search capabilities to this component.\n@param updateMinDelay suggestion list refresh delay, triggered after search results have\n changed. Too low a value may cause an inconsistent view as filtering tasks complete; too high\n a value delivers an unresponsive user experience.",
      "static": false,
      "params": [
        {
          "name": "dataModel",
          "type_long": "docking.widgets.DropDownTextFieldDataModel\u003cT\u003e",
          "type_short": "DropDownTextFieldDataModel",
          "comment": "provides element storage and search capabilities to this component."
        },
        {
          "name": "updateMinDelay",
          "type_long": "int",
          "type_short": "int",
          "comment": "suggestion list refresh delay, triggered after search results have\n changed. Too low a value may cause an inconsistent view as filtering tasks complete; too high\n a value delivers an unresponsive user experience."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "init",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "updateMinDelay",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createListSelectionModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.ListSelectionModel",
        "type_short": "ListSelectionModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPreviewPaneAttributes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSelectedItems",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPreviewListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.event.ListSelectionListener",
        "type_short": "ListSelectionListener",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPreviewPaneComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JComponent",
        "type_short": "JComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processKeyBinding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ks",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": ""
        },
        {
          "name": "e",
          "type_long": "java.awt.event.KeyEvent",
          "type_short": "KeyEvent",
          "comment": ""
        },
        {
          "name": "condition",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "pressed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleEscapeKey",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ks",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": ""
        },
        {
          "name": "e",
          "type_long": "java.awt.event.KeyEvent",
          "type_short": "KeyEvent",
          "comment": ""
        },
        {
          "name": "condition",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "pressed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleEnterKey",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ks",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": ""
        },
        {
          "name": "e",
          "type_long": "java.awt.event.KeyEvent",
          "type_short": "KeyEvent",
          "comment": ""
        },
        {
          "name": "condition",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "pressed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "validateChosenItemAgainstText",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "isListShowing",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initDataList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addUpdateListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeUpdateListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setText",
      "comment": "Overridden to allow for the setting of text without showing the completion window.  This\n is useful for setting the current value to be edited before the using initiates editing.",
      "javadoc": "Overridden to allow for the setting of text without showing the completion window.  This\n is useful for setting the current value to be edited before the using initiates editing.\n@param text The text to set on this text field.",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to set on this text field."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTextWithoutClosingCompletionWindow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateDisplayLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "hasMatches",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasPreview",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateWindowLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateDisplayContents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "userText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "maybeUpdateDisplayContents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "userText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doUpdateDisplayContents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "userText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMatchingData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "searchText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isMatchingListShowing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setConsumeEnterKeyPress",
      "comment": "When true, this field will not pass Enter key press events up to it\u0027s parent when the\n drop-down selection window is open.  However, an Enter key press will still be\n \"unconsumed\" when the drop-down window is not open. When set to false, this\n method will always pass the Enter key press up to it\u0027s parent.\n\n The default is true.  Clients will set this to false when they wish to respond to an\n Enter event.  For example, a dialog may want to close itself on an Enter key press, even\n when the drop-down selection text field is still open. Contrastingly, when this field\n is embedded inside of a larger editor, like a multi-editor field dialog,\n the Enter key press should simply\n trigger the drop-down window to close and the editing to stop, but should not trigger the",
      "javadoc": "When true, this field will not pass Enter key press events up to it\u0027s parent \u003cb\u003ewhen the\n drop-down selection window is open\u003c/b\u003e.  However, an Enter key press will still be\n \"unconsumed\" when the drop-down window is not open. When set to false, this\n method will always pass the Enter key press up to it\u0027s parent.\n\n \u003cP\u003eThe default is true.  Clients will set this to false when they wish to respond to an\n Enter event.  For example, a dialog may want to close itself on an Enter key press, even\n when the drop-down selection text field is still open. Contrastingly, when this field\n is embedded inside of a larger editor, like a multi-editor field dialog,\n the Enter key press should simply\n trigger the drop-down window to close and the editing to stop, but should not trigger the",
      "static": false,
      "params": [
        {
          "name": "consume",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setIgnoreEnterKeyPress",
      "comment": "True signals to do nothing when the user presses Enter.  The default is to respond\n to the Enter key, using any existing selection to set this field\u0027s\n #getSelectedValue().\n\n This can be set to true to allow clients to show drop-down matches without allowing\n the user to select them, triggering the window to be closed.",
      "javadoc": "True signals to do nothing when the user presses Enter.  The default is to respond\n to the Enter key, using any existing selection to set this field\u0027s\n {@link #getSelectedValue() selected value}.\n\n \u003cP\u003eThis can be set to true to allow clients to show drop-down matches without allowing\n the user to select them, triggering the window to be closed.\n@param ignore true to ignore Enter presses; false is the default",
      "static": false,
      "params": [
        {
          "name": "ignore",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to ignore Enter presses; false is the default"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMatchingWindowHeight",
      "comment": "Sets the height of the matching window.  The default value is .",
      "javadoc": "Sets the height of the matching window.  The default value is {@value #MIN_HEIGHT}.\n@param height the new height",
      "static": false,
      "params": [
        {
          "name": "height",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new height"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDropDownSelectionChoiceListener",
      "comment": "Adds a listener that will be called back when the user makes a choice from the drop-down\n list.  A choice is a user action that triggers the selection window to be closed and updates\n the text field.\n\n Note: the listener is stored in a WeakDataStructureFactory,\n  so you must maintain a reference to the listener you pass in--anonymous\n  classes or lambdas will not work.",
      "javadoc": "Adds a listener that will be called back when the user makes a choice from the drop-down\n list.  A choice is a user action that triggers the selection window to be closed and updates\n the text field.\n\n \u003cP\u003eNote: the listener is stored in a {@link WeakDataStructureFactory weak data structure},\n  so you must maintain a reference to the listener you pass in--anonymous\n  classes or lambdas will not work.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "docking.widgets.DropDownSelectionChoiceListener\u003cT\u003e",
          "type_short": "DropDownSelectionChoiceListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addCellEditorListener",
      "comment": "Adds a listener to be notified when cell editing is canceled or completed.",
      "javadoc": "Adds a listener to be notified when cell editing is canceled or completed.\n@param listener The listener to add\n@throws IllegalArgumentException if the listener has already been added",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "javax.swing.event.CellEditorListener",
          "type_short": "CellEditorListener",
          "comment": "The listener to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeCellEditorListener",
      "comment": "Removes the given listener from this class if it has previously been added.",
      "javadoc": "Removes the given listener from this class if it has previously been added.\n@param listener The listener to remove.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "javax.swing.event.CellEditorListener",
          "type_short": "CellEditorListener",
          "comment": "The listener to remove."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fireUserChoiceMade",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "selectedItem",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fireEditingCancelled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fireEditingStopped",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createMatchingWindow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMatchingWindow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JWindow",
        "type_short": "JWindow",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createToolTipWindow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Window",
          "type_short": "Window",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "storeSelectedValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newValue",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTextFromList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTextFromDoubleClick",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTextFromListOnEnterPress",
      "comment": "This is more complicated that responding to the user mouse click.  When clicked, the user\n is signalling to use the clicked item.  When pressing Enter, they may have been typing\n and ignoring the list, so we have to do some validation.",
      "javadoc": "This is more complicated that responding to the user mouse click.  When clicked, the user\n is signalling to use the clicked item.  When pressing Enter, they may have been typing\n and ignoring the list, so we have to do some validation.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSelectedValue",
      "comment": "Returns the user\u0027s selection or null if the user has not made a selection.\n \n Note: the the value returned from this method may not match the text in the field in the\n case that the user has selected a value and then typed some text.",
      "javadoc": "Returns the user\u0027s selection or null if the user has not made a selection.\n \u003cp\u003e\n Note: the the value returned from this method may not match the text in the field in the\n case that the user has selected a value and then typed some text.\n@return the user\u0027s selection or null if the user has not made a selection.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the user\u0027s selection or null if the user has not made a selection."
      },
      "throws": []
    },
    {
      "name": "setSelectedValue",
      "comment": "Sets the current selection on this text field.  This will store the provided value\n and set the text of the text field to be the name of that value.  If the given value\n is null, then the text of this field will be cleared.",
      "javadoc": "Sets the current selection on this text field.  This will store the provided value\n and set the text of the text field to be the name of that value.  If the given value\n is null, then the text of this field will be cleared.\n@param value The value that is to be the current selection or null to clear the\n        selected value of this text field.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "T",
          "type_short": "T",
          "comment": "The value that is to be the current selection or null to clear the\n        selected value of this text field."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "closeDropDownWindow",
      "comment": "Closes the drop down window",
      "javadoc": "Closes the drop down window",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showMatchingWindow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hideMatchingWindow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getJList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JList\u003cT\u003e",
        "type_short": "JList",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getActiveMatchingWindow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JWindow",
        "type_short": "JWindow",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMatchingWindowVisibilityListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "docking.widgets.DropDownWindowVisibilityListener\u003cT\u003e",
          "type_short": "DropDownWindowVisibilityListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTextFromSelectedListItemAndKeepMatchingWindowOpen",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
