{
  "name": "MultiLineLabel",
  "comment": "Class to render a String that has new line characters as a multiline\n label. Calculates the resizing and centering characteristics.\n \n Not affected by HTML formatting.\n ",
  "javadoc": "Class to render a String that has new line characters as a multiline\n label. Calculates the resizing and centering characteristics.\n \u003cp\u003e\n Not affected by HTML formatting.\n \u003cp\u003e",
  "static": false,
  "implements": [],
  "extends": "javax.swing.JPanel",
  "fields": [
    {
      "name": "LEFT",
      "comment": "Indicator for left alignment.",
      "javadoc": "Indicator for left alignment.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "CENTER",
      "comment": "Indicator for centering each line.",
      "javadoc": "Indicator for centering each line.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "RIGHT",
      "comment": "Indicator for right alignment.",
      "javadoc": "Indicator for right alignment.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "lines",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "num_lines",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "margin_width",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "margin_height",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "line_height",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "line_ascent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "line_widths",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "max_width",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "alignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Default constructor.",
      "javadoc": "Default constructor.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new MultiLineLabel.",
      "javadoc": "Construct a new MultiLineLabel.\n@param label String to split up if it contains new line characters\n@param margin_width width of label\n@param margin_height height of label\n@param alignment alignment of label, LEFT, CENTER, or RIGHT",
      "static": false,
      "params": [
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String to split up if it contains new line characters"
        },
        {
          "name": "margin_width",
          "type_long": "int",
          "type_short": "int",
          "comment": "width of label"
        },
        {
          "name": "margin_height",
          "type_long": "int",
          "type_short": "int",
          "comment": "height of label"
        },
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": "alignment of label, LEFT, CENTER, or RIGHT"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new MultiLineLabel that is left aligned with the default\n width and height margins.",
      "javadoc": "Construct a new MultiLineLabel that is left aligned with the default\n width and height margins.\n@param label String to split up if it contains new line characters",
      "static": false,
      "params": [
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String to split up if it contains new line characters"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newLabel",
      "comment": "breaks specified label into array of lines.",
      "javadoc": "breaks specified label into array of lines.\n@param label String to display in canvas.",
      "static": false,
      "params": [
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String to display in canvas."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCallerString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "measure",
      "comment": "This method figures out how large the font is, and how wide\n each line of the label is, and how wide the widest line is.",
      "javadoc": "This method figures out how large the font is, and how wide\n each line of the label is, and how wide the widest line is.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLabel",
      "comment": "Set a new label for JPanel",
      "javadoc": "Set a new label for JPanel\n@param label String to display in canvas",
      "static": false,
      "params": [
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String to display in canvas"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLabel",
      "comment": "Set the label text.",
      "javadoc": "Set the label text.\n@param text array of strings to display.",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "array of strings to display."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLabel",
      "comment": "Get the label text.",
      "javadoc": "Get the label text.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFont",
      "comment": "Sets a new font for label",
      "javadoc": "Sets a new font for label\n@param f Font to set label",
      "static": false,
      "params": [
        {
          "name": "f",
          "type_long": "java.awt.Font",
          "type_short": "Font",
          "comment": "Font to set label"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setForeground",
      "comment": "Sets a new color for Canvas",
      "javadoc": "Sets a new color for Canvas\n@param c Color to display in canvas",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "Color to display in canvas"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setAlignment",
      "comment": "Set alignment for text, LEFT, RIGHT, CENTER.",
      "javadoc": "Set alignment for text, LEFT, RIGHT, CENTER.\n@param a the new alignment.",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new alignment."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMarginWidth",
      "comment": "Set margin width.",
      "javadoc": "Set margin width.\n@param mw the new margin width.",
      "static": false,
      "params": [
        {
          "name": "mw",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new margin width."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMarginHeight",
      "comment": "Sets the margin height",
      "javadoc": "Sets the margin height\n@param mh the new margin height.",
      "static": false,
      "params": [
        {
          "name": "mh",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new margin height."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAlignment",
      "comment": "Get alignment for text, LEFT, CENTER, RIGHT.",
      "javadoc": "Get alignment for text, LEFT, CENTER, RIGHT.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMarginWidth",
      "comment": "Get margin width.",
      "javadoc": "Get margin width.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMarginHeight",
      "comment": "Get margin height.",
      "javadoc": "Get margin height.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addNotify",
      "comment": "This method is invoked after Canvas is first created\n but before it can be actually displayed. After we have\n invoked our superclass\u0027s addNotify() method, we have font\n metrics and can successfully call measure() to figure out\n how big the label is.",
      "javadoc": "This method is invoked after Canvas is first created\n but before it can be actually displayed. After we have\n invoked our superclass\u0027s addNotify() method, we have font\n metrics and can successfully call measure() to figure out\n how big the label is.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPreferredSize",
      "comment": "This method is called by a layout manager when it wants\n to know how big we\u0027d like to be",
      "javadoc": "This method is called by a layout manager when it wants\n to know how big we\u0027d like to be",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Dimension",
        "type_short": "Dimension",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinimumSize",
      "comment": "This method is called when layout manager wants to\n know the bare minimum amount of space we need to get by.",
      "javadoc": "This method is called when layout manager wants to\n know the bare minimum amount of space we need to get by.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Dimension",
        "type_short": "Dimension",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "paint",
      "comment": "This method draws label (applets use same method).\n Note that it handles the margins and the alignment, but\n that is does not have to worry about the color or font --\n the superclass takes care of setting those in the Graphics\n object we\u0027ve passed.",
      "javadoc": "This method draws label (applets use same method).\n Note that it handles the margins and the alignment, but\n that is does not have to worry about the color or font --\n the superclass takes care of setting those in the Graphics\n object we\u0027ve passed.\n@param g the graphics context to paint with.",
      "static": false,
      "params": [
        {
          "name": "g",
          "type_long": "java.awt.Graphics",
          "type_short": "Graphics",
          "comment": "the graphics context to paint with."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "main",
      "comment": "Simple test for the MultiLineLabel class.",
      "javadoc": "Simple test for the MultiLineLabel class.\n@param args not used",
      "static": true,
      "params": [
        {
          "name": "args",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "not used"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
