{
  "name": "AbstractPatternTextFilter",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "docking.widgets.filter.TextFilter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "filterText",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "filterPattern",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.regex.Pattern",
      "type_short": "Pattern",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "filterText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createPattern",
      "comment": "Subclasses must create the Pattern that will be used by this class when filtering.",
      "javadoc": "Subclasses must create the {@link Pattern} that will be used by this class when filtering.\n@return the pattern",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.regex.Pattern",
        "type_short": "Pattern",
        "comment": "the pattern"
      },
      "throws": []
    },
    {
      "name": "matches",
      "comment": "Subclasses implement this method for their usage of the given pattern (find vs. matches)",
      "javadoc": "Subclasses implement this method for their usage of the given pattern (find vs. matches)\n@param text the text to check against the pattern\n@param pattern the pattern used to match the text\n@return true if there is a match",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to check against the pattern"
        },
        {
          "name": "pattern",
          "type_long": "java.util.regex.Pattern",
          "type_short": "Pattern",
          "comment": "the pattern used to match the text"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there is a match"
      },
      "throws": []
    },
    {
      "name": "getFilterText",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "matches",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFilterPattern",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.regex.Pattern",
        "type_short": "Pattern",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "patternsEqual",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p1",
          "type_long": "java.util.regex.Pattern",
          "type_short": "Pattern",
          "comment": ""
        },
        {
          "name": "p2",
          "type_long": "java.util.regex.Pattern",
          "type_short": "Pattern",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPatternString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "java.util.regex.Pattern",
          "type_short": "Pattern",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPatternFlags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "java.util.regex.Pattern",
          "type_short": "Pattern",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
