{
  "name": "MultiTermPanel",
  "comment": "Contains widgets for configuring multi-term filtering. This has two main\n sections for setting the delimiter and setting the mode. The former allows the user to \n select a delimiter from a predefined set of characters. The latter allows them to \n define how multiple terms are logically applied; eg: \u0027AND\u0027 means that all filter terms\n must be matched, \u0027OR\u0027 means any single term must match.",
  "javadoc": "Contains widgets for configuring multi-term filtering. This has two main\n sections for setting the delimiter and setting the mode. The former allows the user to \n select a delimiter from a predefined set of characters. The latter allows them to \n define how multiple terms are logically applied; eg: \u0027AND\u0027 means that all filter terms\n must be matched, \u0027OR\u0027 means any single term must match.",
  "static": false,
  "implements": [],
  "extends": "docking.widgets.InlineComponentTitledPanel",
  "fields": [
    {
      "name": "optionsPaneDisableLayer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JLayer\u003c?\u003e",
      "type_short": "JLayer",
      "constant_value": null
    },
    {
      "name": "enableCheckbox",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JCheckBox",
      "type_short": "JCheckBox",
      "constant_value": null
    },
    {
      "name": "modeButtons",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cjavax.swing.JRadioButton\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "delimiterCharacterCB",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JComboBox\u003cjava.lang.String\u003e",
      "type_short": "JComboBox",
      "constant_value": null
    },
    {
      "name": "evalMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.filter.MultitermEvaluationMode",
      "type_short": "MultitermEvaluationMode",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEvalMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.filter.MultitermEvaluationMode",
        "type_short": "MultitermEvaluationMode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setEvalMode",
      "comment": "Sets the eval mode to what is given. This is done by activating the\n appropriate radio button associated with that mode.",
      "javadoc": "Sets the eval mode to what is given. This is done by activating the\n appropriate radio button associated with that mode.\n@param evalMode",
      "static": false,
      "params": [
        {
          "name": "evalMode",
          "type_long": "docking.widgets.filter.MultitermEvaluationMode",
          "type_short": "MultitermEvaluationMode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMultitermEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setOptionsEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isMultitermEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDelimiter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "char",
        "type_short": "char",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDelimiter",
      "comment": "Sets the character to use for the delimiter. If the character is not found in \n the set of acceptable delimiters, the delimiter is not changed.",
      "javadoc": "Sets the character to use for the delimiter. If the character is not found in \n the set of acceptable delimiters, the delimiter is not changed.\n@param delimiter the character to use as the delimiter",
      "static": false,
      "params": [
        {
          "name": "delimiter",
          "type_long": "char",
          "type_short": "char",
          "comment": "the character to use as the delimiter"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createPanel",
      "comment": "Creates the main panel for this dialog.",
      "javadoc": "Creates the main panel for this dialog.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
