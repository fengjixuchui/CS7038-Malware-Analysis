{
  "name": "ResourceManager",
  "comment": "General resource management class that provides a convenient\n way of accessing external resources used in Ghidra.\n \n \n There is a known problem with Java\u0027s MediaTracker that can cause deadlocks.  The various\n methods of this class that create ImageIcons will do so by loading image bytes directly,\n as opposed to using the flawed constructor ImageIcon#ImageIcon(Image).",
  "javadoc": "General resource management class that provides a convenient\n way of accessing external resources used in Ghidra.\n \u003cp\u003e\n \u003ca id\u003d\"safe\"\u003e\u003c/a\u003e\n There is a known problem with Java\u0027s {@link MediaTracker} that can cause deadlocks.  The various\n methods of this class that create {@link ImageIcon}s will do so by loading image bytes directly,\n as opposed to using the flawed constructor {@link ImageIcon#ImageIcon(Image)}.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DEFAULT_ICON_FILENAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "DEFAULT_ICON",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.ImageIcon",
      "type_short": "ImageIcon",
      "constant_value": null
    },
    {
      "name": "iconMap",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Map\u003cjava.lang.String,javax.swing.ImageIcon\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "defaultSearchPaths",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.List\u003cjava.lang.String\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "testSearchPaths",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.List\u003cjava.lang.String\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "classLoader",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.ClassLoader",
      "type_short": "ClassLoader",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getResource",
      "comment": "Finds a resource with a given name. This method returns null if no\n resource with this name is found. The rules for searching resources\n associated with a given class are implemented by the defining class\n loader of the class.",
      "javadoc": "Finds a resource with a given name. This method returns null if no\n resource with this name is found. The rules for searching resources\n associated with a given class are implemented by the defining class\n loader of the class.\n@param filename \"partially\" qualified resource filename to get, e.g.,\n        \"images/go-home.png\" would look for the file named \u0027home.gif\u0027 in\n        the \u0027images\u0027 subdirectory of the \u0027resources\u0027 package,\n        following the search rules defined by your CLASSPATH and\n        return an InputStream if found; null if it cannot load the resource.\n@return the URL",
      "static": true,
      "params": [
        {
          "name": "filename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "\"partially\" qualified resource filename to get, e.g.,\n        \"images/go-home.png\" would look for the file named \u0027home.gif\u0027 in\n        the \u0027images\u0027 subdirectory of the \u0027resources\u0027 package,\n        following the search rules defined by your CLASSPATH and\n        return an InputStream if found; null if it cannot load the resource."
        }
      ],
      "return": {
        "type_long": "java.net.URL",
        "type_short": "URL",
        "comment": "the URL"
      },
      "throws": []
    },
    {
      "name": "getResourceAsStream",
      "comment": "Finds a resource with a given name. This method returns null if no resource\n with this name is found. The rules for searching resources associated with a\n given class are implemented by the defining class loader of the class.",
      "javadoc": "Finds a resource with a given name. This method returns null if no resource\n with this name is found. The rules for searching resources associated with a\n given class are implemented by the defining class loader of the class.\n@param filename \"partially\" qualified resource filename to get, e.g., \"images/home.gif\" \n        would look for the file named \u0027home.gif\u0027 in the \u0027images\u0027 subdirectory of \n        the \u0027resources\u0027 package, following the search rules defined by your \n        CLASSPATH and return an InputStream if found; null if it cannot load the resource.\n@return the input stream",
      "static": true,
      "params": [
        {
          "name": "filename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "\"partially\" qualified resource filename to get, e.g., \"images/home.gif\" \n        would look for the file named \u0027home.gif\u0027 in the \u0027images\u0027 subdirectory of \n        the \u0027resources\u0027 package, following the search rules defined by your \n        CLASSPATH and return an InputStream if found; null if it cannot load the resource."
        }
      ],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": "the input stream"
      },
      "throws": []
    },
    {
      "name": "getResourceFile",
      "comment": "Locates a File resource by the given name",
      "javadoc": "Locates a File resource by the given name\n@param filename the filename\n@return the File for the given resource; null if there is no such file",
      "static": true,
      "params": [
        {
          "name": "filename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the filename"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the File for the given resource; null if there is no such file"
      },
      "throws": []
    },
    {
      "name": "getResource",
      "comment": "Searches the given set of directory paths for the given filename",
      "javadoc": "Searches the given set of directory paths for the given filename\n@param searchPaths the paths\n@param filename the filename\n@return the URL of the first matching file",
      "static": true,
      "params": [
        {
          "name": "searchPaths",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": "the paths"
        },
        {
          "name": "filename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the filename"
        }
      ],
      "return": {
        "type_long": "java.net.URL",
        "type_short": "URL",
        "comment": "the URL of the first matching file"
      },
      "throws": []
    },
    {
      "name": "getResources",
      "comment": "Search the classpath for files in the classpath entry/dirName \n location that have the given extension.  In null is passed for the \n extension, then all files found in the given dir names will be returned.  In this \n way, null is a wildcard.\n\n This method differs from #getResource(String) in that this method finds \n multiple matches.",
      "javadoc": "Search the classpath for files in the \u0026lt;classpath entry\u0026gt;/\u003ccode\u003edirName\u003c/code\u003e \n location that have the given extension.  In \u003ccode\u003enull\u003c/code\u003e is passed for the \n extension, then all files found in the given dir names will be returned.  In this \n way, \u003ccode\u003enull\u003c/code\u003e is a wildcard.\n\n \u003cP\u003eThis method differs from {@link #getResource(String)} in that this method finds \n multiple matches.\n@param dirName the name of the sub-directory under which to search\n@param extension the extension that matching files must possess\n@return set of URLs in the given directory that end with the given extension",
      "static": true,
      "params": [
        {
          "name": "dirName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the sub-directory under which to search"
        },
        {
          "name": "extension",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the extension that matching files must possess"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cjava.net.URL\u003e",
        "type_short": "Set",
        "comment": "set of URLs in the given directory that end with the given extension"
      },
      "throws": []
    },
    {
      "name": "getResourceNames",
      "comment": "Search the classpath for files in the classpath entry/dirName \n location that have the given extension.  In null is passed for the \n extension, then all files found in the given dir names will be returned.  In this \n way, null is a wildcard.\n\n The names returned from this method are relative and are meant to be used in a \n later callback to this class for methods such as #loadImage(String) or\n #getResource(String).",
      "javadoc": "Search the classpath for files in the \u0026lt;classpath entry\u0026gt;/\u003ccode\u003edirName\u003c/code\u003e \n location that have the given extension.  In \u003ccode\u003enull\u003c/code\u003e is passed for the \n extension, then all files found in the given dir names will be returned.  In this \n way, \u003ccode\u003enull\u003c/code\u003e is a wildcard.\n\n \u003cP\u003eThe names returned from this method are relative and are meant to be used in a \n later callback to this class for methods such as {@link #loadImage(String)} or\n {@link #getResource(String)}.\n@param dirName the name of the directory under which to search\n@param extension the extension that matching files must possess\n@return set of filenames in the given directory that end with the given extension",
      "static": true,
      "params": [
        {
          "name": "dirName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the directory under which to search"
        },
        {
          "name": "extension",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the extension that matching files must possess"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cjava.lang.String\u003e",
        "type_short": "Set",
        "comment": "set of filenames in the given directory that end with the given extension"
      },
      "throws": []
    },
    {
      "name": "doGetResourceNames",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "paths",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "resourceDirName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "extension",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cjava.lang.String\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findResources",
      "comment": "Search the directory for files ending in the given extension and add them to the list \n that is returned",
      "javadoc": "Search the directory for files ending in the given extension and add them to the list \n that is returned\n@param set the set to which resource names will be added\n@param file directory, e.g., \"resources/defaultTools\"\n@param dirName name of sub-directory, e.g. \"defaultTools\"\n@param extension file extension to look for",
      "static": true,
      "params": [
        {
          "name": "set",
          "type_long": "java.util.Set\u003cjava.lang.String\u003e",
          "type_short": "Set",
          "comment": "the set to which resource names will be added"
        },
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "directory, e.g., \"resources/defaultTools\""
        },
        {
          "name": "dirName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of sub-directory, e.g. \"defaultTools\""
        },
        {
          "name": "extension",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "file extension to look for"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "searchJarFile",
      "comment": "Search the given jar filename for files in \n resources with the given file extension.",
      "javadoc": "Search the given jar filename for files in \n resources with the given file extension.\n@param set the set to which resource names will be added\n@param file jar or zip filename\n@param resourceDirName name of resource directory, e.g. \"defaultTools\"\n@param extension file extension to look for",
      "static": true,
      "params": [
        {
          "name": "set",
          "type_long": "java.util.Set\u003cjava.lang.String\u003e",
          "type_short": "Set",
          "comment": "the set to which resource names will be added"
        },
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "jar or zip filename"
        },
        {
          "name": "resourceDirName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of resource directory, e.g. \"defaultTools\""
        },
        {
          "name": "extension",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "file extension to look for"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getScaledIcon",
      "comment": "Creates a scaled ImageIcon from the given icon.",
      "javadoc": "Creates a scaled ImageIcon from the given icon.\n@param icon the icon to scale\n@param width the width of the new icon\n@param height the height of the new icon\n@param hints scaling hints (see {@link BufferedImage#getScaledInstance(int, int, int)}\n@return A new, scaled ImageIcon",
      "static": true,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon to scale"
        },
        {
          "name": "width",
          "type_long": "int",
          "type_short": "int",
          "comment": "the width of the new icon"
        },
        {
          "name": "height",
          "type_long": "int",
          "type_short": "int",
          "comment": "the height of the new icon"
        },
        {
          "name": "hints",
          "type_long": "int",
          "type_short": "int",
          "comment": "scaling hints (see BufferedImage#getScaledInstance(int, int, int)"
        }
      ],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": "A new, scaled ImageIcon"
      },
      "throws": []
    },
    {
      "name": "getScaledIcon",
      "comment": "Creates a scaled ImageIcon from the given icon with scaling of \n Image#SCALE_AREA_AVERAGING",
      "javadoc": "Creates a scaled ImageIcon from the given icon with scaling of \n {@link Image#SCALE_AREA_AVERAGING}\n@param icon the icon to scale\n@param width the width of the new icon\n@param height the height of the new icon\n@return A new, scaled ImageIcon",
      "static": true,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon to scale"
        },
        {
          "name": "width",
          "type_long": "int",
          "type_short": "int",
          "comment": "the width of the new icon"
        },
        {
          "name": "height",
          "type_long": "int",
          "type_short": "int",
          "comment": "the height of the new icon"
        }
      ],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": "A new, scaled ImageIcon"
      },
      "throws": []
    },
    {
      "name": "getDisabledIcon",
      "comment": "Get the disabled rendering of the given icon.",
      "javadoc": "Get the disabled rendering of the given icon.\n@param icon The icon to disable.\n@return disabled icon",
      "static": true,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "The icon to disable."
        }
      ],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": "disabled icon"
      },
      "throws": []
    },
    {
      "name": "getDisabledIcon",
      "comment": "Get the disabled rendering of the given imageIcon.",
      "javadoc": "Get the disabled rendering of the given imageIcon.\n@param icon The icon to disable.\n@return disabled icon",
      "static": true,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.ImageIcon",
          "type_short": "ImageIcon",
          "comment": "The icon to disable."
        }
      ],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": "disabled icon"
      },
      "throws": []
    },
    {
      "name": "getDisabledIcon",
      "comment": "Returns a disabled icon while allowing the caller to control the brightness of the icon\n returned",
      "javadoc": "Returns a disabled icon while allowing the caller to control the brightness of the icon\n returned\n@param icon The icon to disable.\n@param brightnessPercent The level of brightness (0-100, where 100 is the brightest).\n@return a disabled version of the original icon.",
      "static": true,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "The icon to disable."
        },
        {
          "name": "brightnessPercent",
          "type_long": "int",
          "type_short": "int",
          "comment": "The level of brightness (0-100, where 100 is the brightest)."
        }
      ],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": "a disabled version of the original icon."
      },
      "throws": []
    },
    {
      "name": "getImageIconFromImage",
      "comment": "Creates an image icon from the given image.  This method will create an ImageIcon\n the \"safe\" way by avoiding the constructor \n ImageIcon#ImageIcon(Image), which can\n trigger problems with Java\u0027s MediaTracker.",
      "javadoc": "Creates an image icon from the given image.  This method will create an \u003ccode\u003eImageIcon\u003c/code\u003e\n the \u003ca href\u003d\"safe\"\u003e\"safe\"\u003c/a\u003e way by avoiding the constructor \n {@link ImageIcon#ImageIcon(Image)}, which can\n trigger problems with Java\u0027s {@link MediaTracker}.\n@param imageName A textual description of the image; may be null\n@param image The image to use for creating an ImageIcon.\n@return the new icon",
      "static": true,
      "params": [
        {
          "name": "imageName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "A textual description of the image; may be null"
        },
        {
          "name": "image",
          "type_long": "java.awt.Image",
          "type_short": "Image",
          "comment": "The image to use for creating an ImageIcon."
        }
      ],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": "the new icon"
      },
      "throws": []
    },
    {
      "name": "getImageIcon",
      "comment": "Returns an ImageIcon for the given icon.  If the value is already an ImageIcon, then\n that object is returned; otherwise, an ImageIcon will be created the safe\n way.",
      "javadoc": "Returns an {@link ImageIcon} for the given icon.  If the value is already an ImageIcon, then\n that object is returned; otherwise, an ImageIcon will be created the \u003ca href\u003d\"#safe\"\u003esafe\u003c/a\u003e\n way.\n@param icon The icon to convert\n@return the new icon",
      "static": true,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "The icon to convert"
        }
      ],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": "the new icon"
      },
      "throws": []
    },
    {
      "name": "getIconName",
      "comment": "Get the name of this icon.  The value is usually going to be the URL from which the icon \n was loaded",
      "javadoc": "Get the name of this icon.  The value is usually going to be the URL from which the icon \n was loaded\n@param icon the icon for which the name is desired\n@return the name",
      "static": true,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon for which the name is desired"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "loadImage",
      "comment": "Load the image using the specified bytes. The image icon will\n be cached using the image name. The bytes must have been\n read from an image file containing a supported image format,\n such as GIF, JPEG, or (as of 1.3) PNG.",
      "javadoc": "Load the image using the specified bytes. The image icon will\n be cached using the image name. The bytes must have been\n read from an image file containing a supported image format,\n such as GIF, JPEG, or (as of 1.3) PNG.\n@param imageName the name of the image\n@param imageBytes the bytes of the image\n@return the image icon stored in the bytes",
      "static": true,
      "params": [
        {
          "name": "imageName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the image"
        },
        {
          "name": "imageBytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the bytes of the image"
        }
      ],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": "the image icon stored in the bytes"
      },
      "throws": []
    },
    {
      "name": "loadImage",
      "comment": "Load and scale the image specified by filename; returns null if problems occur trying to load\n the file.",
      "javadoc": "Load and scale the image specified by filename; returns null if problems occur trying to load\n the file.\n@param filename name of file to load, e.g., \"images/home.gif\"\n@param width - the width to scale the image to\n@param height - the height to scale the image to\n@return the scaled image.",
      "static": true,
      "params": [
        {
          "name": "filename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of file to load, e.g., \"images/home.gif\""
        },
        {
          "name": "width",
          "type_long": "int",
          "type_short": "int",
          "comment": "- the width to scale the image to"
        },
        {
          "name": "height",
          "type_long": "int",
          "type_short": "int",
          "comment": "- the height to scale the image to"
        }
      ],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": "the scaled image."
      },
      "throws": []
    },
    {
      "name": "loadImage",
      "comment": "Load the image specified by filename; returns the default bomb icon\n if problems occur trying to load the file.\n ",
      "javadoc": "Load the image specified by filename; returns the default bomb icon\n if problems occur trying to load the file.\n \u003cp\u003e\n@param filename name of file to load, e.g., \"images/home.gif\"\n@return the image icon stored in the bytes",
      "static": true,
      "params": [
        {
          "name": "filename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of file to load, e.g., \"images/home.gif\""
        }
      ],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": "the image icon stored in the bytes"
      },
      "throws": []
    },
    {
      "name": "loadImages",
      "comment": "Load the images specified by filenames; substitutes the default bomb icon\n if problems occur trying to load an individual file.\n ",
      "javadoc": "Load the images specified by filenames; substitutes the default bomb icon\n if problems occur trying to load an individual file.\n \u003cp\u003e\n@param filenames vararg list of string filenames (ie. \"images/home.gif\")\n@return list of ImageIcons with each image, problem / missing images replaced with\n the default icon.",
      "static": true,
      "params": [
        {
          "name": "filenames",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "vararg list of string filenames (ie. \"images/home.gif\")"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjavax.swing.ImageIcon\u003e",
        "type_short": "List",
        "comment": "list of ImageIcons with each image, problem / missing images replaced with\n the default icon."
      },
      "throws": []
    },
    {
      "name": "reloadImage",
      "comment": "A convenience method to force the image denoted by filename to be read \n from disk and to not use the cached version",
      "javadoc": "A convenience method to force the image denoted by \u003ccode\u003efilename\u003c/code\u003e to be read \n from disk and to not use the cached version\n@param filename name of file to load, e.g., \"images/home.gif\"\n@return the image icon stored in the bytes\n@see #loadImage(String)",
      "static": true,
      "params": [
        {
          "name": "filename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of file to load, e.g., \"images/home.gif\""
        }
      ],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": "the image icon stored in the bytes"
      },
      "throws": []
    },
    {
      "name": "getDefaultIcon",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToolImages",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cjava.lang.String\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "filterImages",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "set",
          "type_long": "java.util.Set\u003cjava.lang.String\u003e",
          "type_short": "Set",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultSearchPaths",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTestSearchPaths",
      "comment": "Returns paths to search in test mode when finding resources. \n \n This allows us to have our Eclipse development environment match the gradle test\n environment with respect to how resources are found.  Specifically, in Eclipse, resources\n are found on the classpath.  Further, in Eclipse, the \u0027test\u0027 and \u0027test.slow\u0027 folders are\n on the classpath.  Even more, Eclipse will include these test folders as transitive \n dependencies for submodules.  Contrastingly, gradle will not include transitive test\n dependencies.  So, we add this code here so that we do not have to update each gradle\n build file that needs resources defined in a parent modules test resources.",
      "javadoc": "Returns paths to search in test mode when finding resources. \n \n \u003cP\u003eThis allows us to have our Eclipse development environment match the gradle test\n environment with respect to how resources are found.  Specifically, in Eclipse, resources\n are found on the classpath.  Further, in Eclipse, the \u0027test\u0027 and \u0027test.slow\u0027 folders are\n on the classpath.  Even more, Eclipse will include these test folders as transitive \n dependencies for submodules.  Contrastingly, gradle will not include transitive \u003cb\u003etest\u003c/b\u003e\n dependencies.  So, we add this code here so that we do not have to update each gradle\n build file that needs resources defined in a parent modules test resources.\n@return the paths",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "the paths"
      },
      "throws": []
    }
  ]
}
