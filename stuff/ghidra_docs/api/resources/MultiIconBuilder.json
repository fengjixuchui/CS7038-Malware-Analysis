{
  "name": "MultiIconBuilder",
  "comment": "A builder to allow for easier creation of an icon that is composed of a base icon, with \n other icons overlaid.  The #build() method returns an ImageIcon, as this\n allows Java\u0027s buttons to automatically create disabled icons correctly.\n \n Note: this class is a work-in-progress.  Add more methods for locating overlays as needed.",
  "javadoc": "A builder to allow for easier creation of an icon that is composed of a base icon, with \n other icons overlaid.  The {@link #build()} method returns an {@link ImageIcon}, as this\n allows Java\u0027s buttons to automatically create disabled icons correctly.\n \n \u003cP\u003eNote: this class is a work-in-progress.  Add more methods for locating overlays as needed.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "multiIcon",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "resources.MultiIcon",
      "type_short": "MultiIcon",
      "constant_value": null
    },
    {
      "name": "description",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "baseIcon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addIcon",
      "comment": "Adds the specified icon as an overlay to the base icon, possibly scaled according\n to the specified width and height, in the specified quadrant corner.",
      "javadoc": "Adds the specified icon as an overlay to the base icon, possibly scaled according\n to the specified width and height, in the specified quadrant corner.\n@param icon the icon to overlay\n@param w width of the overlaid icon\n@param h height of the overlaid icon\n@param quandrant corner to place the overlay on\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon to overlay"
        },
        {
          "name": "w",
          "type_long": "int",
          "type_short": "int",
          "comment": "width of the overlaid icon"
        },
        {
          "name": "h",
          "type_long": "int",
          "type_short": "int",
          "comment": "height of the overlaid icon"
        },
        {
          "name": "quandrant",
          "type_long": "resources.QUADRANT",
          "type_short": "QUADRANT",
          "comment": "corner to place the overlay on"
        }
      ],
      "return": {
        "type_long": "resources.MultiIconBuilder",
        "type_short": "MultiIconBuilder",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "addLowerRightIcon",
      "comment": "Adds the given icon as an overlay to the base icon, to the lower-right",
      "javadoc": "Adds the given icon as an overlay to the base icon, to the lower-right\n@param icon the icon\n@return this builder",
      "static": false,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon"
        }
      ],
      "return": {
        "type_long": "resources.MultiIconBuilder",
        "type_short": "MultiIconBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "addLowerRightIcon",
      "comment": "Adds the given icon as an overlay to the base icon, to the lower-right,\n scaled to the given width and height",
      "javadoc": "Adds the given icon as an overlay to the base icon, to the lower-right,\n scaled to the given width and height\n@param icon the icon\n@param w the desired width\n@param h the desired height\n@return this builder",
      "static": false,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon"
        },
        {
          "name": "w",
          "type_long": "int",
          "type_short": "int",
          "comment": "the desired width"
        },
        {
          "name": "h",
          "type_long": "int",
          "type_short": "int",
          "comment": "the desired height"
        }
      ],
      "return": {
        "type_long": "resources.MultiIconBuilder",
        "type_short": "MultiIconBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "addLowerLeftIcon",
      "comment": "Adds the given icon as an overlay to the base icon, to the lower-left",
      "javadoc": "Adds the given icon as an overlay to the base icon, to the lower-left\n@param icon the icon\n@return this builder",
      "static": false,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon"
        }
      ],
      "return": {
        "type_long": "resources.MultiIconBuilder",
        "type_short": "MultiIconBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "addLowerLeftIcon",
      "comment": "Adds the given icon as an overlay to the base icon, to the lower-left,\n scaled to the given width and height",
      "javadoc": "Adds the given icon as an overlay to the base icon, to the lower-left,\n scaled to the given width and height\n@param icon the icon\n@param w the desired width\n@param h the desired height\n@return this builder",
      "static": false,
      "params": [
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": "the icon"
        },
        {
          "name": "w",
          "type_long": "int",
          "type_short": "int",
          "comment": "the desired width"
        },
        {
          "name": "h",
          "type_long": "int",
          "type_short": "int",
          "comment": "the desired height"
        }
      ],
      "return": {
        "type_long": "resources.MultiIconBuilder",
        "type_short": "MultiIconBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "addText",
      "comment": "Add text overlaid on the base icon, aligned to the specified quadrant.",
      "javadoc": "Add text overlaid on the base icon, aligned to the specified quadrant.\n@param text Text string to write onto the icon.  Probably can only fit a letter or two\n@param font The font to use to render the text.  You know the size of the base icon, so\n you should be able to figure out the size of the font to use for the text\n@param color The color to use when rendering the text\n@param quandrant The {@link QUADRANT} to align the text to different parts of the icon\n@return this builder (for chaining)",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "Text string to write onto the icon.  Probably can only fit a letter or two"
        },
        {
          "name": "font",
          "type_long": "java.awt.Font",
          "type_short": "Font",
          "comment": "The font to use to render the text.  You know the size of the base icon, so\n you should be able to figure out the size of the font to use for the text"
        },
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "The color to use when rendering the text"
        },
        {
          "name": "quandrant",
          "type_long": "resources.QUADRANT",
          "type_short": "QUADRANT",
          "comment": "The QUADRANT to align the text to different parts of the icon"
        }
      ],
      "return": {
        "type_long": "resources.MultiIconBuilder",
        "type_short": "MultiIconBuilder",
        "comment": "this builder (for chaining)"
      },
      "throws": []
    },
    {
      "name": "setDescription",
      "comment": "Sets a description for the icon being built.  This is useful for debugging.",
      "javadoc": "Sets a description for the icon being built.  This is useful for debugging.\n@param description the description\n@return this builder",
      "static": false,
      "params": [
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the description"
        }
      ],
      "return": {
        "type_long": "resources.MultiIconBuilder",
        "type_short": "MultiIconBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "build",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
