{
  "name": "Callback",
  "comment": "A generic functional interface that is more semantically sound than Runnable.  Use\n anywhere you wish to have a generic callback function.",
  "javadoc": "A generic functional interface that is more semantically sound than {@link Runnable}.  Use\n anywhere you wish to have a generic callback function.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "dummy",
      "comment": "Creates a dummy callback function.  This is useful to avoid using null.",
      "javadoc": "Creates a dummy callback function.  This is useful to avoid using \u003ccode\u003enull\u003c/code\u003e.\n@return a dummy callback function",
      "static": true,
      "params": [],
      "return": {
        "type_long": "utility.function.Callback",
        "type_short": "Callback",
        "comment": "a dummy callback function"
      },
      "throws": []
    },
    {
      "name": "dummyIfNull",
      "comment": "Returns the given callback object if it is not null.  Otherwise, a #dummy() \n callback is returned.  This is useful to avoid using null.",
      "javadoc": "Returns the given callback object if it is not \u003ccode\u003enull\u003c/code\u003e.  Otherwise, a {@link #dummy()} \n callback is returned.  This is useful to avoid using \u003ccode\u003enull\u003c/code\u003e.\n@param c the callback function to check for \u003ccode\u003enull\u003c/code\u003e\n@return a non-null callback function",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "utility.function.Callback",
          "type_short": "Callback",
          "comment": "the callback function to check for null"
        }
      ],
      "return": {
        "type_long": "utility.function.Callback",
        "type_short": "Callback",
        "comment": "a non-null callback function"
      },
      "throws": []
    },
    {
      "name": "call",
      "comment": "The method that will be called.",
      "javadoc": "The method that will be called.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
