{
  "name": "Dummy",
  "comment": "A utility class to help create dummy stub functional interfaces",
  "javadoc": "A utility class to help create dummy stub functional interfaces",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "callback",
      "comment": "Creates a dummy callback",
      "javadoc": "Creates a dummy callback\n@return a dummy callback",
      "static": true,
      "params": [],
      "return": {
        "type_long": "utility.function.Callback",
        "type_short": "Callback",
        "comment": "a dummy callback"
      },
      "throws": []
    },
    {
      "name": "consumer",
      "comment": "Creates a dummy consumer",
      "javadoc": "Creates a dummy consumer\n@return a dummy consumer",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.function.Consumer\u003cT\u003e",
        "type_short": "Consumer",
        "comment": "a dummy consumer"
      },
      "throws": []
    },
    {
      "name": "function",
      "comment": "Creates a dummy function",
      "javadoc": "Creates a dummy function\n@param \u003cT\u003e the input type\n@param \u003cR\u003e the result type\n@return the function",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.function.Function\u003cT,R\u003e",
        "type_short": "Function",
        "comment": "the function"
      },
      "throws": []
    },
    {
      "name": "supplier",
      "comment": "Creates a dummy supplier",
      "javadoc": "Creates a dummy supplier\n@param \u003cT\u003e the result type\n@return the supplier",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.function.Supplier\u003cT\u003e",
        "type_short": "Supplier",
        "comment": "the supplier"
      },
      "throws": []
    },
    {
      "name": "runnable",
      "comment": "Creates a dummy runnable",
      "javadoc": "Creates a dummy runnable\n@return the runnable",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.Runnable",
        "type_short": "Runnable",
        "comment": "the runnable"
      },
      "throws": []
    },
    {
      "name": "ifNull",
      "comment": "Returns the given consumer object if it is not .  Otherwise, a #consumer()\n is returned.  This is useful to avoid using .",
      "javadoc": "Returns the given consumer object if it is not {@code null}.  Otherwise, a {@link #consumer()}\n is returned.  This is useful to avoid using {@code null}.\n@param c the consumer function to check for {@code null}\n@return a non-null consumer",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.util.function.Consumer\u003cT\u003e",
          "type_short": "Consumer",
          "comment": "the consumer function to check for "
        }
      ],
      "return": {
        "type_long": "java.util.function.Consumer\u003cT\u003e",
        "type_short": "Consumer",
        "comment": "a non-null consumer"
      },
      "throws": []
    },
    {
      "name": "ifNull",
      "comment": "Returns the given callback object if it is not .  Otherwise, a #callback()\n is returned.  This is useful to avoid using .",
      "javadoc": "Returns the given callback object if it is not {@code null}.  Otherwise, a {@link #callback()}\n is returned.  This is useful to avoid using {@code null}.\n@param c the callback function to check for {@code null}\n@return a non-null callback function",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "utility.function.Callback",
          "type_short": "Callback",
          "comment": "the callback function to check for "
        }
      ],
      "return": {
        "type_long": "utility.function.Callback",
        "type_short": "Callback",
        "comment": "a non-null callback function"
      },
      "throws": []
    },
    {
      "name": "ifNull",
      "comment": "Returns the given function object if it is not .  Otherwise, a\n #function() is returned.  This is useful to avoid using .",
      "javadoc": "Returns the given function object if it is not {@code null}.  Otherwise, a\n {@link #function()} is returned.  This is useful to avoid using {@code null}.\n@param \u003cT\u003e the input type\n@param \u003cR\u003e the result type\n@param f the function to check for {@code null}\n@return a non-null function",
      "static": true,
      "params": [
        {
          "name": "f",
          "type_long": "java.util.function.Function\u003cT,R\u003e",
          "type_short": "Function",
          "comment": "the function to check for "
        }
      ],
      "return": {
        "type_long": "java.util.function.Function\u003cT,R\u003e",
        "type_short": "Function",
        "comment": "a non-null function"
      },
      "throws": []
    },
    {
      "name": "ifNull",
      "comment": "Returns the given callback object if it is not .  Otherwise, a #callback()\n is returned.  This is useful to avoid using .",
      "javadoc": "Returns the given callback object if it is not {@code null}.  Otherwise, a {@link #callback()}\n is returned.  This is useful to avoid using {@code null}.\n@param s the supplier function to check for {@code null}\n@return a non-null supplier",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.util.function.Supplier\u003cT\u003e",
          "type_short": "Supplier",
          "comment": "the supplier function to check for "
        }
      ],
      "return": {
        "type_long": "java.util.function.Supplier\u003cT\u003e",
        "type_short": "Supplier",
        "comment": "a non-null supplier"
      },
      "throws": []
    },
    {
      "name": "ifNull",
      "comment": "Returns the given runnable object if it is not .  Otherwise, a #runnable()\n is returned.  This is useful to avoid using .",
      "javadoc": "Returns the given runnable object if it is not {@code null}.  Otherwise, a {@link #runnable()}\n is returned.  This is useful to avoid using {@code null}.\n@param r the runnable function to check for {@code null}\n@return a non-null runnable",
      "static": true,
      "params": [
        {
          "name": "r",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "the runnable function to check for "
        }
      ],
      "return": {
        "type_long": "java.lang.Runnable",
        "type_short": "Runnable",
        "comment": "a non-null runnable"
      },
      "throws": []
    }
  ]
}
