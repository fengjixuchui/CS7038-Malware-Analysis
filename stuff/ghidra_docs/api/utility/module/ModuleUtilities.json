{
  "name": "ModuleUtilities",
  "comment": "Utility methods for module related things.",
  "javadoc": "Utility methods for module related things.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "BINARY_PATH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "MANIFEST_FILE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Module.manifest\""
    },
    {
      "name": "MANIFEST_FILE_NAME_UNINSTALLED",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Module.manifest.uninstalled\""
    },
    {
      "name": "MODULE_LIST",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"MODULE_LIST\""
    },
    {
      "name": "MAX_MODULE_DEPTH",
      "comment": "How many directories deep to look for module directories, starting from an application root \n directory. For example, 3 would pick up modules as deep as: root/category/category/module",
      "javadoc": "How many directories deep to look for module directories, starting from an application root \n directory. For example, 3 would pick up modules as deep as: root/category/category/module",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isModuleDirectory",
      "comment": "Checks if the given directory is a module.",
      "javadoc": "Checks if the given directory is a module.\n@param dir the directory to check.\n@return true if the given directory is a module",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the directory to check."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given directory is a module"
      },
      "throws": []
    },
    {
      "name": "isModuleDirectory",
      "comment": "Returns true if the given path is a module root directory.",
      "javadoc": "Returns true if the given path is a module root directory.\n@param path the path to check\n@return true if the given path is a module root directory.",
      "static": true,
      "params": [
        {
          "name": "path",
          "type_long": "java.nio.file.Path",
          "type_short": "Path",
          "comment": "the path to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given path is a module root directory."
      },
      "throws": []
    },
    {
      "name": "findModuleRootDirectories",
      "comment": "Searches the given root directory for module root directories.  Adds any discovered module\n root directories to the given collection.",
      "javadoc": "Searches the given root directory for module root directories.  Adds any discovered module\n root directories to the given collection.\n@param rootDir The directory to start looking for module root directories in.\n@param moduleRootDirs A collection to add discovered module root directories to.\n@return The given collection with any discovered modules added.",
      "static": true,
      "params": [
        {
          "name": "rootDir",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "The directory to start looking for module root directories in."
        },
        {
          "name": "moduleRootDirs",
          "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
          "type_short": "Collection",
          "comment": "A collection to add discovered module root directories to."
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "Collection",
        "comment": "The given collection with any discovered modules added."
      },
      "throws": []
    },
    {
      "name": "findModuleRootDirectoriesHelper",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "rootDir",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": ""
        },
        {
          "name": "moduleRootDirs",
          "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
          "type_short": "Collection",
          "comment": ""
        },
        {
          "name": "remainingDepth",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findModuleRootDirectories",
      "comment": "Searches the given root directories for module root directories.  Adds any discovered module\n root directories to the given collection.",
      "javadoc": "Searches the given root directories for module root directories.  Adds any discovered module\n root directories to the given collection.\n@param rootDirs The directories to look for module root directories in.\n@param moduleRootDirs A collection to add discovered module root directories to.\n@return The given collection with any discovered modules added.",
      "static": true,
      "params": [
        {
          "name": "rootDirs",
          "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
          "type_short": "Collection",
          "comment": "The directories to look for module root directories in."
        },
        {
          "name": "moduleRootDirs",
          "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
          "type_short": "Collection",
          "comment": "A collection to add discovered module root directories to."
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "Collection",
        "comment": "The given collection with any discovered modules added."
      },
      "throws": []
    },
    {
      "name": "findJarModuleRootDirectories",
      "comment": "Searches the given jar root directory for module root directories.  Uses a \"module list\"\n file to locate the module root directories. Adds any discovered module root directories\n to the given collection.",
      "javadoc": "Searches the given jar root directory for module root directories.  Uses a \"module list\"\n file to locate the module root directories. Adds any discovered module root directories\n to the given collection.\n@param rootDir The jar directory to start looking for module root directories in.\n@param moduleRootDirs A collection to add discovered module root directories to.\n@return The given collection with any discovered modules added.\n@throws IOException if there was a problem reading the module list file.",
      "static": true,
      "params": [
        {
          "name": "rootDir",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "The jar directory to start looking for module root directories in."
        },
        {
          "name": "moduleRootDirs",
          "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
          "type_short": "Collection",
          "comment": "A collection to add discovered module root directories to."
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "Collection",
        "comment": "The given collection with any discovered modules added."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem reading the module list file."
        }
      ]
    },
    {
      "name": "findModules",
      "comment": "Searches for modules in a given collection of module root directories.",
      "javadoc": "Searches for modules in a given collection of module root directories.\n@param appRootDirs The collection of application root directories associated with the the given\n   list of module root directories.\n@param moduleRootDirs A collection of module root directories to search for modules in.\n@return The discovered modules as a map (mapping module name to module for convenience).",
      "static": true,
      "params": [
        {
          "name": "appRootDirs",
          "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
          "type_short": "Collection",
          "comment": "The collection of application root directories associated with the the given\n   list of module root directories."
        },
        {
          "name": "moduleRootDirs",
          "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
          "type_short": "Collection",
          "comment": "A collection of module root directories to search for modules in."
        }
      ],
      "return": {
        "type_long": "java.util.Map\u003cjava.lang.String,ghidra.framework.GModule\u003e",
        "type_short": "Map",
        "comment": "The discovered modules as a map (mapping module name to module for convenience)."
      },
      "throws": []
    },
    {
      "name": "getModuleLibDirectories",
      "comment": "Gets the \"lib\" directories from the given modules.",
      "javadoc": "Gets the \"lib\" directories from the given modules.\n@param modules The modules to get the lib directories of.\n@return A collection of lib directories from the given modules.",
      "static": true,
      "params": [
        {
          "name": "modules",
          "type_long": "java.util.Map\u003cjava.lang.String,ghidra.framework.GModule\u003e",
          "type_short": "Map",
          "comment": "The modules to get the lib directories of."
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "Collection",
        "comment": "A collection of lib directories from the given modules."
      },
      "throws": []
    },
    {
      "name": "getModuleBinDirectories",
      "comment": "Gets the directory locations of the .class files and resources from the given modules.",
      "javadoc": "Gets the directory locations of the .class files and resources from the given modules.\n@param modules The modules to get the compiled .class and resources directories of.\n@return A collection of directories containing classes and resources from the given modules.",
      "static": true,
      "params": [
        {
          "name": "modules",
          "type_long": "java.util.Map\u003cjava.lang.String,ghidra.framework.GModule\u003e",
          "type_short": "Map",
          "comment": "The modules to get the compiled .class and resources directories of."
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "Collection",
        "comment": "A collection of directories containing classes and resources from the given modules."
      },
      "throws": []
    },
    {
      "name": "isInModule",
      "comment": "Returns true if the given path is parented by a module root directory.\n \n For example, given a module path of /some/dir/features/cool_module/, then this\n method will return true for these paths:\n \n \n /some/dir/features/cool_module\n /some/dir/features/cool_module/some/child/dir\n \n and false for these paths:\n \n  \n /some/random/path\n /some/dir/features/",
      "javadoc": "Returns true if the given path is parented by a module root directory.\n \u003cp\u003e\n For example, given a module path of \u003ccode\u003e/some/dir/features/cool_module/\u003c/code\u003e, then this\n method will return true for these paths:\n \u003cbr\u003e\n \u003cbr\u003e\n \u003ccode\u003e/some/dir/features/cool_module\u003c/code\u003e\u003cbr\u003e\n \u003ccode\u003e/some/dir/features/cool_module/some/child/dir\u003c/code\u003e\n \u003cbr\u003e\n \u003cbr\u003eand false for these paths:\n \u003cbr\u003e\n \u003cbr\u003e \n \u003ccode\u003e/some/random/path\u003c/code\u003e\u003cbr\u003e\n \u003ccode\u003e/some/dir/features/\u003c/code\u003e\n@param pathName the path name to check\n@return true if the given path is parented by a module root directory.\n@see #isModuleDirectory(Path)",
      "static": true,
      "params": [
        {
          "name": "pathName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path name to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given path is parented by a module root directory."
      },
      "throws": []
    },
    {
      "name": "getModule",
      "comment": "Returns the path of the module containing the given path string, if it is parented by a \n module root directory.\n \n For example, given a module path of /some/dir/features/cool_module/, then this\n method will return that module path, given these paths:\n \n \n /some/dir/features/cool_module\n /some/dir/features/cool_module/some/child/dir\n \n and null for these paths:\n \n  \n /some/random/path\n /some/dir/features/",
      "javadoc": "Returns the path of the module containing the given path string, if it is parented by a \n module root directory.\n \u003cp\u003e\n For example, given a module path of \u003ccode\u003e/some/dir/features/cool_module/\u003c/code\u003e, then this\n method will return that module path, given these paths:\n \u003cbr\u003e\n \u003cbr\u003e\n \u003ccode\u003e/some/dir/features/cool_module\u003c/code\u003e\u003cbr\u003e\n \u003ccode\u003e/some/dir/features/cool_module/some/child/dir\u003c/code\u003e\n \u003cbr\u003e\n \u003cbr\u003eand null for these paths:\n \u003cbr\u003e\n \u003cbr\u003e \n \u003ccode\u003e/some/random/path\u003c/code\u003e\u003cbr\u003e\n \u003ccode\u003e/some/dir/features/\u003c/code\u003e\n@param pathName the path name to check\n@return the module root directory; null if the path is not in a module\n@see #isModuleDirectory(Path)",
      "static": true,
      "params": [
        {
          "name": "pathName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path name to check"
        }
      ],
      "return": {
        "type_long": "java.nio.file.Path",
        "type_short": "Path",
        "comment": "the module root directory; null if the path is not in a module"
      },
      "throws": []
    },
    {
      "name": "toPath",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "pathname",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.nio.file.Path",
        "type_short": "Path",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findRepoRoot",
      "comment": "Returns a file that is the root folder of the repository containing the given file.  \u0027Root\u0027\n here means a folder that contains a repository folder.  As an example, given a repo \n structure of:\n \n /userdir/repoRoot/repoDir/.git\n \n then this method, given will produce the following results (input - output):\n \n /userdir/repoRoot/repoDir/.git - /userdir/repoRoot\n /userdir/repoRoot/repoDir - /userdir/repoRoot\n /userdir/repoRoot - /userdir/repoRoot",
      "javadoc": "Returns a file that is the root folder of the repository containing the given file.  \u0027Root\u0027\n here means a folder that contains a repository folder.  As an example, given a repo \n structure of:\n \n \u003cp\u003e\u003ccode\u003e/userdir/repoRoot/repoDir/.git\u003c/code\u003e\u003cbr\u003e\n \n \u003cp\u003ethen this method, given will produce the following results (input -\u0026gt; output):\u003cbr\u003e\n \n \u003cp\u003e\u003ccode\u003e/userdir/repoRoot/repoDir/.git -\u0026gt; /userdir/repoRoot\u003c/code\u003e\n \u003cbr\u003e\u003ccode\u003e/userdir/repoRoot/repoDir -\u0026gt; /userdir/repoRoot\u003c/code\u003e\n \u003cbr\u003e\u003ccode\u003e/userdir/repoRoot -\u0026gt; /userdir/repoRoot\u003c/code\u003e\n@param f the child file of the desired repo\n@return a file that is the root folder of the repository containing the given file; null\n         if the given file is not under a repo directory or itself a repo root",
      "static": true,
      "params": [
        {
          "name": "f",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the child file of the desired repo"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "a file that is the root folder of the repository containing the given file; null\n         if the given file is not under a repo directory or itself a repo root"
      },
      "throws": []
    },
    {
      "name": "findRepo",
      "comment": "Returns a file that is the repository folder containing the given file.  As an example, \n given a repo structure of:\n \n /userdir/repoRoot/repoDir/.git\n \n then this method, given will produce the following results (input - output):\n \n /userdir/repoRoot/repoDir/.git - /userdir/repoRoot/repoDir\n /userdir/repoRoot/repoDir - /userdir/repoRoot/repoDir",
      "javadoc": "Returns a file that is the repository folder containing the given file.  As an example, \n given a repo structure of:\n \n \u003cp\u003e\u003ccode\u003e/userdir/repoRoot/repoDir/.git\u003c/code\u003e\u003cbr\u003e\n \n \u003cp\u003ethen this method, given will produce the following results (input -\u0026gt; output):\u003cbr\u003e\n \n \u003cp\u003e\u003ccode\u003e/userdir/repoRoot/repoDir/.git -\u0026gt; /userdir/repoRoot/repoDir\u003c/code\u003e\n \u003cbr\u003e\u003ccode\u003e/userdir/repoRoot/repoDir -\u0026gt; /userdir/repoRoot/repoDir\u003c/code\u003e\n@param f the child file of the desired repo\n@return a file that is the repo folder of the repository containing the given file; null\n         if the given file is not under a repo directory",
      "static": true,
      "params": [
        {
          "name": "f",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the child file of the desired repo"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "a file that is the repo folder of the repository containing the given file; null\n         if the given file is not under a repo directory"
      },
      "throws": []
    },
    {
      "name": "isExternalModule",
      "comment": "Checks to see if the given GModule is external to the Ghidra installation\n directory",
      "javadoc": "Checks to see if the given {@link GModule module} is external to the Ghidra installation\n directory\n@param module the module to check\n@param layout Ghidra\u0027s layout\n@return true if the given {@link GModule module} is external to the Ghidra installation\n   directory",
      "static": true,
      "params": [
        {
          "name": "module",
          "type_long": "ghidra.framework.GModule",
          "type_short": "GModule",
          "comment": "the module to check"
        },
        {
          "name": "layout",
          "type_long": "utility.application.ApplicationLayout",
          "type_short": "ApplicationLayout",
          "comment": "Ghidra\u0027s layout"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given GModule is external to the Ghidra installation\n   directory"
      },
      "throws": []
    }
  ]
}
