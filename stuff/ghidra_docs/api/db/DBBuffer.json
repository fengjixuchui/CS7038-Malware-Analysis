{
  "name": "DBBuffer",
  "comment": "DBBuffer facilitates synchronized access to a ChainedBuffer.",
  "javadoc": "\u003ccode\u003eDBBuffer\u003c/code\u003e facilitates synchronized access to a ChainedBuffer.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "dbh",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.DBHandle",
      "type_short": "DBHandle",
      "constant_value": null
    },
    {
      "name": "buf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.ChainedBuffer",
      "type_short": "ChainedBuffer",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for an existing ChainedBuffer.",
      "javadoc": "Constructor for an existing ChainedBuffer.\n@param dbh database handle (public methods are synchronized on this object).\n@param buf chained buffer which is associated with the specified dbh.",
      "static": false,
      "params": [
        {
          "name": "dbh",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "database handle (public methods are synchronized on this object)."
        },
        {
          "name": "buf",
          "type_long": "db.ChainedBuffer",
          "type_short": "ChainedBuffer",
          "comment": "chained buffer which is associated with the specified dbh."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "split",
      "comment": "Split this DBBuffer object into two separate DBBuffers.  This DBBuffer remains\n valid but its new size is equal offset.  The newly created DBBuffer is \n returned.",
      "javadoc": "Split this DBBuffer object into two separate DBBuffers.  This DBBuffer remains\n valid but its new size is equal offset.  The newly created DBBuffer is \n returned.\n@param offset the split point.  The byte at this offset becomes the first\n byte within the new buffer.\n@return the new DBBuffer object.\n@throws ArrayIndexOutOfBoundsException if offset is invalid.\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the split point.  The byte at this offset becomes the first\n byte within the new buffer."
        }
      ],
      "return": {
        "type_long": "db.DBBuffer",
        "type_short": "DBBuffer",
        "comment": "the new DBBuffer object."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    },
    {
      "name": "setSize",
      "comment": "Set the new size for this DBBuffer object.",
      "javadoc": "Set the new size for this DBBuffer object.\n@param size new size\n@param preserveData if true, existing data is preserved at the original offsets.  If false,\n no additional effort will be expended to preserve data.\n@throws IOException thrown if an IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "new size"
        },
        {
          "name": "preserveData",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, existing data is preserved at the original offsets.  If false,\n no additional effort will be expended to preserve data."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs."
        }
      ]
    },
    {
      "name": "length",
      "comment": "Returns the length;",
      "javadoc": "Returns the length;\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getId",
      "comment": "Get the first buffer ID associated with this chained buffer.  This DBBuffer\n may be reinstatiated using the returned buffer ID provided subsequent changes \n are not made.",
      "javadoc": "Get the first buffer ID associated with this chained buffer.  This DBBuffer\n may be reinstatiated using the returned buffer ID provided subsequent changes \n are not made.\n@return buffer ID",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "buffer ID"
      },
      "throws": []
    },
    {
      "name": "fill",
      "comment": "Fill the buffer over the specified range with a byte value.",
      "javadoc": "Fill the buffer over the specified range with a byte value.\n@param startOffset starting offset, inclusive\n@param endOffset ending offset, exclusive\n@param fillByte byte value",
      "static": false,
      "params": [
        {
          "name": "startOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "starting offset, inclusive"
        },
        {
          "name": "endOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "ending offset, exclusive"
        },
        {
          "name": "fillByte",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "byte value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "append",
      "comment": "Append the contents of the specified dbBuf onto the end of this buffer.\n The size of this buffer increases by the size of dbBuf.  When the operation \n is complete, dbBuf object is no longer valid and must not be used.",
      "javadoc": "Append the contents of the specified dbBuf onto the end of this buffer.\n The size of this buffer increases by the size of dbBuf.  When the operation \n is complete, dbBuf object is no longer valid and must not be used.\n@param buffer the buffer to be appended to this buffer.\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "db.DBBuffer",
          "type_short": "DBBuffer",
          "comment": "the buffer to be appended to this buffer."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    },
    {
      "name": "getByte",
      "comment": "Get the 8-bit byte value located at the specified offset.",
      "javadoc": "Get the 8-bit byte value located at the specified offset.\n@param offset byte offset from start of buffer.\n@return the byte value at the specified offset.\n@throws ArrayIndexOutOfBoundsException is thrown if an invalid offset is\n specified.\n@throws IOException is thrown if an error occurs while accessing the\n underlying storage.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "byte offset from start of buffer."
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the byte value at the specified offset."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "is thrown if an error occurs while accessing the\n underlying storage."
        }
      ]
    },
    {
      "name": "get",
      "comment": "Get the byte data located at the specified offset and store into the data\n array  at the specified data offset.",
      "javadoc": "Get the byte data located at the specified offset and store into the data\n array  at the specified data offset.\n@param offset byte offset from the start of the buffer.\n@param data byte array to store the data.\n@param dataOffset offset into the data buffer\n@param length amount of data to read\n@throws ArrayIndexOutOfBoundsException if an invalid offset, dataOffset,\n or length is specified.\n@throws IOException is thrown if an error occurs while accessing the\n underlying storage.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "byte offset from the start of the buffer."
        },
        {
          "name": "data",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array to store the data."
        },
        {
          "name": "dataOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into the data buffer"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "amount of data to read"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "is thrown if an error occurs while accessing the\n underlying storage."
        }
      ]
    },
    {
      "name": "fill",
      "comment": "Fill buffer with data provided by InputStream.  If \n stream is exhausted, the remainder of the buffer will be filled\n with 0\u0027s.",
      "javadoc": "Fill buffer with data provided by InputStream.  If \n stream is exhausted, the remainder of the buffer will be filled\n with 0\u0027s.\n@param in data source\n@throws IOException thrown if IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "in",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "data source"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs."
        }
      ]
    },
    {
      "name": "put",
      "comment": "Put a specified number of bytes from the array provided into the buffer\n at the specified offset.  The number of bytes stored is specified by the\n length specified.",
      "javadoc": "Put a specified number of bytes from the array provided into the buffer\n at the specified offset.  The number of bytes stored is specified by the\n length specified.\n@param offset byte offset from start of buffer.\n@param bytes the byte data to be stored.\n@param dataOffset the starting offset into the data.\n@param length the number of bytes to be stored.\n@throws ArrayIndexOutOfBoundsException if an invalid offset is provided\n or the end of buffer was encountered while storing the data.\n@throws IOException is thrown if an error occurs while accessing the\n underlying storage.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "byte offset from start of buffer."
        },
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the byte data to be stored."
        },
        {
          "name": "dataOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the starting offset into the data."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to be stored."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "is thrown if an error occurs while accessing the\n underlying storage."
        }
      ]
    },
    {
      "name": "put",
      "comment": "Put the bytes provided into the buffer at the specified offset. The\n number of bytes stored is determined by the length of the bytes\n array.",
      "javadoc": "Put the bytes provided into the buffer at the specified offset. The\n number of bytes stored is determined by the length of the bytes\n array.\n@param offset byte offset from start of buffer.\n@param bytes the byte data to be stored.\n@throws ArrayIndexOutOfBoundsException if an invalid offset is provided\n or the end of buffer was encountered while storing the data.\n@throws IOException is thrown if an error occurs while accessing the\n underlying storage.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "byte offset from start of buffer."
        },
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the byte data to be stored."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "is thrown if an error occurs while accessing the\n underlying storage."
        }
      ]
    },
    {
      "name": "putByte",
      "comment": "Put the 8-bit byte value into the buffer at the specified offset.",
      "javadoc": "Put the 8-bit byte value into the buffer at the specified offset.\n@param offset byte offset from start of buffer.\n@param b the byte value to be stored.\n@throws ArrayIndexOutOfBoundsException if an invalid offset is provided.\n@throws IOException is thrown if an error occurs while accessing the\n underlying storage.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "byte offset from start of buffer."
        },
        {
          "name": "b",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "the byte value to be stored."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "is thrown if an error occurs while accessing the\n underlying storage."
        }
      ]
    },
    {
      "name": "get",
      "comment": "Get the byte data located at the specified offset.",
      "javadoc": "Get the byte data located at the specified offset.\n@param offset byte offset from start of buffer.\n@throws ArrayIndexOutOfBoundsException is thrown if an invalid offset is\n specified or the end of the buffer was encountered while reading the\n data.\n@throws IOException is thrown if an error occurs while accessing the\n underlying storage.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "byte offset from start of buffer."
        },
        {
          "name": "data",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "is thrown if an error occurs while accessing the\n underlying storage."
        }
      ]
    },
    {
      "name": "delete",
      "comment": "Delete and release all underlying DataBuffers.",
      "javadoc": "Delete and release all underlying DataBuffers.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
