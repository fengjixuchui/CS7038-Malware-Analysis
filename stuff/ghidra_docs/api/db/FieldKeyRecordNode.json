{
  "name": "FieldKeyRecordNode",
  "comment": "FieldKeyRecordNode defines a common interface for FieldKeyNode \n implementations which are also a RecordNode (i.e., leaf node).",
  "javadoc": "\u003ccode\u003eFieldKeyRecordNode\u003c/code\u003e defines a common interface for {@link FieldKeyNode} \n implementations which are also a {@link RecordNode} (i.e., leaf node).",
  "static": false,
  "implements": [
    "db.RecordNode",
    "db.FieldKeyNode"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getRecord",
      "comment": "Get the record located at the specified index.",
      "javadoc": "Get the record located at the specified index.\n@param schema record data schema\n@param index key index\n@return Record\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "schema",
          "type_long": "db.Schema",
          "type_short": "Schema",
          "comment": "record data schema"
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "key index"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "Record"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "putRecord",
      "comment": "Insert or Update a record.",
      "javadoc": "Insert or Update a record.\n@param record data record with long key\n@param table table which will be notified when record is inserted or updated.\n@return root node which may have changed.\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "data record with long key"
        },
        {
          "name": "table",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "table which will be notified when record is inserted or updated."
        }
      ],
      "return": {
        "type_long": "db.FieldKeyNode",
        "type_short": "FieldKeyNode",
        "comment": "root node which may have changed."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "remove",
      "comment": "Remove the record identified by index.\n This will never be the last record within the node.",
      "javadoc": "Remove the record identified by index.\n This will never be the last record within the node.\n@param index record index\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "record index"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "hasNextLeaf",
      "comment": "Determine if this record node has a right sibling.",
      "javadoc": "Determine if this record node has a right sibling.\n@return true if right sibling exists\n@throws IOException if IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if right sibling exists"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    },
    {
      "name": "getNextLeaf",
      "comment": "Get this leaf node\u0027s right sibling",
      "javadoc": "Get this leaf node\u0027s right sibling\n@return this leaf node\u0027s right sibling or null if right sibling does not exist.\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.FieldKeyRecordNode",
        "type_short": "FieldKeyRecordNode",
        "comment": "this leaf node\u0027s right sibling or null if right sibling does not exist."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "hasPreviousLeaf",
      "comment": "Determine if this record node has a left sibling.",
      "javadoc": "Determine if this record node has a left sibling.\n@return true if left sibling exists\n@throws IOException if IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if left sibling exists"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    },
    {
      "name": "getPreviousLeaf",
      "comment": "Get this leaf node\u0027s left sibling",
      "javadoc": "Get this leaf node\u0027s left sibling\n@return this leaf node\u0027s left sibling or null if left sibling does not exist.\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.FieldKeyRecordNode",
        "type_short": "FieldKeyRecordNode",
        "comment": "this leaf node\u0027s left sibling or null if left sibling does not exist."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "removeLeaf",
      "comment": "Remove this leaf from the tree.",
      "javadoc": "Remove this leaf from the tree.\n@return root node which may have changed.\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.FieldKeyNode",
        "type_short": "FieldKeyNode",
        "comment": "root node which may have changed."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "deleteRecord",
      "comment": "Delete the record identified by the specified key.",
      "javadoc": "Delete the record identified by the specified key.\n@param key record key\n@param table table which will be notified when record is deleted.\n@return root node which may have changed.\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "record key"
        },
        {
          "name": "table",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "table which will be notified when record is deleted."
        }
      ],
      "return": {
        "type_long": "db.FieldKeyNode",
        "type_short": "FieldKeyNode",
        "comment": "root node which may have changed."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "getRecordAtOrAfter",
      "comment": "Get the record with the minimum key value which is greater than or equal \n to the specified key.",
      "javadoc": "Get the record with the minimum key value which is greater than or equal \n to the specified key.\n@param key search key\n@param schema record data schema\n@return Record requested or null if record not found.\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "search key"
        },
        {
          "name": "schema",
          "type_long": "db.Schema",
          "type_short": "Schema",
          "comment": "record data schema"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "Record requested or null if record not found."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "getRecordAtOrBefore",
      "comment": "Get the record with the maximum key value which is less than or equal \n to the specified key.",
      "javadoc": "Get the record with the maximum key value which is less than or equal \n to the specified key.\n@param key search key\n@param schema record data schema\n@return Record requested or null if record not found.\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "search key"
        },
        {
          "name": "schema",
          "type_long": "db.Schema",
          "type_short": "Schema",
          "comment": "record data schema"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "Record requested or null if record not found."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "getRecordAfter",
      "comment": "Get the record with the minimum key value which is greater than \n the specified key.",
      "javadoc": "Get the record with the minimum key value which is greater than \n the specified key.\n@param key search key\n@param schema record data schema\n@return Record requested or null if record not found.\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "search key"
        },
        {
          "name": "schema",
          "type_long": "db.Schema",
          "type_short": "Schema",
          "comment": "record data schema"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "Record requested or null if record not found."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "getRecordBefore",
      "comment": "Get the record with the maximum key value which is less than  \n the specified key.",
      "javadoc": "Get the record with the maximum key value which is less than  \n the specified key.\n@param key search key\n@param schema record data schema\n@return Record requested or null if record not found.\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "search key"
        },
        {
          "name": "schema",
          "type_long": "db.Schema",
          "type_short": "Schema",
          "comment": "record data schema"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "Record requested or null if record not found."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Get the record identified by the specified key.",
      "javadoc": "Get the record identified by the specified key.\n@param key search key\n@param schema record data schema\n@return Record requested or null if record not found.\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "search key"
        },
        {
          "name": "schema",
          "type_long": "db.Schema",
          "type_short": "Schema",
          "comment": "record data schema"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "Record requested or null if record not found."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    }
  ]
}
