{
  "name": "LongKeyNode",
  "comment": "LongKeyNode is an abstract implementation of a BTree node\n which utilizes long key values.",
  "javadoc": "\u003ccode\u003eLongKeyNode\u003c/code\u003e is an abstract implementation of a BTree node\n which utilizes long key values.",
  "static": false,
  "implements": [
    "db.BTreeNode"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "KEY_COUNT_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "KEY_COUNT_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "LONGKEY_NODE_HEADER_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "nodeMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.NodeMgr",
      "type_short": "NodeMgr",
      "constant_value": null
    },
    {
      "name": "buffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.buffers.DataBuffer",
      "type_short": "DataBuffer",
      "constant_value": null
    },
    {
      "name": "parent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.LongKeyInteriorNode",
      "type_short": "LongKeyInteriorNode",
      "constant_value": null
    },
    {
      "name": "keyCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an existing long-key node.",
      "javadoc": "Construct an existing long-key node.\n@param nodeMgr table node manager instance\n@param buf node buffer",
      "static": false,
      "params": [
        {
          "name": "nodeMgr",
          "type_long": "db.NodeMgr",
          "type_short": "NodeMgr",
          "comment": "table node manager instance"
        },
        {
          "name": "buf",
          "type_long": "db.buffers.DataBuffer",
          "type_short": "DataBuffer",
          "comment": "node buffer"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new long-key node.",
      "javadoc": "Construct a new long-key node.\n@param nodeMgr table node manager.\n@param nodeType node type\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "nodeMgr",
          "type_long": "db.NodeMgr",
          "type_short": "NodeMgr",
          "comment": "table node manager."
        },
        {
          "name": "nodeType",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "node type"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "getBufferId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBuffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.buffers.DataBuffer",
        "type_short": "DataBuffer",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRoot",
      "comment": "Get the root for this node.  If setParent has not been invoked, this node\n is assumed to be the root.",
      "javadoc": "Get the root for this node.  If setParent has not been invoked, this node\n is assumed to be the root.\n@return root node",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.LongKeyNode",
        "type_short": "LongKeyNode",
        "comment": "root node"
      },
      "throws": []
    },
    {
      "name": "getKeyCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setKeyCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "cnt",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKey",
      "comment": "Get the key value at a specific index.",
      "javadoc": "Get the key value at a specific index.\n@param index key index\n@return key value",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "key index"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "key value"
      },
      "throws": []
    },
    {
      "name": "getKeyField",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.Field",
        "type_short": "Field",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getLeafNode",
      "comment": "Get the leaf node which contains the specified key.",
      "javadoc": "Get the leaf node which contains the specified key.\n@param key key value\n@return leaf node\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": "key value"
        }
      ],
      "return": {
        "type_long": "db.LongKeyRecordNode",
        "type_short": "LongKeyRecordNode",
        "comment": "leaf node"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    }
  ]
}
