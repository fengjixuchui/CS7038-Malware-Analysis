{
  "name": "VarKeyNode",
  "comment": "VarKeyNode is an abstract implementation of a BTree node\n which utilizes variable-length Field key values.\n \n   | NodeType(1) | KeyType(1) | KeyCount(4) | ...\n ",
  "javadoc": "\u003ccode\u003eVarKeyNode\u003c/code\u003e is an abstract implementation of a BTree node\n which utilizes variable-length Field key values.\n \u003cpre\u003e\n   | NodeType(1) | KeyType(1) | KeyCount(4) | ...\n \u003c/pre\u003e",
  "static": false,
  "implements": [
    "db.FieldKeyNode"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "KEY_TYPE_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "KEY_COUNT_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "KEY_TYPE_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "KEY_COUNT_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "VARKEY_NODE_HEADER_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "keyType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.Field",
      "type_short": "Field",
      "constant_value": null
    },
    {
      "name": "maxKeyLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "nodeMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.NodeMgr",
      "type_short": "NodeMgr",
      "constant_value": null
    },
    {
      "name": "buffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.buffers.DataBuffer",
      "type_short": "DataBuffer",
      "constant_value": null
    },
    {
      "name": "parent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.VarKeyInteriorNode",
      "type_short": "VarKeyInteriorNode",
      "constant_value": null
    },
    {
      "name": "keyCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an existing variable-length-key node.",
      "javadoc": "Construct an existing variable-length-key node.\n@param nodeMgr table node manager instance\n@param buf node buffer\n@throws IOException if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "nodeMgr",
          "type_long": "db.NodeMgr",
          "type_short": "NodeMgr",
          "comment": "table node manager instance"
        },
        {
          "name": "buf",
          "type_long": "db.buffers.DataBuffer",
          "type_short": "DataBuffer",
          "comment": "node buffer"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new variable-length-key node.",
      "javadoc": "Construct a new variable-length-key node.\n@param nodeMgr table node manager.\n@param nodeType node type\n@param keyType key Field type\n@throws IOException if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "nodeMgr",
          "type_long": "db.NodeMgr",
          "type_short": "NodeMgr",
          "comment": "table node manager."
        },
        {
          "name": "nodeType",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "node type"
        },
        {
          "name": "keyType",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "key Field type"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    },
    {
      "name": "getParent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.VarKeyInteriorNode",
        "type_short": "VarKeyInteriorNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBufferId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBuffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.buffers.DataBuffer",
        "type_short": "DataBuffer",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRoot",
      "comment": "Get the root for this node.  If setParent has not been invoked, this node\n is assumed to be the root.",
      "javadoc": "Get the root for this node.  If setParent has not been invoked, this node\n is assumed to be the root.\n@return TableNode",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.VarKeyNode",
        "type_short": "VarKeyNode",
        "comment": "TableNode"
      },
      "throws": []
    },
    {
      "name": "getKeyCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setKeyCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "cnt",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareKeyField",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "k",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "keyIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKeyOffset",
      "comment": "Get the key offset within the buffer",
      "javadoc": "Get the key offset within the buffer\n@param index key index\n@return record key offset",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "key index"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "record key offset"
      },
      "throws": []
    },
    {
      "name": "getKeyField",
      "comment": "Get the key value at a specific index.",
      "javadoc": "Get the key value at a specific index.\n@param index key index\n@return key value\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "key index"
        }
      ],
      "return": {
        "type_long": "db.Field",
        "type_short": "Field",
        "comment": "key value"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    },
    {
      "name": "getLeafNode",
      "comment": "Get the leaf node which contains the specified key.",
      "javadoc": "Get the leaf node which contains the specified key.\n@param key key value\n@return leaf node\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "key value"
        }
      ],
      "return": {
        "type_long": "db.VarKeyRecordNode",
        "type_short": "VarKeyRecordNode",
        "comment": "leaf node"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    },
    {
      "name": "getLeftmostLeafNode",
      "comment": "Get the left-most leaf node within the tree.",
      "javadoc": "Get the left-most leaf node within the tree.\n@return left-most leaf node.\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.VarKeyRecordNode",
        "type_short": "VarKeyRecordNode",
        "comment": "left-most leaf node."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "getRightmostLeafNode",
      "comment": "Get the right-most leaf node within the tree.",
      "javadoc": "Get the right-most leaf node within the tree.\n@return right-most leaf node.\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.VarKeyRecordNode",
        "type_short": "VarKeyRecordNode",
        "comment": "right-most leaf node."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    }
  ]
}
