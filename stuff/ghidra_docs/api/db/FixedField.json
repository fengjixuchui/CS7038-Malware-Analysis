{
  "name": "FixedField",
  "comment": "FixedField provides an abstract implementation of an unsigned fixed-length\n field whose value is specified with a byte-array.  This field behaves similar to a \n PrimitiveField in that a null \"state\" (see #isNull()) is supported for \n sparse record column use with a zero (0) value.  Unlike a variable-length \n BinaryField a null \"value\" (i.e., data byte array) is not permitted.\n \n Implementations may use the internal data byte-array as a lazy storage cache for\n the actual fixed-length value (i.e., invoking #getBinaryData() may update\n the internal data byte-array if needed).",
  "javadoc": "\u003ccode\u003eFixedField\u003c/code\u003e provides an abstract implementation of an unsigned fixed-length\n field whose value is specified with a byte-array.  This field behaves similar to a \n {@link PrimitiveField} in that a null \"state\" (see {@link #isNull()}) is supported for \n sparse record column use with a zero (0) value.  Unlike a variable-length \n {@link BinaryField} a null \"value\" (i.e., data byte array) is not permitted.\n \u003cbr\u003e\n Implementations may use the internal data byte-array as a lazy storage cache for\n the actual fixed-length value (i.e., invoking {@link #getBinaryData()} may update\n the internal data byte-array if needed).",
  "static": false,
  "implements": [],
  "extends": "db.BinaryField",
  "fields": [
    {
      "name": "isNull",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a fixed-length field.  A null \"state\" may only be established \n by invoking the #setNull() method after construction provided\n the instance is mutable.",
      "javadoc": "Construct a fixed-length field.  A null \"state\" may only be established \n by invoking the {@link #setNull()} method after construction provided\n the instance is mutable.\n@param data initial storage value (may be null)\n@param immutable true if field value is immutable",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "initial storage value (may be null)"
        },
        {
          "name": "immutable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if field value is immutable"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isVariableLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isNull",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setNull",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updatingValue",
      "comment": "Invoked prior to setting the field\u0027s primitive value this\n method will perform an immutable check and set to a non-null \n state.",
      "javadoc": "Invoked prior to setting the field\u0027s primitive value this\n method will perform an immutable check and set to a non-null \n state.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "truncate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copyField",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.FixedField",
        "type_short": "FixedField",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newField",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.FixedField",
        "type_short": "FixedField",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.FixedField",
        "type_short": "FixedField",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaxValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.FixedField",
        "type_short": "FixedField",
        "comment": ""
      },
      "throws": []
    }
  ]
}
