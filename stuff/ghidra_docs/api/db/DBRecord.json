{
  "name": "DBRecord",
  "comment": "Record provides a portable container for data\n associated with a fixed schema.  \n A record instance contains both a primary key and zero or more data fields.",
  "javadoc": "\u003ccode\u003eRecord\u003c/code\u003e provides a portable container for data\n associated with a fixed schema.  \n A record instance contains both a primary key and zero or more data fields.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "schema",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "key",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.Field",
      "type_short": "Field",
      "constant_value": null
    },
    {
      "name": "fieldValues",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.Field[]",
      "type_short": "db.Field[]",
      "constant_value": null
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "dirty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an empty record corresponding to the specified schema and record key",
      "javadoc": "Construct an empty record corresponding to the specified schema and record key\n@param schema record schema\n@param key record key",
      "static": false,
      "params": [
        {
          "name": "schema",
          "type_long": "db.Schema",
          "type_short": "Schema",
          "comment": "record schema"
        },
        {
          "name": "key",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "record key"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "invalidateLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setKey",
      "comment": "Set the primary key associated with this record.",
      "javadoc": "Set the primary key associated with this record.\n@param key primary key",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": "primary key"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setKey",
      "comment": "Set the primary key associated with this record.",
      "javadoc": "Set the primary key associated with this record.\n@param key primary key",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "primary key"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKey",
      "comment": "Get the record primary key.",
      "javadoc": "Get the record primary key.\n@return primary key as long value.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "primary key as long value."
      },
      "throws": []
    },
    {
      "name": "getKeyField",
      "comment": "Get the record primary key as a Field object.",
      "javadoc": "Get the record primary key as a Field object.\n@return primary key as a field object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.Field",
        "type_short": "Field",
        "comment": "primary key as a field object."
      },
      "throws": []
    },
    {
      "name": "hasSameSchema",
      "comment": "Determine if this record\u0027s schema is the same as another record\u0027s\n schema.  This check factors column count and column field types only.",
      "javadoc": "Determine if this record\u0027s schema is the same as another record\u0027s\n schema.  This check factors column count and column field types only.\n@param otherRec another record\n@return true if records schemas are the same",
      "static": false,
      "params": [
        {
          "name": "otherRec",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "another record"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if records schemas are the same"
      },
      "throws": []
    },
    {
      "name": "hasSameSchema",
      "comment": "Determine if this record\u0027s schema is compatible with the specified schema.  \n This check factors column count and column field types only.\n Index and sparse column checks are not performed.",
      "javadoc": "Determine if this record\u0027s schema is compatible with the specified schema.  \n This check factors column count and column field types only.\n Index and sparse column checks are not performed.\n@param otherSchema other schema\n@return true if records schemas are the same",
      "static": false,
      "params": [
        {
          "name": "otherSchema",
          "type_long": "db.Schema",
          "type_short": "Schema",
          "comment": "other schema"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if records schemas are the same"
      },
      "throws": []
    },
    {
      "name": "getColumnCount",
      "comment": "Get the number of columns contained within this record.",
      "javadoc": "Get the number of columns contained within this record.\n@return number of field columns.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of field columns."
      },
      "throws": []
    },
    {
      "name": "getFieldValue",
      "comment": "Get a copy of the specified field value.",
      "javadoc": "Get a copy of the specified field value.\n@param columnIndex field index\n@return Field field value",
      "static": false,
      "params": [
        {
          "name": "columnIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        }
      ],
      "return": {
        "type_long": "db.Field",
        "type_short": "Field",
        "comment": "Field field value"
      },
      "throws": []
    },
    {
      "name": "setField",
      "comment": "Set the field value for the specified field.",
      "javadoc": "Set the field value for the specified field.\n@param colIndex field index\n@param value field value (null permitted for sparse column only)",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        },
        {
          "name": "value",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "field value (null permitted for sparse column only)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getField",
      "comment": "Get the specified field.  The object returned must not be\n modified.",
      "javadoc": "Get the specified field.  The object returned must not be\n modified.\n@param columnIndex field index\n@return Field",
      "static": false,
      "params": [
        {
          "name": "columnIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        }
      ],
      "return": {
        "type_long": "db.Field",
        "type_short": "Field",
        "comment": "Field"
      },
      "throws": []
    },
    {
      "name": "getFields",
      "comment": "Get all fields. The objects returned must not be\n modified.",
      "javadoc": "Get all fields. The objects returned must not be\n modified.\n@return array of field values.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.Field[]",
        "type_short": "db.Field[]",
        "comment": "array of field values."
      },
      "throws": []
    },
    {
      "name": "fieldEquals",
      "comment": "Determine if the specified field equals the field associated with the\n specified columnIndex.",
      "javadoc": "Determine if the specified field equals the field associated with the\n specified columnIndex.\n@param columnIndex field index\n@param field field value to compare with\n@return true if the fields are equal, else false.",
      "static": false,
      "params": [
        {
          "name": "columnIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        },
        {
          "name": "field",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "field value to compare with"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the fields are equal, else false."
      },
      "throws": []
    },
    {
      "name": "compareFieldTo",
      "comment": "Compare two field values.",
      "javadoc": "Compare two field values.\n@param columnIndex the field index within this record\n@param value another field value to compared\n@return 0 if equals, a negative number if this record\u0027s field is less\n than the specified value, or a positive number if this record\u0027s field is\n greater than the specified value.",
      "static": false,
      "params": [
        {
          "name": "columnIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the field index within this record"
        },
        {
          "name": "value",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "another field value to compared"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "0 if equals, a negative number if this record\u0027s field is less\n than the specified value, or a positive number if this record\u0027s field is\n greater than the specified value."
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "Obtain a copy of this record object.",
      "javadoc": "Obtain a copy of this record object.\n@return Record",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "Record"
      },
      "throws": []
    },
    {
      "name": "length",
      "comment": "Get the stored record length.\n This method is used to determine the space required to store the data \n fields within this record when written to a standard Buffer.",
      "javadoc": "Get the stored record length.\n This method is used to determine the space required to store the data \n fields within this record when written to a standard Buffer.\n@return int stored record length",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int stored record length"
      },
      "throws": []
    },
    {
      "name": "computeLength",
      "comment": "Compute record storage length",
      "javadoc": "Compute record storage length\n@return record storage length",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "record storage length"
      },
      "throws": []
    },
    {
      "name": "getLongValue",
      "comment": "Get the long value for the specified field.",
      "javadoc": "Get the long value for the specified field.\n@param colIndex field index\n@return field value\n@throws IllegalFieldAccessException if field does support long data access",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "field value"
      },
      "throws": []
    },
    {
      "name": "setLongValue",
      "comment": "Set the long value for the specified field.",
      "javadoc": "Set the long value for the specified field.\n@param colIndex field index\n@param value field value\n@throws IllegalFieldAccessException if field does support long data access",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "field value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIntValue",
      "comment": "Get the integer value for the specified field.",
      "javadoc": "Get the integer value for the specified field.\n@param colIndex field index\n@return field value\n@throws IllegalFieldAccessException if field does support integer data access",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "field value"
      },
      "throws": []
    },
    {
      "name": "setIntValue",
      "comment": "Set the integer value for the specified field.",
      "javadoc": "Set the integer value for the specified field.\n@param colIndex field index\n@param value field value\n@throws IllegalFieldAccessException if field does support integer data access",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "field value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getShortValue",
      "comment": "Get the short value for the specified field.",
      "javadoc": "Get the short value for the specified field.\n@param colIndex field index\n@return field value\n@throws IllegalFieldAccessException if field does support short data access",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "field value"
      },
      "throws": []
    },
    {
      "name": "setShortValue",
      "comment": "Set the short value for the specified field.",
      "javadoc": "Set the short value for the specified field.\n@param colIndex field index\n@param value field value\n@throws IllegalFieldAccessException if field does support short data access",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        },
        {
          "name": "value",
          "type_long": "short",
          "type_short": "short",
          "comment": "field value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getByteValue",
      "comment": "Get the byte value for the specified field.",
      "javadoc": "Get the byte value for the specified field.\n@param colIndex field index\n@return field value\n@throws IllegalFieldAccessException if field does support byte data access",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "field value"
      },
      "throws": []
    },
    {
      "name": "setByteValue",
      "comment": "Set the byte value for the specified field.",
      "javadoc": "Set the byte value for the specified field.\n@param colIndex field index\n@param value field value\n@throws IllegalFieldAccessException if field does support byte data access",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        },
        {
          "name": "value",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "field value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBooleanValue",
      "comment": "Get the boolean value for the specified field.",
      "javadoc": "Get the boolean value for the specified field.\n@param colIndex field index\n@return field value\n@throws IllegalFieldAccessException if field does support boolean data access",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "field value"
      },
      "throws": []
    },
    {
      "name": "setBooleanValue",
      "comment": "Set the boolean value for the specified field.",
      "javadoc": "Set the boolean value for the specified field.\n@param colIndex field index\n@param value field value\n@throws IllegalFieldAccessException if field does support boolean data access",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        },
        {
          "name": "value",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "field value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBinaryData",
      "comment": "Get the binary data array for the specified field.",
      "javadoc": "Get the binary data array for the specified field.\n@param colIndex field index\n@return field data\n@throws IllegalFieldAccessException if field does support binary data access",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "field data"
      },
      "throws": []
    },
    {
      "name": "setBinaryData",
      "comment": "Set the binary data array for the specified field.",
      "javadoc": "Set the binary data array for the specified field.\n@param colIndex field index\n@param bytes field value\n@throws IllegalFieldAccessException if field does support binary data access\n or incorrect number of bytes provided",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        },
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "field value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getString",
      "comment": "Get the string value for the specified field.",
      "javadoc": "Get the string value for the specified field.\n@param colIndex field index\n@return field data\n@throws IllegalFieldAccessException if field does support string data access",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "field data"
      },
      "throws": []
    },
    {
      "name": "setString",
      "comment": "Set the string value for the specified field.",
      "javadoc": "Set the string value for the specified field.\n@param colIndex field index\n@param str field value\n@throws IllegalFieldAccessException if field does support string data access",
      "static": false,
      "params": [
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field index"
        },
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "field value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "write",
      "comment": "Write the record fields to the specified buffer and offset.",
      "javadoc": "Write the record fields to the specified buffer and offset.\n@param buf data buffer\n@param offset buffer offset\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "db.Buffer",
          "type_short": "Buffer",
          "comment": "data buffer"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "buffer offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "read",
      "comment": "Read the record field data from the specified buffer and offset",
      "javadoc": "Read the record field data from the specified buffer and offset\n@param buf data buffer\n@param offset buffer offset\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "db.Buffer",
          "type_short": "Buffer",
          "comment": "data buffer"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "buffer offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "isDirty",
      "comment": "Determine if data fields have been modified since the last write\n occurred.",
      "javadoc": "Determine if data fields have been modified since the last write\n occurred.\n@return true if the field data has not been saved, else false.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the field data has not been saved, else false."
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "Compare the content of two Records for equality.",
      "javadoc": "Compare the content of two Records for equality.\n@see java.lang.Object#equals(java.lang.Object)",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "Compares the key associated with this record with the \n key of another record (obj).",
      "javadoc": "Compares the key associated with this record with the \n key of another record (obj).\n@see java.lang.Comparable#compareTo(java.lang.Object)",
      "static": false,
      "params": [
        {
          "name": "otherRec",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
