{
  "name": "IndexField",
  "comment": "IndexField provides a index table primary key Field \n implementation which wraps both the index field value (fixed or varaible length) \n and its\u0027 corresponding primary key (fixed or variable length).",
  "javadoc": "\u003ccode\u003eIndexField\u003c/code\u003e provides a index table primary key {@link Field} \n implementation which wraps both the index field value (fixed or varaible length) \n and its\u0027 corresponding primary key (fixed or variable length).",
  "static": false,
  "implements": [],
  "extends": "db.Field",
  "fields": [
    {
      "name": "MAX_INDEX_FIELD_LENGTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "64"
    },
    {
      "name": "primaryKey",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.Field",
      "type_short": "Field",
      "constant_value": null
    },
    {
      "name": "nonTruncatedIndexedField",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.Field",
      "type_short": "Field",
      "constant_value": null
    },
    {
      "name": "indexedField",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.Field",
      "type_short": "Field",
      "constant_value": null
    },
    {
      "name": "isTruncated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an index field with an initial value.",
      "javadoc": "Construct an index field with an initial value.\n@param indexedField indexed field value\n@param primaryKey primary key value",
      "static": false,
      "params": [
        {
          "name": "indexedField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "indexed field value"
        },
        {
          "name": "primaryKey",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "primary key value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isNull",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setNull",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIndexedField",
      "comment": "Get the indexed field value.  If the original value exceeded \n #MAX_INDEX_FIELD_LENGTH in length the returned value will\n be truncated.",
      "javadoc": "Get the indexed field value.  If the original value exceeded \n {@link #MAX_INDEX_FIELD_LENGTH} in length the returned value will\n be truncated.\n@return indexed field value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.Field",
        "type_short": "Field",
        "comment": "indexed field value"
      },
      "throws": []
    },
    {
      "name": "getNonTruncatedIndexField",
      "comment": "Get the non-truncated index field value.",
      "javadoc": "Get the non-truncated index field value.\n@return non-truncated index field value.\n@deprecated this method serves no real purpose since the non-truncated\n indexed field value is not retained within the index table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.Field",
        "type_short": "Field",
        "comment": "non-truncated index field value."
      },
      "throws": []
    },
    {
      "name": "usesTruncatedFieldValue",
      "comment": "Determine if the index field value has been truncated from its\u0027 original\n value.",
      "javadoc": "Determine if the index field value has been truncated from its\u0027 original\n value.\n@return true if truncated else false\n@deprecated this method serves no real purpose since the truncation \n status is not retained within the index table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if truncated else false"
      },
      "throws": []
    },
    {
      "name": "getPrimaryKey",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.Field",
        "type_short": "Field",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "write",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "db.Buffer",
          "type_short": "Buffer",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "read",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "db.Buffer",
          "type_short": "Buffer",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "db.Buffer",
          "type_short": "Buffer",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isVariableLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copyField",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.IndexField",
        "type_short": "IndexField",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newField",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.IndexField",
        "type_short": "IndexField",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newIndexField",
      "comment": "Construct a new IndexField instance for the given indexValue and \n associated primary key.  These fields are verified against this instance to \n ensure that they are of the correct type.",
      "javadoc": "Construct a new {@link IndexField} instance for the given indexValue and \n associated primary key.  These fields are verified against this instance to \n ensure that they are of the correct type.\n@param indexValue column field value to be indexed\n@param key primary key associated with indexValue\n@return new IndexField instance",
      "static": false,
      "params": [
        {
          "name": "indexValue",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "column field value to be indexed"
        },
        {
          "name": "key",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "primary key associated with indexValue"
        }
      ],
      "return": {
        "type_long": "db.IndexField",
        "type_short": "IndexField",
        "comment": "new IndexField instance"
      },
      "throws": []
    },
    {
      "name": "getMinValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.IndexField",
        "type_short": "IndexField",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaxValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.IndexField",
        "type_short": "IndexField",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFieldType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValueAsString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasSameIndexValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "field",
          "type_long": "db.IndexField",
          "type_short": "IndexField",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBinaryData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setBinaryData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "db.buffers.DataBuffer",
          "type_short": "DataBuffer",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSameType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "field",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIndexFieldType",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "indexedFieldType",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "primaryKeyFieldType",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIndexField",
      "comment": "Get the index field associated with the specified encoded field type.",
      "javadoc": "Get the index field associated with the specified encoded field type.\n@param fieldType field type\n@return IndexField\n@throws UnsupportedFieldException if unsupported fieldType specified",
      "static": true,
      "params": [
        {
          "name": "fieldType",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "field type"
        }
      ],
      "return": {
        "type_long": "db.IndexField",
        "type_short": "IndexField",
        "comment": "IndexField"
      },
      "throws": [
        {
          "type_long": "db.Field.UnsupportedFieldException",
          "type_short": "UnsupportedFieldException",
          "comment": "if unsupported fieldType specified"
        }
      ]
    }
  ]
}
