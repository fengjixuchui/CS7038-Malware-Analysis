{
  "name": "BTreeNode",
  "comment": "BTreeNode defines a common interface for all types\n of BTree nodes.",
  "javadoc": "\u003ccode\u003eBTreeNode\u003c/code\u003e defines a common interface for all types\n of BTree nodes.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getParent",
      "comment": "",
      "javadoc": "@return the parent node or null if this is the root",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.InteriorNode",
        "type_short": "InteriorNode",
        "comment": "the parent node or null if this is the root"
      },
      "throws": []
    },
    {
      "name": "getBufferId",
      "comment": "",
      "javadoc": "@return the data buffer ID associated with this node.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the data buffer ID associated with this node."
      },
      "throws": []
    },
    {
      "name": "getBuffer",
      "comment": "",
      "javadoc": "@return the data buffer associated with this node.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.buffers.DataBuffer",
        "type_short": "DataBuffer",
        "comment": "the data buffer associated with this node."
      },
      "throws": []
    },
    {
      "name": "getKeyCount",
      "comment": "",
      "javadoc": "@return the number of keys contained within this node.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of keys contained within this node."
      },
      "throws": []
    },
    {
      "name": "setKeyCount",
      "comment": "Set the number of keys contained within this node.",
      "javadoc": "Set the number of keys contained within this node.\n@param cnt key count",
      "static": false,
      "params": [
        {
          "name": "cnt",
          "type_long": "int",
          "type_short": "int",
          "comment": "key count"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKeyField",
      "comment": "Get the key value at a specific index.",
      "javadoc": "Get the key value at a specific index.\n@param index key index\n@return key value\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "key index"
        }
      ],
      "return": {
        "type_long": "db.Field",
        "type_short": "Field",
        "comment": "key value"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    },
    {
      "name": "getKeyIndex",
      "comment": "Perform a binary search to locate the specified key and derive an index\n into the Buffer ID storage.  This method is intended to find the insertion \n index or exact match for a child key.  A negative value will be returned\n when an exact match is not found and may be transformed into an \n insertion index (insetIndex \u003d -returnedIndex-1).",
      "javadoc": "Perform a binary search to locate the specified key and derive an index\n into the Buffer ID storage.  This method is intended to find the insertion \n index or exact match for a child key.  A negative value will be returned\n when an exact match is not found and may be transformed into an \n insertion index (insetIndex \u003d -returnedIndex-1).\n@param key key to search for\n@return int buffer ID index.\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "key to search for"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int buffer ID index."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    },
    {
      "name": "delete",
      "comment": "Delete this node and all child nodes.",
      "javadoc": "Delete this node and all child nodes.\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "getBufferReferences",
      "comment": "Return all buffer IDs for those buffers which are children\n of this buffer.",
      "javadoc": "Return all buffer IDs for those buffers which are children\n of this buffer.\n@return array of buffer IDs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "array of buffer IDs"
      },
      "throws": []
    },
    {
      "name": "isConsistent",
      "comment": "Check the consistency of this node and all of its children.",
      "javadoc": "Check the consistency of this node and all of its children.\n@return true if consistency check passed, else false\n@param tableName name of table containing this node\n@param monitor task monitor\n@throws IOException if IO error occured\n@throws CancelledException if task cancelled\n@{@link ThrowsTag} CancelledException",
      "static": false,
      "params": [
        {
          "name": "tableName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of table containing this node"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if consistency check passed, else false"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occured"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if task cancelled"
        }
      ]
    }
  ]
}
