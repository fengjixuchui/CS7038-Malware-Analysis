{
  "name": "FixedKeyFixedRecNode",
  "comment": "FixedKeyFixedRecNode is an implementation of a BTree leaf node\n which utilizes fixed-length key values and stores fixed-length records.\n \n This type of node has the following layout within a single DataBuffer \n (field size in bytes, where \u0027L\u0027 is the fixed length of the fixed-length \n key as specified by key type in associated Schema):\n \n   | NodeType(1) | KeyCount(4) | PrevLeafId(4) | NextLeafId(4) | Key0(L) | Rec0 | ...\n \n   | KeyN(L) | RecN |\n ",
  "javadoc": "\u003ccode\u003eFixedKeyFixedRecNode\u003c/code\u003e is an implementation of a BTree leaf node\n which utilizes fixed-length key values and stores fixed-length records.\n \u003cp\u003e\n This type of node has the following layout within a single DataBuffer \n (field size in bytes, where \u0027L\u0027 is the fixed length of the fixed-length \n key as specified by key type in associated Schema):\n \u003cpre\u003e\n   | NodeType(1) | KeyCount(4) | PrevLeafId(4) | NextLeafId(4) | Key0(L) | Rec0 | ...\n \n   | KeyN(L) | RecN |\n \u003c/pre\u003e",
  "static": false,
  "implements": [],
  "extends": "db.FixedKeyRecordNode",
  "fields": [
    {
      "name": "HEADER_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "13"
    },
    {
      "name": "ENTRY_BASE_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "13"
    },
    {
      "name": "EMPTY_ID_LIST",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "entrySize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "recordLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an existing fixed-length key fixed-length record leaf node.",
      "javadoc": "Construct an existing fixed-length key fixed-length record leaf node.\n@param nodeMgr table node manager instance\n@param buf node buffer\n@throws IOException if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "nodeMgr",
          "type_long": "db.NodeMgr",
          "type_short": "NodeMgr",
          "comment": "table node manager instance"
        },
        {
          "name": "buf",
          "type_long": "db.buffers.DataBuffer",
          "type_short": "DataBuffer",
          "comment": "node buffer"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new fixed-length key fixed-length record leaf node.",
      "javadoc": "Construct a new fixed-length key fixed-length record leaf node.\n@param nodeMgr table node manager instance\n@param prevLeafId node buffer id for previous leaf ( \u0026lt; 0: no leaf)\n@param nextLeafId node buffer id for next leaf ( \u0026lt; 0 : no leaf)\n@throws IOException if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "nodeMgr",
          "type_long": "db.NodeMgr",
          "type_short": "NodeMgr",
          "comment": "table node manager instance"
        },
        {
          "name": "prevLeafId",
          "type_long": "int",
          "type_short": "int",
          "comment": "node buffer id for previous leaf (  0: no leaf)"
        },
        {
          "name": "nextLeafId",
          "type_long": "int",
          "type_short": "int",
          "comment": "node buffer id for next leaf (  0 : no leaf)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    },
    {
      "name": "createNewLeaf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "prevLeafId",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "nextLeafId",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.FixedKeyRecordNode",
        "type_short": "FixedKeyRecordNode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getKeyOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRecordOffset",
      "comment": "Get the record offset within the buffer",
      "javadoc": "Get the record offset within the buffer\n@param index key index\n@return record offset",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "key index"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "record offset"
      },
      "throws": []
    },
    {
      "name": "shiftRecords",
      "comment": "Shift all records by one starting with index to the end.",
      "javadoc": "Shift all records by one starting with index to the end.\n@param index the smaller key index (0 \u0026lt;\u003d index1)\n@param rightShift shift right by one record if true, else shift left by\n one record.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the smaller key index (0 \u003d index1)"
        },
        {
          "name": "rightShift",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "shift right by one record if true, else shift left by\n one record."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insertRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "updateRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.FixedKeyNode",
        "type_short": "FixedKeyNode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "schema",
          "type_long": "db.Schema",
          "type_short": "Schema",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "schema",
          "type_long": "db.Schema",
          "type_short": "Schema",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "splitData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newRightLeaf",
          "type_long": "db.FixedKeyRecordNode",
          "type_short": "FixedKeyRecordNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "delete",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBufferReferences",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": ""
      },
      "throws": []
    }
  ]
}
