{
  "name": "FieldIndexTable",
  "comment": "FieldIndexTable provides a simplified index table whose key is\n a fixed or variable length IndexField which consists of a concatenation of\n the index field value and associated primary table key.",
  "javadoc": "\u003ccode\u003eFieldIndexTable\u003c/code\u003e provides a simplified index table whose key is\n a fixed or variable length {@link IndexField} which consists of a concatenation of\n the index field value and associated primary table key.",
  "static": false,
  "implements": [],
  "extends": "db.IndexTable",
  "fields": [
    {
      "name": "fields",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Field[]",
      "type_short": "db.Field[]",
      "constant_value": null
    },
    {
      "name": "fieldNames",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "indexKeyType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.IndexField",
      "type_short": "IndexField",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new secondary index which is based upon a specific field column within the\n primary table.",
      "javadoc": "Construct a new secondary index which is based upon a specific field column within the\n primary table.\n@param primaryTable primary table\n@param colIndex field column index\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "primaryTable",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "primary table"
        },
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "field column index"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new or existing secondary index. An existing index must have\n its root ID specified within the tableRecord.",
      "javadoc": "Construct a new or existing secondary index. An existing index must have\n its root ID specified within the tableRecord.\n@param primaryTable primary table.\n@param indexTableRecord specifies the index parameters.\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "primaryTable",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "primary table."
        },
        {
          "name": "indexTableRecord",
          "type_long": "db.TableRecord",
          "type_short": "TableRecord",
          "comment": "specifies the index parameters."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    },
    {
      "name": "getIndexTableSchema",
      "comment": "Generate index table schema for specified primaryTable and index column",
      "javadoc": "Generate index table schema for specified primaryTable and index column\n@param primaryTable primary table\n@param colIndex index column\n@return index table schema",
      "static": true,
      "params": [
        {
          "name": "primaryTable",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "primary table"
        },
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index column"
        }
      ],
      "return": {
        "type_long": "db.Schema",
        "type_short": "Schema",
        "comment": "index table schema"
      },
      "throws": []
    },
    {
      "name": "findPrimaryKeys",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "indexValue",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.Field[]",
        "type_short": "db.Field[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getKeyCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "indexValue",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addEntry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "deleteEntry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "indexIterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.DBFieldIterator",
        "type_short": "DBFieldIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "indexIterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "minField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "maxField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "before",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBFieldIterator",
        "type_short": "DBFieldIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "indexIterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "minField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "maxField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "startField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "before",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBFieldIterator",
        "type_short": "DBFieldIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "hasRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "field",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "keyIterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.DBFieldIterator",
        "type_short": "DBFieldIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "keyIteratorBefore",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "startField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBFieldIterator",
        "type_short": "DBFieldIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "keyIteratorAfter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "startField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBFieldIterator",
        "type_short": "DBFieldIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "keyIteratorBefore",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "startField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "primaryKey",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBFieldIterator",
        "type_short": "DBFieldIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "keyIteratorAfter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "startField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "primaryKey",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBFieldIterator",
        "type_short": "DBFieldIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "keyIterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "startField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "endField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "atStart",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBFieldIterator",
        "type_short": "DBFieldIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "keyIterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "minField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "maxField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "startField",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": ""
        },
        {
          "name": "before",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBFieldIterator",
        "type_short": "DBFieldIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
