{
  "name": "Database",
  "comment": "Database facilitates the creation of a DBHandle for accessing\n a database.\n \n Public constructors are only provided for use with \"Non-Versioned\" databases.\n This class should be extended when additional management features are needed, \n such as for a \"Versioned\" database.\n \n This class assumes exclusive control of the associated files contained within the \n associated database directory and relies on the proper establishment of a \n syncObject to midigate potential concurrent modification issues.",
  "javadoc": "\u003ccode\u003eDatabase\u003c/code\u003e facilitates the creation of a DBHandle for accessing\n a database.\n \u003cp\u003e\n Public constructors are only provided for use with \"Non-Versioned\" databases.\n This class should be extended when additional management features are needed, \n such as for a \"Versioned\" database.\n \u003cp\u003e\n This class assumes exclusive control of the associated files contained within the \n associated database directory and relies on the proper establishment of a \n syncObject to midigate potential concurrent modification issues.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "log",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "org.apache.logging.log4j.Logger",
      "type_short": "Logger",
      "constant_value": null
    },
    {
      "name": "DATABASE_FILE_PREFIX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"db.\""
    },
    {
      "name": "VERSION_FILE_PREFIX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"ver.\""
    },
    {
      "name": "CHANGE_FILE_PREFIX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"change.\""
    },
    {
      "name": "CUMULATIVE_CHANGE_FILENAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"change.data.gbf\""
    },
    {
      "name": "CUMULATIVE_MODMAP_FILENAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"change.map.gbf\""
    },
    {
      "name": "minVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "currentVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "lastModified",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "isVersioned",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isCheckOutCopy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "updateAllowed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "bfMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.buffers.BufferFileManager",
      "type_short": "BufferFileManager",
      "constant_value": null
    },
    {
      "name": "dbDir",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.File",
      "type_short": "File",
      "constant_value": null
    },
    {
      "name": "dbFileListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.DBFileListener",
      "type_short": "DBFileListener",
      "constant_value": null
    },
    {
      "name": "dbDirCreated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "syncObject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Object",
      "type_short": "Object",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "General Database Constructor.",
      "javadoc": "General Database Constructor.\n@param dbDir\n@param isVersioned\n@param create if true the database will be created.\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "isVersioned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true the database will be created."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for a new or existing \"Non-Versioned\" Database.",
      "javadoc": "Constructor for a new or existing \"Non-Versioned\" Database.\n@param dbDir\n@param dbFileListener file version listener\n@param create\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "dbFileListener",
          "type_long": "db.DBFileListener",
          "type_short": "DBFileListener",
          "comment": "file version listener"
        },
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for an existing \"Non-Versioned\" Database.",
      "javadoc": "Constructor for an existing \"Non-Versioned\" Database.\n@param dbDir database directory\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "database directory"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setSynchronizationObject",
      "comment": "Set the object to be used for synchronization.",
      "javadoc": "Set the object to be used for synchronization.\n@param syncObject",
      "static": false,
      "params": [
        {
          "name": "syncObject",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lastModified",
      "comment": "Returns the time at which this database was last saved.",
      "javadoc": "Returns the time at which this database was last saved.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteDir",
      "comment": "Delete a directory and all of its contents.",
      "javadoc": "Delete a directory and all of its contents.\n@param dir\n@return true if delete was successful.  \n If false is returned, a partial delete may have occurred.",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if delete was successful.  \n If false is returned, a partial delete may have occurred."
      },
      "throws": []
    },
    {
      "name": "getCurrentVersion",
      "comment": "Returns the version number associated with the latest buffer file version.",
      "javadoc": "Returns the version number associated with the latest buffer file version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "open",
      "comment": "Open the stored database for non-update use.\n The returned handle does not support the Save operation.",
      "javadoc": "Open the stored database for non-update use.\n The returned handle does not support the Save operation.\n@param monitor task monitor (may be null)\n@return database handle\n@throws FileInUseException thrown if unable to obtain the required database lock(s).\n@throws IOException thrown if IO error occurs.\n@throws CancelledException if cancelled by monitor",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor (may be null)"
        }
      ],
      "return": {
        "type_long": "db.DBHandle",
        "type_short": "DBHandle",
        "comment": "database handle"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if cancelled by monitor"
        }
      ]
    },
    {
      "name": "openForUpdate",
      "comment": "Open the stored database for update use.",
      "javadoc": "Open the stored database for update use.\n@param monitor task monitor (may be null)\n@return buffer file\n@throws FileInUseException thrown if unable to obtain the required database lock(s).\n@throws IOException thrown if IO error occurs.\n@throws CancelledException if cancelled by monitor",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor (may be null)"
        }
      ],
      "return": {
        "type_long": "db.DBHandle",
        "type_short": "DBHandle",
        "comment": "buffer file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if cancelled by monitor"
        }
      ]
    },
    {
      "name": "length",
      "comment": "Returns the length of this domain file.  This size is the minimum disk space\n used for storing this file, but does not account for additional storage space\n used to tracks changes, etc.",
      "javadoc": "Returns the length of this domain file.  This size is the minimum disk space\n used for storing this file, but does not account for additional storage space\n used to tracks changes, etc.\n@return file length\n@throws IOException thrown if IO or access error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "file length"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO or access error occurs"
        }
      ]
    },
    {
      "name": "checkDbDir",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "refresh",
      "comment": "Scan files and update state.",
      "javadoc": "Scan files and update state.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "scanFiles",
      "comment": "Scan files and update state.",
      "javadoc": "Scan files and update state.\n@param repair if true files are repaired if needed.",
      "static": false,
      "params": [
        {
          "name": "repair",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true files are repaired if needed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFileVersions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fileList",
          "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
          "type_short": "ArrayList",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": ""
      },
      "throws": []
    }
  ]
}
