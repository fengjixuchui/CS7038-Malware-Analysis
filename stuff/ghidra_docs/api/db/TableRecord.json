{
  "name": "TableRecord",
  "comment": "TableRecord manages information about a table.  Each TableRecord \n corresponds to a stored record within the master table.",
  "javadoc": "\u003ccode\u003eTableRecord\u003c/code\u003e manages information about a table.  Each TableRecord \n corresponds to a stored record within the master table.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NAME_COLUMN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "VERSION_COLUMN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "BUFFER_ID_COLUMN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "KEY_TYPE_COLUMN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "FIELD_TYPES_COLUMN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "FIELD_NAMES_COLUMN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "COLUMN_INDEXED_COLUMN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "MAX_KEY_COLUMN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "7"
    },
    {
      "name": "RECORD_COUNT_COLUMN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "fields",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Field[]",
      "type_short": "db.Field[]",
      "constant_value": null
    },
    {
      "name": "tableRecordFieldNames",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "schema",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "record",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.DBRecord",
      "type_short": "DBRecord",
      "constant_value": null
    },
    {
      "name": "tableSchema",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "table",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.Table",
      "type_short": "Table",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new master table record.",
      "javadoc": "Construct a new master table record.\n@param tableNum table number assigned by master table\n@param name table name (index tables use same name as indexed table)\n@param tableSchema table schema\n@param indexedColumn primary table index key column, or -1 for primary table",
      "static": false,
      "params": [
        {
          "name": "tableNum",
          "type_long": "long",
          "type_short": "long",
          "comment": "table number assigned by master table"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "table name (index tables use same name as indexed table)"
        },
        {
          "name": "tableSchema",
          "type_long": "db.Schema",
          "type_short": "Schema",
          "comment": "table schema"
        },
        {
          "name": "indexedColumn",
          "type_long": "int",
          "type_short": "int",
          "comment": "primary table index key column, or -1 for primary table"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an existing master table storage record.",
      "javadoc": "Construct an existing master table storage record.\n@param dbh database handle\n@param record master table storage record.\n@throws UnsupportedFieldException stored schema contains unsupported field\n@throws IOException if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "dbh",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "database handle"
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "master table storage record."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Get the underlying storage record for this instance.",
      "javadoc": "Get the underlying storage record for this instance.\n@return master table storage record.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "master table storage record."
      },
      "throws": []
    },
    {
      "name": "setTable",
      "comment": "Set the table instance associated with this master table record.",
      "javadoc": "Set the table instance associated with this master table record.\n@param table table instance",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "table instance"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRecord",
      "comment": "Set the storage record for this instance.\n Data is refreshed from the record provided.",
      "javadoc": "Set the storage record for this instance.\n Data is refreshed from the record provided.\n@param dbh database handle\n@param record master table storage record.\n@throws UnsupportedFieldException stored schema contains unsupported field\n@throws IOException if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "dbh",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "database handle"
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "master table storage record."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    },
    {
      "name": "invalidate",
      "comment": "Mark this instance as invalid.\n This method should be invoked if the associated master table record\n is deleted.",
      "javadoc": "Mark this instance as invalid.\n This method should be invoked if the associated master table record\n is deleted.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableNum",
      "comment": "Get the table number",
      "javadoc": "Get the table number\n@return table number",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "table number"
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Get the table name",
      "javadoc": "Get the table name\n@return table name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "table name"
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "Set the table name",
      "javadoc": "Set the table name\n@param name table name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "table name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseSchema",
      "comment": "",
      "javadoc": "@param dbh database handle\n@param record record which defines table schema\n@return table schema\n@throws UnsupportedFieldException stored schema contains unsupported field\n@throws IOException if IO error occurs",
      "static": true,
      "params": [
        {
          "name": "dbh",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "database handle"
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "record which defines table schema"
        }
      ],
      "return": {
        "type_long": "db.Schema",
        "type_short": "Schema",
        "comment": "table schema"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    },
    {
      "name": "forceUseOfVariableLengthKeyNodesIfNeeded",
      "comment": "Determine if legacy schema should be forced to use VarKeyNode \n table storage for compatibility. Root buffer node for applicable\n primitive fixed-length key types will be checked.",
      "javadoc": "Determine if legacy schema should be forced to use {@link VarKeyNode} \n table storage for compatibility. Root buffer node for applicable\n primitive fixed-length key types will be checked.\n@param dbh database handle\n@param tableSchema table schema to be checked\n@param rootBufferId table root buffer ID\n@throws IOException if IO error occurs",
      "static": true,
      "params": [
        {
          "name": "dbh",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "database handle"
        },
        {
          "name": "tableSchema",
          "type_long": "db.Schema",
          "type_short": "Schema",
          "comment": "table schema to be checked"
        },
        {
          "name": "rootBufferId",
          "type_long": "int",
          "type_short": "int",
          "comment": "table root buffer ID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    },
    {
      "name": "getSchema",
      "comment": "Get the table schema",
      "javadoc": "Get the table schema\n@return table schema",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.Schema",
        "type_short": "Schema",
        "comment": "table schema"
      },
      "throws": []
    },
    {
      "name": "getRootBufferId",
      "comment": "Get the table\u0027s root buffer ID",
      "javadoc": "Get the table\u0027s root buffer ID\n@return root buffer ID",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "root buffer ID"
      },
      "throws": []
    },
    {
      "name": "setRootBufferId",
      "comment": "Set the tables root buffer ID",
      "javadoc": "Set the tables root buffer ID\n@param id table\u0027s root buffer ID",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "int",
          "type_short": "int",
          "comment": "table\u0027s root buffer ID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaxKey",
      "comment": "Get the table\u0027s maximum long key value.",
      "javadoc": "Get the table\u0027s maximum long key value.\n@return table\u0027s maximum long key value.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "table\u0027s maximum long key value."
      },
      "throws": []
    },
    {
      "name": "setMaxKey",
      "comment": "Set table\u0027s maximum long key value.",
      "javadoc": "Set table\u0027s maximum long key value.\n@param maxKey table\u0027s maximum long key value.",
      "static": false,
      "params": [
        {
          "name": "maxKey",
          "type_long": "long",
          "type_short": "long",
          "comment": "table\u0027s maximum long key value."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRecordCount",
      "comment": "Get the table\u0027s current record count",
      "javadoc": "Get the table\u0027s current record count\n@return table\u0027s record count",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "table\u0027s record count"
      },
      "throws": []
    },
    {
      "name": "setRecordCount",
      "comment": "Set the table\u0027s current record count",
      "javadoc": "Set the table\u0027s current record count\n@param count current record count",
      "static": false,
      "params": [
        {
          "name": "count",
          "type_long": "int",
          "type_short": "int",
          "comment": "current record count"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIndexedColumn",
      "comment": "Get the column number which is indexed by this table.\n A value of -1 indicates that this is the primary table indexed\n by a long key value.  Positive values are used to specify that this \n is a secondary index table, where the Index key corresponds to the\n specified column within the named table.",
      "javadoc": "Get the column number which is indexed by this table.\n A value of -1 indicates that this is the primary table indexed\n by a long key value.  Positive values are used to specify that this \n is a secondary index table, where the Index key corresponds to the\n specified column within the named table.\n@return int",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int"
      },
      "throws": []
    },
    {
      "name": "getTableRecordSchema",
      "comment": "Get the master table record storage schema",
      "javadoc": "Get the master table record storage schema\n@return master table record storage schema",
      "static": true,
      "params": [],
      "return": {
        "type_long": "db.Schema",
        "type_short": "Schema",
        "comment": "master table record storage schema"
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "Compares the key associated with this table record with the \n key of another table record (obj).",
      "javadoc": "Compares the key associated with this table record with the \n key of another table record (obj).\n@see java.lang.Comparable#compareTo(java.lang.Object)",
      "static": false,
      "params": [
        {
          "name": "otherRecord",
          "type_long": "db.TableRecord",
          "type_short": "TableRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
