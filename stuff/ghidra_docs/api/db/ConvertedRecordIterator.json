{
  "name": "ConvertedRecordIterator",
  "comment": "ConvertedRecordIterator provides a RecordIterator wrapper\n for performing record conversion frequently required when using older\n data.",
  "javadoc": "\u003ccode\u003eConvertedRecordIterator\u003c/code\u003e provides a RecordIterator wrapper\n for performing record conversion frequently required when using older\n data.",
  "static": false,
  "implements": [
    "db.RecordIterator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "originalIterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.RecordIterator",
      "type_short": "RecordIterator",
      "constant_value": null
    },
    {
      "name": "deleteAllowed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor.",
      "javadoc": "Constructor.\n@param originalIterator\n@param deleteAllowed if false and delete is attempted, delete will throw an\n UnsupportedOperationException",
      "static": false,
      "params": [
        {
          "name": "originalIterator",
          "type_long": "db.RecordIterator",
          "type_short": "RecordIterator",
          "comment": ""
        },
        {
          "name": "deleteAllowed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if false and delete is attempted, delete will throw an\n UnsupportedOperationException"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "delete",
      "comment": "",
      "javadoc": "@see db.RecordIterator#delete()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "hasNext",
      "comment": "",
      "javadoc": "@see db.RecordIterator#hasNext()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "hasPrevious",
      "comment": "",
      "javadoc": "@see db.RecordIterator#hasPrevious()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "next",
      "comment": "",
      "javadoc": "@see db.RecordIterator#next()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "previous",
      "comment": "",
      "javadoc": "@see db.RecordIterator#previous()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "convertRecord",
      "comment": "Convert a record supplied by the underlying RecordIterator.",
      "javadoc": "Convert a record supplied by the underlying RecordIterator.\n@param record\n@return converted record",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "converted record"
      },
      "throws": []
    }
  ]
}
