{
  "name": "ManagedBufferFile",
  "comment": "BufferFile facilitates read/write access to buffer oriented file.\n Access to related resources, such as parameters and change data, is also facilitated.",
  "javadoc": "\u003ccode\u003eBufferFile\u003c/code\u003e facilitates read/write access to buffer oriented file.\n Access to related resources, such as parameters and change data, is also facilitated.",
  "static": false,
  "implements": [
    "db.buffers.BufferFile"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getNextChangeDataFile",
      "comment": "Get the next change data file which corresponds to this buffer file.\n This method acts like an iterator which each successive invocation returning \n the next available file.  Null is returned when no more files are available.\n The invoker is responsible for closing each file returned.  It is highly \n recommended that each file be closed prior to requesting the next file.",
      "javadoc": "Get the next change data file which corresponds to this buffer file.\n This method acts like an iterator which each successive invocation returning \n the next available file.  Null is returned when no more files are available.\n The invoker is responsible for closing each file returned.  It is highly \n recommended that each file be closed prior to requesting the next file.\n@param getFirst causes the iterator to reset and return the first available file.\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [
        {
          "name": "getFirst",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "causes the iterator to reset and return the first available file."
        }
      ],
      "return": {
        "type_long": "db.buffers.BufferFile",
        "type_short": "BufferFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "getSaveChangeDataFile",
      "comment": "Returns a temporary change data buffer file which should be used to store a \n application-level ChangeSet associated with this new buffer file version.  \n The getSaveFile method must be successfully invoked prior to invoking this method.",
      "javadoc": "Returns a temporary change data buffer file which should be used to store a \n application-level ChangeSet associated with this new buffer file version.  \n The getSaveFile method must be successfully invoked prior to invoking this method.\n@return change data file or null if one is not available.\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.buffers.BufferFile",
        "type_short": "BufferFile",
        "comment": "change data file or null if one is not available."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "getForwardModMapData",
      "comment": "Returns a bit map corresponding to all buffers modified since oldVersion.\n This identifies all buffers contained within the oldVersion\n which have been modified during any revision up until this file version.\n Buffers added since oldVersion are not identified\n NOTE: The bit mask may identify empty/free buffers within this file version.",
      "javadoc": "Returns a bit map corresponding to all buffers modified since oldVersion.\n This identifies all buffers contained within the oldVersion\n which have been modified during any revision up until this file version.\n Buffers added since oldVersion are not identified\n NOTE: The bit mask may identify empty/free buffers within this file version.\n@param oldVersion indicates the older version of this file for which a change map\n will be returned.  This method may only be invoked if this file\n is at version 2 or higher, has an associated BufferFileManager and\n the oldVersion related files still exist.\n@return ModMap buffer change map data\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [
        {
          "name": "oldVersion",
          "type_long": "int",
          "type_short": "int",
          "comment": "indicates the older version of this file for which a change map\n will be returned.  This method may only be invoked if this file\n is at version 2 or higher, has an associated BufferFileManager and\n the oldVersion related files still exist."
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "ModMap buffer change map data"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "getSaveFile",
      "comment": "Returns a Save file if available.  Returns null if\n a save can not be performed.  This method may block for an extended\n period of time if the pre-save process has not already completed.\n This method does not accept a monitor since a remote TaskMonitor does\n not yet exist.",
      "javadoc": "Returns a Save file if available.  Returns null if\n a save can not be performed.  This method may block for an extended\n period of time if the pre-save process has not already completed.\n This method does not accept a monitor since a remote TaskMonitor does\n not yet exist.\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.buffers.ManagedBufferFile",
        "type_short": "ManagedBufferFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "saveCompleted",
      "comment": "After getting the save file, this method must be invoked to\n terminate the save.",
      "javadoc": "After getting the save file, this method must be invoked to\n terminate the save.\n@param commit if true the save file will be reopened as read-only \n for update.  If false, the save file will be deleted and the object will \n become invalid.\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "commit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true the save file will be reopened as read-only \n for update.  If false, the save file will be deleted and the object will \n become invalid."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "canSave",
      "comment": "Returns true if a save file is provided for creating a new\n version of this buffer file.",
      "javadoc": "Returns true if a save file is provided for creating a new\n version of this buffer file.\n@throws IOException if an I/O error occurs\n@see #getSaveFile()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "setVersionComment",
      "comment": "Set the comment which will be associated with this buffer file\n if saved.  The comment must be set prior to invoking close or\n setReadOnly.",
      "javadoc": "Set the comment which will be associated with this buffer file\n if saved.  The comment must be set prior to invoking close or\n setReadOnly.\n@param comment comment text\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "comment text"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "getCheckinID",
      "comment": "Returns the checkin ID corresponding to this buffer file.\n The returned value is only valid if this buffer file has an associated\n buffer file manager and is either being created (see isReadOnly) or\n is intended for update (see canSave).",
      "javadoc": "Returns the checkin ID corresponding to this buffer file.\n The returned value is only valid if this buffer file has an associated\n buffer file manager and is either being created (see isReadOnly) or\n is intended for update (see canSave).\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    }
  ]
}
