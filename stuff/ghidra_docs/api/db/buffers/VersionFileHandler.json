{
  "name": "VersionFileHandler",
  "comment": "VersionFileHandler allows a set of VersionFile\u0027s to be used in\n the dynamic reconstruction of an older BufferFile.  In an attempt to\n conserve file handles, only one VersionFile is held open at any point\n in time.\n \n When constructed, this handler determines the set of VersionFile\u0027s needed to \n reconstruct an older version from a specified target version.",
  "javadoc": "\u003ccode\u003eVersionFileHandler\u003c/code\u003e allows a set of VersionFile\u0027s to be used in\n the dynamic reconstruction of an older BufferFile.  In an attempt to\n conserve file handles, only one VersionFile is held open at any point\n in time.\n \u003cp\u003e\n When constructed, this handler determines the set of VersionFile\u0027s needed to \n reconstruct an older version from a specified target version.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "versionFiles",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.buffers.VersionFile[]",
      "type_short": "db.buffers.VersionFile[]",
      "constant_value": null
    },
    {
      "name": "openFileIx",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "bufferMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.IntIntHashtable",
      "type_short": "IntIntHashtable",
      "constant_value": null
    },
    {
      "name": "originalBufCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "maxBufCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "originalFileId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "freeIndexes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "origParms",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Hashtable\u003cjava.lang.String,java.lang.Integer\u003e",
      "type_short": "Hashtable",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a VersionFile handler.\n VersionFiles will be used to provide original BufferFile data\n for the version origVer.",
      "javadoc": "Construct a VersionFile handler.\n VersionFiles will be used to provide original BufferFile data\n for the version origVer.\n@param bf current buffer file which will use this version file\n handler to reconstruct an older version.\n@param targetFileId file ID of buffer file to which the version file\n buffers will be applied.\n@param targetVer version of target buffer file.\n@param origVer an older version number\n@throws IOException if an IO error occurs or data is missing",
      "static": false,
      "params": [
        {
          "name": "bfMgr",
          "type_long": "db.buffers.BufferFileManager",
          "type_short": "BufferFileManager",
          "comment": ""
        },
        {
          "name": "targetFileId",
          "type_long": "long",
          "type_short": "long",
          "comment": "file ID of buffer file to which the version file\n buffers will be applied."
        },
        {
          "name": "targetVer",
          "type_long": "int",
          "type_short": "int",
          "comment": "version of target buffer file."
        },
        {
          "name": "origVer",
          "type_long": "int",
          "type_short": "int",
          "comment": "an older version number"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs or data is missing"
        }
      ]
    },
    {
      "name": "close",
      "comment": "Close all file resources.",
      "javadoc": "Close all file resources.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOriginalFileID",
      "comment": "Returns file ID associated with original buffer file.",
      "javadoc": "Returns file ID associated with original buffer file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFreeIndexList",
      "comment": "Returns the list of free indexes associated with the original\n buffer file.",
      "javadoc": "Returns the list of free indexes associated with the original\n buffer file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVersionFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vfIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.buffers.VersionFile",
        "type_short": "VersionFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getOldBuffer",
      "comment": "Get original buffer associated with the specified storage index in the \n original file.",
      "javadoc": "Get original buffer associated with the specified storage index in the \n original file.\n@param buf data buffer\n@param index storage index\n@return data buffer or null if buffer is not empty and has not been modified\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "db.buffers.DataBuffer",
          "type_short": "DataBuffer",
          "comment": "data buffer"
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "storage index"
        }
      ],
      "return": {
        "type_long": "db.buffers.DataBuffer",
        "type_short": "DataBuffer",
        "comment": "data buffer or null if buffer is not empty and has not been modified"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getReverseModMapData",
      "comment": "Returns a bit map corresponding to all buffers modified since\n the original version (e.g., oldest).  This identifies all buffers within the target\n version (e.g., latest) which must be reverted to rebuild the original version.\n NOTE: The bit mask may identify buffers which have been removed in the current version.",
      "javadoc": "Returns a bit map corresponding to all buffers modified since\n the original version (e.g., oldest).  This identifies all buffers within the target\n version (e.g., latest) which must be reverted to rebuild the original version.\n NOTE: The bit mask may identify buffers which have been removed in the current version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getForwardModMapData",
      "comment": "Returns a bit map corresponding to all buffers modified since\n the original version (e.g., oldest).  This identifies all buffers contained within the original\n version (e.g., oldest) which have been modified during any revision up until the original version.\n NOTE: The bit mask may identify buffers which have been removed in the current version.",
      "javadoc": "Returns a bit map corresponding to all buffers modified since\n the original version (e.g., oldest).  This identifies all buffers contained within the original\n version (e.g., oldest) which have been modified during any revision up until the original version.\n NOTE: The bit mask may identify buffers which have been removed in the current version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMapDataBit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOriginalBufferCount",
      "comment": "Returns buffer count for original buffer file.",
      "javadoc": "Returns buffer count for original buffer file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOldParameterNames",
      "comment": "Returns a list of parameters defined within the original beffer file.",
      "javadoc": "Returns a list of parameters defined within the original beffer file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOldParameter",
      "comment": "Get a parameter value associated with the original buffer file.",
      "javadoc": "Get a parameter value associated with the original buffer file.\n@param name parameter name\n@return parameter value",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parameter name"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "parameter value"
      },
      "throws": []
    }
  ]
}
