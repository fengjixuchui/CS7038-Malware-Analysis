{
  "name": "BufferNode",
  "comment": "BufferNode is a DataBuffer wrapper which facilitates\n linking node into various lists and status tracking.  \n Linked lists supported, include:\n \n Buffer cache\n Buffer versions\n Checkpoint list\n ",
  "javadoc": "\u003ccode\u003eBufferNode\u003c/code\u003e is a DataBuffer wrapper which facilitates\n linking node into various lists and status tracking.  \n Linked lists supported, include:\n \u003cul\u003e\n \u003cli\u003eBuffer cache\u003c/li\u003e\n \u003cli\u003eBuffer versions\u003c/li\u003e\n \u003cli\u003eCheckpoint list\u003c/li\u003e\n \u003c/ul\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "nextCached",
      "comment": "Chain of buffers currently in memory cache",
      "javadoc": "Chain of buffers currently in memory cache",
      "static": false,
      "type_long": "db.buffers.BufferNode",
      "type_short": "BufferNode",
      "constant_value": null
    },
    {
      "name": "prevCached",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.buffers.BufferNode",
      "type_short": "BufferNode",
      "constant_value": null
    },
    {
      "name": "nextVersion",
      "comment": "Chain of buffers having the same buffer ID which \n have been modified.  Each version corresponds to a\n different checkpoint.",
      "javadoc": "Chain of buffers having the same buffer ID which \n have been modified.  Each version corresponds to a\n different checkpoint.",
      "static": false,
      "type_long": "db.buffers.BufferNode",
      "type_short": "BufferNode",
      "constant_value": null
    },
    {
      "name": "prevVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.buffers.BufferNode",
      "type_short": "BufferNode",
      "constant_value": null
    },
    {
      "name": "nextInCheckpoint",
      "comment": "Chain of buffers corresponding to a single checkpoint.",
      "javadoc": "Chain of buffers corresponding to a single checkpoint.",
      "static": false,
      "type_long": "db.buffers.BufferNode",
      "type_short": "BufferNode",
      "constant_value": null
    },
    {
      "name": "prevInCheckpoint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.buffers.BufferNode",
      "type_short": "BufferNode",
      "constant_value": null
    },
    {
      "name": "id",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "checkpoint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "buffer",
      "comment": "DataBuffer object reference.  Holds memory reference to buffer object.",
      "javadoc": "DataBuffer object reference.  Holds memory reference to buffer object.",
      "static": false,
      "type_long": "db.buffers.DataBuffer",
      "type_short": "DataBuffer",
      "constant_value": null
    },
    {
      "name": "diskCacheIndex",
      "comment": "DataBuffer index within disk cache.\n A value of -1 indicates that buffer has not yet been written to disk cache.",
      "javadoc": "DataBuffer index within disk cache.\n A value of -1 indicates that buffer has not yet been written to disk cache.",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "locked",
      "comment": "The locked flag is set true when the associated buffer has been\n given out for update.  When the buffer is released, locked is set\n false.",
      "javadoc": "The \u003ccode\u003elocked\u003c/code\u003e flag is set true when the associated buffer has been\n given out for update.  When the buffer is released, \u003ccode\u003elocked\u003c/code\u003e is set\n false.",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "empty",
      "comment": "The empty flag is set true when a buffer has been deleted and is\n available for re-use.  If false, the buffer has been allocated.",
      "javadoc": "The \u003ccode\u003eempty\u003c/code\u003e flag is set true when a buffer has been deleted and is\n available for re-use.  If false, the buffer has been allocated.",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "modified",
      "comment": "The modified flag is set true the first time it is modified\n relative to the source file.  Once a save occurs to a buffer file, this can\n be set false.  This flag remains false for original source buffers which\n are not modified.",
      "javadoc": "The \u003ccode\u003emodified\u003c/code\u003e flag is set true the first time it is modified\n relative to the source file.  Once a save occurs to a buffer file, this can\n be set false.  This flag remains false for original source buffers which\n are not modified.",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isDirty",
      "comment": "The isDirty flag indicates that the associated buffer has been\n modified since the last time it was written to the disk cache storage.\n Once re-written to the disk cache, this flag is set to false.",
      "javadoc": "The \u003ccode\u003eisDirty\u003c/code\u003e flag indicates that the associated buffer has been\n modified since the last time it was written to the disk cache storage.\n Once re-written to the disk cache, this flag is set to false.",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "snapshotTaken",
      "comment": "The snapshotTaken flags are used by the RecoveryMgr to track if a \n modified node has been written to the recovery file.",
      "javadoc": "The \u003ccode\u003esnapshotTaken\u003c/code\u003e flags are used by the RecoveryMgr to track if a \n modified node has been written to the recovery file.",
      "static": false,
      "type_long": "boolean[]",
      "type_short": "boolean[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a buffer node.",
      "javadoc": "Construct a buffer node.",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "checkpoint",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearSnapshotTaken",
      "comment": "Clear snapshotTaken flags so that node will be properly retained by the next recovery snapshot\n if necessary.",
      "javadoc": "Clear snapshotTaken flags so that node will be properly retained by the next recovery snapshot\n if necessary.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeFromCache",
      "comment": "Unlink this node from the Cache list",
      "javadoc": "Unlink this node from the Cache list",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addToCache",
      "comment": "Link this node to the top of the Cache list.",
      "javadoc": "Link this node to the top of the Cache list.\n@param cacheHead",
      "static": false,
      "params": [
        {
          "name": "cacheHead",
          "type_long": "db.buffers.BufferNode",
          "type_short": "BufferNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeFromCheckpoint",
      "comment": "Unlink this node from the Checkpoint list",
      "javadoc": "Unlink this node from the Checkpoint list",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addToCheckpoint",
      "comment": "Link this node to the top of the Checkpoint list.",
      "javadoc": "Link this node to the top of the Checkpoint list.\n@param checkpointHead",
      "static": false,
      "params": [
        {
          "name": "checkpointHead",
          "type_long": "db.buffers.BufferNode",
          "type_short": "BufferNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeFromVersion",
      "comment": "Unlink this node from the version list.",
      "javadoc": "Unlink this node from the version list.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addToVersion",
      "comment": "Link this node to the top of the version list.",
      "javadoc": "Link this node to the top of the version list.\n@param versionHead",
      "static": false,
      "params": [
        {
          "name": "versionHead",
          "type_long": "db.buffers.BufferNode",
          "type_short": "BufferNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
