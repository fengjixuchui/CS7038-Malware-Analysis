{
  "name": "BufferFile",
  "comment": "BufferFile facilitates read/write access to buffer oriented file.\n Access to related resources, such as parameters and change data, is also facilitated.",
  "javadoc": "\u003ccode\u003eBufferFile\u003c/code\u003e facilitates read/write access to buffer oriented file.\n Access to related resources, such as parameters and change data, is also facilitated.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "isReadOnly",
      "comment": "Returns true if this file may not be modified \n via the buffer put method.  \n A read-only file may be considered \"updateable\" if the canSave\n method returns true.  The term \"updateable\" means that a Save file\n can be obtained via the getSaveFile method.",
      "javadoc": "Returns true if this file may not be modified \n via the buffer put method.  \n A read-only file may be considered \"updateable\" if the canSave\n method returns true.  The term \"updateable\" means that a Save file\n can be obtained via the getSaveFile method.\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "setReadOnly",
      "comment": "If file is open read-write, the modified contents are flushed\n and the file re-opened as read-only.  This is also used to commit\n a new version if the file had been modified for update.",
      "javadoc": "If file is open read-write, the modified contents are flushed\n and the file re-opened as read-only.  This is also used to commit\n a new version if the file had been modified for update.\n@return true if successfully transitioned from read-write to read-only\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if successfully transitioned from read-write to read-only"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "getParameter",
      "comment": "Get a the stored value for a named parameter.",
      "javadoc": "Get a the stored value for a named parameter.\n@param name parameter name\n@return integer value\n@throws NoSuchElementException thrown if parameter not found\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parameter name"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "integer value"
      },
      "throws": [
        {
          "type_long": "java.util.NoSuchElementException",
          "type_short": "NoSuchElementException",
          "comment": "thrown if parameter not found"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setParameter",
      "comment": "Set the integer value for a named parameter.",
      "javadoc": "Set the integer value for a named parameter.\n@param name parameter name\n@param value parameter value\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parameter name"
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "parameter value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "clearParameters",
      "comment": "Deletes all parameters",
      "javadoc": "Deletes all parameters\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getParameterNames",
      "comment": "Returns a list of all parameter names.",
      "javadoc": "Returns a list of all parameter names.\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBufferSize",
      "comment": "Return the actual size of a user data buffer.  This value should be \n used when constructing DataBuffer objects.",
      "javadoc": "Return the actual size of a user data buffer.  This value should be \n used when constructing DataBuffer objects.\n@return DataBuffer data size as a number of bytes\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "DataBuffer data size as a number of bytes"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "getIndexCount",
      "comment": "Returns the number of allocated buffer indexes.\n When a new buffer is allocated, and the file size\n grows, the buffer will remain allocated although it\n may be added to the list of free-indexes.  A file will\n never shrink in size due to this permanent allocation.",
      "javadoc": "Returns the number of allocated buffer indexes.\n When a new buffer is allocated, and the file size\n grows, the buffer will remain allocated although it\n may be added to the list of free-indexes.  A file will\n never shrink in size due to this permanent allocation.\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFreeIndexes",
      "comment": "Returns the list of free indexes sorted by value.\n The management of the free-index-list is implementation\n specific.",
      "javadoc": "Returns the list of free indexes sorted by value.\n The management of the free-index-list is implementation\n specific.\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setFreeIndexes",
      "comment": "Sets the list of free buffer indexes.\n The management of the free-index-list is implementation\n specific.",
      "javadoc": "Sets the list of free buffer indexes.\n The management of the free-index-list is implementation\n specific.\n@param indexes\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "indexes",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "close",
      "comment": "Close the buffer file.  If the file was open for write access,\n all buffers are flushed and the file header updated.  Once closed,\n this object is immediately disposed and may no longer be used.",
      "javadoc": "Close the buffer file.  If the file was open for write access,\n all buffers are flushed and the file header updated.  Once closed,\n this object is immediately disposed and may no longer be used.\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "delete",
      "comment": "Delete this buffer file if writable.  Once deleted,\n this object is immediately disposed and may no longer be used.",
      "javadoc": "Delete this buffer file if writable.  Once deleted,\n this object is immediately disposed and may no longer be used.\n@return true if deleted, false if the file is read-only\n@throws IOException if an I/O error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if deleted, false if the file is read-only"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs."
        }
      ]
    },
    {
      "name": "dispose",
      "comment": "Dispose of this buffer file object.  If file is not readOnly\n and has not been closed, an attempt will be made to delete the\n associated file(s).  Once disposed, it may no longer be used.",
      "javadoc": "Dispose of this buffer file object.  If file is not readOnly\n and has not been closed, an attempt will be made to delete the\n associated file(s).  Once disposed, it may no longer be used.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "Get the specified buffer.\n DataBuffer data and flags are read from the file at index and \n stored within the supplied DataBuffer object.  If the read buffer\n is empty, the DataBuffer\u0027s data field will remain unchanged (which could be null).",
      "javadoc": "Get the specified buffer.\n DataBuffer data and flags are read from the file at index and \n stored within the supplied DataBuffer object.  If the read buffer\n is empty, the DataBuffer\u0027s data field will remain unchanged (which could be null).\n@param buf a buffer whose data array will be filled-in or replaced.\n@param index index of buffer to be read.  First user buffer\n is at index 0.\n@throws EOFException if the requested buffer index is greater \n than the number of available buffers of the end-of-file was\n encountered while reading the buffer.\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "db.buffers.DataBuffer",
          "type_short": "DataBuffer",
          "comment": "a buffer whose data array will be filled-in or replaced."
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of buffer to be read.  First user buffer\n is at index 0."
        }
      ],
      "return": {
        "type_long": "db.buffers.DataBuffer",
        "type_short": "DataBuffer",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "put",
      "comment": "Store a data buffer at the specified block index.",
      "javadoc": "Store a data buffer at the specified block index.\n@param buf data buffer\n@param index block index\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "db.buffers.DataBuffer",
          "type_short": "DataBuffer",
          "comment": "data buffer"
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "block index"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    }
  ]
}
