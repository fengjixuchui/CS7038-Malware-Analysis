{
  "name": "LocalRandomInputBlockStream",
  "comment": "LocalRandomInputBlockStream provides ability to\n selectively read a select set of buffers from the LocalBufferFile\n based upon a specified ChangeMap.",
  "javadoc": "\u003ccode\u003eLocalRandomInputBlockStream\u003c/code\u003e provides ability to\n selectively read a select set of buffers from the LocalBufferFile\n based upon a specified ChangeMap.",
  "static": false,
  "implements": [
    "db.buffers.InputBlockStream"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "bufferIndexList",
      "comment": "The bufferIndexList contains the DataBuffer indexes\n which are to be transferred.  Buffer index values plus 1 equal the \n file block index.",
      "javadoc": "The \u003ccode\u003ebufferIndexList\u003c/code\u003e contains the DataBuffer indexes\n which are to be transferred.  Buffer index values plus 1 equal the \n file block index.",
      "static": false,
      "type_long": "java.util.List\u003cjava.lang.Integer\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "nextIndex",
      "comment": "If the bufferIndexList is not null, this index identifies the next\n entry within the list whose block should be transferred, otherwise\n the index directly identifies the next DataBuffer to be transferred.",
      "javadoc": "If the bufferIndexList is not null, this index identifies the next\n entry within the list whose block should be transferred, otherwise\n the index directly identifies the next DataBuffer to be transferred.",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct input block stream for specific block indexes\n within the file based upon a changeMap.  The head buffer \n will never be included in the transfer.",
      "javadoc": "Construct input block stream for specific block indexes\n within the file based upon a changeMap.  The head buffer \n will never be included in the transfer.\n@param changeMapData ChangeMap data which is used in determining which \n buffers should be streamed\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "changeMapData",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "ChangeMap data which is used in determining which \n buffers should be streamed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "buildBufferIndexList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "changeMapData",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "includesHeaderBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBlockCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBlockSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.buffers.BufferFileBlock",
        "type_short": "BufferFileBlock",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
