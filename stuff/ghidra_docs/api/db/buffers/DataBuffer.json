{
  "name": "DataBuffer",
  "comment": "DataBuffer provides an accessible binary buffer\n for use with a BufferMgr and BufferFile.",
  "javadoc": "\u003ccode\u003eDataBuffer\u003c/code\u003e provides an accessible binary buffer\n for use with a BufferMgr and BufferFile.",
  "static": false,
  "implements": [
    "db.Buffer",
    "java.io.Externalizable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "serialVersionUID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "3"
    },
    {
      "name": "COMPRESSED_SERIAL_OUTPUT_PROPERTY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"db.buffers.DataBuffer.compressedOutput\""
    },
    {
      "name": "enableCompressedSerializationOutput",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "FORMAT_VERSION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "id",
      "comment": "NOTE: See custom serialization methods at bottom which implement compression.",
      "javadoc": "NOTE: See custom serialization methods at bottom which implement compression.",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "data",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "dirty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "empty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "enableCompressedSerializationOutput",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "enable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "usingCompressedSerializationOutput",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for de-serialization",
      "javadoc": "Constructor for de-serialization",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a data buffer.  A new binary buffer is created.",
      "javadoc": "Construct a data buffer.  A new binary buffer is created.\n@param bufsize buffer size",
      "static": false,
      "params": [
        {
          "name": "bufsize",
          "type_long": "int",
          "type_short": "int",
          "comment": "buffer size"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a data buffer.",
      "javadoc": "Construct a data buffer.\n@param data binary storage array for this buffer.",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "binary storage array for this buffer."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getData",
      "comment": "Get the storage array associated with this buffer.",
      "javadoc": "Get the storage array associated with this buffer.\n@return byte storage array.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "byte storage array."
      },
      "throws": []
    },
    {
      "name": "setData",
      "comment": "Get the storage array associated with this buffer.",
      "javadoc": "Get the storage array associated with this buffer.",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getId",
      "comment": "Get the ID associated with this buffer.",
      "javadoc": "Get the ID associated with this buffer.\n@return buffer ID.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "buffer ID."
      },
      "throws": []
    },
    {
      "name": "setId",
      "comment": "Set the ID associated with this buffer.",
      "javadoc": "Set the ID associated with this buffer.\n@param id buffer ID",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "int",
          "type_short": "int",
          "comment": "buffer ID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isDirty",
      "comment": "Return true if this buffer contains modified data.\n When this buffer is released to the BufferMgr, the data is consumed and \n this flag reset to false.",
      "javadoc": "Return true if this buffer contains modified data.\n When this buffer is released to the BufferMgr, the data is consumed and \n this flag reset to false.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDirty",
      "comment": "Set the dirty flag.",
      "javadoc": "Set the dirty flag.\n@param state flag state.",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "flag state."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "Return true if this buffer is empty/unused.  Writing to empty buffer\n does not change the state of this flag.",
      "javadoc": "Return true if this buffer is empty/unused.  Writing to empty buffer\n does not change the state of this flag.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setEmpty",
      "comment": "Set the empty flag.",
      "javadoc": "Set the empty flag.\n@param state flag state",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "flag state"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "dataOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.ArrayIndexOutOfBoundsException",
          "type_short": "ArrayIndexOutOfBoundsException",
          "comment": ""
        }
      ]
    },
    {
      "name": "get",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.ArrayIndexOutOfBoundsException",
          "type_short": "ArrayIndexOutOfBoundsException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getByte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getShort",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLong",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "put",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "dataOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "put",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putByte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putInt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "v",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putShort",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "v",
          "type_long": "short",
          "type_short": "short",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putLong",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "v",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Sets all the values in the buffer to 0;",
      "javadoc": "Sets all the values in the buffer to 0;",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "move",
      "comment": "Move the data within this buffer.",
      "javadoc": "Move the data within this buffer.\n@param src source offset within this buffer\n@param dest destination offset within this buffer\n@param length length of data to be moved\n@throws ArrayIndexOutOfBoundsException is thrown if parameters result in\n data access beyond the buffer size.",
      "static": false,
      "params": [
        {
          "name": "src",
          "type_long": "int",
          "type_short": "int",
          "comment": "source offset within this buffer"
        },
        {
          "name": "dest",
          "type_long": "int",
          "type_short": "int",
          "comment": "destination offset within this buffer"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "length of data to be moved"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "Copy data from another buffer into this buffer.",
      "javadoc": "Copy data from another buffer into this buffer.\n@param offset offset within this buffer.\n@param buf source buffer\n@param bufOffset source buffer offset\n@param length amount of data to copy.\n@throws ArrayIndexOutOfBoundsException is thrown if parameters result in\n data access beyond the buffer size.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset within this buffer."
        },
        {
          "name": "buf",
          "type_long": "db.buffers.DataBuffer",
          "type_short": "DataBuffer",
          "comment": "source buffer"
        },
        {
          "name": "bufOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "source buffer offset"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "amount of data to copy."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "writeExternal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.io.ObjectOutput",
          "type_short": "ObjectOutput",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "deflateData",
      "comment": "Deflate data into compressedData array.  Both arrays must have equal lengths.",
      "javadoc": "Deflate data into compressedData array.  Both arrays must have equal lengths.\n@param data\n@param compressedData\n@return length of compressed data within the compressedData array, or -1 if \n unable to compress.",
      "static": true,
      "params": [
        {
          "name": "data",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "compressedData",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "length of compressed data within the compressedData array, or -1 if \n unable to compress."
      },
      "throws": []
    },
    {
      "name": "readExternal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "in",
          "type_long": "java.io.ObjectInput",
          "type_short": "ObjectInput",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "java.lang.ClassNotFoundException",
          "type_short": "ClassNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "unsignedCompareTo",
      "comment": "Perform an unsigned data comparison",
      "javadoc": "Perform an unsigned data comparison\n@param otherData other data to be compared\n@param offset offset within this buffer\n@param len length of data within this buffer\n@return unsigned comparison result\n@throws ArrayIndexOutOfBoundsException if specified region is not \n contained within this buffer.",
      "static": false,
      "params": [
        {
          "name": "otherData",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "other data to be compared"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset within this buffer"
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "length of data within this buffer"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "unsigned comparison result"
      },
      "throws": []
    },
    {
      "name": "inflateData",
      "comment": "Inflate compressedData into a properly sized data array.",
      "javadoc": "Inflate compressedData into a properly sized data array.\n@param compressedData array containing compressed data\n@param data target data array size to receive fully inflated data.\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "compressedData",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array containing compressed data"
        },
        {
          "name": "data",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "target data array size to receive fully inflated data."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
