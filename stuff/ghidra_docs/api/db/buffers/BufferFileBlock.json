{
  "name": "BufferFileBlock",
  "comment": "BufferFileBlock is used to hold BufferFile blocks \n for use during block streaming operations.\n   \n Block indexes are absolute where 0 corresponds\n to the head block in the BufferFile.  It is important to note that \n this number is off by 1 from DataBuffer numbering and the index values\n utilized by BufferFile#getIndexCount(), BufferFile#get(DataBuffer, int),\n BufferFile#put(DataBuffer, int), etc..  It is important for\n each implementation to normalize to absolute block indexes.",
  "javadoc": "\u003ccode\u003eBufferFileBlock\u003c/code\u003e is used to hold BufferFile blocks \n for use during block streaming operations.\n \u003cp\u003e  \n Block indexes are absolute where 0 corresponds\n to the head block in the BufferFile.  It is important to note that \n this number is off by 1 from DataBuffer numbering and the index values\n utilized by {@link BufferFile#getIndexCount()}, {@link BufferFile#get(DataBuffer, int)},\n {@link BufferFile#put(DataBuffer, int)}, etc..  It is important for\n each implementation to normalize to absolute block indexes.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "blockIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "buffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "BufferFileBlock constructor",
      "javadoc": "BufferFileBlock constructor\n@param blockIndex block index\n@param buffer block buffer (size must match block-size for associated buffer file)",
      "static": false,
      "params": [
        {
          "name": "blockIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "block index"
        },
        {
          "name": "buffer",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "block buffer (size must match block-size for associated buffer file)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "BufferFileBlock constructor for use when reconstructing instance\n from block stream",
      "javadoc": "BufferFileBlock constructor for use when reconstructing instance\n from block stream\n@param bytes buffer data received from block stream.  Buffer index will be\n determined by first 4-bytes contained within the bytes array (big-endian).",
      "static": false,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "buffer data received from block stream.  Buffer index will be\n determined by first 4-bytes contained within the bytes array (big-endian)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "Get block size",
      "javadoc": "Get block size\n@return block size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "block size"
      },
      "throws": []
    },
    {
      "name": "getIndex",
      "comment": "Get absolute block index, where 0 corresponds to the first \n physical block within the buffer file.",
      "javadoc": "Get absolute block index, where 0 corresponds to the first \n physical block within the buffer file.\n@return block index",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "block index"
      },
      "throws": []
    },
    {
      "name": "getData",
      "comment": "Get block data buffer",
      "javadoc": "Get block data buffer\n@return block data buffer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "block data buffer"
      },
      "throws": []
    },
    {
      "name": "toBytes",
      "comment": "Get block as byte array suitable for use in block stream and\n reconstruction.",
      "javadoc": "Get block as byte array suitable for use in block stream and\n reconstruction.\n@return block as byte array",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "block as byte array"
      },
      "throws": []
    }
  ]
}
