{
  "name": "IndexProvider",
  "comment": "IndexProvider maintains the free index list associated\n with a BufferFile.  This provider will exhaust the free index list\n before allocating new indexes.  This provider relies on the BufferFile\n growing automatically when buffers having indexes beyond the end-of-file \n are written.",
  "javadoc": "\u003ccode\u003eIndexProvider\u003c/code\u003e maintains the free index list associated\n with a BufferFile.  This provider will exhaust the free index list\n before allocating new indexes.  This provider relies on the BufferFile\n growing automatically when buffers having indexes beyond the end-of-file \n are written.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "nextIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "freeIndexStack",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Stack\u003cjava.lang.Integer\u003e",
      "type_short": "Stack",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for empty BufferFile.",
      "javadoc": "Constructor for empty BufferFile.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor with initial state.",
      "javadoc": "Constructor with initial state.\n@param indexCount previously allocated buffer count.\n@param freeIndexes list of free buffer indexes.",
      "static": false,
      "params": [
        {
          "name": "indexCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "previously allocated buffer count."
        },
        {
          "name": "freeIndexes",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "list of free buffer indexes."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIndexCount",
      "comment": "Return the total number of buffer indexes which have been allocated.",
      "javadoc": "Return the total number of buffer indexes which have been allocated.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFreeIndexCount",
      "comment": "Returns the number of free indexes within the\n allocated index space.",
      "javadoc": "Returns the number of free indexes within the\n allocated index space.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "allocateIndex",
      "comment": "Allocate a new buffer index.  Exhaust free list before\n increasing total index count.",
      "javadoc": "Allocate a new buffer index.  Exhaust free list before\n increasing total index count.\n@return assigned index",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "assigned index"
      },
      "throws": []
    },
    {
      "name": "allocateIndex",
      "comment": "Allocate a specific index.  Current index count will be adjusted if\n specified index exceeds current index count;",
      "javadoc": "Allocate a specific index.  Current index count will be adjusted if\n specified index exceeds current index count;\n@param index requested index\n@return true if index was successfully allocated",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "requested index"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if index was successfully allocated"
      },
      "throws": []
    },
    {
      "name": "isFree",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "freeIndex",
      "comment": "Free the specified buffer",
      "javadoc": "Free the specified buffer\n@param index buffer index",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "buffer index"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "truncate",
      "comment": "Truncate this buffer file.  This method has no affect if the specified \n newBufferCnt is greater than the current buffer count.",
      "javadoc": "Truncate this buffer file.  This method has no affect if the specified \n newBufferCnt is greater than the current buffer count.\n@param newIndexCnt new index count\n@return true if successful, false if newIndexCnt is larger than current \n index count.",
      "static": false,
      "params": [
        {
          "name": "newIndexCnt",
          "type_long": "int",
          "type_short": "int",
          "comment": "new index count"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if successful, false if newIndexCnt is larger than current \n index count."
      },
      "throws": []
    },
    {
      "name": "getFreeIndexes",
      "comment": "Returns the current list of free indexes for this index provider.",
      "javadoc": "Returns the current list of free indexes for this index provider.\n@return free index list",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "free index list"
      },
      "throws": []
    }
  ]
}
