{
  "name": "BinaryCodedField",
  "comment": "Allows various non-database supported data types to be\n encoded within a BinaryField which may be stored within the\n database.\n \n Although the BinaryField stores a byte array, this type\n is supported by this class so that the use of a BinaryField\n within a table can always relate to this class and still\n support a byte array.",
  "javadoc": "Allows various non-database supported data types to be\n encoded within a BinaryField which may be stored within the\n database.\n \u003cp\u003e\n Although the BinaryField stores a byte array, this type\n is supported by this class so that the use of a BinaryField\n within a table can always relate to this class and still\n support a byte array.",
  "static": false,
  "implements": [],
  "extends": "db.BinaryField",
  "fields": [
    {
      "name": "BYTE_ARRAY",
      "comment": "byte[] data type",
      "javadoc": "byte[] data type",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "0"
    },
    {
      "name": "FLOAT",
      "comment": "float data type",
      "javadoc": "float data type",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "1"
    },
    {
      "name": "DOUBLE",
      "comment": "double data type",
      "javadoc": "double data type",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "2"
    },
    {
      "name": "SHORT_ARRAY",
      "comment": "short data type",
      "javadoc": "short data type",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "3"
    },
    {
      "name": "INT_ARRAY",
      "comment": "int[] data type",
      "javadoc": "int[] data type",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "4"
    },
    {
      "name": "LONG_ARRAY",
      "comment": "long[] data type",
      "javadoc": "long[] data type",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "5"
    },
    {
      "name": "FLOAT_ARRAY",
      "comment": "float[] data type",
      "javadoc": "float[] data type",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "6"
    },
    {
      "name": "DOUBLE_ARRAY",
      "comment": "double[] data type",
      "javadoc": "double[] data type",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "7"
    },
    {
      "name": "STRING_ARRAY",
      "comment": "String[] data type",
      "javadoc": "String[] data type",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "8"
    },
    {
      "name": "DATA_TYPE_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "DATA_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "STRING_ENCODING",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"UTF-8\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Default constructor",
      "javadoc": "Default constructor",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a coded field from an existing binary field.",
      "javadoc": "Construct a coded field from an existing binary field.\n@param binField the binary field",
      "static": false,
      "params": [
        {
          "name": "binField",
          "type_long": "db.BinaryField",
          "type_short": "BinaryField",
          "comment": "the binary field"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a coded field from a double value.",
      "javadoc": "Construct a coded field from a double value.\n@param value the double value",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "double",
          "type_short": "double",
          "comment": "the double value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a coded field from a float value.",
      "javadoc": "Construct a coded field from a float value.\n@param value the float value",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "float",
          "type_short": "float",
          "comment": "the float value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a coded field from a byte array.",
      "javadoc": "Construct a coded field from a byte array.\n@param values byte array",
      "static": false,
      "params": [
        {
          "name": "values",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a coded field from a short array.",
      "javadoc": "Construct a coded field from a short array.\n@param values short array",
      "static": false,
      "params": [
        {
          "name": "values",
          "type_long": "short[]",
          "type_short": "short[]",
          "comment": "short array"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a coded field from a int array.",
      "javadoc": "Construct a coded field from a int array.\n@param values int array",
      "static": false,
      "params": [
        {
          "name": "values",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "int array"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a coded field from a long array.",
      "javadoc": "Construct a coded field from a long array.\n@param values long array",
      "static": false,
      "params": [
        {
          "name": "values",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": "long array"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a coded field from a float array.",
      "javadoc": "Construct a coded field from a float array.\n@param values float array",
      "static": false,
      "params": [
        {
          "name": "values",
          "type_long": "float[]",
          "type_short": "float[]",
          "comment": "float array"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a coded field from a double array.",
      "javadoc": "Construct a coded field from a double array.\n@param values double array",
      "static": false,
      "params": [
        {
          "name": "values",
          "type_long": "double[]",
          "type_short": "double[]",
          "comment": "double array"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a coded field from a String array.",
      "javadoc": "Construct a coded field from a String array.\n@param strings String array",
      "static": false,
      "params": [
        {
          "name": "strings",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "String array"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "Get the data type associated with this field.",
      "javadoc": "Get the data type associated with this field.\n@return data type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "data type"
      },
      "throws": []
    },
    {
      "name": "getDoubleValue",
      "comment": "Get the double value contained with this field.",
      "javadoc": "Get the double value contained with this field.\n@return double value\n@throws IllegalFieldAccessException if data type is not DOUBLE.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": "double value"
      },
      "throws": []
    },
    {
      "name": "getFloatValue",
      "comment": "Get the float value contained with this field.",
      "javadoc": "Get the float value contained with this field.\n@return float value\n@throws IllegalFieldAccessException if data type is not FLOAT.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "float",
        "type_short": "float",
        "comment": "float value"
      },
      "throws": []
    },
    {
      "name": "getByteArray",
      "comment": "Get the byte array contained with this field.",
      "javadoc": "Get the byte array contained with this field.\n@return byte array\n@throws IllegalFieldAccessException if data type is not BYTE_ARRAY.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "byte array"
      },
      "throws": []
    },
    {
      "name": "getShortArray",
      "comment": "Get the short array contained with this field.",
      "javadoc": "Get the short array contained with this field.\n@return short array\n@throws IllegalFieldAccessException if data type is not SHORT_ARRAY.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short[]",
        "type_short": "short[]",
        "comment": "short array"
      },
      "throws": []
    },
    {
      "name": "getIntArray",
      "comment": "Get the int array contained with this field.",
      "javadoc": "Get the int array contained with this field.\n@return int array\n@throws IllegalFieldAccessException if data type is not INT_ARRAY.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "int array"
      },
      "throws": []
    },
    {
      "name": "getLongArray",
      "comment": "Get the long array contained with this field.",
      "javadoc": "Get the long array contained with this field.\n@return long array\n@throws IllegalFieldAccessException if data type is not LONG_ARRAY.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long[]",
        "type_short": "long[]",
        "comment": "long array"
      },
      "throws": []
    },
    {
      "name": "getFloatArray",
      "comment": "Get the float array contained with this field.",
      "javadoc": "Get the float array contained with this field.\n@return float array\n@throws IllegalFieldAccessException if data type is not FLOAT_ARRAY.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "float[]",
        "type_short": "float[]",
        "comment": "float array"
      },
      "throws": []
    },
    {
      "name": "getDoubleArray",
      "comment": "Get the double array contained with this field.",
      "javadoc": "Get the double array contained with this field.\n@return double array\n@throws IllegalFieldAccessException if data type is not DOUBLE_ARRAY.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "double[]",
        "type_short": "double[]",
        "comment": "double array"
      },
      "throws": []
    },
    {
      "name": "getStringArray",
      "comment": "Get the String array contained with this field.",
      "javadoc": "Get the String array contained with this field.\n@return String array\n@throws IllegalFieldAccessException if data type is not STRING_ARRAY.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "String array"
      },
      "throws": []
    }
  ]
}
