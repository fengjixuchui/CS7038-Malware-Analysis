{
  "name": "IndexFieldIterator",
  "comment": "Iterates over index field values within a specified range.\n NOTE: Index fields which have been truncated may be returned out of order.",
  "javadoc": "Iterates over index field values within a specified range.\n NOTE: Index fields which have been truncated may be returned out of order.",
  "static": false,
  "implements": [
    "db.DBFieldIterator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "min",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.IndexField",
      "type_short": "IndexField",
      "constant_value": null
    },
    {
      "name": "max",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.IndexField",
      "type_short": "IndexField",
      "constant_value": null
    },
    {
      "name": "lastKey",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.IndexField",
      "type_short": "IndexField",
      "constant_value": null
    },
    {
      "name": "indexKey",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.IndexField",
      "type_short": "IndexField",
      "constant_value": null
    },
    {
      "name": "indexIterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.DBFieldIterator",
      "type_short": "DBFieldIterator",
      "constant_value": null
    },
    {
      "name": "hasNext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "hasPrev",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an index field iterator starting with the minimum index value.",
      "javadoc": "Construct an index field iterator starting with the minimum index value.\n@throws IOException an IO error occurred",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "an IO error occurred"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an index field iterator.",
      "javadoc": "Construct an index field iterator.\n@param minValue minimum index value or null if no minimum\n@param maxValue maximum index value or null if no maximum\n@param before if true initial position is before minValue, else position\n after maxValue\n@throws IOException an IO error occurred",
      "static": false,
      "params": [
        {
          "name": "minValue",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "minimum index value or null if no minimum"
        },
        {
          "name": "maxValue",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "maximum index value or null if no maximum"
        },
        {
          "name": "before",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true initial position is before minValue, else position\n after maxValue"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "an IO error occurred"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an index field iterator.  The iterator is positioned at index\n value identified by startValue.",
      "javadoc": "Construct an index field iterator.  The iterator is positioned at index\n value identified by startValue.\n@param minValue minimum index value or null if no minimum\n@param maxValue maximum index value or null if no maximum\n@param startValue initial index value position\n@param before if true initial position is before minValue, else position\n after maxValue\n@throws IOException an IO error occurred",
      "static": false,
      "params": [
        {
          "name": "minValue",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "minimum index value or null if no minimum"
        },
        {
          "name": "maxValue",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "maximum index value or null if no maximum"
        },
        {
          "name": "startValue",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "initial index value position"
        },
        {
          "name": "before",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true initial position is before minValue, else position\n after maxValue"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "an IO error occurred"
        }
      ]
    },
    {
      "name": "hasNext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "hasPrevious",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "next",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.Field",
        "type_short": "Field",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "previous",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.Field",
        "type_short": "Field",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "delete",
      "comment": "Delete all primary records which have the current\n index value (lastKey).",
      "javadoc": "Delete all primary records which have the current\n index value (lastKey).\n@see db.DBFieldIterator#delete()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
