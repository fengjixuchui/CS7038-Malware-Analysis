{
  "name": "FieldKeyNode",
  "comment": "FieldKeyNode defines a common interface for BTreeNode \n implementations which utilize a Field key.",
  "javadoc": "\u003ccode\u003eFieldKeyNode\u003c/code\u003e defines a common interface for {@link BTreeNode} \n implementations which utilize a {@link Field} key.",
  "static": false,
  "implements": [
    "db.BTreeNode"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getParent",
      "comment": "",
      "javadoc": "@return the parent node or null if this is the root",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.FieldKeyInteriorNode",
        "type_short": "FieldKeyInteriorNode",
        "comment": "the parent node or null if this is the root"
      },
      "throws": []
    },
    {
      "name": "getLeafNode",
      "comment": "Get the leaf node which contains the specified key.",
      "javadoc": "Get the leaf node which contains the specified key.\n@param key key value\n@return leaf node\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "key value"
        }
      ],
      "return": {
        "type_long": "db.FieldKeyRecordNode",
        "type_short": "FieldKeyRecordNode",
        "comment": "leaf node"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    },
    {
      "name": "getLeftmostLeafNode",
      "comment": "Get the left-most leaf node within the tree.",
      "javadoc": "Get the left-most leaf node within the tree.\n@return left-most leaf node.\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.FieldKeyRecordNode",
        "type_short": "FieldKeyRecordNode",
        "comment": "left-most leaf node."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "getRightmostLeafNode",
      "comment": "Get the right-most leaf node within the tree.",
      "javadoc": "Get the right-most leaf node within the tree.\n@return right-most leaf node.\n@throws IOException thrown if IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.FieldKeyRecordNode",
        "type_short": "FieldKeyRecordNode",
        "comment": "right-most leaf node."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs"
        }
      ]
    },
    {
      "name": "compareKeyField",
      "comment": "Performs a fast in-place key comparison of the specified key\n value with a key stored within this node at the specified keyIndex.",
      "javadoc": "Performs a fast in-place key comparison of the specified key\n value with a key stored within this node at the specified keyIndex.\n@param k key value to be compared\n@param keyIndex key index to another key within this node\u0027s buffer\n@return comparison value, zero if equal, -1 if k has a value less than\n the store key, or +1 if k has a value greater than the stored key located\n at keyIndex.",
      "static": false,
      "params": [
        {
          "name": "k",
          "type_long": "db.Field",
          "type_short": "Field",
          "comment": "key value to be compared"
        },
        {
          "name": "keyIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "key index to another key within this node\u0027s buffer"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "comparison value, zero if equal, -1 if k has a value less than\n the store key, or +1 if k has a value greater than the stored key located\n at keyIndex."
      },
      "throws": []
    }
  ]
}
