{
  "name": "RecordIterator",
  "comment": "RecordIterator provides the ability to iterate over\n data records within a table.",
  "javadoc": "\u003ccode\u003eRecordIterator\u003c/code\u003e provides the ability to iterate over\n data records within a table.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "hasNext",
      "comment": "Return true if a Record is available in the forward direction.",
      "javadoc": "Return true if a Record is available in the forward direction.\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    },
    {
      "name": "hasPrevious",
      "comment": "Return true if a Record is available in the reverse direction",
      "javadoc": "Return true if a Record is available in the reverse direction\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    },
    {
      "name": "next",
      "comment": "Return the nexy Record or null if one is not available.",
      "javadoc": "Return the nexy Record or null if one is not available.\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    },
    {
      "name": "previous",
      "comment": "Return the previous Record or null if one is not available.",
      "javadoc": "Return the previous Record or null if one is not available.\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    },
    {
      "name": "delete",
      "comment": "Delete the last Record read via the next or previous methods.",
      "javadoc": "Delete the last Record read via the next or previous methods.\n@return true if record was successfully deleted.\n@throws IOException thrown if an IO error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if record was successfully deleted."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs."
        }
      ]
    }
  ]
}
