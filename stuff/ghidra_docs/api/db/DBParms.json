{
  "name": "DBParms",
  "comment": "DBParms manages 4-byte integer parameters associated with a database \n and stored as the first buffer (ID 0) in the buffer file.  The maximum number of \n parameters is determined by the .",
  "javadoc": "\u003ccode\u003eDBParms\u003c/code\u003e manages 4-byte integer parameters associated with a database \n and stored as the first buffer (ID 0) in the buffer file.  The maximum number of \n parameters is determined by the .",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "MASTER_TABLE_ROOT_BUFFER_ID_PARM",
      "comment": "Parameter number for the Master Table Root Buffer ID",
      "javadoc": "Parameter number for the Master Table Root Buffer ID",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "DATABASE_ID_HIGH_PARM",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "DATABASE_ID_LOW_PARM",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "NODE_TYPE_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "DATA_LENGTH_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "VERSION_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "NODE_TYPE_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "DATA_LENGTH_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "VERSION_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "PARM_BASE_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "VERSION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "1"
    },
    {
      "name": "bufferMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.buffers.BufferMgr",
      "type_short": "BufferMgr",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "cache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.IntIntHashtable",
      "type_short": "IntIntHashtable",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new or existing parameter buffer.",
      "javadoc": "Construct a new or existing parameter buffer.\n@param bufferMgr buffer manager\n@param create if true storage buffers will be allocated with the bufferMgr.\n This must be the first buffer allocation - if buffer 0 is not available\n a runtime exception will be thrown.\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "bufferMgr",
          "type_long": "db.buffers.BufferMgr",
          "type_short": "BufferMgr",
          "comment": "buffer manager"
        },
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true storage buffers will be allocated with the bufferMgr.\n This must be the first buffer allocation - if buffer 0 is not available\n a runtime exception will be thrown."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getOffset",
      "comment": "Get the buffer offset for a specified parameter",
      "javadoc": "Get the buffer offset for a specified parameter\n@param parm parameter number\n@return parameter offset",
      "static": true,
      "params": [
        {
          "name": "parm",
          "type_long": "int",
          "type_short": "int",
          "comment": "parameter number"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "parameter offset"
      },
      "throws": []
    },
    {
      "name": "poke",
      "comment": "Poke a modified DBParam into a database buffer file.\n WARNING! Use with extreme caution since this immediately modifies\n the original file in-place and could destroy data if used\n improperly.",
      "javadoc": "Poke a modified DBParam into a database buffer file.\n WARNING! Use with extreme caution since this immediately modifies\n the original file in-place and could destroy data if used\n improperly.\n@param file\n@param parm\n@param value\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "parm",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "storeParm",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "parm",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "buffer",
          "type_long": "db.buffers.DataBuffer",
          "type_short": "DataBuffer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "set",
      "comment": "Set a parameter value.  If parameter space is expanded to accommodate this \n parameter, all allocated parameters will be initialized to -1",
      "javadoc": "Set a parameter value.  If parameter space is expanded to accommodate this \n parameter, all allocated parameters will be initialized to -1\n@param parm parameter number\n@param value parameter value\n@throws IOException thrown if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "parm",
          "type_long": "int",
          "type_short": "int",
          "comment": "parameter number"
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "parameter value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        }
      ]
    },
    {
      "name": "get",
      "comment": "Get a parameter value",
      "javadoc": "Get a parameter value\n@param parm parameter number\n@return parameter value\n@throws IOException thrown if an IO error occurs\n@throws ArrayIndexOutOfBoundsException if index outside of allocated\n parameter space.",
      "static": false,
      "params": [
        {
          "name": "parm",
          "type_long": "int",
          "type_short": "int",
          "comment": "parameter number"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "parameter value"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs"
        },
        {
          "type_long": "java.lang.ArrayIndexOutOfBoundsException",
          "type_short": "ArrayIndexOutOfBoundsException",
          "comment": "if index outside of allocated\n parameter space."
        }
      ]
    },
    {
      "name": "refresh",
      "comment": "Refresh parameters from an existing parameter buffer.",
      "javadoc": "Refresh parameters from an existing parameter buffer.\n@throws IOException thrown if an IO error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs."
        }
      ]
    }
  ]
}
