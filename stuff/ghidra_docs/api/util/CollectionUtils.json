{
  "name": "CollectionUtils",
  "comment": "A collection of utility methods that prevent you from having to do unsafe casts of\n Collection classes due to runtime type erasure.\n \n Be sure to check Apache collection utils before using this class, as it\u0027s a \n standard utility and often more efficient.\n \n Some examples:\n \n  org.apache.commons.collections4.CollectionUtils\n  IterableUtils\n  IteratorUtils\n  StringUtils#join(Iterable, char) - for pretty printing collections with newlines\n  Apache CollectionUtils.collect(Collection, Transformer) - to turn a \n      collection in to collection of strings when the default toString() is lacking\n ",
  "javadoc": "A collection of utility methods that prevent you from having to do unsafe casts of\n {@link Collection} classes due to runtime type erasure.\n \n \u003cP\u003eBe sure to check Apache collection utils before using this class, as it\u0027s a \n standard utility and often more efficient.\n \n \u003cP\u003eSome examples:\n \u003cOL\u003e\n  \u003cLI\u003e{@link org.apache.commons.collections4.CollectionUtils}\u003c/LI\u003e\n  \u003cLI\u003e{@link IterableUtils}\u003c/LI\u003e\n  \u003cLI\u003e{@link IteratorUtils}\u003c/LI\u003e\n  \u003cLI\u003e{@link StringUtils#join(Iterable, char)} - for pretty printing collections with newlines\u003c/LI\u003e\n  \u003cLI\u003e\u003ccode\u003eApache CollectionUtils.collect(Collection, Transformer)\u003c/code\u003e - to turn a \n      collection in to collection of strings when the default \u003ccode\u003etoString()\u003c/code\u003e is lacking\u003c/LI\u003e\n \u003c/OL\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "asSet",
      "comment": "Turns the given items into a set.  If there is only a single item and it is null, then\n an empty set will be returned.",
      "javadoc": "Turns the given items into a set.  If there is only a single item and it is null, then\n an empty set will be returned.\n@param items the items to put in the set\n@return the list of items",
      "static": true,
      "params": [
        {
          "name": "items",
          "type_long": "T[]",
          "type_short": "T[]",
          "comment": "the items to put in the set"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cT\u003e",
        "type_short": "Set",
        "comment": "the list of items"
      },
      "throws": []
    },
    {
      "name": "asSet",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.util.Collection\u003cT\u003e",
          "type_short": "Collection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cT\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "asSet",
      "comment": "Drains the given iterator into a new Set",
      "javadoc": "Drains the given iterator into a new Set\n@param it the iterator\n@return the set",
      "static": true,
      "params": [
        {
          "name": "it",
          "type_long": "java.util.Iterator\u003cT\u003e",
          "type_short": "Iterator",
          "comment": "the iterator"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cT\u003e",
        "type_short": "Set",
        "comment": "the set"
      },
      "throws": []
    },
    {
      "name": "asSet",
      "comment": "Turns the given iterable into a new Set, returning it directly if it is a set, draining\n it into a set if it is not already.",
      "javadoc": "Turns the given iterable into a new Set, returning it directly if it is a set, draining\n it into a set if it is not already.\n@param iterable the iterable\n@return the set",
      "static": true,
      "params": [
        {
          "name": "iterable",
          "type_long": "java.lang.Iterable\u003cT\u003e",
          "type_short": "Iterable",
          "comment": "the iterable"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cT\u003e",
        "type_short": "Set",
        "comment": "the set"
      },
      "throws": []
    },
    {
      "name": "asList",
      "comment": "Similar to Arrays#asList(Object...), except that this method will turn a single\n null parameter into an empty list.  Also, this method creates a new, mutable array, \n whereas the former\u0027s array is not mutable.",
      "javadoc": "Similar to {@link Arrays#asList(Object...)}, except that this method will turn a single\n null parameter into an empty list.  Also, this method creates a new, mutable array, \n whereas the former\u0027s array is not mutable.\n@param items the items to add to the list\n@return the list",
      "static": true,
      "params": [
        {
          "name": "items",
          "type_long": "T[]",
          "type_short": "T[]",
          "comment": "the items to add to the list"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": "the list"
      },
      "throws": []
    },
    {
      "name": "asList",
      "comment": "Returns the given list if not null, otherwise returns an empty list. This is\n useful for clients avoid null checks.",
      "javadoc": "Returns the given list if not null, otherwise returns an empty list. This is\n useful for clients avoid null checks.\n@param list the list to check\n@return a non-null collection",
      "static": true,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cT\u003e",
          "type_short": "List",
          "comment": "the list to check"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": "a non-null collection"
      },
      "throws": []
    },
    {
      "name": "asList",
      "comment": "A convenient way to check for null and whether the given collection is a List.\n If the value is a list, then it is returned.  If the value is null, an empty list is\n returned.  Otherwise, a new list is created from the given collection.",
      "javadoc": "A convenient way to check for null and whether the given collection is a {@link List}.\n If the value is a list, then it is returned.  If the value is null, an empty list is\n returned.  Otherwise, a new list is created from the given collection.\n@param c the collection to check\n@return a list",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.util.Collection\u003cT\u003e",
          "type_short": "Collection",
          "comment": "the collection to check"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": "a list"
      },
      "throws": []
    },
    {
      "name": "nonNull",
      "comment": "Returns the given collection if not null, an empty collection (a Set) otherwise.  This is\n useful for clients avoid null checks.",
      "javadoc": "Returns the given collection if not null, an empty collection (a Set) otherwise.  This is\n useful for clients avoid null checks.\n@param c the collection to check\n@return a non-null collection",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.util.Collection\u003cT\u003e",
          "type_short": "Collection",
          "comment": "the collection to check"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cT\u003e",
        "type_short": "Collection",
        "comment": "a non-null collection"
      },
      "throws": []
    },
    {
      "name": "asCollection",
      "comment": "Returns the given collection if not null, an empty collection otherwise.  This is\n useful for clients avoid null checks.",
      "javadoc": "Returns the given collection if not null, an empty collection otherwise.  This is\n useful for clients avoid null checks.\n@param c the collection to check\n@return a non-null collection",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.util.Collection\u003cT\u003e",
          "type_short": "Collection",
          "comment": "the collection to check"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cT\u003e",
        "type_short": "Collection",
        "comment": "a non-null collection"
      },
      "throws": []
    },
    {
      "name": "asList",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "enumeration",
          "type_long": "java.util.Enumeration\u003cT\u003e",
          "type_short": "Enumeration",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "asList",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "it",
          "type_long": "java.lang.Iterable\u003cT\u003e",
          "type_short": "Iterable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "asList",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "it",
          "type_long": "java.util.Iterator\u003cT\u003e",
          "type_short": "Iterator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "asList",
      "comment": "Checks that the elements in the given list are of the type specified by clazz\n and then casts the list to be of the specified type.",
      "javadoc": "Checks that the elements in the given list are of the type specified by \u003ccode\u003eclazz\u003c/code\u003e\n and then casts the list to be of the specified type.\n@param list the source list\n@param clazz the class of T\n@return a casted list of type T\n@throws IllegalArgumentException if the given list contains elements that are not of the\n         type specified by \u003ccode\u003eclazz\u003c/code\u003e.",
      "static": true,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003c?\u003e",
          "type_short": "List",
          "comment": "the source list"
        },
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the class of T"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": "a casted list of type T"
      },
      "throws": []
    },
    {
      "name": "asCollection",
      "comment": "Checks that the elements in the given collection are of the type specified by\n clazz and then casts the collection to be of the specified type.",
      "javadoc": "Checks that the elements in the given collection are of the type specified by\n \u003ccode\u003eclazz\u003c/code\u003e and then casts the collection to be of the specified type.\n@param collection the source collection\n@param clazz the class of T\n@return a casted list of type T\n@throws IllegalArgumentException if the given collection contains elements that are\n         not of the type specified by \u003ccode\u003eclazz\u003c/code\u003e.",
      "static": true,
      "params": [
        {
          "name": "collection",
          "type_long": "java.util.Collection\u003c?\u003e",
          "type_short": "Collection",
          "comment": "the source collection"
        },
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the class of T"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cT\u003e",
        "type_short": "Collection",
        "comment": "a casted list of type T"
      },
      "throws": []
    },
    {
      "name": "isAllSameType",
      "comment": "Returns true if each item in the list is of type clazz.",
      "javadoc": "Returns true if each item in the list is of type clazz.\n@param \u003cT\u003e the type\n@param list the list to inspect\n@param clazz the class type\n@return true if each item in the list is of type clazz",
      "static": true,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.Collection\u003c?\u003e",
          "type_short": "Collection",
          "comment": "the list to inspect"
        },
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the class type"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if each item in the list is of type clazz"
      },
      "throws": []
    },
    {
      "name": "isOneOf",
      "comment": "Returns true if the given item is in the collection of possible items",
      "javadoc": "Returns true if the given item is in the collection of possible items\n@param t the item in question\n@param possibles the set of things\n@return true if the given item is in the collection of possible items",
      "static": true,
      "params": [
        {
          "name": "t",
          "type_long": "T",
          "type_short": "T",
          "comment": "the item in question"
        },
        {
          "name": "possibles",
          "type_long": "T[]",
          "type_short": "T[]",
          "comment": "the set of things"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given item is in the collection of possible items"
      },
      "throws": []
    },
    {
      "name": "isAllNull",
      "comment": "Returns true if all the given objects are null.\n\n See also apache ObjectUtils#anyNotNull(Object...) and\n ObjectUtils#allNotNull(Object...)",
      "javadoc": "Returns true if all the given objects are null.\n\n \u003cP\u003eSee also apache {@link ObjectUtils#anyNotNull(Object...)} and\n {@link ObjectUtils#allNotNull(Object...)}\n@param objects the objects to check\n@return true if all the given objects are null",
      "static": true,
      "params": [
        {
          "name": "objects",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": "the objects to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if all the given objects are null"
      },
      "throws": []
    },
    {
      "name": "isAllNull",
      "comment": "Returns true if all the given objects are null.\n\n See also apache ObjectUtils#anyNotNull(Object...) and\n ObjectUtils#allNotNull(Object...)",
      "javadoc": "Returns true if all the given objects are null.\n\n \u003cP\u003eSee also apache {@link ObjectUtils#anyNotNull(Object...)} and\n {@link ObjectUtils#allNotNull(Object...)}\n@param c the objects to check\n@return true if all the given objects are null",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.util.Collection\u003cT\u003e",
          "type_short": "Collection",
          "comment": "the objects to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if all the given objects are null"
      },
      "throws": []
    },
    {
      "name": "isBlank",
      "comment": "Returns true if the given array is null or has 0 length",
      "javadoc": "Returns true if the given array is null or has 0 length\n@param c the collection to check\n@return true if blank",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.util.Collection\u003cT\u003e",
          "type_short": "Collection",
          "comment": "the collection to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if blank"
      },
      "throws": []
    },
    {
      "name": "isBlank",
      "comment": "Returns true if the given array is null or has 0 length",
      "javadoc": "Returns true if the given array is null or has 0 length\n@param t the items to check\n@return true if blank",
      "static": true,
      "params": [
        {
          "name": "t",
          "type_long": "T[]",
          "type_short": "T[]",
          "comment": "the items to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if blank"
      },
      "throws": []
    },
    {
      "name": "asIterable",
      "comment": "Turns the given item into an iterable",
      "javadoc": "Turns the given item into an iterable\n@param t the object from which to create an iterable\n@return an iterable over the given iterator",
      "static": true,
      "params": [
        {
          "name": "t",
          "type_long": "T",
          "type_short": "T",
          "comment": "the object from which to create an iterable"
        }
      ],
      "return": {
        "type_long": "java.lang.Iterable\u003cT\u003e",
        "type_short": "Iterable",
        "comment": "an iterable over the given iterator"
      },
      "throws": []
    },
    {
      "name": "asIterable",
      "comment": "Returns an iterable over an iterator",
      "javadoc": "Returns an iterable over an iterator\n@param iterator the iterator to create an iterable from\n@return an iterable over the given iterator",
      "static": true,
      "params": [
        {
          "name": "iterator",
          "type_long": "java.util.Iterator\u003cT\u003e",
          "type_short": "Iterator",
          "comment": "the iterator to create an iterable from"
        }
      ],
      "return": {
        "type_long": "java.lang.Iterable\u003cT\u003e",
        "type_short": "Iterable",
        "comment": "an iterable over the given iterator"
      },
      "throws": []
    },
    {
      "name": "asIterable",
      "comment": "Combines all collections passed-in into a pass-through not creating a new collection) \n Iterable.",
      "javadoc": "Combines all collections passed-in into a pass-through not creating a new collection) \n Iterable.\n@param iterables the iterables to combine\n@return the iterable",
      "static": true,
      "params": [
        {
          "name": "iterables",
          "type_long": "java.lang.Iterable\u003cT\u003e[]",
          "type_short": "java.lang.Iterable\u003cT\u003e[]",
          "comment": "the iterables to combine"
        }
      ],
      "return": {
        "type_long": "java.lang.Iterable\u003cT\u003e",
        "type_short": "Iterable",
        "comment": "the iterable"
      },
      "throws": []
    },
    {
      "name": "asStream",
      "comment": "Turns the given iterator into a stream",
      "javadoc": "Turns the given iterator into a stream\n@param iterator the iterator\n@return the stream",
      "static": true,
      "params": [
        {
          "name": "iterator",
          "type_long": "java.util.Iterator\u003cT\u003e",
          "type_short": "Iterator",
          "comment": "the iterator"
        }
      ],
      "return": {
        "type_long": "java.util.stream.Stream\u003cT\u003e",
        "type_short": "Stream",
        "comment": "the stream"
      },
      "throws": []
    },
    {
      "name": "asStream",
      "comment": "Combines all iterables passed-in into a pass-through (not creating a new collection) Stream.",
      "javadoc": "Combines all iterables passed-in into a pass-through (not creating a new collection) Stream.\n@param iterables the iterables to combine\n@return the stream",
      "static": true,
      "params": [
        {
          "name": "iterables",
          "type_long": "java.lang.Iterable\u003cT\u003e[]",
          "type_short": "java.lang.Iterable\u003cT\u003e[]",
          "comment": "the iterables to combine"
        }
      ],
      "return": {
        "type_long": "java.util.stream.Stream\u003cT\u003e",
        "type_short": "Stream",
        "comment": "the stream"
      },
      "throws": []
    },
    {
      "name": "any",
      "comment": "Returns an element from the given collection; null if the collection is null or empty.\n This is meant for clients that have a collection with any number of items and just need\n to get one.",
      "javadoc": "Returns an element from the given collection; null if the collection is null or empty.\n This is meant for clients that have a collection with any number of items and just need\n to get one.\n@param c the collection\n@return the item",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.util.Collection\u003cT\u003e",
          "type_short": "Collection",
          "comment": "the collection"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the item"
      },
      "throws": []
    },
    {
      "name": "any",
      "comment": "Returns an element from the given iterable; null if the iterable is null or empty.\n This is meant for clients that have a collection with any number of items and just need\n to get one.",
      "javadoc": "Returns an element from the given iterable; null if the iterable is null or empty.\n This is meant for clients that have a collection with any number of items and just need\n to get one.\n@param iterable the items\n@return the item",
      "static": true,
      "params": [
        {
          "name": "iterable",
          "type_long": "java.lang.Iterable\u003cT\u003e",
          "type_short": "Iterable",
          "comment": "the items"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the item"
      },
      "throws": []
    }
  ]
}
