{
  "name": "FSUtilities",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "SEPARATOR_CHARS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"/\\:\""
    },
    {
      "name": "SEPARATOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"/\""
    },
    {
      "name": "DOT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "char",
      "type_short": "char",
      "constant_value": "."
    },
    {
      "name": "GMT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.TimeZone",
      "type_short": "TimeZone",
      "constant_value": null
    },
    {
      "name": "hexdigit",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "char[]",
      "type_short": "char[]",
      "constant_value": null
    },
    {
      "name": "GFILE_NAME_TYPE_COMPARATOR",
      "comment": "Sorts GFiles by type (directories segregated from files) and then by name,\n case-insensitive.",
      "javadoc": "Sorts GFiles by type (directories segregated from files) and then by name,\n case-insensitive.",
      "static": true,
      "type_long": "java.util.Comparator\u003cghidra.formats.gfilesystem.GFile\u003e",
      "type_short": "Comparator",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "infoMapToString",
      "comment": "Converts a string-to-string mapping into a \"key: value\\n\" multi-line string.",
      "javadoc": "Converts a string-to-string mapping into a \"key: value\\n\" multi-line string.\n@param info map of string key to string value.\n@return Multi-line string \"key: value\" string.",
      "static": true,
      "params": [
        {
          "name": "info",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.String\u003e",
          "type_short": "Map",
          "comment": "map of string key to string value."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "Multi-line string \"key: value\" string."
      },
      "throws": []
    },
    {
      "name": "getSafeFilename",
      "comment": "Best-effort of sanitizing an untrusted string that will be used to create\n a file on the user\u0027s local filesystem.",
      "javadoc": "Best-effort of sanitizing an untrusted string that will be used to create\n a file on the user\u0027s local filesystem.\n@param untrustedFilename filename string with possibly bad / hostile characters or sequences.\n@return sanitized filename",
      "static": true,
      "params": [
        {
          "name": "untrustedFilename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "filename string with possibly bad / hostile characters or sequences."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "sanitized filename"
      },
      "throws": []
    },
    {
      "name": "escapeEncode",
      "comment": "Returns a copy of the input string with FSRL problematic[1] characters escaped\n as \"%nn\" sequences, where nn are hexdigits specifying the numeric ascii value\n of that character.\n \n Characters that need more than a byte to encode will result in multiple \"%nn\" values\n that encode the necessary UTF8 codepoints.\n \n [1] - non-ascii / unprintable / FSRL portion separation characters.",
      "javadoc": "Returns a copy of the input string with FSRL problematic[1] characters escaped\n as \"%nn\" sequences, where nn are hexdigits specifying the numeric ascii value\n of that character.\n \u003cp\u003e\n Characters that need more than a byte to encode will result in multiple \"%nn\" values\n that encode the necessary UTF8 codepoints.\n \u003cp\u003e\n [1] - non-ascii / unprintable / FSRL portion separation characters.\n@param s string, or null.\n@return string with problematic characters escaped as \"%nn\" sequences, or null\n if parameter was null.",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string, or null."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "string with problematic characters escaped as \"%nn\" sequences, or null\n if parameter was null."
      },
      "throws": []
    },
    {
      "name": "escapeDecode",
      "comment": "Returns a decoded version of the input stream where \"%nn\" escape sequences are\n replaced with their actual characters, using UTF-8 decoding rules.\n ",
      "javadoc": "Returns a decoded version of the input stream where \"%nn\" escape sequences are\n replaced with their actual characters, using UTF-8 decoding rules.\n \u003cp\u003e\n@param s string with escape sequences in the form \"%nn\", or null.\n@return string with all escape sequences replaced with native characters, or null if\n original parameter was null.\n@throws MalformedURLException if bad escape sequence format.",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string with escape sequences in the form \"%nn\", or null."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "string with all escape sequences replaced with native characters, or null if\n original parameter was null."
      },
      "throws": [
        {
          "type_long": "java.net.MalformedURLException",
          "type_short": "MalformedURLException",
          "comment": "if bad escape sequence format."
        }
      ]
    },
    {
      "name": "appendHexEncoded",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "sb",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "listFileSystem",
      "comment": "Returns a list of all files in a GFileSystem.",
      "javadoc": "Returns a list of all files in a GFileSystem.\n@param fs {@link GFileSystem} to recursively query for all files.\n@param dir the {@link GFile} directory to recurse into\n@param result {@link List} of GFiles where the results are accumulated into, or null\n to allocate a new List, returned as the result.\n@param taskMonitor {@link TaskMonitor} that will be checked for cancel.\n@return {@link List} of accumulated {@code result}s\n@throws IOException if io error during listing of directories\n@throws CancelledException if user cancels",
      "static": true,
      "params": [
        {
          "name": "fs",
          "type_long": "ghidra.formats.gfilesystem.GFileSystem",
          "type_short": "GFileSystem",
          "comment": "GFileSystem to recursively query for all files."
        },
        {
          "name": "dir",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "the GFile directory to recurse into"
        },
        {
          "name": "result",
          "type_long": "java.util.List\u003cghidra.formats.gfilesystem.GFile\u003e",
          "type_short": "List",
          "comment": "List of GFiles where the results are accumulated into, or null\n to allocate a new List, returned as the result."
        },
        {
          "name": "taskMonitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor that will be checked for cancel."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.formats.gfilesystem.GFile\u003e",
        "type_short": "List",
        "comment": "List of accumulated s"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if io error during listing of directories"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if user cancels"
        }
      ]
    },
    {
      "name": "getFilesystemTypeFromClass",
      "comment": "Returns the type value of the FileSystemInfo annotation attached to the\n specified class.",
      "javadoc": "Returns the type value of the {@link FileSystemInfo} annotation attached to the\n specified class.\n@param clazz Class to query.\n@return File system type string.",
      "static": true,
      "params": [
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "Class to query."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "File system type string."
      },
      "throws": []
    },
    {
      "name": "getFilesystemDescriptionFromClass",
      "comment": "Returns the description value of the FileSystemInfo annotation attached to the\n specified class.",
      "javadoc": "Returns the description value of the {@link FileSystemInfo} annotation attached to the\n specified class.\n@param clazz Class to query.\n@return File system description string.",
      "static": true,
      "params": [
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "Class to query."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "File system description string."
      },
      "throws": []
    },
    {
      "name": "getFilesystemPriorityFromClass",
      "comment": "Returns the priority value of the FileSystemInfo annotation attached to the\n specified class.",
      "javadoc": "Returns the priority value of the {@link FileSystemInfo} annotation attached to the\n specified class.\n@param clazz Class to query.\n@return File system priority integer.",
      "static": true,
      "params": [
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "Class to query."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "File system priority integer."
      },
      "throws": []
    },
    {
      "name": "isSameFS",
      "comment": "Returns true if all the FSRLs in the specified list are from the filesystem.",
      "javadoc": "Returns true if all the {@link FSRL}s in the specified list are from the filesystem.\n@param fsrls {@link List} of {@link FSRL}s.\n@return boolean true if all are from same filesystem.",
      "static": true,
      "params": [
        {
          "name": "fsrls",
          "type_long": "java.util.List\u003cghidra.formats.gfilesystem.FSRL\u003e",
          "type_short": "List",
          "comment": "List of FSRLs."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if all are from same filesystem."
      },
      "throws": []
    },
    {
      "name": "displayException",
      "comment": "Displays a filesystem related Throwable in the most user-friendly manner\n possible, even if we have to do some hacky things with helping the user with\n crypto problems.\n ",
      "javadoc": "Displays a filesystem related {@link Throwable exception} in the most user-friendly manner\n possible, even if we have to do some hacky things with helping the user with\n crypto problems.\n \u003cp\u003e\n@param originator a Logger instance, \"this\", or YourClass.class\n@param parent a parent component used to center the dialog (or null if you\n            don\u0027t have one)\n@param title the title of the pop-up dialog (main subject of message)\n@param message the details of the message\n@param throwable the Throwable that describes the cause of the error",
      "static": true,
      "params": [
        {
          "name": "originator",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "a Logger instance, \"this\", or YourClass.class"
        },
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "a parent component used to center the dialog (or null if you\n            don\u0027t have one)"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title of the pop-up dialog (main subject of message)"
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the details of the message"
        },
        {
          "name": "throwable",
          "type_long": "java.lang.Throwable",
          "type_short": "Throwable",
          "comment": "the Throwable that describes the cause of the error"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "displayCryptoException",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "originator",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "ce",
          "type_long": "ghidra.util.exception.CryptoException",
          "type_short": "CryptoException",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copyByteProviderToFile",
      "comment": "Copy the contents of a ByteProvider to a file.",
      "javadoc": "Copy the contents of a {@link ByteProvider} to a file.\n@param provider {@link ByteProvider} source of bytes\n@param destFile {@link File} destination file\n@param monitor {@link TaskMonitor} to update\n@return number of bytes copied\n@throws IOException if error\n@throws CancelledException if cancelled",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "ByteProvider source of bytes"
        },
        {
          "name": "destFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "File destination file"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to update"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "number of bytes copied"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if cancelled"
        }
      ]
    },
    {
      "name": "streamCopy",
      "comment": "Copy a stream while updating a TaskMonitor.",
      "javadoc": "Copy a stream while updating a TaskMonitor.\n@param is {@link InputStream} source of bytes\n@param os {@link OutputStream} destination of bytes\n@param monitor {@link TaskMonitor} to update\n@return number of bytes copied\n@throws IOException if error\n@throws CancelledException if cancelled",
      "static": true,
      "params": [
        {
          "name": "is",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "InputStream source of bytes"
        },
        {
          "name": "os",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": "OutputStream destination of bytes"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to update"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "number of bytes copied"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if cancelled"
        }
      ]
    },
    {
      "name": "getLines",
      "comment": "Returns the text lines in the specified ByteProvider.\n \n See FileUtilities#getLines(InputStream)",
      "javadoc": "Returns the text lines in the specified ByteProvider.\n \u003cp\u003e\n See {@link FileUtilities#getLines(InputStream)}\n@param byteProvider {@link ByteProvider} to read\n@return list of text lines\n@throws IOException if error",
      "static": true,
      "params": [
        {
          "name": "byteProvider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "ByteProvider to read"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "list of text lines"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        }
      ]
    },
    {
      "name": "getFileMD5",
      "comment": "Calculate the MD5 of a file.",
      "javadoc": "Calculate the MD5 of a file.\n@param f {@link File} to read.\n@param monitor {@link TaskMonitor} to watch for cancel\n@return md5 as a hex encoded string, never null.\n@throws IOException if error\n@throws CancelledException if cancelled",
      "static": true,
      "params": [
        {
          "name": "f",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "File to read."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to watch for cancel"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "md5 as a hex encoded string, never null."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if cancelled"
        }
      ]
    },
    {
      "name": "getMD5",
      "comment": "Calculate the MD5 of a file.",
      "javadoc": "Calculate the MD5 of a file.\n@param provider {@link ByteProvider}\n@param monitor {@link TaskMonitor} to watch for cancel\n@return md5 as a hex encoded string, never null.\n@throws IOException if error\n@throws CancelledException if cancelled",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "ByteProvider"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to watch for cancel"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "md5 as a hex encoded string, never null."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if cancelled"
        }
      ]
    },
    {
      "name": "getMD5",
      "comment": "Calculate the hash of an InputStream.",
      "javadoc": "Calculate the hash of an {@link InputStream}.\n@param is {@link InputStream}\n@param monitor {@link TaskMonitor} to update\n@return md5 as a hex encoded string, never null\n@throws IOException if error\n@throws CancelledException if cancelled",
      "static": true,
      "params": [
        {
          "name": "is",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "InputStream"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to update"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "md5 as a hex encoded string, never null"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if cancelled"
        }
      ]
    },
    {
      "name": "appendPath",
      "comment": "Concats path strings together, taking care to ensure that there is a correct\n path separator character between each part.\n \n Handles forward or back slashes as path separator characters in the input, but\n only adds forward slashes when separating the path strings that need a separator.\n ",
      "javadoc": "Concats path strings together, taking care to ensure that there is a correct\n path separator character between each part.\n \u003cp\u003e\n Handles forward or back slashes as path separator characters in the input, but\n only adds forward slashes when separating the path strings that need a separator.\n \u003cp\u003e\n@param paths vararg list of path strings, empty or null elements are ok and are skipped.\n@return null if all params null, \"\" empty string if all are empty, or\n \"path_element[1]/path_element[2]/.../path_element[N]\" otherwise.",
      "static": true,
      "params": [
        {
          "name": "paths",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "vararg list of path strings, empty or null elements are ok and are skipped."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "null if all params null, \"\" empty string if all are empty, or\n \"path_element[1]/path_element[2]/.../path_element[N]\" otherwise."
      },
      "throws": []
    },
    {
      "name": "getExtension",
      "comment": "Returns the \"extension\" of the filename part of the path string.\n \n Ie. everything after the nth last \u0027.\u0027 char in the filename, including that \u0027.\u0027 character.\n \n Using: \"path/filename.ext1.ext2\"\n \n Gives:\n \n \textLevel 1: \".ext2\"\n  extLevel 2: \".ext1.ext2\"\n  extLevel 3: null\n ",
      "javadoc": "Returns the \"extension\" of the filename part of the path string.\n \u003cp\u003e\n Ie. everything after the nth last \u0027.\u0027 char in the filename, including that \u0027.\u0027 character.\n \u003cp\u003e\n Using: \"path/filename.ext1.ext2\"\n \u003cP\u003e\n Gives:\n \u003cUL\u003e\n \t\u003cLI\u003eextLevel 1: \".ext2\"\u003c/LI\u003e\n  \u003cLI\u003eextLevel 2: \".ext1.ext2\"\u003c/LI\u003e\n  \u003cLI\u003eextLevel 3: \u003ccode\u003enull\u003c/code\u003e\u003c/LI\u003e\n \u003c/UL\u003e\n@param path path/filename.ext string\n@param extLevel number of ext levels; must be greater than 0\n@return \".ext1\" for \"path/filename.notext.ext1\" level 1, \".ext1.ext2\" for\n         \"path/filename.ext1.ext2\" level 2, etc. or null if there was no dot character\n@throws IllegalArgumentException if the given level is less than 1",
      "static": true,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path/filename.ext string"
        },
        {
          "name": "extLevel",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of ext levels; must be greater than 0"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "\".ext1\" for \"path/filename.notext.ext1\" level 1, \".ext1.ext2\" for\n         \"path/filename.ext1.ext2\" level 2, etc. or null if there was no dot character"
      },
      "throws": []
    },
    {
      "name": "normalizeNativePath",
      "comment": "Returns a copy of the string path that has been fixed to have correct slashes\n and a correct leading root slash \u0027/\u0027.",
      "javadoc": "Returns a copy of the string path that has been fixed to have correct slashes\n and a correct leading root slash \u0027/\u0027.\n@param path String forward or backslash path\n@return String path with all forward slashes and a leading root slash.",
      "static": true,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String forward or backslash path"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String path with all forward slashes and a leading root slash."
      },
      "throws": []
    },
    {
      "name": "formatFSTimestamp",
      "comment": "Common / unified date formatting for all file system information strings.",
      "javadoc": "Common / unified date formatting for all file system information strings.\n@param d {@link Date} to format, or null\n@return formatted date string, or \"NA\" if date was null",
      "static": true,
      "params": [
        {
          "name": "d",
          "type_long": "java.util.Date",
          "type_short": "Date",
          "comment": "Date to format, or null"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "formatted date string, or \"NA\" if date was null"
      },
      "throws": []
    },
    {
      "name": "formatSize",
      "comment": "Common / unified size formatting for all file system information strings.",
      "javadoc": "Common / unified size formatting for all file system information strings.\n@param length {@link Long} length, null ok\n@return pretty\u0027ish length format string, or \"NA\" if length was null",
      "static": true,
      "params": [
        {
          "name": "length",
          "type_long": "java.lang.Long",
          "type_short": "Long",
          "comment": "Long length, null ok"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "pretty\u0027ish length format string, or \"NA\" if length was null"
      },
      "throws": []
    },
    {
      "name": "uncheckedClose",
      "comment": "Helper method to invoke close() on a Closeable without having to catch\n an IOException.",
      "javadoc": "Helper method to invoke close() on a Closeable without having to catch\n an IOException.\n@param c {@link Closeable} to close\n@param msg optional msg to log if exception is thrown, null is okay",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.io.Closeable",
          "type_short": "Closeable",
          "comment": "Closeable to close"
        },
        {
          "name": "msg",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "optional msg to log if exception is thrown, null is okay"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
