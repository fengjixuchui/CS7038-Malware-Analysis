{
  "name": "GFileSystemProgramProvider",
  "comment": "GFileSystem add-on interface that allows a filesystem publish the fact that\n it supports an import feature allowing the caller to import binaries directly into\n Ghidra without going through a Loader.",
  "javadoc": "{@link GFileSystem} add-on interface that allows a filesystem publish the fact that\n it supports an import feature allowing the caller to import binaries directly into\n Ghidra without going through a {@link Loader}.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getProgram",
      "comment": "NOTE: ONLY OVERRIDE THIS METHOD IF YOU CANNOT PROVIDE AN INPUT STREAM\n TO THE INTERNAL FILES OF THIS FILE SYSTEM!\n \n BE SURE TO REGISTER THE GIVEN CONSUMER ON THE PROGRAM.\n \n Returns a program for the given file.\n ",
      "javadoc": "NOTE: ONLY OVERRIDE THIS METHOD IF YOU CANNOT PROVIDE AN INPUT STREAM\n TO THE INTERNAL FILES OF THIS FILE SYSTEM!\n \u003cbr\u003e\n BE SURE TO REGISTER THE GIVEN CONSUMER ON THE PROGRAM.\n \u003cbr\u003e\n Returns a program for the given file.\n \u003cbr\u003e\n@param file the file to convert into a program\n@param languageService the language service for locating languages and compiler specifications\n@param monitor a task monitor\n@param consumer the consumer for the program to be returned\n@return a program for the given file\n@throws Exception if errors occur",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "the file to convert into a program"
        },
        {
          "name": "languageService",
          "type_long": "ghidra.program.model.lang.LanguageService",
          "type_short": "LanguageService",
          "comment": "the language service for locating languages and compiler specifications"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a task monitor"
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the consumer for the program to be returned"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "a program for the given file"
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if errors occur"
        }
      ]
    },
    {
      "name": "canProvideProgram",
      "comment": "Returns true if this GFileSystem can convert the specified GFile instance into\n a Ghidra Program.",
      "javadoc": "Returns true if this GFileSystem can convert the specified GFile instance into\n a Ghidra Program.\n@param file GFile file or directory instance.\n@return boolean true if calls to {@link #getProgram(GFile, LanguageService, TaskMonitor, Object)}\n will be able to convert the file into a program.",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "GFile file or directory instance."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if calls to #getProgram(GFile, LanguageService, TaskMonitor, Object)\n will be able to convert the file into a program."
      },
      "throws": []
    }
  ]
}
