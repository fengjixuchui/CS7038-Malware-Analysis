{
  "name": "GFileImpl",
  "comment": "Base implementation of file in a GFileSystem.\n \n Only valid while the owning filesystem object is still open and not\n GFileSystem#close().\n \n See GFile.",
  "javadoc": "Base implementation of file in a {@link GFileSystem filesystem}.\n \u003cp\u003e\n Only valid while the owning filesystem object is still open and not\n {@link GFileSystem#close() closed}.\n \u003cp\u003e\n See {@link GFile}.",
  "static": false,
  "implements": [
    "ghidra.formats.gfilesystem.GFile"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "fileSystem",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.formats.gfilesystem.GFileSystem",
      "type_short": "GFileSystem",
      "constant_value": null
    },
    {
      "name": "parentFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.formats.gfilesystem.GFile",
      "type_short": "GFile",
      "constant_value": null
    },
    {
      "name": "isDirectory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "fsrl",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.formats.gfilesystem.FSRL",
      "type_short": "FSRL",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "fromPathString",
      "comment": "Creates a GFile for a filesystem using a string\n path (ie. \"dir/subdir/filename\"), with the path starting at the root of the\n filesystem.\n \n The parents of this GFile are created fresh from any directory names\n in the path string.  It is better to use the\n #fromFilename(GFileSystem, GFile, String, boolean, long, FSRL) method\n to create GFile instances if you can supply the parent value as that will\n allow reuse of the parent objects instead of duplicates of them being created\n for each file with the same parent path.\n ",
      "javadoc": "Creates a GFile for a filesystem using a string\n path (ie. \"dir/subdir/filename\"), with the path starting at the root of the\n filesystem.\n \u003cp\u003e\n The parents of this GFile are created fresh from any directory names\n in the path string.  It is better to use the\n {@link #fromFilename(GFileSystem, GFile, String, boolean, long, FSRL)} method\n to create GFile instances if you can supply the parent value as that will\n allow reuse of the parent objects instead of duplicates of them being created\n for each file with the same parent path.\n \u003cp\u003e\n@param fileSystem the {@link GFileSystem} that owns this file\n@param path forward slash \u0027/\u0027 separated path and filename string.\n@param fsrl {@link FSRL} to assign to the file, NULL if an auto-created FSRL is ok.\n@param isDirectory boolean flag to indicate that this is a directory\n@param length length of the file (use -1 if not know or specified).\n@return a new {@link GFileImpl}",
      "static": true,
      "params": [
        {
          "name": "fileSystem",
          "type_long": "ghidra.formats.gfilesystem.GFileSystem",
          "type_short": "GFileSystem",
          "comment": "the GFileSystem that owns this file"
        },
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "forward slash \u0027/\u0027 separated path and filename string."
        },
        {
          "name": "fsrl",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "FSRL to assign to the file, NULL if an auto-created FSRL is ok."
        },
        {
          "name": "isDirectory",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag to indicate that this is a directory"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "length of the file (use -1 if not know or specified)."
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFileImpl",
        "type_short": "GFileImpl",
        "comment": "a new GFileImpl"
      },
      "throws": []
    },
    {
      "name": "fromPathString",
      "comment": "Creates a GFile for a specific owning filesystem using a string\n path (ie. \"dir/subdir/filename\"), with the path starting at the supplied\n  directory.\n \n The parents of this GFile are created fresh from any directory names\n in the path string.  It is better to use the\n #fromFilename(GFileSystem, GFile, String, boolean, long, FSRL) method\n to create GFile instances if you can supply the parent value as that will\n allow reuse of the parent objects instead of duplicates of them being created\n for each file with the same parent path.\n ",
      "javadoc": "Creates a GFile for a specific owning filesystem using a string\n path (ie. \"dir/subdir/filename\"), with the path starting at the supplied\n {@code parent} directory.\n \u003cp\u003e\n The parents of this GFile are created fresh from any directory names\n in the path string.  It is better to use the\n {@link #fromFilename(GFileSystem, GFile, String, boolean, long, FSRL)} method\n to create GFile instances if you can supply the parent value as that will\n allow reuse of the parent objects instead of duplicates of them being created\n for each file with the same parent path.\n \u003cp\u003e\n@param fileSystem the {@link GFileSystem} that owns this file\n@param parent the parent of the new GFile or null if child-of-root.\n@param path forward slash \u0027/\u0027 separated path and filename string.\n@param fsrl {@link FSRL} to assign to the file, NULL if an auto-created FSRL is ok.\n@param isDirectory boolean flag to indicate that this is a directory\n@param length length of the file (use -1 if not know or specified).\n@return a new {@link GFileImpl}",
      "static": true,
      "params": [
        {
          "name": "fileSystem",
          "type_long": "ghidra.formats.gfilesystem.GFileSystem",
          "type_short": "GFileSystem",
          "comment": "the GFileSystem that owns this file"
        },
        {
          "name": "parent",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "the parent of the new GFile or null if child-of-root."
        },
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "forward slash \u0027/\u0027 separated path and filename string."
        },
        {
          "name": "fsrl",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "FSRL to assign to the file, NULL if an auto-created FSRL is ok."
        },
        {
          "name": "isDirectory",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag to indicate that this is a directory"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "length of the file (use -1 if not know or specified)."
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFileImpl",
        "type_short": "GFileImpl",
        "comment": "a new GFileImpl"
      },
      "throws": []
    },
    {
      "name": "getFSRLFromParent",
      "comment": "Creates a FSRL for a file based on the either the filesystem\u0027s FSRLRoot or parent\n directory\u0027s FSRL, preferring a parent directory over the filesystem\u0027s FSRL.",
      "javadoc": "Creates a FSRL for a file based on the either the filesystem\u0027s FSRLRoot or parent\n directory\u0027s FSRL, preferring a parent directory over the filesystem\u0027s FSRL.\n@param fs {@link GFileSystem}\n@param parent {@link GFile} parent directory, null ok\n@param path string path to assign to the FSRL\n@return new {@link FSRL}",
      "static": true,
      "params": [
        {
          "name": "fs",
          "type_long": "ghidra.formats.gfilesystem.GFileSystem",
          "type_short": "GFileSystem",
          "comment": "GFileSystem"
        },
        {
          "name": "parent",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "GFile parent directory, null ok"
        },
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string path to assign to the FSRL"
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRL",
        "type_short": "FSRL",
        "comment": "new FSRL"
      },
      "throws": []
    },
    {
      "name": "fromFilename",
      "comment": "Creates a GFile for a filesystem using a simple name (not a path)\n and as a child of the specified parent.\n \n The filename is accepted without checking or validation.\n ",
      "javadoc": "Creates a GFile for a filesystem using a simple name (not a path)\n and as a child of the specified parent.\n \u003cp\u003e\n The filename is accepted without checking or validation.\n \u003cp\u003e\n@param fileSystem the {@link GFileSystem} that owns this file\n@param parent the parent of the new GFile or null if child-of-root.\n@param filename the file\u0027s name, not used if FSRL param specified.\n@param isDirectory boolean flag to indicate that this is a directory\n@param length length of the file (use -1 if not know or specified).\n@param fsrl {@link FSRL} to assign to the file, NULL if an auto-created FSRL is ok.\n@return a new {@link GFileImpl}",
      "static": true,
      "params": [
        {
          "name": "fileSystem",
          "type_long": "ghidra.formats.gfilesystem.GFileSystem",
          "type_short": "GFileSystem",
          "comment": "the GFileSystem that owns this file"
        },
        {
          "name": "parent",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "the parent of the new GFile or null if child-of-root."
        },
        {
          "name": "filename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the file\u0027s name, not used if FSRL param specified."
        },
        {
          "name": "isDirectory",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag to indicate that this is a directory"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "length of the file (use -1 if not know or specified)."
        },
        {
          "name": "fsrl",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "FSRL to assign to the file, NULL if an auto-created FSRL is ok."
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFileImpl",
        "type_short": "GFileImpl",
        "comment": "a new GFileImpl"
      },
      "throws": []
    },
    {
      "name": "fromFSRL",
      "comment": "Creates a GFile for a filesystem using the information in a FSRL as the file\u0027s name\n and as a child of the specified parent.\n ",
      "javadoc": "Creates a GFile for a filesystem using the information in a FSRL as the file\u0027s name\n and as a child of the specified parent.\n \u003cp\u003e\n@param fileSystem the {@link GFileSystem} that owns this file\n@param parent the parent of the new GFile or null if child-of-root.\n@param fsrl {@link FSRL} to assign to the file.\n@param isDirectory boolean flag to indicate that this is a directory\n@param length length of the file (use -1 if not know or specified).\n@return a new {@link GFileImpl}",
      "static": true,
      "params": [
        {
          "name": "fileSystem",
          "type_long": "ghidra.formats.gfilesystem.GFileSystem",
          "type_short": "GFileSystem",
          "comment": "the GFileSystem that owns this file"
        },
        {
          "name": "parent",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "the parent of the new GFile or null if child-of-root."
        },
        {
          "name": "fsrl",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "FSRL to assign to the file."
        },
        {
          "name": "isDirectory",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag to indicate that this is a directory"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "length of the file (use -1 if not know or specified)."
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFileImpl",
        "type_short": "GFileImpl",
        "comment": "a new GFileImpl"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Protected constructor, use static helper methods to create new instances.\n \n Creates a new GFile instance without any name parsing.\n ",
      "javadoc": "Protected constructor, use static helper methods to create new instances.\n \u003cp\u003e\n Creates a new GFile instance without any name parsing.\n \u003cp\u003e\n@param fileSystem the {@link GFileSystem} that owns this file\n@param parentFile the parent of the new GFile or null if child-of-root.\n@param isDirectory boolean flag to indicate that this is a directory\n@param length length of the file (use -1 if not know or specified).\n@param fsrl {@link FSRL} to assign to the file.",
      "static": false,
      "params": [
        {
          "name": "fileSystem",
          "type_long": "ghidra.formats.gfilesystem.GFileSystem",
          "type_short": "GFileSystem",
          "comment": "the GFileSystem that owns this file"
        },
        {
          "name": "parentFile",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "the parent of the new GFile or null if child-of-root."
        },
        {
          "name": "isDirectory",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag to indicate that this is a directory"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "length of the file (use -1 if not know or specified)."
        },
        {
          "name": "fsrl",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "FSRL to assign to the file."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParentFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFile",
        "type_short": "GFile",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isDirectory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFilesystem",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFileSystem",
        "type_short": "GFileSystem",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFSRL",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRL",
        "type_short": "FSRL",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
