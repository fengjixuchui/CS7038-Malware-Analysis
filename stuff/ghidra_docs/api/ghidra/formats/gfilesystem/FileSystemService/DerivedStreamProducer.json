{
  "name": "DerivedStreamProducer",
  "comment": "Used by FileSystemService#getDerivedByteProvider(FSRL, FSRL, String, long, DerivedStreamProducer, TaskMonitor)\n to produce a derivative stream from a source file.\n \n The InputStream returned from the method needs to supply the bytes of the derived file\n and will be closed by the caller.\n \n Example:\n \n fsService.getDerivedByteProvider(\n     containerFSRL, \n     null,\n     \"the_derived_file\",\n     -1,\n     () - new MySpecialtyInputstream(),\n     monitor);\n \n See #produceDerivedStream().",
  "javadoc": "Used by {@link FileSystemService#getDerivedByteProvider(FSRL, FSRL, String, long, DerivedStreamProducer, TaskMonitor) getDerivedByteProvider()}\n to produce a derivative stream from a source file.\n \u003cp\u003e\n The {@link InputStream} returned from the method needs to supply the bytes of the derived file\n and will be closed by the caller.\n \u003cp\u003e\n Example:\n \u003cp\u003e\n \u003cpre\u003efsService.getDerivedByteProvider(\n     containerFSRL, \n     null,\n     \"the_derived_file\",\n     -1,\n     () -\u003e new MySpecialtyInputstream(),\n     monitor);\u003c/pre\u003e\n \u003cp\u003e\n See {@link #produceDerivedStream()}.",
  "static": true,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "produceDerivedStream",
      "comment": "Callback method intended to be implemented by the caller to\n FileSystemService#getDerivedByteProvider(FSRL, FSRL, String, long, DerivedStreamProducer, TaskMonitor)\n \n The implementation needs to return an InputStream that contains the bytes\n of the derived file.\n ",
      "javadoc": "Callback method intended to be implemented by the caller to\n {@link FileSystemService#getDerivedByteProvider(FSRL, FSRL, String, long, DerivedStreamProducer, TaskMonitor)}\n \u003cp\u003e\n The implementation needs to return an {@link InputStream} that contains the bytes\n of the derived file.\n \u003cp\u003e\n@return a new {@link InputStream} that will produce all the bytes of the derived file\n@throws IOException if there is a problem while producing the InputStream\n@throws CancelledException if the user canceled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": "a new InputStream that will produce all the bytes of the derived file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem while producing the InputStream"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user canceled"
        }
      ]
    }
  ]
}
