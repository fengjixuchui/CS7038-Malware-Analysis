{
  "name": "AbstractFileExtractorTask",
  "comment": "Common base class for tasks that need to extract files from a GFileSystem location.\n ",
  "javadoc": "Common base class for tasks that need to extract files from a GFileSystem location.\n \u003cp\u003e",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.task.Task",
  "fields": [
    {
      "name": "fs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.formats.gfilesystem.GFileSystem",
      "type_short": "GFileSystem",
      "constant_value": null
    },
    {
      "name": "rootOutputDirectory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.File",
      "type_short": "File",
      "constant_value": null
    },
    {
      "name": "totalFilesExportedCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "totalDirsExportedCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "totalBytesExportedCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "See Task#Task(String, boolean, boolean, boolean).",
      "javadoc": "See {@link Task#Task(String, boolean, boolean, boolean)}.\n@param title See {@link Task#Task(String, boolean, boolean, boolean)}\n@param canCancel See {@link Task#Task(String, boolean, boolean, boolean)}\n@param hasProgress See {@link Task#Task(String, boolean, boolean, boolean)}\n@param isModal See {@link Task#Task(String, boolean, boolean, boolean)}\n@param rootOutputDir base directory where files will be extracted to",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "See Task#Task(String, boolean, boolean, boolean)"
        },
        {
          "name": "canCancel",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "See Task#Task(String, boolean, boolean, boolean)"
        },
        {
          "name": "hasProgress",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "See Task#Task(String, boolean, boolean, boolean)"
        },
        {
          "name": "isModal",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "See Task#Task(String, boolean, boolean, boolean)"
        },
        {
          "name": "rootOutputDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "base directory where files will be extracted to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "startExtract",
      "comment": "Starts the file extraction process.",
      "javadoc": "Starts the file extraction process.\n@param fs the {@link GFileSystem} that holds the files\n@param srcDir the starting directory to extract, if {@code null}, start at root of file system\n@param monitor {@link TaskMonitor} that will be updated with progress and checked for cancel\n@throws CancelledException if the extraction is cancelled.\n@throws IOException if an exception occurs extracting the files.",
      "static": false,
      "params": [
        {
          "name": "fs",
          "type_long": "ghidra.formats.gfilesystem.GFileSystem",
          "type_short": "GFileSystem",
          "comment": "the GFileSystem that holds the files"
        },
        {
          "name": "srcDir",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "the starting directory to extract, if , start at root of file system"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor that will be updated with progress and checked for cancel"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the extraction is cancelled."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an exception occurs extracting the files."
        }
      ]
    },
    {
      "name": "processDirectory",
      "comment": "Extract the contents of a directory in a GFileSystem into a local file system\n directory.\n \n The destination directory is created if not present.",
      "javadoc": "Extract the contents of a directory in a {@link GFileSystem} into a local file system\n directory.\n \u003cp\u003e\n The destination directory is created if not present.\n@param srcGFileDirectory if null, directory is filesystem root\n@param destDirectory destination / output directory\n@param monitor {@link TaskMonitor} to watch and update with progress\n@throws IOException if IO problem.\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "srcGFileDirectory",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "if null, directory is filesystem root"
        },
        {
          "name": "destDirectory",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "destination / output directory"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to watch and update with progress"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO problem."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "srcFile",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": ""
        },
        {
          "name": "destFSFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "mapSourceFilenameToDest",
      "comment": "Maps the untrusted, potentially hostile, filename of the source file to a name\n that is suitable to be used to create a file on the user\u0027s local file system.\n \n NOTE: This base implementation converts relative directory names to spelled-out\n versions of that directory, eg. \".\" becomes \"dot\".\n \n If you wish to modify this behavior, override this method and return different\n mappings.",
      "javadoc": "Maps the untrusted, potentially hostile, filename of the source file to a name\n that is suitable to be used to create a file on the user\u0027s local file system.\n \u003cp\u003e\n NOTE: This base implementation converts relative directory names to spelled-out\n versions of that directory, eg. \".\" becomes \"dot\".\n \u003cp\u003e\n If you wish to modify this behavior, override this method and return different\n mappings.\n@param srcFile source file\n@return String name of the source file, possibly modified to be safer\n@throws IOException thrown if name is not mappable and the extract process should stop",
      "static": false,
      "params": [
        {
          "name": "srcFile",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "source file"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String name of the source file, possibly modified to be safer"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if name is not mappable and the extract process should stop"
        }
      ]
    },
    {
      "name": "handleUnexpectedException",
      "comment": "Allows custom handling of exceptions that occur during file extraction.\n \n Return true if the exception should be ignored by the file extraction process,\n otherwise return false if it should be propagated up the call stack.",
      "javadoc": "Allows custom handling of exceptions that occur during file extraction.\n \u003cp\u003e\n Return true if the exception should be ignored by the file extraction process,\n otherwise return false if it should be propagated up the call stack.\n@param file file that was being extracted when the exception happened\n@param e the exception\n@return true if the exception should be suppressed, false if the exception should\n be thrown",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "file that was being extracted when the exception happened"
        },
        {
          "name": "e",
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "the exception"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the exception should be suppressed, false if the exception should\n be thrown"
      },
      "throws": []
    },
    {
      "name": "isSpecialDirectory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "directory",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "extractFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "srcFile",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": ""
        },
        {
          "name": "outputFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getSourceFileInputStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getTotalFilesExportedCount",
      "comment": "Return the number of files that were exported.\n ",
      "javadoc": "Return the number of files that were exported.\n \u003cp\u003e\n@return the number of files that were exported",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of files that were exported"
      },
      "throws": []
    },
    {
      "name": "getTotalDirsExportedCount",
      "comment": "Return the number of directories that were exported.\n ",
      "javadoc": "Return the number of directories that were exported.\n \u003cp\u003e\n@return the number of directories that were exported",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of directories that were exported"
      },
      "throws": []
    },
    {
      "name": "getTotalBytesExportedCount",
      "comment": "Return the number of bytes that were exported.\n ",
      "javadoc": "Return the number of bytes that were exported.\n \u003cp\u003e\n@return the number of bytes that were exported",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the number of bytes that were exported"
      },
      "throws": []
    }
  ]
}
