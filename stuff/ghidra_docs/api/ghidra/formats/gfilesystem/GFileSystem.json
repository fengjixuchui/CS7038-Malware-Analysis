{
  "name": "GFileSystem",
  "comment": "Interface that represents a filesystem that contains files.\n \n Operations take a TaskMonitor if they need to be cancel-able.\n \n Use a FileSystemService to discover and \n open instances of filesystems in files or to open a known FSRL path or to\n deal with creating FileSystemService#createTempFile(long).\n \n NOTE:\n ALL GFileSystem sub-CLASSES MUST END IN \"FileSystem\". If not, the ClassSearcher\n will not find them.\n \n Also note that this interface came after the original abstract class GFileSystem and its many\n implementations, and usage is being migrated to this interface where possible and as\n time permits.",
  "javadoc": "Interface that represents a filesystem that contains files.\n \u003cp\u003e\n Operations take a {@link TaskMonitor} if they need to be cancel-able.\n \u003cp\u003e\n Use a {@link FileSystemService FileSystemService instance} to discover and \n open instances of filesystems in files or to open a known {@link FSRL} path or to\n deal with creating {@link FileSystemService#createTempFile(long) temp files}.\n \u003cp\u003e\n NOTE:\u003cp\u003e\n ALL GFileSystem sub-CLASSES MUST END IN \"FileSystem\". If not, the ClassSearcher\n will not find them.\n \u003cp\u003e\n Also note that this interface came after the original abstract class GFileSystem and its many\n implementations, and usage is being migrated to this interface where possible and as\n time permits.",
  "static": false,
  "implements": [
    "java.io.Closeable",
    "ghidra.util.classfinder.ExtensionPoint"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getName",
      "comment": "File system volume name.\n \n Typically the name of the container file, or a internally stored \u0027volume\u0027 name.",
      "javadoc": "File system volume name.\n \u003cp\u003e\n Typically the name of the container file, or a internally stored \u0027volume\u0027 name.\n@return string filesystem volume name.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "string filesystem volume name."
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "Returns the type of this file system.\n \n This default implementation returns the type value in FileSystemInfo\n annotation.",
      "javadoc": "Returns the type of this file system.\n \u003cp\u003e\n This default implementation returns the type value in {@link FileSystemInfo}\n annotation.\n@return type string",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "type string"
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "Returns a description of this file system.\n \n This default implementation returns the description value in FileSystemInfo\n annotation.",
      "javadoc": "Returns a description of this file system.\n \u003cp\u003e\n This default implementation returns the description value in {@link FileSystemInfo}\n annotation.\n@return description string",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "description string"
      },
      "throws": []
    },
    {
      "name": "getFSRL",
      "comment": "File system\u0027s FSRL",
      "javadoc": "File system\u0027s FSRL\n@return {@link FSRLRoot} of this filesystem.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRLRoot",
        "type_short": "FSRLRoot",
        "comment": "FSRLRoot of this filesystem."
      },
      "throws": []
    },
    {
      "name": "isClosed",
      "comment": "Returns true if the filesystem has been #close()",
      "javadoc": "Returns true if the filesystem has been {@link #close() closed}\n@return boolean true if the filesystem has been closed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the filesystem has been closed."
      },
      "throws": []
    },
    {
      "name": "isStatic",
      "comment": "Indicates if this filesystem is a static snapshot or changes.",
      "javadoc": "Indicates if this filesystem is a static snapshot or changes.\n@return boolean true if the filesystem is static or false if dynamic content.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the filesystem is static or false if dynamic content."
      },
      "throws": []
    },
    {
      "name": "getRefManager",
      "comment": "Returns the FileSystemRefManager that is responsible for\n creating and releasing FileSystemRef to this filesystem.\n ",
      "javadoc": "Returns the {@link FileSystemRefManager ref manager} that is responsible for\n creating and releasing {@link FileSystemRef refs} to this filesystem.\n \u003cp\u003e\n@return {@link FileSystemRefManager} that manages references to this filesystem.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FileSystemRefManager",
        "type_short": "FileSystemRefManager",
        "comment": "FileSystemRefManager that manages references to this filesystem."
      },
      "throws": []
    },
    {
      "name": "getFileCount",
      "comment": "Returns the number of files in the filesystem, if known, otherwise -1 if not known.",
      "javadoc": "Returns the number of files in the filesystem, if known, otherwise -1 if not known.\n@return number of files in this filesystem, -1 if not known.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of files in this filesystem, -1 if not known."
      },
      "throws": []
    },
    {
      "name": "lookup",
      "comment": "Retrieves a GFile from this filesystem based on its full path and filename.\n ",
      "javadoc": "Retrieves a {@link GFile} from this filesystem based on its full path and filename.\n \u003cp\u003e\n@param path string path and filename of a file located in this filesystem.  Use \n {@code null} or \"/\" to retrieve the root directory\n@return {@link GFile} instance of requested file, null if not found.\n@throws IOException if IO error when looking up file.",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string path and filename of a file located in this filesystem.  Use \n  or \"/\" to retrieve the root directory"
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFile",
        "type_short": "GFile",
        "comment": "GFile instance of requested file, null if not found."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error when looking up file."
        }
      ]
    },
    {
      "name": "getInputStream",
      "comment": "Returns an InputStream that contains the contents of the specified GFile.\n \n The caller is responsible for closing the stream.\n ",
      "javadoc": "Returns an {@link InputStream} that contains the contents of the specified {@link GFile}.\n \u003cp\u003e\n The caller is responsible for closing the stream.\n \u003cp\u003e\n@param file {@link GFile} to get an InputStream for\n@param monitor {@link TaskMonitor} to watch and update progress\n@return new {@link InputStream} contains the contents of the file or NULL if the\n file doesn\u0027t have data.\n@throws IOException if IO problem\n@throws CancelledException if user cancels.",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "GFile to get an InputStream for"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to watch and update progress"
        }
      ],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": "new InputStream contains the contents of the file or NULL if the\n file doesn\u0027t have data."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO problem"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if user cancels."
        }
      ]
    },
    {
      "name": "getByteProvider",
      "comment": "Returns a ByteProvider that contains the contents of the specified GFile.\n \n The caller is responsible for closing the provider.",
      "javadoc": "Returns a {@link ByteProvider} that contains the contents of the specified {@link GFile}.\n \u003cp\u003e\n The caller is responsible for closing the provider.\n@param file {@link GFile} to get bytes for\n@param monitor {@link TaskMonitor} to watch and update progress\n@return new {@link ByteProvider} that contains the contents of the file, or NULL if file\n doesn\u0027t have data\n@throws IOException if error\n@throws CancelledException if user cancels",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "GFile to get bytes for"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to watch and update progress"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.ByteProvider",
        "type_short": "ByteProvider",
        "comment": "new ByteProvider that contains the contents of the file, or NULL if file\n doesn\u0027t have data"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if user cancels"
        }
      ]
    },
    {
      "name": "getListing",
      "comment": "Returns a list of GFile that reside in the specified directory on\n this filesystem.\n ",
      "javadoc": "Returns a list of {@link GFile files} that reside in the specified directory on\n this filesystem.\n \u003cp\u003e\n@param directory NULL means root of filesystem.\n@return {@link List} of {@link GFile} instances of file in the requested directory.\n@throws IOException if IO problem.",
      "static": false,
      "params": [
        {
          "name": "directory",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "NULL means root of filesystem."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.formats.gfilesystem.GFile\u003e",
        "type_short": "List",
        "comment": "List of GFile instances of file in the requested directory."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO problem."
        }
      ]
    },
    {
      "name": "getFileAttributes",
      "comment": "Returns a container of FileAttribute values.\n \n Implementors of this method are not required to add FSRL, NAME, or PATH values unless\n the values are non-standard.",
      "javadoc": "Returns a container of {@link FileAttribute} values.\n \u003cp\u003e\n Implementors of this method are not required to add FSRL, NAME, or PATH values unless\n the values are non-standard.\n@param file {@link GFile} to get the attributes for\n@param monitor {@link TaskMonitor}\n@return {@link FileAttributes} instance (possibly read-only), maybe empty but never null",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "GFile to get the attributes for"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor"
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.fileinfo.FileAttributes",
        "type_short": "FileAttributes",
        "comment": "FileAttributes instance (possibly read-only), maybe empty but never null"
      },
      "throws": []
    },
    {
      "name": "getInputStreamHelper",
      "comment": "Default implementation of getting an InputStream from a GFile\u0027s\n ByteProvider.\n ",
      "javadoc": "Default implementation of getting an {@link InputStream} from a {@link GFile}\u0027s\n {@link ByteProvider}.\n \u003cp\u003e\n@param file {@link GFile}\n@param fs the {@link GFileSystem filesystem} containing the file\n@param monitor {@link TaskMonitor} to allow canceling\n@return new {@link InputStream} containing bytes of the file\n@throws CancelledException if canceled\n@throws IOException if error",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "GFile"
        },
        {
          "name": "fs",
          "type_long": "ghidra.formats.gfilesystem.GFileSystem",
          "type_short": "GFileSystem",
          "comment": "the GFileSystem containing the file"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to allow canceling"
        }
      ],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": "new InputStream containing bytes of the file"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if canceled"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        }
      ]
    }
  ]
}
