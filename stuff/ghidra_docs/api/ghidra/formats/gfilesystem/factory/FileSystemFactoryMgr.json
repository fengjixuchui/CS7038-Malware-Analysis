{
  "name": "FileSystemFactoryMgr",
  "comment": "Statically scoped mugger that handles the dirty work of probing for and creating\n GFileSystem instances.\n \n Auto-discovers all GFileSystem instances in the classpath that have a\n FileSystemInfo annotation.\n ",
  "javadoc": "Statically scoped mugger that handles the dirty work of probing for and creating\n {@link GFileSystem} instances.\n \u003cp\u003e\n Auto-discovers all {@link GFileSystem} instances in the classpath that have a\n {@link FileSystemInfo} annotation.\n \u003cp\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "largestBytesRequired",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "sortedFactories",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.formats.gfilesystem.factory.FileSystemInfoRec\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "fsByType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.formats.gfilesystem.factory.FileSystemInfoRec\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getInstance",
      "comment": "",
      "javadoc": "\u003cp\u003e\n@return The single global {@link FileSystemFactoryMgr} instance.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.factory.FileSystemFactoryMgr",
        "type_short": "FileSystemFactoryMgr",
        "comment": "The single global FileSystemFactoryMgr instance."
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Private constructor.  Use FileSystemFactoryMgr#getInstance() to retrieve\n the singleton.",
      "javadoc": "Private constructor.  Use {@link FileSystemFactoryMgr#getInstance()} to retrieve\n the singleton.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fsClass",
          "type_long": "java.lang.Class\u003c? extends ghidra.formats.gfilesystem.GFileSystem\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllFilesystemNames",
      "comment": "Returns a list of all registered filesystem implementation descriptions.",
      "javadoc": "Returns a list of all registered filesystem implementation descriptions.\n@return list of strings",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "list of strings"
      },
      "throws": []
    },
    {
      "name": "getFileSystemType",
      "comment": "Returns the file system type of the specified GFileSystem class.",
      "javadoc": "Returns the file system type of the specified {@link GFileSystem} class.\n@param fsClass Class to inspect\n@return String file system type, from the {@link FileSystemInfo#type()} annotation.",
      "static": false,
      "params": [
        {
          "name": "fsClass",
          "type_long": "java.lang.Class\u003c? extends ghidra.formats.gfilesystem.GFileSystem\u003e",
          "type_short": "Class",
          "comment": "Class to inspect"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String file system type, from the FileSystemInfo#type() annotation."
      },
      "throws": []
    },
    {
      "name": "mountFileSystem",
      "comment": "Creates a new GFileSystem instance when the filesystem type is already\n known, consuming the specified ByteProvider.\n ",
      "javadoc": "Creates a new {@link GFileSystem} instance when the filesystem type is already\n known, consuming the specified ByteProvider.\n \u003cp\u003e\n@param fsType filesystem type string, ie. \"file\", \"zip\".\n@param byteProvider {@link ByteProvider}, will be owned by the new file system\n@param fsService reference to the {@link FileSystemService} instance.\n@param monitor {@link TaskMonitor} to use for canceling and updating progress.\n@return new {@link GFileSystem} instance.\n@throws IOException if error when opening the filesystem or unknown fsType.\n@throws CancelledException if the user canceled the operation.",
      "static": false,
      "params": [
        {
          "name": "fsType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "filesystem type string, ie. \"file\", \"zip\"."
        },
        {
          "name": "byteProvider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "ByteProvider, will be owned by the new file system"
        },
        {
          "name": "fsService",
          "type_long": "ghidra.formats.gfilesystem.FileSystemService",
          "type_short": "FileSystemService",
          "comment": "reference to the FileSystemService instance."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to use for canceling and updating progress."
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFileSystem",
        "type_short": "GFileSystem",
        "comment": "new GFileSystem instance."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error when opening the filesystem or unknown fsType."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user canceled the operation."
        }
      ]
    },
    {
      "name": "mountUsingFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fsir",
          "type_long": "ghidra.formats.gfilesystem.factory.FileSystemInfoRec",
          "type_short": "FileSystemInfoRec",
          "comment": ""
        },
        {
          "name": "byteProvider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "targetFSRL",
          "type_long": "ghidra.formats.gfilesystem.FSRLRoot",
          "type_short": "FSRLRoot",
          "comment": ""
        },
        {
          "name": "fsService",
          "type_long": "ghidra.formats.gfilesystem.FileSystemService",
          "type_short": "FileSystemService",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFileSystem",
        "type_short": "GFileSystem",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "test",
      "comment": "Returns true if the specified file contains a supported GFileSystem.\n ",
      "javadoc": "Returns true if the specified file contains a supported {@link GFileSystem}.\n \u003cp\u003e\n@param byteProvider\n@param fsService reference to the {@link FileSystemService} instance.\n@param monitor {@link TaskMonitor} to use for canceling and updating progress.\n@return {@code true} if the file seems to contain a filesystem, {@code false} if it does not.\n@throws IOException if error when accessing the containing file\n@throws CancelledException if the user canceled the operation",
      "static": false,
      "params": [
        {
          "name": "byteProvider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "fsService",
          "type_long": "ghidra.formats.gfilesystem.FileSystemService",
          "type_short": "FileSystemService",
          "comment": "reference to the FileSystemService instance."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to use for canceling and updating progress."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": " if the file seems to contain a filesystem,  if it does not."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error when accessing the containing file"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user canceled the operation"
        }
      ]
    },
    {
      "name": "probe",
      "comment": "Probes the specified file for a supported GFileSystem implementation, and\n if found, creates a new filesystem instance.\n ",
      "javadoc": "Probes the specified file for a supported {@link GFileSystem} implementation, and\n if found, creates a new filesystem instance.\n \u003cp\u003e\n@param containerFSRL {@link FSRL} of the containing file.\n@param containerFile {@link File} the containing file.\n@param fsService reference to the {@link FileSystemService} instance.\n@param conflictResolver {@link FileSystemProbeConflictResolver conflict resolver} to\n use when more than one {@link GFileSystem} implementation can handle the specified\n file.\n@param monitor {@link TaskMonitor} to use for canceling and updating progress.\n@return new {@link GFileSystem} instance or null not supported.\n@throws IOException if error accessing the containing file\n@throws CancelledException if the user cancels the operation",
      "static": false,
      "params": [
        {
          "name": "byteProvider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "fsService",
          "type_long": "ghidra.formats.gfilesystem.FileSystemService",
          "type_short": "FileSystemService",
          "comment": "reference to the FileSystemService instance."
        },
        {
          "name": "conflictResolver",
          "type_long": "ghidra.formats.gfilesystem.FileSystemProbeConflictResolver",
          "type_short": "FileSystemProbeConflictResolver",
          "comment": "FileSystemProbeConflictResolver to\n use when more than one GFileSystem implementation can handle the specified\n file."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to use for canceling and updating progress."
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFileSystem",
        "type_short": "GFileSystem",
        "comment": "new GFileSystem instance or null not supported."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error accessing the containing file"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels the operation"
        }
      ]
    },
    {
      "name": "probe",
      "comment": "Probes the specified file for a supported GFileSystem implementation, and\n if found, creates a new filesystem instance.  The ByteProvider is owned by the new\n file system.\n ",
      "javadoc": "Probes the specified file for a supported {@link GFileSystem} implementation, and\n if found, creates a new filesystem instance.  The ByteProvider is owned by the new\n file system.\n \u003cp\u003e\n@param byteProvider container {@link ByteProvider}, will be owned by the new filesystem\n@param fsService reference to the {@link FileSystemService} instance.\n@param conflictResolver {@link FileSystemProbeConflictResolver conflict resolver} to\n use when more than one {@link GFileSystem} implementation can handle the specified\n file.\n@param priorityFilter limits the probe to filesystems that have a {@link FileSystemInfo#priority()}\n greater than or equal to this value.  Use {@link FileSystemInfo#PRIORITY_LOWEST} to\n include all filesystem implementations.\n@param monitor {@link TaskMonitor} to use for canceling and updating progress.\n@return new {@link GFileSystem} instance or null not supported.\n@throws IOException if error accessing the containing file\n@throws CancelledException if the user cancels the operation",
      "static": false,
      "params": [
        {
          "name": "byteProvider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "container ByteProvider, will be owned by the new filesystem"
        },
        {
          "name": "fsService",
          "type_long": "ghidra.formats.gfilesystem.FileSystemService",
          "type_short": "FileSystemService",
          "comment": "reference to the FileSystemService instance."
        },
        {
          "name": "conflictResolver",
          "type_long": "ghidra.formats.gfilesystem.FileSystemProbeConflictResolver",
          "type_short": "FileSystemProbeConflictResolver",
          "comment": "FileSystemProbeConflictResolver to\n use when more than one GFileSystem implementation can handle the specified\n file."
        },
        {
          "name": "priorityFilter",
          "type_long": "int",
          "type_short": "int",
          "comment": "limits the probe to filesystems that have a FileSystemInfo#priority()\n greater than or equal to this value.  Use FileSystemInfo#PRIORITY_LOWEST to\n include all filesystem implementations."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to use for canceling and updating progress."
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFileSystem",
        "type_short": "GFileSystem",
        "comment": "new GFileSystem instance or null not supported."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error accessing the containing file"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels the operation"
        }
      ]
    }
  ]
}
