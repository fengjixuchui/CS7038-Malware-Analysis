{
  "name": "GFileSystemProbeByteProvider",
  "comment": "A GFileSystemProbe interface for filesystems that need to examine\n a ByteProvider.",
  "javadoc": "A {@link GFileSystemProbe} interface for filesystems that need to examine\n a {@link ByteProvider}.",
  "static": false,
  "implements": [
    "ghidra.formats.gfilesystem.factory.GFileSystemProbe"
  ],
  "fields": [],
  "methods": [
    {
      "name": "probe",
      "comment": "Probes the specified  to determine if this filesystem implementation\n can handle the file.",
      "javadoc": "Probes the specified {@code ByteProvider} to determine if this filesystem implementation\n can handle the file.\n@param byteProvider a {@link ByteProvider} containing the contents of the file being probed. \n Implementors of this method should \u003cb\u003eNOT\u003c/b\u003e {@link ByteProvider#close() close()} this\n object.\n@param fsService a reference to the {@link FileSystemService} object\n@param monitor a {@link TaskMonitor} that should be polled to see if the user has\n requested to cancel the operation, and updated with progress information.\n@return {@code true} if the specified file is handled by this filesystem implementation, \n {@code false} if not.\n@throws IOException if there is an error reading files.\n@throws CancelledException if the user cancels",
      "static": false,
      "params": [
        {
          "name": "byteProvider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "a ByteProvider containing the contents of the file being probed. \n Implementors of this method should NOT ByteProvider#close() this\n object."
        },
        {
          "name": "fsService",
          "type_long": "ghidra.formats.gfilesystem.FileSystemService",
          "type_short": "FileSystemService",
          "comment": "a reference to the FileSystemService object"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a TaskMonitor that should be polled to see if the user has\n requested to cancel the operation, and updated with progress information."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": " if the specified file is handled by this filesystem implementation, \n  if not."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an error reading files."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels"
        }
      ]
    }
  ]
}
