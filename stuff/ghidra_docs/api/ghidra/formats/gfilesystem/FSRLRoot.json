{
  "name": "FSRLRoot",
  "comment": "A type of FSRL that is specific to the filesystem\u0027s identity.\n\n A FSRL\u0027s parent is always a FSRLRoot.\n \n A FSRLRoot\u0027s parent is always a FSRL (ie. the container the filesystem data is in), or null.\n \n Examples of relationship between FSRL and FSRLRoots:\n \n \n \tFSRLRoot [ file:// ]\n\t  \"file://\"\n \t\n \t  \"file:///filename.txt\"\n  \n    \"file:///filename.txt|subfs://\"\n ",
  "javadoc": "A type of {@link FSRL} that is specific to the filesystem\u0027s identity.\n\n A FSRL\u0027s parent is always a FSRLRoot.\n \u003cp\u003e\n A FSRLRoot\u0027s parent is always a FSRL (ie. the container the filesystem data is in), or null.\n \u003cp\u003e\n Examples of relationship between FSRL and FSRLRoots:\n \u003cp\u003e\n \u003cul\u003e\n \t\u003cli\u003eFSRLRoot [ file:// ]\u003cbr\u003e\n\t  \"file://\"\n \t\u003cli\u003e{@literal FSRLRoot [ file:// ]  \u003c---- FSRL [ /filename.txt ]}\u003cbr\u003e\n \t  \"file:///filename.txt\"\n  \u003cli\u003e{@literal FSRLRoot [ file:// ]  \u003c---- FSRL [ /filename.txt ] \u003c--- FSRLRoot [ subfs:// ]}\u003cbr\u003e\n    \"file:///filename.txt|subfs://\"\n \u003c/ul\u003e",
  "static": false,
  "implements": [],
  "extends": "ghidra.formats.gfilesystem.FSRL",
  "fields": [
    {
      "name": "hashCode",
      "comment": "Cached hashcode.  There should be relatively few instances of FSRLRoot objects in\n memory (1 per active filesystem) so this has little memory impact.",
      "javadoc": "Cached hashcode.  There should be relatively few instances of FSRLRoot objects in\n memory (1 per active filesystem) so this has little memory impact.",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "makeRoot",
      "comment": "Creates a FSRLRoot without a parent container, using the supplied\n  string as its type.",
      "javadoc": "Creates a {@link FSRLRoot} without a parent container, using the supplied\n {@code protocol} string as its type.\n@param protocol string protocol name\n@return new {@link FSRLRoot} instance.",
      "static": true,
      "params": [
        {
          "name": "protocol",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string protocol name"
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRLRoot",
        "type_short": "FSRLRoot",
        "comment": "new FSRLRoot instance."
      },
      "throws": []
    },
    {
      "name": "nestedFS",
      "comment": "Creates a FSRLRoot as a child of a container FSRL, using the supplied\n  string as its type.",
      "javadoc": "Creates a {@link FSRLRoot} as a child of a container {@link FSRL}, using the supplied\n {@code protocol} string as its type.\n@param containerFile {@link FSRL} of the container that contains this nested filesystem.\n@param fstype the filesystem type.\n@return new {@link FSRLRoot} instance with a parent pointing to the specified containerFile.",
      "static": true,
      "params": [
        {
          "name": "containerFile",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "FSRL of the container that contains this nested filesystem."
        },
        {
          "name": "fstype",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the filesystem type."
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRLRoot",
        "type_short": "FSRLRoot",
        "comment": "new FSRLRoot instance with a parent pointing to the specified containerFile."
      },
      "throws": []
    },
    {
      "name": "nestedFS",
      "comment": "Create a copy of , but using a different  parent.\n \n (ie. re-parents copyFSRL so its parent is containerFile)",
      "javadoc": "Create a copy of {@code copyFSRL}, but using a different {@code containerFile} parent.\n \u003cp\u003e\n (ie. re-parents copyFSRL so its parent is containerFile)\n@param containerFile {@link FSRL} of new parent\n@param copyFSRL {@link FSRLRoot} that will be copied and re-parented.\n@return new {@link FSRLRoot}",
      "static": true,
      "params": [
        {
          "name": "containerFile",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "FSRL of new parent"
        },
        {
          "name": "copyFSRL",
          "type_long": "ghidra.formats.gfilesystem.FSRLRoot",
          "type_short": "FSRLRoot",
          "comment": "FSRLRoot that will be copied and re-parented."
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRLRoot",
        "type_short": "FSRLRoot",
        "comment": "new FSRLRoot"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Private constructor used by static factory methods.\n ",
      "javadoc": "Private constructor used by static factory methods.\n \u003cp\u003e\n@param parent {@link FSRL} parent\n@param protocol string filesystem type.",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "FSRL parent"
        },
        {
          "name": "protocol",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string filesystem type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFS",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRLRoot",
        "type_short": "FSRLRoot",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProtocol",
      "comment": "Returns the \"protocol\" portion of this FSRLRoot, for example, in a FSRLRoot of\n \"file://\", this method would return \"file\".\n ",
      "javadoc": "Returns the \"protocol\" portion of this FSRLRoot, for example, in a FSRLRoot of\n \"file://\", this method would return \"file\".\n \u003cp\u003e\n@return string protocol / filesystem type.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "string protocol / filesystem type."
      },
      "throws": []
    },
    {
      "name": "getContainer",
      "comment": "Returns the parent containerfile FSRL, or null if this FSRLRoot specifies\n a root-level filesystem.\n ",
      "javadoc": "Returns the parent containerfile FSRL, or null if this FSRLRoot specifies\n a root-level filesystem.\n \u003cp\u003e\n@return {@link FSRL} of the container object that this filesystem is nested under.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRL",
        "type_short": "FSRL",
        "comment": "FSRL of the container object that this filesystem is nested under."
      },
      "throws": []
    },
    {
      "name": "hasContainer",
      "comment": "Returns true if there is a parent containerfile, or false if this FSRLRoot specifies\n a root-level filesystem.",
      "javadoc": "Returns true if there is a parent containerfile, or false if this FSRLRoot specifies\n a root-level filesystem.\n@return boolean true if this {@link FSRLRoot} has a parent container, or false if not.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if this FSRLRoot has a parent container, or false if not."
      },
      "throws": []
    },
    {
      "name": "getPath",
      "comment": "Always returns null for a FSRLRoot.",
      "javadoc": "Always returns null for a FSRLRoot.\n@return null because this is a {@link FSRLRoot} instance which never has paths.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "null because this is a FSRLRoot instance which never has paths."
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Always returns null for a FSRLRoot.",
      "javadoc": "Always returns null for a FSRLRoot.\n@return null because this is a {@link FSRLRoot} instance which never has a path and\n therefore doesn\u0027t have a name part of a path.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "null because this is a FSRLRoot instance which never has a path and\n therefore doesn\u0027t have a name part of a path."
      },
      "throws": []
    },
    {
      "name": "withPathMD5",
      "comment": "Creates a new FSRL as a child of this FSRLRoot, using the supplied\n path and MD5 values.\n ",
      "javadoc": "Creates a new {@link FSRL} as a child of this {@link FSRLRoot}, using the supplied\n path and MD5 values.\n \u003cp\u003e\n@param newPath string path and filename of the object inside this filesystem, should\n not be null.\n@param newMD5 string md5 of the object inside this filesystem, null ok.\n@return new {@link FSRL} instance which is a child of this {@link FSRLRoot}.",
      "static": false,
      "params": [
        {
          "name": "newPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string path and filename of the object inside this filesystem, should\n not be null."
        },
        {
          "name": "newMD5",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string md5 of the object inside this filesystem, null ok."
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRL",
        "type_short": "FSRL",
        "comment": "new FSRL instance which is a child of this FSRLRoot."
      },
      "throws": []
    },
    {
      "name": "appendToStringBuilder",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sb",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "recurse",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "includeParams",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "includeFSRoot",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
