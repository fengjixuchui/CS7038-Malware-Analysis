{
  "name": "SingleFileSystemIndexHelper",
  "comment": "A helper class used by GFilesystem implementors that have a single file to handle lookups\n and requests for that file.\n \n This class is patterned on FileSystemIndexHelper and has pretty much the same api.",
  "javadoc": "A helper class used by GFilesystem implementors that have a single file to handle lookups\n and requests for that file.\n \u003cp\u003e\n This class is patterned on FileSystemIndexHelper and has pretty much the same api.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "rootDir",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.formats.gfilesystem.GFile",
      "type_short": "GFile",
      "constant_value": null
    },
    {
      "name": "payloadFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.formats.gfilesystem.GFileImpl",
      "type_short": "GFileImpl",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new instance.\n\n A \"root\" directory GFile will be auto-created for the filesystem.\n ",
      "javadoc": "Creates a new instance.\n\n A \"root\" directory GFile will be auto-created for the filesystem.\n \u003cp\u003e\n@param fs the {@link GFileSystem} that this index will be for.\n@param fsFSRL the {@link FSRLRoot fsrl} of the filesystem itself.\n (this parameter is explicitly passed here so there is no possibility of trying to call\n back to the fs\u0027s {@link GFileSystem#getFSRL()} on a half-constructed filesystem.)\n@param payloadFilename name of the single file that this filesystem holds.\n@param length length of the payload file.\n@param payloadMD5 md5 of the payload file.",
      "static": false,
      "params": [
        {
          "name": "fs",
          "type_long": "ghidra.formats.gfilesystem.GFileSystem",
          "type_short": "GFileSystem",
          "comment": "the GFileSystem that this index will be for."
        },
        {
          "name": "fsFSRL",
          "type_long": "ghidra.formats.gfilesystem.FSRLRoot",
          "type_short": "FSRLRoot",
          "comment": "the FSRLRoot of the filesystem itself.\n (this parameter is explicitly passed here so there is no possibility of trying to call\n back to the fs\u0027s GFileSystem#getFSRL() on a half-constructed filesystem.)"
        },
        {
          "name": "payloadFilename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the single file that this filesystem holds."
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "length of the payload file."
        },
        {
          "name": "payloadMD5",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "md5 of the payload file."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Clears the data held by this object.",
      "javadoc": "Clears the data held by this object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPayloadFile",
      "comment": "Returns true if the specified file is the payload file.",
      "javadoc": "Returns true if the specified file is the payload file.\n@param file GFile to test\n@return boolean true if it is the payload file",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "GFile to test"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if it is the payload file"
      },
      "throws": []
    },
    {
      "name": "isClosed",
      "comment": "Returns true if this object has been #clear()\u0027ed.",
      "javadoc": "Returns true if this object has been {@link #clear()}\u0027ed.\n@return boolean true if data has been cleared.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if data has been cleared."
      },
      "throws": []
    },
    {
      "name": "getPayloadFile",
      "comment": "Gets the \u0027payload\u0027 file, ie. the main file of this filesystem.",
      "javadoc": "Gets the \u0027payload\u0027 file, ie. the main file of this filesystem.\n@return {@link GFile} payload file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFile",
        "type_short": "GFile",
        "comment": "GFile payload file."
      },
      "throws": []
    },
    {
      "name": "getRootDirFSRL",
      "comment": "Gets the root dir\u0027s FSRL.",
      "javadoc": "Gets the root dir\u0027s FSRL.\n@return {@link FSRL} of the root dir.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRL",
        "type_short": "FSRL",
        "comment": "FSRL of the root dir."
      },
      "throws": []
    },
    {
      "name": "getRootDir",
      "comment": "Gets the root GFile object for this filesystem index.",
      "javadoc": "Gets the root {@link GFile} object for this filesystem index.\n@return root {@link GFile} object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFile",
        "type_short": "GFile",
        "comment": "root GFile object."
      },
      "throws": []
    },
    {
      "name": "getFileCount",
      "comment": "Number of files in this index.",
      "javadoc": "Number of files in this index.\n@return number of file in this index.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of file in this index."
      },
      "throws": []
    },
    {
      "name": "getListing",
      "comment": "Mirror\u0027s GFileSystem#getListing(GFile) interface.",
      "javadoc": "Mirror\u0027s {@link GFileSystem#getListing(GFile)} interface.\n@param directory {@link GFile} directory to get the list of child files that have been\n added to this index, null means root directory.\n@return {@link List} of GFile files that are in the specified directory, never null.\n@throws IOException if already closed.",
      "static": false,
      "params": [
        {
          "name": "directory",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": "GFile directory to get the list of child files that have been\n added to this index, null means root directory."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.formats.gfilesystem.GFile\u003e",
        "type_short": "List",
        "comment": "List of GFile files that are in the specified directory, never null."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if already closed."
        }
      ]
    },
    {
      "name": "lookup",
      "comment": "Mirror\u0027s GFileSystem#lookup(String) interface.",
      "javadoc": "Mirror\u0027s {@link GFileSystem#lookup(String)} interface.\n@param path path and filename of a file to find (either \"/\" for root or the payload file\u0027s\n path).\n@return {@link GFile} instance or null if requested path is not the same as\n the payload file.",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path and filename of a file to find (either \"/\" for root or the payload file\u0027s\n path)."
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFile",
        "type_short": "GFile",
        "comment": "GFile instance or null if requested path is not the same as\n the payload file."
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
