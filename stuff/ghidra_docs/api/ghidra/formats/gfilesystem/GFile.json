{
  "name": "GFile",
  "comment": "Represents a file in a GFileSystem.\n \n Only valid while the #getFilesystem() object is still open and not\n GFileSystem#close().\n ",
  "javadoc": "Represents a file in a {@link GFileSystem filesystem}.\n \u003cp\u003e\n Only valid while the {@link #getFilesystem() owning filesystem} object is still open and not\n {@link GFileSystem#close() closed}.\n \u003cp\u003e",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getFilesystem",
      "comment": "The GFileSystem that owns this file.",
      "javadoc": "The {@link GFileSystem} that owns this file.\n@return {@link GFileSystem} that owns this file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFileSystem",
        "type_short": "GFileSystem",
        "comment": "GFileSystem that owns this file."
      },
      "throws": []
    },
    {
      "name": "getFSRL",
      "comment": "The FSRL of this file.",
      "javadoc": "The {@link FSRL} of this file.\n@return {@link FSRL} of this file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRL",
        "type_short": "FSRL",
        "comment": "FSRL of this file."
      },
      "throws": []
    },
    {
      "name": "getParentFile",
      "comment": "The parent directory of this file.",
      "javadoc": "The parent directory of this file.\n@return parent {@link GFile} directory of this file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFile",
        "type_short": "GFile",
        "comment": "parent GFile directory of this file."
      },
      "throws": []
    },
    {
      "name": "getPath",
      "comment": "The path and filename of this file, relative to its owning filesystem.",
      "javadoc": "The path and filename of this file, relative to its owning filesystem.\n@return path and filename of this file, relative to its owning filesystem.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "path and filename of this file, relative to its owning filesystem."
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "The name of this file.",
      "javadoc": "The name of this file.\n@return name of this file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "name of this file."
      },
      "throws": []
    },
    {
      "name": "isDirectory",
      "comment": "Returns true if this is a directory.\n ",
      "javadoc": "Returns true if this is a directory.\n \u003cp\u003e\n@return boolean true if this file is a directory, false otherwise.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if this file is a directory, false otherwise."
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Returns the length of this file, or -1 if not known.",
      "javadoc": "Returns the length of this file, or -1 if not known.\n@return number of bytes in this file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "number of bytes in this file."
      },
      "throws": []
    },
    {
      "name": "getLastModified",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getListing",
      "comment": "Returns a listing of files in this sub-directory.\n ",
      "javadoc": "Returns a listing of files in this sub-directory.\n \u003cp\u003e\n@return {@link List} of {@link GFile} instances.\n@throws IOException if not a directory or error when accessing files.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.formats.gfilesystem.GFile\u003e",
        "type_short": "List",
        "comment": "List of GFile instances."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if not a directory or error when accessing files."
        }
      ]
    }
  ]
}
