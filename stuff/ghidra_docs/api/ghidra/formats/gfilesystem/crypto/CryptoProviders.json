{
  "name": "CryptoProviders",
  "comment": "Registry of CryptoProvider and #newSession().",
  "javadoc": "Registry of {@link CryptoProvider crypto providers} and {@link #newSession() session creator}.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "singletonInstance",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.formats.gfilesystem.crypto.CryptoProviders",
      "type_short": "CryptoProviders",
      "constant_value": null
    },
    {
      "name": "cachedCryptoProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.formats.gfilesystem.crypto.CachedPasswordProvider",
      "type_short": "CachedPasswordProvider",
      "constant_value": null
    },
    {
      "name": "cryptoProviders",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.formats.gfilesystem.crypto.CryptoProvider\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getInstance",
      "comment": "Fetch the global CryptoProviders singleton instance.",
      "javadoc": "Fetch the global {@link CryptoProviders} singleton instance.\n@return shared {@link CryptoProviders} singleton instance",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.crypto.CryptoProviders",
        "type_short": "CryptoProviders",
        "comment": "shared CryptoProviders singleton instance"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initPasswordCryptoProviders",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerCryptoProvider",
      "comment": "Adds a CryptoProvider to this registry.\n \n TODO: do we need provider priority ordering?",
      "javadoc": "Adds a {@link CryptoProvider} to this registry.\n \u003cp\u003e\n TODO: do we need provider priority ordering?\n@param provider {@link CryptoProvider}",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.formats.gfilesystem.crypto.CryptoProvider",
          "type_short": "CryptoProvider",
          "comment": "CryptoProvider"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "unregisterCryptoProvider",
      "comment": "Removes a CryptoProvider from this registry.",
      "javadoc": "Removes a {@link CryptoProvider} from this registry.\n@param provider {@link CryptoProvider} to remove",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.formats.gfilesystem.crypto.CryptoProvider",
          "type_short": "CryptoProvider",
          "comment": "CryptoProvider to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCachedCryptoProvider",
      "comment": "Returns the CachedPasswordProvider.\n \n (Used by GUI actions to manage the cache)",
      "javadoc": "Returns the {@link CachedPasswordProvider}.\n \u003cp\u003e\n (Used by GUI actions to manage the cache)\n@return cached crypto provider instance",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.crypto.CachedPasswordProvider",
        "type_short": "CachedPasswordProvider",
        "comment": "cached crypto provider instance"
      },
      "throws": []
    },
    {
      "name": "getCryptoProviderInstance",
      "comment": "Returns the previously registered matching CryptoProvider instance.",
      "javadoc": "Returns the previously registered matching {@link CryptoProvider} instance.\n@param \u003cT\u003e CryptoProvider type\n@param providerClass {@link CryptoProvider} class\n@return previously registered CryptoProvider instance, or null if not found",
      "static": false,
      "params": [
        {
          "name": "providerClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "CryptoProvider class"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "previously registered CryptoProvider instance, or null if not found"
      },
      "throws": []
    },
    {
      "name": "newSession",
      "comment": "Creates a new CryptoSession.\n \n TODO: to truly be effective when multiple files\n are being opened (ie. batch import), nested sessions\n need to be implemented.",
      "javadoc": "Creates a new {@link CryptoSession}.\n \u003cp\u003e\n TODO: to truly be effective when multiple files\n are being opened (ie. batch import), nested sessions\n need to be implemented.\n@return new {@link CryptoSession} instance",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.crypto.CryptoSession",
        "type_short": "CryptoSession",
        "comment": "new CryptoSession instance"
      },
      "throws": []
    }
  ]
}
