{
  "name": "GFileSystemBase",
  "comment": "This is the original GFileSystem implementation abstract base class, with most of the\n initially implemented filesystem types extending this class.\n \n The new GFileSystem interface is being retro-fitted into this equation to support\n better probing and factory syntax, and new implementations should be based on\n the interface instead of extending this abstract class.\n \n NOTE:\n ALL GFileSystem sub-CLASSES MUST END IN \"FileSystem\".\n If not, the ClassSearcher will not find them.\n Yes, it is an implementation detail.\n \n GFileSystemBase instances are constructed when probing a container file and are queried\n with #isValid(TaskMonitor) to determine if the container file is handled\n by the GFileSystemBase subclass.\n The ByteProvider given to the constructor is not considered \u0027owned\u0027 by\n the GFileSystemBase instance until after it passes the #isValid(TaskMonitor)\n check and is #open(TaskMonitor).\n ",
  "javadoc": "This is the original GFileSystem implementation abstract base class, with most of the\n initially implemented filesystem types extending this class.\n \u003cp\u003e\n The new GFileSystem interface is being retro-fitted into this equation to support\n better probing and factory syntax, and new implementations should be based on\n the interface instead of extending this abstract class.\n \u003cp\u003e\n NOTE:\n ALL GFileSystem sub-CLASSES MUST END IN \"FileSystem\".\n If not, the ClassSearcher will not find them.\n Yes, it is an implementation detail.\n \u003cp\u003e\n GFileSystemBase instances are constructed when probing a container file and are queried\n with {@link #isValid(TaskMonitor)} to determine if the container file is handled\n by the GFileSystemBase subclass.\u003cp\u003e\n The {@link ByteProvider} given to the constructor is not considered \u0027owned\u0027 by\n the GFileSystemBase instance until after it passes the {@link #isValid(TaskMonitor) isValid}\n check and is {@link #open(TaskMonitor) opened}.\n \u003cp\u003e",
  "static": false,
  "implements": [
    "ghidra.formats.gfilesystem.GFileSystem"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "fileSystemName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "root",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.formats.gfilesystem.GFileImpl",
      "type_short": "GFileImpl",
      "constant_value": null
    },
    {
      "name": "provider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.ByteProvider",
      "type_short": "ByteProvider",
      "constant_value": null
    },
    {
      "name": "fsFSRL",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.formats.gfilesystem.FSRLRoot",
      "type_short": "FSRLRoot",
      "constant_value": null
    },
    {
      "name": "refManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.formats.gfilesystem.FileSystemRefManager",
      "type_short": "FileSystemRefManager",
      "constant_value": null
    },
    {
      "name": "fsService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.formats.gfilesystem.FileSystemService",
      "type_short": "FileSystemService",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fileSystemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFSRL",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRLRoot",
        "type_short": "FSRLRoot",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFSRL",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fsrl",
          "type_long": "ghidra.formats.gfilesystem.FSRLRoot",
          "type_short": "FSRLRoot",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFilesystemService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fsService",
          "type_long": "ghidra.formats.gfilesystem.FileSystemService",
          "type_short": "FileSystemService",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValid",
      "comment": "Returns true if this file system implementation\n can handle the bytes provided.\n This method should perform the minimal amount of\n checks required to determine validity.\n Keep it quick and tight!",
      "javadoc": "Returns true if this file system implementation\n can handle the bytes provided.\n This method should perform the minimal amount of\n checks required to determine validity.\n Keep it quick and tight!\n@param monitor a task monitor\n@return true if valid for the byte provider\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a task monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if valid for the byte provider"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "open",
      "comment": "Opens the file system.",
      "javadoc": "Opens the file system.\n@throws IOException if an I/O error occurs\n@throws CryptoException if an encryption error occurs",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        },
        {
          "type_long": "ghidra.util.exception.CryptoException",
          "type_short": "CryptoException",
          "comment": "if an encryption error occurs"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "close",
      "comment": "Closes the file system.\n All resources should be released. (programs, temporary files, etc.)",
      "javadoc": "Closes the file system.\n All resources should be released. (programs, temporary files, etc.)\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "isClosed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the name of this file system.",
      "javadoc": "Returns the name of this file system.\n@return the name of this file system",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of this file system"
      },
      "throws": []
    },
    {
      "name": "getListing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "directory",
          "type_long": "ghidra.formats.gfilesystem.GFile",
          "type_short": "GFile",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.formats.gfilesystem.GFile\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "debug",
      "comment": "Writes the given bytes to a tempfile in the temp directory.",
      "javadoc": "Writes the given bytes to a tempfile in the temp directory.\n@param bytes the bytes to write\n@param fileName the prefix of the temp file name",
      "static": false,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the bytes to write"
        },
        {
          "name": "fileName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the prefix of the temp file name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lookup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.GFile",
        "type_short": "GFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRefManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FileSystemRefManager",
        "type_short": "FileSystemRefManager",
        "comment": ""
      },
      "throws": []
    }
  ]
}
