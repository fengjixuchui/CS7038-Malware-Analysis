{
  "name": "StackFrameImpl",
  "comment": "Implements a simple stack frame for a function.  Each frame consists of a\n local sections, parameter section, and save information (return address,\n saved registers).\n\n  When a frame is created, the parameter stack start offset must be set up.\n If the parameter start is \u003d 0, then the stack grows in the negative\n direction. If the parameter start  0, then the stack grows in the positive\n direction. When a frame is created the parameter start offset must be\n specified. Later the parameter start offset can be changed, but it must\n remain positive/negative if the frame was created with a positive/negative\n value.\n \n WARNING! This implementation is deficient and is only used by the UndefinedFunction\n implementation",
  "javadoc": "\u003cp\u003eImplements a simple stack frame for a function.  Each frame consists of a\n local sections, parameter section, and save information (return address,\n saved registers).\n\u003c/p\u003e\n \u003cp\u003e When a frame is created, the parameter stack start offset must be set up.\n If the parameter start is \u0026gt;\u003d 0, then the stack grows in the negative\n direction. If the parameter start \u0026lt; 0, then the stack grows in the positive\n direction. When a frame is created the parameter start offset must be\n specified. Later the parameter start offset can be changed, but it must\n remain positive/negative if the frame was created with a positive/negative\n value.\n \u003c/p\u003e\n \u003cp\u003eWARNING! This implementation is deficient and is only used by the UndefinedFunction\n implementation",
  "static": false,
  "implements": [
    "ghidra.program.model.listing.StackFrame"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "emptyArray",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.listing.Variable[]",
      "type_short": "ghidra.program.model.listing.Variable[]",
      "constant_value": null
    },
    {
      "name": "localSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "returnStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "variables",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.listing.Variable\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "function",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Function",
      "type_short": "Function",
      "constant_value": null
    },
    {
      "name": "paramStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "growsNegative",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new Stack Frame.\n Stack characteristics are established at time of construction \n (e.g., parameter offset, negative-growth, etc.).",
      "javadoc": "Creates a new Stack Frame.\n Stack characteristics are established at time of construction \n (e.g., parameter offset, negative-growth, etc.).",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "variableChanged",
      "comment": "A variable owned by this stack changed, notify someone.",
      "javadoc": "A variable owned by this stack changed, notify someone.\n@param stackVar the variable that changed.",
      "static": false,
      "params": [
        {
          "name": "stackVar",
          "type_long": "ghidra.program.model.listing.LocalVariableImpl",
          "type_short": "LocalVariableImpl",
          "comment": "the variable that changed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createVariable",
      "comment": "Create a new stack variable.  \n \n Specified source is always ignored\n and the variable instance returned will never be a parameter.",
      "javadoc": "Create a new stack variable.  \n \n Specified source is always ignored\n and the variable instance returned will never be a parameter.\n@see ghidra.program.model.listing.StackFrame#createVariable(String, int, DataType, SourceType)",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable",
        "type_short": "Variable",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getStackVariables",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLocals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParameters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFrameSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLocalSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "growsNegative",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLocalSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParameterSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParameterCount",
      "comment": "Gets the number of parameters in the stack frame regardless\n of the direction the stack grows in.",
      "javadoc": "Gets the number of parameters in the stack frame regardless\n of the direction the stack grows in.\n@return the number of parameters in the stack frame.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of parameters in the stack frame."
      },
      "throws": []
    },
    {
      "name": "clearVariable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParameterOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isParameterOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReturnAddressOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setReturnAddressOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVariableContaining",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable",
        "type_short": "Variable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNegativeSize",
      "comment": "Get the size of the negative portion of the stack",
      "javadoc": "Get the size of the negative portion of the stack\n@return the negative portion size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the negative portion size"
      },
      "throws": []
    },
    {
      "name": "getPositiveSize",
      "comment": "Get the size of the positive portion of the stack (including 0)",
      "javadoc": "Get the size of the positive portion of the stack (including 0)\n@return the positive portion size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the positive portion size"
      },
      "throws": []
    },
    {
      "name": "getNegativeVariables",
      "comment": "Get all the stack variables in the negative portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.",
      "javadoc": "Get all the stack variables in the negative portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.\n@return an array of variables defined on the negative portion of the frame.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": "an array of variables defined on the negative portion of the frame."
      },
      "throws": []
    },
    {
      "name": "getAllVariables",
      "comment": "Method getAllVariables.",
      "javadoc": "Method getAllVariables.\n@return StackVariable[]",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": "StackVariable[]"
      },
      "throws": []
    },
    {
      "name": "getPositiveVariables",
      "comment": "Get all the stack variables in the positive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.",
      "javadoc": "Get all the stack variables in the positive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.\n@return an array of variables defined on the positive portion of the frame.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": "an array of variables defined on the positive portion of the frame."
      },
      "throws": []
    },
    {
      "name": "getNegativeCount",
      "comment": "Get a count of all the stack variables in the negative portion of the frame.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.",
      "javadoc": "Get a count of all the stack variables in the negative portion of the frame.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPositiveCount",
      "comment": "Get all the stack variables in the postive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.",
      "javadoc": "Get all the stack variables in the postive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.\n@return an array of variables defined on the positive portion of the frame.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "an array of variables defined on the positive portion of the frame."
      },
      "throws": []
    },
    {
      "name": "getFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "Returns whether some other stack frame is \"equivalent to\" this one.\n The stack frame is considered equal to another even if they are each\n part of a different function.",
      "javadoc": "Returns whether some other stack frame is \"equivalent to\" this one.\n The stack frame is considered equal to another even if they are each\n part of a different function.\n@param obj the object to compare for equality.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the object to compare for equality."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
