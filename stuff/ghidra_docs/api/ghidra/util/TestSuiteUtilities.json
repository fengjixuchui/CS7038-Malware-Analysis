{
  "name": "TestSuiteUtilities",
  "comment": "A set of static utilities to facilitate JUnit testing.",
  "javadoc": "A set of static utilities to facilitate JUnit testing.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "JAR_FILE_SEPARATOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "char",
      "type_short": "char",
      "constant_value": "/"
    },
    {
      "name": "TEST_CASE_CLASS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.Class\u003c?\u003e",
      "type_short": "Class",
      "constant_value": null
    },
    {
      "name": "ALL_TESTS_CODE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"package %PACKAGE%;\nimport ghidra.util.TestUtilities;\nimport junit.framework.Test;\n\n/**\n * Generic test suite for single package.\n */\npublic class %CLASSNAME% {\n\tpublic static Test suite() {\n\t\t%CLASSNAME% testAll \u003d new %CLASSNAME%();\n\t\treturn TestUtilities.getPkgTestSuite(testAll.getClass().getPackage().getName());\n\t}\n}\n\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createTestClass",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003c?\u003e",
        "type_short": "Class",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTestSuite",
      "comment": "Build JUnit test suite for the specified package.\n TestSuite includes sub-TestSuites for each sub-package.",
      "javadoc": "Build JUnit test suite for the specified package.\n TestSuite includes sub-TestSuites for each sub-package.\n@param pkgName the java package name\n@return test suite",
      "static": true,
      "params": [
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the java package name"
        }
      ],
      "return": {
        "type_long": "junit.framework.TestSuite",
        "type_short": "TestSuite",
        "comment": "test suite"
      },
      "throws": []
    },
    {
      "name": "getPkgTestSuite",
      "comment": "Build JUnit test suite for the specified package only.",
      "javadoc": "Build JUnit test suite for the specified package only.\n@param pkgName the java package name\n@return test suite",
      "static": true,
      "params": [
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the java package name"
        }
      ],
      "return": {
        "type_long": "junit.framework.TestSuite",
        "type_short": "TestSuite",
        "comment": "test suite"
      },
      "throws": []
    },
    {
      "name": "getTestSuite",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "recurse",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "junit.framework.TestSuite",
        "type_short": "TestSuite",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasTests",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "recurse",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getClassNames",
      "comment": "Get all class names within the named package which extend or implement the \n specified search class.",
      "javadoc": "Get all class names within the named package which extend or implement the \n specified search class.\n@param pkgName package name\n@param searchClass base or interface class to search for.",
      "static": true,
      "params": [
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "package name"
        },
        {
          "name": "searchClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "base or interface class to search for."
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cjava.lang.String\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findClassesInPath",
      "comment": "Find and add to classNames, all classes within the classpath and the specified package \n which extend or implement the specified searchClass.",
      "javadoc": "Find and add to classNames, all classes within the classpath and the specified package \n which extend or implement the specified searchClass.\n@param classPath directory path that is from CLASSPATH\n@param pkgName name of package\n@param searchClass base or interface class to search for.\n@param classNames set of unique class names",
      "static": true,
      "params": [
        {
          "name": "classPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "directory path that is from CLASSPATH"
        },
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of package"
        },
        {
          "name": "searchClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "base or interface class to search for."
        },
        {
          "name": "classNames",
          "type_long": "java.util.HashSet\u003cjava.lang.String\u003e",
          "type_short": "HashSet",
          "comment": "set of unique class names"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findClassesInJar",
      "comment": "Find and add to classNames, all classes within a jar file and the specified package \n which extend or implement the specified searchClass.",
      "javadoc": "Find and add to classNames, all classes within a jar file and the specified package \n which extend or implement the specified searchClass.\n@param jarFilename jar filename\n@param pkgName name of package\n@param searchClass base or interface class to search for.\n@param classNames set of unique class names",
      "static": true,
      "params": [
        {
          "name": "jarFilename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "jar filename"
        },
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of package"
        },
        {
          "name": "searchClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "base or interface class to search for."
        },
        {
          "name": "classNames",
          "type_long": "java.util.HashSet\u003cjava.lang.String\u003e",
          "type_short": "HashSet",
          "comment": "set of unique class names"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createClassName",
      "comment": "Create a java class name from the given filename and class path.",
      "javadoc": "Create a java class name from the given filename and class path.\n@param filename filename that has the class path pre-pended to it.\n@param pkgName name of package\n@param fileSep file separator used within filename (\u0027/\u0027 or \u0027\\\u0027).\n@return String",
      "static": true,
      "params": [
        {
          "name": "filename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "filename that has the class path pre-pended to it."
        },
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of package"
        },
        {
          "name": "fileSep",
          "type_long": "char",
          "type_short": "char",
          "comment": "file separator used within filename (\u0027/\u0027 or \u0027\\\u0027)."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String"
      },
      "throws": []
    },
    {
      "name": "isClassOfInterest",
      "comment": "Return true if c is a derivative of the filter class \n and is not abstract.",
      "javadoc": "Return true if c is a derivative of the filter class \n and is not abstract.",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "searchClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSubPkgNames",
      "comment": "Get all potential package names within the named package.",
      "javadoc": "Get all potential package names within the named package.\n@param pkgName package name",
      "static": true,
      "params": [
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "package name"
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cjava.lang.String\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findPkgsInPath",
      "comment": "Find and add to pkgNames, all packages contained within the specified package",
      "javadoc": "Find and add to pkgNames, all packages contained within the specified package\n@param classPath directory path that is from CLASSPATH\n@param pkgName name of package\n@param searchClass base or interface class to search for.\n@param classNames set of unique class names",
      "static": true,
      "params": [
        {
          "name": "classPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "directory path that is from CLASSPATH"
        },
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of package"
        },
        {
          "name": "pkgNames",
          "type_long": "java.util.HashSet\u003cjava.lang.String\u003e",
          "type_short": "HashSet",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findPkgsInJar",
      "comment": "Find and add to pkgNames, all packages contained within the specified package\n which contain an AllTests class.",
      "javadoc": "Find and add to pkgNames, all packages contained within the specified package\n which contain an AllTests class.\n@param jarFilename jar filename\n@param pkgName name of package\n@param searchClass base or interface class to search for.\n@param classNames set of unique class names",
      "static": true,
      "params": [
        {
          "name": "jarFilename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "jar filename"
        },
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of package"
        },
        {
          "name": "pkgNames",
          "type_long": "java.util.HashSet\u003cjava.lang.String\u003e",
          "type_short": "HashSet",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createTestSuites",
      "comment": "Create the Java source file a JUnit TestSuite which \n includes all TestCases within a package directory.",
      "javadoc": "Create the Java source file a JUnit TestSuite which \n includes all TestCases within a package directory.\n@param baseDir the base package directory\n@param className the class name\n@param pkgName the java package name\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "baseDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the base package directory"
        },
        {
          "name": "className",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the class name"
        },
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the java package name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createTestSuites",
      "comment": "Create the Java source file a JUnit TestSuite which \n includes all TestCases within a package directory.",
      "javadoc": "Create the Java source file a JUnit TestSuite which \n includes all TestCases within a package directory.\n@param baseDir\n@param className\n@param pkgName\n@param recurse",
      "static": true,
      "params": [
        {
          "name": "baseDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "className",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "recurse",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "makeDir",
      "comment": "Make the directory which corresponds to the specified package.",
      "javadoc": "Make the directory which corresponds to the specified package.\n@param baseDir\n@param pkgName\n@return package directory",
      "static": true,
      "params": [
        {
          "name": "baseDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "pkgName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "package directory"
      },
      "throws": []
    },
    {
      "name": "main",
      "comment": "Command-line utilities.\n \n Parameter usage:\n ",
      "javadoc": "Command-line utilities.\n \u003cp\u003e\n Parameter usage:\n \u003cpre\u003e{@literal\n    createAllTests \u003cbaseDirPath\u003e \u003cclassName\u003e \u003ctopPackage\u003e\n }\u003c/pre\u003e\n@param args",
      "static": true,
      "params": [
        {
          "name": "args",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
