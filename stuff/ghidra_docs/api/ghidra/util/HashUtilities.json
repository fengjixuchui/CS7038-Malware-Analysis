{
  "name": "HashUtilities",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "MD5_ALGORITHM",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "SHA256_ALGORITHM",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "SALT_LENGTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "MD5_UNSALTED_HASH_LENGTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32"
    },
    {
      "name": "MD5_SALTED_HASH_LENGTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "36"
    },
    {
      "name": "SHA256_UNSALTED_HASH_LENGTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "64"
    },
    {
      "name": "SHA256_SALTED_HASH_LENGTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "68"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRandomLetterOrDigit",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "char",
        "type_short": "char",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHash",
      "comment": "Generate hash in a hex character representation",
      "javadoc": "Generate hash in a hex character representation\n@param algorithm message digest algorithm\n@param msg message text\n@return hex hash value in text format\n@throws IllegalArgumentException if specified algorithm is not supported\n@see MessageDigest for supported algorithms",
      "static": true,
      "params": [
        {
          "name": "algorithm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "message digest algorithm"
        },
        {
          "name": "msg",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": "message text"
        }
      ],
      "return": {
        "type_long": "char[]",
        "type_short": "char[]",
        "comment": "hex hash value in text format"
      },
      "throws": []
    },
    {
      "name": "getSaltedHash",
      "comment": "Generate salted hash for specified message.  Supplied salt is \n returned as prefix to returned hash.",
      "javadoc": "Generate salted hash for specified message.  Supplied salt is \n returned as prefix to returned hash.\n@param algorithm message digest algorithm\n@param salt digest salt (use empty string for no salt)\n@param msg message text\n@return salted hash using specified salt which is\n returned as a prefix to the hash\n@throws IllegalArgumentException if specified algorithm is not supported\n@see MessageDigest for supported hash algorithms",
      "static": true,
      "params": [
        {
          "name": "algorithm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "message digest algorithm"
        },
        {
          "name": "salt",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": "digest salt (use empty string for no salt)"
        },
        {
          "name": "msg",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": "message text"
        }
      ],
      "return": {
        "type_long": "char[]",
        "type_short": "char[]",
        "comment": "salted hash using specified salt which is\n returned as a prefix to the hash"
      },
      "throws": []
    },
    {
      "name": "getSaltedHash",
      "comment": "Generate salted hash for specified message using random salt.  \n First 4-characters of returned hash correspond to the salt data.",
      "javadoc": "Generate salted hash for specified message using random salt.  \n First 4-characters of returned hash correspond to the salt data.\n@param algorithm message digest algorithm\n@param msg message text\n@return salted hash using randomly generated salt which is\n returned as a prefix to the hash\n@throws IllegalArgumentException if specified algorithm is not supported\n@see MessageDigest for supported hash algorithms",
      "static": true,
      "params": [
        {
          "name": "algorithm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "message digest algorithm"
        },
        {
          "name": "msg",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": "message text"
        }
      ],
      "return": {
        "type_long": "char[]",
        "type_short": "char[]",
        "comment": "salted hash using randomly generated salt which is\n returned as a prefix to the hash"
      },
      "throws": []
    },
    {
      "name": "getHash",
      "comment": "Generate message digest hash for specified input stream.  Stream will be read\n until EOF is reached.",
      "javadoc": "Generate message digest hash for specified input stream.  Stream will be read\n until EOF is reached.\n@param algorithm message digest algorithm\n@param in input stream\n@return message digest hash\n@throws IOException if reading input stream produces an error\n@throws IllegalArgumentException if specified algorithm is not supported\n@see MessageDigest for supported hash algorithms",
      "static": true,
      "params": [
        {
          "name": "algorithm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "message digest algorithm"
        },
        {
          "name": "in",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "input stream"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "message digest hash"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if reading input stream produces an error"
        }
      ]
    },
    {
      "name": "getHash",
      "comment": "Generate message digest hash for specified file contents.",
      "javadoc": "Generate message digest hash for specified file contents.\n@param algorithm message digest algorithm\n@param file file to be read\n@return message digest hash\n@throws IOException if opening or reading file produces an error\n@throws IllegalArgumentException if specified algorithm is not supported\n@see MessageDigest for supported hash algorithms",
      "static": true,
      "params": [
        {
          "name": "algorithm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "message digest algorithm"
        },
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "file to be read"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "message digest hash"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if opening or reading file produces an error"
        }
      ]
    },
    {
      "name": "getHash",
      "comment": "Generate combined message digest hash for all values in the \n specified values list.",
      "javadoc": "Generate combined message digest hash for all values in the \n specified values list.\n@param algorithm message digest algorithm\n@param values list of text strings\n@return message digest hash\n@throws IllegalArgumentException if specified algorithm is not supported\n@see MessageDigest for supported hash algorithms",
      "static": true,
      "params": [
        {
          "name": "algorithm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "message digest algorithm"
        },
        {
          "name": "values",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": "list of text strings"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "message digest hash"
      },
      "throws": []
    },
    {
      "name": "getHash",
      "comment": "Generate combined message digest hash for the bytes in the specified array.",
      "javadoc": "Generate combined message digest hash for the bytes in the specified array.\n@param algorithm message digest algorithm\n@param values array of bytes to hash\n@return message digest hash\n@throws IllegalArgumentException if specified algorithm is not supported\n@see MessageDigest for supported hash algorithms",
      "static": true,
      "params": [
        {
          "name": "algorithm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "message digest algorithm"
        },
        {
          "name": "values",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array of bytes to hash"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "message digest hash"
      },
      "throws": []
    },
    {
      "name": "getMessageDigest",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "algorithm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.security.MessageDigest",
        "type_short": "MessageDigest",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hexDump",
      "comment": "Convert binary data to a sequence of hex characters.",
      "javadoc": "Convert binary data to a sequence of hex characters.\n@param data binary data\n@return hex character representation of data",
      "static": true,
      "params": [
        {
          "name": "data",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "binary data"
        }
      ],
      "return": {
        "type_long": "char[]",
        "type_short": "char[]",
        "comment": "hex character representation of data"
      },
      "throws": []
    }
  ]
}
