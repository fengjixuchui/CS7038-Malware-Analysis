{
  "name": "NamingUtilities",
  "comment": "Utility class with static methods for validating project file names.",
  "javadoc": "Utility class with static methods for validating project file names.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "MAX_NAME_LENGTH",
      "comment": "Max length for a name.",
      "javadoc": "Max length for a name.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "60"
    },
    {
      "name": "MANGLE_CHAR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "char",
      "type_short": "char",
      "constant_value": "_"
    },
    {
      "name": "VALID_NAME_SET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Set\u003cjava.lang.Character\u003e",
      "type_short": "Set",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValidName",
      "comment": "Tests whether the given string is a valid.\n Rules:\n \n All characters must be a letter, digit (0..9), period, hyphen, underscore or space\n May not exceed a length of 60 characters\n ",
      "javadoc": "Tests whether the given string is a valid.\n Rules:\n \u003cul\u003e\n \u003cli\u003eAll characters must be a letter, digit (0..9), period, hyphen, underscore or space\u003c/li\u003e\n \u003cli\u003eMay not exceed a length of 60 characters\u003c/li\u003e\n \u003c/ul\u003e\n@param name name to validate\n@return true if specified name is valid, else false\n@deprecated method has been deprecated due to improper and widespread use.  \n New methods include {@link NamingUtilities#isValidProjectName(String)} and \n {@link LocalFileSystem#testValidName(String,boolean)}.",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name to validate"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if specified name is valid, else false"
      },
      "throws": []
    },
    {
      "name": "isValidProjectName",
      "comment": "Tests whether the given string is a valid project name.\n Rules:\n \n Name may not start with period\n All characters must be a letter, digit (0..9), period, hyphen, underscore or space\n May not exceed a length of 60 characters\n ",
      "javadoc": "Tests whether the given string is a valid project name.\n Rules:\n \u003cul\u003e\n \u003cli\u003eName may not start with period\u003c/li\u003e\n \u003cli\u003eAll characters must be a letter, digit (0..9), period, hyphen, underscore or space\u003c/li\u003e\n \u003cli\u003eMay not exceed a length of 60 characters\u003c/li\u003e\n \u003c/ul\u003e\n@param name name to validate\n@return true if specified name is valid, else false",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name to validate"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if specified name is valid, else false"
      },
      "throws": []
    },
    {
      "name": "findInvalidChar",
      "comment": "Find the invalid character in the given name.\n \n This method should only be used with #isValidName(String)} and not\n #isValidProjectName(String)",
      "javadoc": "Find the invalid character in the given name.\n \u003cp\u003e\n This method should only be used with {@link #isValidName(String)}} and \u003cb\u003enot\u003c/b\u003e\n {@link #isValidProjectName(String)}\n@param name the name with an invalid character\n@return the invalid character or 0 if no invalid character can be found\n@see #isValidName(String)\n@deprecated this method may be removed in a subsequent release due to \n limited use and applicability (project names and project file names have\n different naming restrictions).",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name with an invalid character"
        }
      ],
      "return": {
        "type_long": "char",
        "type_short": "char",
        "comment": "the invalid character or 0 if no invalid character can be found"
      },
      "throws": []
    },
    {
      "name": "mangle",
      "comment": "Returns a string such that all uppercase characters in the given string are\n replaced by the MANGLE_CHAR followed by the lowercase version of the character.\n MANGLE_CHARs are replaced by 2 MANGLE_CHARs.\n\n This method is to get around the STUPID windows problem where filenames are\n not case sensitive.  Under Windows, Foo.exe and foo.exe represent\n the same filename.  To fix this we mangle names first such that Foo.exe becomes\n _foo.exe.",
      "javadoc": "Returns a string such that all uppercase characters in the given string are\n replaced by the MANGLE_CHAR followed by the lowercase version of the character.\n MANGLE_CHARs are replaced by 2 MANGLE_CHARs.\n\n This method is to get around the STUPID windows problem where filenames are\n not case sensitive.  Under Windows, Foo.exe and foo.exe represent\n the same filename.  To fix this we mangle names first such that Foo.exe becomes\n _foo.exe.\n@param name name string to be mangled\n@return mangled name",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name string to be mangled"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "mangled name"
      },
      "throws": []
    },
    {
      "name": "demangle",
      "comment": "Performs the inverse of the mangle method.  A string is returned such that\n all characters following a MANGLE_CHAR are converted to uppercase.  Two MANGLE\n chars in a row are replace by a single MANGLE_CHAR.",
      "javadoc": "Performs the inverse of the mangle method.  A string is returned such that\n all characters following a MANGLE_CHAR are converted to uppercase.  Two MANGLE\n chars in a row are replace by a single MANGLE_CHAR.\n@param mangledName mangled name string\n@return demangle name",
      "static": true,
      "params": [
        {
          "name": "mangledName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "mangled name string"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "demangle name"
      },
      "throws": []
    },
    {
      "name": "isValidMangledName",
      "comment": "Performs a validity check on a mangled name",
      "javadoc": "Performs a validity check on a mangled name\n@param name mangled name\n@return true if name can be demangled else false",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "mangled name"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if name can be demangled else false"
      },
      "throws": []
    }
  ]
}
