{
  "name": "CopyOnWriteWeakSet",
  "comment": "A set that avoids ConcurrentModificationExceptions by copying the internal storage \n for every mutation operation.  Thus, this data structure is only efficient when the \n number of event notification operations significantly out numbers mutations to this structure\n (e.g., adding and removing items.\n \n An example use cases where using this class is a good fit would be a listener list where \n listeners are added during initialization, but not after that.   Further, this hypothetical \n list fires a large number of events.\n \n A bad use of this class would be as a container to store widgets where the container the \n contents are changed often, but iterated over very little.\n \n Finally, if this structure is only ever used from a single thread, like the Swing thread, then\n you do not need the overhead of this class, as the Swing thread synchronous access guarantees\n that the structure cannot be mutated while it is being iterated.  See \n WeakDataStructureFactory#createSingleThreadAccessWeakSet().",
  "javadoc": "A set that avoids {@link ConcurrentModificationException}s by copying the internal storage \n \u003cb\u003efor every mutation operation\u003c/b\u003e.  Thus, this data structure is only efficient when the \n number of event notification operations significantly out numbers mutations to this structure\n (e.g., adding and removing items.\n \u003cp\u003e\n An example use cases where using this class is a good fit would be a listener list where \n listeners are added during initialization, but not after that.   Further, this hypothetical \n list fires a large number of events.\n \u003cp\u003e\n A bad use of this class would be as a container to store widgets where the container the \n contents are changed often, but iterated over very little.\n \u003cp\u003e\n Finally, if this structure is only ever used from a single thread, like the Swing thread, then\n you do not need the overhead of this class, as the Swing thread synchronous access guarantees\n that the structure cannot be mutated while it is being iterated.  See \n {@link WeakDataStructureFactory#createSingleThreadAccessWeakSet()}.\n@param \u003cT\u003e\n@see WeakSet",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.datastruct.WeakSet",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "iterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cT\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "t",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "t",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "values",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cT\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "t",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
