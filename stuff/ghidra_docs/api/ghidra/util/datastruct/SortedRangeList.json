{
  "name": "SortedRangeList",
  "comment": "Provides a list of integer ranges that are maintained in sorted order. \n When a range is added any ranges that overlap or are adjacent to one another \n will coalesce into a single range.",
  "javadoc": "Provides a list of integer ranges that are maintained in sorted order. \n When a range is added any ranges that overlap or are adjacent to one another \n will coalesce into a single range.",
  "static": false,
  "implements": [
    "java.lang.Iterable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "set",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.TreeSet\u003cghidra.util.datastruct.Range\u003e",
      "type_short": "TreeSet",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new empty sorted range list.",
      "javadoc": "Creates a new empty sorted range list.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new sorted range list with ranges equivalent to those in the \n specified list.",
      "javadoc": "Creates a new sorted range list with ranges equivalent to those in the \n specified list.\n@param list the sorted range list to make an equivalent copy of.",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "ghidra.util.datastruct.SortedRangeList",
          "type_short": "SortedRangeList",
          "comment": "the sorted range list to make an equivalent copy of."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addRange",
      "comment": "Adds the range from min to max to this sorted range list.\n If the range is adjacent to or overlaps any other existing ranges,\n then those ranges will coalesce.",
      "javadoc": "Adds the range from min to max to this sorted range list.\n If the range is adjacent to or overlaps any other existing ranges,\n then those ranges will coalesce.\n@param min the range minimum\n@param max the range maximum (inclusive)",
      "static": false,
      "params": [
        {
          "name": "min",
          "type_long": "int",
          "type_short": "int",
          "comment": "the range minimum"
        },
        {
          "name": "max",
          "type_long": "int",
          "type_short": "int",
          "comment": "the range maximum (inclusive)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRanges",
      "comment": "Returns an iterator over all the ranges in this list.",
      "javadoc": "Returns an iterator over all the ranges in this list.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.util.datastruct.Range\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRanges",
      "comment": "Returns an iterator over all the ranges in this list that iterates in the direction specified.",
      "javadoc": "Returns an iterator over all the ranges in this list that iterates in the direction specified.\n@param forward true indicates to iterate forward from minimum to maximum range. \n false indicates backward iteration form maximum to minimum.",
      "static": false,
      "params": [
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates to iterate forward from minimum to maximum range. \n false indicates backward iteration form maximum to minimum."
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.util.datastruct.Range\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMin",
      "comment": "Returns the minimum int value in this sorted range list.",
      "javadoc": "Returns the minimum int value in this sorted range list.\n@throws NoSuchElementException if the list is empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.util.NoSuchElementException",
          "type_short": "NoSuchElementException",
          "comment": "if the list is empty."
        }
      ]
    },
    {
      "name": "getMax",
      "comment": "Returns the maximum int value in this sorted range list.",
      "javadoc": "Returns the maximum int value in this sorted range list.\n@throws NoSuchElementException if the list is empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.util.NoSuchElementException",
          "type_short": "NoSuchElementException",
          "comment": "if the list is empty."
        }
      ]
    },
    {
      "name": "getNumRanges",
      "comment": "Returns the number of ranges in the list.",
      "javadoc": "Returns the number of ranges in the list.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeRange",
      "comment": "Removes the indicated range of values from the list. This will remove \n any ranges or portion of ranges that overlap the indicated range.",
      "javadoc": "Removes the indicated range of values from the list. This will remove \n any ranges or portion of ranges that overlap the indicated range.\n@param min the minimum value for the range to remove.\n@param max the maximum value for the range to remove.",
      "static": false,
      "params": [
        {
          "name": "min",
          "type_long": "int",
          "type_short": "int",
          "comment": "the minimum value for the range to remove."
        },
        {
          "name": "max",
          "type_long": "int",
          "type_short": "int",
          "comment": "the maximum value for the range to remove."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "coalesce",
      "comment": "Coalesces any ranges that are adjacent to or overlap the indicated range.",
      "javadoc": "Coalesces any ranges that are adjacent to or overlap the indicated range.\n@param range the range to check for coalescing.\n@param it the iterator to use for coalescing.",
      "static": false,
      "params": [
        {
          "name": "range",
          "type_long": "ghidra.util.datastruct.Range",
          "type_short": "Range",
          "comment": "the range to check for coalescing."
        },
        {
          "name": "it",
          "type_long": "java.util.Iterator\u003cghidra.util.datastruct.Range\u003e",
          "type_short": "Iterator",
          "comment": "the iterator to use for coalescing."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Returns true if the value is contained in any ranges within this list.",
      "javadoc": "Returns true if the value is contained in any ranges within this list.\n@param value the value to check for.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the value to check for."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRangeContaining",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.datastruct.Range",
        "type_short": "Range",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Returns true if a single range contains all the values from min to max.",
      "javadoc": "Returns true if a single range contains all the values from min to max.\n@param min the minimum value\n@param max the maximum value",
      "static": false,
      "params": [
        {
          "name": "min",
          "type_long": "int",
          "type_short": "int",
          "comment": "the minimum value"
        },
        {
          "name": "max",
          "type_long": "int",
          "type_short": "int",
          "comment": "the maximum value"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRangeIndex",
      "comment": "Gets the range index for the range containing the specified value.",
      "javadoc": "Gets the range index for the range containing the specified value.\n@param value the value to look for.\n@return the range index or a negative value if the range list doesn\u0027t contain the value.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the value to look for."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the range index or a negative value if the range list doesn\u0027t contain the value."
      },
      "throws": []
    },
    {
      "name": "getRange",
      "comment": "Gets the nth range in this list as indicated by the value of index.",
      "javadoc": "Gets the nth range in this list as indicated by the value of index.\n@param index value indicating which nth range to get.\n@return the range or null if there is no such range in this list.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "value indicating which nth range to get."
        }
      ],
      "return": {
        "type_long": "ghidra.util.datastruct.Range",
        "type_short": "Range",
        "comment": "the range or null if there is no such range in this list."
      },
      "throws": []
    },
    {
      "name": "getNumValues",
      "comment": "Gets the total number of int values in this range.",
      "javadoc": "Gets the total number of int values in this range.\n@return the number of int values.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the number of int values."
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "Returns true if the range from min to max intersects (overlaps) any ranges in this sorted range list.",
      "javadoc": "Returns true if the range from min to max intersects (overlaps) any ranges in this sorted range list.\n@param min the range minimum value.\n@param max the range maximum value",
      "static": false,
      "params": [
        {
          "name": "min",
          "type_long": "int",
          "type_short": "int",
          "comment": "the range minimum value."
        },
        {
          "name": "max",
          "type_long": "int",
          "type_short": "int",
          "comment": "the range maximum value"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "Returns true if the range list is empty.",
      "javadoc": "Returns true if the range list is empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Removes all the ranges that are in the specified other list from this list.",
      "javadoc": "Removes all the ranges that are in the specified other list from this list.\n@param other the other sorted range list.",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.util.datastruct.SortedRangeList",
          "type_short": "SortedRangeList",
          "comment": "the other sorted range list."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "intersect",
      "comment": "Creates a new SortedRangeList that is the intersection of this range list and the other range list specified.",
      "javadoc": "Creates a new SortedRangeList that is the intersection of this range list and the other range list specified.\n@param other the other range list\n@return the new SortedRangeList representing the intersection.",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.util.datastruct.SortedRangeList",
          "type_short": "SortedRangeList",
          "comment": "the other range list"
        }
      ],
      "return": {
        "type_long": "ghidra.util.datastruct.SortedRangeList",
        "type_short": "SortedRangeList",
        "comment": "the new SortedRangeList representing the intersection."
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "iterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.util.datastruct.Range\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
