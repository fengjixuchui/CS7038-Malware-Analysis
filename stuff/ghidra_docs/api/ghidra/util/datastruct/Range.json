{
  "name": "Range",
  "comment": "A class for holding a minimum and maximum signed int values that define a range.",
  "javadoc": "A class for holding a minimum and maximum signed int values that define a range.",
  "static": false,
  "implements": [
    "java.lang.Comparable",
    "java.lang.Iterable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "min",
      "comment": "The range\u0027s minimum extent.",
      "javadoc": "The range\u0027s minimum extent.",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "max",
      "comment": "The range\u0027s maximum extent (inclusive).",
      "javadoc": "The range\u0027s maximum extent (inclusive).",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a range whose extent is from min to max.",
      "javadoc": "Creates a range whose extent is from min to max.\n@param min the minimum extent.\n@param max the maximum extent (inclusive).\n@throws IllegalArgumentException if max is less than min.",
      "static": false,
      "params": [
        {
          "name": "min",
          "type_long": "int",
          "type_short": "int",
          "comment": "the minimum extent."
        },
        {
          "name": "max",
          "type_long": "int",
          "type_short": "int",
          "comment": "the maximum extent (inclusive)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.util.datastruct.Range",
          "type_short": "Range",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Returns true if the value is within the ranges extent.",
      "javadoc": "Returns true if the value is within the ranges extent.\n@param value the value to check.\n@return true if the value is within the ranges extent.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the value to check."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the value is within the ranges extent."
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "Returns the range\u0027s size.",
      "javadoc": "Returns the range\u0027s size.\n@return the size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the size"
      },
      "throws": []
    },
    {
      "name": "iterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cjava.lang.Integer\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    }
  ]
}
