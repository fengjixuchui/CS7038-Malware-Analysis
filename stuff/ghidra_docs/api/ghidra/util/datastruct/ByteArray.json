{
  "name": "ByteArray",
  "comment": "Array of bytes that grows as needed.",
  "javadoc": "Array of bytes that grows as needed.",
  "static": false,
  "implements": [
    "ghidra.util.datastruct.Array",
    "java.io.Serializable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "serialVersionUID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "MIN_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "bytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "lastNonZeroIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates new ByteArray",
      "javadoc": "Creates new ByteArray",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "put",
      "comment": "Puts the given byte value in the byte array at\n the given index",
      "javadoc": "Puts the given byte value in the byte array at\n the given index\n@param index Index into the array.\n@param value value to store\n@throws IndexOutOfBoundsException if the index is negative",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "Index into the array."
        },
        {
          "name": "value",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "value to store"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Sets the value at the given index to 0.",
      "javadoc": "Sets the value at the given index to 0.\n@param index the index to set to 0.\n@throws IndexOutOfBoundsException if the index is negative",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index to set to 0."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findLastNonZeroIndex",
      "comment": "Finds the index of the last non-zero value.",
      "javadoc": "Finds the index of the last non-zero value.\n@return The index of the last non-zero value. -1 will be returned\n if the array is empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The index of the last non-zero value. -1 will be returned\n if the array is empty."
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "Returns the byte at the given index",
      "javadoc": "Returns the byte at the given index\n@param index index into the array\n@return The byte value at the given index. A 0 will\n be returned for any index not initialized to\n another value.\n@throws IndexOutOfBoundsException if the index is negative",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "index into the array"
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "The byte value at the given index. A 0 will\n be returned for any index not initialized to\n another value."
      },
      "throws": []
    },
    {
      "name": "adjustArray",
      "comment": "Adjusts the size of the array.",
      "javadoc": "Adjusts the size of the array.\n@param size The new capacity of the array.",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "The new capacity of the array."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLastNonEmptyIndex",
      "comment": "",
      "javadoc": "@see ghidra.util.datastruct.Array#getLastNonEmptyIndex()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copyDataTo",
      "comment": "",
      "javadoc": "@see ghidra.util.datastruct.Array#copyDataTo(int, DataTable, int, int)",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "table",
          "type_long": "ghidra.util.datastruct.DataTable",
          "type_short": "DataTable",
          "comment": ""
        },
        {
          "name": "toIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "toCol",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
