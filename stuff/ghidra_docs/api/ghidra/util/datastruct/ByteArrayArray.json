{
  "name": "ByteArrayArray",
  "comment": "Array of byte[] that grows as needed.",
  "javadoc": "Array of byte[] that grows as needed.",
  "static": false,
  "implements": [
    "ghidra.util.datastruct.Array",
    "java.io.Serializable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "serialVersionUID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "MIN_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "bytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "starts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "lengths",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short[]",
      "type_short": "short[]",
      "constant_value": null
    },
    {
      "name": "totalSpaceAllocated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "nextFree",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "lastStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates new ByteArrayArray",
      "javadoc": "Creates new ByteArrayArray",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "put",
      "comment": "Puts the given byte array in the ByteArrayArray at\n the given index",
      "javadoc": "Puts the given byte array in the ByteArrayArray at\n the given index\n@param index Index into the array.\n@param value value to store\n@throws IndexOutOfBoundsException if the index is negative",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "Index into the array."
        },
        {
          "name": "value",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "value to store"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "Returns the byte array at the given index",
      "javadoc": "Returns the byte array at the given index\n@param index index into the array\n@return The byte array at the given index. An empty array will\n be returned for any index not initialized to\n another value.\n@throws IndexOutOfBoundsException if the index is negative",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "index into the array"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "The byte array at the given index. An empty array will\n be returned for any index not initialized to\n another value."
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Removes the array at the given index",
      "javadoc": "Removes the array at the given index\n@param index index of the array to be removed\n@throws IndexOutOfBoundsException if the index is negative",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of the array to be removed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findLastStart",
      "comment": "finds the last array index",
      "javadoc": "finds the last array index",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustArraySizes",
      "comment": "Grows the array.  The new array capacity will be\n the maximum of minCapacity and twice the current\n capacity.",
      "javadoc": "Grows the array.  The new array capacity will be\n the maximum of minCapacity and twice the current\n capacity.\n@param minCapacity The minimum size to grow the array.",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "shrinkArrays",
      "comment": "Shrinks the starts and lengths array as items at the end of the list\n are removed.",
      "javadoc": "Shrinks the starts and lengths array as items at the end of the list\n are removed.\n@param capacity the new size to make the arrays",
      "static": false,
      "params": [
        {
          "name": "capacity",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new size to make the arrays"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "allocSpace",
      "comment": "Allocates space for storing the array",
      "javadoc": "Allocates space for storing the array\n@param size number of elements to allocate space for\n@return Returns the start position in the buffer for the\n storage for the array",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of elements to allocate space for"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "Returns the start position in the buffer for the\n storage for the array"
      },
      "throws": []
    },
    {
      "name": "adjustSpace",
      "comment": "Adjusts the buffer size as the storage requirements change.\n Every time the buffer is resized, arrays are compacted.",
      "javadoc": "Adjusts the buffer size as the storage requirements change.\n Every time the buffer is resized, arrays are compacted.\n@param newSize the new size to adjust the buffer to",
      "static": false,
      "params": [
        {
          "name": "newSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new size to adjust the buffer to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLastNonEmptyIndex",
      "comment": "",
      "javadoc": "@see ghidra.util.datastruct.Array#getLastNonEmptyIndex()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copyDataTo",
      "comment": "",
      "javadoc": "@see ghidra.util.datastruct.Array#copyDataTo(int, DataTable, int, int)",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "table",
          "type_long": "ghidra.util.datastruct.DataTable",
          "type_short": "DataTable",
          "comment": ""
        },
        {
          "name": "toIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "toCol",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
