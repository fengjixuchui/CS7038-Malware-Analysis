{
  "name": "ManagedDataTable",
  "comment": "Data table that keeps track of rows that are occupied.",
  "javadoc": "Data table that keeps track of rows that are occupied.",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.datastruct.DataTable",
  "fields": [
    {
      "name": "serialVersionUID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "occupied",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.BooleanArray",
      "type_short": "BooleanArray",
      "constant_value": null
    },
    {
      "name": "maxRow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasRow",
      "comment": "returns true if the given row contains an object",
      "javadoc": "returns true if the given row contains an object\n@param row the row in the table\n@return true if the given row contains an object",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row in the table"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given row contains an object"
      },
      "throws": []
    },
    {
      "name": "getMaxRow",
      "comment": "Returns the max row that contains data.",
      "javadoc": "Returns the max row that contains data.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeRow",
      "comment": "Removes the given row from the table.",
      "javadoc": "Removes the given row from the table.\n@param row The row to be removed",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row to be removed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putBoolean",
      "comment": "Stores a boolean value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores a boolean value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putByte",
      "comment": "Stores a byte value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores a byte value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putShort",
      "comment": "Stores a short value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores a short value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "short",
          "type_short": "short",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putInt",
      "comment": "Stores an int value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores an int value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putLong",
      "comment": "Stores a long value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores a long value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putDouble",
      "comment": "Stores a double value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores a double value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "double",
          "type_short": "double",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putFloat",
      "comment": "Stores a float value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores a float value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "float",
          "type_short": "float",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putString",
      "comment": "Stores an String in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores an String in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putByteArray",
      "comment": "Stores an byte array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores an byte array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putShortArray",
      "comment": "Stores an short array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores an short array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "short[]",
          "type_short": "short[]",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putIntArray",
      "comment": "Stores an int array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores an int array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putFloatArray",
      "comment": "Stores a float array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores a float array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "float[]",
          "type_short": "float[]",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putDoubleArray",
      "comment": "Stores a double array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores a double array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "double[]",
          "type_short": "double[]",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putLongArray",
      "comment": "Stores an long array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.",
      "javadoc": "Stores an long array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row into the table (specifies which object)"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "The column of the table.  (specifies which field)"
        },
        {
          "name": "value",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": "The value to store."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
