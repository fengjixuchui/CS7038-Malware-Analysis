{
  "name": "RedBlackLongKeySet",
  "comment": "A RedBlack Tree implementation of a long key set.",
  "javadoc": "A RedBlack Tree implementation of a long key set.",
  "static": false,
  "implements": [
    "java.io.Serializable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NODESIZE",
      "comment": "the number of bytes in a RedBlackLongKeySet node",
      "javadoc": "the number of bytes in a RedBlackLongKeySet node",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "15"
    },
    {
      "name": "root",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
      "type_short": "RBNode",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "RED",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "0"
    },
    {
      "name": "BLACK",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "1"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new RedBlackLongKeySet that can store keys between 0 and n.",
      "javadoc": "Creates a new RedBlackLongKeySet that can store keys between 0 and n.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "Returns the number keys in this set.",
      "javadoc": "Returns the number keys in this set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "containsKey",
      "comment": "Returns true if the key is in the set.",
      "javadoc": "Returns true if the key is in the set.\n@param key the key whose presence is to be tested.\n@exception IndexOutOfBoundsException thrown if the given key is not\n in the range [0, maxKey].",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": "the key whose presence is to be tested."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFirst",
      "comment": "Returns the first key in this set.",
      "javadoc": "Returns the first key in this set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLast",
      "comment": "Returns the last key in this set.",
      "javadoc": "Returns the last key in this set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNext",
      "comment": "Returns the smallest key in the set that is greater than the given key.  Returns\n -1 if there are no keys greater than the given key.",
      "javadoc": "Returns the smallest key in the set that is greater than the given key.  Returns\n -1 if there are no keys greater than the given key.\n@param key the key for which to find the next key after.\n@exception IndexOutOfBoundsException thrown if the given key is not\n in the range [0, maxKey].",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": "the key for which to find the next key after."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrevious",
      "comment": "Returns the largest key in the set that is less than the given key. Returns -1 if\n there are not keys less than the given key.",
      "javadoc": "Returns the largest key in the set that is less than the given key. Returns -1 if\n there are not keys less than the given key.\n@param key the key for which to find the previous key.\n@exception IndexOutOfBoundsException thrown if the given key is not\n in the range [0, maxKey].",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": "the key for which to find the previous key."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "put",
      "comment": "Adds the given key to the set.",
      "javadoc": "Adds the given key to the set.\n@param key the key to add to the set.\n@exception IndexOutOfBoundsException thrown if the given key is not\n in the range [0, maxKey].",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": "the key to add to the set."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Removes the given key from the set.",
      "javadoc": "Removes the given key from the set.\n@param key the key to remove from the set.\n@exception IndexOutOfBoundsException thrown if the given key is not\n in the range [0, maxKey].",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": "the key to remove from the set."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAll",
      "comment": "Removes all keys from the set.",
      "javadoc": "Removes all keys from the set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "Test if the set is empty.",
      "javadoc": "Test if the set is empty.\n@return true if the set is empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the set is empty."
      },
      "throws": []
    },
    {
      "name": "colorOf",
      "comment": "Returns the color of the given node.",
      "javadoc": "Returns the color of the given node.",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
          "type_short": "RBNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parentOf",
      "comment": "Returns the parent of the given node.",
      "javadoc": "Returns the parent of the given node.",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
          "type_short": "RBNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
        "type_short": "RBNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setColor",
      "comment": "Sets the color of the given node to the given color.",
      "javadoc": "Sets the color of the given node to the given color.",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
          "type_short": "RBNode",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "leftOf",
      "comment": "Returns the left child of the given node.",
      "javadoc": "Returns the left child of the given node.",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
          "type_short": "RBNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
        "type_short": "RBNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "rightOf",
      "comment": "Returns the right child of the given node.",
      "javadoc": "Returns the right child of the given node.",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
          "type_short": "RBNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
        "type_short": "RBNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "rotateLeft",
      "comment": "From CLR",
      "javadoc": "From CLR",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
          "type_short": "RBNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "rotateRight",
      "comment": "From CLR",
      "javadoc": "From CLR",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
          "type_short": "RBNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixAfterInsertion",
      "comment": "From CLR",
      "javadoc": "From CLR",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
          "type_short": "RBNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteEntry",
      "comment": "Delete node p, and then rebalance the tree.",
      "javadoc": "Delete node p, and then rebalance the tree.",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
          "type_short": "RBNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixAfterDeletion",
      "comment": "From CLR",
      "javadoc": "From CLR",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
          "type_short": "RBNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "swapPosition",
      "comment": "Swap the linkages of two nodes in a tree.",
      "javadoc": "Swap the linkages of two nodes in a tree.",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
          "type_short": "RBNode",
          "comment": ""
        },
        {
          "name": "y",
          "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
          "type_short": "RBNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "writeObject",
      "comment": "Save the state of the TreeMap instance to a stream (i.e.,\n serialize it).",
      "javadoc": "Save the state of the \u003ccode\u003eTreeMap\u003c/code\u003e instance to a stream (i.e.,\n serialize it).\n@serialData The \u003ci\u003esize\u003c/i\u003e of the TreeMap (the number of key-value\n\t\t   mappings) is emitted (int), followed by the key (Object)\n\t\t   and value (Object) for each key-value mapping represented\n\t\t   by the TreeMap. The key-value mappings are emitted in\n\t\t   key-order (as determined by the TreeMap\u0027s Comparator,\n\t\t   or by the keys\u0027 natural ordering if the TreeMap has no\n             Comparator).",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "java.io.ObjectOutputStream",
          "type_short": "ObjectOutputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readObject",
      "comment": "Reconstitute the TreeMap instance from a stream (i.e.,\n deserialize it).",
      "javadoc": "Reconstitute the \u003ccode\u003eTreeMap\u003c/code\u003e instance from a stream (i.e.,\n deserialize it).",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "java.io.ObjectInputStream",
          "type_short": "ObjectInputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "java.lang.ClassNotFoundException",
          "type_short": "ClassNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "buildFromSorted",
      "comment": "Recursive \"helper method\" that does the real work of the\n of the previous method.  Identically named parameters have\n identical definitions.  Additional parameters are documented below.\n It is assumed that the comparator and size fields of the TreeMap are\n already set prior to calling this method.  (It ignores both fields.)",
      "javadoc": "Recursive \"helper method\" that does the real work of the\n of the previous method.  Identically named parameters have\n identical definitions.  Additional parameters are documented below.\n It is assumed that the comparator and size fields of the TreeMap are\n already set prior to calling this method.  (It ignores both fields.)\n@param level the current level of tree. Initial call should be 0.\n@param lo the first element index of this subtree. Initial should be 0.\n@param hi the last element index of this subtree.  Initial should be\n\t      size-1.\n@param redLevel the level at which nodes should be red.\n        Must be equal to computeRedLevel for tree of this size.",
      "static": true,
      "params": [
        {
          "name": "level",
          "type_long": "int",
          "type_short": "int",
          "comment": "the current level of tree. Initial call should be 0."
        },
        {
          "name": "lo",
          "type_long": "int",
          "type_short": "int",
          "comment": "the first element index of this subtree. Initial should be 0."
        },
        {
          "name": "hi",
          "type_long": "int",
          "type_short": "int",
          "comment": "the last element index of this subtree.  Initial should be\n\t      size-1."
        },
        {
          "name": "redLevel",
          "type_long": "int",
          "type_short": "int",
          "comment": "the level at which nodes should be red.\n        Must be equal to computeRedLevel for tree of this size."
        },
        {
          "name": "str",
          "type_long": "java.io.ObjectInputStream",
          "type_short": "ObjectInputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.datastruct.RedBlackLongKeySet.RBNode",
        "type_short": "RBNode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "java.lang.ClassNotFoundException",
          "type_short": "ClassNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "computeRedLevel",
      "comment": "Find the level down to which to assign all nodes BLACK.  This is the\n last `full\u0027 level of the complete binary tree produced by\n buildTree. The remaining nodes are colored RED. (This makes a `nice\u0027\n set of color assignments wrt future insertions.) This level number is\n computed by finding the number of splits needed to reach the zeroeth\n node.  (The answer is ~lg(N), but in any case must be computed by same\n quick O(lg(N)) loop.)",
      "javadoc": "Find the level down to which to assign all nodes BLACK.  This is the\n last `full\u0027 level of the complete binary tree produced by\n buildTree. The remaining nodes are colored RED. (This makes a `nice\u0027\n set of color assignments wrt future insertions.) This level number is\n computed by finding the number of splits needed to reach the zeroeth\n node.  (The answer is ~lg(N), but in any case must be computed by same\n quick O(lg(N)) loop.)",
      "static": true,
      "params": [
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
