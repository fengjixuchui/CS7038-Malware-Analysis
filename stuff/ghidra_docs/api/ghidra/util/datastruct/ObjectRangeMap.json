{
  "name": "ObjectRangeMap",
  "comment": "Associates objects with long index ranges.",
  "javadoc": "Associates objects with long index ranges.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "ranges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.util.datastruct.ObjectValueRange\u003cT\u003e\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "lastRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.ObjectValueRange\u003cT\u003e",
      "type_short": "ObjectValueRange",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new ObjectRangeMap",
      "javadoc": "Constructs a new ObjectRangeMap",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIndexRangeIterator",
      "comment": "Returns an IndexRangeIterator over all ranges that have associated objects.",
      "javadoc": "Returns an {@link IndexRangeIterator} over all ranges that have associated objects.\n@return an {@link IndexRangeIterator} over all ranges that have associated objects.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.datastruct.IndexRangeIterator",
        "type_short": "IndexRangeIterator",
        "comment": "an IndexRangeIterator over all ranges that have associated objects."
      },
      "throws": []
    },
    {
      "name": "getIndexRangeIterator",
      "comment": "Returns an IndexRangeIterator over all ranges that have associated objects within\n the given range.  Object Ranges that overlap the beginning or end of the given range are\n included, but have thier start or end index adjusted to be in the given range.",
      "javadoc": "Returns an {@link IndexRangeIterator} over all ranges that have associated objects within\n the given range.  Object Ranges that overlap the beginning or end of the given range are\n included, but have thier start or end index adjusted to be in the given range.\n@param start the first index in the range to find all index ranges that have associated values.\n@param end the last index(inclusive) in the range to find all index ranges that have associated\n  values.\n@return an {@link IndexRangeIterator} over all ranges that have associated objects within the\n given range.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": "the first index in the range to find all index ranges that have associated values."
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": "the last index(inclusive) in the range to find all index ranges that have associated\n  values."
        }
      ],
      "return": {
        "type_long": "ghidra.util.datastruct.IndexRangeIterator",
        "type_short": "IndexRangeIterator",
        "comment": "an IndexRangeIterator over all ranges that have associated objects within the\n given range."
      },
      "throws": []
    },
    {
      "name": "setObject",
      "comment": "Associates the given object with all indices in the given range. The object may be null,\n but an assocition is still established.  Use the clearRange() method to remove associations.",
      "javadoc": "Associates the given object with all indices in the given range. The object may be null,\n but an assocition is still established.  Use the clearRange() method to remove associations.\n@param start the start of the range.\n@param end the end (inclusive) of the range.\n@param object the object to associate with the given range.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": "the start of the range."
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": "the end (inclusive) of the range."
        },
        {
          "name": "object",
          "type_long": "T",
          "type_short": "T",
          "comment": "the object to associate with the given range."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustRemainingRangeForOverlap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "object",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        },
        {
          "name": "newRange",
          "type_long": "ghidra.util.datastruct.ObjectValueRange\u003cT\u003e",
          "type_short": "ObjectValueRange",
          "comment": ""
        },
        {
          "name": "insertionIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "newEnd",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.datastruct.ObjectValueRange\u003cT\u003e",
        "type_short": "ObjectValueRange",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeCompletelyOverlappedRanges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "insertionIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "newEnd",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustPreviousRangeForOverlap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "object",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        },
        {
          "name": "newRange",
          "type_long": "ghidra.util.datastruct.ObjectValueRange\u003cT\u003e",
          "type_short": "ObjectValueRange",
          "comment": ""
        },
        {
          "name": "pos",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.datastruct.ObjectValueRange\u003cT\u003e",
        "type_short": "ObjectValueRange",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearRange",
      "comment": "Clears any object associations within the given range.",
      "javadoc": "Clears any object associations within the given range.\n@param start the first index in the range to be cleared.\n@param end the last index in the range to be cleared.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": "the first index in the range to be cleared."
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": "the last index in the range to be cleared."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Returns true if the associated index has an associated object even if the assocated object\n is null.",
      "javadoc": "Returns true if the associated index has an associated object even if the assocated object\n is null.\n@param index the index to check for an association.\n@return true if the associated index has an associated object even if the assocated object\n is null.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": "the index to check for an association."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the associated index has an associated object even if the assocated object\n is null."
      },
      "throws": []
    },
    {
      "name": "getObject",
      "comment": "Returns the object associated with the given index or null if no object is associated with\n the given index.  Note that null is a valid association so a null result could be either\n no association or an actual association of the index to null.  Use the contains() method\n first if the distinction is important.  If the contains() method returns true, the result\n is cached so the next call to getObject() will be fast.",
      "javadoc": "Returns the object associated with the given index or null if no object is associated with\n the given index.  Note that null is a valid association so a null result could be either\n no association or an actual association of the index to null.  Use the contains() method\n first if the distinction is important.  If the contains() method returns true, the result\n is cached so the next call to getObject() will be fast.\n@param index the index at which to retrieve an assocated object.\n@return the object (which can be null) associated with the given index or null if no such\n association exists.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": "the index at which to retrieve an assocated object."
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the object (which can be null) associated with the given index or null if no such\n association exists."
      },
      "throws": []
    },
    {
      "name": "getPositionOfRangeAtOrBefore",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "valueRange",
          "type_long": "ghidra.util.datastruct.ObjectValueRange\u003cT\u003e",
          "type_short": "ObjectValueRange",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPositionOfRangeBefore",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "valueRange",
          "type_long": "ghidra.util.datastruct.ObjectValueRange\u003cT\u003e",
          "type_short": "ObjectValueRange",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "valuesEqual",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
