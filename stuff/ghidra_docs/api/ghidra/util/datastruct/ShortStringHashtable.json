{
  "name": "ShortStringHashtable",
  "comment": "Class that implements a hashtable with short keys and String values.",
  "javadoc": "Class that implements a hashtable with short keys and String values.",
  "static": false,
  "implements": [
    "java.io.Serializable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "indexer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.ShortKeyIndexer",
      "type_short": "ShortKeyIndexer",
      "constant_value": null
    },
    {
      "name": "values",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "capacity",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Default constructor creates a table with an initial default capacity.",
      "javadoc": "Default constructor creates a table with an initial default capacity.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor creates a table with an initial given capacity.  The capacity\n will be adjusted to the next highest prime in the PRIMES table.",
      "javadoc": "Constructor creates a table with an initial given capacity.  The capacity\n will be adjusted to the next highest prime in the PRIMES table.\n@param capacity the initial capacity.",
      "static": false,
      "params": [
        {
          "name": "capacity",
          "type_long": "short",
          "type_short": "short",
          "comment": "the initial capacity."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "put",
      "comment": "Adds a key/value pair to the hashtable. If the key is already in the table,\n the old value is replaced with the new value.  If the hashtable is already\n full, the hashtable will attempt to approximately double in size\n (it will use a prime number), and all the current entries will\n be rehashed.",
      "javadoc": "Adds a key/value pair to the hashtable. If the key is already in the table,\n the old value is replaced with the new value.  If the hashtable is already\n full, the hashtable will attempt to approximately double in size\n (it will use a prime number), and all the current entries will\n be rehashed.\n@param key the key to associate with the given value.\n@param value the value to associate with the given key.\n@exception ArrayIndexOutOfBoundsException thrown if the maximum capacity is\n reached.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "the key to associate with the given value."
        },
        {
          "name": "value",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the value to associate with the given key."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "Returns the value for the given key.",
      "javadoc": "Returns the value for the given key.\n@param key the key whose associated value is to be returned.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "the key whose associated value is to be returned."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Removes a key from the hashtable",
      "javadoc": "Removes a key from the hashtable\n@param key key to be removed from the hashtable.\n@return true if key is found and removed, false otherwise.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "key to be removed from the hashtable."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if key is found and removed, false otherwise."
      },
      "throws": []
    },
    {
      "name": "removeAll",
      "comment": "Remove all entries from the hashtable.",
      "javadoc": "Remove all entries from the hashtable.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Return true if the given key is in the hashtable.",
      "javadoc": "Return true if the given key is in the hashtable.\n@param key the key whose presence is this map is to be tested.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "the key whose presence is this map is to be tested."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "Return the number of key/value pairs stored in the hashtable.",
      "javadoc": "Return the number of key/value pairs stored in the hashtable.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKeys",
      "comment": "Returns an array containing all the short keys.",
      "javadoc": "Returns an array containing all the short keys.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short[]",
        "type_short": "short[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "grow",
      "comment": "resizes the hashtable to allow more entries.",
      "javadoc": "resizes the hashtable to allow more entries.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
