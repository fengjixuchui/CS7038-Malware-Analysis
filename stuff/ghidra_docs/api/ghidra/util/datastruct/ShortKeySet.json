{
  "name": "ShortKeySet",
  "comment": "The ShortKeySet provides an interface for managing a set of ordered short keys\n between the values of 0 and N.  It can add keys, remove keys, find the next key\n greater than some value , and find the previous key less than some value.",
  "javadoc": "The ShortKeySet provides an interface for managing a set of ordered short keys\n between the values of 0 and N.  It can add keys, remove keys, find the next key\n greater than some value , and find the previous key less than some value.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "size",
      "comment": "Returns the number of keys currently in the set.",
      "javadoc": "Returns the number of keys currently in the set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "containsKey",
      "comment": "Determines if a given key is in the set.",
      "javadoc": "Determines if a given key is in the set.\n@param key the key whose presence is to be tested.\n@return true if the key is in the set.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "the key whose presence is to be tested."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the key is in the set."
      },
      "throws": []
    },
    {
      "name": "getFirst",
      "comment": "Returns the first (lowest) key in the set.",
      "javadoc": "Returns the first (lowest) key in the set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLast",
      "comment": "Returns the last (highest) key in the set.",
      "javadoc": "Returns the last (highest) key in the set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "put",
      "comment": "Adds a key to the set.",
      "javadoc": "Adds a key to the set.\n@param key the key to add to the set.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "the key to add to the set."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Removes the key from the set.",
      "javadoc": "Removes the key from the set.\n@param key the key to remove from the set.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "the key to remove from the set."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAll",
      "comment": "Removes all keys from the set.",
      "javadoc": "Removes all keys from the set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNext",
      "comment": "finds the next key that is in the set that is greater than the given key.",
      "javadoc": "finds the next key that is in the set that is greater than the given key.\n@param key the key for which to find the next key after.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "the key for which to find the next key after."
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrevious",
      "comment": "finds the previous key that is in the set that is less than the given key.",
      "javadoc": "finds the previous key that is in the set that is less than the given key.\n@param key the key for which to find the previous key.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "the key for which to find the previous key."
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "Checks if the set is empty.",
      "javadoc": "Checks if the set is empty.\n@return true if the set is empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the set is empty."
      },
      "throws": []
    }
  ]
}
