{
  "name": "BitTree",
  "comment": "The BitTree class maintains a set of ordered keys between the values of\n 0 and N.  It can quickly (O(log(n))) add keys, remove keys, find the next key\n greater than some value , and find the prev key less than some value.  It can\n determine if a key is in the set in O(1) time. This implementation has been\n limited to short keys so that it can implement the ShortKeySet interface.",
  "javadoc": "The BitTree class maintains a set of ordered keys between the values of\n 0 and N.  It can quickly (O(log(n))) add keys, remove keys, find the next key\n greater than some value , and find the prev key less than some value.  It can\n determine if a key is in the set in O(1) time. This implementation has been\n limited to short keys so that it can implement the ShortKeySet interface.",
  "static": false,
  "implements": [
    "ghidra.util.datastruct.ShortKeySet",
    "java.io.Serializable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "serialVersionUID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "power2",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "bits",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "numKeys",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "setMask",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "clearMask",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "The BitTree constructor takes the maximum key value. The legal\n keys for this set range from 0 to maxKey.",
      "javadoc": "The BitTree constructor takes the maximum key value. The legal\n keys for this set range from 0 to maxKey.\n@param maxKey the maximum key that will ever be put into this BitTree.",
      "static": false,
      "params": [
        {
          "name": "maxKey",
          "type_long": "short",
          "type_short": "short",
          "comment": "the maximum key that will ever be put into this BitTree."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "The BitTree constructor takes the maximum key value. The legal\n keys for this set range from 0 to maxKey.",
      "javadoc": "The BitTree constructor takes the maximum key value. The legal\n keys for this set range from 0 to maxKey.\n@param maxKey the maximum key value.\n@param isFull if true, then the set is initilized to contain all legal keys.",
      "static": false,
      "params": [
        {
          "name": "maxKey",
          "type_long": "short",
          "type_short": "short",
          "comment": "the maximum key value."
        },
        {
          "name": "isFull",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, then the set is initilized to contain all legal keys."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAll",
      "comment": "Removes all keys from the set.",
      "javadoc": "Removes all keys from the set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "Returns the number of keys currently in the set.",
      "javadoc": "Returns the number of keys currently in the set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "put",
      "comment": "Adds a key to the set.",
      "javadoc": "Adds a key to the set.\n@param key to be added.\n@exception IndexOutOfBoundsException if the given key is not\n in the range [0, size-1].",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "to be added."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Removes the key from the set.",
      "javadoc": "Removes the key from the set.\n@param key The key to remove.\n@exception IndexOutOfBoundsException if the given key is not\n in the range [0, size-1].",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "The key to remove."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "containsKey",
      "comment": "Determines if a given key is in the set.",
      "javadoc": "Determines if a given key is in the set.\n@param key the key to check if it is in this set.\n@return true if the key is in the set.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "the key to check if it is in this set."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the key is in the set."
      },
      "throws": []
    },
    {
      "name": "getNext",
      "comment": "finds the next key that is in the set that is greater than the given key.",
      "javadoc": "finds the next key that is in the set that is greater than the given key.\n@param key from which to search forward.\n@return the next key greater than the given key or -1 if there is no key\n greater than the given key.\n@exception IndexOutOfBoundsException if the given key is not\n in the range [0, size-1].",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "from which to search forward."
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the next key greater than the given key or -1 if there is no key\n greater than the given key."
      },
      "throws": []
    },
    {
      "name": "getPrevious",
      "comment": "Finds the next key that is in the set that is less than the given key.",
      "javadoc": "Finds the next key that is in the set that is less than the given key.\n@param key the key to search before.\n@return the next key less than the given key or -1 if there is no key\n less than the given key.\n@exception IndexOutOfBoundsException if the given key is not\n in the range [0, size-1].",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "short",
          "type_short": "short",
          "comment": "the key to search before."
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the next key less than the given key or -1 if there is no key\n less than the given key."
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "Checks if the set is empty.",
      "javadoc": "Checks if the set is empty.\n@return true if the set is empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the set is empty."
      },
      "throws": []
    },
    {
      "name": "getFirst",
      "comment": "Returns the first (lowest) key in the set.",
      "javadoc": "Returns the first (lowest) key in the set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLast",
      "comment": "Returns the last (highest) key in the set.",
      "javadoc": "Returns the last (highest) key in the set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setBit",
      "comment": "Sets the nth bit on.",
      "javadoc": "Sets the nth bit on.",
      "static": false,
      "params": [
        {
          "name": "n",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearBit",
      "comment": "Sets the nth bit to off.",
      "javadoc": "Sets the nth bit to off.",
      "static": false,
      "params": [
        {
          "name": "n",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isBitSet",
      "comment": "Tests if the the nth bit is on.",
      "javadoc": "Tests if the the nth bit is on.",
      "static": false,
      "params": [
        {
          "name": "n",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
