{
  "name": "CallbackAccumulator",
  "comment": "An implementation of Accumulator that allows clients to easily process items as\n they arrive. \n \n This class is different than normal accumulators in that the values are not \n stored internally.  As such, calls to #get(), #iterator() and \n #size() will reflect having no data.",
  "javadoc": "An implementation of {@link Accumulator} that allows clients to easily process items as\n they arrive. \n \n \u003cP\u003eThis class is different than normal accumulators in that the values are \u003cb\u003enot\u003c/b\u003e \n stored internally.  As such, calls to {@link #get()}, {@link #iterator()} and \n {@link #size()} will reflect having no data.\n@param \u003cT\u003e the type of the item being accumulated",
  "static": false,
  "implements": [
    "ghidra.util.datastruct.Accumulator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NULL_COLLECTION",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Collection\u003cT\u003e",
      "type_short": "Collection",
      "constant_value": null
    },
    {
      "name": "consumer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.function.Consumer\u003cT\u003e",
      "type_short": "Consumer",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param consumer the consumer that will get called each time an item is added",
      "static": false,
      "params": [
        {
          "name": "consumer",
          "type_long": "java.util.function.Consumer\u003cT\u003e",
          "type_short": "Consumer",
          "comment": "the consumer that will get called each time an item is added"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "t",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addAll",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "collection",
          "type_long": "java.util.Collection\u003cT\u003e",
          "type_short": "Collection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "t",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cT\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "iterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cT\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
