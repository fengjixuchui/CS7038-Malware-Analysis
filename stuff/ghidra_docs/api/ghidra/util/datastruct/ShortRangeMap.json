{
  "name": "ShortRangeMap",
  "comment": "Stores ranges of short values throughout \"long\" space.\n Every \"long\" index has an associated short value (initially 0).\n Users can paint (set) ranges of indexes to a given short integer value, \n overwriting any value that currently exists in that range.\n \n This class is implemented using an ShortPropertySet.  The first index\n (0) will always contain a value.  The value at any other given\n index will either be the value stored at that index, or if no\n value stored there, then the value stored at the nearest previous index\n that contains a value.",
  "javadoc": "Stores ranges of short values throughout \"long\" space.\n Every \"long\" index has an associated short value (initially 0).\n Users can paint (set) ranges of indexes to a given short integer value, \n overwriting any value that currently exists in that range.\n \n This class is implemented using an ShortPropertySet.  The first index\n (0) will always contain a value.  The value at any other given\n index will either be the value stored at that index, or if no\n value stored there, then the value stored at the nearest previous index\n that contains a value.",
  "static": false,
  "implements": [
    "java.io.Serializable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "serialVersionUID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "LARGEST",
      "comment": "The maximum end of range index allowed.",
      "javadoc": "The maximum end of range index allowed.",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "-1"
    },
    {
      "name": "map",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.prop.ShortPropertySet",
      "type_short": "ShortPropertySet",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for RangeMap.",
      "javadoc": "Constructor for RangeMap.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "paintRange",
      "comment": "Associates the given value with every index from start to end (inclusive)\n Any previous associates are overwritten.",
      "javadoc": "Associates the given value with every index from start to end (inclusive)\n Any previous associates are overwritten.\n@param start the start index of the range to fill.\n@param end the end index of the range to fill\n@param value the value to put at every index in the range.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": "the start index of the range to fill."
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": "the end index of the range to fill"
        },
        {
          "name": "value",
          "type_long": "short",
          "type_short": "short",
          "comment": "the value to put at every index in the range."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "Returns the short value associated with the given index.",
      "javadoc": "Returns the short value associated with the given index.\n@param index the index at which to get the value.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": "the index at which to get the value."
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIndexRangeIterator",
      "comment": "Returns an iterator over all occupied ranges in the map.",
      "javadoc": "Returns an iterator over all occupied ranges in the map.\n@param index the index to start the iterator\n@return an iterator over all occupied ranges in the map.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": "the index to start the iterator"
        }
      ],
      "return": {
        "type_long": "ghidra.util.datastruct.IndexRangeIterator",
        "type_short": "IndexRangeIterator",
        "comment": "an iterator over all occupied ranges in the map."
      },
      "throws": []
    },
    {
      "name": "getChangePointIterator",
      "comment": "Returns an iterator over all indexes where the value changes.",
      "javadoc": "Returns an iterator over all indexes where the value changes.\n@param start the starting index to search.\n@param end the ending index to search.\n@return an iterator over all indexes where the value changes.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": "the starting index to search."
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ending index to search."
        }
      ],
      "return": {
        "type_long": "ghidra.util.LongIterator",
        "type_short": "LongIterator",
        "comment": "an iterator over all indexes where the value changes."
      },
      "throws": []
    }
  ]
}
