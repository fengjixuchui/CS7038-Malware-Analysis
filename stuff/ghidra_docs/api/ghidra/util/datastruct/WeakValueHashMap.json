{
  "name": "WeakValueHashMap",
  "comment": "Class to provide a hash map with weak values.",
  "javadoc": "Class to provide a hash map with weak values.",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.datastruct.AbstractWeakValueMap",
  "fields": [
    {
      "name": "refMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cK,ghidra.util.datastruct.AbstractWeakValueMap.WeakValueRef\u003cK,V\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new weak map",
      "javadoc": "Constructs a new weak map",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new weak map with the given initial size",
      "javadoc": "Constructs a new weak map with the given initial size\n@param initialSize the initial size of the backing map",
      "static": false,
      "params": [
        {
          "name": "initialSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the initial size of the backing map"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRefMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Map\u003cK,ghidra.util.datastruct.AbstractWeakValueMap.WeakValueRef\u003cK,V\u003e\u003e",
        "type_short": "Map",
        "comment": ""
      },
      "throws": []
    }
  ]
}
