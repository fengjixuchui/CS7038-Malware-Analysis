{
  "name": "WeakValueTreeMap",
  "comment": "Class to provide a tree map with weak values.",
  "javadoc": "Class to provide a tree map with weak values.",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.datastruct.AbstractWeakValueNavigableMap",
  "fields": [
    {
      "name": "refMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.NavigableMap\u003cK,ghidra.util.datastruct.AbstractWeakValueMap.WeakValueRef\u003cK,V\u003e\u003e",
      "type_short": "NavigableMap",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new weak map",
      "javadoc": "Constructs a new weak map",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new weak map with keys ordered according to the given comparator",
      "javadoc": "Constructs a new weak map with keys ordered according to the given comparator\n@param comparator the comparator, or {@code null} for the natural ordering",
      "static": false,
      "params": [
        {
          "name": "comparator",
          "type_long": "java.util.Comparator\u003cK\u003e",
          "type_short": "Comparator",
          "comment": "the comparator, or  for the natural ordering"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRefMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.NavigableMap\u003cK,ghidra.util.datastruct.AbstractWeakValueMap.WeakValueRef\u003cK,V\u003e\u003e",
        "type_short": "NavigableMap",
        "comment": ""
      },
      "throws": []
    }
  ]
}
