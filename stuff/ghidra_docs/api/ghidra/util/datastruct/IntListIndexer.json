{
  "name": "IntListIndexer",
  "comment": "Class to manage multiple linked lists of int indexes. Users can add indexes\n to a list, remove indexes from a list, remove all indexes from a list, and\n retrieve all indexes within a given list.",
  "javadoc": "Class to manage multiple linked lists of int indexes. Users can add indexes\n to a list, remove indexes from a list, remove all indexes from a list, and\n retrieve all indexes within a given list.",
  "static": false,
  "implements": [
    "java.io.Serializable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "END_OF_LIST",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "heads",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "links",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "freePtr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "capacity",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "numLists",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "The constructor",
      "javadoc": "The constructor\n@param numLists - The initial number of lists to be managed.\n@param capacity - The current size of the pool of possible indexes.  All indexes\n  begin on the free list.",
      "static": false,
      "params": [
        {
          "name": "numLists",
          "type_long": "int",
          "type_short": "int",
          "comment": "- The initial number of lists to be managed."
        },
        {
          "name": "capacity",
          "type_long": "int",
          "type_short": "int",
          "comment": "- The current size of the pool of possible indexes.  All indexes\n  begin on the free list."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Allocates a new index resource and adds it to the front of the linked list\n indexed by listID.",
      "javadoc": "Allocates a new index resource and adds it to the front of the linked list\n indexed by listID.\n@param listID the id of the list to add to.\n@exception IndexOutOfBoundsException thrown if the listID is not in the\n the range [0, numLists).",
      "static": false,
      "params": [
        {
          "name": "listID",
          "type_long": "int",
          "type_short": "int",
          "comment": "the id of the list to add to."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "append",
      "comment": "Allocates a new index resource and adds it to the end of the linked list\n indexed by listID.",
      "javadoc": "Allocates a new index resource and adds it to the end of the linked list\n indexed by listID.\n@param listID the id of the list to add to.\n@throws IndexOutOfBoundsException thrown if the listID is not in the\n the range [0, numLists).",
      "static": false,
      "params": [
        {
          "name": "listID",
          "type_long": "int",
          "type_short": "int",
          "comment": "the id of the list to add to."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Remove the index resource from the linked list indexed by listID.",
      "javadoc": "Remove the index resource from the linked list indexed by listID.\n@param listID the id of the list from which to removed the value at index.\n@param index the index of the value to be removed from the specified list.\n@exception IndexOutOfBoundsException thrown if the listID is not in the\n the range [0, numLists).",
      "static": false,
      "params": [
        {
          "name": "listID",
          "type_long": "int",
          "type_short": "int",
          "comment": "the id of the list from which to removed the value at index."
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the value to be removed from the specified list."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAll",
      "comment": "Removes all indexes from the specified list.",
      "javadoc": "Removes all indexes from the specified list.\n@param listID the list to be emptied.",
      "static": false,
      "params": [
        {
          "name": "listID",
          "type_long": "int",
          "type_short": "int",
          "comment": "the list to be emptied."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNewCapacity",
      "comment": "Computes the next size that should be used to grow the index capacity.",
      "javadoc": "Computes the next size that should be used to grow the index capacity.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "Returns the current number of used index resources.",
      "javadoc": "Returns the current number of used index resources.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCapacity",
      "comment": "Returns the current index capacity.",
      "javadoc": "Returns the current index capacity.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumLists",
      "comment": "Returns the number of linked list being managed.",
      "javadoc": "Returns the number of linked list being managed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "next",
      "comment": "Returns the next index resource that follows the given index in a linked list.\n The index should be an index that is in some linked list.  Otherwise, the\n results are undefined( probably give you the next index on the free list )",
      "javadoc": "Returns the next index resource that follows the given index in a linked list.\n The index should be an index that is in some linked list.  Otherwise, the\n results are undefined( probably give you the next index on the free list )\n@param index the index to search after for the next index.\n@exception IndexOutOfBoundsException thrown if the index is not in the\n the range [0, capacity].",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index to search after for the next index."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "first",
      "comment": "Returns the first index resource on the linked list indexed by listID.",
      "javadoc": "Returns the first index resource on the linked list indexed by listID.\n@exception IndexOutOfBoundsException thrown if the listID is not in the\n the range [0, numLists].",
      "static": false,
      "params": [
        {
          "name": "listID",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "growCapacity",
      "comment": "Increases the index resource pool.",
      "javadoc": "Increases the index resource pool.\n@param newCapacity the new number of resource indexes to manage.  if this number\n is smaller than the current number of resource indexes, then nothing changes.",
      "static": false,
      "params": [
        {
          "name": "newCapacity",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new number of resource indexes to manage.  if this number\n is smaller than the current number of resource indexes, then nothing changes."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "growNumLists",
      "comment": "Increases the number of managed linked lists.",
      "javadoc": "Increases the number of managed linked lists.\n@param newListSize the new number of linked lists.  If this number is\n smaller than the current number of linked lists, then nothing changes.",
      "static": false,
      "params": [
        {
          "name": "newListSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new number of linked lists.  If this number is\n smaller than the current number of linked lists, then nothing changes."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Removes all indexes from all lists.",
      "javadoc": "Removes all indexes from all lists.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getListSize",
      "comment": "Returns the number of indexes in the specified list.",
      "javadoc": "Returns the number of indexes in the specified list.\n@param listID the id of the list from which to get the number of indexes.\n@exception IndexOutOfBoundsException thrown if the listID is not in the\n the range [0, numLists).",
      "static": false,
      "params": [
        {
          "name": "listID",
          "type_long": "int",
          "type_short": "int",
          "comment": "the id of the list from which to get the number of indexes."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "allocate",
      "comment": "Returns a free index resource from the free list.  If there are no\n free index values, then this method will attempt to grow the index\n resource pool.",
      "javadoc": "Returns a free index resource from the free list.  If there are no\n free index values, then this method will attempt to grow the index\n resource pool.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "free",
      "comment": "Returns the given index resource to the free list.",
      "javadoc": "Returns the given index resource to the free list.",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
