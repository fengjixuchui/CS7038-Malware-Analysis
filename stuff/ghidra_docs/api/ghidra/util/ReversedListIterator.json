{
  "name": "ReversedListIterator",
  "comment": "Wraps a ListIterator so that the operations are reversed.\n \n NOTE: you must obtain an iterator that is already at its end. E.g., if you wish to traverse a\n list in reverse, you would use\n .",
  "javadoc": "Wraps a {@link ListIterator} so that the operations are reversed.\n \n NOTE: you must obtain an iterator that is already at its end. E.g., if you wish to traverse a\n list in reverse, you would use\n {@code new ReversedListIterator\u003c\u003e(list.listIterator(list.size()))}.\n@param \u003cE\u003e the type of each element",
  "static": false,
  "implements": [
    "java.util.ListIterator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "it",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ListIterator\u003cE\u003e",
      "type_short": "ListIterator",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "it",
          "type_long": "java.util.ListIterator\u003cE\u003e",
          "type_short": "ListIterator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasNext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "next",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "E",
        "type_short": "E",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasPrevious",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "previous",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "E",
        "type_short": "E",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "nextIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "previousIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "set",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "E",
          "type_short": "E",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "E",
          "type_short": "E",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
