{
  "name": "StringFormat",
  "comment": "Class with static methods formatting values in hex.",
  "javadoc": "Class with static methods formatting values in hex.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hexByteString",
      "comment": "Gets a hexadecimal representation of a byte value.",
      "javadoc": "Gets a hexadecimal representation of a byte value.\n@param b the byte value\n@return the byte as a hexadecimal string.",
      "static": true,
      "params": [
        {
          "name": "b",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "the byte value"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the byte as a hexadecimal string."
      },
      "throws": []
    },
    {
      "name": "hexWordString",
      "comment": "Gets a hexadecimal representation of a short value.",
      "javadoc": "Gets a hexadecimal representation of a short value.\n@param s the short value\n@return the short as a hexadecimal string.",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "short",
          "type_short": "short",
          "comment": "the short value"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the short as a hexadecimal string."
      },
      "throws": []
    },
    {
      "name": "padIt",
      "comment": "Creates a string prepended with zeros, if padding is indicated, and adds \n the indicated endchar as the suffix.",
      "javadoc": "Creates a string prepended with zeros, if padding is indicated, and adds \n the indicated endchar as the suffix.\n@param str the original string\n@param padlen length of the padded string without the suffix character.\n@param endchar the suffix character\n@param padded if true then prepend with zeros\n@return return the possibly padded string containing the suffix.",
      "static": true,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the original string"
        },
        {
          "name": "padlen",
          "type_long": "int",
          "type_short": "int",
          "comment": "length of the padded string without the suffix character."
        },
        {
          "name": "endchar",
          "type_long": "char",
          "type_short": "char",
          "comment": "the suffix character"
        },
        {
          "name": "padded",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true then prepend with zeros"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "return the possibly padded string containing the suffix."
      },
      "throws": []
    }
  ]
}
