{
  "name": "SystemUtilities",
  "comment": "General purpose class to provide convenience methods for doing \"System\" type\n stuff, e.g., find resources, date/time, etc. All methods in this class are\n static.",
  "javadoc": "General purpose class to provide convenience methods for doing \"System\" type\n stuff, e.g., find resources, date/time, etc. All methods in this class are\n static.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "userName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "FONT_SIZE_OVERRIDE_PROPERTY_NAME",
      "comment": "System property that signals to override the font settings for Java and\n Ghidra components.",
      "javadoc": "System property that signals to override the font settings for Java and\n Ghidra components.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"font.size.override\""
    },
    {
      "name": "FONT_SIZE_OVERRIDE_VALUE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.Integer",
      "type_short": "Integer",
      "constant_value": null
    },
    {
      "name": "TESTING_PROPERTY",
      "comment": "The system property that can be checked during testing to determine if\n the system is running in test mode.",
      "javadoc": "The system property that can be checked during testing to determine if\n the system is running in test mode.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"SystemUtilities.isTesting\""
    },
    {
      "name": "TESTING_BATCH_PROPERTY",
      "comment": "The system property that can be checked during testing to determine if\n the system is running in batch, automated test mode.",
      "javadoc": "The system property that can be checked during testing to determine if\n the system is running in batch, automated test mode.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"ghidra.test.property.batch.mode\""
    },
    {
      "name": "HEADLESS_PROPERTY",
      "comment": "The system property that can be checked during runtime to determine if we\n are running with a GUI or headless.",
      "javadoc": "The system property that can be checked during runtime to determine if we\n are running with a GUI or headless.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"SystemUtilities.isHeadless\""
    },
    {
      "name": "SINGLE_JAR_MODE_PROPERTY",
      "comment": "The system property that can be checked during runtime to determine if we\n are running in single-jar mode.",
      "javadoc": "The system property that can be checked during runtime to determine if we\n are running in single-jar mode.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"SystemUtilities.isSingleJarMode\""
    },
    {
      "name": "IS_IN_DEVELOPMENT_MODE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "IS_IN_TESTING_BATCH_MODE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isInTestingMode",
      "comment": "isInTestingMode - lazy load value - must allow time for runtime property to be set\n by GenericTestCase",
      "javadoc": "isInTestingMode - lazy load value - must allow time for runtime property to be set\n by GenericTestCase",
      "static": true,
      "type_long": "java.lang.Boolean",
      "type_short": "Boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkForDevelopmentMode",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUserName",
      "comment": "Get the user that is running the ghidra application",
      "javadoc": "Get the user that is running the ghidra application\n@return the user name",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the user name"
      },
      "throws": []
    },
    {
      "name": "getBooleanProperty",
      "comment": "Gets the boolean value of the  system property by the given name.  If the property is\n not set, the defaultValue is returned.   If the value is set, then it will be passed\n into Boolean#parseBoolean(String).",
      "javadoc": "Gets the boolean value of the  system property by the given name.  If the property is\n not set, the defaultValue is returned.   If the value is set, then it will be passed\n into {@link Boolean#parseBoolean(String)}.\n@param name the property name to check\n@param defaultValue the default value\n@return true if the property is set and has a value of \u0027true\u0027, ignoring case",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the property name to check"
        },
        {
          "name": "defaultValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "the default value"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the property is set and has a value of \u0027true\u0027, ignoring case"
      },
      "throws": []
    },
    {
      "name": "getFontSizeOverrideValue",
      "comment": "Returns a non-null value if the system property is set that triggers the\n font override setting, which makes all Java and Ghidra component fonts\n the same size.",
      "javadoc": "Returns a non-null value if the system property is set that triggers the\n font override setting, which makes all Java and Ghidra component fonts\n the same size.\n@return a non-null value if the system property is set that triggers the\n         font override setting, which makes all Java and Ghidra component\n         fonts the same size.\n@see #FONT_SIZE_OVERRIDE_PROPERTY_NAME",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.Integer",
        "type_short": "Integer",
        "comment": "a non-null value if the system property is set that triggers the\n         font override setting, which makes all Java and Ghidra component\n         fonts the same size."
      },
      "throws": []
    },
    {
      "name": "adjustForFontSizeOverride",
      "comment": "Checks to see if the font size override setting is enabled and adjusts\n the given font as necessary to match the override setting. If the setting\n is not enabled, then font is returned.",
      "javadoc": "Checks to see if the font size override setting is enabled and adjusts\n the given font as necessary to match the override setting. If the setting\n is not enabled, then \u003ccode\u003efont\u003c/code\u003e is returned.\n@param font The current font to adjust, if necessary.\n@return a font object with the proper size.",
      "static": true,
      "params": [
        {
          "name": "font",
          "type_long": "java.awt.Font",
          "type_short": "Font",
          "comment": "The current font to adjust, if necessary."
        }
      ],
      "return": {
        "type_long": "java.awt.Font",
        "type_short": "Font",
        "comment": "a font object with the proper size."
      },
      "throws": []
    },
    {
      "name": "isInTestingMode",
      "comment": "Returns true if the system is running during a test.",
      "javadoc": "Returns true if the system is running during a test.\n@return true if the system is running during a test.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the system is running during a test."
      },
      "throws": []
    },
    {
      "name": "isInTestingBatchMode",
      "comment": "Returns true if the system is running during a batch, automated test.",
      "javadoc": "Returns true if the system is running during a batch, automated test.\n@return true if the system is running during a batch, automated test.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the system is running during a batch, automated test."
      },
      "throws": []
    },
    {
      "name": "isInHeadlessMode",
      "comment": "Returns true if the system is running without a GUI.",
      "javadoc": "Returns true if the system is running without a GUI.\n@return true if the system is running without a GUI.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the system is running without a GUI."
      },
      "throws": []
    },
    {
      "name": "runSwingNow",
      "comment": "Calls the given suppler on the Swing thread, blocking with a\n SwingUtilities#invokeAndWait(Runnable).  Use this method when you need to get\n a value while being on the Swing thread.\n\n ",
      "javadoc": "Calls the given suppler on the Swing thread, blocking with a\n {@link SwingUtilities#invokeAndWait(Runnable)}.  Use this method when you need to get\n a value while being on the Swing thread.\n\n \u003cpre\u003e{@literal\n \t\tString value \u003d runSwingNow(() -\u003e label.getText());\n }\u003c/pre\u003e\n@param s the supplier that will be called on the Swing thread\n@return the result of the supplier\n@see #runSwingNow(Runnable)",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.util.function.Supplier\u003cT\u003e",
          "type_short": "Supplier",
          "comment": "the supplier that will be called on the Swing thread"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the result of the supplier"
      },
      "throws": []
    },
    {
      "name": "runSwingNow",
      "comment": "Calls the given runnable on the Swing thread.",
      "javadoc": "Calls the given runnable on the Swing thread.\n@param r the runnable\n@see #runSwingNow(Supplier) if you need to return a value from the Swing thread.",
      "static": true,
      "params": [
        {
          "name": "r",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "the runnable"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "runSwingLater",
      "comment": "Calls the given runnable on the Swing thread in the future by putting the request on\n the back of the event queue.",
      "javadoc": "Calls the given runnable on the Swing thread in the future by putting the request on\n the back of the event queue.\n@param r the runnable",
      "static": true,
      "params": [
        {
          "name": "r",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "the runnable"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "runIfSwingOrPostSwingLater",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "r",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInDevelopmentMode",
      "comment": "Returns true if we are running in development mode. The assumption is\n that if this class is in a jar file, then we are in production mode.",
      "javadoc": "Returns true if we are running in development mode. The assumption is\n that if this class is in a jar file, then we are in production mode.\n@return true if we are running in development mode",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if we are running in development mode"
      },
      "throws": []
    },
    {
      "name": "isInReleaseMode",
      "comment": "Returns true if the application is a release and not in development or testing",
      "javadoc": "Returns true if the application is a release and not in development or testing\n@return true if the application is a release and not in development or testing",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the application is a release and not in development or testing"
      },
      "throws": []
    },
    {
      "name": "isEqual",
      "comment": "Returns whether or not the two indicated objects are equal. It allows\n either or both of the specified objects to be null.",
      "javadoc": "Returns whether or not the two indicated objects are equal. It allows\n either or both of the specified objects to be null.\n@param o1 the first object or null\n@param o2 the second object or null\n@return true if the objects are equal.",
      "static": true,
      "params": [
        {
          "name": "o1",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the first object or null"
        },
        {
          "name": "o2",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the second object or null"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the objects are equal."
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "c1",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        },
        {
          "name": "c2",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isArrayEqual",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "array1",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": ""
        },
        {
          "name": "array2",
          "type_long": "java.lang.Object[]",
          "type_short": "java.lang.Object[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertTrue",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "booleanValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assertThisIsTheSwingThread",
      "comment": "A development/testing time method to make sure the current thread is the swing thread.",
      "javadoc": "A development/testing time method to make sure the current thread is the swing thread.\n@param errorMessage The message to display when the assert fails",
      "static": true,
      "params": [
        {
          "name": "errorMessage",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The message to display when the assert fails"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSourceLocationForClass",
      "comment": "Returns a file that contains the given class. If the class is in a jar file, then \n the jar file will be returned. If the file is in a .class file, then the directory \n containing the package root will be returned (i.e. the \"bin\" directory).",
      "javadoc": "Returns a file that contains the given class. If the class is in a jar file, then \n the jar file will be returned. If the file is in a .class file, then the directory \n containing the package root will be returned (i.e. the \"bin\" directory).\n@param classObject the class for which to get the location\n@return the containing location",
      "static": true,
      "params": [
        {
          "name": "classObject",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "the class for which to get the location"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the containing location"
      },
      "throws": []
    },
    {
      "name": "getPackageLevel",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "classObject",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEventDispatchThread",
      "comment": "Returns true if this is the event dispatch thread. Note that this method returns true in\n headless mode because any thread in headless mode can dispatch its own events. In swing\n environments, the swing thread is usually used to dispatch events.",
      "javadoc": "Returns true if this is the event dispatch thread. Note that this method returns true in\n headless mode because any thread in headless mode can dispatch its own events. In swing\n environments, the swing thread is usually used to dispatch events.\n@return true if this is the event dispatch thread -OR- is in headless mode.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is the event dispatch thread -OR- is in headless mode."
      },
      "throws": []
    },
    {
      "name": "printString",
      "comment": "A debugging utility that allows you to create a conditional breakpoint in Eclipse that\n will print items for you while it is performing its tests.  This method always returns\n false.  This means to use it you will have to OR (||) your conditional breakpoint\n expressions if you want them to pass.  Otherwise, you can make this method be the\n only breakpoint expression and it will never stop on the breakpoint, but will still\n print your debug.\n \n This method is useful to print values of code that you cannot edit while debugging.\n \n Example, inside of your conditional breakpoint for a method on a Sun Java file you\n can put something like: printString(\"Value of first arg: \" + arg0, System.err)\n \n Note: Don\u0027t remove this method simply because no code is referencing it, as it is used\n by conditional breakpoints.",
      "javadoc": "A debugging utility that allows you to create a conditional breakpoint in Eclipse that\n will print items for you while it is performing its tests.  This method always returns\n false.  This means to use it you will have to OR (||) your conditional breakpoint\n expressions if you want them to pass.  Otherwise, you can make this method be the\n only breakpoint expression and it will never stop on the breakpoint, but will still\n print your debug.\n \u003cp\u003e\n This method is useful to print values of code that you cannot edit while debugging.\n \u003cp\u003e\n Example, inside of your conditional breakpoint for a method on a Sun Java file you\n can put something like: \u003ccode\u003eprintString(\"Value of first arg: \" + arg0, System.err)\u003c/code\u003e\n \u003cp\u003e\n Note: Don\u0027t remove this method simply because no code is referencing it, as it is used\n by conditional breakpoints.\n@param string The string to print\n@param printStream The stream to print to (System.our or err)\n@return The string passed in so that you can use this method in an evaluation",
      "static": true,
      "params": [
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The string to print"
        },
        {
          "name": "printStream",
          "type_long": "java.io.PrintStream",
          "type_short": "PrintStream",
          "comment": "The stream to print to (System.our or err)"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "The string passed in so that you can use this method in an evaluation"
      },
      "throws": []
    },
    {
      "name": "getDefaultThreadPoolSize",
      "comment": "Returns the default size (in number of threads) for a CPU processing bound\n thread pool.",
      "javadoc": "Returns the default size (in number of threads) for a \u003cb\u003eCPU processing bound\u003c/b\u003e\n thread pool.\n@return the default pool size.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the default pool size."
      },
      "throws": []
    },
    {
      "name": "getCPUOverride",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.Integer",
        "type_short": "Integer",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCPUCoreLimit",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.Integer",
        "type_short": "Integer",
        "comment": ""
      },
      "throws": []
    }
  ]
}
