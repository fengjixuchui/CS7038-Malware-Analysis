{
  "name": "GhidraTable",
  "comment": "Navigation is only supported if the underlying table model\n implements ProgramTableModel and the setGoToService() method\n has been called with a valid reference.  When both of these conditions are met, then the \n table will navigate on a user\u0027s double-click or on an Enter key press.  Also, if \n selection navigation is enabled, then this table will navigate any time the selection of\n the table changes.  To prevent this feature call \n #setNavigateOnSelectionEnabled(boolean) with a value of false.\n ",
  "javadoc": "Navigation is only supported if the underlying table model\n implements \u003ccode\u003eProgramTableModel\u003c/code\u003e and the \u003ccode\u003esetGoToService()\u003c/code\u003e method\n has been called with a valid reference.  When both of these conditions are met, then the \n table will navigate on a user\u0027s double-click or on an \u003ccode\u003eEnter\u003c/code\u003e key press.  Also, if \n selection navigation is enabled, then this table will navigate \u003cb\u003eany time the selection of\n the table changes\u003c/b\u003e.  To prevent this feature call \n {@link #setNavigateOnSelectionEnabled(boolean)} with a value of false.\n \u003cp\u003e",
  "static": false,
  "implements": [],
  "extends": "docking.widgets.table.GTable",
  "fields": [
    {
      "name": "navigatable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.nav.Navigatable",
      "type_short": "Navigatable",
      "constant_value": null
    },
    {
      "name": "gotoService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.services.GoToService",
      "type_short": "GoToService",
      "constant_value": null
    },
    {
      "name": "navigateOnSelection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "navigationKeyListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.event.KeyListener",
      "type_short": "KeyListener",
      "constant_value": null
    },
    {
      "name": "navigationMouseListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.event.MouseListener",
      "type_short": "MouseListener",
      "constant_value": null
    },
    {
      "name": "navigationSelectionListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.event.ListSelectionListener",
      "type_short": "ListSelectionListener",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "javax.swing.table.TableModel",
          "type_short": "TableModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initDefaultRenderers",
      "comment": "Installs the default TableCellRenderers for known Ghidra table cell data classes.\n Subclasses can override this method to add additional types or to change the default\n associations.",
      "javadoc": "Installs the default {@link TableCellRenderer}s for known Ghidra table cell data classes.\n Subclasses can override this method to add additional types or to change the default\n associations.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "installNavigation",
      "comment": "Sets the GoTo service to use when navigation is enabled on this table.",
      "javadoc": "Sets the GoTo service to use when navigation is enabled on this table.\n@param goToService the GoTo service.\n@param nav the navigable",
      "static": false,
      "params": [
        {
          "name": "goToService",
          "type_long": "ghidra.app.services.GoToService",
          "type_short": "GoToService",
          "comment": "the GoTo service."
        },
        {
          "name": "nav",
          "type_long": "ghidra.app.nav.Navigatable",
          "type_short": "Navigatable",
          "comment": "the navigable"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeNavigation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgramSelection",
      "comment": "Returns the program selection equivalent to the rows currently selected in the table. \n This method is only valid when the underlying table model implements\n ProgramTableModel.\n \n Returns null if no rows are selected or\n the underlying model does not implement ProgramTableModel.",
      "javadoc": "Returns the program selection equivalent to the rows currently selected in the table. \n This method is only valid when the underlying table model implements\n {@link ProgramTableModel}.\n \u003cP\u003e\n Returns null if no rows are selected or\n the underlying model does not implement \u003ccode\u003eProgramTableModel\u003c/code\u003e.\n@return the program selection or null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.util.ProgramSelection",
        "type_short": "ProgramSelection",
        "comment": "the program selection or null."
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "Returns the program being used by this table; null if the underlying model does not\n implement ProgramTableModel",
      "javadoc": "Returns the program being used by this table; null if the underlying model does not\n implement {@link ProgramTableModel}\n@return the table\u0027s program",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the table\u0027s program"
      },
      "throws": []
    },
    {
      "name": "getProgramTableModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "javax.swing.table.TableModel",
          "type_short": "TableModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.table.ProgramTableModel",
        "type_short": "ProgramTableModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "navigate",
      "comment": "Does nothing if no GoToService has been installed from \n #installNavigation(GoToService, Navigatable).  Also, this method will do \n nothing if this table\u0027s TableModel is not an instance of ProgramTableModel.  \n Otherwise, this method will attempt to go to the program location denoted by the \n given row and column.",
      "javadoc": "Does nothing if no {@link GoToService} has been installed from \n {@link #installNavigation(GoToService, Navigatable)}.  Also, this method will do \n nothing if this table\u0027s \u003ccode\u003eTableModel\u003c/code\u003e is not an instance of {@link ProgramTableModel}.  \n Otherwise, this method will attempt to go to the program location denoted by the \n given row and column.\n@param row the row\n@param column the column",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row"
        },
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "navigateOnCurrentSelection",
      "comment": "Does nothing if no GoToService has been installed from \n #installNavigation(GoToService, Navigatable).  Otherwise, this method will attempt \n to go to the program location denoted by the given row and column.\n \n This method differs from #navigate(int, int) in that this method will not \n navigate if #navigateOnSelection is false.",
      "javadoc": "Does nothing if no {@link GoToService} has been installed from \n {@link #installNavigation(GoToService, Navigatable)}.  Otherwise, this method will attempt \n to go to the program location denoted by the given row and column.\n \u003cp\u003e\n This method differs from {@link #navigate(int, int)} in that this method will not \n navigate if {@link #navigateOnSelection} is \u003ccode\u003efalse\u003c/code\u003e.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setNavigateOnSelectionEnabled",
      "comment": "Allows the user to enable and disable the table\u0027s feature that triggers navigation on\n certain selection events, like mouse clicking and pressing the \u0027Enter\u0027 key.",
      "javadoc": "Allows the user to enable and disable the table\u0027s feature that triggers navigation on\n certain selection events, like mouse clicking and pressing the \u0027Enter\u0027 key.\n@param enabled true enables the navigation on selection feature.",
      "static": false,
      "params": [
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true enables the navigation on selection feature."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setValueAt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "aValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "programIsClosed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "selectRow",
      "comment": "Selects the given row and performs a goto, if applicable.",
      "javadoc": "Selects the given row and performs a goto, if applicable.\n@param row The row to select",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The row to select"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
