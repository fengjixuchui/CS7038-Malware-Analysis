{
  "name": "AddressBasedLocation",
  "comment": "AddressBasedLocation provides the ability to render and compare\n addresses (e.g., location table column). This may be necessary when working a\n mixture of address types (e.g., memory, stack, register, variable, external)\n with the need to render in a meaningful way. Generally, only memory addresses\n are meaningful to a user when rendered as a simple address (e.g.,\n ram:00123456). While most address types are handled, VARIABLE addresses will\n only render as \"VARIABLE\". As such, this implementation should be\n extended if VARIABLE addresses will be encountered.",
  "javadoc": "\u003ccode\u003eAddressBasedLocation\u003c/code\u003e provides the ability to render and compare\n addresses (e.g., location table column). This may be necessary when working a\n mixture of address types (e.g., memory, stack, register, variable, external)\n with the need to render in a meaningful way. Generally, only memory addresses\n are meaningful to a user when rendered as a simple address (e.g.,\n ram:00123456). While most address types are handled, VARIABLE addresses will\n only render as \"\u0026lt;VARIABLE\u0026gt;\". As such, this implementation should be\n extended if VARIABLE addresses will be encountered.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "address",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "referenceClass",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Class\u003c? extends ghidra.program.model.symbol.Reference\u003e",
      "type_short": "Class",
      "constant_value": null
    },
    {
      "name": "stringRepresentation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a null location which generally corresponds to a unknown/bad\n address",
      "javadoc": "Construct a null location which generally corresponds to a unknown/bad\n address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construction a location. The memory block name will never be included in\n string representation.",
      "javadoc": "Construction a location. The memory block name will never be included in\n string representation.\n@param program program to which address belongs\n@param address address object (VARIABLE addresses should be avoided)",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program to which address belongs"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address object (VARIABLE addresses should be avoided)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a location which corresponds to a reference TO address. String\n representation includes support for Offset References and allows control\n over inclusion of memory block name with memory addresses.",
      "javadoc": "Construct a location which corresponds to a reference TO address. String\n representation includes support for Offset References and allows control\n over inclusion of memory block name with memory addresses.\n@param program program to which address belongs\n@param reference program reference (e.g., memory, stack, register, external)\n@param showBlockName ShowBlockName option for controlling inclusion of memory block \n name with address rendering",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program to which address belongs"
        },
        {
          "name": "reference",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "program reference (e.g., memory, stack, register, external)"
        },
        {
          "name": "showBlockName",
          "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName",
          "type_short": "ShowBlockName",
          "comment": "ShowBlockName option for controlling inclusion of memory block \n name with address rendering"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a location with a specific address and representation",
      "javadoc": "Construct a location with a specific address and representation\n@param address address object\n@param representation address/location string representation",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address object"
        },
        {
          "name": "representation",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "address/location string representation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isMemoryLocation",
      "comment": "",
      "javadoc": "@return true if location corresponds to memory address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if location corresponds to memory address"
      },
      "throws": []
    },
    {
      "name": "buildStringRepresentation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "reference",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": ""
        },
        {
          "name": "showBlockName",
          "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName",
          "type_short": "ShowBlockName",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isRegisterAddress",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExternalAddressRepresentation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegisterAddressRepresentation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStackAddressRepresentation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConstantAddressRepresentation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVariableAddressRepresentation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isReferenceDestination",
      "comment": "Determine if location corresponds to a reference destination",
      "javadoc": "Determine if location corresponds to a reference destination\n@return true if location corresponds to a reference destination",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if location corresponds to a reference destination"
      },
      "throws": []
    },
    {
      "name": "isShiftedAddress",
      "comment": "Determine if location corresponds to a shifted memory reference destination",
      "javadoc": "Determine if location corresponds to a shifted memory reference destination\n@return true if location corresponds to a shifted memory reference destination",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if location corresponds to a shifted memory reference destination"
      },
      "throws": []
    },
    {
      "name": "isOffsetAddress",
      "comment": "Determine if location corresponds to a shifted memory reference\n destination",
      "javadoc": "Determine if location corresponds to a shifted memory reference\n destination\n@return true if location corresponds to a shifted memory reference destination",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if location corresponds to a shifted memory reference destination"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareAddressSameSpace",
      "comment": "Compare this location\u0027s address with another location\u0027s given that they\n are both within the same address space.",
      "javadoc": "Compare this location\u0027s address with another location\u0027s given that they\n are both within the same address space.\n@param otherLocation other location object\n@return comparison value\n@see #compareTo(AddressBasedLocation)",
      "static": false,
      "params": [
        {
          "name": "otherLocation",
          "type_long": "ghidra.util.table.field.AddressBasedLocation",
          "type_short": "AddressBasedLocation",
          "comment": "other location object"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "comparison value"
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "otherLocation",
          "type_long": "ghidra.util.table.field.AddressBasedLocation",
          "type_short": "AddressBasedLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
