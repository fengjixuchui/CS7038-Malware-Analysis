{
  "name": "ProgramLocationTableRowMapper",
  "comment": "NOTE:  ALL TableRowMapper CLASSES MUST END IN \"TableRowMapper\".  If not,\n the ClassSearcher will not find them.\n \n An interface that allows implementors to map an object of one type to another.  This is useful\n for table models that have row types that are easily converted to other more generic types.\n For example, the Bookmarks table model\u0027s data is based upon Bookmark objects.  Furthermore, \n those objects are easily converted to ProgramLocations and Addresses.  By creating a mapper \n for the these types, the table model can now show dynamic columns that work on ProgramLocations\n and Addresses.  \n \n This interface is an ExtensionPoint so that once created, they will be ingested automatically\n by Ghidra.  Once discovered, these mappers will be used to provide dynamic columns to to \n tables with row types that match ROW_TYPE.\n \n This column is an extension of TableRowMapper that has knowledge of \n ProgramLocationTableColumns, which means that it knows how to generate \n ProgramLocations.  This is the preferred mapper to use with tables that work on program\n data, as it means that the column works with navigation.",
  "javadoc": "NOTE:  ALL TableRowMapper CLASSES MUST END IN \"TableRowMapper\".  If not,\n the ClassSearcher will not find them.\n \n An interface that allows implementors to map an object of one type to another.  This is useful\n for table models that have row types that are easily converted to other more generic types.\n For example, the Bookmarks table model\u0027s data is based upon Bookmark objects.  Furthermore, \n those objects are easily converted to ProgramLocations and Addresses.  By creating a mapper \n for the these types, the table model can now show dynamic columns that work on ProgramLocations\n and Addresses.  \n \u003cp\u003e\n This interface is an ExtensionPoint so that once created, they will be ingested automatically\n by Ghidra.  Once discovered, these mappers will be used to provide dynamic columns to to \n tables with row types that match \u003ccode\u003eROW_TYPE\u003c/code\u003e.\n \u003cp\u003e\n This column is an extension of {@link TableRowMapper} that has knowledge of \n {@link ProgramLocationTableColumn}s, which means that it knows how to generate \n {@link ProgramLocation}s.  This is the preferred mapper to use with tables that work on program\n data, as it means that the column works with navigation.\n@param \u003cROW_TYPE\u003e The row type of a given table model\n@param \u003cEXPECTED_ROW_TYPE\u003e The row type expected by dynamic columns (e.g., ProgramLocations, \n                            Addresses, etc).\n@see AbstractDynamicTableColumn\n@see TableUtils",
  "static": false,
  "implements": [],
  "extends": "docking.widgets.table.TableRowMapper",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createMappedTableColumn",
      "comment": "Creates a table column that will create a table column that knows how to map the \n given ROW_TYPE to the type of the column passed in, the EXPECTED_ROW_TYPE.",
      "javadoc": "Creates a table column that will create a table column that knows how to map the \n given \u003cb\u003eROW_TYPE\u003c/b\u003e to the type of the column passed in, the \u003cb\u003eEXPECTED_ROW_TYPE\u003c/b\u003e.\n@param \u003cCOLUMN_TYPE\u003e The column type of the given and created columns\n@param destinationColumn The existing column, which is based upon EXPECTED_ROW_TYPE,\n        that we want to be able to use with the type we have, the ROW_TYPE.",
      "static": false,
      "params": [
        {
          "name": "destinationColumn",
          "type_long": "docking.widgets.table.DynamicTableColumn\u003cEXPECTED_ROW_TYPE,COLUMN_TYPE,ghidra.program.model.listing.Program\u003e",
          "type_short": "DynamicTableColumn",
          "comment": "The existing column, which is based upon EXPECTED_ROW_TYPE,\n        that we want to be able to use with the type we have, the ROW_TYPE."
        }
      ],
      "return": {
        "type_long": "docking.widgets.table.DynamicTableColumn\u003cROW_TYPE,COLUMN_TYPE,ghidra.program.model.listing.Program\u003e",
        "type_short": "DynamicTableColumn",
        "comment": ""
      },
      "throws": []
    }
  ]
}
