{
  "name": "AddressPreviewTableModel",
  "comment": "Table model that shows a location, label, and a preview column to\n show a preview of the code unit. The location can be in a memory address,\n a stack address, or a register address. The label is the primary symbol\n at the address, if one exists. Use this model when you have a list of\n addresses to build up dynamically.",
  "javadoc": "Table model that shows a location, label, and a preview column to\n show a preview of the code unit. The location can be in a memory address,\n a stack address, or a register address. The label is the primary symbol\n at the address, if one exists. Use this model when you have a list of\n addresses to build up dynamically.",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.table.AddressBasedTableModel",
  "fields": [
    {
      "name": "selectionSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor.",
      "javadoc": "Constructor.\n@param modelName the name of the model (used for the title)\n@param serviceProvider from which to get services\n@param program the program upon which this model is being used\n@param monitor the monitor to use for tracking progress and cancelling; may be null",
      "static": false,
      "params": [
        {
          "name": "modelName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the model (used for the title)"
        },
        {
          "name": "serviceProvider",
          "type_long": "ghidra.framework.plugintool.ServiceProvider",
          "type_short": "ServiceProvider",
          "comment": "from which to get services"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program upon which this model is being used"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor to use for tracking progress and cancelling; may be null"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor.",
      "javadoc": "Constructor.\n@param modelName the name of the model (used for the title)\n@param serviceProvider from which to get services\n@param program the program upon which this model is being used\n@param monitor the monitor to use for tracking progress and cancelling; may be null\n@param loadIncrementally true signals to show table results as they come in",
      "static": false,
      "params": [
        {
          "name": "modelName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the model (used for the title)"
        },
        {
          "name": "serviceProvider",
          "type_long": "ghidra.framework.plugintool.ServiceProvider",
          "type_short": "ServiceProvider",
          "comment": "from which to get services"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program upon which this model is being used"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor to use for tracking progress and cancelling; may be null"
        },
        {
          "name": "loadIncrementally",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true signals to show table results as they come in"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSelectionSize",
      "comment": "Sets the size of the selections generated by this model when asked to create \n program selections.  For example, some clients know that each table row represents\n a contiguous range of 4 addresses.  In this case, when the user makes a selection, \n that client wants the selection to be 4 addresses, starting at the address in \n the given table row.",
      "javadoc": "Sets the size of the selections generated by this model when asked to create \n program selections.  For example, some clients know that each table row represents\n a contiguous range of 4 addresses.  In this case, when the user makes a selection, \n that client wants the selection to be 4 addresses, starting at the address in \n the given table row.\n@param size the size of the selections generated by this model when asked to create \n \t\t\t   program selections.",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of the selections generated by this model when asked to create \n \t\t\t   program selections."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgramSelection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rows",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.util.ProgramSelection",
        "type_short": "ProgramSelection",
        "comment": ""
      },
      "throws": []
    }
  ]
}
