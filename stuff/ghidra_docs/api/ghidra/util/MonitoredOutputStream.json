{
  "name": "MonitoredOutputStream",
  "comment": "An OutputStream which utilizes a TaskMonitor to indicate output progress and\n allows the operation to be cancelled via the TaskMonitor.",
  "javadoc": "An OutputStream which utilizes a TaskMonitor to indicate output progress and\n allows the operation to be cancelled via the TaskMonitor.",
  "static": false,
  "implements": [],
  "extends": "java.io.OutputStream",
  "fields": [
    {
      "name": "PROGRESS_INCREMENT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32768"
    },
    {
      "name": "out",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.OutputStream",
      "type_short": "OutputStream",
      "constant_value": null
    },
    {
      "name": "monitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    },
    {
      "name": "smallCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "count",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "write",
      "comment": "Writes the specified byte to this output stream. \n \n The write method of FilterOutputStream \n calls the write method of its underlying output stream, \n that is, it performs out.write(b).\n \n Implements the abstract write method of OutputStream.",
      "javadoc": "Writes the specified \u003ccode\u003ebyte\u003c/code\u003e to this output stream. \n \u003cp\u003e\n The \u003ccode\u003ewrite\u003c/code\u003e method of \u003ccode\u003eFilterOutputStream\u003c/code\u003e \n calls the \u003ccode\u003ewrite\u003c/code\u003e method of its underlying output stream, \n that is, it performs \u003ccode\u003eout.write(b)\u003c/code\u003e.\n \u003cp\u003e\n Implements the abstract \u003ccode\u003ewrite\u003c/code\u003e method of \u003ccode\u003eOutputStream\u003c/code\u003e.\n@param b the \u003ccode\u003ebyte\u003c/code\u003e.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "int",
          "type_short": "int",
          "comment": "the byte."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "write",
      "comment": "Writes b.length bytes to this output stream. \n \n The write method of FilterOutputStream \n calls its write method of three arguments with the \n arguments b, 0, and \n b.length. \n \n Note that this method does not call the one-argument \n write method of its underlying stream with the single \n argument b.",
      "javadoc": "Writes \u003ccode\u003eb.length\u003c/code\u003e bytes to this output stream. \n \u003cp\u003e\n The \u003ccode\u003ewrite\u003c/code\u003e method of \u003ccode\u003eFilterOutputStream\u003c/code\u003e \n calls its \u003ccode\u003ewrite\u003c/code\u003e method of three arguments with the \n arguments \u003ccode\u003eb\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e, and \n \u003ccode\u003eb.length\u003c/code\u003e. \n \u003cp\u003e\n Note that this method does not call the one-argument \n \u003ccode\u003ewrite\u003c/code\u003e method of its underlying stream with the single \n argument \u003ccode\u003eb\u003c/code\u003e.\n@param b the data to be written.\n@exception IOException if an I/O error occurs.\n@see java.io.FilterOutputStream#write(byte[], int, int)",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the data to be written."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "write",
      "comment": "Writes len bytes from the specified \n byte array starting at offset off to \n this output stream. \n \n The write method of FilterOutputStream \n calls the write method of one argument on each \n byte to output. \n \n Note that this method does not call the write method \n of its underlying input stream with the same arguments. Subclasses \n of FilterOutputStream should provide a more efficient \n implementation of this method.",
      "javadoc": "Writes \u003ccode\u003elen\u003c/code\u003e bytes from the specified \n \u003ccode\u003ebyte\u003c/code\u003e array starting at offset \u003ccode\u003eoff\u003c/code\u003e to \n this output stream. \n \u003cp\u003e\n The \u003ccode\u003ewrite\u003c/code\u003e method of \u003ccode\u003eFilterOutputStream\u003c/code\u003e \n calls the \u003ccode\u003ewrite\u003c/code\u003e method of one argument on each \n \u003ccode\u003ebyte\u003c/code\u003e to output. \n \u003cp\u003e\n Note that this method does not call the \u003ccode\u003ewrite\u003c/code\u003e method \n of its underlying input stream with the same arguments. Subclasses \n of \u003ccode\u003eFilterOutputStream\u003c/code\u003e should provide a more efficient \n implementation of this method.\n@param b the data.\n@param off the start offset in the data.\n@param len the number of bytes to write.\n@exception IOException if an I/O error occurs.\n@see java.io.FilterOutputStream#write(int)",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the data."
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": "the start offset in the data."
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to write."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "flush",
      "comment": "Flushes this output stream and forces any buffered output bytes \n to be written out to the stream. \n \n The flush method of FilterOutputStream \n calls the flush method of its underlying output stream.",
      "javadoc": "Flushes this output stream and forces any buffered output bytes \n to be written out to the stream. \n \u003cp\u003e\n The \u003ccode\u003eflush\u003c/code\u003e method of \u003ccode\u003eFilterOutputStream\u003c/code\u003e \n calls the \u003ccode\u003eflush\u003c/code\u003e method of its underlying output stream.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "close",
      "comment": "Closes this output stream and releases any system resources \n associated with the stream. \n \n The close method of FilterOutputStream \n calls its flush method, and then calls the \n close method of its underlying output stream.",
      "javadoc": "Closes this output stream and releases any system resources \n associated with the stream. \n \u003cp\u003e\n The \u003ccode\u003eclose\u003c/code\u003e method of \u003ccode\u003eFilterOutputStream\u003c/code\u003e \n calls its \u003ccode\u003eflush\u003c/code\u003e method, and then calls the \n \u003ccode\u003eclose\u003c/code\u003e method of its underlying output stream.\n@exception IOException if an I/O error occurs.\n@see java.io.FilterOutputStream#flush()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
