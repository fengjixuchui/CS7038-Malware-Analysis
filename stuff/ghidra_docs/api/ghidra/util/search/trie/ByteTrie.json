{
  "name": "ByteTrie",
  "comment": "ByteTrie is a byte-based trie specifically designed to implement the Aho-Corasick\n string search algorithm.",
  "javadoc": "ByteTrie is a byte-based trie specifically designed to implement the Aho-Corasick\n string search algorithm.\n@param \u003cT\u003e the item storage type",
  "static": false,
  "implements": [
    "ghidra.util.search.trie.ByteTrieIfc"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "BUFFER_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1048576"
    },
    {
      "name": "GVID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "root",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.search.trie.ByteTrieNode\u003cT\u003e",
      "type_short": "ByteTrieNode",
      "constant_value": null
    },
    {
      "name": "versionId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "suffixId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "numberOfNodes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getVersionId",
      "comment": "Returns a version id for the trie to lazily schedule\n suffix (failure) pointers.",
      "javadoc": "Returns a version id for the trie to lazily schedule\n suffix (failure) pointers.\n@return an auto-incrementing version id",
      "static": true,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "an auto-incrementing version id"
      },
      "throws": []
    },
    {
      "name": "generateNode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        },
        {
          "name": "parent",
          "type_long": "ghidra.util.search.trie.ByteTrieNode\u003cT\u003e",
          "type_short": "ByteTrieNode",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.search.trie.ByteTrieNode\u003cT\u003e",
        "type_short": "ByteTrieNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "Returns if the trie is empty.",
      "javadoc": "Returns if the trie is empty.\n@return if the trie is empty",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "if the trie is empty"
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "Returns the number of byte sequences in the trie.",
      "javadoc": "Returns the number of byte sequences in the trie.\n@return the number of byte sequences in the trie",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of byte sequences in the trie"
      },
      "throws": []
    },
    {
      "name": "numberOfNodes",
      "comment": "Returns the number of nodes in the trie; this is essentially equal\n to the sum of the number of characters in all byte sequences present in\n the trie, minus their shared prefixes.",
      "javadoc": "Returns the number of nodes in the trie; this is essentially equal\n to the sum of the number of characters in all byte sequences present in\n the trie, minus their shared prefixes.\n@return the number of nodes in the trie",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of nodes in the trie"
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Adds a byte sequence to the trie, with corresponding user item.  Returns\n if the add took place, or if this add was essentially a replacement of\n a previously present value (previous user item is lost forever).",
      "javadoc": "Adds a byte sequence to the trie, with corresponding user item.  Returns\n if the add took place, or if this add was essentially a replacement of\n a previously present value (previous user item is lost forever).\n@param value the byte sequence to insert into the trie\n@param item a user item to store in that location\n@return whether the add took place",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the byte sequence to insert into the trie"
        },
        {
          "name": "item",
          "type_long": "T",
          "type_short": "T",
          "comment": "a user item to store in that location"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "whether the add took place"
      },
      "throws": []
    },
    {
      "name": "find",
      "comment": "Finds a byte sequence in the trie and returns a node interface object for it,\n or null if not present.",
      "javadoc": "Finds a byte sequence in the trie and returns a node interface object for it,\n or null if not present.\n@param value the byte sequence sought\n@return the node interface if present, or null",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the byte sequence sought"
        }
      ],
      "return": {
        "type_long": "ghidra.util.search.trie.ByteTrieNodeIfc\u003cT\u003e",
        "type_short": "ByteTrieNodeIfc",
        "comment": "the node interface if present, or null"
      },
      "throws": []
    },
    {
      "name": "inorder",
      "comment": "Visits all the nodes in the trie such that the visitation order is properly\n ordered (even though the actual algorithm below is a PREORDER traversal).\n The client is responsible for not performing actions on non-terminal nodes\n as necessary.",
      "javadoc": "Visits all the nodes in the trie such that the visitation order is properly\n ordered (even though the actual algorithm below is a PREORDER traversal).\n The client is responsible for not performing actions on non-terminal nodes\n as necessary.\n@param monitor a task monitor\n@param op the operation to perform\n@throws CancelledException if the user cancels",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a task monitor"
        },
        {
          "name": "op",
          "type_long": "ghidra.util.search.trie.Op\u003cT\u003e",
          "type_short": "Op",
          "comment": "the operation to perform"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels"
        }
      ]
    },
    {
      "name": "search",
      "comment": "Search an array of bytes using the Aho-Corasick multiple string\n trie search algorithm.",
      "javadoc": "Search an array of bytes using the Aho-Corasick multiple string\n trie search algorithm.\n@param text the bytes to search\n@param monitor a task monitor\n@return a list of search results\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the bytes to search"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a task monitor"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.util.search.trie.SearchResult\u003cjava.lang.Integer,T\u003e\u003e",
        "type_short": "List",
        "comment": "a list of search results"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "search",
      "comment": "Search memory using the Aho-Corasick multiple string\n trie search algorithm.",
      "javadoc": "Search memory using the Aho-Corasick multiple string\n trie search algorithm.\n@param memory the program memory manager\n@param view the address set view to search\n@param monitor a task monitor\n@return a list of search results\n@throws MemoryAccessException if bytes are not available\n@throws CancelledException if the user cancels",
      "static": false,
      "params": [
        {
          "name": "memory",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": "the program memory manager"
        },
        {
          "name": "view",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address set view to search"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a task monitor"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.util.search.trie.SearchResult\u003cghidra.program.model.address.Address,T\u003e\u003e",
        "type_short": "List",
        "comment": "a list of search results"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if bytes are not available"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels"
        }
      ]
    },
    {
      "name": "fixupSuffixPointers",
      "comment": "BFS fixup of suffix (failure) pointers, but only if we need to (the \n version id is more advanced than our last suffix fixup id).",
      "javadoc": "BFS fixup of suffix (failure) pointers, but only if we need to (the \n version id is more advanced than our last suffix fixup id).\n@param monitor a task monitor\n@throws CancelledException if the user cancels",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels"
        }
      ]
    },
    {
      "name": "getTransition",
      "comment": "Find our transition, either our child, or our suffix\u0027s child, etc. etc.",
      "javadoc": "Find our transition, either our child, or our suffix\u0027s child, etc. etc.\n@param ptr the current node pointer\n@param value the next byte value\n@return the proper transition node",
      "static": false,
      "params": [
        {
          "name": "ptr",
          "type_long": "ghidra.util.search.trie.ByteTrieNode\u003cT\u003e",
          "type_short": "ByteTrieNode",
          "comment": "the current node pointer"
        },
        {
          "name": "value",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "the next byte value"
        }
      ],
      "return": {
        "type_long": "ghidra.util.search.trie.ByteTrieNode\u003cT\u003e",
        "type_short": "ByteTrieNode",
        "comment": "the proper transition node"
      },
      "throws": []
    }
  ]
}
