{
  "name": "ByteTrieNode",
  "comment": "Class to represent a (possibly non-terminal!) node within the ByteTrie.",
  "javadoc": "Class to represent a (possibly non-terminal!) node within the ByteTrie.\n@param \u003cT\u003e the user item type",
  "static": false,
  "implements": [
    "ghidra.util.search.trie.ByteTrieNodeIfc"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "TERMINAL_MASK",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "256"
    },
    {
      "name": "ID_MASK",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "255"
    },
    {
      "name": "children",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.search.trie.ByteTrieNode\u003cT\u003e[]",
      "type_short": "ghidra.util.search.trie.ByteTrieNode\u003cT\u003e[]",
      "constant_value": null
    },
    {
      "name": "idAndTerminality",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "parent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.search.trie.ByteTrieNode\u003cT\u003e",
      "type_short": "ByteTrieNode",
      "constant_value": null
    },
    {
      "name": "suffix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.search.trie.ByteTrieNode\u003cT\u003e",
      "type_short": "ByteTrieNode",
      "constant_value": null
    },
    {
      "name": "item",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "T",
      "type_short": "T",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "transformByte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isTerminal",
      "comment": "Returns whether this node represents a byte sequence in the trie\n or just an internal node on our way down to one.",
      "javadoc": "Returns whether this node represents a byte sequence in the trie\n or just an internal node on our way down to one.\n@return whether this node represents a terminal value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "whether this node represents a terminal value"
      },
      "throws": []
    },
    {
      "name": "getItem",
      "comment": "Returns the user item stored in a terminal node (or null in an\n internal node).",
      "javadoc": "Returns the user item stored in a terminal node (or null in an\n internal node).\n@return the user item",
      "static": false,
      "params": [],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the user item"
      },
      "throws": []
    },
    {
      "name": "length",
      "comment": "Returns the length of the byte sequence represented by this node\n (cached integer, very fast).",
      "javadoc": "Returns the length of the byte sequence represented by this node\n (cached integer, very fast).\n@return the length of the byte sequence",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of the byte sequence"
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "Returns a new byte array with the value of the byte sequence represented\n by this node (slow, built from scratch every time).",
      "javadoc": "Returns a new byte array with the value of the byte sequence represented\n by this node (slow, built from scratch every time).\n@return the byte sequence",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the byte sequence"
      },
      "throws": []
    },
    {
      "name": "getId",
      "comment": "Returns the final byte in the byte sequence represented by this node\n (fast, but uses a bitmask).",
      "javadoc": "Returns the final byte in the byte sequence represented by this node\n (fast, but uses a bitmask).\n@return the final byte in the byte sequence",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the final byte in the byte sequence"
      },
      "throws": []
    },
    {
      "name": "getChild",
      "comment": "Returns the child node (successor in the byte sequence) which\n has byte value, or null if no such child exists.",
      "javadoc": "Returns the child node (successor in the byte sequence) which\n has byte value, or null if no such child exists.\n@param value the byte value\n@return the child node if present or null",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "the byte value"
        }
      ],
      "return": {
        "type_long": "ghidra.util.search.trie.ByteTrieNode\u003cT\u003e",
        "type_short": "ByteTrieNode",
        "comment": "the child node if present or null"
      },
      "throws": []
    },
    {
      "name": "addChild",
      "comment": "Adds a child to children.  Note that we\u0027re using two quick static\n size cases (0 and 1) to speed things up early on, and then binary\n search on the children array to find the index.  We then allocate\n a new array and insert the new node at the appropriate index, so\n this operation is big-O of lg n.",
      "javadoc": "Adds a child to children.  Note that we\u0027re using two quick static\n size cases (0 and 1) to speed things up early on, and then binary\n search on the children array to find the index.  We then allocate\n a new array and insert the new node at the appropriate index, so\n this operation is big-O of lg n.\n@param value the byte value\n@param child the child node",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "the byte value"
        },
        {
          "name": "child",
          "type_long": "ghidra.util.search.trie.ByteTrieNode\u003cT\u003e",
          "type_short": "ByteTrieNode",
          "comment": "the child node"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findIndex",
      "comment": "Use binary search to find the index where the value is\n (or should be, in case of add).",
      "javadoc": "Use binary search to find the index where the value is\n (or should be, in case of add).\n@param value the byte value\n@return the index (from 0 to length of children, inclusive)",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "the byte value"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index (from 0 to length of children, inclusive)"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        },
        {
          "name": "parent",
          "type_long": "ghidra.util.search.trie.ByteTrieNode\u003cT\u003e",
          "type_short": "ByteTrieNode",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTerminal",
      "comment": "Sets this node to be terminal, and the user item.",
      "javadoc": "Sets this node to be terminal, and the user item.\n@param item the user item to store in the node",
      "static": false,
      "params": [
        {
          "name": "item",
          "type_long": "T",
          "type_short": "T",
          "comment": "the user item to store in the node"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "debugByteArray",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "array",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
