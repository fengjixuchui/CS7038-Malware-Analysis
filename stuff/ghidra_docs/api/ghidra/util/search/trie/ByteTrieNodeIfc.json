{
  "name": "ByteTrieNodeIfc",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "isTerminal",
      "comment": "Returns whether this node represents a byte sequence in the trie\n or just an internal node on our way down to one.",
      "javadoc": "Returns whether this node represents a byte sequence in the trie\n or just an internal node on our way down to one.\n@return whether this node represents a terminal value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "whether this node represents a terminal value"
      },
      "throws": []
    },
    {
      "name": "getItem",
      "comment": "Returns the user item stored in a terminal node (or null in an\n internal node).",
      "javadoc": "Returns the user item stored in a terminal node (or null in an\n internal node).\n@return the user item",
      "static": false,
      "params": [],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the user item"
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "Returns a new byte array with the value of the byte sequence represented\n by this node (slow, built from scratch every time).",
      "javadoc": "Returns a new byte array with the value of the byte sequence represented\n by this node (slow, built from scratch every time).\n@return the byte sequence",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the byte sequence"
      },
      "throws": []
    },
    {
      "name": "length",
      "comment": "Returns the length of the byte sequence represented by this node\n (cached integer, very fast).",
      "javadoc": "Returns the length of the byte sequence represented by this node\n (cached integer, very fast).\n@return the length of the byte sequence",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of the byte sequence"
      },
      "throws": []
    }
  ]
}
