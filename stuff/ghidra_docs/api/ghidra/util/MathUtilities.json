{
  "name": "MathUtilities",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "unsignedDivide",
      "comment": "Perform unsigned division. Provides proper handling of all 64-bit unsigned values.",
      "javadoc": "Perform unsigned division. Provides proper handling of all 64-bit unsigned values.\n@param numerator unsigned numerator\n@param denominator positive divisor\n@return result of unsigned division\n@throws IllegalArgumentException if negative denominator is specified",
      "static": true,
      "params": [
        {
          "name": "numerator",
          "type_long": "long",
          "type_short": "long",
          "comment": "unsigned numerator"
        },
        {
          "name": "denominator",
          "type_long": "long",
          "type_short": "long",
          "comment": "positive divisor"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "result of unsigned division"
      },
      "throws": []
    },
    {
      "name": "unsignedModulo",
      "comment": "Perform unsigned modulo. Provides proper handling of all 64-bit unsigned values.",
      "javadoc": "Perform unsigned modulo. Provides proper handling of all 64-bit unsigned values.\n@param numerator unsigned numerator\n@param denominator positive divisor\n@return result of unsigned modulo (i.e., remainder)\n@throws IllegalArgumentException if negative denominator is specified",
      "static": true,
      "params": [
        {
          "name": "numerator",
          "type_long": "long",
          "type_short": "long",
          "comment": "unsigned numerator"
        },
        {
          "name": "denominator",
          "type_long": "long",
          "type_short": "long",
          "comment": "positive divisor"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "result of unsigned modulo (i.e., remainder)"
      },
      "throws": []
    },
    {
      "name": "clamp",
      "comment": "Ensures that the given value is within the given range.",
      "javadoc": "Ensures that the given value is within the given range.\n@param value the value to check\n@param min the minimum value allowed\n@param max the maximum value allowed\n@return the clamped value",
      "static": true,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the value to check"
        },
        {
          "name": "min",
          "type_long": "int",
          "type_short": "int",
          "comment": "the minimum value allowed"
        },
        {
          "name": "max",
          "type_long": "int",
          "type_short": "int",
          "comment": "the maximum value allowed"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the clamped value"
      },
      "throws": []
    },
    {
      "name": "main",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "args",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "unsignedMin",
      "comment": "Compute the minimum, treating the inputs as unsigned",
      "javadoc": "Compute the minimum, treating the inputs as unsigned\n@param a the first value to consider\n@param b the second value to consider\n@return the minimum",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": "the first value to consider"
        },
        {
          "name": "b",
          "type_long": "long",
          "type_short": "long",
          "comment": "the second value to consider"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the minimum"
      },
      "throws": []
    },
    {
      "name": "unsignedMin",
      "comment": "Compute the minimum, treating the inputs as unsigned",
      "javadoc": "Compute the minimum, treating the inputs as unsigned\n@param a the first value to consider\n@param b the second value to consider\n@return the minimum",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "int",
          "type_short": "int",
          "comment": "the first value to consider"
        },
        {
          "name": "b",
          "type_long": "int",
          "type_short": "int",
          "comment": "the second value to consider"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the minimum"
      },
      "throws": []
    },
    {
      "name": "unsignedMin",
      "comment": "Compute the minimum, treating the inputs as unsigned\n \n \n This method is overloaded to prevent accidental signed-extension on one of the inputs. This\n method will correctly zero-extend the  parameter before performing any comparison.\n Also note the return type is , since b would never be selected if it overflows an\n .",
      "javadoc": "Compute the minimum, treating the inputs as unsigned\n \n \u003cp\u003e\n This method is overloaded to prevent accidental signed-extension on one of the inputs. This\n method will correctly zero-extend the {@code int} parameter before performing any comparison.\n Also note the return type is {@code int}, since b would never be selected if it overflows an\n {@code int}.\n@param a the first value to consider\n@param b the second value to consider\n@return the minimum",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "int",
          "type_short": "int",
          "comment": "the first value to consider"
        },
        {
          "name": "b",
          "type_long": "long",
          "type_short": "long",
          "comment": "the second value to consider"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the minimum"
      },
      "throws": []
    },
    {
      "name": "unsignedMin",
      "comment": "Compute the minimum, treating the inputs as unsigned\n \n \n This method is overloaded to prevent accidental signed-extension on one of the inputs. This\n method will correctly zero-extend the  parameter before performing any comparison.\n Also note the return type is , since b would never be selected if it overflows an\n .",
      "javadoc": "Compute the minimum, treating the inputs as unsigned\n \n \u003cp\u003e\n This method is overloaded to prevent accidental signed-extension on one of the inputs. This\n method will correctly zero-extend the {@code int} parameter before performing any comparison.\n Also note the return type is {@code int}, since b would never be selected if it overflows an\n {@code int}.\n@param a the first value to consider\n@param b the second value to consider\n@return the minimum",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": "the first value to consider"
        },
        {
          "name": "b",
          "type_long": "int",
          "type_short": "int",
          "comment": "the second value to consider"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the minimum"
      },
      "throws": []
    },
    {
      "name": "unsignedMax",
      "comment": "Compute the maximum, treating the inputs as unsigned",
      "javadoc": "Compute the maximum, treating the inputs as unsigned\n@param a the first value to consider\n@param b the second value to consider\n@return the maximum",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": "the first value to consider"
        },
        {
          "name": "b",
          "type_long": "long",
          "type_short": "long",
          "comment": "the second value to consider"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the maximum"
      },
      "throws": []
    },
    {
      "name": "unsignedMax",
      "comment": "Compute the maximum, treating the inputs as unsigned",
      "javadoc": "Compute the maximum, treating the inputs as unsigned\n@param a the first value to consider\n@param b the second value to consider\n@return the maximum",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "int",
          "type_short": "int",
          "comment": "the first value to consider"
        },
        {
          "name": "b",
          "type_long": "int",
          "type_short": "int",
          "comment": "the second value to consider"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the maximum"
      },
      "throws": []
    },
    {
      "name": "unsignedMax",
      "comment": "Compute the maximum, treating the inputs as unsigned\n \n \n This method is overloaded to prevent accidental signed-extension on one of the inputs. This\n method will correctly zero-extend the  parameter before performing any comparison.",
      "javadoc": "Compute the maximum, treating the inputs as unsigned\n \n \u003cp\u003e\n This method is overloaded to prevent accidental signed-extension on one of the inputs. This\n method will correctly zero-extend the {@code int} parameter before performing any comparison.\n@param a the first value to consider\n@param b the second value to consider\n@return the maximum",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "int",
          "type_short": "int",
          "comment": "the first value to consider"
        },
        {
          "name": "b",
          "type_long": "long",
          "type_short": "long",
          "comment": "the second value to consider"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the maximum"
      },
      "throws": []
    },
    {
      "name": "unsignedMax",
      "comment": "Compute the maximum, treating the inputs as unsigned\n \n \n This method is overloaded to prevent accidental signed-extension on one of the inputs. This\n method will correctly zero-extend the  parameter before performing any comparison.",
      "javadoc": "Compute the maximum, treating the inputs as unsigned\n \n \u003cp\u003e\n This method is overloaded to prevent accidental signed-extension on one of the inputs. This\n method will correctly zero-extend the {@code int} parameter before performing any comparison.\n@param a the first value to consider\n@param b the second value to consider\n@return the maximum",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": "the first value to consider"
        },
        {
          "name": "b",
          "type_long": "int",
          "type_short": "int",
          "comment": "the second value to consider"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the maximum"
      },
      "throws": []
    }
  ]
}
