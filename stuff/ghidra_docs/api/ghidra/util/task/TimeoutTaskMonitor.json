{
  "name": "TimeoutTaskMonitor",
  "comment": "A task monitor that allows clients the ability to specify a timeout after which this monitor\n will be cancelled.\n \n This monitor can wrap an existing monitor.\n \n You can call #setTimeoutListener(Callback) to get a notification that the monitor\n timed-out.  In order to prevent this from firing after your work is finished normally, call\n #finished().",
  "javadoc": "A task monitor that allows clients the ability to specify a timeout after which this monitor\n will be cancelled.\n \n \u003cP\u003eThis monitor can wrap an existing monitor.\n \n \u003cP\u003eYou can call {@link #setTimeoutListener(Callback)} to get a notification that the monitor\n timed-out.  In order to prevent this from firing after your work is finished normally, call\n {@link #finished()}.",
  "static": false,
  "implements": [
    "ghidra.util.task.TaskMonitor"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "delegate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    },
    {
      "name": "timerMonitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.timer.GTimerMonitor",
      "type_short": "GTimerMonitor",
      "constant_value": null
    },
    {
      "name": "timeout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "timeUnit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.concurrent.TimeUnit",
      "type_short": "TimeUnit",
      "constant_value": null
    },
    {
      "name": "didTimeout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.concurrent.atomic.AtomicBoolean",
      "type_short": "AtomicBoolean",
      "constant_value": null
    },
    {
      "name": "timeoutCallback",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "utility.function.Callback",
      "type_short": "Callback",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "timeoutIn",
      "comment": "Creates a timeout task monitor that will be cancelled after the specified timeout.",
      "javadoc": "Creates a timeout task monitor that will be cancelled after the specified timeout.\n@param timeout the timeout value\n@param timeUnit the timeout time unit\n@return the newly created monitor",
      "static": true,
      "params": [
        {
          "name": "timeout",
          "type_long": "long",
          "type_short": "long",
          "comment": "the timeout value"
        },
        {
          "name": "timeUnit",
          "type_long": "java.util.concurrent.TimeUnit",
          "type_short": "TimeUnit",
          "comment": "the timeout time unit"
        }
      ],
      "return": {
        "type_long": "ghidra.util.task.TimeoutTaskMonitor",
        "type_short": "TimeoutTaskMonitor",
        "comment": "the newly created monitor"
      },
      "throws": []
    },
    {
      "name": "timeoutIn",
      "comment": "Creates a timeout task monitor that will be cancelled after the specified timeout.  The\n created monitor wraps the given monitor, calling cancel on the given monitor when the\n timeout is reached.  This method allows you to use an existing monitor while adding\n the timeout feature.",
      "javadoc": "Creates a timeout task monitor that will be cancelled after the specified timeout.  The\n created monitor wraps the given monitor, calling cancel on the given monitor when the\n timeout is reached.  This method allows you to use an existing monitor while adding\n the timeout feature.\n@param timeout the timeout value\n@param timeUnit the timeout time unit\n@param monitor the monitor to wrap\n@return the newly created monitor",
      "static": true,
      "params": [
        {
          "name": "timeout",
          "type_long": "long",
          "type_short": "long",
          "comment": "the timeout value"
        },
        {
          "name": "timeUnit",
          "type_long": "java.util.concurrent.TimeUnit",
          "type_short": "TimeUnit",
          "comment": "the timeout time unit"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor to wrap"
        }
      ],
      "return": {
        "type_long": "ghidra.util.task.TimeoutTaskMonitor",
        "type_short": "TimeoutTaskMonitor",
        "comment": "the newly created monitor"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "delegate",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "timeout",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "timeUnit",
          "type_long": "java.util.concurrent.TimeUnit",
          "type_short": "TimeUnit",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTimeoutListener",
      "comment": "Sets a callback function that will be called if the timeout is reached.",
      "javadoc": "Sets a callback function that will be called if the timeout is reached.\n@param timeoutCallback the callback to call",
      "static": false,
      "params": [
        {
          "name": "timeoutCallback",
          "type_long": "utility.function.Callback",
          "type_short": "Callback",
          "comment": "the callback to call"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "didTimeout",
      "comment": "Returns true if this monitor has timed-out",
      "javadoc": "Returns true if this monitor has timed-out\n@return true if this monitor has timed-out",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this monitor has timed-out"
      },
      "throws": []
    },
    {
      "name": "finished",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCancelled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setShowProgressValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "showProgressValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMessage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMessage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProgress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "max",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMaximum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "max",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaximum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setIndeterminate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "indeterminate",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isIndeterminate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkCanceled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "incrementProgress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "incrementAmount",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "timeout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cancel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addCancelledListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.util.task.CancelledListener",
          "type_short": "CancelledListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeCancelledListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.util.task.CancelledListener",
          "type_short": "CancelledListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCancelEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "enable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCancelEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearCanceled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
