{
  "name": "BufferedSwingRunner",
  "comment": "A class that run the client\u0027s runnable on the Swing thread.  Repeated requests will get buffered\n until the max delay is reached.",
  "javadoc": "A class that run the client\u0027s runnable on the Swing thread.  Repeated requests will get buffered\n until the max delay is reached.",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.task.AbstractSwingUpdateManager",
  "fields": [
    {
      "name": "nextRunnable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Runnable",
      "type_short": "Runnable",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new SwingUpdateManager\n \n Note: The minDelay will always be at least #MIN_DELAY_FLOOR, \n regardless of the given value.",
      "javadoc": "Constructs a new SwingUpdateManager\n \u003cp\u003e\n \u003cb\u003eNote: \u003c/b\u003eThe \u003ccode\u003eminDelay\u003c/code\u003e will always be at least {@link #MIN_DELAY_FLOOR}, \n regardless of the given value.\n@param minDelay the minimum number of milliseconds to wait once the event stream stops\n                 coming in before actually updating the screen.\n@param maxDelay the maximum amount of time to wait between gui updates.",
      "static": false,
      "params": [
        {
          "name": "minDelay",
          "type_long": "int",
          "type_short": "int",
          "comment": "the minimum number of milliseconds to wait once the event stream stops\n                 coming in before actually updating the screen."
        },
        {
          "name": "maxDelay",
          "type_long": "int",
          "type_short": "int",
          "comment": "the maximum amount of time to wait between gui updates."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "swingDoWork",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "run",
      "comment": "Runs the given runnable.  If this is the first call to run, then do the work\n immediately; otherwise, buffer the request until the timeout has expired.\n \n See the header of AbstractSwingUpdateManager for details on the update process.",
      "javadoc": "Runs the given runnable.  If this is the first call to \u003ccode\u003erun\u003c/code\u003e, then do the work\n immediately; otherwise, buffer the request until the timeout has expired.\n \n \u003cp\u003eSee the header of {@link AbstractSwingUpdateManager} for details on the update process.\n@param r the task to run on the Swing thread",
      "static": false,
      "params": [
        {
          "name": "r",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "the task to run on the Swing thread"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "runLater",
      "comment": "Runs the given runnable later, buffering the request until the timeout has expired.\n \n See the header of AbstractSwingUpdateManager for details on the update process.",
      "javadoc": "Runs the given runnable later, buffering the request until the timeout has expired.\n \n \u003cp\u003eSee the header of {@link AbstractSwingUpdateManager} for details on the update process.\n@param r the task to run on the Swing thread",
      "static": false,
      "params": [
        {
          "name": "r",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "the task to run on the Swing thread"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "prepareCurrentRunnable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Runnable",
        "type_short": "Runnable",
        "comment": ""
      },
      "throws": []
    }
  ]
}
