{
  "name": "TaskLauncher",
  "comment": "Class to initiate a Task in a new Thread, and to show a progress dialog that indicates\n activity if the task takes too long.  The progress dialog will show an \n animation in the event that the task of this class cannot show progress.\n\n For complete control of how this class functions, use\n #TaskLauncher(Task, Component, int, int).  Alternatively, for simpler uses,\n see one of the many static convenience methods.\n \n Modal Usage\n Most clients of this class should not be concerned with where \n the dialog used by this class will appear.  By default, it will be shown over \n the active window, which is the desired\n behavior for most uses.  If you should need a dialog to appear over a non-active window,\n then either specify that window, or a child component of that window, by calling a\n constructor that takes in a Component.  Further, if you task is modal, then the\n progress dialog should always be shown over the active window so that users understand that\n their UI is blocked.  In this case, there is no need to specify a component over which to\n show the dialog.\n\n An alternative to using this class is to use the TaskBuilder, which offers a\n more Fluent API approach for your tasking needs.",
  "javadoc": "Class to initiate a Task in a new Thread, and to show a progress dialog that indicates\n activity \u003cb\u003eif the task takes too long\u003c/b\u003e.  The progress dialog will show an \n animation in the event that the task of this class cannot show progress.\n\n \u003cp\u003eFor complete control of how this class functions, use\n {@link #TaskLauncher(Task, Component, int, int)}.  Alternatively, for simpler uses,\n see one of the many static convenience methods.\n \n \u003cp\u003e\u003cb\u003e\u003ca id\u003d\"modal_usage\"\u003eModal Usage\u003c/a\u003e\u003c/b\u003e\u003cbr\u003e\n Most clients of this class should not be concerned with where \n the dialog used by this class will appear.  By default, it will be shown over \n the active window, which is the desired\n behavior for most uses.  If you should need a dialog to appear over a non-active window,\n then either specify that window, or a child component of that window, by calling a\n constructor that takes in a {@link Component}.  Further, if you task is modal, then the\n progress dialog should always be shown over the active window so that users understand that\n their UI is blocked.  In this case, there is no need to specify a component over which to\n show the dialog.\n\n \u003cP\u003eAn alternative to using this class is to use the {@link TaskBuilder}, which offers a\n more \u003ci\u003eFluent API\u003c/i\u003e approach for your tasking needs.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "INITIAL_DELAY_MS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1000"
    },
    {
      "name": "INITIAL_MODAL_DELAY_MS",
      "comment": "The time, for modal tasks, to try and run before blocking and showing a dialog",
      "javadoc": "The time, for modal tasks, to try and run before blocking and showing a dialog",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "500"
    }
  ],
  "methods": [
    {
      "name": "launch",
      "comment": "Directly launches a Task via a new TaskLauncher instance, with\n a progress dialog.\n \n See also TaskLauncher#TaskLauncher(Task, Component)",
      "javadoc": "Directly launches a {@link Task} via a new {@link TaskLauncher} instance, with\n a progress dialog.\n \u003cp\u003e\n See also {@link TaskLauncher#TaskLauncher(Task, Component)}\n@param task {@link Task} to run in another thread\n@return the original {@link Task} (for chaining)",
      "static": true,
      "params": [
        {
          "name": "task",
          "type_long": "T",
          "type_short": "T",
          "comment": "Task to run in another thread"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the original Task (for chaining)"
      },
      "throws": []
    },
    {
      "name": "launchNonModal",
      "comment": "A convenience method to directly run a MonitoredRunnable in a separate\n thread as a Task, displaying a non-modal progress dialog.\n \n \n TaskLauncher.launchNonModal( \"My task\", \n  null, // parent\n \tmonitor - { while ( !monitor.isCanceled() ) { longRunningWork(); } }\n );\n \n\n Note: the task created by this call will be both cancellable and have progress.  If\n you task cannot be cancelled or does not have progress, then do not use this\n convenience method, but rather call one of the constructors of this class.\n\n See notes on non-modal usage",
      "javadoc": "A convenience method to directly run a {@link MonitoredRunnable} in a separate\n thread as a {@link Task}, displaying a non-modal progress dialog.\n \u003cp\u003e\n \u003ccode\u003e\n TaskLauncher.launchNonModal( \"My task\", \u003cbr\u003e\n  \u0026nbsp;\u0026nbsp;null, // parent\u003cbr\u003e\n \t\u0026nbsp;\u0026nbsp;monitor -\u0026gt; { while ( !monitor.isCanceled() ) { longRunningWork(); } }\u003cbr\u003e\n );\n \u003c/code\u003e\n\n \u003cp\u003eNote: the task created by this call will be both cancellable and have progress.  If\n you task cannot be cancelled or does not have progress, then do not use this\n convenience method, but rather call one of the constructors of this class.\n\n \u003cp\u003eSee \u003ca href\u003d\"#modal_usage\"\u003enotes on non-modal usage\u003c/a\u003e\n@param title name of the task thread that will be executing this task.\n@param runnable {@link MonitoredRunnable} that takes a {@link TaskMonitor}.",
      "static": true,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the task thread that will be executing this task."
        },
        {
          "name": "runnable",
          "type_long": "ghidra.util.task.MonitoredRunnable",
          "type_short": "MonitoredRunnable",
          "comment": "MonitoredRunnable that takes a TaskMonitor."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "launchModal",
      "comment": "A convenience method to directly run a MonitoredRunnable in a separate\n thread as a Task, displaying a modal progress dialog.\n \n \n TaskLauncher.launchModal( \"My task\", \n  null, // parent\n \tmonitor - { while ( !monitor.isCanceled() ) { longRunningWork(); } }\n );\n \n\n Note: the task created by this call will be both cancellable and have progress.  If\n you task cannot be cancelled or does not have progress, then do not use this\n convenience method, but rather call one of the constructors of this class or\n #launchModal(String, MonitoredRunnable).",
      "javadoc": "A convenience method to directly run a {@link MonitoredRunnable} in a separate\n thread as a {@link Task}, displaying a \u003cb\u003emodal\u003c/b\u003e progress dialog.\n \u003cp\u003e\n \u003ccode\u003e\n TaskLauncher.launchModal( \"My task\", \u003cbr\u003e\n  \u0026nbsp;\u0026nbsp;null, // parent\u003cbr\u003e\n \t\u0026nbsp;\u0026nbsp;monitor -\u0026gt; { while ( !monitor.isCanceled() ) { longRunningWork(); } }\u003cbr\u003e\n );\n \u003c/code\u003e\n\n \u003cp\u003eNote: the task created by this call will be both cancellable and have progress.  If\n you task cannot be cancelled or does not have progress, then do not use this\n convenience method, but rather call one of the constructors of this class or\n {@link #launchModal(String, MonitoredRunnable)}.\n@param title name of the task thread that will be executing this task.\n@param runnable {@link MonitoredRunnable} that takes a {@link TaskMonitor}.",
      "static": true,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the task thread that will be executing this task."
        },
        {
          "name": "runnable",
          "type_long": "ghidra.util.task.MonitoredRunnable",
          "type_short": "MonitoredRunnable",
          "comment": "MonitoredRunnable that takes a TaskMonitor."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "launchModal",
      "comment": "A convenience method to directly run a Runnable in a separate\n thread as a Task, displaying a non-modal progress dialog.\n\n This modal will be launched immediately, without delay.  Typically the launcher will\n delay showing the modal dialog in order to prevent the dialog from being shown, just\n to have it immediately go away.  If you desire this default behavior, then do not use\n this convenience method.\n\n \n TaskLauncher.launchModal( \"My task\", \n \tmonitor - { { foo(); }\n );\n \n\n Note: the task created by this call will not be cancellable nor have progress.  If\n you need either of these behaviors, the do not use this\n convenience method, but rather call one of the constructors of this class.",
      "javadoc": "A convenience method to directly run a {@link Runnable} in a separate\n thread as a {@link Task}, displaying a non-modal progress dialog.\n\n \u003cp\u003eThis modal will be launched immediately, without delay.  Typically the launcher will\n delay showing the modal dialog in order to prevent the dialog from being shown, just\n to have it immediately go away.  If you desire this default behavior, then do not use\n this convenience method.\n\n \u003cp\u003e\u003ccode\u003e\n TaskLauncher.launchModal( \"My task\", \u003cbr\u003e\n \t\u0026nbsp;\u0026nbsp;monitor -\u0026gt; { { foo(); }\u003cbr\u003e\n );\n \u003c/code\u003e\n\n \u003cp\u003eNote: the task created by this call will not be cancellable nor have progress.  If\n you need either of these behaviors, the do not use this\n convenience method, but rather call one of the constructors of this class.\n@param title name of the task thread that will be executing this task.\n@param runnable {@link Runnable} to be called in a background thread",
      "static": true,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the task thread that will be executing this task."
        },
        {
          "name": "runnable",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "Runnable to be called in a background thread"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for TaskLauncher\n\n This constructor assumes that if a progress dialog is needed, then it should appear\n over the active window.  If you should need a dialog to appear over a non-active window,\n then either specify that window or a component within that window by calling a\n constructor that takes in a Component.",
      "javadoc": "Constructor for TaskLauncher\n\n \u003cp\u003eThis constructor assumes that if a progress dialog is needed, then it should appear\n over the active window.  If you should need a dialog to appear over a non-active window,\n then either specify that window or a component within that window by calling a\n constructor that takes in a {@link Component}.\n@param task task to run in another thread (other than the Swing Thread)",
      "static": false,
      "params": [
        {
          "name": "task",
          "type_long": "ghidra.util.task.Task",
          "type_short": "Task",
          "comment": "task to run in another thread (other than the Swing Thread)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for TaskLauncher\n\n See notes on modal usage",
      "javadoc": "Constructor for TaskLauncher\n\n \u003cp\u003eSee \u003ca href\u003d\"#modal_usage\"\u003enotes on modal usage\u003c/a\u003e\n@param task task to run in another thread (other than the Swing Thread)\n@param parent component whose window to use to parent the dialog.",
      "static": false,
      "params": [
        {
          "name": "task",
          "type_long": "ghidra.util.task.Task",
          "type_short": "Task",
          "comment": "task to run in another thread (other than the Swing Thread)"
        },
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "component whose window to use to parent the dialog."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new TaskLauncher\n\n See notes on modal usage",
      "javadoc": "Construct a new TaskLauncher\n\n \u003cp\u003eSee \u003ca href\u003d\"#modal_usage\"\u003enotes on modal usage\u003c/a\u003e\n@param task task to run in another thread (other than the Swing Thread)\n@param parent component whose window to use to parent the dialog; null centers the task\n        dialog over the current window\n@param delayMs number of milliseconds to delay until the task monitor is displayed",
      "static": false,
      "params": [
        {
          "name": "task",
          "type_long": "ghidra.util.task.Task",
          "type_short": "Task",
          "comment": "task to run in another thread (other than the Swing Thread)"
        },
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "component whose window to use to parent the dialog; null centers the task\n        dialog over the current window"
        },
        {
          "name": "delayMs",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of milliseconds to delay until the task monitor is displayed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new TaskLauncher\n\n See notes on modal usage",
      "javadoc": "Construct a new TaskLauncher\n\n \u003cp\u003eSee \u003ca href\u003d\"#modal_usage\"\u003enotes on modal usage\u003c/a\u003e\n@param task task to run in another thread (other than the Swing Thread)\n@param parent component whose window to use to parent the dialog; null centers the task\n        dialog over the current window\n@param delayMs number of milliseconds to delay until the task monitor is displayed\n@param dialogWidth The preferred width of the dialog (this allows clients to make a wider\n        dialog, which better shows long messages).",
      "static": false,
      "params": [
        {
          "name": "task",
          "type_long": "ghidra.util.task.Task",
          "type_short": "Task",
          "comment": "task to run in another thread (other than the Swing Thread)"
        },
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "component whose window to use to parent the dialog; null centers the task\n        dialog over the current window"
        },
        {
          "name": "delayMs",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of milliseconds to delay until the task monitor is displayed"
        },
        {
          "name": "dialogWidth",
          "type_long": "int",
          "type_short": "int",
          "comment": "The preferred width of the dialog (this allows clients to make a wider\n        dialog, which better shows long messages)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createTaskRunner",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "task",
          "type_long": "ghidra.util.task.Task",
          "type_short": "Task",
          "comment": ""
        },
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        },
        {
          "name": "delayMs",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dialogWidth",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.task.TaskRunner",
        "type_short": "TaskRunner",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParent",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": ""
      },
      "throws": []
    }
  ]
}
