{
  "name": "Task",
  "comment": "Base class for Tasks to be run in separate threads",
  "javadoc": "Base class for Tasks to be run in separate threads",
  "static": false,
  "implements": [
    "ghidra.util.task.MonitoredRunnable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "title",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "hasProgress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isModal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "waitForTaskCompleted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "listeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cghidra.util.task.TaskListener\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "taskMonitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    },
    {
      "name": "canCancel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isCancelled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates new Task.",
      "javadoc": "Creates new Task.\n@param title the title associated with the task",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title associated with the task"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new Task.",
      "javadoc": "Construct a new Task.\n@param title title the title associated with the task\n@param canCancel true means that the user can cancel the task\n@param hasProgress true means that the dialog should show a\n progress indicator\n@param isModal true means that the dialog is modal and the task has to\n complete or be canceled before any other action can occur",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "title the title associated with the task"
        },
        {
          "name": "canCancel",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means that the user can cancel the task"
        },
        {
          "name": "hasProgress",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means that the dialog should show a\n progress indicator"
        },
        {
          "name": "isModal",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means that the dialog is modal and the task has to\n complete or be canceled before any other action can occur"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new Task.",
      "javadoc": "Construct a new Task.\n@param title title the title associated with the task\n@param canCancel true means that the user can cancel the task\n@param hasProgress true means that the dialog should show a\n progress indicator\n@param isModal true means that the dialog is modal and the task has to\n complete or be canceled before any other action can occur\n@param waitForTaskCompleted true causes the running thread to block until the finish or\n  \t  cancelled callback has completed on the swing thread.  Note: passing true\n  \t  only makes sense if the task is modal.",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "title the title associated with the task"
        },
        {
          "name": "canCancel",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means that the user can cancel the task"
        },
        {
          "name": "hasProgress",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means that the dialog should show a\n progress indicator"
        },
        {
          "name": "isModal",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means that the dialog is modal and the task has to\n complete or be canceled before any other action can occur"
        },
        {
          "name": "waitForTaskCompleted",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true causes the running thread to block until the finish or\n  \t  cancelled callback has completed on the swing thread.  Note: passing true\n  \t  only makes sense if the task is modal."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTaskTitle",
      "comment": "Get the title associated with the task",
      "javadoc": "Get the title associated with the task\n@return String title shown in the dialog",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String title shown in the dialog"
      },
      "throws": []
    },
    {
      "name": "getStatusTextAlignment",
      "comment": "Returns the alignment of the text displayed in the modal dialog.  The default is\n SwingConstants#CENTER.   For status updates where the initial portion of the\n text does not change, SwingConstants#LEADING is recommended.  To change the\n default value, simply override this method and return one of SwingConstants\n CENTER, LEADING or TRAILING.",
      "javadoc": "Returns the alignment of the text displayed in the modal dialog.  The default is\n {@link SwingConstants#CENTER}.   For status updates where the initial portion of the\n text does not change, {@link SwingConstants#LEADING} is recommended.  To change the\n default value, simply override this method and return one of {@link SwingConstants}\n CENTER, LEADING or TRAILING.\n@return the alignment of the text displayed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the alignment of the text displayed"
      },
      "throws": []
    },
    {
      "name": "getWaitForTaskCompleted",
      "comment": "Returns the value of the \u0027wait for completed task\u0027 boolean that was passed into this class",
      "javadoc": "Returns the value of the \u0027wait for completed task\u0027 boolean that was passed into this class\n@return the value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "the value"
      },
      "throws": []
    },
    {
      "name": "monitoredRun",
      "comment": "When an object implementing interface Runnable is used to create a thread,\n starting the thread causes the object\u0027s run method to be called in that\n separately executing thread.",
      "javadoc": "When an object implementing interface \u003ccode\u003eRunnable\u003c/code\u003e is used to create a thread,\n starting the thread causes the object\u0027s \u003ccode\u003erun\u003c/code\u003e method to be called in that\n separately executing thread.\n@param monitor the task monitor",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cancel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCancelled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "notifyTaskListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "wasCancelled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "run",
      "comment": "This is the method that will be called to do the work\n\n Note: The run(TaskMonitor) method should not make any calls directly\n on Swing components, as these calls are not thread safe. Place Swing\n calls in a Runnable, then call Swing#runLater(Runnable) or\n Swing#runNow(Runnable)to schedule the Runnable inside of\n the AWT Event Thread.",
      "javadoc": "This is the method that will be called to do the work\n\n \u003cP\u003eNote: The run(TaskMonitor) method should not make any calls directly\n on Swing components, as these calls are not thread safe. Place Swing\n calls in a Runnable, then call {@link Swing#runLater(Runnable)} or\n {@link Swing#runNow(Runnable)}to schedule the Runnable inside of\n the AWT Event Thread.\n@param monitor The TaskMonitor that will monitor the executing Task\n@throws CancelledException if the task is cancelled.  Subclasses can trigger this exception\n                            by calling {@link TaskMonitor#checkCanceled()}.  This allows\n                            them to break out of the current work stack.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "The TaskMonitor that will monitor the executing Task"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the task is cancelled.  Subclasses can trigger this exception\n                            by calling TaskMonitor#checkCanceled().  This allows\n                            them to break out of the current work stack."
        }
      ]
    },
    {
      "name": "hasProgress",
      "comment": "Return true if the task has a progress indicator.",
      "javadoc": "Return true if the task has a progress indicator.\n@return boolean true if the task shows progress",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the task shows progress"
      },
      "throws": []
    },
    {
      "name": "setHasProgress",
      "comment": "Sets this task to have progress or not.  Note: changing this value after launching the\n task will have no effect.",
      "javadoc": "Sets this task to have progress or not.  Note: changing this value after launching the\n task will have no effect.\n@param b true to show progress, false otherwise.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to show progress, false otherwise."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "canCancel",
      "comment": "Returns true if the task can be canceled.",
      "javadoc": "Returns true if the task can be canceled.\n@return boolean true if the user can cancel the task",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the user can cancel the task"
      },
      "throws": []
    },
    {
      "name": "isModal",
      "comment": "Returns true if the dialog associated with the task is modal.",
      "javadoc": "Returns true if the dialog associated with the task is modal.\n@return boolean true if the associated dialog is modal",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the associated dialog is modal"
      },
      "throws": []
    },
    {
      "name": "addTaskListener",
      "comment": "Sets the task listener on this task.  It is a programming error to call this method more\n than once or to call this method if a listener was passed into the constructor of this class.",
      "javadoc": "Sets the task listener on this task.  It is a programming error to call this method more\n than once or to call this method if a listener was passed into the constructor of this class.\n@param listener the listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.util.task.TaskListener",
          "type_short": "TaskListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
