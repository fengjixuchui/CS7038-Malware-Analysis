{
  "name": "TaskBuilder",
  "comment": "A builder object that allows clients to launch tasks in the background, with a progress\n dialog representing the task.\n\n Using this class obviates the need for clients to create full class objects to implement\n the Task interface, which means less boiler-plate code.\n\n An example of usage:\n \n \n\n Or,\n\n \n \n\n  Or,\n\n \n TaskBuilder.withTask(new AwesomeTask(awesomeStuff)).launchModal();\n \n\n Or,\n\n \n TaskLauncher#launch(Task)(new AwesomeTask(awesomeStuff));\n \n\n\n Note: this class will check to see if it is in a headless environment before launching\n its task.  This makes it safe to use this class in headed or headless environments.",
  "javadoc": "A builder object that allows clients to launch tasks in the background, with a progress\n dialog representing the task.\n\n \u003cP\u003eUsing this class obviates the need for clients to create full class objects to implement\n the {@link Task} interface, which means less boiler-plate code.\n\n \u003cP\u003eAn example of usage:\n \u003cpre\u003e\n {@literal\n MonitoredRunnable r \u003d\n     monitor -\u003e doWork(parameter, monitor);\n     \n new TaskBuilder(\"Task Title\", r)\n    .setHasProgress(true)\n    .setCanCancel(true)\n    .setStatusTextAlignment(SwingConstants.LEADING)\n    .launchModal();\n }\u003c/pre\u003e\n\n Or,\n\n \u003cpre\u003e\n {@literal\n TaskBuilder.withRunnable(monitor -\u003e doWork(parameter, monitor))\n     .setTitle(\"Task Title\")\n     .setHasProgress(true)\n     .setCanCancel(true)\n     .setStatusTextAlignment(SwingConstants.LEADING)\n     .launchModal();\n }\u003c/pre\u003e\n\n  Or,\n\n \u003cpre\u003e\n TaskBuilder.withTask(new AwesomeTask(awesomeStuff)).launchModal();\n \u003c/pre\u003e\n\n Or,\n\n \u003cpre\u003e\n {@link TaskLauncher#launch(Task) TaskLauncher.launch}(new AwesomeTask(awesomeStuff));\n \u003c/pre\u003e\n\n\n \u003cp\u003eNote: this class will check to see if it is in a headless environment before launching\n its task.  This makes it safe to use this class in headed or headless environments.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "title",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "runnable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.MonitoredRunnable",
      "type_short": "MonitoredRunnable",
      "constant_value": null
    },
    {
      "name": "parent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Component",
      "type_short": "Component",
      "constant_value": null
    },
    {
      "name": "launchDelay",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "dialogWidth",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "hasProgress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "canCancel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "waitForTaskCompletion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "statusTextAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "withRunnable",
      "comment": "A convenience method to start a builder using the given runnable.  After calling this\n method you are still required to call #setTitle(String).\n\n This method allows for a more attractive fluent API usage than does the constructor\n (see the javadoc header).",
      "javadoc": "A convenience method to start a builder using the given runnable.  After calling this\n method you are still required to call {@link #setTitle(String)}.\n\n \u003cp\u003eThis method allows for a more attractive fluent API usage than does the constructor\n (see the javadoc header).\n@param r the runnable\n@return this builder",
      "static": true,
      "params": [
        {
          "name": "r",
          "type_long": "ghidra.util.task.MonitoredRunnable",
          "type_short": "MonitoredRunnable",
          "comment": "the runnable"
        }
      ],
      "return": {
        "type_long": "ghidra.util.task.TaskBuilder",
        "type_short": "TaskBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "withTask",
      "comment": "A convenience method to start a builder using the given task.  The\n #setTitle(String) of the task will be the value of\n Task#getTaskTitle().\n\n This method allows for a more attractive fluent API usage than does the constructor\n (see the javadoc header).",
      "javadoc": "A convenience method to start a builder using the given task.  The\n {@link #setTitle(String) title} of the task will be the value of\n {@link Task#getTaskTitle()}.\n\n \u003cp\u003eThis method allows for a more attractive fluent API usage than does the constructor\n (see the javadoc header).\n@param t the task\n@return this builder",
      "static": true,
      "params": [
        {
          "name": "t",
          "type_long": "ghidra.util.task.Task",
          "type_short": "Task",
          "comment": "the task"
        }
      ],
      "return": {
        "type_long": "ghidra.util.task.TaskBuilder",
        "type_short": "TaskBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "r",
          "type_long": "ghidra.util.task.MonitoredRunnable",
          "type_short": "MonitoredRunnable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param title the required title for your task.  This will appear as the title of the\n        task dialog\n@param runnable the runnable that will be called when the task is run",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the required title for your task.  This will appear as the title of the\n        task dialog"
        },
        {
          "name": "runnable",
          "type_long": "ghidra.util.task.MonitoredRunnable",
          "type_short": "MonitoredRunnable",
          "comment": "the runnable that will be called when the task is run"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTitle",
      "comment": "Sets the title of this task.  The title must be set before calling any of the\n launch methods.",
      "javadoc": "Sets the title of this task.  The title must be set before calling any of the\n \u003ccode\u003elaunch\u003c/code\u003e methods.\n@param title the title\n@return this builder",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title"
        }
      ],
      "return": {
        "type_long": "ghidra.util.task.TaskBuilder",
        "type_short": "TaskBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "setHasProgress",
      "comment": "Sets whether this task reports progress.   The default is true.",
      "javadoc": "Sets whether this task reports progress.   The default is \u003ccode\u003etrue\u003c/code\u003e.\n@param hasProgress true if the task reports progress\n@return this builder",
      "static": false,
      "params": [
        {
          "name": "hasProgress",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the task reports progress"
        }
      ],
      "return": {
        "type_long": "ghidra.util.task.TaskBuilder",
        "type_short": "TaskBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "setCanCancel",
      "comment": "Sets whether the task can be cancelled.  The default is true.",
      "javadoc": "Sets whether the task can be cancelled.  The default is \u003ccode\u003etrue\u003c/code\u003e.\n@param canCancel true if the task can be cancelled.\n@return this builder",
      "static": false,
      "params": [
        {
          "name": "canCancel",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the task can be cancelled."
        }
      ],
      "return": {
        "type_long": "ghidra.util.task.TaskBuilder",
        "type_short": "TaskBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "setParent",
      "comment": "Sets the component over which the task dialog will be shown.  The default is null,\n which shows the dialog over the active window.",
      "javadoc": "Sets the component over which the task dialog will be shown.  The default is \u003ccode\u003enull\u003c/code\u003e,\n which shows the dialog over the active window.\n@param parent the parent\n@return this builder",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the parent"
        }
      ],
      "return": {
        "type_long": "ghidra.util.task.TaskBuilder",
        "type_short": "TaskBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "setLaunchDelay",
      "comment": "Sets the amount of time that will pass before showing the dialog.  The default is\n TaskLauncher#INITIAL_DELAY_MS for non-modal tasks and\n TaskLauncher#INITIAL_MODAL_DELAY_MS for modal tasks.",
      "javadoc": "Sets the amount of time that will pass before showing the dialog.  The default is\n {@link TaskLauncher#INITIAL_DELAY_MS} for non-modal tasks and\n {@link TaskLauncher#INITIAL_MODAL_DELAY_MS} for modal tasks.\n@param delay the delay time\n@return this builder",
      "static": false,
      "params": [
        {
          "name": "delay",
          "type_long": "int",
          "type_short": "int",
          "comment": "the delay time"
        }
      ],
      "return": {
        "type_long": "ghidra.util.task.TaskBuilder",
        "type_short": "TaskBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "setDialogWidth",
      "comment": "The desired width of the dialog.  The default is TaskDialog#DEFAULT_WIDTH.",
      "javadoc": "The desired width of the dialog.  The default is {@link TaskDialog#DEFAULT_WIDTH}.\n@param width the width\n@return this builder",
      "static": false,
      "params": [
        {
          "name": "width",
          "type_long": "int",
          "type_short": "int",
          "comment": "the width"
        }
      ],
      "return": {
        "type_long": "ghidra.util.task.TaskBuilder",
        "type_short": "TaskBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "setStatusTextAlignment",
      "comment": "Sets the horizontal text alignment of messages shown in the task dialog.  The\n default is SwingConstants#CENTER.  Valid values are SwingConstants\n LEADING, CENTER and TRAILING.",
      "javadoc": "Sets the horizontal text alignment of messages shown in the task dialog.  The\n default is {@link SwingConstants#CENTER}.  Valid values are {@link SwingConstants}\n LEADING, CENTER and TRAILING.\n@param alignment the alignment\n@return this builder",
      "static": false,
      "params": [
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": "the alignment"
        }
      ],
      "return": {
        "type_long": "ghidra.util.task.TaskBuilder",
        "type_short": "TaskBuilder",
        "comment": "this builder"
      },
      "throws": []
    },
    {
      "name": "launchModal",
      "comment": "Launches the task built by this builder, using a blocking modal dialog.  The task will\n be run in the current thread if in a headless environment.",
      "javadoc": "Launches the task built by this builder, using a blocking modal dialog.  The task will\n be run in the current thread if in a headless environment.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "launchNonModal",
      "comment": "Launches the task built by this builder, using a non-blocking dialog.  The task will\n be run in the current thread if in a headless environment.",
      "javadoc": "Launches the task built by this builder, using a non-blocking dialog.  The task will\n be run in the current thread if in a headless environment.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "launchInBackground",
      "comment": "Runs the task in a background thread with the given monitor that cannot be null.  This\n is a special case for clients that already have a task monitor widget in their UI and\n they wish to let it show the progress of the given task while not blocking the Swing\n thread.",
      "javadoc": "Runs the task in a background thread with the given monitor that cannot be null.  This\n is a special case for clients that already have a task monitor widget in their UI and\n they wish to let it show the progress of the given task while not blocking the Swing\n thread.\n@param monitor the task monitor; may not be null",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor; may not be null"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "validate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDelay",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "userDelay",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "isModal",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
