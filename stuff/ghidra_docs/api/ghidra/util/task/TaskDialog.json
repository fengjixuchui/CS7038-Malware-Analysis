{
  "name": "TaskDialog",
  "comment": "Dialog that is displayed to show activity for a Task that is running outside of the\n Swing Thread.\n\n Implementation note:\n if this class is constructed with a  value of ,\n then an activity component will be shown, not a progress monitor.   Any calls to update\n progress will not affect the display.   However, the display can be converted to use progress\n by first calling #setIndeterminate(boolean) with a  value and then calling\n #initialize(long).    Once this has happened, this dialog will no longer use the\n activity display--the progress bar is in effect for the duration of this dialog\u0027s usage.\n\n This dialog can be toggled between indeterminate mode and progress mode via calls to\n #setIndeterminate(boolean).",
  "javadoc": "Dialog that is displayed to show activity for a Task that is running outside of the\n Swing Thread.\n\n \u003cp\u003eImplementation note:\n if this class is constructed with a {@code hasProgress} value of {@code false},\n then an activity component will be shown, not a progress monitor.   Any calls to update\n progress will not affect the display.   However, the display can be converted to use progress\n by first calling {@link #setIndeterminate(boolean)} with a {@code false} value and then calling\n {@link #initialize(long)}.    Once this has happened, this dialog will no longer use the\n activity display--the progress bar is in effect for the duration of this dialog\u0027s usage.\n\n \u003cp\u003eThis dialog can be toggled between indeterminate mode and progress mode via calls to\n {@link #setIndeterminate(boolean)}.",
  "static": false,
  "implements": [
    "ghidra.util.task.TaskMonitor"
  ],
  "extends": "docking.DialogComponentProvider",
  "fields": [
    {
      "name": "MAX_DELAY",
      "comment": "Amount of time to wait before showing the monitor dialog",
      "javadoc": "Amount of time to wait before showing the monitor dialog",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "200000"
    },
    {
      "name": "DEFAULT_WIDTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "275"
    },
    {
      "name": "closeDialog",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Runnable",
      "type_short": "Runnable",
      "constant_value": null
    },
    {
      "name": "verifyCancel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Runnable",
      "type_short": "Runnable",
      "constant_value": null
    },
    {
      "name": "showTimer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.timer.GTimerMonitor",
      "type_short": "GTimerMonitor",
      "constant_value": null
    },
    {
      "name": "finished",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.concurrent.CountDownLatch",
      "type_short": "CountDownLatch",
      "constant_value": null
    },
    {
      "name": "supportsProgress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "mainPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JPanel",
      "type_short": "JPanel",
      "constant_value": null
    },
    {
      "name": "activityPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JPanel",
      "type_short": "JPanel",
      "constant_value": null
    },
    {
      "name": "monitorComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitorComponent",
      "type_short": "TaskMonitorComponent",
      "constant_value": null
    },
    {
      "name": "centerOnComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Component",
      "type_short": "Component",
      "constant_value": null
    },
    {
      "name": "newMessage",
      "comment": "If not null, then the value of the string has yet to be rendered",
      "javadoc": "If not null, then the value of the string has yet to be rendered",
      "static": false,
      "type_long": "java.util.concurrent.atomic.AtomicReference\u003cjava.lang.String\u003e",
      "type_short": "AtomicReference",
      "constant_value": null
    },
    {
      "name": "messageUpdater",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.SwingUpdateManager",
      "type_short": "SwingUpdateManager",
      "constant_value": null
    },
    {
      "name": "shown",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.concurrent.atomic.AtomicBoolean",
      "type_short": "AtomicBoolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param centerOnComp component to be centered over when shown, otherwise center over parent.\n If both centerOnComp and parent are null, dialog will be centered on screen.\n@param task the Task that this dialog will be associated with\n@param finished overrides the latch used by this dialog to know when the task is finished",
      "static": false,
      "params": [
        {
          "name": "centerOnComp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "component to be centered over when shown, otherwise center over parent.\n If both centerOnComp and parent are null, dialog will be centered on screen."
        },
        {
          "name": "task",
          "type_long": "ghidra.util.task.Task",
          "type_short": "Task",
          "comment": "the Task that this dialog will be associated with"
        },
        {
          "name": "finished",
          "type_long": "java.util.concurrent.CountDownLatch",
          "type_short": "CountDownLatch",
          "comment": "overrides the latch used by this dialog to know when the task is finished"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param task the Task that this dialog will be associated with",
      "static": false,
      "params": [
        {
          "name": "task",
          "type_long": "ghidra.util.task.Task",
          "type_short": "Task",
          "comment": "the Task that this dialog will be associated with"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param title title for the dialog\n@param canCancel true if the task can be canceled\n@param isModal true if the dialog should be modal\n@param hasProgress true if the dialog should show a progress bar",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "title for the dialog"
        },
        {
          "name": "canCancel",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the task can be canceled"
        },
        {
          "name": "isModal",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the dialog should be modal"
        },
        {
          "name": "hasProgress",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the dialog should show a progress bar"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param centerOnComp component to be centered over when shown, otherwise center over\n        parent.  If both centerOnComp is null, then the active window will be used\n@param title title for the dialog\n@param isModal true if the dialog should be modal\n@param canCancel true if the task can be canceled\n@param hasProgress true if the dialog should show a progress bar",
      "static": false,
      "params": [
        {
          "name": "centerOnComp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "component to be centered over when shown, otherwise center over\n        parent.  If both centerOnComp is null, then the active window will be used"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "title for the dialog"
        },
        {
          "name": "isModal",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the dialog should be modal"
        },
        {
          "name": "canCancel",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the task can be canceled"
        },
        {
          "name": "hasProgress",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the dialog should show a progress bar"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "canCancel",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "promptToVerifyCancel",
      "comment": "Shows a dialog asking the user if they really, really want to cancel the task",
      "javadoc": "Shows a dialog asking the user if they really, really want to cancel the task\n@return true if the task should be cancelled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the task should be cancelled"
      },
      "throws": []
    },
    {
      "name": "isInstalled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "installProgressMonitor",
      "comment": "Adds the panel that contains the progress bar to the dialog",
      "javadoc": "Adds the panel that contains the progress bar to the dialog",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "installActivityDisplay",
      "comment": "Adds the panel that contains the activity panel (e.g., the eating bits animation) to the\n dialog. This should only be called if the dialog has no need to display progress.",
      "javadoc": "Adds the panel that contains the activity panel (e.g., the eating bits animation) to the\n dialog. This should only be called if the dialog has no need to display progress.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cancelCallback",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCancelEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "enable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCancelEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "taskProcessed",
      "comment": "Called after the task has been executed or when the task is cancelled",
      "javadoc": "Called after the task has been executed or when the task is cancelled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCompleted",
      "comment": "Returns true if this dialog\u0027s task has completed normally or been cancelled",
      "javadoc": "Returns true if this dialog\u0027s task has completed normally or been cancelled\n@return true if this dialog\u0027s task has completed normally or been cancelled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this dialog\u0027s task has completed normally or been cancelled"
      },
      "throws": []
    },
    {
      "name": "show",
      "comment": "Shows the dialog window centered on the parent window. Dialog display is delayed if delay\n greater than zero.",
      "javadoc": "Shows the dialog window centered on the parent window. Dialog display is delayed if delay\n greater than zero.\n@param delay number of milliseconds to delay displaying of the task dialog.  If the delay is\n greater than {@link #MAX_DELAY}, then the delay will be {@link #MAX_DELAY};\n@throws IllegalArgumentException if {@code delay} is negative",
      "static": false,
      "params": [
        {
          "name": "delay",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of milliseconds to delay displaying of the task dialog.  If the delay is\n greater than #MAX_DELAY, then the delay will be #MAX_DELAY;"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "wasShown",
      "comment": "Returns true if this dialog was ever made visible",
      "javadoc": "Returns true if this dialog was ever made visible\n@return true if shown",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if shown"
      },
      "throws": []
    },
    {
      "name": "doShowModal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "delay",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doShowNonModal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "delay",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doShow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "giveTheTaskThreadAChanceToComplete",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "delay",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "Cancels the task and closes this dialog",
      "javadoc": "Cancels the task and closes this dialog",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cleanup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMessage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMessage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setShowProgressValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "showProgressValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProgress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "progress",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "max",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMaximum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "max",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaximum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setIndeterminate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "indeterminate",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isIndeterminate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCancelled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cancel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "internalCancel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearCanceled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkCanceled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "incrementProgress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "incrementAmount",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addCancelledListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.util.task.CancelledListener",
          "type_short": "CancelledListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeCancelledListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.util.task.CancelledListener",
          "type_short": "CancelledListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
