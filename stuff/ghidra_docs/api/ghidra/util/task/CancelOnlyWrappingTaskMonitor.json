{
  "name": "CancelOnlyWrappingTaskMonitor",
  "comment": "A monitor that is designed for sub-tasks, where the outer task handles reporting messages and\n progress.  This class is really just for checking cancelled.\n \n This class wants the following methods related to cancelling to work normally:\n \n  isCancelled()\n\tcheckCanceled()\n\tcancel()\n\taddCancelledListener(CancelledListener)\n\tremoveCancelledListener(CancelledListener)\n\taddIssueListener(IssueListener)\n\tremoveIssueListener(IssueListener)\n\tisCancelEnabled()\n\t\t\t\n\n\tThe rest of TaskMonitor should be stubbed out.  This means that if any methods are \n\tadded to the TaskMonitor interface, and subsequently implemented in this class\u0027s parent,\n\tthen this class needs to override them.",
  "javadoc": "A monitor that is designed for sub-tasks, where the outer task handles reporting messages and\n progress.  This class is really just for checking cancelled.\n \n \u003cP\u003eThis class wants the following methods related to cancelling to work normally:\n \u003cUL\u003e\n  \u003cLI\u003eisCancelled()\u003c/LI\u003e\n\t\u003cLI\u003echeckCanceled()\u003c/LI\u003e\n\t\u003cLI\u003ecancel()\u003c/LI\u003e\n\t\u003cLI\u003eaddCancelledListener(CancelledListener)\u003c/LI\u003e\n\t\u003cLI\u003eremoveCancelledListener(CancelledListener)\u003c/LI\u003e\n\t\u003cLI\u003eaddIssueListener(IssueListener)\u003c/LI\u003e\n\t\u003cLI\u003eremoveIssueListener(IssueListener)\u003c/LI\u003e\n\t\u003cLI\u003eisCancelEnabled()\u003c/LI\u003e\n\t\u003c/UL\u003e\t\t\n\n\t\u003cP\u003eThe rest of TaskMonitor should be stubbed out.  This means that if any methods are \n\tadded to the TaskMonitor interface, and subsequently implemented in this class\u0027s parent,\n\tthen this class needs to override them.",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.task.WrappingTaskMonitor",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "delegate",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setShowProgressValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "showProgressValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMessage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProgress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "max",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMaximum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "max",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaximum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setIndeterminate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "indeterminate",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "incrementProgress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "incrementAmount",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCancelEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "enable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearCanceled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
