{
  "name": "CachingSwingWorker",
  "comment": "Class for managing the creation of some slow loading object that may be used by multiple threads,\n including the Swing thread.  Further, repeated calls to this object will used the\n cached value.\n \n The basic uses cases are:\n \n \t\n \t\tCall #get(TaskMonitor) from the Swing thread - this will block the Swing thread,\n      showing a modal dialog, as needed.\n  \n  \n  \tCall #get(TaskMonitor) from a non-Swing thread - this will block the calling\n      thread, with no effect on the UI.\n  \n  Call #startLoading() - this will trigger this worker to load in the background\n      without blocking the calling thread.\n  \n  \n  \tCall #getCachedValue() - this is a way to see if the value has been loaded\n      without blocking the current thread.\n  \n  \n  \tOverride #done() - this method will be called when the initial loading\n      is finished.\n  \n ",
  "javadoc": "Class for managing the creation of some slow loading object that may be used by multiple threads,\n including the Swing thread.  Further, repeated calls to this object will used the\n cached value.\n \u003cp\u003e\n The basic uses cases are:\n \u003col\u003e\n \t\u003cli\u003e\n \t\tCall {@link #get(TaskMonitor)} \u003cb\u003efrom the Swing thread\u003c/b\u003e - this will block the Swing thread,\n      showing a modal dialog, as needed.\n  \u003c/li\u003e\n  \u003cli\u003e\n  \tCall {@link #get(TaskMonitor)} \u003cb\u003efrom a non-Swing thread\u003c/b\u003e - this will block the calling\n      thread, with no effect on the UI.\n  \u003c/li\u003e\n  \u003cli\u003eCall {@link #startLoading()} - this will trigger this worker to load in the background\n      without blocking the calling thread.\n  \u003c/li\u003e\n  \u003cli\u003e\n  \tCall {@link #getCachedValue()} - this is a way to see if the value has been loaded\n      without blocking the current thread.\n  \u003c/li\u003e\n  \u003cli\u003e\n  \tOverride {@link #done()} - this method will be called when the initial loading\n      is finished.\n  \u003c/li\u003e\n \u003c/ol\u003e\n@param \u003cT\u003e the value type",
  "static": false,
  "implements": [
    "ghidra.util.task.CachingLoader"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "taskDialogDelay",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "hasProgress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "cachedValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "T",
      "type_short": "T",
      "constant_value": null
    },
    {
      "name": "worker",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.SwingWorker\u003cT,java.lang.Object\u003e",
      "type_short": "SwingWorker",
      "constant_value": null
    },
    {
      "name": "taskMonitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.CachingSwingWorker\u003cT\u003e.WorkerTaskMonitor",
      "type_short": "WorkerTaskMonitor",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new CachingSwingWorker",
      "javadoc": "Create a new CachingSwingWorker\n@param name the name of worker. (Displayed in the progress dialog)\n@param hasProgress true if the dialog should show progress or be indeterminate.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of worker. (Displayed in the progress dialog)"
        },
        {
          "name": "hasProgress",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the dialog should show progress or be indeterminate."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTaskDialogDelay",
      "comment": "Sets the initial delay before showing a progress dialog.  The default is 100ms.",
      "javadoc": "Sets the initial delay before showing a progress dialog.  The default is 100ms.\n@param delay the delay to wait before displaying a progress dialog.",
      "static": false,
      "params": [
        {
          "name": "delay",
          "type_long": "int",
          "type_short": "int",
          "comment": "the delay to wait before displaying a progress dialog."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "runInBackground",
      "comment": "Subclasses must implement this method to create the object being managed/cached.",
      "javadoc": "Subclasses must implement this method to create the object being managed/cached.\n@param monitor A task monitor that can be used to provide progress information to\n a progress dialog is it is being shown.  Implementers should also check the monitor \n periodically to check for cancelled. If cancelled, this method should not throw a\n cancelled exception but instead either return null or a partial result. (For example,\n if the object is a list being generated by a search, then it might make sense to return\n a list of the items found so far.)\n@return the newly created object.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "A task monitor that can be used to provide progress information to\n a progress dialog is it is being shown.  Implementers should also check the monitor \n periodically to check for cancelled. If cancelled, this method should not throw a\n cancelled exception but instead either return null or a partial result. (For example,\n if the object is a list being generated by a search, then it might make sense to return\n a list of the items found so far.)"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the newly created object."
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "Returns the object that this class is managing/caching.  It will return the object if it is\n already created or it will block until the object can be created.  If called from the Swing \n thread, it will also launch a modal progress dialog while waiting for the object to be\n created.",
      "javadoc": "Returns the object that this class is managing/caching.  It will return the object if it is\n already created or it will block until the object can be created.  If called from the Swing \n thread, it will also launch a modal progress dialog while waiting for the object to be\n created.\n@param monitor the monitor (may be null)\n@return the object that this class is managing/caching\n@see #getCachedValue()",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor (may be null)"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the object that this class is managing/caching"
      },
      "throws": []
    },
    {
      "name": "startLoading",
      "comment": "Allows clients to start this worker loading without blocking.",
      "javadoc": "Allows clients to start this worker loading without blocking.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCachedValue",
      "comment": "Returns the value only if it is cached, otherwise return null.",
      "javadoc": "Returns the value only if it is cached, otherwise return null.\n@return the value only if it is cached, otherwise return null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the value only if it is cached, otherwise return null."
      },
      "throws": []
    },
    {
      "name": "cancel",
      "comment": "Cancels this swing worker",
      "javadoc": "Cancels this swing worker",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Clears the cached value for the object causing it to be recreated on the next call to get()",
      "javadoc": "Clears the cached value for the object causing it to be recreated on the next call to get()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "done",
      "comment": "A method for clients to use as a callback for completion.  This method will be called in\n the Swing thread, after the value has been set.",
      "javadoc": "A method for clients to use as a callback for completion.  This method will be called in\n the Swing thread, after the value has been set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCachedValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addMonitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "blockSwingWithProgressDialog",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "localWorker",
          "type_long": "javax.swing.SwingWorker\u003cT,java.lang.Object\u003e",
          "type_short": "SwingWorker",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWorker",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.SwingWorker\u003cT,java.lang.Object\u003e",
        "type_short": "SwingWorker",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "swingWorker",
          "type_long": "javax.swing.SwingWorker\u003cT,java.lang.Object\u003e",
          "type_short": "SwingWorker",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    }
  ]
}
