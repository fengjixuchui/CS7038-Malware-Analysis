{
  "name": "Watchdog",
  "comment": "A reusable watchdog that will execute a callback if the watchdog is not disarmed before\n it expires.",
  "javadoc": "A reusable watchdog that will execute a callback if the watchdog is not disarmed before\n it expires.",
  "static": false,
  "implements": [
    "java.io.Closeable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "defaultWatchdogTimeoutMS",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "watchdogExpiresAt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.concurrent.atomic.AtomicLong",
      "type_short": "AtomicLong",
      "constant_value": null
    },
    {
      "name": "timeoutMethod",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Runnable",
      "type_short": "Runnable",
      "constant_value": null
    },
    {
      "name": "watchdogTimer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.timer.GTimerMonitor",
      "type_short": "GTimerMonitor",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a watchdog (initially disarmed) that will poll for expiration every\n defaultTimeoutMS milliseconds, calling  when triggered.\n ",
      "javadoc": "Creates a watchdog (initially disarmed) that will poll for expiration every\n defaultTimeoutMS milliseconds, calling {@code timeoutMethod} when triggered.\n \u003cp\u003e\n@param defaultTimeoutMS number of milliseconds that the watchdog will wait after\n being armed before calling the timeout method.\n@param timeoutMethod {@link Runnable} functional callback.",
      "static": false,
      "params": [
        {
          "name": "defaultTimeoutMS",
          "type_long": "long",
          "type_short": "long",
          "comment": "number of milliseconds that the watchdog will wait after\n being armed before calling the timeout method."
        },
        {
          "name": "timeoutMethod",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": "Runnable functional callback."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "finalize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "Releases the background timer that this watchdog uses.",
      "javadoc": "Releases the background timer that this watchdog uses.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "watchdogWorker",
      "comment": "Called from a timer, checks to see if the watchdog is armed, and if it has expired.\n \n Disarms itself before calling the timeoutMethod if the timeout period expired.",
      "javadoc": "Called from a timer, checks to see if the watchdog is armed, and if it has expired.\n \u003cp\u003e\n Disarms itself before calling the timeoutMethod if the timeout period expired.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEnabled",
      "comment": "Returns the status of the watchdog.",
      "javadoc": "Returns the status of the watchdog.\n@return true if the watchdog is armed, false if the watchdog is disarmed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the watchdog is armed, false if the watchdog is disarmed"
      },
      "throws": []
    },
    {
      "name": "arm",
      "comment": "Enables this watchdog so that at #defaultWatchdogTimeoutMS milliseconds in the\n future the #timeoutMethod will be called.",
      "javadoc": "Enables this watchdog so that at {@link #defaultWatchdogTimeoutMS} milliseconds in the\n future the {@link #timeoutMethod} will be called.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disarm",
      "comment": "Disables this watchdog.",
      "javadoc": "Disables this watchdog.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
