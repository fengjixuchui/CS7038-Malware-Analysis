{
  "name": "CountLatch",
  "comment": "Latch that has a count that can be incremented and decremented.  Threads that call await() will\n block until the count is 0.",
  "javadoc": "Latch that has a count that can be incremented and decremented.  Threads that call await() will\n block until the count is 0.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "sync",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.CountLatch.Sync",
      "type_short": "Sync",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "increment",
      "comment": "Increments the latch count.",
      "javadoc": "Increments the latch count.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decrement",
      "comment": "Decrements the latch count and releases any waiting threads when the count reaches 0.",
      "javadoc": "Decrements the latch count and releases any waiting threads when the count reaches 0.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "await",
      "comment": "Causes the current thread to wait until the latch count is\n zero, unless the thread is .\n\n If the current count is zero then this method returns immediately.\n\n If the current count is greater than zero then the current\n thread becomes disabled for thread scheduling purposes and lies\n dormant until one of two things happen:\n \n The count reaches zero due to invocations of the\n #decrement method; or\n Some other thread \n the current thread.\n \n\n If the current thread:\n \n has its interrupted status set on entry to this method; or\n is  while waiting,\n \n then InterruptedException is thrown and the current thread\u0027s\n interrupted status is cleared.",
      "javadoc": "Causes the current thread to wait until the latch count is\n zero, unless the thread is {@linkplain Thread#interrupt interrupted}.\n\n \u003cp\u003eIf the current count is zero then this method returns immediately.\n\n \u003cp\u003eIf the current count is greater than zero then the current\n thread becomes disabled for thread scheduling purposes and lies\n dormant until one of two things happen:\n \u003cul\u003e\n \u003cli\u003eThe count reaches zero due to invocations of the\n {@link #decrement} method; or\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n \u003c/ul\u003e\n\n \u003cp\u003eIf the current thread:\n \u003cul\u003e\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while waiting,\n \u003c/ul\u003e\n then {@link InterruptedException} is thrown and the current thread\u0027s\n interrupted status is cleared.\n@throws InterruptedException if the current thread is interrupted\n         while waiting",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.InterruptedException",
          "type_short": "InterruptedException",
          "comment": "if the current thread is interrupted\n         while waiting"
        }
      ]
    },
    {
      "name": "await",
      "comment": "Causes the current thread to wait until the latch count is\n zero, unless the thread is ,\n or the specified waiting time elapses.\n\n If the current count is zero then this method returns immediately\n with the value .\n\n If the current count is greater than zero then the current\n thread becomes disabled for thread scheduling purposes and lies\n dormant until one of three things happen:\n \n The count reaches zero due to invocations of the\n #decrement method; or\n Some other thread \n the current thread; or\n The specified waiting time elapses.\n \n\n If the count reaches zero then the method returns with the\n value .\n\n If the current thread:\n \n has its interrupted status set on entry to this method; or\n is  while waiting,\n \n then InterruptedException is thrown and the current thread\u0027s\n interrupted status is cleared.\n\n If the specified waiting time elapses then the value \n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.",
      "javadoc": "Causes the current thread to wait until the latch count is\n zero, unless the thread is {@linkplain Thread#interrupt interrupted},\n or the specified waiting time elapses.\n\n \u003cp\u003eIf the current count is zero then this method returns immediately\n with the value {@code true}.\n\n \u003cp\u003eIf the current count is greater than zero then the current\n thread becomes disabled for thread scheduling purposes and lies\n dormant until one of three things happen:\n \u003cul\u003e\n \u003cli\u003eThe count reaches zero due to invocations of the\n {@link #decrement} method; or\n \u003cli\u003eSome other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n \u003cli\u003eThe specified waiting time elapses.\n \u003c/ul\u003e\n\n \u003cp\u003eIf the count reaches zero then the method returns with the\n value {@code true}.\n\n \u003cp\u003eIf the current thread:\n \u003cul\u003e\n \u003cli\u003ehas its interrupted status set on entry to this method; or\n \u003cli\u003eis {@linkplain Thread#interrupt interrupted} while waiting,\n \u003c/ul\u003e\n then {@link InterruptedException} is thrown and the current thread\u0027s\n interrupted status is cleared.\n\n \u003cp\u003eIf the specified waiting time elapses then the value {@code false}\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.\n@param timeout the maximum time to wait\n@param unit the time unit of the {@code timeout} argument\n@return {@code true} if the count reached zero and {@code false}\n         if the waiting time elapsed before the count reached zero\n@throws InterruptedException if the current thread is interrupted\n         while waiting",
      "static": false,
      "params": [
        {
          "name": "timeout",
          "type_long": "long",
          "type_short": "long",
          "comment": "the maximum time to wait"
        },
        {
          "name": "unit",
          "type_long": "java.util.concurrent.TimeUnit",
          "type_short": "TimeUnit",
          "comment": "the time unit of the  argument"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": " if the count reached zero and \n         if the waiting time elapsed before the count reached zero"
      },
      "throws": [
        {
          "type_long": "java.lang.InterruptedException",
          "type_short": "InterruptedException",
          "comment": "if the current thread is interrupted\n         while waiting"
        }
      ]
    }
  ]
}
