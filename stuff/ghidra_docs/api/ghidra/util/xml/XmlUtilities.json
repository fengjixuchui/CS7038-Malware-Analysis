{
  "name": "XmlUtilities",
  "comment": "A set of utility methods for working with XML.",
  "javadoc": "A set of utility methods for working with XML.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "LESS_THAN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u0026lt;\""
    },
    {
      "name": "GREATER_THAN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u0026gt;\""
    },
    {
      "name": "APOSTROPHE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u0026apos;\""
    },
    {
      "name": "QUOTE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u0026quot;\""
    },
    {
      "name": "AMPERSAND",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u0026amp;\""
    },
    {
      "name": "HEX_DIGIT_PATTERN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.regex.Pattern",
      "type_short": "Pattern",
      "constant_value": null
    },
    {
      "name": "FEATURE_DISALLOW_DTD",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"http://apache.org/xml/features/disallow-doctype-decl\""
    },
    {
      "name": "FEATURE_EXTERNAL_GENERAL_ENTITIES",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"http://xml.org/sax/features/external-general-entities\""
    },
    {
      "name": "FEATURE_EXTERNAL_PARAMETER_ENTITIES",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"http://xml.org/sax/features/external-parameter-entities\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "escapeElementEntities",
      "comment": "Converts any special or reserved characters in the specified XML string\n into the equivalent Unicode encoding.",
      "javadoc": "Converts any special or reserved characters in the specified XML string\n into the equivalent Unicode encoding.\n@param xml the XML string\n@return the encoded XML string",
      "static": true,
      "params": [
        {
          "name": "xml",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the XML string"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the encoded XML string"
      },
      "throws": []
    },
    {
      "name": "unEscapeElementEntities",
      "comment": "Converts any escaped character entities into their unescaped character\n equivalents. This method is designed to be compatible with the output of\n #escapeElementEntities(String).",
      "javadoc": "Converts any escaped character entities into their unescaped character\n equivalents. This method is designed to be compatible with the output of\n {@link #escapeElementEntities(String)}.\n@param escapedXMLString The string with escaped data\n@return the unescaped string",
      "static": true,
      "params": [
        {
          "name": "escapedXMLString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The string with escaped data"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the unescaped string"
      },
      "throws": []
    },
    {
      "name": "xmlToByteArray",
      "comment": "Converts the specified XML element into a byte array.",
      "javadoc": "Converts the specified XML element into a byte array.\n@param root the root element\n@return the byte array translation of the given element",
      "static": true,
      "params": [
        {
          "name": "root",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "the root element"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the byte array translation of the given element"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Converts the specified XML element into a String.",
      "javadoc": "Converts the specified XML element into a String.\n@param root the root element\n@return String translation of the given element",
      "static": true,
      "params": [
        {
          "name": "root",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "the root element"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String translation of the given element"
      },
      "throws": []
    },
    {
      "name": "fromString",
      "comment": "Convert a String into a JDOM Element.\n ",
      "javadoc": "Convert a String into a JDOM {@link Element}.\n \u003cp\u003e\n@param s\n@return \n@throws JDOMException\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "org.jdom.Element",
        "type_short": "Element",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "org.jdom.JDOMException",
          "type_short": "JDOMException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeDocToFile",
      "comment": "Writes a JDOM XML Document to a File.\n ",
      "javadoc": "Writes a JDOM XML {@link Document} to a {@link File}.\n \u003cp\u003e\n@param doc JDOM XML {@link Document} to write.\n@param dest {@link File} to write to.\n@throws IOException if error when writing file.",
      "static": true,
      "params": [
        {
          "name": "doc",
          "type_long": "org.jdom.Document",
          "type_short": "Document",
          "comment": "JDOM XML Document to write."
        },
        {
          "name": "dest",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "File to write to."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error when writing file."
        }
      ]
    },
    {
      "name": "writePrettyDocToFile",
      "comment": "Writes a JDOM XML Document to a File, with a prettier\n format than #writeDocToFile(Document, File).\n ",
      "javadoc": "Writes a JDOM XML {@link Document} to a {@link File}, with a prettier\n format than {@link #writeDocToFile(Document, File)}.\n \u003cp\u003e\n@param doc JDOM XML {@link Document} to write.\n@param dest {@link File} to write to.\n@throws IOException if error when writing file.",
      "static": true,
      "params": [
        {
          "name": "doc",
          "type_long": "org.jdom.Document",
          "type_short": "Document",
          "comment": "JDOM XML Document to write."
        },
        {
          "name": "dest",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "File to write to."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error when writing file."
        }
      ]
    },
    {
      "name": "readDocFromFile",
      "comment": "Read a File and convert to jdom xml doc.\n ",
      "javadoc": "Read a File and convert to jdom xml doc.\n \u003cp\u003e\n@param f {@link File} to read\n@return JDOM {@link Document}\n@throws JDOMException if text in file isn\u0027t valid XML\n@throws IOException if IO error when reading file.",
      "static": true,
      "params": [
        {
          "name": "f",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "File to read"
        }
      ],
      "return": {
        "type_long": "org.jdom.Document",
        "type_short": "Document",
        "comment": "JDOM Document"
      },
      "throws": [
        {
          "type_long": "org.jdom.JDOMException",
          "type_short": "JDOMException",
          "comment": "if text in file isn\u0027t valid XML"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error when reading file."
        }
      ]
    },
    {
      "name": "readDocFromFile",
      "comment": "Read a File and convert to jdom xml doc.\n ",
      "javadoc": "Read a File and convert to jdom xml doc.\n \u003cp\u003e\n@param f {@link ResourceFile} to read\n@return JDOM {@link Document}\n@throws JDOMException if text in file isn\u0027t valid XML\n@throws IOException if IO error when reading file.",
      "static": true,
      "params": [
        {
          "name": "f",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "ResourceFile to read"
        }
      ],
      "return": {
        "type_long": "org.jdom.Document",
        "type_short": "Document",
        "comment": "JDOM Document"
      },
      "throws": [
        {
          "type_long": "org.jdom.JDOMException",
          "type_short": "JDOMException",
          "comment": "if text in file isn\u0027t valid XML"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error when reading file."
        }
      ]
    },
    {
      "name": "byteArrayToXml",
      "comment": "Converts the specified byte array into an XML element.",
      "javadoc": "Converts the specified byte array into an XML element.\n@param bytes the XML bytes\n@return an XML element",
      "static": true,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the XML bytes"
        }
      ],
      "return": {
        "type_long": "org.jdom.Element",
        "type_short": "Element",
        "comment": "an XML element"
      },
      "throws": []
    },
    {
      "name": "parseOverlayName",
      "comment": "Parses the overlay name from the specified address string. Returns null\n if the address string does appear to represent an overlay.",
      "javadoc": "Parses the overlay name from the specified address string. Returns null\n if the address string does appear to represent an overlay.\n@param addrStr the address string\n@return the overlay name or null",
      "static": true,
      "params": [
        {
          "name": "addrStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the address string"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the overlay name or null"
      },
      "throws": []
    },
    {
      "name": "parseInt",
      "comment": "Parse the given string as either a hex number (if it starts with 0x) or a\n decimal number.",
      "javadoc": "Parse the given string as either a hex number (if it starts with 0x) or a\n decimal number.\n@param intStr the string to parse into an integer\n@return the parsed integer.\n@throws NumberFormatException if the given string does not represent a\n             valid integer.",
      "static": true,
      "params": [
        {
          "name": "intStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to parse into an integer"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the parsed integer."
      },
      "throws": []
    },
    {
      "name": "parseInt",
      "comment": "Parses the optional specified string as a decimal number, returning its\n integer value.\n ",
      "javadoc": "Parses the optional specified string as a decimal number, returning its\n integer value.\n \u003cp\u003e\n@param intStr string with integer digits, or empty or null\n@param defaultValue value to return if intStr is missing\n@return integer value of the intStr\n@throws NumberFormatException if intStr could not be parsed or the string\n             specifies a value outside the range of a signed 32 bit\n             integer.",
      "static": true,
      "params": [
        {
          "name": "intStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string with integer digits, or empty or null"
        },
        {
          "name": "defaultValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "value to return if intStr is missing"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "integer value of the intStr"
      },
      "throws": [
        {
          "type_long": "java.lang.NumberFormatException",
          "type_short": "NumberFormatException",
          "comment": "if intStr could not be parsed or the string\n             specifies a value outside the range of a signed 32 bit\n             integer."
        }
      ]
    },
    {
      "name": "parseOptionalBoundedInt",
      "comment": "Parses the optional specified string as a decimal number, returning its\n integer value, or defaultValue if the string is null.\n ",
      "javadoc": "Parses the optional specified string as a decimal number, returning its\n integer value, or defaultValue if the string is null.\n \u003cp\u003e\n@param intStr string with integer digits, or null.\n@param defaultValue value to return if intStr is null.\n@param minValue minimum value allowed (inclusive).\n@param maxValue maximum value allowed (inclusive).\n@return integer value of the intStr.\n@throws NumberFormatException if intStr could not be parsed or is out of\n             range.",
      "static": true,
      "params": [
        {
          "name": "intStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string with integer digits, or null."
        },
        {
          "name": "defaultValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "value to return if intStr is null."
        },
        {
          "name": "minValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "minimum value allowed (inclusive)."
        },
        {
          "name": "maxValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "maximum value allowed (inclusive)."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "integer value of the intStr."
      },
      "throws": [
        {
          "type_long": "java.lang.NumberFormatException",
          "type_short": "NumberFormatException",
          "comment": "if intStr could not be parsed or is out of\n             range."
        }
      ]
    },
    {
      "name": "parseBoundedInt",
      "comment": "Parses the specified string as a decimal number, returning its integer\n value.\n ",
      "javadoc": "Parses the specified string as a decimal number, returning its integer\n value.\n \u003cp\u003e\n@param intStr String with integer digits\n@param minValue minimum value allowed (inclusive)\n@param maxValue maximum value allowed (inclusive)\n@return integer value of the intStr\n@throws NumberFormatException if intStr is null or empty or could not be\n             parsed or is out of range.",
      "static": true,
      "params": [
        {
          "name": "intStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String with integer digits"
        },
        {
          "name": "minValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "minimum value allowed (inclusive)"
        },
        {
          "name": "maxValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "maximum value allowed (inclusive)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "integer value of the intStr"
      },
      "throws": [
        {
          "type_long": "java.lang.NumberFormatException",
          "type_short": "NumberFormatException",
          "comment": "if intStr is null or empty or could not be\n             parsed or is out of range."
        }
      ]
    },
    {
      "name": "parseBoundedIntAttr",
      "comment": "Parses the required attribute as a decimal number, returning its integer\n value.\n ",
      "javadoc": "Parses the required attribute as a decimal number, returning its integer\n value.\n \u003cp\u003e\n@param ele JDom element that contains the attribute\n@param attrName the name of the xml attribute to parse\n@param minValue minimum value allowed (inclusive)\n@param maxValue maximum value allowed (inclusive)\n@return integer value of the attribute\n@throws NumberFormatException if intStr could not be parsed or is out of\n             range.",
      "static": true,
      "params": [
        {
          "name": "ele",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "JDom element that contains the attribute"
        },
        {
          "name": "attrName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the xml attribute to parse"
        },
        {
          "name": "minValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "minimum value allowed (inclusive)"
        },
        {
          "name": "maxValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "maximum value allowed (inclusive)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "integer value of the attribute"
      },
      "throws": [
        {
          "type_long": "java.lang.NumberFormatException",
          "type_short": "NumberFormatException",
          "comment": "if intStr could not be parsed or is out of\n             range."
        }
      ]
    },
    {
      "name": "parseOptionalBoundedIntAttr",
      "comment": "Parses an optional attribute as a decimal number, returning its integer\n value, or the defaultValue if the attribute is null.\n ",
      "javadoc": "Parses an optional attribute as a decimal number, returning its integer\n value, or the defaultValue if the attribute is null.\n \u003cp\u003e\n@param ele JDOM element that contains the attribute.\n@param attrName the name of the xml attribute to parse.\n@param defaultValue the default value to return if attribute is missing.\n@param minValue minimum value allowed (inclusive).\n@param maxValue maximum value allowed (inclusive).\n@return integer value of the attribute.\n@throws NumberFormatException if the attribute value could not be parsed\n             or is out of range.",
      "static": true,
      "params": [
        {
          "name": "ele",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "JDOM element that contains the attribute."
        },
        {
          "name": "attrName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the xml attribute to parse."
        },
        {
          "name": "defaultValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "the default value to return if attribute is missing."
        },
        {
          "name": "minValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "minimum value allowed (inclusive)."
        },
        {
          "name": "maxValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "maximum value allowed (inclusive)."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "integer value of the attribute."
      },
      "throws": [
        {
          "type_long": "java.lang.NumberFormatException",
          "type_short": "NumberFormatException",
          "comment": "if the attribute value could not be parsed\n             or is out of range."
        }
      ]
    },
    {
      "name": "parseLong",
      "comment": "Parse the given string as either a hex number (if it starts with 0x) or a\n decimal number.",
      "javadoc": "Parse the given string as either a hex number (if it starts with 0x) or a\n decimal number.\n@param longStr the string to parse into an long\n@return the parsed long.\n@throws NumberFormatException if the given string does not represent a\n             valid long.",
      "static": true,
      "params": [
        {
          "name": "longStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to parse into an long"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the parsed long."
      },
      "throws": []
    },
    {
      "name": "parseBoundedLong",
      "comment": "Parses the specified string as a decimal number, returning its long\n integer value.\n \n Note, using Long#MIN_VALUE and/or Long#MAX_VALUE as lower\n and upper bounds is problematic and should be avoided as the range check\n will become a NO-OP and always succeed.\n ",
      "javadoc": "Parses the specified string as a decimal number, returning its long\n integer value.\n \u003cp\u003e\n Note, using {@link Long#MIN_VALUE} and/or {@link Long#MAX_VALUE} as lower\n and upper bounds is problematic and should be avoided as the range check\n will become a NO-OP and always succeed.\n \u003cp\u003e\n@param longStr String with integer digits\n@param minValue minimum value allowed (inclusive)\n@param maxValue maximum value allowed (inclusive)\n@return long integer value of the longStr\n@throws NumberFormatException if intStr is null or empty or could not be\n             parsed or is out of range.",
      "static": true,
      "params": [
        {
          "name": "longStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String with integer digits"
        },
        {
          "name": "minValue",
          "type_long": "long",
          "type_short": "long",
          "comment": "minimum value allowed (inclusive)"
        },
        {
          "name": "maxValue",
          "type_long": "long",
          "type_short": "long",
          "comment": "maximum value allowed (inclusive)"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "long integer value of the longStr"
      },
      "throws": [
        {
          "type_long": "java.lang.NumberFormatException",
          "type_short": "NumberFormatException",
          "comment": "if intStr is null or empty or could not be\n             parsed or is out of range."
        }
      ]
    },
    {
      "name": "parseBoundedLongAttr",
      "comment": "Parses the required attribute as a decimal number, returning its long\n integer value.\n \n Note, using Long#MIN_VALUE and/or Long#MAX_VALUE as lower\n and upper bounds is problematic and should be avoided as the range check\n will become a NO-OP and always succeed.\n ",
      "javadoc": "Parses the required attribute as a decimal number, returning its long\n integer value.\n \u003cp\u003e\n Note, using {@link Long#MIN_VALUE} and/or {@link Long#MAX_VALUE} as lower\n and upper bounds is problematic and should be avoided as the range check\n will become a NO-OP and always succeed.\n \u003cp\u003e\n@param ele JDom element that contains the attribute\n@param attrName the name of the xml attribute to parse\n@param minValue minimum value allowed (inclusive)\n@param maxValue maximum value allowed (inclusive)\n@return long integer value of the attribute\n@throws NumberFormatException if intStr could not be parsed or is out of\n             range.",
      "static": true,
      "params": [
        {
          "name": "ele",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "JDom element that contains the attribute"
        },
        {
          "name": "attrName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the xml attribute to parse"
        },
        {
          "name": "minValue",
          "type_long": "long",
          "type_short": "long",
          "comment": "minimum value allowed (inclusive)"
        },
        {
          "name": "maxValue",
          "type_long": "long",
          "type_short": "long",
          "comment": "maximum value allowed (inclusive)"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "long integer value of the attribute"
      },
      "throws": [
        {
          "type_long": "java.lang.NumberFormatException",
          "type_short": "NumberFormatException",
          "comment": "if intStr could not be parsed or is out of\n             range."
        }
      ]
    },
    {
      "name": "parseOptionalBoundedLongAttr",
      "comment": "Parses the required attribute as a decimal number, returning its long\n integer value.\n \n Note, using Long#MIN_VALUE and/or Long#MAX_VALUE as lower\n and upper bounds is problematic and should be avoided as the range check\n will become a NO-OP and always succeed.\n ",
      "javadoc": "Parses the required attribute as a decimal number, returning its long\n integer value.\n \u003cp\u003e\n Note, using {@link Long#MIN_VALUE} and/or {@link Long#MAX_VALUE} as lower\n and upper bounds is problematic and should be avoided as the range check\n will become a NO-OP and always succeed.\n \u003cp\u003e\n@param ele JDom element that contains the attribute.\n@param attrName the name of the xml attribute to parse.\n@param defaultValue the default value to return if attribute is missing.\n@param minValue minimum value allowed (inclusive).\n@param maxValue maximum value allowed (inclusive).\n@return long integer value of the attribute.\n@throws NumberFormatException if intStr could not be parsed or is out of\n             range.",
      "static": true,
      "params": [
        {
          "name": "ele",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "JDom element that contains the attribute."
        },
        {
          "name": "attrName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the xml attribute to parse."
        },
        {
          "name": "defaultValue",
          "type_long": "long",
          "type_short": "long",
          "comment": "the default value to return if attribute is missing."
        },
        {
          "name": "minValue",
          "type_long": "long",
          "type_short": "long",
          "comment": "minimum value allowed (inclusive)."
        },
        {
          "name": "maxValue",
          "type_long": "long",
          "type_short": "long",
          "comment": "maximum value allowed (inclusive)."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "long integer value of the attribute."
      },
      "throws": [
        {
          "type_long": "java.lang.NumberFormatException",
          "type_short": "NumberFormatException",
          "comment": "if intStr could not be parsed or is out of\n             range."
        }
      ]
    },
    {
      "name": "parseBoolean",
      "comment": "Parses the given string into a boolean value. Acceptable inputs are\n y,n,true,fase. A null input string will return false (useful if optional\n boolean attribute is false by default)",
      "javadoc": "Parses the given string into a boolean value. Acceptable inputs are\n y,n,true,fase. A null input string will return false (useful if optional\n boolean attribute is false by default)\n@param boolStr the string to parse into a boolean value\n@return the boolean result.\n@throws XmlAttributeException if the string in not one of y,n,true,false\n             or null.",
      "static": true,
      "params": [
        {
          "name": "boolStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to parse into a boolean value"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "the boolean result."
      },
      "throws": []
    },
    {
      "name": "parseOptionalBooleanAttr",
      "comment": "Parses the optional attribute as a boolean value, returning its value or\n the specified defaultValue if missing.",
      "javadoc": "Parses the optional attribute as a boolean value, returning its value or\n the specified defaultValue if missing.\n@param ele JDom element that contains the attribute\n@param attrName the name of the xml attribute to parse\n@param defaultValue boolean value to return if the attribute is not\n            defined\n@return boolean equiv of the attribute string value (\"y\", \"true\"/\"n\",\n         \"false\")\n@throws IOException if attribute value is not valid boolean string",
      "static": true,
      "params": [
        {
          "name": "ele",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "JDom element that contains the attribute"
        },
        {
          "name": "attrName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the xml attribute to parse"
        },
        {
          "name": "defaultValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean value to return if the attribute is not\n            defined"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean equiv of the attribute string value (\"y\", \"true\"/\"n\",\n         \"false\")"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if attribute value is not valid boolean string"
        }
      ]
    },
    {
      "name": "requireStringAttr",
      "comment": "Throws an IOException with a verbose explanation if the requested\n attribute is not present or is empty.\n ",
      "javadoc": "Throws an {@link IOException} with a verbose explanation if the requested\n attribute is not present or is empty.\n \u003cp\u003e\n@param ele JDOM {@link Element} that contains the attribute\n@param attrName the attribute name\n@return String value of the attribute (never null or empty)\n@throws IOException if attribute is missing or empty",
      "static": true,
      "params": [
        {
          "name": "ele",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "JDOM Element that contains the attribute"
        },
        {
          "name": "attrName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the attribute name"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String value of the attribute (never null or empty)"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if attribute is missing or empty"
        }
      ]
    },
    {
      "name": "setStringAttr",
      "comment": "Sets a string attribute on the specified element.",
      "javadoc": "Sets a string attribute on the specified element.\n@param ele JDom element\n@param attrName name of attribute\n@param attrValue value of attribute, null ok",
      "static": true,
      "params": [
        {
          "name": "ele",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "JDom element"
        },
        {
          "name": "attrName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of attribute"
        },
        {
          "name": "attrValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "value of attribute, null ok"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setIntAttr",
      "comment": "Sets an integer attribute on the specified element.",
      "javadoc": "Sets an integer attribute on the specified element.\n@param ele JDom element\n@param attrName name of attribute\n@param attrValue value of attribute",
      "static": true,
      "params": [
        {
          "name": "ele",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "JDom element"
        },
        {
          "name": "attrName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of attribute"
        },
        {
          "name": "attrValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "value of attribute"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getChildren",
      "comment": "Type-safe way of getting a list of Elements from JDom.",
      "javadoc": "Type-safe way of getting a list of {@link Element}s from JDom.\n@param ele the parent element\n@param childName the name of the children elements to return\n@return {@literal List\u003cElement\u003e} of elements",
      "static": true,
      "params": [
        {
          "name": "ele",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "the parent element"
        },
        {
          "name": "childName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the children elements to return"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003corg.jdom.Element\u003e",
        "type_short": "List",
        "comment": " of elements"
      },
      "throws": []
    },
    {
      "name": "hasInvalidXMLCharacters",
      "comment": "Tests a string for characters that would cause a problem if added to an\n xml attribute or element.",
      "javadoc": "Tests a string for characters that would cause a problem if added to an\n xml attribute or element.\n@param s a string\n@return boolean true if the string will cause a problem if added to an\n         xml attribute or element.",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a string"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the string will cause a problem if added to an\n         xml attribute or element."
      },
      "throws": []
    },
    {
      "name": "createSecureSAXBuilder",
      "comment": "Create a SAXBuilder that is not susceptible to XXE.\n \n This configures the builder to ignore external entities.",
      "javadoc": "Create a {@link SAXBuilder} that is not susceptible to XXE.\n \n This configures the builder to ignore external entities.\n@param validate indicates whether validation should occur\n@param needsDTD false to disable doctype declarations altogether\n@return the configured builder",
      "static": true,
      "params": [
        {
          "name": "validate",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "indicates whether validation should occur"
        },
        {
          "name": "needsDTD",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "false to disable doctype declarations altogether"
        }
      ],
      "return": {
        "type_long": "org.jdom.input.SAXBuilder",
        "type_short": "SAXBuilder",
        "comment": "the configured builder"
      },
      "throws": []
    },
    {
      "name": "createSecureSAXParserFactory",
      "comment": "Create a SAXParserFactory that is not susceptible to XXE.\n \n This configures the factory to ignore external entities.",
      "javadoc": "Create a {@link SAXParserFactory} that is not susceptible to XXE.\n \n This configures the factory to ignore external entities.\n@param needsDTD false to disable doctype declarations altogether\n@return the configured factory",
      "static": true,
      "params": [
        {
          "name": "needsDTD",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "false to disable doctype declarations altogether"
        }
      ],
      "return": {
        "type_long": "javax.xml.parsers.SAXParserFactory",
        "type_short": "SAXParserFactory",
        "comment": "the configured factory"
      },
      "throws": []
    }
  ]
}
