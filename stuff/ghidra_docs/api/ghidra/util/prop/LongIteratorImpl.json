{
  "name": "LongIteratorImpl",
  "comment": "Class to iterate over indexes of a PropertyMap.",
  "javadoc": "Class to iterate over indexes of a PropertyMap.",
  "static": false,
  "implements": [
    "ghidra.util.LongIterator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "pm",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.prop.PropertySet",
      "type_short": "PropertySet",
      "constant_value": null
    },
    {
      "name": "start",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "end",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "current",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "hasBoundaries",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "doesHaveNext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "doesHavePrevious",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pm",
          "type_long": "ghidra.util.prop.PropertySet",
          "type_short": "PropertySet",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for creating a LongIterator that iterates\n over the entire range of properties.",
      "javadoc": "Constructor for creating a LongIterator that iterates\n over the entire range of properties.\n@param pm the property map to be iterated\n@param start the initial property map index position of the iterator\n@param before If before is true, start will be the first index returned\n from a call to next(); If before is false, start will be the first index returned\n from a call to previous().",
      "static": false,
      "params": [
        {
          "name": "pm",
          "type_long": "ghidra.util.prop.PropertySet",
          "type_short": "PropertySet",
          "comment": "the property map to be iterated"
        },
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": "the initial property map index position of the iterator"
        },
        {
          "name": "before",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "If before is true, start will be the first index returned\n from a call to next(); If before is false, start will be the first index returned\n from a call to previous()."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for creating a LongIterator that iterates\n over a range of property indexes. This iterator will only\n return property indexes within the given range (inclusive).",
      "javadoc": "Constructor for creating a LongIterator that iterates\n over a range of property indexes. This iterator will only\n return property indexes within the given range (inclusive).\n@param pm the property map to be iterated\n@param start the initial property map index position of the iterator\n@param end the last property map index position of the iterator",
      "static": false,
      "params": [
        {
          "name": "pm",
          "type_long": "ghidra.util.prop.PropertySet",
          "type_short": "PropertySet",
          "comment": "the property map to be iterated"
        },
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": "the initial property map index position of the iterator"
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": "the last property map index position of the iterator"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for creating a LongIterator that iterates\n over a range of property indexes. This iterator will only\n return property indexes within the given range (inclusive).",
      "javadoc": "Constructor for creating a LongIterator that iterates\n over a range of property indexes. This iterator will only\n return property indexes within the given range (inclusive).\n@param pm the property map to be iterated\n@param start the initial property map index position of the iterator\n@param end the last property map index position of the iterator\n@param atStart If true, the iterator goes from start to end. \n Otherwise, from end to start.",
      "static": false,
      "params": [
        {
          "name": "pm",
          "type_long": "ghidra.util.prop.PropertySet",
          "type_short": "PropertySet",
          "comment": "the property map to be iterated"
        },
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": "the initial property map index position of the iterator"
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": "the last property map index position of the iterator"
        },
        {
          "name": "atStart",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "If true, the iterator goes from start to end. \n Otherwise, from end to start."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasNext",
      "comment": "Returns true if the iterator has more indexes.",
      "javadoc": "Returns true if the iterator has more indexes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "next",
      "comment": "Returns the next index in the iterator.",
      "javadoc": "Returns the next index in the iterator.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasPrevious",
      "comment": "Return true if the iterator has a previous index.",
      "javadoc": "Return true if the iterator has a previous index.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "previous",
      "comment": "Returns the previous index in the iterator.",
      "javadoc": "Returns the previous index in the iterator.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findNext",
      "comment": "Return whether there is a next index; if there is,\n \"currentNext\" has the value.",
      "javadoc": "Return whether there is a next index; if there is,\n \"currentNext\" has the value.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findPrevious",
      "comment": "Return whether there is a previous index; if there is,\n \"currentPrevious\" has the value.",
      "javadoc": "Return whether there is a previous index; if there is,\n \"currentPrevious\" has the value.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "init",
      "comment": "checks to see if the start index has a property so that the first\n call to next() will return that index.",
      "javadoc": "checks to see if the start index has a property so that the first\n call to next() will return that index.",
      "static": false,
      "params": [
        {
          "name": "atStart",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
