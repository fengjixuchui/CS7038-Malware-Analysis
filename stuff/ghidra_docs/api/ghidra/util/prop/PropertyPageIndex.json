{
  "name": "PropertyPageIndex",
  "comment": "PropertyPageIndex is used to find the property pages before and\n   after a given property page.",
  "javadoc": "PropertyPageIndex is used to find the property pages before and\n   after a given property page.",
  "static": false,
  "implements": [
    "java.io.Serializable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "rbtree",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.RedBlackLongKeySet",
      "type_short": "RedBlackLongKeySet",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNext",
      "comment": "Get the ID of the page after pageID.",
      "javadoc": "Get the ID of the page after pageID.",
      "static": false,
      "params": [
        {
          "name": "pageID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumPages",
      "comment": "Get the number of pages in the table.",
      "javadoc": "Get the number of pages in the table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrevious",
      "comment": "Get the ID of the page before pageID.",
      "javadoc": "Get the ID of the page before pageID.",
      "static": false,
      "params": [
        {
          "name": "pageID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasPage",
      "comment": "Return whether the pageID exists in the table.",
      "javadoc": "Return whether the pageID exists in the table.",
      "static": false,
      "params": [
        {
          "name": "pageID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Add the given pageID to the table.",
      "javadoc": "Add the given pageID to the table.",
      "static": false,
      "params": [
        {
          "name": "pageID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Remove pageID from the table.",
      "javadoc": "Remove pageID from the table.\n@return true if the pageID was removed",
      "static": false,
      "params": [
        {
          "name": "pageID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the pageID was removed"
      },
      "throws": []
    }
  ]
}
