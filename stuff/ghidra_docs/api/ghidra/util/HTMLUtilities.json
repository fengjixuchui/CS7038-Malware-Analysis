{
  "name": "HTMLUtilities",
  "comment": "A helper class providing static methods for formatting text with common HTML tags.\n\n Many clients use this class to render content as HTML.  Below are a few use cases along\n with the method that should be used for each.\n \n \t\t\n \t\t\tUse CaseFunctionDescription\n \t\t\n \t\t\n \t\t\t\n \t\t\t\tA client wishes to display a simple text message (that itself contains no HTML\n \t\t\t\tmarkup) as HTML.  The message may contain newline characters.\n \t\t\t\n \t\t\t\n \t\t\t\t#toHTML(String)\n \t\t\t\n \t\t\t\n \t\t\t\tThe given text has all newline characters (\\n) replaced with BR tags so\n \t\t\t\tthat the HTML display of the text will visually display multiple lines.  Also,\n \t\t\t\tthe final text is prepended with HTML so that the Java HTML rendering\n \t\t\t\tengine will render the result as HTML.\n \t\t\t\n \t\t\n  \t\t\n \t\t\t\n \t\t\t\tA client wishes to display a simple text message (that itself may or may not\n \t\t\t\tcontain HTML markup) as HTML.  Further, the client wishes to not only split\n \t\t\t\tlines at newline characters, but also wishes to ensure that no line is longer\n \t\t\t\tthan a specified limit.\n \t\t\t\n \t\t\t\n \t\t\t\t#toWrappedHTML(String) or #toWrappedHTML(String, int)\n \t\t\t\n \t\t\t\n \t\t\t\tThis text works the same as #toHTML(String) with the addition of\n \t\t\t\tline-wrapping text that passes the given cutoff.\n \t\t\t\n \t\t\n  \t\t\n \t\t\t\n \t\t\t\tA client wishes to display a text message with dynamic content, unknown at the\n \t\t\t\ttime of programming.\n \t\t\t\n \t\t\t\n \t\t\t\t#toLiteralHTML(String, int)\n \t\t\t\n \t\t\t\n \t\t\t\tThis method works the same as #toWrappedHTML(String), with the addition\n \t\t\t\tof \u0027friendly encoding\u0027, or escaping, any embedded HTML content.  The effect of\n \t\t\t\tthis is that any existing HTML markup is not rendered as HTML, but is displayed\n \t\t\t\tas plain text.\n \t\t\t\n \t\t\n  \t\t\n \t\t\t\n \t\t\t\tA client wishes to display, as a tooltip, a text message with\n \t\t\t\tdynamic content, unknown at the time of programming.  Tooltips are unique from\n \t\t\t\tgeneral HTML in that we want them to share a common line wrapping length.\n \t\t\t\n \t\t\t\n \t\t\t\t#toLiteralHTMLForTooltip(String)\n \t\t\t\n \t\t\t\n \t\t\t\tThis method works the same as #toLiteralHTML(String, int), with the\n \t\t\t\taddition of capping the max text length, as well as setting the line-wrap length\n \t\t\t\tto #DEFAULT_MAX_LINE_LENGTH.\n \t\t\t\n \t\t\n  \t\t\n \t\t\t\n \t\t\t\tA client wishes to convert newlines in text into HTML line breaks, without adding\n \t\t\t\tHTML tags around the text, which allows them to embed this text into a\n \t\t\t\tlarger HTML document.\n \t\t\t\n \t\t\t\n \t\t\t\t#lineWrapWithHTMLLineBreaks(String) or\n \t\t\t\t#lineWrapWithHTMLLineBreaks(String, int)\n \t\t\t\n \t\t\t\n \t\t\t\tThis first method will simply convert all newline characters to\n \t\t\t\tBR tags.  The second method adds the ability to trigger line-wrapping\n \t\t\t\tat the given length as well.\n \t\t\t\n \t\t\n ",
  "javadoc": "A helper class providing static methods for formatting text with common HTML tags.\n\n \u003cP\u003eMany clients use this class to render content as HTML.  Below are a few use cases along\n with the method that should be used for each.\n \u003cTABLE BORDER\u003d\"1\"\u003e\u003ccaption\u003e\u003c/caption\u003e\n \t\t\u003cTR\u003e\n \t\t\t\u003cTH\u003eUse Case\u003c/TH\u003e\u003cTH\u003eFunction\u003c/TH\u003e\u003cTH\u003eDescription\u003c/TH\u003e\n \t\t\u003c/TR\u003e\n \t\t\u003cTR\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\tA client wishes to display a simple text message (that itself contains no HTML\n \t\t\t\tmarkup) as HTML.  The message may contain newline characters.\n \t\t\t\u003c/TD\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\t{@link #toHTML(String)}\n \t\t\t\u003c/TD\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\tThe given text has all newline characters (\\n) replaced with \u0026lt;BR\u0026gt; tags so\n \t\t\t\tthat the HTML display of the text will visually display multiple lines.  Also,\n \t\t\t\tthe final text is prepended with \u0026lt;HTML\u0026gt; so that the Java HTML rendering\n \t\t\t\tengine will render the result as HTML.\n \t\t\t\u003c/TD\u003e\n \t\t\u003c/TR\u003e\n  \t\t\u003cTR\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\tA client wishes to display a simple text message (that itself may or may not\n \t\t\t\tcontain HTML markup) as HTML.  Further, the client wishes to not only split\n \t\t\t\tlines at newline characters, but also wishes to ensure that no line is longer\n \t\t\t\tthan a specified limit.\n \t\t\t\u003c/TD\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\t{@link #toWrappedHTML(String)} or {@link #toWrappedHTML(String, int)}\n \t\t\t\u003c/TD\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\tThis text works the same as {@link #toHTML(String)} with the addition of\n \t\t\t\tline-wrapping text that passes the given cutoff.\n \t\t\t\u003c/TD\u003e\n \t\t\u003c/TR\u003e\n  \t\t\u003cTR\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\tA client wishes to display a text message with dynamic content, unknown at the\n \t\t\t\ttime of programming.\n \t\t\t\u003c/TD\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\t{@link #toLiteralHTML(String, int)}\n \t\t\t\u003c/TD\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\tThis method works the same as {@link #toWrappedHTML(String)}, with the addition\n \t\t\t\tof \u0027friendly encoding\u0027, or escaping, any embedded HTML content.  The effect of\n \t\t\t\tthis is that any existing HTML markup is not rendered as HTML, but is displayed\n \t\t\t\tas plain text.\n \t\t\t\u003c/TD\u003e\n \t\t\u003c/TR\u003e\n  \t\t\u003cTR\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\tA client wishes to display, as a tooltip, a text message with\n \t\t\t\tdynamic content, unknown at the time of programming.  Tooltips are unique from\n \t\t\t\tgeneral HTML in that we want them to share a common line wrapping length.\n \t\t\t\u003c/TD\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\t{@link #toLiteralHTMLForTooltip(String)}\n \t\t\t\u003c/TD\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\tThis method works the same as {@link #toLiteralHTML(String, int)}, with the\n \t\t\t\taddition of capping the max text length, as well as setting the line-wrap length\n \t\t\t\tto {@link #DEFAULT_MAX_LINE_LENGTH}.\n \t\t\t\u003c/TD\u003e\n \t\t\u003c/TR\u003e\n  \t\t\u003cTR\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\tA client wishes to convert newlines in text into HTML line breaks, without adding\n \t\t\t\tHTML tags around the text, which allows them to embed this text into a\n \t\t\t\tlarger HTML document.\n \t\t\t\u003c/TD\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\t{@link #lineWrapWithHTMLLineBreaks(String)} or\n \t\t\t\t{@link #lineWrapWithHTMLLineBreaks(String, int)}\n \t\t\t\u003c/TD\u003e\n \t\t\t\u003cTD\u003e\n \t\t\t\tThis first method will simply convert all newline characters to\n \t\t\t\t\u0026lt;BR\u0026gt; tags.  The second method adds the ability to trigger line-wrapping\n \t\t\t\tat the given length as well.\n \t\t\t\u003c/TD\u003e\n \t\t\u003c/TR\u003e\n \u003c/TABLE\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DEFAULT_MAX_LINE_LENGTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "75"
    },
    {
      "name": "DEFAULT_TOOLTIP_MAX_LINE_LENGTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "100"
    },
    {
      "name": "MAX_TOOLTIP_LENGTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2000"
    },
    {
      "name": "TAB_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "HTML",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cHTML\u003e\""
    },
    {
      "name": "HTML_CLOSE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003c/HTML\u003e\""
    },
    {
      "name": "BR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cBR\u003e\""
    },
    {
      "name": "PRE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cPRE\u003e\""
    },
    {
      "name": "PRE_CLOSE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003c/PRE\u003e\""
    },
    {
      "name": "LINK_PLACEHOLDER_CONTENT",
      "comment": "A tag to mark code that could be made into a hyperlink.   This allows you to mark\n text for future linking, without rendering it as a hyperlink.",
      "javadoc": "A tag to mark code that could be made into a hyperlink.   This allows you to mark\n text for future linking, without rendering it as a hyperlink.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"__CONTENT__\""
    },
    {
      "name": "LINK_PLACEHOLDER_OPEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003c!-- LINK __CONTENT__ --\u003e\""
    },
    {
      "name": "LINK_PLACEHOLDER_CLOSE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003c!-- /LINK --\u003e\""
    },
    {
      "name": "HTML_SPACE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "HTML_NEW_LINE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "MAROON",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"#990000\""
    },
    {
      "name": "GREEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"#009900\""
    },
    {
      "name": "BLUE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"#000099\""
    },
    {
      "name": "PURPLE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"#990099\""
    },
    {
      "name": "DARK_CYAN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"#009999\""
    },
    {
      "name": "OLIVE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"#999900\""
    },
    {
      "name": "ORANGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"#FF9900\""
    },
    {
      "name": "PINK",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"#FF9999\""
    },
    {
      "name": "YELLOW",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"#FFFF00\""
    },
    {
      "name": "GRAY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"#888888\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "wrapAsHTML",
      "comment": "Marks the given text as HTML in order to be rendered thusly by Java widgets.",
      "javadoc": "Marks the given text as HTML in order to be rendered thusly by Java widgets.\n@param text the original text\n@return the text marked as HTML",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the original text"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the text marked as HTML"
      },
      "throws": []
    },
    {
      "name": "fixupHTMLRenderingIssues",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "colorString",
      "comment": "Surrounds the indicated text with HTML font coloring tags so that the\n text will display in color within HTML.  The given color will be converted to its\n hex value.",
      "javadoc": "Surrounds the indicated text with HTML font coloring tags so that the\n text will display in color within HTML.  The given color will be converted to its\n hex value.\n@param color The Java color object to use\n@param text the original text\n@return the string for HTML colored text",
      "static": true,
      "params": [
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "The Java color object to use"
        },
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the original text"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string for HTML colored text"
      },
      "throws": []
    },
    {
      "name": "colorString",
      "comment": "Surrounds the indicated text with HTML font coloring tags so that the\n text will display in color within HTML.",
      "javadoc": "Surrounds the indicated text with HTML font coloring tags so that the\n text will display in color within HTML.\n@param rgbColor (eg. \"#8c0000\") a string indicating the RGB hexadecimal color\n@param text the original text\n@return the string for HTML colored text",
      "static": true,
      "params": [
        {
          "name": "rgbColor",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "(eg. \"#8c0000\") a string indicating the RGB hexadecimal color"
        },
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the original text"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string for HTML colored text"
      },
      "throws": []
    },
    {
      "name": "colorString",
      "comment": "Surrounds the indicated numeric value with HTML font coloring tags so that the\n numeric value will display in color within HTML.",
      "javadoc": "Surrounds the indicated numeric value with HTML font coloring tags so that the\n numeric value will display in color within HTML.\n@param rgbColor (eg. \"#8c0000\") a string indicating the RGB hexadecimal color\n@param value the numeric value to be converted to text and wrapped with color tags.\n@return the string for the HTML colored number",
      "static": true,
      "params": [
        {
          "name": "rgbColor",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "(eg. \"#8c0000\") a string indicating the RGB hexadecimal color"
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the numeric value to be converted to text and wrapped with color tags."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string for the HTML colored number"
      },
      "throws": []
    },
    {
      "name": "spaces",
      "comment": "Creates a string with the indicated number of HTML space characters (nbsp;).",
      "javadoc": "Creates a string with the indicated number of HTML space characters (\u003ccode\u003e\u0026#x26;nbsp;\u003c/code\u003e).\n@param num the number of HTML spaces\n@return the string o HTML spaces",
      "static": true,
      "params": [
        {
          "name": "num",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of HTML spaces"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string o HTML spaces"
      },
      "throws": []
    },
    {
      "name": "bold",
      "comment": "Surrounds the specified text with the HTML begin and end tags for bold.",
      "javadoc": "Surrounds the specified text with the HTML begin and end tags for bold.\n@param text the original text\n@return the text with the bold HTML tags",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the original text"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the text with the bold HTML tags"
      },
      "throws": []
    },
    {
      "name": "underline",
      "comment": "Surrounds the specified text with the HTML begin and end tags for underlined text.",
      "javadoc": "Surrounds the specified text with the HTML begin and end tags for underlined text.\n@param text the original text\n@return the text with the underline HTML tags",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the original text"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the text with the underline HTML tags"
      },
      "throws": []
    },
    {
      "name": "italic",
      "comment": "Surrounds the specified text with the HTML begin and end tags for italic.",
      "javadoc": "Surrounds the specified text with the HTML begin and end tags for italic.\n@param text the original text\n@return the text with the italic HTML tags",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the original text"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the text with the italic HTML tags"
      },
      "throws": []
    },
    {
      "name": "isHTML",
      "comment": "Returns true if the given text is HTML.  For this to be true, the text must begin with\n the HTML tag.",
      "javadoc": "Returns true if the given text is HTML.  For this to be true, the text must begin with\n the \u0026lt;HTML\u0026gt; tag.\n@param text the text to check\n@return true if the given text is HTML",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given text is HTML"
      },
      "throws": []
    },
    {
      "name": "isUnbreakableHTML",
      "comment": "Returns true if the text cannot be broken into lines due to\n the usage of particular HTML constructs.",
      "javadoc": "Returns true if the text cannot be broken into lines due to\n the usage of particular HTML constructs.\n@param text the text to check\n@return true if the text cannot be correctly broken into lines",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the text cannot be correctly broken into lines"
      },
      "throws": []
    },
    {
      "name": "logUnbreakableHTMLWarning",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFontSize",
      "comment": "Sets the font size of the given text by wrapping it in font tags.",
      "javadoc": "Sets the font size of the given text by wrapping it in \u0026lt;font\u0026gt; tags.\n@param text the text to size\n@param ptSize the point size of the text\n@return the updated String",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to size"
        },
        {
          "name": "ptSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the point size of the text"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the updated String"
      },
      "throws": []
    },
    {
      "name": "setFont",
      "comment": "Sets the font size and color of the given text by wrapping it in font tags.",
      "javadoc": "Sets the font size and color of the given text by wrapping it in \u0026lt;font\u0026gt; tags.\n@param text the text to size\n@param color the color of the text\n@param ptSize the point size of the text\n@return the updated String",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to size"
        },
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the color of the text"
        },
        {
          "name": "ptSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the point size of the text"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the updated String"
      },
      "throws": []
    },
    {
      "name": "wrapWithLinkPlaceholder",
      "comment": "Returns the given text wrapped in #LINK_PLACEHOLDER_OPEN and close tags.\n If foo is passed for the HTML text, with a content value of 123456, then\n the output will look like:\n \n \t!-- LINK CONTENT\u003d\"123456\" --foo!-- /LINK --\n ",
      "javadoc": "Returns the given text wrapped in {@link #LINK_PLACEHOLDER_OPEN} and close tags.\n If \u003ccode\u003efoo\u003c/code\u003e is passed for the HTML text, with a content value of \u003ccode\u003e123456\u003c/code\u003e, then\n the output will look like:\n \u003cpre\u003e\n \t\u0026lt;!-- LINK CONTENT\u003d\"123456\" --\u0026gt;foo\u0026lt;!-- /LINK --\u0026gt;\n \u003c/pre\u003e\n@param htmlText the HTML text to wrap\n@param content the value that will be put into the \u003ccode\u003eCONTENT\u003c/code\u003e section of the\n \t\t  generated HTML.  This can later be retrieved by clients transforming this text.\n@return the wrapped text",
      "static": true,
      "params": [
        {
          "name": "htmlText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the HTML text to wrap"
        },
        {
          "name": "content",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the value that will be put into the CONTENT section of the\n \t\t  generated HTML.  This can later be retrieved by clients transforming this text."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the wrapped text"
      },
      "throws": []
    },
    {
      "name": "convertLinkPlaceholdersToHyperlinks",
      "comment": "Takes HTML text wrapped by #wrapWithLinkPlaceholder(String, String) and replaces\n the custom link comment tags with HTML anchor (A) tags, where the HREF\n value is the value that was in the CONTENT attribute.",
      "javadoc": "Takes HTML text wrapped by {@link #wrapWithLinkPlaceholder(String, String)} and replaces\n the custom link comment tags with HTML anchor (\u003ccode\u003eA\u003c/code\u003e) tags, where the \u003ccode\u003eHREF\u003c/code\u003e\n value is the value that was in the \u003ccode\u003eCONTENT\u003c/code\u003e attribute.\n@param text the text for which to replace the markup\n@return the updated text",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text for which to replace the markup"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the updated text"
      },
      "throws": []
    },
    {
      "name": "toHTML",
      "comment": "Convert the given string to HTML by adding the HTML tag and\n replacing new line chars with HTML BR tags.",
      "javadoc": "Convert the given string to HTML by adding the HTML tag and\n replacing new line chars with HTML \u0026lt;BR\u0026gt; tags.\n@param text The text to convert to HTML\n@return the converted text",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to convert to HTML"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the converted text"
      },
      "throws": []
    },
    {
      "name": "toWrappedHTML",
      "comment": "This is just a convenience method to call #toWrappedHTML(String, int) with a\n max line length of .",
      "javadoc": "This is just a convenience method to call {@link #toWrappedHTML(String, int)} with a\n max line length of {@value #DEFAULT_MAX_LINE_LENGTH}.\n@param text The text to convert\n@return converted text",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to convert"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "converted text"
      },
      "throws": []
    },
    {
      "name": "toWrappedHTML",
      "comment": "Similar to #toHTML(String) in that it will wrap the given text in\n HTML tags and split the content into multiple lines.  The difference is that this method\n will split lines that pass the given maximum length and on \u0027\\n\u0027\n characters.  Alternatively, #toHTML(String) will only split the given\n text on \u0027\\n\u0027 characters.",
      "javadoc": "Similar to {@link #toHTML(String)} in that it will wrap the given text in\n HTML tags and split the content into multiple lines.  The difference is that this method\n will split lines that pass the given maximum length \u003cb\u003eand\u003c/b\u003e on \u003ccode\u003e\u0027\\n\u0027\u003c/code\u003e\n characters.  Alternatively, {@link #toHTML(String)} will only split the given\n text on \u003ccode\u003e\u0027\\n\u0027\u003c/code\u003e characters.\n@param text The text to convert\n@param maxLineLength The maximum number of characters that should appear in a line;\n \t\t  0 signals not to wrap the line based upon length\n@return converted text",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The text to convert"
        },
        {
          "name": "maxLineLength",
          "type_long": "int",
          "type_short": "int",
          "comment": "The maximum number of characters that should appear in a line;\n \t\t  0 signals not to wrap the line based upon length"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "converted text"
      },
      "throws": []
    },
    {
      "name": "toLiteralHTMLForTooltip",
      "comment": "A very specific method that will:\n \n \t\n \tMake sure the HTML length is clipped to a reasonable size\n  \n  \n  Escape any embedded HTML (so that it is not interpreted as HTML)\n  \n  \n  Put the entire result in HTML\n  \n ",
      "javadoc": "A very specific method that will:\n \u003col\u003e\n \t\u003cli\u003e\n \tMake sure the HTML length is clipped to a reasonable size\n  \u003c/li\u003e\n  \u003cli\u003e\n  \u003cb\u003eEscape any embedded HTML\u003c/b\u003e (so that it is not interpreted as HTML)\n  \u003c/li\u003e\n  \u003cli\u003e\n  Put the entire result in HTML\n  \u003c/li\u003e\n \u003c/ol\u003e\n@param text the text to convert\n@return the converted value.",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to convert"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the converted value."
      },
      "throws": []
    },
    {
      "name": "friendlyEncodeHTML",
      "comment": "Converts any special or reserved characters in the specified string into HTML-escaped\n entities.  Use this method when you have content containing HTML that you do not want\n interpreted as HTML, such as when displaying text that uses angle brackets around words.\n\n For example, consider the following\n\n \n \t\t\n \t\t\tInputOutputRendered as(Without Friendly Encoding)\n \t\t\n \t\t\n \t\t\t\n \t\t\t\tHi bmom /b\n \t\t\t\n \t\t\t\n \t\t\t\tHi\n  nbsp;lt;bgt;mom\n  nbsp;lt;/bgt;\n  \n \t\t\t\n \t\t\t\n \t\t\t\tHi bmom /b\n \t\t\t\n \t\t\t\n \t\t\t\tHi mom \n \t\t\t\n \t\t\n \n\n  ",
      "javadoc": "Converts any special or reserved characters in the specified string into HTML-escaped\n entities.  Use this method when you have content containing HTML that you do not want\n interpreted as HTML, such as when displaying text that uses angle brackets around words.\n\n \u003cP\u003eFor example, consider the following\u003cbr\u003e\u003cbr\u003e\n\n \u003ctable border\u003d1\u003e\u003ccaption\u003e\u003c/caption\u003e\n \t\t\u003ctr\u003e\n \t\t\t\u003cth\u003eInput\u003c/th\u003e\u003cth\u003eOutput\u003c/th\u003e\u003cth\u003eRendered as\u003c/th\u003e\u003cth\u003e(Without Friendly Encoding)\u003c/th\u003e\n \t\t\u003c/tr\u003e\n \t\t\u003ctr\u003e\n \t\t\t\u003ctd\u003e\n \t\t\t\tHi \u0026lt;b\u0026gt;mom \u0026lt;/b\u0026gt;\n \t\t\t\u003c/td\u003e\n \t\t\t\u003ctd\u003e\n \t\t\t\tHi\u003cspan style\u003d\"color:green\"\u003e\n  \u0026#x26;nbsp;\u003cb\u003e\u0026#x26;lt;\u003c/b\u003e\u003c/span\u003eb\u003cspan style\u003d\"color:green\"\u003e\u003cb\u003e\u0026#x26;gt;\u003c/b\u003e\u003c/span\u003emom\n  \u003cspan style\u003d\"color:green\"\u003e\u0026#x26;nbsp;\u003cb\u003e\u0026#x26;lt;\u003c/b\u003e\u003c/span\u003e/b\u003cspan style\u003d\"color:green\"\u003e\u003cb\u003e\u0026#x26;gt;\u003c/b\u003e\n  \u003c/span\u003e\n \t\t\t\u003c/td\u003e\n \t\t\t\u003ctd\u003e\n \t\t\t\tHi \u0026lt;b\u0026gt;mom \u0026lt;/b\u0026gt;\n \t\t\t\u003c/td\u003e\n \t\t\t\u003ctd\u003e\n \t\t\t\tHi \u003cb\u003emom \u003c/b\u003e\n \t\t\t\u003c/td\u003e\n \t\t\u003c/tr\u003e\n \u003c/table\u003e\n\n  \u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\n@param text string to be encoded\n@return the encoded HTML string",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string to be encoded"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the encoded HTML string"
      },
      "throws": []
    },
    {
      "name": "friendlyEncodeHTML",
      "comment": "See #friendlyEncodeHTML(String)",
      "javadoc": "See {@link #friendlyEncodeHTML(String)}\n@param text string to be encoded\n@param skipLeadingWhitespace true signals to ignore any leading whitespace characters.\n \t      This is useful when line wrapping to force wrapped lines to the left\n@return the encoded HTML string",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string to be encoded"
        },
        {
          "name": "skipLeadingWhitespace",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true signals to ignore any leading whitespace characters.\n \t      This is useful when line wrapping to force wrapped lines to the left"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the encoded HTML string"
      },
      "throws": []
    },
    {
      "name": "escapeHTML",
      "comment": "Escapes any HTML special characters in the specified text.\n \n Does not otherwise modify the input text or wrap lines.\n \n Calling this twice will result in text being double-escaped, which will not display correctly.\n \n See also StringEscapeUtils#escapeHtml3(String) if you need quote-safe html encoding.\n ",
      "javadoc": "Escapes any HTML special characters in the specified text.\n \u003cp\u003e\n Does not otherwise modify the input text or wrap lines.\n \u003cp\u003e\n Calling this twice will result in text being double-escaped, which will not display correctly.\n \u003cp\u003e\n See also \u003ccode\u003eStringEscapeUtils#escapeHtml3(String)\u003c/code\u003e if you need quote-safe html encoding.\n \u003cp\u003e\n@param text plain-text that might have some characters that should NOT be interpreted as HTML\n@return string with any html characters replaced with equivalents",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "plain-text that might have some characters that should NOT be interpreted as HTML"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "string with any html characters replaced with equivalents"
      },
      "throws": []
    },
    {
      "name": "charNeedsHTMLEscaping",
      "comment": "Tests a unicode code point (i.e., 32 bit character) to see if it needs to be escaped before \n being added to a HTML document because it is non-printable or a non-standard control \n character",
      "javadoc": "Tests a unicode code point (i.e., 32 bit character) to see if it needs to be escaped before \n being added to a HTML document because it is non-printable or a non-standard control \n character\n@param codePoint character to test\n@return boolean true if character should be escaped",
      "static": true,
      "params": [
        {
          "name": "codePoint",
          "type_long": "int",
          "type_short": "int",
          "comment": "character to test"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if character should be escaped"
      },
      "throws": []
    },
    {
      "name": "toLiteralHTML",
      "comment": "A convenience method to split the given HTML into lines, based on the given length, and\n then to #friendlyEncodeHTML(String) the text.\n\n This method preserves all whitespace between line breaks.\n\n Note: This method is not intended to handle text that already contains\n entity escaped text.  The result will not render correctly as HTML.",
      "javadoc": "A convenience method to split the given HTML into lines, based on the given length, and\n then to {@link #friendlyEncodeHTML(String)} the text.\n\n \u003cP\u003eThis method preserves all whitespace between line breaks.\n\n \u003cP\u003e\u003cB\u003eNote: \u003c/B\u003eThis method is not intended to handle text that already contains\n entity escaped text.  The result will not render correctly as HTML.\n@param text the text to update\n@param maxLineLength the max line length upon which to wrap; 0 for no max length\n@return the updated text",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to update"
        },
        {
          "name": "maxLineLength",
          "type_long": "int",
          "type_short": "int",
          "comment": "the max line length upon which to wrap; 0 for no max length"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the updated text"
      },
      "throws": []
    },
    {
      "name": "toHTMLWithLineWrappingAndEncoding",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "maxLineLength",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "preserveLeadingWhitespace",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lineWrapWithHTMLLineBreaks",
      "comment": "This is just a convenience call to #lineWrapWithHTMLLineBreaks(String, int) with\n a max line length of 0, which signals to not to wrap on line length, but only on\n newline characters.",
      "javadoc": "This is just a convenience call to {@link #lineWrapWithHTMLLineBreaks(String, int)} with\n a max line length of 0, which signals to not to wrap on line length, but only on\n newline characters.\n@param text the text to wrap\n@return the updated text\n@see #lineWrapWithHTMLLineBreaks(String, int)",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to wrap"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the updated text"
      },
      "throws": []
    },
    {
      "name": "lineWrapWithHTMLLineBreaks",
      "comment": "Replaces all newline characters with HTML BR tags.\n\n Unlike #toWrappedHTML(String), this method does not add the\n HTML tag to the given text.\n\n Call this method when you wish to create your own HTML content, with parts of that\n content line wrapped.",
      "javadoc": "Replaces all newline characters with HTML \u0026lt;BR\u0026gt; tags.\n\n \u003cP\u003eUnlike {@link #toWrappedHTML(String)}, this method does \u003cB\u003enot\u003c/B\u003e add the\n \u0026lt;HTML\u0026gt; tag to the given text.\n\n \u003cP\u003eCall this method when you wish to create your own HTML content, with parts of that\n content line wrapped.\n@param text the text to wrap\n@param maxLineLength the max length of the line; 0 if no max is desired\n@return the updated text",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to wrap"
        },
        {
          "name": "maxLineLength",
          "type_long": "int",
          "type_short": "int",
          "comment": "the max length of the line; 0 if no max is desired"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the updated text"
      },
      "throws": []
    },
    {
      "name": "fromHTML",
      "comment": "Checks the given string to see it is HTML, according to BasicHTML and then\n will return the text without any markup tags if it is.",
      "javadoc": "Checks the given string to see it is HTML, according to {@link BasicHTML} and then\n will return the text without any markup tags if it is.\n@param text the text to convert\n@return the converted String",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to convert"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the converted String"
      },
      "throws": []
    },
    {
      "name": "replaceKnownSpecialCharacters",
      "comment": "A method to remove characters from the given string that are output by the HTML\n conversion process when going from HTML to plain text.",
      "javadoc": "A method to remove characters from the given string that are output by the HTML\n conversion process when going from HTML to plain text.\n@param s the string to be updated\n@return the updated String",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to be updated"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the updated String"
      },
      "throws": []
    },
    {
      "name": "toRGBString",
      "comment": "Returns a color string of the format rrrgggbbb.  As an example, Color#RED would be\n returned as 255000000 (the values are padded with 0s to make to fill up 3 digits per\n component).",
      "javadoc": "Returns a color string of the format rrrgggbbb.  As an example, {@link Color#RED} would be\n returned as 255000000 (the values are padded with 0s to make to fill up 3 digits per\n component).\n@param color The color to convert.\n@return a string of the format rrrgggbbb.",
      "static": true,
      "params": [
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "The color to convert."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a string of the format rrrgggbbb."
      },
      "throws": []
    },
    {
      "name": "toHexString",
      "comment": "Returns a color string of the format #RRGGBB.  As an example, Color#RED would be\n returned as #FF0000 (the values are padded with 0s to make to fill up 2 digits per\n component).",
      "javadoc": "Returns a color string of the format #RRGGBB.  As an example, {@link Color#RED} would be\n returned as #FF0000 (the values are padded with 0s to make to fill up 2 digits per\n component).\n@param color The color to convert.\n@return a string of the format #RRGGBB.",
      "static": true,
      "params": [
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "The color to convert."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a string of the format #RRGGBB."
      },
      "throws": []
    }
  ]
}
