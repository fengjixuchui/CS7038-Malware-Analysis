{
  "name": "GhidraFileChooserModel",
  "comment": "Interface for the GhidraFileChooser data model.\n This allows the GhidraFileChooser to operate\n on files from different sources, other than\n just the local file system.",
  "javadoc": "Interface for the GhidraFileChooser data model.\n This allows the GhidraFileChooser to operate\n on files from different sources, other than\n just the local file system.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "setListener",
      "comment": "Set the model listener.",
      "javadoc": "Set the model listener.\n@param l the new model listener",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.util.filechooser.GhidraFileChooserListener",
          "type_short": "GhidraFileChooserListener",
          "comment": "the new model listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHomeDirectory",
      "comment": "Returns the home directory.",
      "javadoc": "Returns the home directory.\n@return the home directory",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the home directory"
      },
      "throws": []
    },
    {
      "name": "getDesktopDirectory",
      "comment": "Returns the user\u0027s desktop directory, as defined by their operating system and/or their windowing environment, or\n null if there is no desktop directory.\n Example: \"/home/the_user/Desktop\" or \"c:/Users/the_user/Desktop\"",
      "javadoc": "Returns the user\u0027s desktop directory, as defined by their operating system and/or their windowing environment, or\n null if there is no desktop directory.\u003cp\u003e\n Example: \"/home/the_user/Desktop\" or \"c:/Users/the_user/Desktop\"\n@return desktop directory",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "desktop directory"
      },
      "throws": []
    },
    {
      "name": "getRoots",
      "comment": "Returns the root drives/directories.\n On windows, \"C:\\\", \"D:\\\", etc.\n On linux, \"/\".",
      "javadoc": "Returns the root drives/directories.\n On windows, \"C:\\\", \"D:\\\", etc.\n On linux, \"/\".\n@return the root drives",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File[]",
        "type_short": "java.io.File[]",
        "comment": "the root drives"
      },
      "throws": []
    },
    {
      "name": "getListing",
      "comment": "Returns an array of the files that \n exist in the specified directory.",
      "javadoc": "Returns an array of the files that \n exist in the specified directory.\n@param directory the directory\n@return an array of files",
      "static": false,
      "params": [
        {
          "name": "directory",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the directory"
        },
        {
          "name": "filter",
          "type_long": "java.io.FileFilter",
          "type_short": "FileFilter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.io.File[]",
        "type_short": "java.io.File[]",
        "comment": "an array of files"
      },
      "throws": []
    },
    {
      "name": "getIcon",
      "comment": "Returns an icon for the specified file.",
      "javadoc": "Returns an icon for the specified file.\n@param file the file\n@return an icon for the specified file",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file"
        }
      ],
      "return": {
        "type_long": "javax.swing.Icon",
        "type_short": "Icon",
        "comment": "an icon for the specified file"
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "Returns a description for the specified file.",
      "javadoc": "Returns a description for the specified file.\n@param file the file\n@return a description for the specified file",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a description for the specified file"
      },
      "throws": []
    },
    {
      "name": "createDirectory",
      "comment": "Creates a directory in the specified directory with the specified\n name.",
      "javadoc": "Creates a directory in the specified directory with the specified\n name.\n@param directory the directory in which to create the new directory\n@param name the name of the directory\n@return true if the new directory was create.",
      "static": false,
      "params": [
        {
          "name": "directory",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the directory in which to create the new directory"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the directory"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the new directory was create."
      },
      "throws": []
    },
    {
      "name": "isDirectory",
      "comment": "Tests whether the file denoted by this abstract pathname is a\n directory.",
      "javadoc": "Tests whether the file denoted by this abstract pathname is a\n directory.\n@return \u003ccode\u003etrue\u003c/code\u003e if and only if the file denoted by this\n          abstract pathname exists \u003cem\u003eand\u003c/em\u003e is a directory;\n          \u003ccode\u003efalse\u003c/code\u003e otherwise",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if and only if the file denoted by this\n          abstract pathname exists and is a directory;\n          false otherwise"
      },
      "throws": []
    },
    {
      "name": "isAbsolute",
      "comment": "Tests whether this abstract pathname is absolute.  The definition of\n absolute pathname is system dependent.  On UNIX systems, a pathname is\n absolute if its prefix is \"/\".  On Microsoft Windows systems, a\n pathname is absolute if its prefix is a drive specifier followed by\n \"\\\\\", or if its prefix is \"\\\\\".",
      "javadoc": "Tests whether this abstract pathname is absolute.  The definition of\n absolute pathname is system dependent.  On UNIX systems, a pathname is\n absolute if its prefix is \u003ccode\u003e\"/\"\u003c/code\u003e.  On Microsoft Windows systems, a\n pathname is absolute if its prefix is a drive specifier followed by\n \u003ccode\u003e\"\\\\\"\u003c/code\u003e, or if its prefix is \u003ccode\u003e\"\\\\\"\u003c/code\u003e.\n@return \u003ccode\u003etrue\u003c/code\u003e if this abstract pathname is absolute,\n          \u003ccode\u003efalse\u003c/code\u003e otherwise",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this abstract pathname is absolute,\n          false otherwise"
      },
      "throws": []
    },
    {
      "name": "renameFile",
      "comment": "Renames the src file to the dest file.",
      "javadoc": "Renames the src file to the dest file.\n@param src the file to be renamed\n@param dest the new file\n@return true if the file was renamed",
      "static": false,
      "params": [
        {
          "name": "src",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to be renamed"
        },
        {
          "name": "dest",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the new file"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the file was renamed"
      },
      "throws": []
    },
    {
      "name": "getSeparator",
      "comment": "Returns the file separator char.\n On windows, \u0027\\\u0027\n On linux, \u0027/\u0027.",
      "javadoc": "Returns the file separator char.\n On windows, \u0027\\\u0027\n On linux, \u0027/\u0027.\n@return the file separator char",
      "static": false,
      "params": [],
      "return": {
        "type_long": "char",
        "type_short": "char",
        "comment": "the file separator char"
      },
      "throws": []
    }
  ]
}
