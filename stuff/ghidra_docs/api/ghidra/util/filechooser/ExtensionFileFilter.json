{
  "name": "ExtensionFileFilter",
  "comment": "A convenience implementation of FileFilter that filters out\n all files except for those type extensions that it knows about.\n \n Extensions are of the type \"foo\" (no leading dot). Case is ignored.\n \n Example - create a new filter that filters out all files\n but gif and jpg image files:\n \n     GhidraFileChooser chooser \u003d new GhidraFileChooser();\n     chooser.addFileFilter(ExtensionFilFilter.forExtensions(\"JPEG and GIF Images\", \"gif\", \"jpg\"));\n",
  "javadoc": "A convenience implementation of FileFilter that filters out\n all files except for those type extensions that it knows about.\n \u003cp\u003e\n Extensions are of the type \"foo\" (no leading dot). Case is ignored.\n \u003cp\u003e\n Example - create a new filter that filters out all files\n but gif and jpg image files:\n \u003cpre\u003e\n     GhidraFileChooser chooser \u003d new GhidraFileChooser();\n     chooser.addFileFilter(ExtensionFilFilter.forExtensions(\"JPEG and GIF Images\", \"gif\", \"jpg\"));\n\u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.util.filechooser.GhidraFileFilter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "extensions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cjava.lang.String\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "description",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "fullDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "forExtensions",
      "comment": "Creates a ExtensionFileFilter in a varargs friendly way.",
      "javadoc": "Creates a {@link ExtensionFileFilter} in a varargs friendly way.\n@param description String description of this set of file extensions.\n@param exts variable length list of file extensions, without leading dot.\n@return new {@link ExtensionFileFilter} instance.",
      "static": true,
      "params": [
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String description of this set of file extensions."
        },
        {
          "name": "exts",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "variable length list of file extensions, without leading dot."
        }
      ],
      "return": {
        "type_long": "ghidra.util.filechooser.ExtensionFileFilter",
        "type_short": "ExtensionFileFilter",
        "comment": "new ExtensionFileFilter instance."
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a file filter that accepts the given file type.\n Example: new ExtensionFileFilter(\"jpg\", \"JPEG Images\");",
      "javadoc": "Creates a file filter that accepts the given file type.\n Example: new ExtensionFileFilter(\"jpg\", \"JPEG Images\");\n@param extension file extension to match, without leading dot\n@param description descriptive string of the filter",
      "static": false,
      "params": [
        {
          "name": "extension",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "file extension to match, without leading dot"
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "descriptive string of the filter"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a file filter from the given string array and description.\n Example: new ExtensionFileFilter(String {\"gif\", \"jpg\"}, \"Gif and JPG Images\");",
      "javadoc": "Creates a file filter from the given string array and description.\n Example: new ExtensionFileFilter(String {\"gif\", \"jpg\"}, \"Gif and JPG Images\");\n@param filters array of file name extensions, each without a leading dot\n@param description descriptive string of the filter",
      "static": false,
      "params": [
        {
          "name": "filters",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "array of file name extensions, each without a leading dot"
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "descriptive string of the filter"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "accept",
      "comment": "Return true if this file should be shown in the directory pane,\n false if it shouldn\u0027t.\n\n Files that begin with \".\" are ignored.",
      "javadoc": "Return true if this file should be shown in the directory pane,\n false if it shouldn\u0027t.\n\n Files that begin with \".\" are ignored.\n@see FileFilter#accept",
      "static": false,
      "params": [
        {
          "name": "f",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "model",
          "type_long": "ghidra.util.filechooser.GhidraFileChooserModel",
          "type_short": "GhidraFileChooserModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
