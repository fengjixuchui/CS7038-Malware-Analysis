{
  "name": "DataTypeParser",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "sourceDataTypeManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataTypeManager",
      "type_short": "DataTypeManager",
      "constant_value": null
    },
    {
      "name": "destinationDataTypeManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataTypeManager",
      "type_short": "DataTypeManager",
      "constant_value": null
    },
    {
      "name": "dataTypeManagerService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.services.DataTypeQueryService",
      "type_short": "DataTypeQueryService",
      "constant_value": null
    },
    {
      "name": "allowedTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.data.DataTypeParser.AllowedDataTypes",
      "type_short": "AllowedDataTypes",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "A constructor that does not use the source or destination data type managers.  In terms of\n the source data type manager, this means that all data type managers will be used when\n resolving data types.",
      "javadoc": "A constructor that does not use the source or destination data type managers.  In terms of\n the source data type manager, this means that all data type managers will be used when\n resolving data types.\n@param dataTypeManagerService data-type manager tool service, or null\n@param allowedTypes constrains which data-types may be parsed",
      "static": false,
      "params": [
        {
          "name": "dataTypeManagerService",
          "type_long": "ghidra.app.services.DataTypeQueryService",
          "type_short": "DataTypeQueryService",
          "comment": "data-type manager tool service, or null"
        },
        {
          "name": "allowedTypes",
          "type_long": "ghidra.util.data.DataTypeParser.AllowedDataTypes",
          "type_short": "AllowedDataTypes",
          "comment": "constrains which data-types may be parsed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param sourceDataTypeManager preferred source data-type manager, or null\n@param destinationDataTypeManager target data-type manager, or null\n@param dataTypeManagerService data-type manager tool service, or null\n@param allowedTypes constrains which data-types may be parsed\n@see #DataTypeParser(DataTypeQueryService, AllowedDataTypes)",
      "static": false,
      "params": [
        {
          "name": "sourceDataTypeManager",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "preferred source data-type manager, or null"
        },
        {
          "name": "destinationDataTypeManager",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "target data-type manager, or null"
        },
        {
          "name": "dataTypeManagerService",
          "type_long": "ghidra.app.services.DataTypeQueryService",
          "type_short": "DataTypeQueryService",
          "comment": "data-type manager tool service, or null"
        },
        {
          "name": "allowedTypes",
          "type_long": "ghidra.util.data.DataTypeParser.AllowedDataTypes",
          "type_short": "AllowedDataTypes",
          "comment": "constrains which data-types may be parsed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parse",
      "comment": "Parse a data-type string specification",
      "javadoc": "Parse a data-type string specification\n@param dataTypeString a known data-type name followed by zero or more pointer/array decorations.\n@return parsed data-type or null if not found\n@throws InvalidDataTypeException if data-type string is invalid or length exceeds specified maxSize\n@throws CancelledException parse cancelled through user interaction",
      "static": false,
      "params": [
        {
          "name": "dataTypeString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a known data-type name followed by zero or more pointer/array decorations."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "parsed data-type or null if not found"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": "if data-type string is invalid or length exceeds specified maxSize"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "parse cancelled through user interaction"
        }
      ]
    },
    {
      "name": "parse",
      "comment": "Parse a data type string specification with category path.  If category is not null,\n the dataTypeManagerService will not be queried.",
      "javadoc": "Parse a data type string specification with category path.  If category is not null,\n the dataTypeManagerService will not be queried.\n@param dataTypeString a known data-type name followed by zero or more pointer/array decorations.\n@param category known path of data-type or null if unknown\n@return parsed data-type or null if not found\n@throws InvalidDataTypeException if data type string is invalid or length exceeds specified \n         maxSize\n@throws CancelledException parse cancelled through user interaction (only if parser \n         constructed with service)",
      "static": false,
      "params": [
        {
          "name": "dataTypeString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a known data-type name followed by zero or more pointer/array decorations."
        },
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "known path of data-type or null if unknown"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "parsed data-type or null if not found"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": "if data type string is invalid or length exceeds specified \n         maxSize"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "parse cancelled through user interaction (only if parser \n         constructed with service)"
        }
      ]
    },
    {
      "name": "parse",
      "comment": "Parse a data type string specification using the specified baseDatatype.",
      "javadoc": "Parse a data type string specification using the specified baseDatatype.\n@param suggestedBaseDataType base data type (may be null), this will be used as the base \n        data-type if its name matches the base name in the specified dataTypeString.\n@param dataTypeString a base data-type followed by a sequence of zero or more pointer/array \n        decorations to be applied.\n The string may start with the baseDataType\u0027s name.\n@return parsed data-type or null if not found\n@throws InvalidDataTypeException if data-type string is invalid or length exceeds specified \n         maxSize\n@throws CancelledException parse cancelled through user interaction (only if parser \n         constructed with service)",
      "static": false,
      "params": [
        {
          "name": "dataTypeString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a base data-type followed by a sequence of zero or more pointer/array \n        decorations to be applied.\n The string may start with the baseDataType\u0027s name."
        },
        {
          "name": "suggestedBaseDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "base data type (may be null), this will be used as the base \n        data-type if its name matches the base name in the specified dataTypeString."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "parsed data-type or null if not found"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": "if data-type string is invalid or length exceeds specified \n         maxSize"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "parse cancelled through user interaction (only if parser \n         constructed with service)"
        }
      ]
    },
    {
      "name": "ensureIsAllowableType",
      "comment": "Throws exception if the data type does not match the specified AllowedDataTypes.",
      "javadoc": "Throws exception if the data type does not match the specified {@link AllowedDataTypes}.\n@param dt {@link DataType} to check\n@param allowedTypes {@link AllowedDataTypes enum} specifying what category of data types are ok\n@throws InvalidDataTypeException if dt violates the specified allowedTypes",
      "static": true,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "DataType to check"
        },
        {
          "name": "allowedTypes",
          "type_long": "ghidra.util.data.DataTypeParser.AllowedDataTypes",
          "type_short": "AllowedDataTypes",
          "comment": "AllowedDataTypes specifying what category of data types are ok"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": "if dt violates the specified allowedTypes"
        }
      ]
    },
    {
      "name": "parseDataTypeModifiers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "namedDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "dataTypeModifiers",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parseModifiers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeModifiers",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.util.data.DataTypeParser.DtPiece\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getNamedDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "baseName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findDataTypeInAllDataTypeManagers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "baseName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "results",
          "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "proptUserForType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "baseName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        },
        {
          "name": "baseName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": ""
        },
        {
          "name": "list",
          "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "pickFromPossibleEquivalentDataTypes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dtList",
          "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBaseString",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dataTypeString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "splitDataTypeModifiers",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dataTypeModifiers",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createArrayDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "baseDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "elementLength",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "elementCount",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parseSize",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "size",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
