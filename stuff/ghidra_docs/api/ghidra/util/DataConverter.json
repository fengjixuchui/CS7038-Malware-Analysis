{
  "name": "DataConverter",
  "comment": "Stateless helper classes with static singleton instances that contain methods to convert\n Java numeric types to and from their raw form in a byte array.\n ",
  "javadoc": "Stateless helper classes with static singleton instances that contain methods to convert\n Java numeric types to and from their raw form in a byte array.\n \u003cp\u003e",
  "static": false,
  "implements": [
    "java.io.Serializable"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getInstance",
      "comment": "Returns the correct DataConverter static instance for the requested endian-ness.",
      "javadoc": "Returns the correct DataConverter static instance for the requested endian-ness.\n@param isBigEndian boolean flag, true means big endian\n@return static DataConverter instance",
      "static": true,
      "params": [
        {
          "name": "isBigEndian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag, true means big endian"
        }
      ],
      "return": {
        "type_long": "ghidra.util.DataConverter",
        "type_short": "DataConverter",
        "comment": "static DataConverter instance"
      },
      "throws": []
    },
    {
      "name": "isBigEndian",
      "comment": "Returns the endianess of this DataConverter instance.",
      "javadoc": "Returns the endianess of this DataConverter instance.\n@return boolean flag, true means big-endian",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean flag, true means big-endian"
      },
      "throws": []
    },
    {
      "name": "getShort",
      "comment": "Get the short value from the given byte array.",
      "javadoc": "Get the short value from the given byte array.\n@param b array containing bytes\n@return signed short value from the beginning of the specified array\n@throws IndexOutOfBoundsException if byte array size is less than 2.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array containing bytes"
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "signed short value from the beginning of the specified array"
      },
      "throws": []
    },
    {
      "name": "getShort",
      "comment": "Get the short value from the given byte array.",
      "javadoc": "Get the short value from the given byte array.\n@param b array containing bytes\n@param offset offset into byte array for getting the short\n@return signed short value\n@throws IndexOutOfBoundsException if byte array size is less than offset+2",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array containing bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into byte array for getting the short"
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "signed short value"
      },
      "throws": []
    },
    {
      "name": "getInt",
      "comment": "Get the int value from the given byte array.",
      "javadoc": "Get the int value from the given byte array.\n@param b array containing bytes\n@return signed int value from the beginning of the specified array\n@throws IndexOutOfBoundsException if byte array size is less than 4",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array containing bytes"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "signed int value from the beginning of the specified array"
      },
      "throws": []
    },
    {
      "name": "getInt",
      "comment": "Get the int value from the given byte array.",
      "javadoc": "Get the int value from the given byte array.\n@param b array containing bytes\n@param offset offset into byte array for getting the int\n@return signed int value\n@throws IndexOutOfBoundsException if byte array size is less than offset+4",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array containing bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into byte array for getting the int"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "signed int value"
      },
      "throws": []
    },
    {
      "name": "getLong",
      "comment": "Get the long value from the given byte array.",
      "javadoc": "Get the long value from the given byte array.\n@param b array containing bytes\n@return signed long value from the beginning of the specified array\n@throws IndexOutOfBoundsException if byte array size is less than 8",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array containing bytes"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "signed long value from the beginning of the specified array"
      },
      "throws": []
    },
    {
      "name": "getLong",
      "comment": "Get the long value from the given byte array.",
      "javadoc": "Get the long value from the given byte array.\n@param b array containing bytes\n@param offset offset into byte array for getting the long\n@return signed long value\n@throws IndexOutOfBoundsException if byte array size is less than offset+8",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array containing bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into byte array for getting the long"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "signed long value"
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "Get the unsigned value from the given byte array using the specified \n integer size, returned as a long.\n \n Values with a size less than sizeof(long) will not have their sign bit\n extended and therefore will appear as an \u0027unsigned\u0027 value.\n \n Casting the \u0027unsigned\u0027 long value to the correctly sized smaller \n java primitive will cause the value to appear as a signed value.\n  \n Values of size 8 (ie. longs) will be signed.",
      "javadoc": "Get the \u003cb\u003eunsigned\u003c/b\u003e value from the given byte array using the specified \n integer size, returned as a long.\n \u003cp\u003e\n Values with a size less than sizeof(long) will \u003cb\u003enot\u003c/b\u003e have their sign bit\n extended and therefore will appear as an \u0027unsigned\u0027 value.\n \u003cp\u003e\n Casting the \u0027unsigned\u0027 long value to the correctly sized smaller \n java primitive will cause the value to appear as a signed value.\n \u003cp\u003e \n Values of size 8 (ie. longs) will be signed.\n@param b array containing bytes\n@param size number of bytes (1 - 8) to use from array at offset 0\n@return unsigned value from the beginning of the specified array\n@throws IndexOutOfBoundsException if byte array size is less than specified size",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array containing bytes"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes (1 - 8) to use from array at offset 0"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "unsigned value from the beginning of the specified array"
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "Get the unsigned value from the given byte array using the specified \n integer size, returned as a long.\n \n Values with a size less than sizeof(long) will not have their sign bit\n extended and therefore will appear as an \u0027unsigned\u0027 value.\n \n Casting the \u0027unsigned\u0027 long value to the correctly sized smaller \n java primitive will cause the value to appear as a signed value. \n \n Values of size 8 (ie. longs) will be signed.",
      "javadoc": "Get the \u003cb\u003eunsigned\u003c/b\u003e value from the given byte array using the specified \n integer size, returned as a long.\n \u003cp\u003e\n Values with a size less than sizeof(long) will \u003cb\u003enot\u003c/b\u003e have their sign bit\n extended and therefore will appear as an \u0027unsigned\u0027 value.\n \u003cp\u003e\n Casting the \u0027unsigned\u0027 long value to the correctly sized smaller \n java primitive will cause the value to appear as a signed value. \n \u003cp\u003e\n Values of size 8 (ie. longs) will be signed.\n@param b array containing bytes\n@param size number of bytes (1 - 8) to use from array\n@param offset offset into byte array for getting the long\n@return unsigned value\n@throws IndexOutOfBoundsException if byte array size is\n less than offset+size or size is greater than 8 (sizeof long)",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array containing bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into byte array for getting the long"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes (1 - 8) to use from array"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "unsigned value"
      },
      "throws": []
    },
    {
      "name": "getSignedValue",
      "comment": "Get the signed value from the given byte array using the specified \n integer size, returned as a long.\n \n Values with a size less than sizeof(long) will have their sign bit\n extended.",
      "javadoc": "Get the \u003cb\u003esigned\u003c/b\u003e value from the given byte array using the specified \n integer size, returned as a long.\n \u003cp\u003e\n Values with a size less than sizeof(long) will have their sign bit\n extended.\n@param b array containing bytes\n@param size number of bytes (1 - 8) to use from array at offset 0\n@return signed value from the beginning of the specified array\n@throws IndexOutOfBoundsException if byte array size is less than specified size",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array containing bytes"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes (1 - 8) to use from array at offset 0"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "signed value from the beginning of the specified array"
      },
      "throws": []
    },
    {
      "name": "getSignedValue",
      "comment": "Get the signed value from the given byte array using the specified \n integer size, returned as a long.\n \n Values with a size less than sizeof(long) will have their sign bit\n extended.",
      "javadoc": "Get the \u003cb\u003esigned\u003c/b\u003e value from the given byte array using the specified \n integer size, returned as a long.\n \u003cp\u003e\n Values with a size less than sizeof(long) will have their sign bit\n extended.\n@param b array containing bytes\n@param size number of bytes (1 - 8) to use from array\n@param offset offset into byte array for getting the long\n@return signed value\n@throws IndexOutOfBoundsException if byte array size is\n less than offset+size or size is greater than 8 (sizeof long)",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array containing bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into byte array for getting the long"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes (1 - 8) to use from array"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "signed value"
      },
      "throws": []
    },
    {
      "name": "getBigInteger",
      "comment": "Get the value from the given byte array using the specified size.",
      "javadoc": "Get the value from the given byte array using the specified size.\n@param b array containing bytes\n@param size number of bytes to use from array at offset 0\n@param signed boolean flag indicating the value is signed\n@return {@link BigInteger} with value\n@throws IndexOutOfBoundsException if byte array size is\n less than size",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array containing bytes"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes to use from array at offset 0"
        },
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag indicating the value is signed"
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": "BigInteger with value"
      },
      "throws": []
    },
    {
      "name": "getBigInteger",
      "comment": "Get the value from the given byte array using the specified size.",
      "javadoc": "Get the value from the given byte array using the specified size.\n@param b array containing bytes\n@param size number of bytes to use from array\n@param offset offset into byte array for getting the long\n@param signed boolean flag indicating the value is signed\n@return {@link BigInteger} with value\n@throws IndexOutOfBoundsException if byte array size is\n less than offset+size",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array containing bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into byte array for getting the long"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes to use from array"
        },
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag indicating the value is signed"
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": "BigInteger with value"
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Converts the short value to an array of bytes.",
      "javadoc": "Converts the short value to an array of bytes.\n@param value short value to be converted\n@return array of bytes",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "short",
          "type_short": "short",
          "comment": "short value to be converted"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "array of bytes"
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Converts the int value to an array of bytes.",
      "javadoc": "Converts the int value to an array of bytes.\n@param value int value to be converted\n@return array of bytes",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "int value to be converted"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "array of bytes"
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Converts the long value to an array of bytes.",
      "javadoc": "Converts the long value to an array of bytes.\n@param value long value to be converted\n@return array of bytes",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "long value to be converted"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "array of bytes"
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Converts the value to an array of bytes.",
      "javadoc": "Converts the value to an array of bytes.\n@param value value to be converted\n@param size value size in bytes\n@return array of bytes",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "value to be converted"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "value size in bytes"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "array of bytes"
      },
      "throws": []
    },
    {
      "name": "putShort",
      "comment": "Writes a short value into a byte array.",
      "javadoc": "Writes a short value into a byte array.\n@param b array to contain the bytes\n@param value the short value\n@throws IndexOutOfBoundsException if byte array is too small to hold the value",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array to contain the bytes"
        },
        {
          "name": "value",
          "type_long": "short",
          "type_short": "short",
          "comment": "the short value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putShort",
      "comment": "Writes a short value into the byte array at the given offset",
      "javadoc": "Writes a short value into the byte array at the given offset\n@param b array to contain the bytes\n@param offset the offset into the byte array to store the value\n@param value the short value\n@throws IndexOutOfBoundsException if offset is too large or byte array\n is too small to hold the value",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array to contain the bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset into the byte array to store the value"
        },
        {
          "name": "value",
          "type_long": "short",
          "type_short": "short",
          "comment": "the short value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putInt",
      "comment": "Writes a int value into a byte array.\n \n See #getBytes(int, byte[])",
      "javadoc": "Writes a int value into a byte array.\n \u003cp\u003e\n See {@link #getBytes(int, byte[])}\n@param b array to contain the bytes\n@param value the int value\n@throws IndexOutOfBoundsException if byte array is too small to hold the value",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array to contain the bytes"
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the int value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putInt",
      "comment": "Writes a int value into the byte array at the given offset.\n \n See #getBytes(int, byte[], int)",
      "javadoc": "Writes a int value into the byte array at the given offset.\n \u003cp\u003e\n See {@link #getBytes(int, byte[], int)}\n@param b array to contain the bytes\n@param offset the offset into the byte array to store the value\n@param value the int value\n@throws IndexOutOfBoundsException if offset is too large or byte array\n is too small to hold the value",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array to contain the bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset into the byte array to store the value"
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the int value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putLong",
      "comment": "Writes a long value into a byte array.\n \n See #getBytes(long, byte[])",
      "javadoc": "Writes a long value into a byte array.\n \u003cp\u003e\n See {@link #getBytes(long, byte[])}\n@param b array to contain the bytes\n@param value the long value\n@throws IndexOutOfBoundsException if byte array is too small to hold the value",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array to contain the bytes"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the long value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putLong",
      "comment": "Writes a long value into the byte array at the given offset\n \n See #getBytes(long, byte[], int)",
      "javadoc": "Writes a long value into the byte array at the given offset\n \u003cp\u003e\n See {@link #getBytes(long, byte[], int)}\n@param b array to contain the bytes\n@param offset the offset into the byte array to store the value\n@param value the long value\n@throws IndexOutOfBoundsException if offset is too large or byte array\n is too small to hold the value",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array to contain the bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset into the byte array to store the value"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the long value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putValue",
      "comment": "Converts the given value to bytes using the number of least significant bytes\n specified by size.\n ",
      "javadoc": "Converts the given value to bytes using the number of least significant bytes\n specified by size.\n \u003cp\u003e\n@param value value to convert to bytes\n@param size number of least significant bytes of value to be written to the byte array\n@param b byte array to store bytes\n@param offset offset into byte array to put the bytes\n@throws IndexOutOfBoundsException if (offset+size)\u0026gt;b.length",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "value to convert to bytes"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of least significant bytes of value to be written to the byte array"
        },
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array to store bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into byte array to put the bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putBigInteger",
      "comment": "Writes a value of specified size into the byte array at the given offset.\n \n See #getBytes(BigInteger, int, byte[], int)",
      "javadoc": "Writes a value of specified size into the byte array at the given offset.\n \u003cp\u003e\n See {@link #getBytes(BigInteger, int, byte[], int)}\n@param b array to contain the bytes at offset 0\n@param size number of bytes to be written\n@param value BigInteger value to convert\n@throws IndexOutOfBoundsException if byte array is less than specified size",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array to contain the bytes at offset 0"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes to be written"
        },
        {
          "name": "value",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "BigInteger value to convert"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putBigInteger",
      "comment": "Writes a value of specified size into the byte array at the given offset\n \n See #getBytes(BigInteger, int, byte[], int)",
      "javadoc": "Writes a value of specified size into the byte array at the given offset\n \u003cp\u003e\n See {@link #getBytes(BigInteger, int, byte[], int)}\n@param b array to contain the bytes\n@param offset the offset into the byte array to store the value\n@param size number of bytes to be written\n@param value BigInteger value to convert\n@throws IndexOutOfBoundsException if (offset+size)\u0026gt;b.length",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array to contain the bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset into the byte array to store the value"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes to be written"
        },
        {
          "name": "value",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "BigInteger value to convert"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Converts the given value to bytes.\n See #putShort(byte[], short)",
      "javadoc": "Converts the given value to bytes.\n See {@link #putShort(byte[], short)}\n@param value value to convert to bytes\n@param b byte array to store bytes\n@throws IndexOutOfBoundsException if b.length is not at least\n 2.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "short",
          "type_short": "short",
          "comment": "value to convert to bytes"
        },
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array to store bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Converts the given value to bytes.\n \n See #putShort(byte[], int, short)",
      "javadoc": "Converts the given value to bytes.\n \u003cp\u003e\n See {@link #putShort(byte[], int, short)}\n@param value value to convert to bytes\n@param b byte array to store bytes\n@param offset offset into byte array to put the bytes\n@throws IndexOutOfBoundsException if (offset+2)\u0026gt;b.length",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "short",
          "type_short": "short",
          "comment": "value to convert to bytes"
        },
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array to store bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into byte array to put the bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Converts the given value to bytes.\n \n See #putInt(byte[], int)",
      "javadoc": "Converts the given value to bytes.\n \u003cp\u003e\n See {@link #putInt(byte[], int)}\n@param value value to convert to bytes\n@param b byte array to store bytes\n@throws IndexOutOfBoundsException if b.length is not at least\n 4.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "value to convert to bytes"
        },
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array to store bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Converts the given value to bytes.\n \n See #putInt(byte[], int)",
      "javadoc": "Converts the given value to bytes.\n \u003cp\u003e\n See {@link #putInt(byte[], int)}\n@param value value to convert to bytes\n@param b byte array to store bytes\n@param offset offset into byte array to put the bytes\n@throws IndexOutOfBoundsException if (offset+4)\u0026gt;b.length",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "value to convert to bytes"
        },
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array to store bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into byte array to put the bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Converts the given value to bytes.\n \n See #putLong(byte[], long)",
      "javadoc": "Converts the given value to bytes.\n \u003cp\u003e\n See {@link #putLong(byte[], long)}\n@param value value to convert to bytes\n@param b byte array to store bytes\n@throws IndexOutOfBoundsException if b.length is not at least\n 8.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "value to convert to bytes"
        },
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array to store bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Converts the given value to bytes.\n \n See #putLong(byte[], long)",
      "javadoc": "Converts the given value to bytes.\n \u003cp\u003e\n See {@link #putLong(byte[], long)}\n@param value value to convert to bytes\n@param b byte array to store bytes\n@param offset offset into byte array to put the bytes\n@throws IndexOutOfBoundsException if (offset+8)\u0026gt;b.length",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "value to convert to bytes"
        },
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array to store bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into byte array to put the bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Converts the given value to bytes using the number of least significant bytes\n specified by size.\n \n See #putValue(long, int, byte[], int)",
      "javadoc": "Converts the given value to bytes using the number of least significant bytes\n specified by size.\n \u003cp\u003e\n See {@link #putValue(long, int, byte[], int)}\n@param value value to convert to bytes\n@param size number of least significant bytes of value to be written to the byte array\n@param b byte array to store bytes\n@param offset offset into byte array to put the bytes\n@throws IndexOutOfBoundsException if (offset+size)\u0026gt;b.length",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "value to convert to bytes"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of least significant bytes of value to be written to the byte array"
        },
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array to store bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into byte array to put the bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Converts the given value to bytes using the number of least significant bytes\n specified by size.\n \n See #putBigInteger(byte[], int, BigInteger)",
      "javadoc": "Converts the given value to bytes using the number of least significant bytes\n specified by size.\n \u003cp\u003e\n See {@link #putBigInteger(byte[], int, BigInteger)}\n@param value value to convert to bytes\n@param size number of least significant bytes of value to be written to the byte array\n@param b byte array to store bytes\n@param offset offset into byte array to put the bytes\n@throws IndexOutOfBoundsException if (offset+size)\u0026gt;b.length.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "value to convert to bytes"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of least significant bytes of value to be written to the byte array"
        },
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array to store bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into byte array to put the bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "swapBytes",
      "comment": "Swap the least-significant bytes (based upon size)",
      "javadoc": "Swap the least-significant bytes (based upon size)\n@param val value whose bytes are to be swapped\n@param size number of least significant bytes to be swapped\n@return value with bytes swapped (any high-order bytes beyond size will be 0)",
      "static": true,
      "params": [
        {
          "name": "val",
          "type_long": "long",
          "type_short": "long",
          "comment": "value whose bytes are to be swapped"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of least significant bytes to be swapped"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "value with bytes swapped (any high-order bytes beyond size will be 0)"
      },
      "throws": []
    }
  ]
}
