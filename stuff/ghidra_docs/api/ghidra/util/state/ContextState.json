{
  "name": "ContextState",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DEBUG",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "VALUE_MASK",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long[]",
      "type_short": "long[]",
      "constant_value": null
    },
    {
      "name": "SIGN_BIT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long[]",
      "type_short": "long[]",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "language",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Language",
      "type_short": "Language",
      "constant_value": null
    },
    {
      "name": "addrFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressFactory",
      "type_short": "AddressFactory",
      "constant_value": null
    },
    {
      "name": "pcodeEntry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.SequenceNumber",
      "type_short": "SequenceNumber",
      "constant_value": null
    },
    {
      "name": "sequenceRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.state.SequenceRange",
      "type_short": "SequenceRange",
      "constant_value": null
    },
    {
      "name": "flowFrom",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashSet\u003cghidra.program.model.pcode.SequenceNumber\u003e",
      "type_short": "HashSet",
      "constant_value": null
    },
    {
      "name": "previousState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.state.ContextState",
      "type_short": "ContextState",
      "constant_value": null
    },
    {
      "name": "memory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.mem.Memory",
      "type_short": "Memory",
      "constant_value": null
    },
    {
      "name": "memoryMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cghidra.program.model.address.Address,ghidra.program.model.pcode.Varnode\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "frameMaps",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cjava.lang.String,java.util.HashMap\u003cjava.lang.Long,ghidra.program.model.pcode.Varnode\u003e\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "uniqueMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cjava.lang.Long,ghidra.program.model.pcode.Varnode\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "cachedSpaceId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "cachedLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode",
      "type_short": "Varnode",
      "constant_value": null
    },
    {
      "name": "cachedValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode",
      "type_short": "Varnode",
      "constant_value": null
    },
    {
      "name": "locked",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "debugVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode",
      "type_short": "Varnode",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs an empty state.",
      "javadoc": "Constructs an empty state.\n@param entryPt the entry point for the context state\n@param program the program",
      "static": false,
      "params": [
        {
          "name": "entryPt",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the entry point for the context state"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs an empty state.",
      "javadoc": "Constructs an empty state.\n@param entryPt the entry point for the context state\n@param programCtx initial program context or null\n@param program the program",
      "static": false,
      "params": [
        {
          "name": "entryPt",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the entry point for the context state"
        },
        {
          "name": "programCtx",
          "type_long": "ghidra.program.model.listing.ProgramContext",
          "type_short": "ProgramContext",
          "comment": "initial program context or null"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Derive a new context state from an initial state",
      "javadoc": "Derive a new context state from an initial state\n@param pcodeEntry the pcode entry sequence number\n@param previousState previous context state flowing into the specified pcode location",
      "static": false,
      "params": [
        {
          "name": "pcodeEntry",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": "the pcode entry sequence number"
        },
        {
          "name": "previousState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": "previous context state flowing into the specified pcode location"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "Returns program associated with this context state",
      "javadoc": "Returns program associated with this context state",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPreviousContextState",
      "comment": "Returns previous ContextState which flowed into this one.",
      "javadoc": "Returns previous ContextState which flowed into this one.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.state.ContextState",
        "type_short": "ContextState",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isFlowFrom",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "seq",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addFlowFrom",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "seq",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFlowFroms",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.pcode.SequenceNumber\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setExitPoint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "end",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExitPoint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.SequenceNumber",
        "type_short": "SequenceNumber",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSequenceRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.state.SequenceRange",
        "type_short": "SequenceRange",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDebugVarnod",
      "comment": "Set a varnode to be debugged.  This will be passed to any states \n derived from this state.",
      "javadoc": "Set a varnode to be debugged.  This will be passed to any states \n derived from this state.\n@param varnode varnode to be debugged",
      "static": false,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "varnode to be debugged"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "branchState",
      "comment": "Branch the current state.  The current state should be associated with\n branch target, the returned state should be used for the fall-through flow.",
      "javadoc": "Branch the current state.  The current state should be associated with\n branch target, the returned state should be used for the fall-through flow.\n@return ",
      "static": false,
      "params": [
        {
          "name": "pcodeEntry",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.state.ContextState",
        "type_short": "ContextState",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copyEntryContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "entryAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "entryContext",
          "type_long": "ghidra.program.model.listing.ProgramContext",
          "type_short": "ProgramContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "storeRegisterValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "unsignedValue",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEntryPoint",
      "comment": "Returns the point at which the state was instantiated.",
      "javadoc": "Returns the point at which the state was instantiated.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.SequenceNumber",
        "type_short": "SequenceNumber",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearUniqueState",
      "comment": "When done processing a particular instruction, this method should be invoked to \n clear any unique Varnode state.",
      "javadoc": "When done processing a particular instruction, this method should be invoked to \n clear any unique Varnode state.\n@return previous unique state",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.HashMap\u003cjava.lang.Long,ghidra.program.model.pcode.Varnode\u003e",
        "type_short": "HashMap",
        "comment": "previous unique state"
      },
      "throws": []
    },
    {
      "name": "lock",
      "comment": "When no longer updating this state, this method should be invoked to\n cleanup resources no longer needed (e.g., uniqueState no longer \n maintained).",
      "javadoc": "When no longer updating this state, this method should be invoked to\n cleanup resources no longer needed (e.g., uniqueState no longer \n maintained).",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFrameMapName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "spaceName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "framePointer",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFrameMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "frameMapName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "forUpdate",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.HashMap\u003cjava.lang.Long,ghidra.program.model.pcode.Varnode\u003e",
        "type_short": "HashMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOperation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "opcode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "inputs",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": ""
        },
        {
          "name": "output",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.state.VarnodeOperation",
        "type_short": "VarnodeOperation",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVarnodeByte",
      "comment": "Get a new varnode which corresponds to the specified bytePos within the specified varnode.",
      "javadoc": "Get a new varnode which corresponds to the specified bytePos within the specified varnode.\n@param varnode\n@param bytePos\n@return ",
      "static": false,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "bytePos",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFrameNode",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "offsetValue",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.state.ContextState.FrameNode",
        "type_short": "FrameNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "store",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "spaceID",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "offsetValue",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "storedValue",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "store",
      "comment": "Store a value.  Unique varnodes not permitted once locked.",
      "javadoc": "Store a value.  Unique varnodes not permitted once locked.\n@param addressVarnode identifies storage (address, register or unique)\n@param storedValue constant or OperationVarnode",
      "static": false,
      "params": [
        {
          "name": "addressVarnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "identifies storage (address, register or unique)"
        },
        {
          "name": "storedValue",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "constant or OperationVarnode"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "Retrieve the value/operation stored within the specified space using an offset\n identified by a value/operation.",
      "javadoc": "Retrieve the value/operation stored within the specified space using an offset\n identified by a value/operation.\n@param spaceID\n@param offsetValue\n@param size\n@return stored value/operation or null or DUMMY_BYTE_VARNODE",
      "static": false,
      "params": [
        {
          "name": "spaceID",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "offsetValue",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "stored value/operation or null or DUMMY_BYTE_VARNODE"
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "Retrieve the value/operation stored within the specified space using an offset\n identified by a value/operation.",
      "javadoc": "Retrieve the value/operation stored within the specified space using an offset\n identified by a value/operation.\n@param spaceID\n@param offsetValue\n@param size\n@return stored value/operation or null or DUMMY_BYTE_VARNODE",
      "static": false,
      "params": [
        {
          "name": "spaceID",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "offsetValue",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "stored value/operation or null or DUMMY_BYTE_VARNODE"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "get",
      "comment": "Retrieve the value/operation stored in the specified addressable location (address or register varnode).\n If varnode is a constant, the input argument will be returned.\n Unique varnodes not permitted once locked.",
      "javadoc": "Retrieve the value/operation stored in the specified addressable location (address or register varnode).\n If varnode is a constant, the input argument will be returned.\n Unique varnodes not permitted once locked.\n@param varnode identifies constant or storage (constant, address, register or unique), if VarnodeOperation\n specified null will always be returned.\n@return stored value/operation",
      "static": false,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "identifies constant or storage (constant, address, register or unique), if VarnodeOperation\n specified null will always be returned."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "stored value/operation"
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "Retrieve the value/operation stored in the specified addressable location (address or register varnode).\n If varnode is a constant, the input argument will be returned.\n Unique varnodes not permitted once locked.",
      "javadoc": "Retrieve the value/operation stored in the specified addressable location (address or register varnode).\n If varnode is a constant, the input argument will be returned.\n Unique varnodes not permitted once locked.\n@param varnode identifies constant or storage (constant, address, register or unique), if VarnodeOperation\n specified null will always be returned.\n@return stored value/operation",
      "static": false,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "identifies constant or storage (constant, address, register or unique), if VarnodeOperation\n specified null will always be returned."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "stored value/operation"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "combineByteValues",
      "comment": "Combine byte values into a single varnode value.",
      "javadoc": "Combine byte values into a single varnode value.\n@param byteValues bytes stored with LSB in bytes[0] and MSB in bytes[bytes.length-1] with correct endianess.\n@return varnode or null",
      "static": false,
      "params": [
        {
          "name": "byteValues",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": "bytes stored with LSB in bytes[0] and MSB in bytes[bytes.length-1] with correct endianess."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "varnode or null"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "zeroExtendExpression",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "leftShiftExpression",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "byteShift",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "combineValues",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftValue",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "rightValue",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "normalizeExpression",
      "comment": "Normalizes varnode expression by removing use of MaskedVarnodeOperation if present and ensure that\n returned varnode has a size of targetSize.",
      "javadoc": "Normalizes varnode expression by removing use of MaskedVarnodeOperation if present and ensure that\n returned varnode has a size of targetSize.\n@param v\n@param targetSize\n@return ",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "targetSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getByte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "frameMapName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getByte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDifferingRegisters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasDifferingRegisters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
