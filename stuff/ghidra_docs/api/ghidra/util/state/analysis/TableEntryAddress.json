{
  "name": "TableEntryAddress",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.state.analysis.Switch",
  "fields": [
    {
      "name": "tableBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "tableOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.state.analysis.ComputedTableOffset",
      "type_short": "ComputedTableOffset",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tableBase",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "tableOffset",
          "type_long": "ghidra.util.state.analysis.ComputedTableOffset",
          "type_short": "ComputedTableOffset",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableBaseAddress",
      "comment": "Returns base address of table",
      "javadoc": "Returns base address of table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCaseAddress",
      "comment": "Get the address of the table entry which corresponds to the specified indexValue.",
      "javadoc": "Get the address of the table entry which corresponds to the specified indexValue.\n@param caseIndexValue index value for specific case\n@return table entry address",
      "static": false,
      "params": [
        {
          "name": "caseIndexValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "index value for specific case"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "table entry address"
      },
      "throws": []
    },
    {
      "name": "getTableEntrySize",
      "comment": "Returns table entry size in bytes",
      "javadoc": "Returns table entry size in bytes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIndexValue",
      "comment": "Returns Varnode or VarnodeOperation which corresponds to \n the index value which identifies the switch case.",
      "javadoc": "Returns Varnode or VarnodeOperation which corresponds to \n the index value which identifies the switch case.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableEntryAddress",
      "comment": "Qualify VarnodeOperation as INT_ADD(constant-table-address, computed-table-offset)\n and return TableEntryAddress if qualified or null if not.",
      "javadoc": "Qualify VarnodeOperation as INT_ADD(constant-table-address, computed-table-offset)\n and return TableEntryAddress if qualified or null if not.\n@param addrFactory\n@param v potential input value which corresponds to a switch table entry address\n@return TableEntryAddress object or null if v failed qualification",
      "static": true,
      "params": [
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        },
        {
          "name": "v",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "potential input value which corresponds to a switch table entry address"
        }
      ],
      "return": {
        "type_long": "ghidra.util.state.analysis.TableEntryAddress",
        "type_short": "TableEntryAddress",
        "comment": "TableEntryAddress object or null if v failed qualification"
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    }
  ]
}
