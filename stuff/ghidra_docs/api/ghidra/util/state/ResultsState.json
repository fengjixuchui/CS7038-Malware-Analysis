{
  "name": "ResultsState",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DEBUG",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "VALUE_MASK",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long[]",
      "type_short": "long[]",
      "constant_value": null
    },
    {
      "name": "SIGN_BIT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long[]",
      "type_short": "long[]",
      "constant_value": null
    },
    {
      "name": "emptyContextStateIterator",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Iterator\u003cghidra.util.state.ContextState\u003e",
      "type_short": "Iterator",
      "constant_value": null
    },
    {
      "name": "busy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "analyzer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.state.FunctionAnalyzer",
      "type_short": "FunctionAnalyzer",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "listing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Listing",
      "type_short": "Listing",
      "constant_value": null
    },
    {
      "name": "addrFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressFactory",
      "type_short": "AddressFactory",
      "constant_value": null
    },
    {
      "name": "maintainInstructionResults",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "entryPt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.SequenceNumber",
      "type_short": "SequenceNumber",
      "constant_value": null
    },
    {
      "name": "flowList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.LinkedList\u003cghidra.program.model.pcode.SequenceNumber\u003e",
      "type_short": "LinkedList",
      "constant_value": null
    },
    {
      "name": "stackVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode",
      "type_short": "Varnode",
      "constant_value": null
    },
    {
      "name": "entryState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.state.ContextState",
      "type_short": "ContextState",
      "constant_value": null
    },
    {
      "name": "currentFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Function",
      "type_short": "Function",
      "constant_value": null
    },
    {
      "name": "currentPrototype",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.PrototypeModel",
      "type_short": "PrototypeModel",
      "constant_value": null
    },
    {
      "name": "paramBaseStackOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Long",
      "type_short": "Long",
      "constant_value": null
    },
    {
      "name": "stackGrowsNegative",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "examinedSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "todoList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.LinkedList\u003cghidra.util.state.ResultsState.BranchDestination\u003e",
      "type_short": "LinkedList",
      "constant_value": null
    },
    {
      "name": "endStateMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cghidra.program.model.pcode.SequenceNumber,java.util.List\u003cghidra.util.state.ContextState\u003e\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "externalThunkMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cjava.lang.Long,ghidra.program.model.address.Address\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "inputRegs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.program.model.lang.Register\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "registersModified",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.program.model.lang.Register\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "registersPreserved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.program.model.lang.Register\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "framePointerCandidates",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cghidra.program.model.lang.Register,ghidra.util.state.ResultsState.FramePointerCandidate\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "framePointerCandidatesDismissed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashSet\u003cghidra.program.model.lang.Register\u003e",
      "type_short": "HashSet",
      "constant_value": null
    },
    {
      "name": "savedStates",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.LinkedList\u003cghidra.util.state.ResultsState.ContextStateSet\u003e",
      "type_short": "LinkedList",
      "constant_value": null
    },
    {
      "name": "CONTEXT_STATE_SET_SEQUENCE_COMPARATOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Comparator\u003cjava.lang.Object\u003e",
      "type_short": "Comparator",
      "constant_value": null
    },
    {
      "name": "nextPrivateUnique",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor from a function entry point.  Program context is used to establish the entry context state.\n Analysis is performed during construction.",
      "javadoc": "Constructor from a function entry point.  Program context is used to establish the entry context state.\n Analysis is performed during construction.\n@param entryPt function entry point\n@param analyzer function analysis call-back handler\n@param program program containing function\n@param maintainInstructionResults true to maintain the instruction results\n@param monitor task monitor\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "entryPt",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "function entry point"
        },
        {
          "name": "analyzer",
          "type_long": "ghidra.util.state.FunctionAnalyzer",
          "type_short": "FunctionAnalyzer",
          "comment": "function analysis call-back handler"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program containing function"
        },
        {
          "name": "maintainInstructionResults",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to maintain the instruction results"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for replaying over a specified set of context states indicated via a flowList.\n Analysis is performed during construction.",
      "javadoc": "Constructor for replaying over a specified set of context states indicated via a flowList.\n Analysis is performed during construction.\n@param flowList ordered list of context state entry points\n@param analyzer function analysis call-back handler\n@param entryState context state which feeds into the first point within the flowList\n@param maintainInstructionResults\n@param monitor task monitor\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "flowList",
          "type_long": "java.util.LinkedList\u003cghidra.program.model.pcode.SequenceNumber\u003e",
          "type_short": "LinkedList",
          "comment": "ordered list of context state entry points"
        },
        {
          "name": "analyzer",
          "type_long": "ghidra.util.state.FunctionAnalyzer",
          "type_short": "FunctionAnalyzer",
          "comment": "function analysis call-back handler"
        },
        {
          "name": "entryState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": "context state which feeds into the first point within the flowList"
        },
        {
          "name": "maintainInstructionResults",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for entry point and a specified entryState",
      "javadoc": "Constructor for entry point and a specified entryState\n@param entryAddr function entry point\n@param analyzer function analysis call-back handler\n@param entryState context state which feeds into the entry point\n@param entryState initial ResultState\n@param maintainInstructionResults",
      "static": false,
      "params": [
        {
          "name": "entryPt",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        },
        {
          "name": "analyzer",
          "type_long": "ghidra.util.state.FunctionAnalyzer",
          "type_short": "FunctionAnalyzer",
          "comment": "function analysis call-back handler"
        },
        {
          "name": "entryState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": "context state which feeds into the entry point"
        },
        {
          "name": "maintainInstructionResults",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEntryPoint",
      "comment": "Returns entry point associated with this results state.",
      "javadoc": "Returns entry point associated with this results state.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.SequenceNumber",
        "type_short": "SequenceNumber",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExaminedSet",
      "comment": "Returns set of addresses analyzed with function.\n (In-line functions not included)",
      "javadoc": "Returns set of addresses analyzed with function.\n (In-line functions not included)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assume",
      "comment": "Set an assumed register value immediately following construction and prior to flow.",
      "javadoc": "Set an assumed register value immediately following construction and prior to flow.\n@param register (context register not permitted)\n@param value",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "(context register not permitted)"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "flowFrom",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        },
        {
          "name": "state",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addEndState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "returnPcodeSeq",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        },
        {
          "name": "state",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContextStates",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "seq",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.util.state.ContextState\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContextStateSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "seq",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.state.ResultsState.ContextStateSet",
        "type_short": "ContextStateSet",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createContextStateSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "seqRange",
          "type_long": "ghidra.util.state.SequenceRange",
          "type_short": "SequenceRange",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.state.ResultsState.ContextStateSet",
        "type_short": "ContextStateSet",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "performInlineCall",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "inlineCallAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "currentState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.state.ContextState",
        "type_short": "ContextState",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processAndEmulatePCode",
      "comment": "Process an instruction pcode operation after performing simplification on the inputs and operation",
      "javadoc": "Process an instruction pcode operation after performing simplification on the inputs and operation\n@param pcodeOp\n@param currentState\n@param monitor task monitor\n@return true if state can continue to be propagated, otherwise a new state is\n required due to the processing of a branch operation.\n@throws CancelledException\n@throws InlineCallException",
      "static": false,
      "params": [
        {
          "name": "pcodeOp",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "currentState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if state can continue to be propagated, otherwise a new state is\n required due to the processing of a branch operation."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.state.ResultsState.InlineCallException",
          "type_short": "InlineCallException",
          "comment": ""
        }
      ]
    },
    {
      "name": "simplify",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "simplifyLoad",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pcodeOp",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "values",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": ""
        },
        {
          "name": "currentState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getNewUnique",
      "comment": "Generate unused unique varnode",
      "javadoc": "Generate unused unique varnode",
      "static": true,
      "params": [
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "emulateOperation",
      "comment": "Process an instruction pcode operation represented by a VarnodeOperation.",
      "javadoc": "Process an instruction pcode operation represented by a VarnodeOperation.\n@param op\n@param currentState\n@param monitor task monitor\n@return true if state can continue to be propagated, otherwise a new state is\n required due to the processing of a branch operation.\n@throws CancelledException\n@throws InlineCallException",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.util.state.VarnodeOperation",
          "type_short": "VarnodeOperation",
          "comment": ""
        },
        {
          "name": "currentState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if state can continue to be propagated, otherwise a new state is\n required due to the processing of a branch operation."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.state.ResultsState.InlineCallException",
          "type_short": "InlineCallException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getStackOffset",
      "comment": "Check varnode for possible stack read/write and provide\n stack address varnode replacement.",
      "javadoc": "Check varnode for possible stack read/write and provide\n stack address varnode replacement.\n@param pcodeOp operation which references stack location as input\n@param offsetValue offset value\n@return a stack offset if appropriate or null.",
      "static": false,
      "params": [
        {
          "name": "loadStoreOp",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "offsetValue",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "offset value"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "a stack offset if appropriate or null."
      },
      "throws": []
    },
    {
      "name": "simplify",
      "comment": "Generate simplified operation",
      "javadoc": "Generate simplified operation\n@param pcodeOp pcode operation\n@param values values associated with pcodeOp inputs\n@return operation output result or simplification of an operation.",
      "static": true,
      "params": [
        {
          "name": "pcodeOp",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": "pcode operation"
        },
        {
          "name": "values",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": "values associated with pcodeOp inputs"
        },
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "operation output result or simplification of an operation."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "eillimnateCarryOp",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "pcodeOp",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "values",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": ""
        },
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "combineLogicOrOperation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.util.state.VarnodeOperation",
          "type_short": "VarnodeOperation",
          "comment": ""
        },
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "combineDoubleShiftOperation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "outerPcodeOp",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "outerInputValues",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": ""
        },
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "flipInputs",
      "comment": "Flip values and generate new VarnodeOperation which contains new pcodeOp",
      "javadoc": "Flip values and generate new VarnodeOperation which contains new pcodeOp\n@param pcodeOp\n@param values\n@return new VarnodeOperation which contains new pcodeOp",
      "static": true,
      "params": [
        {
          "name": "pcodeOp",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "values",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.state.VarnodeOperation",
        "type_short": "VarnodeOperation",
        "comment": "new VarnodeOperation which contains new pcodeOp"
      },
      "throws": []
    },
    {
      "name": "isBooleanOutputOperation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.util.state.VarnodeOperation",
          "type_short": "VarnodeOperation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "simplifyWithIntAndMask",
      "comment": "Simplify specified varnode base upon specified andMask.",
      "javadoc": "Simplify specified varnode base upon specified andMask.\n@param seq\n@param varnode\n@param andMask\n@return simplified varnode or null if simplification failed",
      "static": true,
      "params": [
        {
          "name": "seq",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        },
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "andMask",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "simplified varnode or null if simplification failed"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "handleIndirectFlow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pcodeOp",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "destValue",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "currentState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "handleDirectFlow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pcodeOp",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "currentState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "disassemble",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "checkAssignment",
      "comment": "Check value assignments for items of interest:\n \n Frame pointer identification\n Tracking of modified registers\n ",
      "javadoc": "Check value assignments for items of interest:\n \u003cul\u003e\n \u003cli\u003eFrame pointer identification\u003c/li\u003e\n \u003cli\u003eTracking of modified registers\u003c/li\u003e\n \u003c/ul\u003e\n@param output output varnode\n@param value assigned value\n@param op pcode operation\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "output",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "output varnode"
        },
        {
          "name": "value",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "assigned value"
        },
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": "pcode operation"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "checkStackOffsetAssignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFramePointerCandidates",
      "comment": "Returns collection of frame pointer candidates.",
      "javadoc": "Returns collection of frame pointer candidates.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.util.state.ResultsState.FramePointerCandidate\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPreservedRegisters",
      "comment": "Returns the set of registers which were modified yet preserved.",
      "javadoc": "Returns the set of registers which were modified yet preserved.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getModifiedRegisters",
      "comment": "Returns the set of registers which were modified",
      "javadoc": "Returns the set of registers which were modified",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "reconcileModifiedRegisters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPreserved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findOpIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "loc",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "matchOpPcodeObjectAssignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "operandPcode",
          "type_long": "ghidra.program.model.pcode.PcodeOp[]",
          "type_short": "ghidra.program.model.pcode.PcodeOp[]",
          "comment": ""
        },
        {
          "name": "loc",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "matchOpObject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "loc",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isStackParameterOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkInput",
      "comment": "Check for register corresponding to the specified varnode and add to inputRegs.",
      "javadoc": "Check for register corresponding to the specified varnode and add to inputRegs.\n@param addressVarnode register or address varnode which has not been written",
      "static": false,
      "params": [
        {
          "name": "addressVarnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "register or address varnode which has not been written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "regList",
          "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "containsRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "regList",
          "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInputRegisters",
      "comment": "Returns list of registers which are read before written.",
      "javadoc": "Returns list of registers which are read before written.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleIndirectCall",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pcodeOp",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "indirectPtr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "destValue",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "currentState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.state.ResultsState.InlineCallException",
          "type_short": "InlineCallException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "handleCall",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pcodeOp",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "indirectPtr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "destAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "currentState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.state.ResultsState.InlineCallException",
          "type_short": "InlineCallException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "applyFunctionAffects",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "calledFrom",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        },
        {
          "name": "destAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "currentState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInvalidatedVarnode",
      "comment": "Generate an INDIRECT pcodeop operation representing an unknown state\n for an affectedVarnode resulting from a function call at the specified seq.",
      "javadoc": "Generate an INDIRECT pcodeop operation representing an unknown state\n for an affectedVarnode resulting from a function call at the specified seq.\n@param seq CALL or CALLIND pcodeop sequence\n@param affectVarnode affected varnode (e.g., return register)\n@return indirect varnode operation",
      "static": false,
      "params": [
        {
          "name": "seq",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": "CALL or CALLIND pcodeop sequence"
        },
        {
          "name": "affectVarnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "affected varnode (e.g., return register)"
        }
      ],
      "return": {
        "type_long": "ghidra.util.state.VarnodeOperation",
        "type_short": "VarnodeOperation",
        "comment": "indirect varnode operation"
      },
      "throws": []
    },
    {
      "name": "applyFunctionPurge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "calledFrom",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        },
        {
          "name": "destAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "currentState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFunctionPurge",
      "comment": "Get/Compute the Purge size from the stack for the function",
      "javadoc": "Get/Compute the Purge size from the stack for the function\n@param func function or null\n@return size in bytes that is removed from the stack after the function\n         is called.",
      "static": true,
      "params": [
        {
          "name": "functionProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "function or null"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "size in bytes that is removed from the stack after the function\n         is called."
      },
      "throws": []
    },
    {
      "name": "getDefaultStackDepthChange",
      "comment": "Get the default/assumed stack depth change for this language",
      "javadoc": "Get the default/assumed stack depth change for this language\n@param depth stack depth to return if the default is unknown for the language\n@return ",
      "static": true,
      "params": [
        {
          "name": "depthProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "depth",
          "type_long": "int",
          "type_short": "int",
          "comment": "stack depth to return if the default is unknown for the language"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStackPointerVarnode",
      "comment": "",
      "javadoc": "@return Varnode that represents the stack pointer register",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "Varnode that represents the stack pointer register"
      },
      "throws": []
    },
    {
      "name": "pushDownIntAddOffset",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.util.state.VarnodeOperation",
          "type_short": "VarnodeOperation",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReturnAddresses",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.pcode.SequenceNumber\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReturnValues",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.pcode.Varnode\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUnsignedOffset",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "v",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSignedOffset",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "v",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    }
  ]
}
