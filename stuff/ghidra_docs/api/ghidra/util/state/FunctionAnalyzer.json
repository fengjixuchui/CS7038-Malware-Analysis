{
  "name": "FunctionAnalyzer",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "stackReference",
      "comment": "Callback indicating that an absolute stack reference was encountered.  A non-load/store\n operation will have a -1 for both storageSpaceId and size.",
      "javadoc": "Callback indicating that an absolute stack reference was encountered.  A non-load/store\n operation will have a -1 for both storageSpaceId and size.\n@param op pcode operation\n@param instrOpIndex opIndex associated with reference or -1 if it could not be determined\n@param stackOffset stack offset\n@param size access size or -1 if not applicable\n@param storageSpaceID storage space ID or -1 if not applicable\n@param refType read/write/data reference type\n@param monitor task monitor\n@throws CancelledException if callback canceled by monitor",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": "pcode operation"
        },
        {
          "name": "instrOpIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "opIndex associated with reference or -1 if it could not be determined"
        },
        {
          "name": "stackOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "stack offset"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "access size or -1 if not applicable"
        },
        {
          "name": "storageSpaceID",
          "type_long": "int",
          "type_short": "int",
          "comment": "storage space ID or -1 if not applicable"
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "read/write/data reference type"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if callback canceled by monitor"
        }
      ]
    },
    {
      "name": "stackReference",
      "comment": "Callback indicating that a computed stack reference was encountered.  A non-load/store\n operation will have a -1 for both storageSpaceId and size.",
      "javadoc": "Callback indicating that a computed stack reference was encountered.  A non-load/store\n operation will have a -1 for both storageSpaceId and size.\n@param op pcode operation\n@param instrOpIndex opIndex associated with reference or -1 if it could not be determined\n@param computedStackOffset stack offset computation (i.e., VarnodeOperation w/ stack pointer)\n@param size access size or -1 if not applicable\n@param storageSpaceID storage space ID or -1 if not applicable\n@param refType read/write/data reference type\n@param monitor task monitor\n@throws CancelledException if callback canceled by monitor",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": "pcode operation"
        },
        {
          "name": "instrOpIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "opIndex associated with reference or -1 if it could not be determined"
        },
        {
          "name": "computedStackOffset",
          "type_long": "ghidra.util.state.VarnodeOperation",
          "type_short": "VarnodeOperation",
          "comment": "stack offset computation (i.e., VarnodeOperation w/ stack pointer)"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "access size or -1 if not applicable"
        },
        {
          "name": "storageSpaceID",
          "type_long": "int",
          "type_short": "int",
          "comment": "storage space ID or -1 if not applicable"
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "read/write/data reference type"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if callback canceled by monitor"
        }
      ]
    },
    {
      "name": "dataReference",
      "comment": "Callback indicating that an absolute memory reference was encountered",
      "javadoc": "Callback indicating that an absolute memory reference was encountered\n@param op pcode operation\n@param instrOpIndex opIndex associated with reference or -1 if it could not be determined\n@param storageVarnode absolute storage Varnode\n@param refType read/write/data reference type\n@param monitor task monitor\n@throws CancelledException if callback canceled by monitor",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": "pcode operation"
        },
        {
          "name": "instrOpIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "opIndex associated with reference or -1 if it could not be determined"
        },
        {
          "name": "storageVarnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "absolute storage Varnode"
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "read/write/data reference type"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if callback canceled by monitor"
        }
      ]
    },
    {
      "name": "indirectDataReference",
      "comment": "Callback indicating that an indirect/computed memory reference was encountered using an indirect/computed offset",
      "javadoc": "Callback indicating that an indirect/computed memory reference was encountered using an indirect/computed offset\n@param op pcode operation\n@param instrOpIndex opIndex associated with reference or -1 if it could not be determined\n@param offsetVarnode indirect/computed offset\n@param size access size or -1 if not applicable\n@param storageSpaceID storage space ID\n@param refType read/write/data reference type\n@param monitor task monitor\n@throws CancelledException if callback canceled by monitor",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": "pcode operation"
        },
        {
          "name": "instrOpIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "opIndex associated with reference or -1 if it could not be determined"
        },
        {
          "name": "offsetVarnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "indirect/computed offset"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "access size or -1 if not applicable"
        },
        {
          "name": "storageSpaceID",
          "type_long": "int",
          "type_short": "int",
          "comment": "storage space ID"
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "read/write/data reference type"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if callback canceled by monitor"
        }
      ]
    },
    {
      "name": "resolvedFlow",
      "comment": "Callback indicating that a call/branch destination was identified.  \n Analyzer should create reference if appropriate\n Keep in mind that there could be other unidentified destinations.",
      "javadoc": "Callback indicating that a call/branch destination was identified.  \n Analyzer should create reference if appropriate\n Keep in mind that there could be other unidentified destinations.\n@param op branch or call flow operation\n@param instrOpIndex opIndex associated with reference or -1 if it could not be determined\n@param destAddr destination address\n@param results contains previous states leading upto the currentState\n@param currentState current state at the branch/call\n@param monitor task monitor\n@return true if destination should be disassembled if not already\n@throws CancelledException if callback canceled by monitor",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": "branch or call flow operation"
        },
        {
          "name": "instrOpIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "opIndex associated with reference or -1 if it could not be determined"
        },
        {
          "name": "destAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "destination address"
        },
        {
          "name": "currentState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": "current state at the branch/call"
        },
        {
          "name": "results",
          "type_long": "ghidra.util.state.ResultsState",
          "type_short": "ResultsState",
          "comment": "contains previous states leading upto the currentState"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if destination should be disassembled if not already"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if callback canceled by monitor"
        }
      ]
    },
    {
      "name": "unresolvedIndirectFlow",
      "comment": "Callback indicating that a computed call/branch destination was not resolved.",
      "javadoc": "Callback indicating that a computed call/branch destination was not resolved.\n@param op indirect branch or call flow operation\n@param instrOpIndex opIndex associated with reference or -1 if it could not be determined\n@param destination destination identified as a Varnode (may be an expression represented by\n a {@link VarnodeOperation}\n@param results contains previous states leading upto the currentState\n@param currentState current state at the branch/call\n@param monitor task monitor\n@return list of resolved destinations which should be used or null.  List of destination\n addresses will trigger disassembly where necessary.\n@throws CancelledException if callback cancelled by monitor",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": "indirect branch or call flow operation"
        },
        {
          "name": "instrOpIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "opIndex associated with reference or -1 if it could not be determined"
        },
        {
          "name": "destination",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "destination identified as a Varnode (may be an expression represented by\n a VarnodeOperation"
        },
        {
          "name": "currentState",
          "type_long": "ghidra.util.state.ContextState",
          "type_short": "ContextState",
          "comment": "current state at the branch/call"
        },
        {
          "name": "results",
          "type_long": "ghidra.util.state.ResultsState",
          "type_short": "ResultsState",
          "comment": "contains previous states leading upto the currentState"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
        "type_short": "List",
        "comment": "list of resolved destinations which should be used or null.  List of destination\n addresses will trigger disassembly where necessary."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if callback cancelled by monitor"
        }
      ]
    }
  ]
}
