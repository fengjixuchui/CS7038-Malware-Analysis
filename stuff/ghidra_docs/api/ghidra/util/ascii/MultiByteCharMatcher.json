{
  "name": "MultiByteCharMatcher",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.util.ascii.ByteStreamCharMatcher"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "charMatcher",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.ascii.MinLengthCharSequenceMatcher",
      "type_short": "MinLengthCharSequenceMatcher",
      "constant_value": null
    },
    {
      "name": "index",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "bytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "converter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.DataConverter",
      "type_short": "DataConverter",
      "constant_value": null
    },
    {
      "name": "bytesPerChar",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "charWidth",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.ascii.CharWidth",
      "type_short": "CharWidth",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "minLength",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "charSet",
          "type_long": "ghidra.util.ascii.CharSetRecognizer",
          "type_short": "CharSetRecognizer",
          "comment": ""
        },
        {
          "name": "charWidth",
          "type_long": "ghidra.util.ascii.CharWidth",
          "type_short": "CharWidth",
          "comment": ""
        },
        {
          "name": "endian",
          "type_long": "ghidra.program.model.lang.Endian",
          "type_short": "Endian",
          "comment": ""
        },
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "computeCharSequenceAlignemt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bytesInChar",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSequence",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.ascii.Sequence",
        "type_short": "Sequence",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "endSequence",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "reset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
