{
  "name": "StringUtilities",
  "comment": "Class with static methods that deal with string manipulation.",
  "javadoc": "Class with static methods that deal with string manipulation.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "controlToEscapeStringMap",
      "comment": "Create the bi-directional mapping between control characters and escape sequences.",
      "javadoc": "Create the bi-directional mapping between control characters and escape sequences.",
      "static": true,
      "type_long": "java.util.Map\u003cjava.lang.Character,java.lang.String\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "escapeStringToControlMap",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Character\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "ELLIPSES",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"...\""
    },
    {
      "name": "DOUBLE_QUOTED_STRING_PATTERN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.regex.Pattern",
      "type_short": "Pattern",
      "constant_value": null
    },
    {
      "name": "LINE_SEPARATOR",
      "comment": "The platform specific string that is the line separator.",
      "javadoc": "The platform specific string that is the line separator.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "UNICODE_REPLACEMENT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "65533"
    },
    {
      "name": "UNICODE_BE_BYTE_ORDER_MARK",
      "comment": "Unicode Byte Order Marks (BOM) characters are special characters in the Unicode character\n space that signal endian-ness of the text.\n \n The value for the BigEndian version (0xFEFF) works for both 16 and 32 bit character values.\n \n There are separate values for Little Endian Byte Order Marks for 16 and 32 bit characters\n because the 32 bit value is shifted left by 16 bits.",
      "javadoc": "Unicode Byte Order Marks (BOM) characters are special characters in the Unicode character\n space that signal endian-ness of the text.\n \u003cp\u003e\n The value for the BigEndian version (0xFEFF) works for both 16 and 32 bit character values.\n \u003cp\u003e\n There are separate values for Little Endian Byte Order Marks for 16 and 32 bit characters\n because the 32 bit value is shifted left by 16 bits.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "65279"
    },
    {
      "name": "UNICODE_LE16_BYTE_ORDER_MARK",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "65534"
    },
    {
      "name": "UNICODE_LE32_BYTE_ORDER_MARK",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-131072"
    },
    {
      "name": "DEFAULT_TAB_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isControlCharacterOrBackslash",
      "comment": "Returns true if the given character is a special character. For example a \u0027\\n\u0027 or \u0027\\\\\u0027. A\n value of 0 is not considered special for this purpose as it is handled separately because it\n has more varied use cases.",
      "javadoc": "Returns true if the given character is a special character. For example a \u0027\\n\u0027 or \u0027\\\\\u0027. A\n value of 0 is not considered special for this purpose as it is handled separately because it\n has more varied use cases.\n@param c the character\n@return true if the given character is a special character",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": "the character"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given character is a special character"
      },
      "throws": []
    },
    {
      "name": "isControlCharacterOrBackslash",
      "comment": "Returns true if the given codePoint (ie. full unicode 32bit character) is a special\n character. For example a \u0027\\n\u0027 or \u0027\\\\\u0027. A value of 0 is not considered special for this\n purpose as it is handled separately because it has more varied use cases.",
      "javadoc": "Returns true if the given codePoint (ie. full unicode 32bit character) is a special\n character. For example a \u0027\\n\u0027 or \u0027\\\\\u0027. A value of 0 is not considered special for this\n purpose as it is handled separately because it has more varied use cases.\n@param codePoint the codePoint (ie. character), see {@link String#codePointAt(int)}\n@return true if the given character is a special character",
      "static": true,
      "params": [
        {
          "name": "codePoint",
          "type_long": "int",
          "type_short": "int",
          "comment": "the codePoint (ie. character), see String#codePointAt(int)"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given character is a special character"
      },
      "throws": []
    },
    {
      "name": "isDoubleQuoted",
      "comment": "Determines if a string is enclosed in double quotes (ASCII 34 (0x22))",
      "javadoc": "Determines if a string is enclosed in double quotes (ASCII 34 (0x22))\n@param str String to test for double-quote enclosure\n@return True if the first and last characters are the double-quote character, false otherwise",
      "static": true,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String to test for double-quote enclosure"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if the first and last characters are the double-quote character, false otherwise"
      },
      "throws": []
    },
    {
      "name": "extractFromDoubleQuotes",
      "comment": "If the given string is enclosed in double quotes, extract the inner text. Otherwise, return\n the given string unmodified.",
      "javadoc": "If the given string is enclosed in double quotes, extract the inner text. Otherwise, return\n the given string unmodified.\n@param str String to match and extract from\n@return The inner text of a doubly-quoted string, or the original string if not\n         double-quoted.",
      "static": true,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String to match and extract from"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The inner text of a doubly-quoted string, or the original string if not\n         double-quoted."
      },
      "throws": []
    },
    {
      "name": "isDisplayable",
      "comment": "Returns true if the character is in displayable character range",
      "javadoc": "Returns true if the character is in displayable character range\n@param c the character\n@return true if the character is in displayable character range",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "int",
          "type_short": "int",
          "comment": "the character"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the character is in displayable character range"
      },
      "throws": []
    },
    {
      "name": "isAllBlank",
      "comment": "Returns true if all the given sequences are either null or only whitespace",
      "javadoc": "Returns true if all the given sequences are either null or only whitespace\n@param sequences the sequences to check\n@return true if all the given sequences are either null or only whitespace.\n@see StringUtils#isNoneBlank(CharSequence...)\n@see StringUtils#isNoneEmpty(CharSequence...)\n@see StringUtils#isAnyBlank(CharSequence...)\n@see StringUtils#isAnyEmpty(CharSequence...)",
      "static": true,
      "params": [
        {
          "name": "sequences",
          "type_long": "java.lang.CharSequence[]",
          "type_short": "java.lang.CharSequence[]",
          "comment": "the sequences to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if all the given sequences are either null or only whitespace."
      },
      "throws": []
    },
    {
      "name": "characterToString",
      "comment": "Converts the character into a string. If the character is special, it will actually render\n the character. For example, given \u0027\\n\u0027 the output would be \"\\\\n\".",
      "javadoc": "Converts the character into a string. If the character is special, it will actually render\n the character. For example, given \u0027\\n\u0027 the output would be \"\\\\n\".\n@param c the character to convert into a string\n@return the converted character",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": "the character to convert into a string"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the converted character"
      },
      "throws": []
    },
    {
      "name": "countOccurrences",
      "comment": "Returns a count of how many times the \u0027occur\u0027 char appears in the strings.",
      "javadoc": "Returns a count of how many times the \u0027occur\u0027 char appears in the strings.\n@param string the string to look inside\n@param occur the character to look for/\n@return a count of how many times the \u0027occur\u0027 char appears in the strings",
      "static": true,
      "params": [
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to look inside"
        },
        {
          "name": "occur",
          "type_long": "char",
          "type_short": "char",
          "comment": "the character to look for/"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "a count of how many times the \u0027occur\u0027 char appears in the strings"
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "s1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "s2",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "caseSensitive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "endsWithWhiteSpace",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toQuotedString",
      "comment": "Generate a quoted string from US-ASCII character bytes assuming 1-byte chars.\n \n Special characters and non-printable characters will be escaped using C character escape\n conventions (e.g., \\t, \\n, \\\\uHHHH, etc.). If a character size other than 1-byte is required\n the alternate form of this method should be used.\n \n The result string will be single quoted (ie. \"\u0027\") if the input byte array is 1 byte long,\n otherwise the result will be double-quoted (\u0027\"\u0027).",
      "javadoc": "Generate a quoted string from US-ASCII character bytes assuming 1-byte chars.\n \u003cp\u003e\n Special characters and non-printable characters will be escaped using C character escape\n conventions (e.g., \\t, \\n, \\\\uHHHH, etc.). If a character size other than 1-byte is required\n the alternate form of this method should be used.\n \u003cp\u003e\n The result string will be single quoted (ie. \"\u0027\") if the input byte array is 1 byte long,\n otherwise the result will be double-quoted (\u0027\"\u0027).\n@param bytes character string bytes\n@return escaped string for display use",
      "static": true,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "character string bytes"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "escaped string for display use"
      },
      "throws": []
    },
    {
      "name": "toQuotedString",
      "comment": "Generate a quoted string from US-ASCII characters, where each character is charSize bytes.\n \n Special characters and non-printable characters will be escaped using C character escape\n conventions (e.g., \\t, \\n, \\\\uHHHH, etc.).\n \n The result string will be single quoted (ie. \"\u0027\") if the input byte array is 1 character long\n (ie. charSize), otherwise the result will be double-quoted (\u0027\"\u0027).",
      "javadoc": "Generate a quoted string from US-ASCII characters, where each character is charSize bytes.\n \u003cp\u003e\n Special characters and non-printable characters will be escaped using C character escape\n conventions (e.g., \\t, \\n, \\\\uHHHH, etc.).\n \u003cp\u003e\n The result string will be single quoted (ie. \"\u0027\") if the input byte array is 1 character long\n (ie. charSize), otherwise the result will be double-quoted (\u0027\"\u0027).\n@param bytes array of bytes\n@param charSize number of bytes per character (1, 2, 4).\n@return escaped string for display use",
      "static": true,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array of bytes"
        },
        {
          "name": "charSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes per character (1, 2, 4)."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "escaped string for display use"
      },
      "throws": []
    },
    {
      "name": "appendCharConvertedToEscapeSequence",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "charSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "builder",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "startsWithIgnoreCase",
      "comment": "Returns true if the given string starts with prefix ignoring case.\n \n Note: This method is equivalent to calling:\n \n \n string.regionMatches(true, 0, prefix, 0, prefix.length());\n ",
      "javadoc": "Returns true if the given string starts with \u003ccode\u003eprefix\u003c/code\u003e ignoring case.\n \u003cp\u003e\n Note: This method is equivalent to calling:\n \n \u003cpre\u003e\n string.regionMatches(true, 0, prefix, 0, prefix.length());\n \u003c/pre\u003e\n@param string the string which may contain the prefix\n@param prefix the prefix to test against\n@return true if the given string starts with \u003ccode\u003eprefix\u003c/code\u003e ignoring case.",
      "static": true,
      "params": [
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string which may contain the prefix"
        },
        {
          "name": "prefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the prefix to test against"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given string starts with prefix ignoring case."
      },
      "throws": []
    },
    {
      "name": "endsWithIgnoreCase",
      "comment": "Returns true if the given string ends with postfix, ignoring case.\n \n Note: This method is equivalent to calling:\n \n \n int startIndex \u003d string.length() - postfix.length();\n string.regionMatches(true, startOffset, postfix, 0, postfix.length());\n ",
      "javadoc": "Returns true if the given string ends with \u003ccode\u003epostfix\u003c/code\u003e, ignoring case.\n \u003cp\u003e\n Note: This method is equivalent to calling:\n \n \u003cpre\u003e\n int startIndex \u003d string.length() - postfix.length();\n string.regionMatches(true, startOffset, postfix, 0, postfix.length());\n \u003c/pre\u003e\n@param string the string which may end with \u003ccode\u003epostfix\u003c/code\u003e\n@param postfix the string for which to test existence\n@return true if the given string ends with \u003ccode\u003epostfix\u003c/code\u003e, ignoring case.",
      "static": true,
      "params": [
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string which may end with postfix"
        },
        {
          "name": "postfix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string for which to test existence"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given string ends with postfix, ignoring case."
      },
      "throws": []
    },
    {
      "name": "containsAll",
      "comment": "Returns true if all the given searches are contained in the given string.",
      "javadoc": "Returns true if all the given \u003ccode\u003esearches\u003c/code\u003e are contained in the given string.\n@param toSearch the string to search\n@param searches the strings to find\n@return true if all the given \u003ccode\u003esearches\u003c/code\u003e are contained in the given string.",
      "static": true,
      "params": [
        {
          "name": "toSearch",
          "type_long": "java.lang.CharSequence",
          "type_short": "CharSequence",
          "comment": "the string to search"
        },
        {
          "name": "searches",
          "type_long": "java.lang.CharSequence[]",
          "type_short": "java.lang.CharSequence[]",
          "comment": "the strings to find"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if all the given searches are contained in the given string."
      },
      "throws": []
    },
    {
      "name": "containsAllIgnoreCase",
      "comment": "Returns true if all the given searches are contained in the given string,\n ignoring case.",
      "javadoc": "Returns true if all the given \u003ccode\u003esearches\u003c/code\u003e are contained in the given string,\n ignoring case.\n@param toSearch the string to search\n@param searches the strings to find\n@return true if all the given \u003ccode\u003esearches\u003c/code\u003e are contained in the given string.",
      "static": true,
      "params": [
        {
          "name": "toSearch",
          "type_long": "java.lang.CharSequence",
          "type_short": "CharSequence",
          "comment": "the string to search"
        },
        {
          "name": "searches",
          "type_long": "java.lang.CharSequence[]",
          "type_short": "java.lang.CharSequence[]",
          "comment": "the strings to find"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if all the given searches are contained in the given string."
      },
      "throws": []
    },
    {
      "name": "containsAnyIgnoreCase",
      "comment": "Returns true if any of the given searches are contained in the given string,\n ignoring case.",
      "javadoc": "Returns true if any of the given \u003ccode\u003esearches\u003c/code\u003e are contained in the given string,\n ignoring case.\n@param toSearch the string to search\n@param searches the strings to find\n@return true if any of the given \u003ccode\u003esearches\u003c/code\u003e are contained in the given string.",
      "static": true,
      "params": [
        {
          "name": "toSearch",
          "type_long": "java.lang.CharSequence",
          "type_short": "CharSequence",
          "comment": "the string to search"
        },
        {
          "name": "searches",
          "type_long": "java.lang.CharSequence[]",
          "type_short": "java.lang.CharSequence[]",
          "comment": "the strings to find"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if any of the given searches are contained in the given string."
      },
      "throws": []
    },
    {
      "name": "indexOfWord",
      "comment": "Returns the index of the first whole word occurrence of the search word within the given\n text. A whole word is defined as the character before and after the occurrence must not be a\n JavaIdentifierPart.",
      "javadoc": "Returns the index of the first whole word occurrence of the search word within the given\n text. A whole word is defined as the character before and after the occurrence must not be a\n JavaIdentifierPart.\n@param text the text to be searched.\n@param searchWord the word to search for.\n@return the index of the first whole word occurrence of the search word within the given\n         text, or -1 if not found.",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to be searched."
        },
        {
          "name": "searchWord",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the word to search for."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index of the first whole word occurrence of the search word within the given\n         text, or -1 if not found."
      },
      "throws": []
    },
    {
      "name": "isWholeWord",
      "comment": "Returns true if the substring within the text string starting at startIndex and having the\n given length is a whole word. A whole word is defined as the character before and after the\n occurrence must not be a JavaIdentifierPart.",
      "javadoc": "Returns true if the substring within the text string starting at startIndex and having the\n given length is a whole word. A whole word is defined as the character before and after the\n occurrence must not be a JavaIdentifierPart.\n@param text the text containing the potential word.\n@param startIndex the start index of the potential word within the text.\n@param length the length of the potential word\n@return true if the substring within the text string starting at startIndex and having the\n         given length is a whole word.",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text containing the potential word."
        },
        {
          "name": "startIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the start index of the potential word within the text."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the length of the potential word"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the substring within the text string starting at startIndex and having the\n         given length is a whole word."
      },
      "throws": []
    },
    {
      "name": "convertTabsToSpaces",
      "comment": "Convert tabs in the given string to spaces using a default tab width of 8 spaces.",
      "javadoc": "Convert tabs in the given string to spaces using a default tab width of 8 spaces.\n@param str string containing tabs\n@return string that has spaces for tabs",
      "static": true,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string containing tabs"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "string that has spaces for tabs"
      },
      "throws": []
    },
    {
      "name": "convertTabsToSpaces",
      "comment": "Convert tabs in the given string to spaces.",
      "javadoc": "Convert tabs in the given string to spaces.\n@param str string containing tabs\n@param tabSize length of the tab\n@return string that has spaces for tabs",
      "static": true,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string containing tabs"
        },
        {
          "name": "tabSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "length of the tab"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "string that has spaces for tabs"
      },
      "throws": []
    },
    {
      "name": "toLines",
      "comment": "Parses a string containing multiple lines into an array where each element in the array\n contains only a single line. The \"\\n\" character is used as the delimiter for lines.\n \n This methods creates an empty string entry in the result array for initial and trailing\n separator chars, as well as for consecutive separators.",
      "javadoc": "Parses a string containing multiple lines into an array where each element in the array\n contains only a single line. The \"\\n\" character is used as the delimiter for lines.\n \u003cp\u003e\n This methods creates an empty string entry in the result array for initial and trailing\n separator chars, as well as for consecutive separators.\n@param str the string to parse\n@return an array of lines; an empty array if the given value is null or empty\n@see StringUtils#splitPreserveAllTokens(String, char)",
      "static": true,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to parse"
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "an array of lines; an empty array if the given value is null or empty"
      },
      "throws": []
    },
    {
      "name": "toLines",
      "comment": "Parses a string containing multiple lines into an array where each element in the array\n contains only a single line. The \"\\n\" character is used as the delimiter for lines.",
      "javadoc": "Parses a string containing multiple lines into an array where each element in the array\n contains only a single line. The \"\\n\" character is used as the delimiter for lines.\n@param s the string to parse\n@param preserveTokens true signals to treat consecutive newlines as multiple lines; false\n            signals to treat consecutive newlines as a single line break\n@return an array of lines; an empty array if the given value is null or empty",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to parse"
        },
        {
          "name": "preserveTokens",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true signals to treat consecutive newlines as multiple lines; false\n            signals to treat consecutive newlines as a single line break"
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "an array of lines; an empty array if the given value is null or empty"
      },
      "throws": []
    },
    {
      "name": "toFixedSize",
      "comment": "Enforces the given length upon the given string by trimming and then padding as necessary.",
      "javadoc": "Enforces the given length upon the given string by trimming and then padding as necessary.\n@param s the String to fix\n@param pad the pad character to use if padding is required\n@param size the desired size of the string\n@return the fixed string",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the String to fix"
        },
        {
          "name": "pad",
          "type_long": "char",
          "type_short": "char",
          "comment": "the pad character to use if padding is required"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "the desired size of the string"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the fixed string"
      },
      "throws": []
    },
    {
      "name": "pad",
      "comment": "Pads the source string to the specified length, using the filler string as the pad. If length\n is negative, left justifies the string, appending the filler; if length is positive, right\n justifies the source string.",
      "javadoc": "Pads the source string to the specified length, using the filler string as the pad. If length\n is negative, left justifies the string, appending the filler; if length is positive, right\n justifies the source string.\n@param source the original string to pad.\n@param filler the type of characters with which to pad\n@param length the length of padding to add (0 results in no changes)\n@return the padded string",
      "static": true,
      "params": [
        {
          "name": "source",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the original string to pad."
        },
        {
          "name": "filler",
          "type_long": "char",
          "type_short": "char",
          "comment": "the type of characters with which to pad"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the length of padding to add (0 results in no changes)"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the padded string"
      },
      "throws": []
    },
    {
      "name": "indentLines",
      "comment": "Splits the given string into lines using \\n and then pads each string with the\n given pad string. Finally, the updated lines are formed into a single string.\n \n This is useful for constructing complicated toString() representations.",
      "javadoc": "Splits the given string into lines using \u003ccode\u003e\\n\u003c/code\u003e and then pads each string with the\n given pad string. Finally, the updated lines are formed into a single string.\n \u003cp\u003e\n This is useful for constructing complicated \u003ccode\u003etoString()\u003c/code\u003e representations.\n@param s the input string\n@param indent the indent string; this will be appended as needed\n@return the output string",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the input string"
        },
        {
          "name": "indent",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the indent string; this will be appended as needed"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the output string"
      },
      "throws": []
    },
    {
      "name": "findWord",
      "comment": "Finds the word at the given index in the given string. For example, the string \"The tree is\n green\" and the index of 5, the result would be \"tree\".",
      "javadoc": "Finds the word at the given index in the given string. For example, the string \"The tree is\n green\" and the index of 5, the result would be \"tree\".\n@param s the string to search\n@param index the index into the string to \"seed\" the word.\n@return String the word contained at the given index.",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to search"
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index into the string to \"seed\" the word."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String the word contained at the given index."
      },
      "throws": []
    },
    {
      "name": "findWord",
      "comment": "Finds the word at the given index in the given string; if the word contains the given\n charToAllow, then allow it in the string. For example, the string \"The tree* is green\" and\n the index of 5, charToAllow is \u0027*\u0027, then the result would be \"tree*\".\n \n If the search yields only whitespace, then the empty string will be returned.",
      "javadoc": "Finds the word at the given index in the given string; if the word contains the given\n charToAllow, then allow it in the string. For example, the string \"The tree* is green\" and\n the index of 5, charToAllow is \u0027*\u0027, then the result would be \"tree*\".\n \u003cp\u003e\n If the search yields only whitespace, then the empty string will be returned.\n@param s the string to search\n@param index the index into the string to \"seed\" the word.\n@param charsToAllow chars that normally would be considered invalid, e.g., \u0027*\u0027 so that the\n            word can be returned with the charToAllow\n@return String the word contained at the given index.",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to search"
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index into the string to \"seed\" the word."
        },
        {
          "name": "charsToAllow",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": "chars that normally would be considered invalid, e.g., \u0027*\u0027 so that the\n            word can be returned with the charToAllow"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String the word contained at the given index."
      },
      "throws": []
    },
    {
      "name": "findWordLocation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "charsToAllow",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.WordLocation",
        "type_short": "WordLocation",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isWordChar",
      "comment": "Loosely defined as a character that we would expected to be an normal ascii content meant for\n consumption by a human. Also, provided allows chars will pass the test.",
      "javadoc": "Loosely defined as a character that we would expected to be an normal ascii content meant for\n consumption by a human. Also, provided allows chars will pass the test.\n@param c the char to check\n@param charsToAllow characters that will cause this method to return true\n@return true if it is a \u0027word char\u0027",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": "the char to check"
        },
        {
          "name": "charsToAllow",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": "characters that will cause this method to return true"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if it is a \u0027word char\u0027"
      },
      "throws": []
    },
    {
      "name": "findLastWordPosition",
      "comment": "Finds the starting position of the last word in the given string.",
      "javadoc": "Finds the starting position of the last word in the given string.\n@param s the string to search\n@return int the starting position of the last word, -1 if not found",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to search"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int the starting position of the last word, -1 if not found"
      },
      "throws": []
    },
    {
      "name": "getLastWord",
      "comment": "Takes a path-like string and retrieves the last non-empty item. Examples:\n \n StringUtilities.getLastWord(\"/This/is/my/last/word/\", \"/\") returns word\n StringUtilities.getLastWord(\"/This/is/my/last/word/\", \"/\") returns word\n StringUtilities.getLastWord(\"This.is.my.last.word\", \".\") returns word\n StringUtilities.getLastWord(\"/This/is/my/last/word/MyFile.java\", \".\") returns java\n StringUtilities.getLastWord(\"/This/is/my/last/word/MyFile.java\", \"/\") returns\n MyFile.java\n ",
      "javadoc": "Takes a path-like string and retrieves the last non-empty item. Examples:\n \u003cul\u003e\n \u003cli\u003eStringUtilities.getLastWord(\"/This/is/my/last/word/\", \"/\") returns word\u003c/li\u003e\n \u003cli\u003eStringUtilities.getLastWord(\"/This/is/my/last/word/\", \"/\") returns word\u003c/li\u003e\n \u003cli\u003eStringUtilities.getLastWord(\"This.is.my.last.word\", \".\") returns word\u003c/li\u003e\n \u003cli\u003eStringUtilities.getLastWord(\"/This/is/my/last/word/MyFile.java\", \".\") returns java\u003c/li\u003e\n \u003cli\u003eStringUtilities.getLastWord(\"/This/is/my/last/word/MyFile.java\", \"/\") returns\n MyFile.java\u003c/li\u003e\n \u003c/ul\u003e\n@param s the string from which to get the last word\n@param separator the separator of words\n@return the last word",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string from which to get the last word"
        },
        {
          "name": "separator",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the separator of words"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the last word"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Converts an integer into a string. For example, given an integer 0x41424344, the returned\n string would be \"ABCD\".",
      "javadoc": "Converts an integer into a string. For example, given an integer 0x41424344, the returned\n string would be \"ABCD\".\n@param value the integer value\n@return the converted string",
      "static": true,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the integer value"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the converted string"
      },
      "throws": []
    },
    {
      "name": "toStingJson",
      "comment": "Creates a JSON string for the given object using all of its fields. To control the fields\n that are in the result string, see Json.\n \n \n This is here as a marker to point users to the real Json String utility.",
      "javadoc": "Creates a JSON string for the given object using all of its fields. To control the fields\n that are in the result string, see {@link Json}.\n \n \u003cP\u003e\n This is here as a marker to point users to the real {@link Json} String utility.\n@param o the object for which to create a string\n@return the string",
      "static": true,
      "params": [
        {
          "name": "o",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the object for which to create a string"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string"
      },
      "throws": []
    },
    {
      "name": "toStringWithIndent",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "o",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mergeStrings",
      "comment": "Merge two strings into one. If one string contains the other, then the largest is returned.\n If both strings are null then null is returned. If both strings are empty, the empty string\n is returned. If the original two strings differ, this adds the second string to the first\n separated by a newline.",
      "javadoc": "Merge two strings into one. If one string contains the other, then the largest is returned.\n If both strings are null then null is returned. If both strings are empty, the empty string\n is returned. If the original two strings differ, this adds the second string to the first\n separated by a newline.\n@param string1 the first string\n@param string2 the second string\n@return the merged string",
      "static": true,
      "params": [
        {
          "name": "string1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the first string"
        },
        {
          "name": "string2",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the second string"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the merged string"
      },
      "throws": []
    },
    {
      "name": "trim",
      "comment": "Limits the given string to the given max number of characters. If the string is\n larger than the given length, then it will be trimmed to fit that length after adding\n ellipses\n\n \n The given max value must be at least 4. This is to ensure that, at a minimum, we\n can display the  plus one character.",
      "javadoc": "Limits the given string to the given \u003ccode\u003emax\u003c/code\u003e number of characters. If the string is\n larger than the given length, then it will be trimmed to fit that length \u003cb\u003eafter adding\n ellipses\u003c/b\u003e\n\n \u003cp\u003e\n The given \u003ccode\u003emax\u003c/code\u003e value must be at least 4. This is to ensure that, at a minimum, we\n can display the {@value #ELLIPSES} plus one character.\n@param original The string to be limited\n@param max The maximum number of characters to display (including ellipses, if trimmed).\n@return the trimmed string\n@throws IllegalArgumentException If the given \u003ccode\u003emax\u003c/code\u003e value is less than 5.",
      "static": true,
      "params": [
        {
          "name": "original",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The string to be limited"
        },
        {
          "name": "max",
          "type_long": "int",
          "type_short": "int",
          "comment": "The maximum number of characters to display (including ellipses, if trimmed)."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the trimmed string"
      },
      "throws": []
    },
    {
      "name": "trimTrailingNulls",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "trimMiddle",
      "comment": "Trims the given string the max number of characters. Ellipses will be added to\n signal that content was removed. Thus, the actual number of removed characters will be\n (s.length() - max) +  length.\n\n \n If the string fits within the max, then the string will be returned.\n\n \n The given max value must be at least 5. This is to ensure that, at a minimum, we\n can display the  plus one character from the front and back of the string.",
      "javadoc": "Trims the given string the \u003ccode\u003emax\u003c/code\u003e number of characters. Ellipses will be added to\n signal that content was removed. Thus, the actual number of removed characters will be\n \u003ccode\u003e(s.length() - max) + {@value StringUtilities#ELLIPSES}\u003c/code\u003e length.\n\n \u003cp\u003e\n If the string fits within the max, then the string will be returned.\n\n \u003cp\u003e\n The given \u003ccode\u003emax\u003c/code\u003e value must be at least 5. This is to ensure that, at a minimum, we\n can display the {@value #ELLIPSES} plus one character from the front and back of the string.\n@param s the string to trim\n@param max the max number of characters to allow.\n@return the trimmed string",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to trim"
        },
        {
          "name": "max",
          "type_long": "int",
          "type_short": "int",
          "comment": "the max number of characters to allow."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the trimmed string"
      },
      "throws": []
    },
    {
      "name": "fixMultipleAsterisks",
      "comment": "This method looks for all occurrences of successive asterisks (i.e., \"**\") and replace with a\n single asterisk, which is an equivalent usage in Ghidra. This is necessary due to some symbol\n names which cause the pattern matching process to become unusable. An example string that\n causes this problem is\n \"s_CLSID\\{ADB880A6-D8FF-11CF-9377-00AA003B7A11}\\InprocServer3_01001400\".",
      "javadoc": "This method looks for all occurrences of successive asterisks (i.e., \"**\") and replace with a\n single asterisk, which is an equivalent usage in Ghidra. This is necessary due to some symbol\n names which cause the pattern matching process to become unusable. An example string that\n causes this problem is\n \"s_CLSID\\{ADB880A6-D8FF-11CF-9377-00AA003B7A11}\\InprocServer3_01001400\".\n@param value The string to be checked.\n@return The updated string.",
      "static": true,
      "params": [
        {
          "name": "value",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The string to be checked."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The updated string."
      },
      "throws": []
    },
    {
      "name": "isValidCLanguageChar",
      "comment": "Returns true if the character is OK to be contained inside C language string. That is, the\n string should not be tokenized on this char.",
      "javadoc": "Returns true if the character is OK to be contained inside C language string. That is, the\n string should not be tokenized on this char.\n@param c the char\n@return boolean true if it is allows in a C string",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": "the char"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if it is allows in a C string"
      },
      "throws": []
    },
    {
      "name": "isAsciiChar",
      "comment": "Returns true if the given character is within the ascii range.",
      "javadoc": "Returns true if the given character is within the ascii range.\n@param c the char to check\n@return true if the given character is within the ascii range.",
      "static": true,
      "params": [
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": "the char to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given character is within the ascii range."
      },
      "throws": []
    },
    {
      "name": "isAsciiChar",
      "comment": "Returns true if the given code point is within the ascii range.",
      "javadoc": "Returns true if the given code point is within the ascii range.\n@param codePoint the codePoint to check\n@return true if the given character is within the ascii range.",
      "static": true,
      "params": [
        {
          "name": "codePoint",
          "type_long": "int",
          "type_short": "int",
          "comment": "the codePoint to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given character is within the ascii range."
      },
      "throws": []
    },
    {
      "name": "convertEscapeSequences",
      "comment": "Replaces escaped characters in a string to corresponding control characters. For example a\n string containing a backslash character followed by a \u0027n\u0027 character would be replaced with a\n single line feed (0x0a) character. One use for this is to to allow users to type strings in a\n text field and include control characters such as line feeds and tabs.\n\n The string that contains \u0027a\u0027,\u0027b\u0027,\u0027c\u0027, \u0027\\\u0027, \u0027n\u0027, \u0027d\u0027, \u0027\\\u0027, \u0027u\u0027, \u00270\u0027, \u00270\u0027, \u00270\u0027, \u00271\u0027, \u0027e\u0027 would\n become \u0027a\u0027,\u0027b\u0027,\u0027c\u0027,0x0a,\u0027d\u0027, 0x01, e\"",
      "javadoc": "Replaces escaped characters in a string to corresponding control characters. For example a\n string containing a backslash character followed by a \u0027n\u0027 character would be replaced with a\n single line feed (0x0a) character. One use for this is to to allow users to type strings in a\n text field and include control characters such as line feeds and tabs.\n\n The string that contains \u0027a\u0027,\u0027b\u0027,\u0027c\u0027, \u0027\\\u0027, \u0027n\u0027, \u0027d\u0027, \u0027\\\u0027, \u0027u\u0027, \u00270\u0027, \u00270\u0027, \u00270\u0027, \u00271\u0027, \u0027e\u0027 would\n become \u0027a\u0027,\u0027b\u0027,\u0027c\u0027,0x0a,\u0027d\u0027, 0x01, e\"\n@param str The string to convert escape sequences to control characters.\n@return a new string with escape sequences converted to control characters.\n@see #convertEscapeSequences(String string)",
      "static": true,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The string to convert escape sequences to control characters."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a new string with escape sequences converted to control characters."
      },
      "throws": []
    },
    {
      "name": "handleEscapeSequence",
      "comment": "Attempt to handle character escape sequence. Note that only a single Java character will be\n produced which limits the range of valid character value.",
      "javadoc": "Attempt to handle character escape sequence. Note that only a single Java character will be\n produced which limits the range of valid character value.\n@param string string containing escape sequences\n@param escapeSequence escape sequence (e.g., \"\\\\u\")\n@param hexLength number of hex digits expected (1 to 8)\n@param index current position within string\n@param builder the builder into which the results will be added\n@return true if escape sequence processed and added a single character to the builder.",
      "static": true,
      "params": [
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string containing escape sequences"
        },
        {
          "name": "escapeSequence",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "escape sequence (e.g., \"\\\\u\")"
        },
        {
          "name": "hexLength",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of hex digits expected (1 to 8)"
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "current position within string"
        },
        {
          "name": "builder",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "the builder into which the results will be added"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if escape sequence processed and added a single character to the builder."
      },
      "throws": []
    },
    {
      "name": "convertControlCharsToEscapeSequences",
      "comment": "Replaces known control characters in a string to corresponding escape sequences. For example\n a string containing a line feed character would be converted to backslash character followed\n by an \u0027n\u0027 character. One use for this is to display strings in a manner to easily see the\n embedded control characters.\n\n The string that contains \u0027a\u0027,\u0027b\u0027,\u0027c\u0027,0x0a,\u0027d\u0027, 0x01, \u0027e\u0027 would become \u0027a\u0027,\u0027b\u0027,\u0027c\u0027, \u0027\\\u0027, \u0027n\u0027,\n \u0027d\u0027, 0x01, \u0027e\u0027",
      "javadoc": "Replaces known control characters in a string to corresponding escape sequences. For example\n a string containing a line feed character would be converted to backslash character followed\n by an \u0027n\u0027 character. One use for this is to display strings in a manner to easily see the\n embedded control characters.\n\n The string that contains \u0027a\u0027,\u0027b\u0027,\u0027c\u0027,0x0a,\u0027d\u0027, 0x01, \u0027e\u0027 would become \u0027a\u0027,\u0027b\u0027,\u0027c\u0027, \u0027\\\u0027, \u0027n\u0027,\n \u0027d\u0027, 0x01, \u0027e\u0027\n@param str The string to convert control characters to escape sequences\n@return a new string with all the control characters converted to escape sequences.",
      "static": true,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The string to convert control characters to escape sequences"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a new string with all the control characters converted to escape sequences."
      },
      "throws": []
    },
    {
      "name": "convertCodePointToEscapeSequence",
      "comment": "Maps known control characters to corresponding escape sequences. For example a line feed\n character would be converted to backslash \u0027\\\\\u0027 character followed by an \u0027n\u0027 character. One\n use for this is to display strings in a manner to easily see the embedded control characters.",
      "javadoc": "Maps known control characters to corresponding escape sequences. For example a line feed\n character would be converted to backslash \u0027\\\\\u0027 character followed by an \u0027n\u0027 character. One\n use for this is to display strings in a manner to easily see the embedded control characters.\n@param codePoint The character to convert to escape sequence string\n@return a new string with equivalent to escape sequence, or original character (as a string)\n         if not in the control character mapping.",
      "static": true,
      "params": [
        {
          "name": "codePoint",
          "type_long": "int",
          "type_short": "int",
          "comment": "The character to convert to escape sequence string"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a new string with equivalent to escape sequence, or original character (as a string)\n         if not in the control character mapping."
      },
      "throws": []
    },
    {
      "name": "wrapToWidth",
      "comment": "Wrap the given string at whitespace to best fit within the given line width\n \n \n If it is not possible to fit a word in the given width, it will be put on a line by itself,\n and that line will be allowed to exceed the given width.",
      "javadoc": "Wrap the given string at whitespace to best fit within the given line width\n \n \u003cp\u003e\n If it is not possible to fit a word in the given width, it will be put on a line by itself,\n and that line will be allowed to exceed the given width.\n@param str the string to wrap\n@param width the max width of each line, unless a single word exceeds it\n@return ",
      "static": true,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to wrap"
        },
        {
          "name": "width",
          "type_long": "int",
          "type_short": "int",
          "comment": "the max width of each line, unless a single word exceeds it"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
