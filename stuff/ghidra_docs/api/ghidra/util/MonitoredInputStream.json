{
  "name": "MonitoredInputStream",
  "comment": "An InputStream which utilizes a TaskMonitor to indicate input progress and\n allows the operation to be cancelled via the TaskMonitor.",
  "javadoc": "An InputStream which utilizes a TaskMonitor to indicate input progress and\n allows the operation to be cancelled via the TaskMonitor.",
  "static": false,
  "implements": [],
  "extends": "java.io.InputStream",
  "fields": [
    {
      "name": "PROGRESS_INCREMENT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32768"
    },
    {
      "name": "in",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.InputStream",
      "type_short": "InputStream",
      "constant_value": null
    },
    {
      "name": "monitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    },
    {
      "name": "smallCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "count",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "in",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProgress",
      "comment": "Reset the current progress count to the specified value.",
      "javadoc": "Reset the current progress count to the specified value.",
      "static": false,
      "params": [
        {
          "name": "count",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "read",
      "comment": "Reads the next byte of data from this input stream. The value \n byte is returned as an int in the range \n 0 to 255. If no byte is available \n because the end of the stream has been reached, the value \n -1 is returned. This method blocks until input data \n is available, the end of the stream is detected, or an exception \n is thrown. \n \n This method\n simply performs in.read() and returns the result.",
      "javadoc": "Reads the next byte of data from this input stream. The value \n byte is returned as an \u003ccode\u003eint\u003c/code\u003e in the range \n \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e255\u003c/code\u003e. If no byte is available \n because the end of the stream has been reached, the value \n \u003ccode\u003e-1\u003c/code\u003e is returned. This method blocks until input data \n is available, the end of the stream is detected, or an exception \n is thrown. \n \u003cp\u003e\n This method\n simply performs \u003ccode\u003ein.read()\u003c/code\u003e and returns the result.\n@return the next byte of data, or \u003ccode\u003e-1\u003c/code\u003e if the end of the\n             stream is reached.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the next byte of data, or -1 if the end of the\n             stream is reached."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "read",
      "comment": "Reads up to byte.length bytes of data from this \n input stream into an array of bytes. This method blocks until some \n input is available. \n \n This method simply performs the call\n read(b, 0, b.length) and returns\n the  result. It is important that it does\n not do in.read(b) instead;\n certain subclasses of  FilterInputStream\n depend on the implementation strategy actually\n used.",
      "javadoc": "Reads up to \u003ccode\u003ebyte.length\u003c/code\u003e bytes of data from this \n input stream into an array of bytes. This method blocks until some \n input is available. \n \u003cp\u003e\n This method simply performs the call\n \u003ccode\u003eread(b, 0, b.length)\u003c/code\u003e and returns\n the  result. It is important that it does\n \u003ci\u003enot\u003c/i\u003e do \u003ccode\u003ein.read(b)\u003c/code\u003e instead;\n certain subclasses of  \u003ccode\u003eFilterInputStream\u003c/code\u003e\n depend on the implementation strategy actually\n used.\n@param b the buffer into which the data is read.\n@return the total number of bytes read into the buffer, or\n             \u003ccode\u003e-1\u003c/code\u003e if there is no more data because the end of\n             the stream has been reached.\n@exception IOException if an I/O error occurs.\n@see java.io.FilterInputStream#read(byte[], int, int)",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the buffer into which the data is read."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             the stream has been reached."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "read",
      "comment": "Reads up to len bytes of data from this input stream \n into an array of bytes. This method blocks until some input is \n available. \n \n This method simply performs in.read(b, off, len) \n and returns the result.",
      "javadoc": "Reads up to \u003ccode\u003elen\u003c/code\u003e bytes of data from this input stream \n into an array of bytes. This method blocks until some input is \n available. \n \u003cp\u003e\n This method simply performs \u003ccode\u003ein.read(b, off, len)\u003c/code\u003e \n and returns the result.\n@param b the buffer into which the data is read.\n@param off the start offset of the data.\n@param len the maximum number of bytes read.\n@return the total number of bytes read into the buffer, or\n             \u003ccode\u003e-1\u003c/code\u003e if there is no more data because the end of\n             the stream has been reached.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the buffer into which the data is read."
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": "the start offset of the data."
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "the maximum number of bytes read."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             the stream has been reached."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "skip",
      "comment": "Skips over and discards n bytes of data from the \n input stream. The skip method may, for a variety of \n reasons, end up skipping over some smaller number of bytes, \n possibly 0. The actual number of bytes skipped is \n returned. \n \n This method\n simply performs in.skip(n).",
      "javadoc": "Skips over and discards \u003ccode\u003en\u003c/code\u003e bytes of data from the \n input stream. The \u003ccode\u003eskip\u003c/code\u003e method may, for a variety of \n reasons, end up skipping over some smaller number of bytes, \n possibly \u003ccode\u003e0\u003c/code\u003e. The actual number of bytes skipped is \n returned. \n \u003cp\u003e\n This method\n simply performs \u003ccode\u003ein.skip(n)\u003c/code\u003e.\n@param n the number of bytes to be skipped.\n@return the actual number of bytes skipped.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "n",
          "type_long": "long",
          "type_short": "long",
          "comment": "the number of bytes to be skipped."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the actual number of bytes skipped."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "available",
      "comment": "Returns the number of bytes that can be read from this input \n stream without blocking. \n \n This method\n simply performs in.available() and\n returns the result.",
      "javadoc": "Returns the number of bytes that can be read from this input \n stream without blocking. \n \u003cp\u003e\n This method\n simply performs \u003ccode\u003ein.available()\u003c/code\u003e and\n returns the result.\n@return the number of bytes that can be read from the input stream\n             without blocking.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of bytes that can be read from the input stream\n             without blocking."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "close",
      "comment": "Closes this input stream and releases any system resources \n associated with the stream. \n This\n method simply performs in.close().",
      "javadoc": "Closes this input stream and releases any system resources \n associated with the stream. \n This\n method simply performs \u003ccode\u003ein.close()\u003c/code\u003e.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "mark",
      "comment": "Marks the current position in this input stream. A subsequent \n call to the reset method repositions this stream at \n the last marked position so that subsequent reads re-read the same bytes.\n \n The readlimit argument tells this input stream to \n allow that many bytes to be read before the mark position gets \n invalidated. \n \n This method simply performs in.mark(readlimit).",
      "javadoc": "Marks the current position in this input stream. A subsequent \n call to the \u003ccode\u003ereset\u003c/code\u003e method repositions this stream at \n the last marked position so that subsequent reads re-read the same bytes.\n \u003cp\u003e\n The \u003ccode\u003ereadlimit\u003c/code\u003e argument tells this input stream to \n allow that many bytes to be read before the mark position gets \n invalidated. \n \u003cp\u003e\n This method simply performs \u003ccode\u003ein.mark(readlimit)\u003c/code\u003e.\n@param readlimit the maximum limit of bytes that can be read before\n                      the mark position becomes invalid.\n@see java.io.FilterInputStream#reset",
      "static": false,
      "params": [
        {
          "name": "readlimit",
          "type_long": "int",
          "type_short": "int",
          "comment": "the maximum limit of bytes that can be read before\n                      the mark position becomes invalid."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "reset",
      "comment": "Repositions this stream to the position at the time the \n mark method was last called on this input stream. \n \n This method\n simply performs in.reset().\n \n Stream marks are intended to be used in\n situations where you need to read ahead a little to see what\u0027s in\n the stream. Often this is most easily done by invoking some\n general parser. If the stream is of the type handled by the\n parse, it just chugs along happily. If the stream is not of\n that type, the parser should toss an exception when it fails.\n If this happens within readlimit bytes, it allows the outer\n code to reset the stream and try another parser.",
      "javadoc": "Repositions this stream to the position at the time the \n \u003ccode\u003emark\u003c/code\u003e method was last called on this input stream. \n \u003cp\u003e\n This method\n simply performs \u003ccode\u003ein.reset()\u003c/code\u003e.\n \u003cp\u003e\n Stream marks are intended to be used in\n situations where you need to read ahead a little to see what\u0027s in\n the stream. Often this is most easily done by invoking some\n general parser. If the stream is of the type handled by the\n parse, it just chugs along happily. If the stream is not of\n that type, the parser should toss an exception when it fails.\n If this happens within readlimit bytes, it allows the outer\n code to reset the stream and try another parser.\n@exception IOException if the stream has not been marked or if the\n               mark has been invalidated.\n@see java.io.FilterInputStream#mark(int)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "markSupported",
      "comment": "Tests if this input stream supports the mark \n and reset methods. \n This method\n simply performs in.markSupported().",
      "javadoc": "Tests if this input stream supports the \u003ccode\u003emark\u003c/code\u003e \n and \u003ccode\u003ereset\u003c/code\u003e methods. \n This method\n simply performs \u003ccode\u003ein.markSupported()\u003c/code\u003e.\n@return \u003ccode\u003etrue\u003c/code\u003e if this stream type supports the\n          \u003ccode\u003emark\u003c/code\u003e and \u003ccode\u003ereset\u003c/code\u003e method;\n          \u003ccode\u003efalse\u003c/code\u003e otherwise.\n@see java.io.InputStream#mark(int)\n@see java.io.InputStream#reset()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this stream type supports the\n          mark and reset method;\n          false otherwise."
      },
      "throws": []
    }
  ]
}
