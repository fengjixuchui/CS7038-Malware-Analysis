{
  "name": "SequenceSearchState",
  "comment": "SeqenceSearchState holds the state of a search for a DittedBitSequence within a byte\n sequence.",
  "javadoc": "SeqenceSearchState holds the state of a search for a DittedBitSequence within a byte\n sequence.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "PATTERN_ENDED",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2147483647"
    },
    {
      "name": "parent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.bytesearch.SequenceSearchState",
      "type_short": "SequenceSearchState",
      "constant_value": null
    },
    {
      "name": "possible",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.DittedBitSequence\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "success",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.DittedBitSequence\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "trans",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.bytesearch.SequenceSearchState[]",
      "type_short": "ghidra.util.bytesearch.SequenceSearchState[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a sub sequence state with a parent sequence",
      "javadoc": "Construct a sub sequence state with a parent sequence\n@param parent parent SequenceSearchState",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "ghidra.util.bytesearch.SequenceSearchState",
          "type_short": "SequenceSearchState",
          "comment": "parent SequenceSearchState"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaxSequenceSize",
      "comment": "",
      "javadoc": "@return maximum number of bytes that could be matched by this sequence",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "maximum number of bytes that could be matched by this sequence"
      },
      "throws": []
    },
    {
      "name": "addSequence",
      "comment": "Add a pattern to this search sequence.  The last pattern added is the successful\n match pattern.",
      "javadoc": "Add a pattern to this search sequence.  The last pattern added is the successful\n match pattern.\n@param pat pattern to add\n@param pos position within the current set of patterns to add this pattern",
      "static": false,
      "params": [
        {
          "name": "pat",
          "type_long": "ghidra.util.bytesearch.DittedBitSequence",
          "type_short": "DittedBitSequence",
          "comment": "pattern to add"
        },
        {
          "name": "pos",
          "type_long": "int",
          "type_short": "int",
          "comment": "position within the current set of patterns to add this pattern"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sortSequences",
      "comment": "Sort the sequences that have been added",
      "javadoc": "Sort the sequences that have been added",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "ghidra.util.bytesearch.SequenceSearchState",
          "type_short": "SequenceSearchState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildSingleTransition",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "all",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.SequenceSearchState\u003e",
          "type_short": "ArrayList",
          "comment": ""
        },
        {
          "name": "pos",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "val",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "exportSuccess",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "match",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.Match\u003e",
          "type_short": "ArrayList",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "merge",
      "comment": "Merge in -op- and this as a single state",
      "javadoc": "Merge in -op- and this as a single state\n@param op",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.util.bytesearch.SequenceSearchState",
          "type_short": "SequenceSearchState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sequenceMatch",
      "comment": "Try to match this Sequence to the byteArray, and add any matches to the match list",
      "javadoc": "Try to match this Sequence to the byteArray, and add any matches to the match list\n@param bytearray array of bytes to match\n@param numbytes retrict number of bytes to allow to match\n@param match list of matches, the result",
      "static": false,
      "params": [
        {
          "name": "bytearray",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "array of bytes to match"
        },
        {
          "name": "numbytes",
          "type_long": "int",
          "type_short": "int",
          "comment": "retrict number of bytes to allow to match"
        },
        {
          "name": "match",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.Match\u003e",
          "type_short": "ArrayList",
          "comment": "list of matches, the result"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "apply",
      "comment": "Search for patterns in a byte array.  All matches are returned.",
      "javadoc": "Search for patterns in a byte array.  All matches are returned.\n@param buffer is the array of bytes to search\n@param match is populated with a Match object for each pattern and position that matches",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "is the array of bytes to search"
        },
        {
          "name": "match",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.Match\u003e",
          "type_short": "ArrayList",
          "comment": "is populated with a Match object for each pattern and position that matches"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "apply",
      "comment": "Search for pattern in the stream -in-.",
      "javadoc": "Search for pattern in the stream -in-.\n@param in - The stream to scan for matches\n@param match - Any matches are appended as Match records to this ArrayList\n@param monitor - if non-null, check for user cancel, and maintain progress info\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "in",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "- The stream to scan for matches"
        },
        {
          "name": "match",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.Match\u003e",
          "type_short": "ArrayList",
          "comment": "- Any matches are appended as Match records to this ArrayList"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "- if non-null, check for user cancel, and maintain progress info"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "apply",
      "comment": "Search for pattern in the stream -in-.",
      "javadoc": "Search for pattern in the stream -in-.\n@param in - The stream to scan for matches\n@param maxBytes - The maximum number of bytes to scan forward in this stream\n@param match - Any matches are appended as Match records to this ArrayList\n@param monitor - if non-null, check for user cancel, and maintain progress info\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "in",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "- The stream to scan for matches"
        },
        {
          "name": "maxBytes",
          "type_long": "long",
          "type_short": "long",
          "comment": "- The maximum number of bytes to scan forward in this stream"
        },
        {
          "name": "match",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.Match\u003e",
          "type_short": "ArrayList",
          "comment": "- Any matches are appended as Match records to this ArrayList"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "- if non-null, check for user cancel, and maintain progress info"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "buildTransitionLevel",
      "comment": "Build a new transition level for the state machine",
      "javadoc": "Build a new transition level for the state machine\n@param prev previous search sequences\n@param pos position within the search sequence state for this level\n@return list of possible new search states to be added to the state machine",
      "static": true,
      "params": [
        {
          "name": "prev",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.SequenceSearchState\u003e",
          "type_short": "ArrayList",
          "comment": "previous search sequences"
        },
        {
          "name": "pos",
          "type_long": "int",
          "type_short": "int",
          "comment": "position within the search sequence state for this level"
        }
      ],
      "return": {
        "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.SequenceSearchState\u003e",
        "type_short": "ArrayList",
        "comment": "list of possible new search states to be added to the state machine"
      },
      "throws": []
    },
    {
      "name": "buildStateMachine",
      "comment": "Build a search state machine from a list of DittedBitSequences",
      "javadoc": "Build a search state machine from a list of DittedBitSequences\n@param patterns bit sequence patterns\n@return search state the will match the given sequences",
      "static": true,
      "params": [
        {
          "name": "patterns",
          "type_long": "java.util.ArrayList\u003c? extends ghidra.util.bytesearch.DittedBitSequence\u003e",
          "type_short": "ArrayList",
          "comment": "bit sequence patterns"
        }
      ],
      "return": {
        "type_long": "ghidra.util.bytesearch.SequenceSearchState",
        "type_short": "SequenceSearchState",
        "comment": "search state the will match the given sequences"
      },
      "throws": []
    }
  ]
}
