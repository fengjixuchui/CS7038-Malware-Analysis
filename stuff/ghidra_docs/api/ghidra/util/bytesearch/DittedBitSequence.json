{
  "name": "DittedBitSequence",
  "comment": "A pattern of bits/mask to match to a stream of bytes.  The bits/mask can be of any length.\n The sequence can be initialized by:\n \n    a string\n    an array of bytes (no mask)\n    an array of bytes and for mask\n    \n  The dits represent bits(binary) or nibbles(hex) that are don\u0027t care, for example:\n     0x..d.4de2 ....0000 .1...... 00101101 11101001\n  where 0x starts a hex number and \u0027.\u0027 is a don\u0027t care nibble (hex) or bit (binary)",
  "javadoc": "A pattern of bits/mask to match to a stream of bytes.  The bits/mask can be of any length.\n The sequence can be initialized by:\n \n    a string\n    an array of bytes (no mask)\n    an array of bytes and for mask\n    \n  The dits represent bits(binary) or nibbles(hex) that are don\u0027t care, for example:\n     0x..d.4de2 ....0000 .1...... 00101101 11101001\n  where 0x starts a hex number and \u0027.\u0027 is a don\u0027t care nibble (hex) or bit (binary)",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "popcount",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "index",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "bits",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "dits",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor from a ditted-bit-sequence string where white space is ignored (e.g., \"10..11.0\");",
      "javadoc": "Constructor from a ditted-bit-sequence string where white space is ignored (e.g., \"10..11.0\");\n@param dittedBitData ditted sequence specified as a string\n@throws IllegalArgumentException if invalid dittedBitData specified",
      "static": false,
      "params": [
        {
          "name": "dittedBitData",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "ditted sequence specified as a string"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor from a ditted-bit string where white space is ignored.  If there are no dits,\n  is true, and  does not begin with {code 0x},  will be\n prepended to the string before constructing the DittedBitSequence.",
      "javadoc": "Constructor from a ditted-bit string where white space is ignored.  If there are no dits,\n {@code hex} is true, and {@code hex} does not begin with {code 0x}, {@code 0x} will be\n prepended to the string before constructing the {@link DittedBitSequence}.\n@param dittedBitData string of bits and dits or hex numbers and dits (e.g., 0.1..0, 0xAB..)\n@param hex true to force hex on the sequence",
      "static": false,
      "params": [
        {
          "name": "dittedBitData",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string of bits and dits or hex numbers and dits (e.g., 0.1..0, 0xAB..)"
        },
        {
          "name": "hex",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to force hex on the sequence"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Copy contructor",
      "javadoc": "Copy contructor\n@param op2 is bit sequence being copied",
      "static": false,
      "params": [
        {
          "name": "op2",
          "type_long": "ghidra.util.bytesearch.DittedBitSequence",
          "type_short": "DittedBitSequence",
          "comment": "is bit sequence being copied"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValueBytes",
      "comment": "",
      "javadoc": "@return value bytes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "value bytes"
      },
      "throws": []
    },
    {
      "name": "getMaskBytes",
      "comment": "",
      "javadoc": "@return mask bytes which correspond to value bytes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "mask bytes which correspond to value bytes"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a sequence of bytes to search for. No bits are masked off.",
      "javadoc": "Construct a sequence of bytes to search for. No bits are masked off.\n@param bytes byte values that must match",
      "static": false,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte values that must match"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a bit pattern to search for consisting of\n 0 bits, 1 bits, and don\u0027t care bits",
      "javadoc": "Construct a bit pattern to search for consisting of\n 0 bits, 1 bits, and don\u0027t care bits\n@param bytes is an array of bytes indicating the 0 and 1 bits that are cared about\n@param mask is an array of bytes masking off the bits that should be cared about, a 0 indicates a \"don\u0027t care\"",
      "static": false,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "is an array of bytes indicating the 0 and 1 bits that are cared about"
        },
        {
          "name": "mask",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "is an array of bytes masking off the bits that should be cared about, a 0 indicates a \"don\u0027t care\""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "s1",
          "type_long": "ghidra.util.bytesearch.DittedBitSequence",
          "type_short": "DittedBitSequence",
          "comment": ""
        },
        {
          "name": "s2",
          "type_long": "ghidra.util.bytesearch.DittedBitSequence",
          "type_short": "DittedBitSequence",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "concatenate",
      "comment": "Concatenates a sequence to the end of another sequence and\n returns a new sequence.",
      "javadoc": "Concatenates a sequence to the end of another sequence and\n returns a new sequence.\n@param toConat sequence to concatenate to this sequence\n@return a new sequence that is the concat of this and toConcat",
      "static": false,
      "params": [
        {
          "name": "toConat",
          "type_long": "ghidra.util.bytesearch.DittedBitSequence",
          "type_short": "DittedBitSequence",
          "comment": "sequence to concatenate to this sequence"
        }
      ],
      "return": {
        "type_long": "ghidra.util.bytesearch.DittedBitSequence",
        "type_short": "DittedBitSequence",
        "comment": "a new sequence that is the concat of this and toConcat"
      },
      "throws": []
    },
    {
      "name": "isMatch",
      "comment": "Check for a match of a value at a certain offset in the pattern.\n An outside matcher will keep track of the match position within this\n ditted bit sequence.  Then call this method to match.",
      "javadoc": "Check for a match of a value at a certain offset in the pattern.\n An outside matcher will keep track of the match position within this\n ditted bit sequence.  Then call this method to match.\n@param pos position in the pattern to match\n@param val a byte to be match at the given byte offset in the pattern\n@return true if the byte matches the sequence mask/value",
      "static": false,
      "params": [
        {
          "name": "pos",
          "type_long": "int",
          "type_short": "int",
          "comment": "position in the pattern to match"
        },
        {
          "name": "val",
          "type_long": "int",
          "type_short": "int",
          "comment": "a byte to be match at the given byte offset in the pattern"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the byte matches the sequence mask/value"
      },
      "throws": []
    },
    {
      "name": "setIndex",
      "comment": "Set a an index in a larger sequence, or identifing id on this pattern",
      "javadoc": "Set a an index in a larger sequence, or identifing id on this pattern\n@param index - index in match sequence, or unique id",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "- index in match sequence, or unique id"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIndex",
      "comment": "Get the index or identifying id attached to this pattern",
      "javadoc": "Get the index or identifying id attached to this pattern\n@return index or unique id attached to this sequence",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "index or unique id attached to this sequence"
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "get the size of this sequence in bytes",
      "javadoc": "get the size of this sequence in bytes\n@return size in bytes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "size in bytes"
      },
      "throws": []
    },
    {
      "name": "getNumFixedBits",
      "comment": "Get number of bits that must be 0/1",
      "javadoc": "Get number of bits that must be 0/1\n@return number of bits that are not don\u0027t care (ditted)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of bits that are not don\u0027t care (ditted)"
      },
      "throws": []
    },
    {
      "name": "getNumUncertainBits",
      "comment": "Get number of bits that are ditted (don\u0027t care)",
      "javadoc": "Get number of bits that are ditted (don\u0027t care)\n@return number of ditted bits (don\u0027t care)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of ditted bits (don\u0027t care)"
      },
      "throws": []
    },
    {
      "name": "writeBits",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuffer",
          "type_short": "StringBuffer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHexString",
      "comment": "get a ditted hex string representing this sequence",
      "javadoc": "get a ditted hex string representing this sequence\n@return ditted hex string",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "ditted hex string"
      },
      "throws": []
    },
    {
      "name": "restoreXmlData",
      "comment": "restore ditted string from XML stream with hex/binary ditted sequences in the form:\n     0x..d.4de2 ....0000 .1...... 00101101 11101001 \n where 0x starts a hex number and \u0027.\u0027 is a don\u0027t care nibble (hex) or bit (binary)",
      "javadoc": "restore ditted string from XML stream with hex/binary ditted sequences in the form:\n    \u003cdata\u003e 0x..d.4de2 ....0000 .1...... 00101101 11101001 \u003c/data\u003e\n where 0x starts a hex number and \u0027.\u0027 is a don\u0027t care nibble (hex) or bit (binary)\n@param parser XML pull parser stream\n@return number of bytes read from XML \u003cdata\u003e tag\n@throws IOException if XML read has an error",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "XML pull parser stream"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of bytes read from XML  tag"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if XML read has an error"
        }
      ]
    },
    {
      "name": "initFromDittedStringData",
      "comment": "Initialize this sequence with a ditted sequence from a string in the form\n    (e.g. - 011...1., 0x.F, 01110011 0xAB)",
      "javadoc": "Initialize this sequence with a ditted sequence from a string in the form\n    (e.g. - 011...1., 0x.F, 01110011 0xAB)\n@param text ditted sequence\n@return number of bytes in the ditted sequence\n@throws IllegalArgumentException if string is malformed",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "ditted sequence"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of bytes in the ditted sequence"
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if string is malformed"
        }
      ]
    },
    {
      "name": "getNumInitialFixedBits",
      "comment": "Get the number of bits that are fixed, not ditted (don\u0027t care)",
      "javadoc": "Get the number of bits that are fixed, not ditted (don\u0027t care)\n@param marked number of bytes in the pattern to check\n@return number of initial fixed bits",
      "static": false,
      "params": [
        {
          "name": "marked",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes in the pattern to check"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of initial fixed bits"
      },
      "throws": []
    }
  ]
}
