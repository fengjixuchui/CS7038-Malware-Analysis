{
  "name": "AlignRule",
  "comment": "ByteSearch post search rule when a pattern is found. Used when a pattern must have a certain\n alignment at an offset from the location the pattern matches. \n \n The pattern can be constructed or restored from XML of the form,\n where alignOffset\u003dmark, alignmask\u003dbits\n \n     ",
  "javadoc": "ByteSearch post search rule when a pattern is found. Used when a pattern must have a certain\n alignment at an offset from the location the pattern matches. \n \n The pattern can be constructed or restored from XML of the form,\n where alignOffset\u003dmark, alignmask\u003dbits\n \n     \u003calign mark\u003d\"0\"bits\u003d\"1\"/\u003e",
  "static": false,
  "implements": [
    "ghidra.util.bytesearch.PostRule"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "alignOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "alignmask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "ByteSearch post search rule when a pattern is found. Used when a pattern must have a certain\n alignment at an offset from the location the pattern matches. The alignment is\n specified by the alignmask bits that must be zero.\n \n   Normally alignOffset is 0, since most patterns will match at the address that must be aligned\n   To align a match, use the following\n\n  align to  2 \u003d alignmask 0x1 - lower bit must be zero\n  align to  4 \u003d alignmask 0x3 - lower two bits must be zero\n  align to  8 \u003d alignmask 0x7 - lower three bits must be zero\n  align to 16 \u003d alignmask 0xF - lower four bits must be zero\n  ....\n  Other strange alignments could be specified, but most likely the above suffice.",
      "javadoc": "ByteSearch post search rule when a pattern is found. Used when a pattern must have a certain\n alignment at an offset from the location the pattern matches. The alignment is\n specified by the alignmask bits that must be zero.\n \n   Normally alignOffset is 0, since most patterns will match at the address that must be aligned\n   To align a match, use the following\n\n  align to  2 \u003d alignmask 0x1 - lower bit must be zero\n  align to  4 \u003d alignmask 0x3 - lower two bits must be zero\n  align to  8 \u003d alignmask 0x7 - lower three bits must be zero\n  align to 16 \u003d alignmask 0xF - lower four bits must be zero\n  ....\n  Other strange alignments could be specified, but most likely the above suffice.\n@param alignOffset - bytes offset from pattern to check for alignment\n@param alignmask - the mask where a 1 bit must be zero",
      "static": false,
      "params": [
        {
          "name": "alignOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "- bytes offset from pattern to check for alignment"
        },
        {
          "name": "alignmask",
          "type_long": "int",
          "type_short": "int",
          "comment": "- the mask where a 1 bit must be zero"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "apply",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pat",
          "type_long": "ghidra.util.bytesearch.Pattern",
          "type_short": "Pattern",
          "comment": ""
        },
        {
          "name": "matchoffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAlignMask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
