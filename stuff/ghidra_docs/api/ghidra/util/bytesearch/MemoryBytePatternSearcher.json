{
  "name": "MemoryBytePatternSearcher",
  "comment": "Multi pattern/mask/action memory searcher\n Patterns must be supplied/added, or a pre-initialized searchState supplied\n \n Preload search patterns and actions, then call search method.",
  "javadoc": "Multi pattern/mask/action memory searcher\n Patterns must be supplied/added, or a pre-initialized searchState supplied\n \n Preload search patterns and actions, then call search method.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "RESTRICTED_PATTERN_BYTE_RANGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "32"
    },
    {
      "name": "root",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.bytesearch.SequenceSearchState",
      "type_short": "SequenceSearchState",
      "constant_value": null
    },
    {
      "name": "patternList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.Pattern\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "searchName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "doExecutableBlocksOnly",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "numToSearch",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "numSearched",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create with pre-created patternList",
      "javadoc": "Create with pre-created patternList\n@param searchName name of search\n@param patternList - list of patterns(bytes/mask/action)",
      "static": false,
      "params": [
        {
          "name": "searchName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of search"
        },
        {
          "name": "patternList",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.Pattern\u003e",
          "type_short": "ArrayList",
          "comment": "- list of patterns(bytes/mask/action)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Create with an initialized SequenceSearchState",
      "javadoc": "Create with an initialized SequenceSearchState\n@param searchName name of search\n@param root search state pre-initialized",
      "static": false,
      "params": [
        {
          "name": "searchName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of search"
        },
        {
          "name": "root",
          "type_long": "ghidra.util.bytesearch.SequenceSearchState",
          "type_short": "SequenceSearchState",
          "comment": "search state pre-initialized"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Create with no patternList, must add patterns before searching",
      "javadoc": "Create with no patternList, must add patterns before searching\n@param searchName name of search",
      "static": false,
      "params": [
        {
          "name": "searchName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of search"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPattern",
      "comment": "Add a search pattern",
      "javadoc": "Add a search pattern\n@param pattern - pattern(bytes/mask/action)",
      "static": false,
      "params": [
        {
          "name": "pattern",
          "type_long": "ghidra.util.bytesearch.Pattern",
          "type_short": "Pattern",
          "comment": "- pattern(bytes/mask/action)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSearchExecutableOnly",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "doExecutableBlocksOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "search",
      "comment": "Search initialized memory blocks for all patterns(bytes/mask/action).\n Call associated action for each pattern matched.",
      "javadoc": "Search initialized memory blocks for all patterns(bytes/mask/action).\n Call associated action for each pattern matched.\n@param program to be searched\n@param searchSet set of bytes to restrict search, if null or empty then search all memory blocks\n@param monitor allow canceling and reporting of progress\n@throws CancelledException if canceled",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "to be searched"
        },
        {
          "name": "searchSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "set of bytes to restrict search, if null or empty then search all memory blocks"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "allow canceling and reporting of progress"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if canceled"
        }
      ]
    },
    {
      "name": "getNumToSearch",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "searchSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "searchBlock",
      "comment": "Search through bytes of a memory block using the finite state machine -root-\n Apply any additional rules for matching patterns.",
      "javadoc": "Search through bytes of a memory block using the finite state machine -root-\n Apply any additional rules for matching patterns.\n@param program is the Program being searched\n@param block is the specific block of bytes being searched\n@throws IOException exception during read of memory\n@throws CancelledException canceled search",
      "static": false,
      "params": [
        {
          "name": "rootState",
          "type_long": "ghidra.util.bytesearch.SequenceSearchState",
          "type_short": "SequenceSearchState",
          "comment": ""
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "is the Program being searched"
        },
        {
          "name": "block",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": "is the specific block of bytes being searched"
        },
        {
          "name": "restrictSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "exception during read of memory"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "canceled search"
        }
      ]
    },
    {
      "name": "preMatchApply",
      "comment": "Called before any match rules are applied",
      "javadoc": "Called before any match rules are applied\n@param matchactions actions that matched\n@param addr address of match",
      "static": false,
      "params": [
        {
          "name": "matchactions",
          "type_long": "ghidra.util.bytesearch.MatchAction[]",
          "type_short": "ghidra.util.bytesearch.MatchAction[]",
          "comment": "actions that matched"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of match"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "postMatchApply",
      "comment": "Called after any match rules are applied\n Can use for cross post rule matching state application and cleanup.",
      "javadoc": "Called after any match rules are applied\n Can use for cross post rule matching state application and cleanup.\n@param matchactions actions that matched\n@param addr adress of match",
      "static": false,
      "params": [
        {
          "name": "matchactions",
          "type_long": "ghidra.util.bytesearch.MatchAction[]",
          "type_short": "ghidra.util.bytesearch.MatchAction[]",
          "comment": "actions that matched"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "adress of match"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
