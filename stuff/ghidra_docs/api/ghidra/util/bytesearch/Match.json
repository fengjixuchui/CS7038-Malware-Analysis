{
  "name": "Match",
  "comment": "Represents a match of a DittedBitSequence at a given offset in a byte sequence.\n \n There is a hidden assumption that the sequence is actually a Pattern\n that might have a ditted-bit-sequence, a set of match actions,\n and post match rules/checks",
  "javadoc": "Represents a match of a DittedBitSequence at a given offset in a byte sequence.\n \n There is a hidden assumption that the sequence is actually a Pattern\n that might have a ditted-bit-sequence, a set of match actions,\n and post match rules/checks",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "sequence",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.bytesearch.DittedBitSequence",
      "type_short": "DittedBitSequence",
      "constant_value": null
    },
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a Match of a DittedBitSequence at an offset within a byte stream.\n Object normally used when a match occurs during a MemoryBytePatternSearch.",
      "javadoc": "Construct a Match of a DittedBitSequence at an offset within a byte stream.\n Object normally used when a match occurs during a MemoryBytePatternSearch.\n@param sequence that matched\n@param offset from the start of byte stream where the matched occured",
      "static": false,
      "params": [
        {
          "name": "sequence",
          "type_long": "ghidra.util.bytesearch.DittedBitSequence",
          "type_short": "DittedBitSequence",
          "comment": "that matched"
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "from the start of byte stream where the matched occured"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumPostBits",
      "comment": "If the sequence corresponds to a PatternPair, return the number of postbits",
      "javadoc": "If the sequence corresponds to a PatternPair, return the number of postbits\n@return the number of post bits",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of post bits"
      },
      "throws": []
    },
    {
      "name": "getMatchActions",
      "comment": "",
      "javadoc": "@return actions associated with this match",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.bytesearch.MatchAction[]",
        "type_short": "ghidra.util.bytesearch.MatchAction[]",
        "comment": "actions associated with this match"
      },
      "throws": []
    },
    {
      "name": "getSequenceSize",
      "comment": "",
      "javadoc": "@return size in bytes of sequence",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "size in bytes of sequence"
      },
      "throws": []
    },
    {
      "name": "getSequenceIndex",
      "comment": "",
      "javadoc": "@return index of sequence in a possibly longer set of sequences",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "index of sequence in a possibly longer set of sequences"
      },
      "throws": []
    },
    {
      "name": "getMarkOffset",
      "comment": "",
      "javadoc": "@return the offset of the match within a longer byte sequence",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the offset of the match within a longer byte sequence"
      },
      "throws": []
    },
    {
      "name": "getMatchStart",
      "comment": "",
      "javadoc": "@return offset of match in sequence of bytes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "offset of match in sequence of bytes"
      },
      "throws": []
    },
    {
      "name": "checkPostRules",
      "comment": "Check that the possible post rules are satisfied",
      "javadoc": "Check that the possible post rules are satisfied\n@param streamoffset offset within from match location to check postrules.\n@return true if post rules are satisfied",
      "static": false,
      "params": [
        {
          "name": "streamoffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "offset within from match location to check postrules."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if post rules are satisfied"
      },
      "throws": []
    },
    {
      "name": "getHexString",
      "comment": "",
      "javadoc": "@return ditted bit sequence as a string",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "ditted bit sequence as a string"
      },
      "throws": []
    },
    {
      "name": "getSequence",
      "comment": "",
      "javadoc": "@return the sequence that was matched",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.bytesearch.DittedBitSequence",
        "type_short": "DittedBitSequence",
        "comment": "the sequence that was matched"
      },
      "throws": []
    }
  ]
}
