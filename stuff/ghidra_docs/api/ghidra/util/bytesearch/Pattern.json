{
  "name": "Pattern",
  "comment": "Pattern is an association of a DittedBitSequence to match,\n a set of post rules after a match is found that must be satisfied,\n and a set of actions to be taken if the pattern matches.\n \n These patterns can be restored from an XML file.",
  "javadoc": "Pattern is an association of a DittedBitSequence to match,\n a set of post rules after a match is found that must be satisfied,\n and a set of actions to be taken if the pattern matches.\n \n These patterns can be restored from an XML file.",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.bytesearch.DittedBitSequence",
  "fields": [
    {
      "name": "markOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "postrule",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.bytesearch.PostRule[]",
      "type_short": "ghidra.util.bytesearch.PostRule[]",
      "constant_value": null
    },
    {
      "name": "actions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.bytesearch.MatchAction[]",
      "type_short": "ghidra.util.bytesearch.MatchAction[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an empty pattern.  Use XML to initialize",
      "javadoc": "Construct an empty pattern.  Use XML to initialize",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct the pattern based on a DittedByteSequence a match offset, post matching rules,\n and a set of actions to take when the match occurs.",
      "javadoc": "Construct the pattern based on a DittedByteSequence a match offset, post matching rules,\n and a set of actions to take when the match occurs.\n@param seq DittedByteSequence\n@param offset offset from the actual match location to report a match\n@param postArray post set of rules to check for the match\n@param matchArray MatchActions to apply when a match occurs",
      "static": false,
      "params": [
        {
          "name": "seq",
          "type_long": "ghidra.util.bytesearch.DittedBitSequence",
          "type_short": "DittedBitSequence",
          "comment": "DittedByteSequence"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset from the actual match location to report a match"
        },
        {
          "name": "postArray",
          "type_long": "ghidra.util.bytesearch.PostRule[]",
          "type_short": "ghidra.util.bytesearch.PostRule[]",
          "comment": "post set of rules to check for the match"
        },
        {
          "name": "matchArray",
          "type_long": "ghidra.util.bytesearch.MatchAction[]",
          "type_short": "ghidra.util.bytesearch.MatchAction[]",
          "comment": "MatchActions to apply when a match occurs"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPostRules",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.bytesearch.PostRule[]",
        "type_short": "ghidra.util.bytesearch.PostRule[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMatchActions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.bytesearch.MatchAction[]",
        "type_short": "ghidra.util.bytesearch.MatchAction[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMatchActions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "actions",
          "type_long": "ghidra.util.bytesearch.MatchAction[]",
          "type_short": "ghidra.util.bytesearch.MatchAction[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMarkOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXmlAttributes",
      "comment": "Restore the PostRule and the MatchAction tags",
      "javadoc": "Restore the PostRule and the MatchAction tags\n@param parser is the parser at the start of tags\n@param pfactory is the factory for the PostRule and MatchAction objects\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "postrulelist",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.PostRule\u003e",
          "type_short": "ArrayList",
          "comment": ""
        },
        {
          "name": "actionlist",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.MatchAction\u003e",
          "type_short": "ArrayList",
          "comment": ""
        },
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the parser at the start of tags"
        },
        {
          "name": "pfactory",
          "type_long": "ghidra.util.bytesearch.PatternFactory",
          "type_short": "PatternFactory",
          "comment": "is the factory for the PostRule and MatchAction objects"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "restoreXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "pfactory",
          "type_long": "ghidra.util.bytesearch.PatternFactory",
          "type_short": "PatternFactory",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readPatterns",
      "comment": "Read patterns from specified file",
      "javadoc": "Read patterns from specified file\n@param file pattern file\n@param patlist list for patterns to be added to\n@param pfactory optional factory for use in parsing PostRule and MatchAction elements.  \n If null such elements may not be present.\n@throws SAXException\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "pattern file"
        },
        {
          "name": "patlist",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.Pattern\u003e",
          "type_short": "ArrayList",
          "comment": "list for patterns to be added to"
        },
        {
          "name": "pfactory",
          "type_long": "ghidra.util.bytesearch.PatternFactory",
          "type_short": "PatternFactory",
          "comment": "optional factory for use in parsing PostRule and MatchAction elements.  \n If null such elements may not be present."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "org.xml.sax.SAXException",
          "type_short": "SAXException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readPostPatterns",
      "comment": "Read just the post patterns from the  tags",
      "javadoc": "Read just the post patterns from the \u003cpatternpair\u003e tags\n@param file is the file to read from\n@param patternList collects the resulting Pattern objects\n@param pfactory is the factory for constructing postrules and matchactions\n@throws IOException\n@throws SAXException",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "is the file to read from"
        },
        {
          "name": "patternList",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.Pattern\u003e",
          "type_short": "ArrayList",
          "comment": "collects the resulting Pattern objects"
        },
        {
          "name": "pfactory",
          "type_long": "ghidra.util.bytesearch.PatternFactory",
          "type_short": "PatternFactory",
          "comment": "is the factory for constructing postrules and matchactions"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "org.xml.sax.SAXException",
          "type_short": "SAXException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
