{
  "name": "PatternPairSet",
  "comment": "A set of \"pre\" DittedBitSequences and a set of \"post\" Patterns are paired to form a larger pattern.\n To match, a sequence from the \"pre\" sequence set must first match, then one of the \"post\" patterns\n is matched relative to the matching \"pre\" pattern.  This class is really a storage object for the\n patterns and provides a mechanism to read the pre/post patterns from an XML file.\n\n The larger pattern has the idea of bits of check, which means the number of bits that are fixed to\n a value when matching (not don\u0027t care).  There is a pre pattern bits of check and post pattern bits\n of check.  The bits of check are used to statistically gauge the accuracy of the pattern.\n \n An example of the XML format follows:\n   \n    \n      0xe12fff1.                  \n      0xe12fff1e 0x46c0           \n      0xe12fff1e 0xe1a00000       \n    \n    \n  \n       0xe24dd...                              11101001 00101101 .1...... ....0000  \n       11101001 00101101 .1...... ....0000     0xe24dd...                           \n       11101001 00101101 .1...... ....0000     0x........ 0xe24dd...                \n      \n      \n      \n    \n  \n  \n  Note: The post Patterns can also have a set of rules that must be satisfied along with one of the\n  Pattern DittedBitSequence matches.",
  "javadoc": "A set of \"pre\" DittedBitSequences and a set of \"post\" Patterns are paired to form a larger pattern.\n To match, a sequence from the \"pre\" sequence set must first match, then one of the \"post\" patterns\n is matched relative to the matching \"pre\" pattern.  This class is really a storage object for the\n patterns and provides a mechanism to read the pre/post patterns from an XML file.\n\n The larger pattern has the idea of bits of check, which means the number of bits that are fixed to\n a value when matching (not don\u0027t care).  There is a pre pattern bits of check and post pattern bits\n of check.  The bits of check are used to statistically gauge the accuracy of the pattern.\n \n An example of the XML format follows:\n   \u003cpatternpairs totalbits\u003d\"32\"postbits\u003d\"16\"\u003e\n    \u003cprepatterns\u003e\n      \u003cdata\u003e0xe12fff1.                  \u003c/data\u003e\n      \u003cdata\u003e0xe12fff1e 0x46c0           \u003c/data\u003e\n      \u003cdata\u003e0xe12fff1e 0xe1a00000       \u003c/data\u003e\n    \u003c/prepatterns\u003e\n    \n  \u003cpostpatterns\u003e\n      \u003cdata\u003e 0xe24dd...                              11101001 00101101 .1...... ....0000  \u003c/data\u003e\n      \u003cdata\u003e 11101001 00101101 .1...... ....0000     0xe24dd...                           \u003c/data\u003e\n      \u003cdata\u003e 11101001 00101101 .1...... ....0000     0x........ 0xe24dd...                \u003c/data\u003e\n      \u003calign mark\u003d\"0\"bits\u003d\"3\"/\u003e\n      \u003csetcontext name\u003d\"TMode\"value\u003d\"0\"/\u003e\n      \u003cfuncstart/\u003e\n    \u003c/postpatterns\u003e\n  \u003c/patternpairs\u003e\n  \n  Note: The post Patterns can also have a set of rules that must be satisfied along with one of the\n  Pattern DittedBitSequence matches.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "totalBitsOfCheck",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "postBitsOfCheck",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "preSequences",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.DittedBitSequence\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "postPatterns",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.Pattern\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an empty PatternPairSet.  Use XML to initialize the pattern sets.",
      "javadoc": "Construct an empty PatternPairSet.  Use XML to initialize the pattern sets.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createFinalPatterns",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "finalpats",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.Pattern\u003e",
          "type_short": "ArrayList",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "extractPostPatterns",
      "comment": "Add this PatternPairSets post patterns to an existing arraylist of patterns.",
      "javadoc": "Add this PatternPairSets post patterns to an existing arraylist of patterns.\n@param postpats array to add this PatternPairSets post patterns into",
      "static": false,
      "params": [
        {
          "name": "postpats",
          "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.Pattern\u003e",
          "type_short": "ArrayList",
          "comment": "array to add this PatternPairSets post patterns into"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXml",
      "comment": "Restore PatternPairSet from XML pull parser",
      "javadoc": "Restore PatternPairSet from XML pull parser\n@param parser XML pull parser\n@param pfactory pattern factory user to construct patterns\n@throws IOException if pull parsing fails",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "XML pull parser"
        },
        {
          "name": "pfactory",
          "type_long": "ghidra.util.bytesearch.PatternFactory",
          "type_short": "PatternFactory",
          "comment": "pattern factory user to construct patterns"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if pull parsing fails"
        }
      ]
    },
    {
      "name": "getPreSequences",
      "comment": "Get the \"pre\" parts of the patterns",
      "javadoc": "Get the \"pre\" parts of the patterns\n@return pre sequences",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.DittedBitSequence\u003e",
        "type_short": "ArrayList",
        "comment": "pre sequences"
      },
      "throws": []
    },
    {
      "name": "getPostPatterns",
      "comment": "Get the \"post\" parts of the patterns",
      "javadoc": "Get the \"post\" parts of the patterns\n@return post patterns",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.ArrayList\u003cghidra.util.bytesearch.Pattern\u003e",
        "type_short": "ArrayList",
        "comment": "post patterns"
      },
      "throws": []
    },
    {
      "name": "getPostBitsOfCheck",
      "comment": "Get the required number of fixed bits after the prepattern",
      "javadoc": "Get the required number of fixed bits after the prepattern\n@return number of post bits",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of post bits"
      },
      "throws": []
    },
    {
      "name": "getTotalBitsOfCheck",
      "comment": "Get the required number of fixed bits in the whole pattern",
      "javadoc": "Get the required number of fixed bits in the whole pattern\n@return number of total fixed bits",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of total fixed bits"
      },
      "throws": []
    }
  ]
}
