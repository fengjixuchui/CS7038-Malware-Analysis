{
  "name": "DependencyGraph",
  "comment": "Original Dependency Graph implementation that uses HashMaps and HashSets.\n Side affect of these is that data pulled from the graph (#pop()) is not performed\n in a deterministic order.  However, load time for the graph is O(1).",
  "javadoc": "Original Dependency Graph implementation that uses {@link HashMap}s and {@link HashSet}s.\n Side affect of these is that data pulled from the graph ({@link #pop()}) is not performed\n in a deterministic order.  However, load time for the graph is O(1).\n@param \u003cT\u003e the type of value.  This class uses the values as keys in HashSets, so the value\n type must be meet the equals() and hashCode() requirements for hashing.\n@see AbstractDependencyGraph\n@see DeterministicDependencyGraph",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.graph.AbstractDependencyGraph",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Copy constructor",
      "javadoc": "Copy constructor\n@param other the other DependencyGraph to copy",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.util.graph.DependencyGraph\u003cT\u003e",
          "type_short": "DependencyGraph",
          "comment": "the other DependencyGraph to copy"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.graph.DependencyGraph\u003cT\u003e",
        "type_short": "DependencyGraph",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createNodeMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Map\u003cT,ghidra.util.graph.AbstractDependencyGraph\u003cT\u003e.DependencyNode\u003e",
        "type_short": "Map",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createNodeSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cT\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createDependencyNodeSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cghidra.util.graph.AbstractDependencyGraph\u003cT\u003e.DependencyNode\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNodeMapValues",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cT\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    }
  ]
}
