{
  "name": "SimpleWeightedDigraph",
  "comment": "A simple graph is a graph with no parallel edges or loops. This class models\n a simple digraph -- edges are directed and a single edge may go from any vertex\n to any other vertex. \n Attempting to add an edge from A to B when an edge from A to B already exists\n causes the edge weight to be increased by the defaultEdgeWeight or the weight\n specified. \n \n This class may be used when simple unweighted graphs are desired. (Simply ignore\n edge weights.)",
  "javadoc": "A simple graph is a graph with no parallel edges or loops. This class models\n a simple digraph -- edges are directed and a single edge may go from any vertex\n to any other vertex. {@literal It is possible to have edges A--\u003eB and B--\u003eA however.}\n Attempting to add an edge from A to B when an edge from A to B already exists\n causes the edge weight to be increased by the defaultEdgeWeight or the weight\n specified. \n \n This class may be used when simple unweighted graphs are desired. (Simply ignore\n edge weights.)",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.graph.WeightedDigraph",
  "fields": [
    {
      "name": "allowLoops",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for SimpleWeightedDigraph.",
      "javadoc": "Constructor for SimpleWeightedDigraph.\n@param vertexCapacity initially allocate space for this many vertices.\n@param edgeCapacity initially allocate space for this many edges.\n@param defaultEdgeWeight edges are given this weight at creation time by default. \n the default is 1.0 for constructors where not specified.\n@param loopsAllowed Loops are allowed in the graph if this value set true\n in constructor. Default value is false.\n \n If vertex weights are desired, the class can either be extended or a vertex \n attribute can be defined using the code\n DoubleAttribute vertexWeights \u003d \n \t\t(DoubleAttribute)this.vertexAttributes().createAttribute(\"weight\", AttributeManager.DOUBLE_TYPE);",
      "static": false,
      "params": [
        {
          "name": "vertexCapacity",
          "type_long": "int",
          "type_short": "int",
          "comment": "initially allocate space for this many vertices."
        },
        {
          "name": "edgeCapacity",
          "type_long": "int",
          "type_short": "int",
          "comment": "initially allocate space for this many edges."
        },
        {
          "name": "defaultEdgeWeight",
          "type_long": "double",
          "type_short": "double",
          "comment": "edges are given this weight at creation time by default. \n the default is 1.0 for constructors where not specified."
        },
        {
          "name": "loopsAllowed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "Loops are allowed in the graph if this value set true\n in constructor. Default value is false.\n \n If vertex weights are desired, the class can either be extended or a vertex \n attribute can be defined using the code\n DoubleAttribute vertexWeights \u003d \n \t\t(DoubleAttribute)this.vertexAttributes().createAttribute(\"weight\", AttributeManager.DOUBLE_TYPE);"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for SimpleWeightedDigraph. \n \n AllowLoops is false by default.",
      "javadoc": "Constructor for SimpleWeightedDigraph. \n \n AllowLoops is false by default.\n@param vertexCapacity\n@param edgeCapacity\n@param defaultEdgeWeight",
      "static": false,
      "params": [
        {
          "name": "vertexCapacity",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "edgeCapacity",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "defaultEdgeWeight",
          "type_long": "double",
          "type_short": "double",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for SimpleWeightedDigraph. \n \n AllowLoops is false by default.\n The defaultEdgeWeight is 1.0.",
      "javadoc": "Constructor for SimpleWeightedDigraph. \n \n AllowLoops is false by default.\n The defaultEdgeWeight is 1.0.\n@param vertexCapacity\n@param edgeCapacity",
      "static": false,
      "params": [
        {
          "name": "vertexCapacity",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "edgeCapacity",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Add an edge with the the default edge weight. \n \n If an edge from and to the vertices\n specified by the edge already exists in the graph, \n then the edge weight in increased by the default value.",
      "javadoc": "Add an edge with the the default edge weight. \n \n If an edge from and to the vertices\n specified by the edge already exists in the graph, \n then the edge weight in increased by the default value.\n@param e the edge to add.\n@return true if the edge was added sucessfully.",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "ghidra.util.graph.Edge",
          "type_short": "Edge",
          "comment": "the edge to add."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the edge was added sucessfully."
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Add an edge with the the specified edge weight. \n \n If an edge from and to the vertices\n specified by the edge already exists in the graph,\n then the edge weight in increased\n by the specified value.",
      "javadoc": "Add an edge with the the specified edge weight. \n \n If an edge from and to the vertices\n specified by the edge already exists in the graph,\n then the edge weight in increased\n by the specified value.\n@return true if the edge was added sucessfully.",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "ghidra.util.graph.Edge",
          "type_short": "Edge",
          "comment": ""
        },
        {
          "name": "weight",
          "type_long": "double",
          "type_short": "double",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the edge was added sucessfully."
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "ghidra.util.graph.Edge",
          "type_short": "Edge",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWeight",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "ghidra.util.graph.Edge",
          "type_short": "Edge",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.graph.DirectedGraph",
        "type_short": "DirectedGraph",
        "comment": ""
      },
      "throws": []
    }
  ]
}
