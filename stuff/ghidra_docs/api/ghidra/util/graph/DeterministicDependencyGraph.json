{
  "name": "DeterministicDependencyGraph",
  "comment": "Dependency Graph that uses TreeMaps and ListOrderedSets to provide\n determinism in pulling (#pop()) from the graph.  This class seems to consume more\n memory than DependencyGraph, and if memory is not an issue, it also seems to be\n slightly faster as well.\n \n This class was implemented to provide determinism while doing\n developmental debugging.",
  "javadoc": "Dependency Graph that uses {@link TreeMap}s and {@link ListOrderedSet}s to provide\n determinism in pulling ({@link #pop()}) from the graph.  This class seems to consume more\n memory than {@link DependencyGraph}, and if memory is not an issue, it also seems to be\n slightly faster as well.\n \u003cP\u003e\n This class was implemented to provide determinism while doing\n developmental debugging.\n@param \u003cT\u003e the type of value.\n@see AbstractDependencyGraph\n@see DependencyGraph",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.graph.AbstractDependencyGraph",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Copy constructor",
      "javadoc": "Copy constructor\n@param other the other DependencyGraph to copy",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.util.graph.DeterministicDependencyGraph\u003cT\u003e",
          "type_short": "DeterministicDependencyGraph",
          "comment": "the other DependencyGraph to copy"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.graph.DeterministicDependencyGraph\u003cT\u003e",
        "type_short": "DeterministicDependencyGraph",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createNodeMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Map\u003cT,ghidra.util.graph.AbstractDependencyGraph\u003cT\u003e.DependencyNode\u003e",
        "type_short": "Map",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createNodeSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cT\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createDependencyNodeSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cghidra.util.graph.AbstractDependencyGraph\u003cT\u003e.DependencyNode\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNodeMapValues",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cT\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    }
  ]
}
