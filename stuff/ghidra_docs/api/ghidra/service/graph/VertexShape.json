{
  "name": "VertexShape",
  "comment": "Class for defining shapes to use for rendering vertices in a graph",
  "javadoc": "Class for defining shapes to use for rendering vertices in a graph",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "registeredShapes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.service.graph.VertexShape\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "RECTANGLE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.service.graph.VertexShape",
      "type_short": "VertexShape",
      "constant_value": null
    },
    {
      "name": "ELLIPSE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.service.graph.VertexShape",
      "type_short": "VertexShape",
      "constant_value": null
    },
    {
      "name": "TRIANGLE_UP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.service.graph.VertexShape",
      "type_short": "VertexShape",
      "constant_value": null
    },
    {
      "name": "TRIANGLE_DOWN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.service.graph.VertexShape",
      "type_short": "VertexShape",
      "constant_value": null
    },
    {
      "name": "STAR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.service.graph.VertexShape",
      "type_short": "VertexShape",
      "constant_value": null
    },
    {
      "name": "DIAMOND",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.service.graph.VertexShape",
      "type_short": "VertexShape",
      "constant_value": null
    },
    {
      "name": "PENTAGON",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.service.graph.VertexShape",
      "type_short": "VertexShape",
      "constant_value": null
    },
    {
      "name": "HEXAGON",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.service.graph.VertexShape",
      "type_short": "VertexShape",
      "constant_value": null
    },
    {
      "name": "OCTAGON",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.service.graph.VertexShape",
      "type_short": "VertexShape",
      "constant_value": null
    },
    {
      "name": "cachedShape",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Shape",
      "type_short": "Shape",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the name of the shape",
      "javadoc": "Returns the name of the shape\n@return the name of the shape",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the shape"
      },
      "throws": []
    },
    {
      "name": "getShape",
      "comment": "Returns the Shape for this VertexShape instance",
      "javadoc": "Returns the {@link Shape} for this {@link VertexShape} instance\n@return the {@link Shape} for this {@link VertexShape} instance",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Shape",
        "type_short": "Shape",
        "comment": "the Shape for this VertexShape instance"
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "shape",
          "type_long": "java.awt.Shape",
          "type_short": "Shape",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Shape",
        "type_short": "Shape",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLabelPosition",
      "comment": "Gets the relative amount of margin space to allocate above the label. The default is\n 0.5 which will center the label in the associated shape. A value closer to 0 will move\n the label closer to the top and a value closer to 1 will move the label closer to the \n bottom.",
      "javadoc": "Gets the relative amount of margin space to allocate above the label. The default is\n 0.5 which will center the label in the associated shape. A value closer to 0 will move\n the label closer to the top and a value closer to 1 will move the label closer to the \n bottom.\n@return the relative amount of margin space to allocate obove the label.s",
      "static": false,
      "params": [],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": "the relative amount of margin space to allocate obove the label.s"
      },
      "throws": []
    },
    {
      "name": "getShapeToLabelRatio",
      "comment": "Returns the size factor for a shape relative to its label. Shapes are sized based on the\n label of a vertex so that the label can fit inside the shape (mostly). Some subclasses\n will need to override this value to some value  1 to fit the label in the shape. For \n example, a rectangle shape does not need to be extended because text naturally fits. But\n for a shape like a triangle, its bounding box needs to be bigger so that text doesn\u0027t\n \"stick out\" in the narrow part of the triangle.",
      "javadoc": "Returns the size factor for a shape relative to its label. Shapes are sized based on the\n label of a vertex so that the label can fit inside the shape (mostly). Some subclasses\n will need to override this value to some value \u003e 1 to fit the label in the shape. For \n example, a rectangle shape does not need to be extended because text naturally fits. But\n for a shape like a triangle, its bounding box needs to be bigger so that text doesn\u0027t\n \"stick out\" in the narrow part of the triangle.\n@return the size factor for a shape relatvie to its label",
      "static": false,
      "params": [],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": "the size factor for a shape relatvie to its label"
      },
      "throws": []
    },
    {
      "name": "getMaxWidthToHeightRatio",
      "comment": "This is a factor to keep some shapes from being so distorted by very long labels that they\n effectively lose their shape when seen by the user",
      "javadoc": "This is a factor to keep some shapes from being so distorted by very long labels that they\n effectively lose their shape when seen by the user\n@return the max width to height ratio",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the max width to height ratio"
      },
      "throws": []
    },
    {
      "name": "createShape",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Shape",
        "type_short": "Shape",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getShape",
      "comment": "Returns the VertexShape for the given shape name",
      "javadoc": "Returns the {@link VertexShape} for the given shape name\n@param shapeName the name of the shape for which to get the {@link VertexShape}\n@return the {@link VertexShape} for the given shape name",
      "static": true,
      "params": [
        {
          "name": "shapeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the shape for which to get the VertexShape"
        }
      ],
      "return": {
        "type_long": "ghidra.service.graph.VertexShape",
        "type_short": "VertexShape",
        "comment": "the VertexShape for the given shape name"
      },
      "throws": []
    },
    {
      "name": "getShapeNames",
      "comment": "Returns a list of names for all the supported VertexShapes",
      "javadoc": "Returns a list of names for all the supported {@link VertexShape}s\n@return a list of names for all the supported {@link VertexShape}s",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "a list of names for all the supported VertexShapes"
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
