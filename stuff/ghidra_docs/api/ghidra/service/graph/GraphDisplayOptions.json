{
  "name": "GraphDisplayOptions",
  "comment": "Class for managing graph display options. This includes color options for each vertex\n and edge type and shapes for vertex types.",
  "javadoc": "Class for managing graph display options. This includes color options for each vertex\n and edge type and shapes for vertex types.",
  "static": false,
  "implements": [
    "ghidra.framework.options.OptionsChangeListener"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DEFAULT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.service.graph.GraphDisplayOptions",
      "type_short": "GraphDisplayOptions",
      "constant_value": null
    },
    {
      "name": "FONT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Font\""
    },
    {
      "name": "LABEL_POSITION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Label Position\""
    },
    {
      "name": "USE_ICONS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Use Icons\""
    },
    {
      "name": "DEFAULT_LAYOUT_ALGORITHM",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Default Layout Algorithm\""
    },
    {
      "name": "EDGE_COLORS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Edge Colors\""
    },
    {
      "name": "VERTEX_COLORS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Vertex Colors\""
    },
    {
      "name": "VERTEX_SHAPES",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Vertex Shapes\""
    },
    {
      "name": "MISCELLANEOUS_OPTIONS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Miscellaneous\""
    },
    {
      "name": "DEFAULT_VERTEX_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Default Vertex Color\""
    },
    {
      "name": "DEFAULT_EDGE_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Default Edge Color\""
    },
    {
      "name": "DEFAULT_VERTEX_SHAPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Default Vertex Shape\""
    },
    {
      "name": "FAVORED_EDGE_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Favored Edge Type\""
    },
    {
      "name": "VERTEX_SELECTION_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Selected Vertex Color\""
    },
    {
      "name": "EDGE_SELECTION_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Selected Edge Color\""
    },
    {
      "name": "MAX_NODES_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Max Graph Size\""
    },
    {
      "name": "graphType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.service.graph.GraphType",
      "type_short": "GraphType",
      "constant_value": null
    },
    {
      "name": "vertexColorMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,java.awt.Color\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "edgeColorMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,java.awt.Color\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "vertexShapeMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.service.graph.VertexShape\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "edgePriorityMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Integer\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "changeListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cjavax.swing.event.ChangeListener\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "vertexSelectionColor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "edgeSelectionColor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "defaultVertexColor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "defaultEdgeColor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "favoredEdgeType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "defaultVertexShape",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.service.graph.VertexShape",
      "type_short": "VertexShape",
      "constant_value": null
    },
    {
      "name": "vertexLabelOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "vertexColorOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "vertexShapeOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "edgeColorOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "rootOptionsName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "registeredWithTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "defaultLayoutAlgorithmName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "useIcons",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "labelPosition",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.service.graph.GraphLabelPosition",
      "type_short": "GraphLabelPosition",
      "constant_value": null
    },
    {
      "name": "font",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Font",
      "type_short": "Font",
      "constant_value": null
    },
    {
      "name": "arrowLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "maxNodeCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new GraphTypeDisplayOptions for the given GraphType",
      "javadoc": "Constructs a new GraphTypeDisplayOptions for the given {@link GraphType}\n@param graphType The {@link GraphType} for which to define display options",
      "static": false,
      "params": [
        {
          "name": "graphType",
          "type_long": "ghidra.service.graph.GraphType",
          "type_short": "GraphType",
          "comment": "The GraphType for which to define display options"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new GraphTypeDisplayOptions for the given GraphType and initializes\n from tool options. Note this form should only be used for display options on\n GraphTypes that have options registered in the tool.",
      "javadoc": "Constructs a new GraphTypeDisplayOptions for the given {@link GraphType} and initializes\n from tool options. Note this form should only be used for display options on\n {@link GraphType}s that have options registered in the tool.\n@param graphType The {@link GraphType} for which to define display options\n@param tool the tool from which to initialize from {@link ToolOptions}",
      "static": false,
      "params": [
        {
          "name": "graphType",
          "type_long": "ghidra.service.graph.GraphType",
          "type_short": "GraphType",
          "comment": "The GraphType for which to define display options"
        },
        {
          "name": "tool",
          "type_long": "docking.Tool",
          "type_short": "Tool",
          "comment": "the tool from which to initialize from ToolOptions"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeEdgePriorities",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeDefaults",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addChangeListener",
      "comment": "Adds a ChangeListener to be notified when display options change",
      "javadoc": "Adds a ChangeListener to be notified when display options change\n@param listener the listener to be notified.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "the listener to be notified."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeChangeListener",
      "comment": "Removes the listener so that it won\u0027t be notified of changes any longer",
      "javadoc": "Removes the listener so that it won\u0027t be notified of changes any longer\n@param listener the listener to be removed",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "the listener to be removed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDefaultVertexShape",
      "comment": "Sets the default shape to be used by vertices that don\u0027t have a vertex type set",
      "javadoc": "Sets the default shape to be used by vertices that don\u0027t have a vertex type set\n@param shape the default vertex shape",
      "static": false,
      "params": [
        {
          "name": "shape",
          "type_long": "ghidra.service.graph.VertexShape",
          "type_short": "VertexShape",
          "comment": "the default vertex shape"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDefaultVertexColor",
      "comment": "Sets the default color to be used by vertices that don\u0027t have a vertex type set",
      "javadoc": "Sets the default color to be used by vertices that don\u0027t have a vertex type set\n@param color the default vertex shape",
      "static": false,
      "params": [
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the default vertex shape"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDefaultEdgeColor",
      "comment": "Sets the default color to be used by edges that don\u0027t have a edge type set",
      "javadoc": "Sets the default color to be used by edges that don\u0027t have a edge type set\n@param color the default edge shape",
      "static": false,
      "params": [
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the default edge shape"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultEdgeColor",
      "comment": "Returns the default color for edges that don\u0027t have an edge type set",
      "javadoc": "Returns the default color for edges that don\u0027t have an edge type set\n@return the default color for edges that don\u0027t have an edge type set",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "the default color for edges that don\u0027t have an edge type set"
      },
      "throws": []
    },
    {
      "name": "getDefaultVertexColor",
      "comment": "Returns the default color for vertices that don\u0027t have an vertex type set",
      "javadoc": "Returns the default color for vertices that don\u0027t have an vertex type set\n@return the default color for vertices that don\u0027t have an vertex type set",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "the default color for vertices that don\u0027t have an vertex type set"
      },
      "throws": []
    },
    {
      "name": "setVertexLabelOverrideAttributeKey",
      "comment": "Sets the attribute key that can be used to override the label text shown for the vertex.\n Normally, the vertex\u0027s name is shown as the label.",
      "javadoc": "Sets the attribute key that can be used to override the label text shown for the vertex.\n Normally, the vertex\u0027s name is shown as the label.\n@param attributeKey the attribute key that, if set, will be used to define the vertice\u0027s label",
      "static": false,
      "params": [
        {
          "name": "attributeKey",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the attribute key that, if set, will be used to define the vertice\u0027s label"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVertexLabelOverride",
      "comment": "Returns the attribute key that can override the vertices label text",
      "javadoc": "Returns the attribute key that can override the vertices label text\n@return the attribute key that can override the vertices label text",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the attribute key that can override the vertices label text"
      },
      "throws": []
    },
    {
      "name": "setVertexColorOverrideAttributeKey",
      "comment": "Sets the attribute key that can be used to override the color for a vertex. Normally, the\n color is determined by the vertex type, which will be mapped to a color",
      "javadoc": "Sets the attribute key that can be used to override the color for a vertex. Normally, the\n color is determined by the vertex type, which will be mapped to a color\n@param attributeKey the attribute key that, if set, will be used to define the vertice\u0027s color",
      "static": false,
      "params": [
        {
          "name": "attributeKey",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the attribute key that, if set, will be used to define the vertice\u0027s color"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setEdgeColorOverrideAttributeKey",
      "comment": "Sets the attribute key that can be used to override the color for an edge. Normally, the\n color is determined by the edge type, which will be mapped to a color",
      "javadoc": "Sets the attribute key that can be used to override the color for an edge. Normally, the\n color is determined by the edge type, which will be mapped to a color\n@param attributeKey the attribute key that, if set, will be used to define the edge\u0027s color",
      "static": false,
      "params": [
        {
          "name": "attributeKey",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the attribute key that, if set, will be used to define the edge\u0027s color"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEdgeColorOverrideAttributeKey",
      "comment": "Returns the attribute key that can be used to override the color of an edge",
      "javadoc": "Returns the attribute key that can be used to override the color of an edge\n@return the attribute key that can be used to override the color of an edge",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the attribute key that can be used to override the color of an edge"
      },
      "throws": []
    },
    {
      "name": "setVertexShapeOverrideAttributeKey",
      "comment": "Sets the attribute key that can be used to override the shape for a vertex. Normally, the\n shape is determined by the vertex type, which will be mapped to a shape",
      "javadoc": "Sets the attribute key that can be used to override the shape for a vertex. Normally, the\n shape is determined by the vertex type, which will be mapped to a shape\n@param attributeKey the attribute key that, if set, will be used to define the vertice\u0027s shape",
      "static": false,
      "params": [
        {
          "name": "attributeKey",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the attribute key that, if set, will be used to define the vertice\u0027s shape"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVertexLabel",
      "comment": "Returns the text that will be displayed as the label for the given vertex",
      "javadoc": "Returns the text that will be displayed as the label for the given vertex\n@param vertex the vertex for which to get label text\n@return the text that will be displayed as the label for the given vertex",
      "static": false,
      "params": [
        {
          "name": "vertex",
          "type_long": "ghidra.service.graph.AttributedVertex",
          "type_short": "AttributedVertex",
          "comment": "the vertex for which to get label text"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the text that will be displayed as the label for the given vertex"
      },
      "throws": []
    },
    {
      "name": "getVertexShape",
      "comment": "Returns the VertexShape that will be used to draw the vertex\u0027s shape",
      "javadoc": "Returns the {@link VertexShape} that will be used to draw the vertex\u0027s shape\n@param vertex the vertex for which to get the shape\n@return the {@link VertexShape} that will be used to draw the vertex\u0027s shape",
      "static": false,
      "params": [
        {
          "name": "vertex",
          "type_long": "ghidra.service.graph.AttributedVertex",
          "type_short": "AttributedVertex",
          "comment": "the vertex for which to get the shape"
        }
      ],
      "return": {
        "type_long": "ghidra.service.graph.VertexShape",
        "type_short": "VertexShape",
        "comment": "the VertexShape that will be used to draw the vertex\u0027s shape"
      },
      "throws": []
    },
    {
      "name": "getVertexColor",
      "comment": "Returns the color that will be used to draw the vertex",
      "javadoc": "Returns the color that will be used to draw the vertex\n@param vertex the vertex for which to get the color\n@return the color that will be used to draw the vertex",
      "static": false,
      "params": [
        {
          "name": "vertex",
          "type_long": "ghidra.service.graph.AttributedVertex",
          "type_short": "AttributedVertex",
          "comment": "the vertex for which to get the color"
        }
      ],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "the color that will be used to draw the vertex"
      },
      "throws": []
    },
    {
      "name": "getEdgeColor",
      "comment": "Returns the color that will be used to draw the edge",
      "javadoc": "Returns the color that will be used to draw the edge\n@param edge the edge for which to get the color\n@return the color that will be used to draw the edge",
      "static": false,
      "params": [
        {
          "name": "edge",
          "type_long": "ghidra.service.graph.AttributedEdge",
          "type_short": "AttributedEdge",
          "comment": "the edge for which to get the color"
        }
      ],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "the color that will be used to draw the edge"
      },
      "throws": []
    },
    {
      "name": "getEdgePriority",
      "comment": "Returns the priority for the given edge type. This is used by layout algorithms to\n determine which edges should have more influence on the layout.",
      "javadoc": "Returns the priority for the given edge type. This is used by layout algorithms to\n determine which edges should have more influence on the layout.\n@param edgeType the edge type for which to get it\u0027s priority\n@return the priority for the given edge type",
      "static": false,
      "params": [
        {
          "name": "edgeType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the edge type for which to get it\u0027s priority"
        }
      ],
      "return": {
        "type_long": "java.lang.Integer",
        "type_short": "Integer",
        "comment": "the priority for the given edge type"
      },
      "throws": []
    },
    {
      "name": "getFavoredEdgeType",
      "comment": "Returns the edge type that is the preferred edge for layout purposes",
      "javadoc": "Returns the edge type that is the preferred edge for layout purposes\n@return the edge type that is the preferred edge for layout purposes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the edge type that is the preferred edge for layout purposes"
      },
      "throws": []
    },
    {
      "name": "setFavoredEdgeType",
      "comment": "Sets the favored edge type. The favored edge type is used to influence layout algorithms",
      "javadoc": "Sets the favored edge type. The favored edge type is used to influence layout algorithms\n@param favoredEdgeType the edge type that is to be favored by layout algorithms",
      "static": false,
      "params": [
        {
          "name": "favoredEdgeType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the edge type that is to be favored by layout algorithms"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGraphType",
      "comment": "Returns the GraphType that this object provides display options for",
      "javadoc": "Returns the {@link GraphType} that this object provides display options for\n@return the {@link GraphType} that this object provides display options for",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.service.graph.GraphType",
        "type_short": "GraphType",
        "comment": "the GraphType that this object provides display options for"
      },
      "throws": []
    },
    {
      "name": "getVertexColor",
      "comment": "Returns the color for the given vertex type",
      "javadoc": "Returns the color for the given vertex type\n@param vertexType the vertex type to get the color for\n@return the color for the given vertex type",
      "static": false,
      "params": [
        {
          "name": "vertexType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the vertex type to get the color for"
        }
      ],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "the color for the given vertex type"
      },
      "throws": []
    },
    {
      "name": "setVertexColor",
      "comment": "Sets the color for vertices with the given vertex type",
      "javadoc": "Sets the color for vertices with the given vertex type\n@param vertexType the vertex type for which to set its color\n@param color the color to use for vertices with the given vertex type",
      "static": false,
      "params": [
        {
          "name": "vertexType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the vertex type for which to set its color"
        },
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the color to use for vertices with the given vertex type"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVertexShapeName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vertexType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVertexShape",
      "comment": "Sets the VertexShape to use for vertices with the given vertex type",
      "javadoc": "Sets the {@link VertexShape} to use for vertices with the given vertex type\n@param vertexType the vertex type for which to set its shape\n@param vertexShape the {@link VertexShape} to use for vertices with the given vertex type",
      "static": false,
      "params": [
        {
          "name": "vertexType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the vertex type for which to set its shape"
        },
        {
          "name": "vertexShape",
          "type_long": "ghidra.service.graph.VertexShape",
          "type_short": "VertexShape",
          "comment": "the VertexShape to use for vertices with the given vertex type"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEdgeColor",
      "comment": "Returns the color for the given edge type",
      "javadoc": "Returns the color for the given edge type\n@param edgeType the edge type whose color is to be determined.\n@return the color for the given edge type.",
      "static": false,
      "params": [
        {
          "name": "edgeType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the edge type whose color is to be determined."
        }
      ],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "the color for the given edge type."
      },
      "throws": []
    },
    {
      "name": "setEdgeColor",
      "comment": "Sets the color for edges with the given edge type",
      "javadoc": "Sets the color for edges with the given edge type\n@param edgeType the edge type for which to set its color\n@param color the new color for edges with the given edge type",
      "static": false,
      "params": [
        {
          "name": "edgeType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the edge type for which to set its color"
        },
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the new color for edges with the given edge type"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "optionsChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.framework.options.ToolOptions",
          "type_short": "ToolOptions",
          "comment": ""
        },
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "oldValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "newValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.bean.opteditor.OptionsVetoException",
          "type_short": "OptionsVetoException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRootOptionsName",
      "comment": "Returns the name for the root Options name for this GraphDisplayOptions",
      "javadoc": "Returns the name for the root Options name for this {@link GraphDisplayOptions}\n@return the name for the root Options name for this {@link GraphDisplayOptions}",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name for the root Options name for this GraphDisplayOptions"
      },
      "throws": []
    },
    {
      "name": "getVertexColorOverrideAttributeKey",
      "comment": "Returns the attribute key that can be used to override the color of a vertex. Normally,\n a vertex is colored based on its vertex type. However, if this value is non-null, a vertex\n can override its color by setting an attribute using this key name.",
      "javadoc": "Returns the attribute key that can be used to override the color of a vertex. Normally,\n a vertex is colored based on its vertex type. However, if this value is non-null, a vertex\n can override its color by setting an attribute using this key name.\n@return the attribute key that can be used to override the color of a vertex",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the attribute key that can be used to override the color of a vertex"
      },
      "throws": []
    },
    {
      "name": "getVertexShapeOverrideAttributeKey",
      "comment": "Returns the attribute key that can be used to override the shape of a vertex. Normally,\n a vertex has a shape based on its vertex type. However, if this value is non-null, a vertex\n can override its shape by setting an attribute using this key name.",
      "javadoc": "Returns the attribute key that can be used to override the shape of a vertex. Normally,\n a vertex has a shape based on its vertex type. However, if this value is non-null, a vertex\n can override its shape by setting an attribute using this key name.\n@return the attribute key that can be used to override the shape of a vertex",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the attribute key that can be used to override the shape of a vertex"
      },
      "throws": []
    },
    {
      "name": "getDefaultVertexShape",
      "comment": "returns the VertexShape for any vertex that has not vertex type defined",
      "javadoc": "returns the {@link VertexShape} for any vertex that has not vertex type defined\n@return the {@link VertexShape} for any vertex that has not vertex type defined",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.service.graph.VertexShape",
        "type_short": "VertexShape",
        "comment": "the VertexShape for any vertex that has not vertex type defined"
      },
      "throws": []
    },
    {
      "name": "getVertexShape",
      "comment": "Returns the VertexShape for vertices that have the given vertex type",
      "javadoc": "Returns the {@link VertexShape} for vertices that have the given vertex type\n@param vertexType the vertex type for which to get its asigned shape\n@return the {@link VertexShape} for vertices that have the given vertex type",
      "static": false,
      "params": [
        {
          "name": "vertexType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the vertex type for which to get its asigned shape"
        }
      ],
      "return": {
        "type_long": "ghidra.service.graph.VertexShape",
        "type_short": "VertexShape",
        "comment": "the VertexShape for vertices that have the given vertex type"
      },
      "throws": []
    },
    {
      "name": "getVertexSelectionColor",
      "comment": "Returns the vertex selection color",
      "javadoc": "Returns the vertex selection color\n@return the vertex selection color",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "the vertex selection color"
      },
      "throws": []
    },
    {
      "name": "setVertexSelectionColor",
      "comment": "Sets the vertex selection color",
      "javadoc": "Sets the vertex selection color\n@param vertexSelectionColor the color to use for highlighting selected vertices",
      "static": false,
      "params": [
        {
          "name": "vertexSelectionColor",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the color to use for highlighting selected vertices"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEdgeSelectionColor",
      "comment": "Returns the color for edge selections",
      "javadoc": "Returns the color for edge selections\n@return the color fore edge selections",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "the color fore edge selections"
      },
      "throws": []
    },
    {
      "name": "setEdgeSelectionColor",
      "comment": "Sets the edge selection color",
      "javadoc": "Sets the edge selection color\n@param edgeSelectionColor color to use for highlighting selected edges",
      "static": false,
      "params": [
        {
          "name": "edgeSelectionColor",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "color to use for highlighting selected edges"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultLayoutAlgorithmNameLayout",
      "comment": "Returns the name of the default graph layout algorithm",
      "javadoc": "Returns the name of the default graph layout algorithm\n@return the name of the default graph layout algorithms",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the default graph layout algorithms"
      },
      "throws": []
    },
    {
      "name": "setDefaultLayoutAlgorithmName",
      "comment": "Sets the name of the default layout algorithm",
      "javadoc": "Sets the name of the default layout algorithm\n@param defaultLayout the name of the layout algorithm to use by default",
      "static": false,
      "params": [
        {
          "name": "defaultLayout",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the layout algorithm to use by default"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "usesIcons",
      "comment": "Returns true if the rendering mode is to use icons for the vertices. If using\n icons, the label is drawn inside the shape.",
      "javadoc": "Returns true if the rendering mode is to use icons for the vertices. If using\n icons, the label is drawn inside the shape.\n@return true if the rendering mode is to use icons.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the rendering mode is to use icons."
      },
      "throws": []
    },
    {
      "name": "setUsesIcons",
      "comment": "Sets whether the graph rendering mode is to use icons or not. If using icons, the label and\n shape are drawn together into a cached icon. Otherwise, the shapes are drawn on the fly and\n labeled separately.",
      "javadoc": "Sets whether the graph rendering mode is to use icons or not. If using icons, the label and\n shape are drawn together into a cached icon. Otherwise, the shapes are drawn on the fly and\n labeled separately.\n@param b true to render in icon mode.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to render in icon mode."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLabelPosition",
      "comment": "Returns the label position relative to the vertex. Note this is only relevant \n if #usesIcons() is false",
      "javadoc": "Returns the label position relative to the vertex. Note this is only relevant \n if {@link #usesIcons()} is false\n@return the label position relative to the vertex",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.service.graph.GraphLabelPosition",
        "type_short": "GraphLabelPosition",
        "comment": "the label position relative to the vertex"
      },
      "throws": []
    },
    {
      "name": "setLabelPosition",
      "comment": "Sets the label position relative to the vertex. Note this is only relevant\n if #usesIcons() is false.",
      "javadoc": "Sets the label position relative to the vertex. Note this is only relevant\n if {@link #usesIcons()} is false.\n@param labelPosition the {@link GraphLabelPosition} to use for rendering vertex labels",
      "static": false,
      "params": [
        {
          "name": "labelPosition",
          "type_long": "ghidra.service.graph.GraphLabelPosition",
          "type_short": "GraphLabelPosition",
          "comment": "the GraphLabelPosition to use for rendering vertex labels"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFont",
      "comment": "Sets the font to use for drawing vertex labels",
      "javadoc": "Sets the font to use for drawing vertex labels\n@param font the font to use for drawing vertex labels",
      "static": false,
      "params": [
        {
          "name": "font",
          "type_long": "java.awt.Font",
          "type_short": "Font",
          "comment": "the font to use for drawing vertex labels"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFont",
      "comment": "Returns the font being used to render vertex labels",
      "javadoc": "Returns the font being used to render vertex labels\n@return the font being used to render vertex labels",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Font",
        "type_short": "Font",
        "comment": "the font being used to render vertex labels"
      },
      "throws": []
    },
    {
      "name": "getArrowLength",
      "comment": "Returns the length of the arrow. The width will be proportional to the length.\n Note: this option is not exposed in the Options because it is too specific to a graph\n instance and wouldn\u0027t be appropriate to apply to shared options.",
      "javadoc": "Returns the length of the arrow. The width will be proportional to the length.\n Note: this option is not exposed in the Options because it is too specific to a graph\n instance and wouldn\u0027t be appropriate to apply to shared options.\n@return the size if the arrow",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size if the arrow"
      },
      "throws": []
    },
    {
      "name": "setArrowLength",
      "comment": "Sets the length of the arrow. The width will be proportional to the length.\n Note: this option is not exposed in the Options because it is too specific to a graph\n instance and wouldn\u0027t be appropriate to apply to shared options.",
      "javadoc": "Sets the length of the arrow. The width will be proportional to the length.\n Note: this option is not exposed in the Options because it is too specific to a graph\n instance and wouldn\u0027t be appropriate to apply to shared options.\n@param length the size of the arrow",
      "static": false,
      "params": [
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of the arrow"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaxNodeCount",
      "comment": "Returns the maximum number of nodes that can be in a displayed graph",
      "javadoc": "Returns the maximum number of nodes that can be in a displayed graph\n@return the maximum number of nodes that can be in a displayed graph",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the maximum number of nodes that can be in a displayed graph"
      },
      "throws": []
    },
    {
      "name": "setMaxNodeCount",
      "comment": "Sets the maximum number of nodes a graph can have and still be displayed. Be careful, \n setting this value too high can result in Ghidra running out of memory and/or \n making the system very sluggish.",
      "javadoc": "Sets the maximum number of nodes a graph can have and still be displayed. Be careful, \n setting this value too high can result in Ghidra running out of memory and/or \n making the system very sluggish.\n@param maxNodeCount the maximum number of nodes a graph can have and still be displayed.",
      "static": false,
      "params": [
        {
          "name": "maxNodeCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "the maximum number of nodes a graph can have and still be displayed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isRegisteredWithTool",
      "comment": "Returns true if this GraphDisplayOptions instance has been constructed with\n a tool for getting/saving option values in the tool options",
      "javadoc": "Returns true if this {@link GraphDisplayOptions} instance has been constructed with\n a tool for getting/saving option values in the tool options\n@return true if this {@link GraphDisplayOptions} instance is connected to tool options",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this GraphDisplayOptions instance is connected to tool options"
      },
      "throws": []
    },
    {
      "name": "registerOptions",
      "comment": "Registers this GraphTypeDisplayOptions with ToolOptions. Note: this should only\n be used by plugins or other objects that get instantiated immediately when the tool is\n constructed. Otherwise, if the tool exits and this hasn\u0027t been called, any saved option\n values will be lost.\n ",
      "javadoc": "Registers this GraphTypeDisplayOptions with {@link ToolOptions}. Note: this should only\n be used by plugins or other objects that get instantiated immediately when the tool is\n constructed. Otherwise, if the tool exits and this hasn\u0027t been called, any saved option\n values will be lost.\n \u003cP\u003e\n@param toolOptions the {@link ToolOptions} to register these options with\n@param help the help location to be used by the {@link OptionsDialog} for display/editing\n these options",
      "static": false,
      "params": [
        {
          "name": "toolOptions",
          "type_long": "ghidra.framework.options.ToolOptions",
          "type_short": "ToolOptions",
          "comment": "the ToolOptions to register these options with"
        },
        {
          "name": "help",
          "type_long": "ghidra.util.HelpLocation",
          "type_short": "HelpLocation",
          "comment": "the help location to be used by the OptionsDialog for display/editing\n these options"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "configureVertexType",
      "comment": "Sets default values for vertex types",
      "javadoc": "Sets default values for vertex types\n@param vertexType the vertex type whose default color and shape are being defined\n@param vertexShape the default vertex shape for the given vertex type\n@param color the default color for the given vertex type",
      "static": false,
      "params": [
        {
          "name": "vertexType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the vertex type whose default color and shape are being defined"
        },
        {
          "name": "vertexShape",
          "type_long": "ghidra.service.graph.VertexShape",
          "type_short": "VertexShape",
          "comment": "the default vertex shape for the given vertex type"
        },
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the default color for the given vertex type"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "configureEdgeType",
      "comment": "Sets default values for edge types",
      "javadoc": "Sets default values for edge types\n@param edgeType the edge type whose default color and shape are being defined\n@param color the default color for the given edge type",
      "static": false,
      "params": [
        {
          "name": "edgeType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the edge type whose default color and shape are being defined"
        },
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the default color for the given edge type"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeFromOptions",
      "comment": "Loads values from tool options",
      "javadoc": "Loads values from tool options\n@param tool the tool from which to update values.",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "docking.Tool",
          "type_short": "Tool",
          "comment": "the tool from which to update values."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rootOptions",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateMiscellaniousOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rootOptions",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateVertexShapesFromOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rootOptions",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateEdgeColorsFromOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rootOptions",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "notifyListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateVertexColorsFromOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rootOptions",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerVertexColorOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rootOptions",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": ""
        },
        {
          "name": "help",
          "type_long": "ghidra.util.HelpLocation",
          "type_short": "HelpLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerVertexShapeOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rootOptions",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": ""
        },
        {
          "name": "help",
          "type_long": "ghidra.util.HelpLocation",
          "type_short": "HelpLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerEdgeColorOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rootOptions",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": ""
        },
        {
          "name": "help",
          "type_long": "ghidra.util.HelpLocation",
          "type_short": "HelpLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerMiscellaneousOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rootOptions",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": ""
        },
        {
          "name": "help",
          "type_long": "ghidra.util.HelpLocation",
          "type_short": "HelpLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkVertexType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vertexType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkEdgeType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "edgeType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
