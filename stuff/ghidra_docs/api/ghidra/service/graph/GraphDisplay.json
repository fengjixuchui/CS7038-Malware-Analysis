{
  "name": "GraphDisplay",
  "comment": "Interface for objects that display (or consume) graphs.  Normally, a graph display represents\n a visual component for displaying and interacting with a graph.  Some implementation may not\n be a visual component, but instead consumes/processes the graph (i.e. graph exporter). In this\n case, there is no interactive element and once the graph has been set on the display, it is \n closed.",
  "javadoc": "Interface for objects that display (or consume) graphs.  Normally, a graph display represents\n a visual component for displaying and interacting with a graph.  Some implementation may not\n be a visual component, but instead consumes/processes the graph (i.e. graph exporter). In this\n case, there is no interactive element and once the graph has been set on the display, it is \n closed.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "ALIGN_LEFT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "ALIGN_CENTER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "ALIGN_RIGHT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "SELECTED_VERTEX_COLOR",
      "comment": "values are color names or rgb in hex \u00270xFF0000\u0027 is red",
      "javadoc": "values are color names or rgb in hex \u00270xFF0000\u0027 is red",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"selectedVertexColor\""
    },
    {
      "name": "SELECTED_EDGE_COLOR",
      "comment": "values are color names or rgb in hex \u00270xFF0000\u0027 is red",
      "javadoc": "values are color names or rgb in hex \u00270xFF0000\u0027 is red",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"selectedEdgeColor\""
    },
    {
      "name": "INITIAL_LAYOUT_ALGORITHM",
      "comment": "values are defined as String symbols in LayoutFunction class\n\n KAMADA_KAWAI,FRUCTERMAN_REINGOLD,CIRCLE_MINCROSS,TIDIER_TREE,TIDIER_RADIAL_TREE,\n MIN_CROSS_TOP_DOWN,MIN_CROSS_LONGEST_PATH,MIN_CROSS_NETWORK_SIMPLEX,MIN_CROSS_COFFMAN_GRAHAM,\n EXP_MIN_CROSS_TOP_DOWN,EXP_MIN_CROSS_LONGEST_PATH,EXP_MIN_CROSS_NETWORK_SIMPLEX,\n EXP_MIN_CROSS_COFFMAN_GRAHAM,TREE,RADIAL,BALLOON,GEM\n\n may have no meaning for a different graph visualization library",
      "javadoc": "values are defined as String symbols in LayoutFunction class\n\n KAMADA_KAWAI,FRUCTERMAN_REINGOLD,CIRCLE_MINCROSS,TIDIER_TREE,TIDIER_RADIAL_TREE,\n MIN_CROSS_TOP_DOWN,MIN_CROSS_LONGEST_PATH,MIN_CROSS_NETWORK_SIMPLEX,MIN_CROSS_COFFMAN_GRAHAM,\n EXP_MIN_CROSS_TOP_DOWN,EXP_MIN_CROSS_LONGEST_PATH,EXP_MIN_CROSS_NETWORK_SIMPLEX,\n EXP_MIN_CROSS_COFFMAN_GRAHAM,TREE,RADIAL,BALLOON,GEM\n\n may have no meaning for a different graph visualization library",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"initialLayoutAlgorithm\""
    },
    {
      "name": "DISPLAY_VERTICES_AS_ICONS",
      "comment": "true or false\n may have no meaning for a different graph visualization library",
      "javadoc": "true or false\n may have no meaning for a different graph visualization library",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"displayVerticesAsIcons\""
    },
    {
      "name": "VERTEX_LABEL_POSITION",
      "comment": "values are the strings N,NE,E,SE,S,SW,W,NW,AUTO,CNTR\n may have no meaning for a different graph visualization library",
      "javadoc": "values are the strings N,NE,E,SE,S,SW,W,NW,AUTO,CNTR\n may have no meaning for a different graph visualization library",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"vertexLabelPosition\""
    },
    {
      "name": "ENABLE_EDGE_SELECTION",
      "comment": "true or false, whether edge selection via a mouse click is enabled.\n May not be supported by another graph visualization library",
      "javadoc": "true or false, whether edge selection via a mouse click is enabled.\n May not be supported by another graph visualization library",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"enableEdgeSelection\""
    },
    {
      "name": "EDGE_TYPE_PRIORITY_LIST",
      "comment": "a comma-separated list of edge type names in priority order",
      "javadoc": "a comma-separated list of edge type names in priority order",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"edgeTypePriorityList\""
    },
    {
      "name": "FAVORED_EDGES",
      "comment": "a comma-separated list of edge type names.\n any will be considered a favored edge for the min-cross layout\n algorithms.\n May have no meaning with a different graph visualization library",
      "javadoc": "a comma-separated list of edge type names.\n any will be considered a favored edge for the min-cross layout\n algorithms.\n May have no meaning with a different graph visualization library",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"favoredEdges\""
    }
  ],
  "methods": [
    {
      "name": "setGraphDisplayListener",
      "comment": "Sets a GraphDisplayListener to be notified when the user changes the vertex focus\n or selects one or more nodes in a graph window",
      "javadoc": "Sets a {@link GraphDisplayListener} to be notified when the user changes the vertex focus\n or selects one or more nodes in a graph window\n@param listener the listener to be notified",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.service.graph.GraphDisplayListener",
          "type_short": "GraphDisplayListener",
          "comment": "the listener to be notified"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFocusedVertex",
      "comment": "Tells the graph display window to focus the vertex with the given id",
      "javadoc": "Tells the graph display window to focus the vertex with the given id\n@param vertex the vertex to focus\n@param eventTrigger Provides a hint to the GraphDisplay as to why we are updating the\n graph location so that the GraphDisplay can decide if it should send out a notification via\n the {@link GraphDisplayListener#locationFocusChanged(AttributedVertex)}. For example, if we\n are updating the the location due to an event from the main application, we don\u0027t want to\n notify the application the graph changed to avoid event cycles. See {@link EventTrigger} for\n more information.",
      "static": false,
      "params": [
        {
          "name": "vertex",
          "type_long": "ghidra.service.graph.AttributedVertex",
          "type_short": "AttributedVertex",
          "comment": "the vertex to focus"
        },
        {
          "name": "eventTrigger",
          "type_long": "docking.widgets.EventTrigger",
          "type_short": "EventTrigger",
          "comment": "Provides a hint to the GraphDisplay as to why we are updating the\n graph location so that the GraphDisplay can decide if it should send out a notification via\n the GraphDisplayListener#locationFocusChanged(AttributedVertex). For example, if we\n are updating the the location due to an event from the main application, we don\u0027t want to\n notify the application the graph changed to avoid event cycles. See EventTrigger for\n more information."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGraph",
      "comment": "Returns the graph for this display",
      "javadoc": "Returns the graph for this display\n@return the graph for this display",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.service.graph.AttributedGraph",
        "type_short": "AttributedGraph",
        "comment": "the graph for this display"
      },
      "throws": []
    },
    {
      "name": "getFocusedVertex",
      "comment": "Returns the currently focused vertex or null if no vertex is focused",
      "javadoc": "Returns the currently focused vertex or null if no vertex is focused\n@return the currently focused vertex or null if no vertex is focused",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.service.graph.AttributedVertex",
        "type_short": "AttributedVertex",
        "comment": "the currently focused vertex or null if no vertex is focused"
      },
      "throws": []
    },
    {
      "name": "selectVertices",
      "comment": "Tells the graph display window to select the vertices with the given ids",
      "javadoc": "Tells the graph display window to select the vertices with the given ids\n@param vertexSet the set of vertices to select\n@param eventTrigger Provides a hint to the GraphDisplay as to why we are updating the\n graph location so that the GraphDisplay can decide if it should send out a notification via\n the {@link GraphDisplayListener#selectionChanged(Set)}. For example, if we are updating\n the the location due to an event from the main application, we don\u0027t want to notify the \n application the graph changed to avoid event cycles. See {@link EventTrigger} for more\n information.",
      "static": false,
      "params": [
        {
          "name": "vertexSet",
          "type_long": "java.util.Set\u003cghidra.service.graph.AttributedVertex\u003e",
          "type_short": "Set",
          "comment": "the set of vertices to select"
        },
        {
          "name": "eventTrigger",
          "type_long": "docking.widgets.EventTrigger",
          "type_short": "EventTrigger",
          "comment": "Provides a hint to the GraphDisplay as to why we are updating the\n graph location so that the GraphDisplay can decide if it should send out a notification via\n the GraphDisplayListener#selectionChanged(Set). For example, if we are updating\n the the location due to an event from the main application, we don\u0027t want to notify the \n application the graph changed to avoid event cycles. See EventTrigger for more\n information."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSelectedVertices",
      "comment": "Returns a set of vertex ids for all the currently selected vertices",
      "javadoc": "Returns a set of vertex ids for all the currently selected vertices\n@return a set of vertex ids for all the currently selected vertices",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cghidra.service.graph.AttributedVertex\u003e",
        "type_short": "Set",
        "comment": "a set of vertex ids for all the currently selected vertices"
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "Closes this graph display window.",
      "javadoc": "Closes this graph display window.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setGraph",
      "comment": "Sets the graph to be displayed or consumed by this graph display",
      "javadoc": "Sets the graph to be displayed or consumed by this graph display\n@param graph the graph to display or consume\n@param title a title for the graph\n@param monitor a {@link TaskMonitor} which can be used to cancel the graphing operation\n@param append if true, append the new graph to any existing graph\n@throws CancelledException thrown if the graphing operation was cancelled\n@deprecated You should now use the form that takes in a {@link GraphDisplayOptions}",
      "static": false,
      "params": [
        {
          "name": "graph",
          "type_long": "ghidra.service.graph.AttributedGraph",
          "type_short": "AttributedGraph",
          "comment": "the graph to display or consume"
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a title for the graph"
        },
        {
          "name": "append",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, append the new graph to any existing graph"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a TaskMonitor which can be used to cancel the graphing operation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "thrown if the graphing operation was cancelled"
        }
      ]
    },
    {
      "name": "setGraph",
      "comment": "Sets the graph to be displayed or consumed by this graph display",
      "javadoc": "Sets the graph to be displayed or consumed by this graph display\n@param graph the graph to display or consume\n@param options {@link GraphDisplayOptions} for configuring how the display will\n render vertices and edges based on there vertex type and edge type respectively.\n@param title a title for the graph\n@param monitor a {@link TaskMonitor} which can be used to cancel the graphing operation\n@param append if true, append the new graph to any existing graph\n@throws CancelledException thrown if the graphing operation was cancelled",
      "static": false,
      "params": [
        {
          "name": "graph",
          "type_long": "ghidra.service.graph.AttributedGraph",
          "type_short": "AttributedGraph",
          "comment": "the graph to display or consume"
        },
        {
          "name": "options",
          "type_long": "ghidra.service.graph.GraphDisplayOptions",
          "type_short": "GraphDisplayOptions",
          "comment": "GraphDisplayOptions for configuring how the display will\n render vertices and edges based on there vertex type and edge type respectively."
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a title for the graph"
        },
        {
          "name": "append",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, append the new graph to any existing graph"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a TaskMonitor which can be used to cancel the graphing operation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "thrown if the graphing operation was cancelled"
        }
      ]
    },
    {
      "name": "clear",
      "comment": "Clears all graph vertices and edges from this graph display",
      "javadoc": "Clears all graph vertices and edges from this graph display",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateVertexName",
      "comment": "Updates a vertex to a new name",
      "javadoc": "Updates a vertex to a new name\n@param vertex the vertex to rename\n@param newName the new name for the vertex",
      "static": false,
      "params": [
        {
          "name": "vertex",
          "type_long": "ghidra.service.graph.AttributedVertex",
          "type_short": "AttributedVertex",
          "comment": "the vertex to rename"
        },
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new name for the vertex"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGraphTitle",
      "comment": "Returns the title of the current graph",
      "javadoc": "Returns the title of the current graph\n@return the title of the current graph",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the title of the current graph"
      },
      "throws": []
    },
    {
      "name": "addAction",
      "comment": "Adds the action to the graph display. Not all GraphDisplays support adding custom\n actions, so this may have no effect.",
      "javadoc": "Adds the action to the graph display. Not all GraphDisplays support adding custom\n actions, so this may have no effect.\n@param action the action to add",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingActionIf",
          "type_short": "DockingActionIf",
          "comment": "the action to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
