{
  "name": "AddToProgramDialog",
  "comment": "The AddToProgramDialog is essentially the same as the ImporterDialog with a few exceptions.  One\n difference is that the language and destination folder/name are not enabled and are initialized\n to the existing program to which the imported data will be added.  Also, the Ok callback\n is overridden to add the data to the current program instead of creating a new program.",
  "javadoc": "The AddToProgramDialog is essentially the same as the ImporterDialog with a few exceptions.  One\n difference is that the language and destination folder/name are not enabled and are initialized\n to the existing program to which the imported data will be added.  Also, the Ok callback\n is overridden to add the data to the current program instead of creating a new program.",
  "static": false,
  "implements": [],
  "extends": "ghidra.plugin.importer.ImporterDialog",
  "fields": [
    {
      "name": "addToProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new AddToProgramDialog.",
      "javadoc": "Construct a new AddToProgramDialog.\n@param tool the tool containing the currently open program.\n@param fsrl the FileSystemURL for where the imported data can be read.\n@param loaderMap the loaders and their corresponding load specifications\n@param byteProvider the ByteProvider from which the bytes from the source can be read.\n        The dialog takes ownership of the ByteProvider and it will be closed when\n        the dialog is closed\n@param addToProgram the program to which the newly imported data will be added",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "the tool containing the currently open program."
        },
        {
          "name": "fsrl",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "the FileSystemURL for where the imported data can be read."
        },
        {
          "name": "loaderMap",
          "type_long": "ghidra.app.util.opinion.LoaderMap",
          "type_short": "LoaderMap",
          "comment": "the loaders and their corresponding load specifications"
        },
        {
          "name": "byteProvider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "the ByteProvider from which the bytes from the source can be read.\n        The dialog takes ownership of the ByteProvider and it will be closed when\n        the dialog is closed"
        },
        {
          "name": "addToProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to which the newly imported data will be added"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "validateFormInput",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSupported",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "loader",
          "type_long": "ghidra.app.util.opinion.Loader",
          "type_short": "Loader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "selectedLoaderChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "okCallback",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "loadSpec",
          "type_long": "ghidra.app.util.opinion.LoadSpec",
          "type_short": "LoadSpec",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLanguageSpec",
      "comment": "Retrieves the current language/compiler spec from the program that will be added to.",
      "javadoc": "Retrieves the current language/compiler spec from the program that will be added to.\n@return the current language/compiler spec from the program that will be added to.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.LanguageCompilerSpecPair",
        "type_short": "LanguageCompilerSpecPair",
        "comment": "the current language/compiler spec from the program that will be added to."
      },
      "throws": []
    },
    {
      "name": "getFolderName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
