{
  "name": "PascalUtil",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "ONE_BYTE_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "TWO_BYTE_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-2"
    },
    {
      "name": "NO_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "ASCII_CHAR_WIDTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "UNICODE16_CHAR_WIDTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "PASCAL_LENGTH_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "PASCAL255_LENGTH_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findPascalSequence",
      "comment": "Looks for Pascal strings given a sequence of bytes that represent a sequence of ascii chars.",
      "javadoc": "Looks for Pascal strings given a sequence of bytes that represent a sequence of ascii chars.\n@param buf the Memory buffer containing the bytes that make up the string.\n@param sequence the sequence that specifies the start, end, and type of ascii sequence (i.e. ascii,\n unicode16).  This method looks for both 2 byte and 1 byte leading pascal lengths both before\n and at the beginning of the given sequence.\n@return a new sequence that has been adjusted  to represent a pascal string or null if\n a pascal string was not found.",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "the Memory buffer containing the bytes that make up the string."
        },
        {
          "name": "sequence",
          "type_long": "ghidra.util.ascii.Sequence",
          "type_short": "Sequence",
          "comment": "the sequence that specifies the start, end, and type of ascii sequence (i.e. ascii,\n unicode16).  This method looks for both 2 byte and 1 byte leading pascal lengths both before\n and at the beginning of the given sequence."
        },
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.ascii.Sequence",
        "type_short": "Sequence",
        "comment": "a new sequence that has been adjusted  to represent a pascal string or null if\n a pascal string was not found."
      },
      "throws": []
    },
    {
      "name": "findUnicodePascal",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "sequence",
          "type_long": "ghidra.util.ascii.Sequence",
          "type_short": "Sequence",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.ascii.Sequence",
        "type_short": "Sequence",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findAsciiPascal",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "sequence",
          "type_long": "ghidra.util.ascii.Sequence",
          "type_short": "Sequence",
          "comment": ""
        },
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.ascii.Sequence",
        "type_short": "Sequence",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkForPascalUnicodeSequence",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "sequence",
          "type_long": "ghidra.util.ascii.Sequence",
          "type_short": "Sequence",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.ascii.Sequence",
        "type_short": "Sequence",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkForPascalAsciiSequence",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "sequence",
          "type_long": "ghidra.util.ascii.Sequence",
          "type_short": "Sequence",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.ascii.Sequence",
        "type_short": "Sequence",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkForPascal255AsciiSequence",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "sequence",
          "type_long": "ghidra.util.ascii.Sequence",
          "type_short": "Sequence",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.ascii.Sequence",
        "type_short": "Sequence",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getShort",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getByte",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
