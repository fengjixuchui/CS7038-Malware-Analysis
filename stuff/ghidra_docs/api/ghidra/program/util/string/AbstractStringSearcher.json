{
  "name": "AbstractStringSearcher",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "matchers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.util.ascii.ByteStreamCharMatcher\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "alignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "charSet",
          "type_long": "ghidra.util.ascii.CharSetRecognizer",
          "type_short": "CharSetRecognizer",
          "comment": ""
        },
        {
          "name": "minimumStringSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "includeUTF8",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "includeUTF16",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "includeUTF32",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addUTF16Matchers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "matchersList",
          "type_long": "java.util.List\u003cghidra.util.ascii.ByteStreamCharMatcher\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "charSet",
          "type_long": "ghidra.util.ascii.CharSetRecognizer",
          "type_short": "CharSetRecognizer",
          "comment": ""
        },
        {
          "name": "endian",
          "type_long": "ghidra.program.model.lang.Endian",
          "type_short": "Endian",
          "comment": ""
        },
        {
          "name": "minimumStringSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addUTF32Matchers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "matchersList",
          "type_long": "java.util.List\u003cghidra.util.ascii.ByteStreamCharMatcher\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "charSet",
          "type_long": "ghidra.util.ascii.CharSetRecognizer",
          "type_short": "CharSetRecognizer",
          "comment": ""
        },
        {
          "name": "endian",
          "type_long": "ghidra.program.model.lang.Endian",
          "type_short": "Endian",
          "comment": ""
        },
        {
          "name": "minimumStringSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "search",
      "comment": "Searches the given addressSet for strings. \n \n Note: The address set searched will be modified before searching in the following ways:\n \n  if the given set is null, it will be re-initialized to encompass all of program memory\n  the set will be further culled to only include loaded memory blocks, if specified\n \n ",
      "javadoc": "Searches the given addressSet for strings. \n \u003cp\u003e\n Note: The address set searched will be modified before searching in the following ways:\n \u003cul\u003e\n \u003cli\u003e if the given set is null, it will be re-initialized to encompass all of program memory\u003c/li\u003e\n \u003cli\u003e the set will be further culled to only include loaded memory blocks, if specified\u003c/li\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n@param addressSet the address set to search over; if null, will initialized to all memory\n@param callback the callback invoked when a string is found\n@param searchLoadedMemoryBlocksOnly if true, will exclude unloaded memory blocks from the search\n@param monitor the user monitor\n@return the updated address set used for the search",
      "static": false,
      "params": [
        {
          "name": "addressSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address set to search over; if null, will initialized to all memory"
        },
        {
          "name": "callback",
          "type_long": "ghidra.program.util.string.FoundStringCallback",
          "type_short": "FoundStringCallback",
          "comment": "the callback invoked when a string is found"
        },
        {
          "name": "searchLoadedMemoryBlocksOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, will exclude unloaded memory blocks from the search"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the user monitor"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "the updated address set used for the search"
      },
      "throws": []
    },
    {
      "name": "updateAddressesToSearch",
      "comment": "Returns a new address set that is the intersection of the given set with the\n desired memory block addresses (loaded or unloaded).\n \n Note: This desired set of memory blocks is known by inspecting the \n StringTableOptions#useLoadedBlocksOnly() attribute set by the user.",
      "javadoc": "Returns a new address set that is the intersection of the given set with the\n desired memory block addresses (loaded or unloaded).\n \u003cp\u003e\n Note: This desired set of memory blocks is known by inspecting the \n {@link StringTableOptions#useLoadedBlocksOnly()} attribute set by the user.\n@param addressSet the address set to update\n@param useLoadedBlocksOnly if true, only return addresses in loaded memory blocks\n@return new the new address set",
      "static": false,
      "params": [
        {
          "name": "addressSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address set to update"
        },
        {
          "name": "useLoadedBlocksOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, only return addresses in loaded memory blocks"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "new the new address set"
      },
      "throws": []
    },
    {
      "name": "searchRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "range",
          "type_long": "ghidra.program.model.address.AddressRange",
          "type_short": "AddressRange",
          "comment": ""
        },
        {
          "name": "callback",
          "type_long": "ghidra.program.util.string.FoundStringCallback",
          "type_short": "FoundStringCallback",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustRangeForAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "range",
          "type_long": "ghidra.program.model.address.AddressRange",
          "type_short": "AddressRange",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getByte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processSequence",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "callback",
          "type_long": "ghidra.program.util.string.FoundStringCallback",
          "type_short": "FoundStringCallback",
          "comment": ""
        },
        {
          "name": "sequence",
          "type_long": "ghidra.util.ascii.Sequence",
          "type_short": "Sequence",
          "comment": ""
        },
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFoundString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "sequence",
          "type_long": "ghidra.util.ascii.Sequence",
          "type_short": "Sequence",
          "comment": ""
        },
        {
          "name": "stringDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.util.string.FoundString",
        "type_short": "FoundString",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
