{
  "name": "RangeMapAdapter",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getValue",
      "comment": "Returns the byte array that has been associated with the given index.",
      "javadoc": "Returns the byte array that has been associated with the given index.\n@param address the address at which to retrieve a byte array.\n@return the byte array that has been associated with the given index or null if no such\n association exists.",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to retrieve a byte array."
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the byte array that has been associated with the given index or null if no such\n association exists."
      },
      "throws": []
    },
    {
      "name": "moveAddressRange",
      "comment": "Move all values within an address range to a new range.",
      "javadoc": "Move all values within an address range to a new range.\n@param fromAddr the first address of the range to be moved.\n@param toAddr the address where to the range is to be moved.\n@param length the number of addresses to move.\n@param monitor the task monitor.\n@throws CancelledException if the user canceled the operation via the task monitor.",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address of the range to be moved."
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address where to the range is to be moved."
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the number of addresses to move."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user canceled the operation via the task monitor."
        }
      ]
    },
    {
      "name": "set",
      "comment": "Associates the given byte array with all indexes in the given range.  Any existing values\n will be over written.",
      "javadoc": "Associates the given byte array with all indexes in the given range.  Any existing values\n will be over written.\n@param start the first address in the range.\n@param end the last Address(inclusive) in the range.\n@param bytes the bytes to associate with the range.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address in the range."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last Address(inclusive) in the range."
        },
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the bytes to associate with the range."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressRangeIterator",
      "comment": "Returns an IndexRangeIterator over all stored values in the given range.  If the\n given range intersects an actual stored range either at the beginning or end, the iterator\n will return those ranges truncated to fit within the given range.",
      "javadoc": "Returns an {@link IndexRangeIterator} over all stored values in the given range.  If the\n given range intersects an actual stored range either at the beginning or end, the iterator\n will return those ranges truncated to fit within the given range.\n@param start the first Address in the range.\n@param end the last Address (inclusive) index in the range.\n@return an {@link IndexRangeIterator} over all stored values.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first Address in the range."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last Address (inclusive) index in the range."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRangeIterator",
        "type_short": "AddressRangeIterator",
        "comment": "an IndexRangeIterator over all stored values."
      },
      "throws": []
    },
    {
      "name": "getAddressRangeIterator",
      "comment": "Returns an IndexRangeIterator over all stored values.",
      "javadoc": "Returns an {@link IndexRangeIterator} over all stored values.\n@return an {@link IndexRangeIterator} over all stored values.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRangeIterator",
        "type_short": "AddressRangeIterator",
        "comment": "an IndexRangeIterator over all stored values."
      },
      "throws": []
    },
    {
      "name": "clearRange",
      "comment": "Clears all associated values in the given range.",
      "javadoc": "Clears all associated values in the given range.\n@param start the first address in the range to clear.\n@param end the end address in the range to clear.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address in the range to clear."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end address in the range to clear."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearAll",
      "comment": "Clears all values.",
      "javadoc": "Clears all values.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "Returns true if this storage has no associated values for any address",
      "javadoc": "Returns true if this storage has no associated values for any address\n@return true if this storage has no associated values for any address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this storage has no associated values for any address"
      },
      "throws": []
    },
    {
      "name": "setLanguage",
      "comment": "Update table name and values to reflect new base register",
      "javadoc": "Update table name and values to reflect new base register\n@param translator\n@param mapReg\n@param monitor\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "translator",
          "type_long": "ghidra.program.util.LanguageTranslator",
          "type_short": "LanguageTranslator",
          "comment": ""
        },
        {
          "name": "mapReg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getValueRangeContaining",
      "comment": "Returns the bounding address-range containing addr and the the same value throughout.\n This range will be limited by any value change associated with the base register.",
      "javadoc": "Returns the bounding address-range containing addr and the the same value throughout.\n This range will be limited by any value change associated with the base register.\n@param addr the containing address\n@return single value address-range containing addr",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the containing address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": "single value address-range containing addr"
      },
      "throws": []
    },
    {
      "name": "checkWritableState",
      "comment": "Verify that adapter is in a writable state (i.e., valid transaction has been started).",
      "javadoc": "Verify that adapter is in a writable state (i.e., valid transaction has been started).\n@throws IllegalStateException if not in a writable state",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
