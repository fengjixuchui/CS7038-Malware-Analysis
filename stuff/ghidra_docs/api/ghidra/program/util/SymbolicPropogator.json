{
  "name": "SymbolicPropogator",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "LRU_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "_POINTER_MIN_BOUNDS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "256"
    },
    {
      "name": "maskSize",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long[]",
      "type_short": "long[]",
      "constant_value": null
    },
    {
      "name": "memorySpaces",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.address.AddressSpace\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "defaultSpacesAreTheSame",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "evaluator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.ContextEvaluator",
      "type_short": "ContextEvaluator",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "programContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.ProgramContext",
      "type_short": "ProgramContext",
      "constant_value": null
    },
    {
      "name": "spaceContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.ProgramContext",
      "type_short": "ProgramContext",
      "constant_value": null
    },
    {
      "name": "savedProgramContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.ProgramContext",
      "type_short": "ProgramContext",
      "constant_value": null
    },
    {
      "name": "savedSpaceContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.ProgramContext",
      "type_short": "ProgramContext",
      "constant_value": null
    },
    {
      "name": "canceled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "readExecutableAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "context",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.VarnodeContext",
      "type_short": "VarnodeContext",
      "constant_value": null
    },
    {
      "name": "hitCodeFlow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "debug",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "valueTooBigException",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.util.exception.NotFoundException",
      "type_short": "NotFoundException",
      "constant_value": null
    },
    {
      "name": "divideByZeroException",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.util.exception.NotFoundException",
      "type_short": "NotFoundException",
      "constant_value": null
    },
    {
      "name": "pointerMask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "externalBlockRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressRange",
      "type_short": "AddressRange",
      "constant_value": null
    },
    {
      "name": "MAX_EXACT_INSTRUCTIONS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "100"
    },
    {
      "name": "instructionFlowsCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cghidra.program.model.address.Address,ghidra.program.model.address.Address[]\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "pcodeCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cghidra.program.model.address.Address,ghidra.program.model.pcode.PcodeOp[]\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "instructionAtCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cghidra.program.model.address.Address,ghidra.program.model.listing.Instruction\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "instructionContainingCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cghidra.program.model.address.Address,ghidra.program.model.listing.Instruction\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "lastFullHashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "lastInstrCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "sameInstrCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "checkForParamRefs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "checkForReturnRefs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "checkForStoredRefs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDebug",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debug",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPointerMask",
      "comment": "set up a pointer mask to be used when creating pointers into this memory",
      "javadoc": "set up a pointer mask to be used when creating pointers into this memory",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setExternalRange",
      "comment": "Identify EXTERNAL block range which should not be disassembled.",
      "javadoc": "Identify EXTERNAL block range which should not be disassembled.\n@param program\n@return EXTERNAL block range or null if not found",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": "EXTERNAL block range or null if not found"
      },
      "throws": []
    },
    {
      "name": "flowConstants",
      "comment": "Process a subroutine using the processor function.\n The process function can control what flows are followed and when to stop.",
      "javadoc": "Process a subroutine using the processor function.\n The process function can control what flows are followed and when to stop.\n@param startAddr start address\n@param restrictSet the address set to restrict the constant flow to\n@param eval the context evaluator to use\n@param saveContext true if the context should be saved\n@param monitor the task monitor\n@return the address set of instructions that were followed\n@throws CancelledException if the task is cancelled",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "start address"
        },
        {
          "name": "restrictSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address set to restrict the constant flow to"
        },
        {
          "name": "eval",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": "the context evaluator to use"
        },
        {
          "name": "saveContext",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the context should be saved"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": "the address set of instructions that were followed"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the task is cancelled"
        }
      ]
    },
    {
      "name": "saveOffCurrentContext",
      "comment": "Save off the current context and set the current context to a copy\n This is done so that the values in the context are not changed, but can be used for computation.",
      "javadoc": "Save off the current context and set the current context to a copy\n This is done so that the values in the context are not changed, but can be used for computation.\n@param startAddr\n@return ",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.util.VarnodeContext",
        "type_short": "VarnodeContext",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegisterValue",
      "comment": "Get constant or register relative value assigned to the \n specified register at the specified address",
      "javadoc": "Get constant or register relative value assigned to the \n specified register at the specified address\n@param toAddr address\n@param reg register\n@return register value",
      "static": false,
      "params": [
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address"
        },
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "register"
        }
      ],
      "return": {
        "type_long": "ghidra.program.util.SymbolicPropogator.Value",
        "type_short": "Value",
        "comment": "register value"
      },
      "throws": []
    },
    {
      "name": "getRegisterValueRepresentation",
      "comment": "Do not depend on this method!  For display debugging purposes only.\n This will change.",
      "javadoc": "Do not depend on this method!  For display debugging purposes only.\n This will change.\n@param addr\n@param reg\n@return ",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "stackReg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "flowConstants",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "restrictSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "eval",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": ""
        },
        {
          "name": "vContext",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "flowConstants",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "restrictSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "eval",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": ""
        },
        {
          "name": "vContext",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isSimpleFallThrough",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instrFlow",
          "type_long": "ghidra.program.model.symbol.FlowType",
          "type_short": "FlowType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkSameInstructionRun",
      "comment": "Check that we haven\u0027t hit a run of the same exact instruction.\n    Uses hashcodes in an attempt to be as fast as possible.",
      "javadoc": "Check that we haven\u0027t hit a run of the same exact instruction.\n    Uses hashcodes in an attempt to be as fast as possible.\n@param instr new instruction to check\n@return true if we have hit the max number of exact same instructions.",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "new instruction to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if we have hit the max number of exact same instructions."
      },
      "throws": []
    },
    {
      "name": "getInstructionPcode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp[]",
        "type_short": "ghidra.program.model.pcode.PcodeOp[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInstructionAt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInstructionContaining",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInstructionFlows",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address[]",
        "type_short": "ghidra.program.model.address.Address[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyPcode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vContext",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": ""
        },
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStoredLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vContext",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": ""
        },
        {
          "name": "in",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleFunctionSideEffects",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "target",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isBranch",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pcodeOp",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveFunctionReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkForCallFixup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp[]",
        "type_short": "ghidra.program.model.pcode.PcodeOp[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkForUponReturnCallMechanismInjection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "target",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp[]",
        "type_short": "ghidra.program.model.pcode.PcodeOp[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "injectPcode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "currentPcode",
          "type_long": "ghidra.program.model.pcode.PcodeOp[]",
          "type_short": "ghidra.program.model.pcode.PcodeOp[]",
          "comment": ""
        },
        {
          "name": "pcodeIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "replacePcode",
          "type_long": "ghidra.program.model.pcode.PcodeOp[]",
          "type_short": "ghidra.program.model.pcode.PcodeOp[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp[]",
        "type_short": "ghidra.program.model.pcode.PcodeOp[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkSegmented",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "in1",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "in2",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "mustClearAll",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFunctionPurge",
      "comment": "Get/Compute the Purge size from the stack for the function starting at\n entryPoint.",
      "javadoc": "Get/Compute the Purge size from the stack for the function starting at\n entryPoint.\n@param prog -\n            program containing the function to analyze\n@param function -\n@return size in bytes that is removed from the stack after the function\n         is called.",
      "static": false,
      "params": [
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "-\n            program containing the function to analyze"
        },
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "-"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "size in bytes that is removed from the stack after the function\n         is called."
      },
      "throws": []
    },
    {
      "name": "getDefaultStackDepthChange",
      "comment": "Get the default/assumed stack depth change for this language",
      "javadoc": "Get the default/assumed stack depth change for this language\n@param depth stack depth to return if the default is unknown for the language\n@return ",
      "static": false,
      "params": [
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "depth",
          "type_long": "int",
          "type_short": "int",
          "comment": "stack depth to return if the default is unknown for the language"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addStackOverride",
      "comment": "Modify the function purge by any stack depth override",
      "javadoc": "Modify the function purge by any stack depth override\n@param prog program\n@param addr addr of instruction that could have an override of the stack depth\n@param purge current purge depth.\n@return ",
      "static": false,
      "params": [
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "addr of instruction that could have an override of the stack depth"
        },
        {
          "name": "purge",
          "type_long": "int",
          "type_short": "int",
          "comment": "current purge depth."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addParamReferences",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "callTarget",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "varnodeContext",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addReturnReferences",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "varnodeContext",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addLoadStoreReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vContext",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": ""
        },
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "pcodeType",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "refLocation",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "targetSpaceID",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "assigningVarnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "reftype",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findOperandWithVarnodeAssignment",
      "comment": "Find the operand that is assigning to the varnode with contains the load or store reference offset",
      "javadoc": "Find the operand that is assigning to the varnode with contains the load or store reference offset\n@param instruction\n@param assigningVarnode\n@return operand index if found or -1 if not",
      "static": false,
      "params": [
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "assigningVarnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "operand index if found or -1 if not"
      },
      "throws": []
    },
    {
      "name": "checkPossibleOffsetAddr",
      "comment": "check if the offset is large enough to possibly be an address\n     It shouldn\u0027t be smaller than +- MIN_BOUNDS",
      "javadoc": "check if the offset is large enough to possibly be an address\n     It shouldn\u0027t be smaller than +- MIN_BOUNDS\n@param offset assumed relative to another register\n@return true if it could be an address",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "assumed relative to another register"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if it could be an address"
      },
      "throws": []
    },
    {
      "name": "addStoredReferences",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vContext",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": ""
        },
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "storageLocation",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "valueToStore",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createVariableStorageReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "varnodeContext",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "storage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": ""
        },
        {
          "name": "callOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createRegisterStorageReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "varnodeContext",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "callOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "rval",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReturnLocationStorage",
      "comment": "get the return variable storage location for this function",
      "javadoc": "get the return variable storage location for this function",
      "static": false,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceSpaceID",
      "comment": "Find the best address space to use for the reference if the space was unknown.",
      "javadoc": "Find the best address space to use for the reference if the space was unknown.\n@param instruction - reference is to be placed on (used for address)\n@param offset - offset into the address space. (word addressing based)\n@return ",
      "static": false,
      "params": [
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "- reference is to be placed on (used for address)"
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "- offset into the address space. (word addressing based)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeReference",
      "comment": "Make from the instruction to the reference based on the varnode passed in.",
      "javadoc": "Make from the instruction to the reference based on the varnode passed in.\n@param varnodeContext - context to use for any other infomation needed\n@param instruction - instruction to place the reference on.\n@param pcodeop - pcode op that caused the reference\n@param opIndex - operand it should be placed on, or -1 if unknown\n@param vt - place to reference, could be a full address, or just a constant\n@param refType - type of reference\n@param monitor",
      "static": false,
      "params": [
        {
          "name": "varnodeContext",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": "- context to use for any other infomation needed"
        },
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "- instruction to place the reference on."
        },
        {
          "name": "pcodeop",
          "type_long": "int",
          "type_short": "int",
          "comment": "- pcode op that caused the reference"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "- operand it should be placed on, or -1 if unknown"
        },
        {
          "name": "vt",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "- place to reference, could be a full address, or just a constant"
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "- type of reference"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeReference",
      "comment": "Make a reference from the instruction to the address based on the spaceID,offset passed in.\n   This could make a reference into an overlay (overriding the spaceID), or into memory, if\n   spaceID is a constant space.\n  The target could be an external Address carried along and then finally used.\n  External addresses are OK as long as nothing is done to the offset.",
      "javadoc": "Make a reference from the instruction to the address based on the spaceID,offset passed in.\n   This could make a reference into an overlay (overriding the spaceID), or into memory, if\n   spaceID is a constant space.\n  The target could be an external Address carried along and then finally used.\n  External addresses are OK as long as nothing is done to the offset.\n@param vContext - context to use for any other infomation needed\n@param instruction - instruction to place the reference on.\n@param opIndex - operand it should be placed on, or -1 if unknown\n@param knownSpaceID target space ID or -1 if only offset is known\n@param wordOffset - target offset that is word addressing based\n@param refType - type of reference\n@param pcodeop - pcode op that caused the reference\n@param monitor - the task monitor",
      "static": false,
      "params": [
        {
          "name": "vContext",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": "- context to use for any other infomation needed"
        },
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "- instruction to place the reference on."
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "- operand it should be placed on, or -1 if unknown"
        },
        {
          "name": "knownSpaceID",
          "type_long": "long",
          "type_short": "long",
          "comment": "target space ID or -1 if only offset is known"
        },
        {
          "name": "wordOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "- target offset that is word addressing based"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "- type of reference"
        },
        {
          "name": "pcodeop",
          "type_long": "int",
          "type_short": "int",
          "comment": "- pcode op that caused the reference"
        },
        {
          "name": "knownReference",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "- the task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "evaluatePureDataRef",
      "comment": "Evaluate reference type for a pure data reference for valid reference to instructions",
      "javadoc": "Evaluate reference type for a pure data reference for valid reference to instructions\n@param instruction that reference is from\n@param target of reference\n@param wordOffset target address word offset\n@param refType type of reference\n@return true if not a pure data ref, or the reference is OK to make",
      "static": false,
      "params": [
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "that reference is from"
        },
        {
          "name": "wordOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "target address word offset"
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "type of reference"
        },
        {
          "name": "target",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "of reference"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if not a pure data ref, or the reference is OK to make"
      },
      "throws": []
    },
    {
      "name": "createData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findOpIndexForRef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": ""
        },
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "wordOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkOffByOne",
      "comment": "check if the current Register value and wordOffset are off by just the low-bit.",
      "javadoc": "check if the current Register value and wordOffset are off by just the low-bit.\n@param reg - register to get a current value for\n@param wordOffset - word offset for the reference\n@return True if the two values are off by just the one bit.",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "- register to get a current value for"
        },
        {
          "name": "wordOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "- word offset for the reference"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if the two values are off by just the one bit."
      },
      "throws": []
    },
    {
      "name": "encounteredBranch",
      "comment": "",
      "javadoc": "@return true if any branching instructions have been encountered",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if any branching instructions have been encountered"
      },
      "throws": []
    },
    {
      "name": "readExecutable",
      "comment": "",
      "javadoc": "@return return true if the code ever read from an executable location",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "return true if the code ever read from an executable location"
      },
      "throws": []
    },
    {
      "name": "setParamRefCheck",
      "comment": "enable/disable checking parameters for constant references",
      "javadoc": "enable/disable checking parameters for constant references\n@param checkParamRefsOption true to enable",
      "static": false,
      "params": [
        {
          "name": "checkParamRefsOption",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to enable"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setReturnRefCheck",
      "comment": "enable/disable checking return for constant references",
      "javadoc": "enable/disable checking return for constant references\n@param checkReturnRefsOption",
      "static": false,
      "params": [
        {
          "name": "checkReturnRefsOption",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStoredRefCheck",
      "comment": "enable/disable checking stored values for constant references",
      "javadoc": "enable/disable checking stored values for constant references\n@param checkStoredRefsOption",
      "static": false,
      "params": [
        {
          "name": "checkStoredRefsOption",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
