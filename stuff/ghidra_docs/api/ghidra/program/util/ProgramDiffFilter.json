{
  "name": "ProgramDiffFilter",
  "comment": "The ProgramDiffFilter is used when determining or working with\n differences between two programs.\n It indicates the types of program differences we are interested in.\n Each difference type can be set to true, indicating interest in\n differences of that type between two programs. False indicates no interest\n in this type of program difference.\n Valid filter types are: \n BYTE_DIFFS, CODE_UNIT_DIFFS, \n PLATE_COMMENT_DIFFS, PRE_COMMENT_DIFFS, EOL_COMMENT_DIFFS, \n REPEATABLE_COMMENT_DIFFS, POST_COMMENT_DIFFS,\n REFERENCE_DIFFS,\n USER_DEFINED_DIFFS, BOOKMARK_DIFFS,\n SYMBOL_DIFFS,\n EQUATE_DIFFS, FUNCTION_DIFFS, PROGRAM_CONTEXT_DIFFS.\n Predefined filter type combinations are:\n COMMENT_DIFFS and ALL_DIFFS.",
  "javadoc": "The \u003cCODE\u003eProgramDiffFilter\u003c/CODE\u003e is used when determining or working with\n differences between two programs.\n It indicates the types of program differences we are interested in.\n Each difference type can be set to true, indicating interest in\n differences of that type between two programs. False indicates no interest\n in this type of program difference.\n \u003cBR\u003eValid filter types are: \n BYTE_DIFFS, CODE_UNIT_DIFFS, \n PLATE_COMMENT_DIFFS, PRE_COMMENT_DIFFS, EOL_COMMENT_DIFFS, \n REPEATABLE_COMMENT_DIFFS, POST_COMMENT_DIFFS,\n REFERENCE_DIFFS,\n USER_DEFINED_DIFFS, BOOKMARK_DIFFS,\n SYMBOL_DIFFS,\n EQUATE_DIFFS, FUNCTION_DIFFS, PROGRAM_CONTEXT_DIFFS.\n \u003cBR\u003ePredefined filter type combinations are:\n COMMENT_DIFFS and ALL_DIFFS.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "PROGRAM_CONTEXT_DIFFS",
      "comment": "Indicates the filter for the program context (register) differences.",
      "javadoc": "Indicates the filter for the program context (register) differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "BYTE_DIFFS",
      "comment": "Indicates the filter for the byte differences.",
      "javadoc": "Indicates the filter for the byte differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "CODE_UNIT_DIFFS",
      "comment": "Indicates the filter for the code unit differences.",
      "javadoc": "Indicates the filter for the code unit differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "EOL_COMMENT_DIFFS",
      "comment": "Indicates the filter for the end of line comment differences.",
      "javadoc": "Indicates the filter for the end of line comment differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "PRE_COMMENT_DIFFS",
      "comment": "Indicates the filter for the pre comment differences.",
      "javadoc": "Indicates the filter for the pre comment differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16"
    },
    {
      "name": "POST_COMMENT_DIFFS",
      "comment": "Indicates the filter for the post comment differences.",
      "javadoc": "Indicates the filter for the post comment differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32"
    },
    {
      "name": "PLATE_COMMENT_DIFFS",
      "comment": "Indicates the filter for the plate comment differences.",
      "javadoc": "Indicates the filter for the plate comment differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "64"
    },
    {
      "name": "REPEATABLE_COMMENT_DIFFS",
      "comment": "Indicates the filter for the repeatable comment differences.",
      "javadoc": "Indicates the filter for the repeatable comment differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "128"
    },
    {
      "name": "REFERENCE_DIFFS",
      "comment": "Indicates the filter for memory, variable, and external reference differences.",
      "javadoc": "Indicates the filter for memory, variable, and external reference differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "256"
    },
    {
      "name": "EQUATE_DIFFS",
      "comment": "Indicates the filter for the equates differences.",
      "javadoc": "Indicates the filter for the equates differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "512"
    },
    {
      "name": "SYMBOL_DIFFS",
      "comment": "Indicates the filter for the symbol differences.",
      "javadoc": "Indicates the filter for the symbol differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1024"
    },
    {
      "name": "FUNCTION_DIFFS",
      "comment": "Indicates the filter for the function differences.",
      "javadoc": "Indicates the filter for the function differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2048"
    },
    {
      "name": "BOOKMARK_DIFFS",
      "comment": "Indicates the filter for bookmark differences.",
      "javadoc": "Indicates the filter for bookmark differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4096"
    },
    {
      "name": "USER_DEFINED_DIFFS",
      "comment": "Indicates the filter for the user defined property differences.",
      "javadoc": "Indicates the filter for the user defined property differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8192"
    },
    {
      "name": "FUNCTION_TAG_DIFFS",
      "comment": "Indicates the filter for the function tag differences.",
      "javadoc": "Indicates the filter for the function tag differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16384"
    },
    {
      "name": "NUM_PRIMARY_TYPES",
      "comment": "The total number of primary difference types.",
      "javadoc": "The total number of primary difference types.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "15"
    },
    {
      "name": "COMMENT_DIFFS",
      "comment": "Indicates all comment filters.",
      "javadoc": "Indicates all comment filters.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "248"
    },
    {
      "name": "ALL_DIFFS",
      "comment": "Indicates all filters for all defined types of differences.",
      "javadoc": "Indicates all filters for all defined types of differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32767"
    },
    {
      "name": "filterFlags",
      "comment": "filterFlags holds the actual indicators for each\n  difference type as a bit setting.",
      "javadoc": "\u003cCODE\u003efilterFlags\u003c/CODE\u003e holds the actual indicators for each\n  difference type as a bit setting.",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates new ProgramDiffFilter with none of the diff types selected.",
      "javadoc": "Creates new ProgramDiffFilter with none of the diff types selected.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates new ProgramDiffFilter equivalent to the specified ProgramDiffFilter.",
      "javadoc": "Creates new ProgramDiffFilter equivalent to the specified ProgramDiffFilter.\n@param filter the diff filter this one should equal.",
      "static": false,
      "params": [
        {
          "name": "filter",
          "type_long": "ghidra.program.util.ProgramDiffFilter",
          "type_short": "ProgramDiffFilter",
          "comment": "the diff filter this one should equal."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates new ProgramDiffFilter with the specified diff types selected.",
      "javadoc": "Creates new ProgramDiffFilter with the specified diff types selected.\n@param type one or more of the diff types \"OR\"ed together.\n \u003cBR\u003ei.e. CODE_UNIT_DIFFS | SYMBOL_DIFFS",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "one or more of the diff types \"OR\"ed together.\n i.e. CODE_UNIT_DIFFS | SYMBOL_DIFFS"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFilter",
      "comment": "getFilter determines whether or not the specified type of filter is set.",
      "javadoc": "getFilter determines whether or not the specified type of filter is set.\n@param type the set bits indicate the type of differences we want to \n check as being set in the filter.\n \u003cBR\u003eFor example, one or more of the diff types \"OR\"ed together.\n \u003cBR\u003ei.e. CODE_UNIT_DIFFS | SYMBOL_DIFFS\n@return true if filtering for the specified type of differences.",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "the set bits indicate the type of differences we want to \n check as being set in the filter.\n For example, one or more of the diff types \"OR\"ed together.\n i.e. CODE_UNIT_DIFFS | SYMBOL_DIFFS"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if filtering for the specified type of differences."
      },
      "throws": []
    },
    {
      "name": "addToFilter",
      "comment": "set this filter to look for types of differences in addition to those\n types where it is already looking for differences.\n The filter that is passed as a parameter indicates the additional types\n of differences.",
      "javadoc": "set this filter to look for types of differences in addition to those\n types where it is already looking for differences.\n The filter that is passed as a parameter indicates the additional types\n of differences.\n@param filter filter indicating the additional types of differences\n to look for between the programs.",
      "static": false,
      "params": [
        {
          "name": "filter",
          "type_long": "ghidra.program.util.ProgramDiffFilter",
          "type_short": "ProgramDiffFilter",
          "comment": "filter indicating the additional types of differences\n to look for between the programs."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFilter",
      "comment": "setFilter specifies whether or not the indicated type of difference will be\n included by the filter (true) or not included (false).",
      "javadoc": "setFilter specifies whether or not the indicated type of difference will be\n included by the filter (true) or not included (false).\n@param type the set bits indicate the type of differences we want to \n look for in the programs.\n \u003cBR\u003eFor example, one or more of the diff types \"OR\"ed together.\n \u003cBR\u003ei.e. CODE_UNIT_DIFFS | SYMBOL_DIFFS\n@param filter true if you want to determine differences of the specified type.",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "the set bits indicate the type of differences we want to \n look for in the programs.\n For example, one or more of the diff types \"OR\"ed together.\n i.e. CODE_UNIT_DIFFS | SYMBOL_DIFFS"
        },
        {
          "name": "filter",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if you want to determine differences of the specified type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearAll",
      "comment": "Sets all the defined types of differences to false.\n Filter indicates no interest in any difference types.",
      "javadoc": "Sets all the defined types of differences to false.\n Filter indicates no interest in any difference types.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "selectAll",
      "comment": "Sets all the defined types of differences to true.\n Filter indicates interest in all difference types.",
      "javadoc": "Sets all the defined types of differences to true.\n Filter indicates interest in all difference types.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrimaryTypes",
      "comment": "Gets all the valid individual types of differences for this filter.\n These are also referred to as primary difference types.",
      "javadoc": "Gets all the valid individual types of differences for this filter.\n These are also referred to as primary difference types.\n@return an array containing all the currently defined difference types",
      "static": true,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "an array containing all the currently defined difference types"
      },
      "throws": []
    },
    {
      "name": "typeToName",
      "comment": "typeToName() returns the name of the difference type.\n  Only predefined types, as specified in ProgramDiffFilter,\n  will return a name. Otherwise, an empty string is returned.",
      "javadoc": "\u003cCODE\u003etypeToName()\u003c/CODE\u003e returns the name of the difference type.\n  Only predefined types, as specified in \u003cCODE\u003eProgramDiffFilter\u003c/CODE\u003e,\n  will return a name. Otherwise, an empty string is returned.\n@param type the type of difference whose name is wanted.\n@return the name of the predefined difference type. Otherwise, the empty string.",
      "static": true,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "the type of difference whose name is wanted."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the predefined difference type. Otherwise, the empty string."
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "Determines whether or not this filter is equal to the object that\n is passed in.",
      "javadoc": "Determines whether or not this filter is equal to the object that\n is passed in.\n@param obj the object to compare this one with.\n@return true if the filter matches this one.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the object to compare this one with."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the filter matches this one."
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Returns a string representation of the current settings for this filter.",
      "javadoc": "Returns a string representation of the current settings for this filter.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
