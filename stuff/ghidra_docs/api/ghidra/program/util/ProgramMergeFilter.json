{
  "name": "ProgramMergeFilter",
  "comment": "The ProgramMergeFilter is used to specify which portions of a \n program should be merged into another program.\n It indicates the types of program differences to merge. \n Each merge type can have its filter set to IGNORE or REPLACE.\n IGNORE indicates no interest in replacing or merging that type of difference.\n REPLACE indicates to replace differences in program1 with differences of \n that type from program2.\n Some merge types (for example, COMMENTS and SYMBOLS) allow the filter to be \n set to MERGE.\n MERGE indicates that the type should\n be taken from Program2 and merged into Program1 with whatever is alreaady there.",
  "javadoc": "The \u003cCODE\u003eProgramMergeFilter\u003c/CODE\u003e is used to specify which portions of a \n program should be merged into another program.\n It indicates the types of program differences to merge. \n Each merge type can have its filter set to \u003cCODE\u003eIGNORE\u003c/CODE\u003e or \u003cCODE\u003eREPLACE\u003c/CODE\u003e.\n \u003cCODE\u003eIGNORE\u003c/CODE\u003e indicates no interest in replacing or merging that type of difference.\n \u003cCODE\u003eREPLACE\u003c/CODE\u003e indicates to replace differences in program1 with differences of \n that type from program2.\n Some merge types (for example, COMMENTS and SYMBOLS) allow the filter to be \n set to \u003cCODE\u003eMERGE\u003c/CODE\u003e.\n \u003cCODE\u003eMERGE\u003c/CODE\u003e indicates that the type should\n be taken from Program2 and merged into Program1 with whatever is alreaady there.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "INVALID",
      "comment": "Indicates the merge filter difference type specified was not valid.",
      "javadoc": "Indicates the merge filter difference type specified was not valid.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "IGNORE",
      "comment": "IGNORE is a filter value indicating that the type of difference isn\u0027t to\n be changed in the merged program.",
      "javadoc": "IGNORE is a \u003cB\u003efilter value\u003c/B\u003e indicating that the type of difference isn\u0027t to\n be changed in the merged program.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "REPLACE",
      "comment": "REPLACE is a filter value indicating that the type of difference in program1\n should be replaced with the difference from program2.",
      "javadoc": "REPLACE is a \u003cB\u003efilter value\u003c/B\u003e indicating that the type of difference in program1\n should be replaced with the difference from program2.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "MERGE",
      "comment": "MERGE is a filter value indicating that the type of difference should be merged \n from program2 with what is already in program1 (the property type should be taken\n from both program1 and program2.)",
      "javadoc": "MERGE is a \u003cB\u003efilter value\u003c/B\u003e indicating that the type of difference should be merged \n from program2 with what is already in program1 (the property type should be taken\n from both program1 and program2.)",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "MERGE_PROGRAM_CONTEXT",
      "comment": "Internal array index for \"program context\" filter value.",
      "javadoc": "Internal array index for \"program context\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "PROGRAM_CONTEXT",
      "comment": "Indicates the merge filter for the program context differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the program context differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "MERGE_BYTES",
      "comment": "Internal array index for \"bytes\" filter value.",
      "javadoc": "Internal array index for \"bytes\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "BYTES",
      "comment": "Indicates the merge filter for the byte differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the byte differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "MERGE_INSTRUCTIONS",
      "comment": "Internal array index for \"instructions\" filter value.",
      "javadoc": "Internal array index for \"instructions\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "INSTRUCTIONS",
      "comment": "Indicates the merge filter for the instruction code unit differences.\n This includes mnemonic, operand, and value references, and equates.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the instruction code unit differences.\n This includes mnemonic, operand, and value references, and equates.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "MERGE_DATA",
      "comment": "Internal array index for \"data\" filter value.",
      "javadoc": "Internal array index for \"data\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "DATA",
      "comment": "Indicates the merge filter for the data code unit differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the data code unit differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "MERGE_REFS",
      "comment": "Internal array index for \"all references\" filter value.",
      "javadoc": "Internal array index for \"all references\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "REFERENCES",
      "comment": "Indicates the merge filter for the memory, variable, and external reference differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the memory, variable, and external reference differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16"
    },
    {
      "name": "MERGE_PLATE_COMMENTS",
      "comment": "Internal array index for \"plate comments\" filter value.",
      "javadoc": "Internal array index for \"plate comments\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "PLATE_COMMENTS",
      "comment": "Indicates the merge filter for the plate comment differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the plate comment differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32"
    },
    {
      "name": "MERGE_PRE_COMMENTS",
      "comment": "Internal array index for \"pre comments\" filter value.",
      "javadoc": "Internal array index for \"pre comments\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "PRE_COMMENTS",
      "comment": "Indicates the merge filter for the pre comment differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the pre comment differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "64"
    },
    {
      "name": "MERGE_EOL_COMMENTS",
      "comment": "Internal array index for \"eol comments\" filter value.",
      "javadoc": "Internal array index for \"eol comments\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "7"
    },
    {
      "name": "EOL_COMMENTS",
      "comment": "Indicates the merge filter for the eol comment differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the eol comment differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "128"
    },
    {
      "name": "MERGE_REPEATABLE_COMMENTS",
      "comment": "Internal array index for \"repeatable comments\" filter value.",
      "javadoc": "Internal array index for \"repeatable comments\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "REPEATABLE_COMMENTS",
      "comment": "Indicates the merge filter for the repeatable comment differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the repeatable comment differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "256"
    },
    {
      "name": "MERGE_POST_COMMENTS",
      "comment": "Internal array index for \"post comments\" filter value.",
      "javadoc": "Internal array index for \"post comments\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "9"
    },
    {
      "name": "POST_COMMENTS",
      "comment": "Indicates the merge filter for the post comment differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the post comment differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "512"
    },
    {
      "name": "MERGE_SYMBOLS",
      "comment": "Internal array index for \"symbols\" filter value.",
      "javadoc": "Internal array index for \"symbols\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "10"
    },
    {
      "name": "SYMBOLS",
      "comment": "Indicates the merge filter for the label differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the label differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1024"
    },
    {
      "name": "MERGE_BOOKMARKS",
      "comment": "Internal array index for \"bookmarks\" filter value.",
      "javadoc": "Internal array index for \"bookmarks\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "11"
    },
    {
      "name": "BOOKMARKS",
      "comment": "Indicates the merge filter for bookmark differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for bookmark differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2048"
    },
    {
      "name": "MERGE_PROPERTIES",
      "comment": "Internal array index for \"properties\" filter value.",
      "javadoc": "Internal array index for \"properties\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "12"
    },
    {
      "name": "PROPERTIES",
      "comment": "Indicates the merge filter for the user defined property differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the user defined property differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4096"
    },
    {
      "name": "MERGE_FUNCTIONS",
      "comment": "Internal array index for \"functions\" filter value.",
      "javadoc": "Internal array index for \"functions\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "13"
    },
    {
      "name": "FUNCTIONS",
      "comment": "Indicates the merge filter for the functions differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the functions differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8192"
    },
    {
      "name": "MERGE_EQUATES",
      "comment": "Internal array index for \"equates\" filter value.",
      "javadoc": "Internal array index for \"equates\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "14"
    },
    {
      "name": "EQUATES",
      "comment": "Indicates the merge filter for the equates differences.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for the equates differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16384"
    },
    {
      "name": "MERGE_PRIMARY_SYMBOL",
      "comment": "Internal array index for \"primary symbol\" filter value.",
      "javadoc": "Internal array index for \"primary symbol\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "15"
    },
    {
      "name": "PRIMARY_SYMBOL",
      "comment": "Indicates the merge filter for replacing the primary symbol with the one from program 2 when merging labels.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for replacing the primary symbol with the one from program 2 when merging labels.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32768"
    },
    {
      "name": "MERGE_FUNCTION_TAGS",
      "comment": "Internal array index for \"function tags\" filter value.",
      "javadoc": "Internal array index for \"function tags\" filter value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16"
    },
    {
      "name": "FUNCTION_TAGS",
      "comment": "Indicates the merge filter for function tags.",
      "javadoc": "Indicates the \u003cB\u003emerge filter\u003c/B\u003e for function tags.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "65536"
    },
    {
      "name": "NUM_PRIMARY_TYPES",
      "comment": "The total number of primary merge difference types.",
      "javadoc": "The total number of primary merge difference types.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "17"
    },
    {
      "name": "CODE_UNITS",
      "comment": "Indicates to merge code unit differences. This includes instructions,\n data, and equates.",
      "javadoc": "Indicates to merge code unit differences. This includes instructions,\n data, and equates.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "12"
    },
    {
      "name": "COMMENTS",
      "comment": "Indicates to merge all comment differences.",
      "javadoc": "Indicates to merge all comment differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "992"
    },
    {
      "name": "ALL",
      "comment": "Indicates all merge filters for all types of differences.",
      "javadoc": "Indicates all \u003cB\u003emerge filters\u003c/B\u003e for all types of differences.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "131071"
    },
    {
      "name": "filterFlags",
      "comment": "Array holding the filter value for each of the primary merge difference types.",
      "javadoc": "Array holding the filter value for each of the primary merge difference types.",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates new ProgramMergeFilter with none of the merge types selected.",
      "javadoc": "Creates new ProgramMergeFilter with none of the merge types selected.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates new ProgramMergeFilter that is equal to the specified ProgramMergeFilter.",
      "javadoc": "Creates new ProgramMergeFilter that is equal to the specified ProgramMergeFilter.",
      "static": false,
      "params": [
        {
          "name": "filter",
          "type_long": "ghidra.program.util.ProgramMergeFilter",
          "type_short": "ProgramMergeFilter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates new ProgramMergeFilter with the specified merge types selected.",
      "javadoc": "Creates new ProgramMergeFilter with the specified merge types selected.\n@param type the type of difference to look for between the programs.\n@param filter IGNORE, REPLACE, or MERGE. Indicates \n which program difference to include of the specified type.\n If a particular type cannot be set to MERGE then it will be set to REPLACE.",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "the type of difference to look for between the programs."
        },
        {
          "name": "filter",
          "type_long": "int",
          "type_short": "int",
          "comment": "IGNORE, REPLACE, or MERGE. Indicates \n which program difference to include of the specified type.\n If a particular type cannot be set to MERGE then it will be set to REPLACE."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFilter",
      "comment": "getFilter determines whether or not the specified type of filter is set.\n Valid types are: BYTES, INSTRUCTIONS, DATA,\n SYMBOLS, PRIMARY_SYMBOL, COMMENTS, PROGRAM_CONTEXT, PROPERTIES, BOOKMARKS, FUNCTIONS.\n INVALID is returned if combinations of merge types (e.g. ALL) are \n passed in.",
      "javadoc": "getFilter determines whether or not the specified type of filter is set.\n Valid types are: BYTES, INSTRUCTIONS, DATA,\n SYMBOLS, PRIMARY_SYMBOL, COMMENTS, PROGRAM_CONTEXT, PROPERTIES, BOOKMARKS, FUNCTIONS.\n INVALID is returned if combinations of merge types (e.g. ALL) are \n passed in.\n@param type the merge type.\n@return IGNORE, REPLACE, or MERGE. INVALID if parameter is a combination of \n types or not a predefined primary type.",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "the merge type."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "IGNORE, REPLACE, or MERGE. INVALID if parameter is a combination of \n types or not a predefined primary type."
      },
      "throws": []
    },
    {
      "name": "validatePredefinedType",
      "comment": "validatePredefinedType determines whether or not the indicated type\n of filter item is a valid predefined type.\n Valid types are: BYTES, INSTRUCTIONS, DATA,\n SYMBOLS, PRIMARY_SYMBOL, COMMENTS, PROGRAM_CONTEXT, PROPERTIES, BOOKMARKS, FUNCTIONS, ALL.",
      "javadoc": "validatePredefinedType determines whether or not the indicated type\n of filter item is a valid predefined type.\n Valid types are: BYTES, INSTRUCTIONS, DATA,\n SYMBOLS, PRIMARY_SYMBOL, COMMENTS, PROGRAM_CONTEXT, PROPERTIES, BOOKMARKS, FUNCTIONS, ALL.\n@param type the type of difference to look for between the programs.\n@return true if this is a pre-defined merge type.",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "the type of difference to look for between the programs."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is a pre-defined merge type."
      },
      "throws": []
    },
    {
      "name": "isSet",
      "comment": "Determines if at least one of the filter types is set to REPLACE or MERGE.",
      "javadoc": "Determines if at least one of the filter types is set to REPLACE or MERGE.\n@return true if at least one type is set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if at least one type is set."
      },
      "throws": []
    },
    {
      "name": "validateType",
      "comment": "validateType determines whether or not the indicated type of filter item\n is valid.\n Valid types are: BYTES, INSTRUCTIONS, DATA, REFERENCES,\n SYMBOLS, PRIMARY_SYMBOL, COMMENTS, PROGRAM_CONTEXT, PROPERTIES, BOOKMARKS, FUNCTIONS, ALL.\n The type can also be any of the predefined types \"OR\"ed together.",
      "javadoc": "validateType determines whether or not the indicated type of filter item\n is valid.\n Valid types are: BYTES, INSTRUCTIONS, DATA, REFERENCES,\n SYMBOLS, PRIMARY_SYMBOL, COMMENTS, PROGRAM_CONTEXT, PROPERTIES, BOOKMARKS, FUNCTIONS, ALL.\n The type can also be any of the predefined types \"OR\"ed together.\n@param type the type of difference to look for between the programs.\n@return true if the type is a valid merge difference type(s).",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "the type of difference to look for between the programs."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the type is a valid merge difference type(s)."
      },
      "throws": []
    },
    {
      "name": "validateFilter",
      "comment": "validateFilter determines whether or not the filter is one of our valid\n  predefiend values.\n  Valid filter values are: IGNORE, REPLACE, or MERGE.",
      "javadoc": "validateFilter determines whether or not the filter is one of our valid\n  predefiend values.\n  Valid filter values are: IGNORE, REPLACE, or MERGE.\n@param filter the filter value.\n@return true if the filter value is valid.",
      "static": false,
      "params": [
        {
          "name": "filter",
          "type_long": "int",
          "type_short": "int",
          "comment": "the filter value."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the filter value is valid."
      },
      "throws": []
    },
    {
      "name": "isMergeValidForFilter",
      "comment": "isMergeValidForFilter determines whether or not the MERGE\n  filter if valid for the indicated primary merge type.\n Possible types are: BYTES, INSTRUCTIONS, DATA, REFERENCES,\n SYMBOLS, PRIMARY_SYMBOL, COMMENTS, PROGRAM_CONTEXT, PROPERTIES, BOOKMARKS, FUNCTIONS, ALL.",
      "javadoc": "isMergeValidForFilter determines whether or not the \u003cCODE\u003eMERGE\u003c/CODE\u003e\n  filter if valid for the indicated primary merge type.\n Possible types are: BYTES, INSTRUCTIONS, DATA, REFERENCES,\n SYMBOLS, PRIMARY_SYMBOL, COMMENTS, PROGRAM_CONTEXT, PROPERTIES, BOOKMARKS, FUNCTIONS, ALL.\n@param type the type of difference to merge between the programs.\n@return true if \u003cCODE\u003eMERGE\u003c/CODE\u003e is valid for the merge type.\n@throws IllegalArgumentException if type isn\u0027t a predefined individual \n merge type.",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "the type of difference to merge between the programs."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if MERGE is valid for the merge type."
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if type isn\u0027t a predefined individual \n merge type."
        }
      ]
    },
    {
      "name": "setFilter",
      "comment": "setFilter specifies whether or not the indicated type of item will\n not be included by the filter (IGNORE), replaced in the first program using the type of \n item in the second program (REPLACE), or included from both programs (MERGE).\n Valid types are: BYTES, INSTRUCTIONS, DATA, REFERENCES,\n SYMBOLS, PRIMARY_SYMBOL, COMMENTS, PROPERTIES, BOOKMARKS, FUNCTIONS, ALL, or combinations of\n these \"OR\"ed together.\n if MERGE is not valid for an included primary type, then it \n will be set to REPLACE instead for that primary type.",
      "javadoc": "setFilter specifies whether or not the indicated type of item will\n not be included by the filter (IGNORE), replaced in the first program using the type of \n item in the second program (REPLACE), or included from both programs (MERGE).\n Valid types are: BYTES, INSTRUCTIONS, DATA, REFERENCES,\n SYMBOLS, PRIMARY_SYMBOL, COMMENTS, PROPERTIES, BOOKMARKS, FUNCTIONS, ALL, or combinations of\n these \"OR\"ed together.\n if \u003cCODE\u003eMERGE\u003c/CODE\u003e is not valid for an included primary type, then it \n will be set to \u003cCODE\u003eREPLACE\u003c/CODE\u003e instead for that primary type.\n@param type the type(s) of difference(s) to include.\n@param filter IGNORE, REPLACE, or MERGE. Indicates whether to include none, \n one, or both programs\u0027 differences of the specified type.",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "the type(s) of difference(s) to include."
        },
        {
          "name": "filter",
          "type_long": "int",
          "type_short": "int",
          "comment": "IGNORE, REPLACE, or MERGE. Indicates whether to include none, \n one, or both programs\u0027 differences of the specified type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Returns a printable string indicating the current settings of this filter.",
      "javadoc": "Returns a printable string indicating the current settings of this filter.\n@return the current settings for this filter.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the current settings for this filter."
      },
      "throws": []
    },
    {
      "name": "getPrimaryTypes",
      "comment": "Gets all the valid individual types of differences for this filter.",
      "javadoc": "Gets all the valid individual types of differences for this filter.\n@return an array containing all the currently defined primary difference \n types.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "an array containing all the currently defined primary difference \n types."
      },
      "throws": []
    },
    {
      "name": "typeToName",
      "comment": "typeToName() returns the name of a predefined merge type.\n  Only predefined types, as specified in ProgramMergeFilter, \n  will return a name. Otherwise, an empty string is returned.",
      "javadoc": "\u003cCODE\u003etypeToName()\u003c/CODE\u003e returns the name of a predefined merge type.\n  Only predefined types, as specified in \u003cCODE\u003eProgramMergeFilter\u003c/CODE\u003e, \n  will return a name. Otherwise, an empty string is returned.\n@param type the type of merge difference whose name is wanted.\n Valid types are: BYTES, INSTRUCTIONS, DATA, REFERENCES,\n SYMBOLS, PRIMARY_SYMBOL, COMMENTS, PROGRAM_CONTEXT, PROPERTIES, BOOKMARKS, FUNCTIONS, ALL.\n@return the name of the predefined merge difference type. \n Otherwise, the empty string.",
      "static": true,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "the type of merge difference whose name is wanted.\n Valid types are: BYTES, INSTRUCTIONS, DATA, REFERENCES,\n SYMBOLS, PRIMARY_SYMBOL, COMMENTS, PROGRAM_CONTEXT, PROPERTIES, BOOKMARKS, FUNCTIONS, ALL."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the predefined merge difference type. \n Otherwise, the empty string."
      },
      "throws": []
    },
    {
      "name": "filterToName",
      "comment": "filterToName returns the string associated with an\n individual (primary) merge difference setting.",
      "javadoc": "\u003cCODE\u003efilterToName\u003c/CODE\u003e returns the string associated with an\n individual (primary) merge difference setting.\n@param type the type of filter.\n Valid types are: IGNORE, REPLACE, MERGE.\n@return the string indicating the merge difference setting.",
      "static": true,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "the type of filter.\n Valid types are: IGNORE, REPLACE, MERGE."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string indicating the merge difference setting."
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "Determines whether or not this filter is equal to the object that\n is passed in.",
      "javadoc": "Determines whether or not this filter is equal to the object that\n is passed in.\n@param obj the object to compare this one with.\n@return true if the filter matches this one.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the object to compare this one with."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the filter matches this one."
      },
      "throws": []
    }
  ]
}
