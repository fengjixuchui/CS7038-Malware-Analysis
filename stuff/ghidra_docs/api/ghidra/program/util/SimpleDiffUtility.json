{
  "name": "SimpleDiffUtility",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCompatibleVariableStorage",
      "comment": "Convert a variable storage object from the specified program to a comparable variable storage\n object in the specified otherProgram.  Certain variable storage (UNIQUE/HASH-based) will\n always produce a null return object.",
      "javadoc": "Convert a variable storage object from the specified program to a comparable variable storage\n object in the specified otherProgram.  Certain variable storage (UNIQUE/HASH-based) will\n always produce a null return object.\n@param program program which contains the specified address instance\n@param storage variable storage in program\n@param otherProgram other program\n@return storage for otherProgram or null if storage can not be mapped to other program",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program which contains the specified address instance"
        },
        {
          "name": "storage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": "variable storage in program"
        },
        {
          "name": "otherProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "other program"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": "storage for otherProgram or null if storage can not be mapped to other program"
      },
      "throws": []
    },
    {
      "name": "getCompatibleVarnode",
      "comment": "Convert a varnode from the specified program to a comparable varnode in the\n specified otherProgram.  Certain varnode addresses spaces (UNIQUE, HASH) will\n always produce a null return varnode.",
      "javadoc": "Convert a varnode from the specified program to a comparable varnode in the\n specified otherProgram.  Certain varnode addresses spaces (UNIQUE, HASH) will\n always produce a null return varnode.\n@param program program which contains the specified address instance\n@param varnode varnode in program\n@param otherProgram other program\n@return varnode for otherProgram or null if varnode can not be mapped to other program",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program which contains the specified address instance"
        },
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "varnode in program"
        },
        {
          "name": "otherProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "other program"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "varnode for otherProgram or null if varnode can not be mapped to other program"
      },
      "throws": []
    },
    {
      "name": "getStartOfDelaySlots",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEndOfDelaySlots",
      "comment": "If the specified instruction is contained within a delay slot, or has delay slots,\n the maximum address of the last delay slot instruction will be returned.\n If a normal instruction is specified the instructions maximum address is returned.",
      "javadoc": "If the specified instruction is contained within a delay slot, or has delay slots,\n the maximum address of the last delay slot instruction will be returned.\n If a normal instruction is specified the instructions maximum address is returned.\n@param instr\n@return maximum address of instruction or its last delay slot",
      "static": true,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "maximum address of instruction or its last delay slot"
      },
      "throws": []
    },
    {
      "name": "expandAddressSetToIncludeFullDelaySlots",
      "comment": "Expand a specified address set to include complete delay slotted instructions\n which may be included at the start or end of each range within the specified\n address set.",
      "javadoc": "Expand a specified address set to include complete delay slotted instructions\n which may be included at the start or end of each range within the specified\n address set.\n@param program program\n@param originalSet original address set\n@return expanded address set",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program"
        },
        {
          "name": "originalSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "original address set"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "expanded address set"
      },
      "throws": []
    },
    {
      "name": "getCompatibleAddress",
      "comment": "Convert an address from the specified program to a comparable address in the\n specified otherProgram.",
      "javadoc": "Convert an address from the specified program to a comparable address in the\n specified otherProgram.\n@param program program which contains the specified address instance\n@param addr address in program\n@param otherProgram other program\n@return address for otherProgram or null if no such address exists.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program which contains the specified address instance"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address in program"
        },
        {
          "name": "otherProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "other program"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "address for otherProgram or null if no such address exists."
      },
      "throws": []
    },
    {
      "name": "translateMemoryAddress",
      "comment": "Convert an address from the specified program to a comparable address in the\n specified otherProgram.",
      "javadoc": "Convert an address from the specified program to a comparable address in the\n specified otherProgram.\n@param addr address in program\n@param otherProgram other program\n@param exactMatchOnly if false and addr is an overlay address, a closest match will be returned\n if possible\n@return address for otherProgram or null if no such address exists.",
      "static": true,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address in program"
        },
        {
          "name": "otherProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "other program"
        },
        {
          "name": "exactMatchOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if false and addr is an overlay address, a closest match will be returned\n if possible"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "address for otherProgram or null if no such address exists."
      },
      "throws": []
    },
    {
      "name": "getCompatibleAddressSpace",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "addrSpace",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": ""
        },
        {
          "name": "otherProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbol",
      "comment": "Given a symbol for a specified program, get the corresponding symbol from the\n specified otherProgram.",
      "javadoc": "Given a symbol for a specified program, get the corresponding symbol from the\n specified otherProgram.\n@param symbol symbol to look for\n@param otherProgram other program\n@return corresponding symbol for otherProgram or null if no such symbol exists.",
      "static": true,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "symbol to look for"
        },
        {
          "name": "otherProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "other program"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": "corresponding symbol for otherProgram or null if no such symbol exists."
      },
      "throws": []
    },
    {
      "name": "getOtherCodeSymbol",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        },
        {
          "name": "otherProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "namespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOtherFunctionSymbol",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        },
        {
          "name": "otherProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "otherNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOtherExternalLocationSymbol",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        },
        {
          "name": "otherProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "otherNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExternalLocation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocation",
        "type_short": "ExternalLocation",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMatchingExternalSymbol",
      "comment": "Given an external symbol for a specified program, get the corresponding symbol,\n which has the same name and path,  from the specified otherProgram.\n Note: The type of the returned symbol may be different than the type of the symbol",
      "javadoc": "Given an external symbol for a specified program, get the corresponding symbol,\n which has the same name and path,  from the specified otherProgram.\u003cbr\u003e\n Note: The type of the returned symbol may be different than the type of the symbol\n@param program program which contains the specified symbol instance\n@param symbol symbol to look for\n@param otherProgram other program\n@param otherRestrictedSymbolIds an optional set of symbol ID\u0027s from the other program\n which will be treated as the exclusive set of candidate symbols to consider.\n@return corresponding external symbol for otherProgram or null if no such symbol exists.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program which contains the specified symbol instance"
        },
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "symbol to look for"
        },
        {
          "name": "otherProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "other program"
        },
        {
          "name": "otherRestrictedSymbolIds",
          "type_long": "java.util.Set\u003cjava.lang.Long\u003e",
          "type_short": "Set",
          "comment": "an optional set of symbol ID\u0027s from the other program\n which will be treated as the exclusive set of candidate symbols to consider."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": "corresponding external symbol for otherProgram or null if no such symbol exists."
      },
      "throws": []
    },
    {
      "name": "originalNamesDontConflict",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "extLoc",
          "type_long": "ghidra.program.model.symbol.ExternalLocation",
          "type_short": "ExternalLocation",
          "comment": ""
        },
        {
          "name": "otherExtLoc",
          "type_long": "ghidra.program.model.symbol.ExternalLocation",
          "type_short": "ExternalLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMatchingExternalLocation",
      "comment": "Given an external location for a specified program, get the corresponding external location,\n which has the same name and path,  from the specified otherProgram.\n Note: The type of the returned external location may be different than the type of the\n original external location.",
      "javadoc": "Given an external location for a specified program, get the corresponding external location,\n which has the same name and path,  from the specified otherProgram.\u003cbr\u003e\n Note: The type of the returned external location may be different than the type of the\n original external location.\n@param program program which contains the specified external location instance\n@param externalLocation external location to look for\n@param otherProgram other program\n@return corresponding external location for otherProgram or null if no such external location exists.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program which contains the specified external location instance"
        },
        {
          "name": "externalLocation",
          "type_long": "ghidra.program.model.symbol.ExternalLocation",
          "type_short": "ExternalLocation",
          "comment": "external location to look for"
        },
        {
          "name": "otherProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "other program"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocation",
        "type_short": "ExternalLocation",
        "comment": "corresponding external location for otherProgram or null if no such external location exists."
      },
      "throws": []
    },
    {
      "name": "getVariableSymbol",
      "comment": "Find the variable symbol in otherProgram which corresponds to the specified varSym.",
      "javadoc": "Find the variable symbol in otherProgram which corresponds to the specified varSym.\n@param symbol variable symbol\n@param otherProgram other program\n@return the variable symbol or null",
      "static": true,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "variable symbol"
        },
        {
          "name": "otherProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "other program"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": "the variable symbol or null"
      },
      "throws": []
    },
    {
      "name": "getVariableSymbol",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "varSym",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        },
        {
          "name": "otherProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "otherNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVariableSymbol",
      "comment": "Find the variable symbol in otherFunction which corresponds to the specified varSym.",
      "javadoc": "Find the variable symbol in otherFunction which corresponds to the specified varSym.\n@param varSym variable symbol\n@param otherFunction other function\n@return the variable symbol or null",
      "static": true,
      "params": [
        {
          "name": "varSym",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "variable symbol"
        },
        {
          "name": "otherFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "other function"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": "the variable symbol or null"
      },
      "throws": []
    },
    {
      "name": "getOverlappingVariable",
      "comment": "Find overlapping variable which meets the following conditions\n 1. First use offset matches\n 2. Ordinal matches (for parameters only)\n 3. Minimum or maximum address matches",
      "javadoc": "Find overlapping variable which meets the following conditions\n 1. First use offset matches\n 2. Ordinal matches (for parameters only)\n 3. Minimum or maximum address matches\n@param otherSymTable other symbol table\n@param var variable\n@param otherStorage other variable storage\n@param otherFunctionSymbol other function symbol\n@return the overlapping variable or null",
      "static": true,
      "params": [
        {
          "name": "otherSymTable",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": "other symbol table"
        },
        {
          "name": "var",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "variable"
        },
        {
          "name": "otherStorage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": "other variable storage"
        },
        {
          "name": "otherFunctionSymbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "other function symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable",
        "type_short": "Variable",
        "comment": "the overlapping variable or null"
      },
      "throws": []
    }
  ]
}
