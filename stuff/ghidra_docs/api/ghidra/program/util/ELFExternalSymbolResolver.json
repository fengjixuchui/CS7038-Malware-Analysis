{
  "name": "ELFExternalSymbolResolver",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixUnresolvedExternalSymbols",
      "comment": "Links unresolved symbols to the first symbol found in the (ordered) linked\n libraries (saved in the program\u0027s properties as \"ELF Required Library [nn]\").\n \n The ordering and precedence logic is ELF specific though no ELF binary formats\n are parsed or required.\n \n The program\u0027s external libraries need to already be populated with paths to\n already existing / imported libraries.\n ",
      "javadoc": "Links unresolved symbols to the first symbol found in the (ordered) linked\n libraries (saved in the program\u0027s properties as \"ELF Required Library [nn]\").\n \u003cp\u003e\n The ordering and precedence logic is ELF specific though no ELF binary formats\n are parsed or required.\n \u003cp\u003e\n The program\u0027s external libraries need to already be populated with paths to\n already existing / imported libraries.\n \u003cp\u003e\n@param program ELF {@link Program} to fix.\n@param saveIfModified boolean flag, if true the program will be saved if there was a\n modification.\n@param messageLog {@link MessageLog} to write info message to.\n@param monitor {@link TaskMonitor} to watch for cancel and update with progress.\n@throws CancelledException if user cancels\n@throws IOException if error reading",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "ELF Program to fix."
        },
        {
          "name": "saveIfModified",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag, if true the program will be saved if there was a\n modification."
        },
        {
          "name": "messageLog",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "MessageLog to write info message to."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor to watch for cancel and update with progress."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if user cancels"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error reading"
        }
      ]
    },
    {
      "name": "resolveSymbolsToLibrary",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "unresolvedExternalFunctionIds",
          "type_long": "java.util.Collection\u003cjava.lang.Long\u003e",
          "type_short": "Collection",
          "comment": ""
        },
        {
          "name": "extLibrary",
          "type_long": "ghidra.program.model.listing.Library",
          "type_short": "Library",
          "comment": ""
        },
        {
          "name": "libProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "messageLog",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isLocationContainedInLibrary",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "libProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "extLoc",
          "type_long": "ghidra.program.model.symbol.ExternalLocation",
          "type_short": "ExternalLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUnresolvedExternalFunctionIds",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cjava.lang.Long\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOrderedLibraryNamesNeeded",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cjava.lang.String\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLibrarySearchList",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.listing.Library\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    }
  ]
}
