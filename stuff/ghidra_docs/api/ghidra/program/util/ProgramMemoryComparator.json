{
  "name": "ProgramMemoryComparator",
  "comment": "ProgramMemoryComparator is a class for comparing two programs and\n determining the address differences between them.",
  "javadoc": "\u003cCODE\u003eProgramMemoryComparator\u003c/CODE\u003e is a class for comparing two programs and\n determining the address differences between them.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "program1",
      "comment": "The first program for the diff.",
      "javadoc": "The first program for the diff.",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "program2",
      "comment": "The second program for the diff.",
      "javadoc": "The second program for the diff.",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "initInBoth",
      "comment": "Addresses of initialized memory in both programs one and two. \n  Addresses in this address set are derived from program1.",
      "javadoc": "Addresses of initialized memory in both programs one and two. \n  Addresses in this address set are derived from program1.",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "sameTypeInBoth",
      "comment": "Addresses with same memory type in both programs one and two.\n  Addresses in this address set are derived from program1.",
      "javadoc": "Addresses with same memory type in both programs one and two.\n  Addresses in this address set are derived from program1.",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "inBoth",
      "comment": "Addresses in both programs one and two.\n  Addresses in this address set are derived from program1.",
      "javadoc": "Addresses in both programs one and two.\n  Addresses in this address set are derived from program1.",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "onlyInOne",
      "comment": "Addresses only in program one.\n  Addresses in this address set are derived from program1.",
      "javadoc": "Addresses only in program one.\n  Addresses in this address set are derived from program1.",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "onlyInTwo",
      "comment": "Addresses only in program two.\n  Addresses in this address set are derived from program2.",
      "javadoc": "Addresses only in program two.\n  Addresses in this address set are derived from program2.",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "compatibleOnlyInTwo",
      "comment": "Addresses only in program2 that are compatible with program1.\n  Addresses in this address set are derived from program1.",
      "javadoc": "Addresses only in program2 that are compatible with program1.\n  Addresses in this address set are derived from program1.",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "ProgramMemoryComparator is used to determine the memory\n address differences between two programs.",
      "javadoc": "\u003cCODE\u003eProgramMemoryComparator\u003c/CODE\u003e is used to determine the memory\n address differences between two programs.\n@param program1 the first program\n@param program2 the second program\n@throws ProgramConflictException if the two programs can\u0027t be compared.",
      "static": false,
      "params": [
        {
          "name": "program1",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the first program"
        },
        {
          "name": "program2",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the second program"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.util.ProgramConflictException",
          "type_short": "ProgramConflictException",
          "comment": "if the two programs can\u0027t be compared."
        }
      ]
    },
    {
      "name": "compareAddressTypes",
      "comment": "Check each program to see if the memory blocks have the same address types.",
      "javadoc": "Check each program to see if the memory blocks have the same address types.\n@param program1 the first program\n@param program2 the second program\n@throws ProgramConflictException if the address types for the two programs\n do not match.",
      "static": true,
      "params": [
        {
          "name": "program1",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the first program"
        },
        {
          "name": "program2",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the second program"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.util.ProgramConflictException",
          "type_short": "ProgramConflictException",
          "comment": "if the address types for the two programs\n do not match."
        }
      ]
    },
    {
      "name": "similarPrograms",
      "comment": "Return whether or not the two specified programs are alike \n (their language name or address spaces are the same).",
      "javadoc": "Return whether or not the two specified programs are alike \n (their language name or address spaces are the same).\n@param p1 the first program\n@param p2 the second program\n@return true if the programs are alike (their language name or address spaces are the same).",
      "static": true,
      "params": [
        {
          "name": "p1",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the first program"
        },
        {
          "name": "p2",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the second program"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the programs are alike (their language name or address spaces are the same)."
      },
      "throws": []
    },
    {
      "name": "determineAddressDiffs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgramOne",
      "comment": "Gets the first program being compared by the ProgramMemoryComparator.",
      "javadoc": "Gets the first program being compared by the ProgramMemoryComparator.\n@return program1.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "program1."
      },
      "throws": []
    },
    {
      "name": "getProgramTwo",
      "comment": "Gets the second program being compared by the ProgramMemoryComparator.",
      "javadoc": "Gets the second program being compared by the ProgramMemoryComparator.\n@return program2.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "program2."
      },
      "throws": []
    },
    {
      "name": "getCombinedAddresses",
      "comment": "Returns the addresses from combining the address sets in program1 and program2.\n  Addresses in the returned address set are derived from program1.",
      "javadoc": "Returns the addresses from combining the address sets in program1 and program2.\n  Addresses in the returned address set are derived from program1.\n@return the addresses for both program1 and program2.",
      "static": true,
      "params": [
        {
          "name": "program1",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "program2",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": "the addresses for both program1 and program2."
      },
      "throws": []
    },
    {
      "name": "getAddressRanges",
      "comment": "Returns an iterator for the address ranges in the set containing the combined addresses\n  in program1 and program2.\n  Address ranges from this iterator are derived using program1.",
      "javadoc": "Returns an iterator for the address ranges in the set containing the combined addresses\n  in program1 and program2.\n  Address ranges from this iterator are derived using program1.\n@return the addresses for both program1 and program2.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRangeIterator",
        "type_short": "AddressRangeIterator",
        "comment": "the addresses for both program1 and program2."
      },
      "throws": []
    },
    {
      "name": "getAddressesInCommon",
      "comment": "Returns the addresses in common between program1 and program2.\n  The returned address set is derived using program1.",
      "javadoc": "Returns the addresses in common between program1 and program2.\n  The returned address set is derived using program1.\n@return the addresses in common between program1 and program2.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": "the addresses in common between program1 and program2."
      },
      "throws": []
    },
    {
      "name": "getInitializedAddressesInCommon",
      "comment": "Returns the addresses of initialized memory in common between \n program1 and program2. This includes bit memory and live memory.\n The returned address set is derived using program1.",
      "javadoc": "Returns the addresses of initialized memory in common between \n program1 and program2. This includes bit memory and live memory.\n The returned address set is derived using program1.\n@return the addresses in common between program1 and program2.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": "the addresses in common between program1 and program2."
      },
      "throws": []
    },
    {
      "name": "getSameMemTypeAddressesInCommon",
      "comment": "Returns the addresses with the same memory types in common between \n program1 and program2.\n The returned address set is derived using program1.",
      "javadoc": "Returns the addresses with the same memory types in common between \n program1 and program2.\n The returned address set is derived using program1.\n@return the addresses in common between program1 and program2.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": "the addresses in common between program1 and program2."
      },
      "throws": []
    },
    {
      "name": "getAddressesOnlyInOne",
      "comment": "Returns the addresses that are in program1, but not in program2\n  The returned address set is derived using program1.",
      "javadoc": "Returns the addresses that are in program1, but not in program2\n  The returned address set is derived using program1.\n@return the addresses that are in program1, but not in program2.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": "the addresses that are in program1, but not in program2."
      },
      "throws": []
    },
    {
      "name": "getAddressesOnlyInTwo",
      "comment": "Returns the addresses that are in program2, but not in program1\n  The returned address set is derived using program2.",
      "javadoc": "Returns the addresses that are in program2, but not in program1\n  The returned address set is derived using program2.\n@return the addresses that are in program2, but not in program1.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": "the addresses that are in program2, but not in program1."
      },
      "throws": []
    },
    {
      "name": "getCompatibleAddressesOnlyInTwo",
      "comment": "Returns the set of addresses that are in program2, but not in program1\n and that are compatible with program1.\n  The returned address set is derived using program1.",
      "javadoc": "Returns the set of addresses that are in program2, but not in program1\n and that are compatible with program1.\n  The returned address set is derived using program1.\n@return the addresses that are in program2, but not in program1.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": "the addresses that are in program2, but not in program1."
      },
      "throws": []
    },
    {
      "name": "hasMemoryDifferences",
      "comment": "Return whether or not the memory addresses for the two Programs are different.",
      "javadoc": "Return whether or not the memory addresses for the two Programs are different.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sameProgramContextRegisterNames",
      "comment": "Returns true if the register names are the same in both programs.",
      "javadoc": "Returns true if the register names are the same in both programs.\n@param program1 the first program\n@param program2 the second program\n@return true if the register names are the same",
      "static": true,
      "params": [
        {
          "name": "program1",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the first program"
        },
        {
          "name": "program2",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the second program"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the register names are the same"
      },
      "throws": []
    }
  ]
}
