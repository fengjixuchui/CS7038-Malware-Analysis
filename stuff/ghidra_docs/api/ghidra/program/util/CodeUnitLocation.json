{
  "name": "CodeUnitLocation",
  "comment": "CodeUnitLocation provides information about the location\n in a program within a CodeUnit.",
  "javadoc": "\u003cCODE\u003eCodeUnitLocation\u003c/CODE\u003e provides information about the location\n in a program within a \u003cCODE\u003eCodeUnit\u003c/CODE\u003e.",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.util.ProgramLocation",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new CodeUnitLocation for the given address.\n The address will be adjusted to the beginning of the code unit containing\n that address(if it exists).  The original address can be retrieved using\n the \"getByteAddress()\" method.",
      "javadoc": "Create a new \u003cCODE\u003eCodeUnitLocation\u003c/CODE\u003e for the given address.\n The address will be adjusted to the beginning of the code unit containing\n that address(if it exists).  The original address can be retrieved using\n the \"getByteAddress()\" method.\n@param program the program for obtaining the code unit\n@param addr address of the location; should not be null\n@param componentPath if this is not null it is the path to a data\n component inside of another data component\n@param row the row within the field.\n@param col - the display item index on the given row. (Note most fields only have one display item per row)\n@param charOffset - the character offset within the display item.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for obtaining the code unit"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of the location; should not be null"
        },
        {
          "name": "componentPath",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "if this is not null it is the path to a data\n component inside of another data component"
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row within the field."
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "- the display item index on the given row. (Note most fields only have one display item per row)"
        },
        {
          "name": "charOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "- the character offset within the display item."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new CodeUnitLocation using the given information",
      "javadoc": "Create a new \u003cCODE\u003eCodeUnitLocation\u003c/CODE\u003e using the given information\n@param program the program for obtaining the code unit\n@param addr address of the location; should be on a code unit boundary.\n@param byteAddr the address of specific byte within the code unit at the addr address.\n@param componentPath if this is not null it is the path to a data\n component inside of another data component\n@param row the row within the field.\n@param col - the display item index on the given row. (Note most fields only have one display item per row)\n@param charOffset - the character offset within the display item.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for obtaining the code unit"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of the location; should be on a code unit boundary."
        },
        {
          "name": "byteAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of specific byte within the code unit at the addr address."
        },
        {
          "name": "componentPath",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "if this is not null it is the path to a data\n component inside of another data component"
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row within the field."
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "- the display item index on the given row. (Note most fields only have one display item per row)"
        },
        {
          "name": "charOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "- the character offset within the display item."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new CodeUnitLocation for the given address.\n The address will be adjusted to the beginning of the code unit containing\n that address(if it exists).  The original address can be retrieved using\n the \"getByteAddress()\" method.",
      "javadoc": "Create a new \u003cCODE\u003eCodeUnitLocation\u003c/CODE\u003e for the given address.\n The address will be adjusted to the beginning of the code unit containing\n that address(if it exists).  The original address can be retrieved using\n the \"getByteAddress()\" method.\n@param program the program for obtaining the code unit\n@param addr address of the location; should not be null\n@param row the row within the field.\n@param col - the display item index on the given row. (Note most fields only have one display item per row)\n@param charOffset - the character offset within the display item.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for obtaining the code unit"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of the location; should not be null"
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row within the field."
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "- the display item index on the given row. (Note most fields only have one display item per row)"
        },
        {
          "name": "charOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "- the character offset within the display item."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "componentPath",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        },
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "charOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Default constructor for a code unit location needed for restoring from XML.",
      "javadoc": "Default constructor for a code unit location needed for restoring from XML.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValid",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
