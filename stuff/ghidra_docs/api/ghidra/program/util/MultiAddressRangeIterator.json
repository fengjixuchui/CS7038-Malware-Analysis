{
  "name": "MultiAddressRangeIterator",
  "comment": "MultiAddressRangeIterator is a class for iterating through multiple\n address range iterators simultaneously. The next() method returns the next address range\n as determined from all the iterators.",
  "javadoc": "\u003cCODE\u003eMultiAddressRangeIterator\u003c/CODE\u003e is a class for iterating through multiple\n address range iterators simultaneously. The next() method returns the next address range\n as determined from all the iterators.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "iters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressRangeIterator[]",
      "type_short": "ghidra.program.model.address.AddressRangeIterator[]",
      "constant_value": null
    },
    {
      "name": "addrRanges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressRange[]",
      "type_short": "ghidra.program.model.address.AddressRange[]",
      "constant_value": null
    },
    {
      "name": "forward",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "min",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "max",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor of a multi address iterator for multiple forward address iterators.",
      "javadoc": "Constructor of a multi address iterator for multiple forward address iterators.\n@param iters the address iterators.",
      "static": false,
      "params": [
        {
          "name": "iters",
          "type_long": "ghidra.program.model.address.AddressRangeIterator[]",
          "type_short": "ghidra.program.model.address.AddressRangeIterator[]",
          "comment": "the address iterators."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor of a multi address range iterator.\n Note: all iterators must iterate in the same direction (forwards or backwards).",
      "javadoc": "Constructor of a multi address range iterator.\n \u003cbr\u003eNote: all iterators must iterate in the same direction (forwards or backwards).\n@param iters the address iterators. All must iterate in the direction indicated\n by the \"forward\" parameter.\n@param forward true indicates that forward iterators are in the array.\n false indicates backward iterators are in the array.",
      "static": false,
      "params": [
        {
          "name": "iters",
          "type_long": "ghidra.program.model.address.AddressRangeIterator[]",
          "type_short": "ghidra.program.model.address.AddressRangeIterator[]",
          "comment": "the address iterators. All must iterate in the direction indicated\n by the \"forward\" parameter."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates that forward iterators are in the array.\n false indicates backward iterators are in the array."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasNext",
      "comment": "Determines whether or not any of the original iterators has a\n next address.",
      "javadoc": "Determines whether or not any of the original iterators has a\n next address.\n@return true if a next address can be obtained from any of\n the address iterators.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a next address can be obtained from any of\n the address iterators."
      },
      "throws": []
    },
    {
      "name": "next",
      "comment": "Returns the next address. The next address could be from any \n one of the iterators.",
      "javadoc": "Returns the next address. The next address could be from any \n one of the iterators.\n@return the next address.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": "the next address."
      },
      "throws": []
    },
    {
      "name": "forwardNext",
      "comment": "Returns the next address for forward iterators. The next address could be from any \n one of the iterators.",
      "javadoc": "Returns the next address for forward iterators. The next address could be from any \n one of the iterators.\n@return the next address.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": "the next address."
      },
      "throws": []
    },
    {
      "name": "backwardNext",
      "comment": "Returns the next address for backward iterators. The next address could be from any \n one of the iterators.",
      "javadoc": "Returns the next address for backward iterators. The next address could be from any \n one of the iterators.\n@return the next address.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": "the next address."
      },
      "throws": []
    }
  ]
}
