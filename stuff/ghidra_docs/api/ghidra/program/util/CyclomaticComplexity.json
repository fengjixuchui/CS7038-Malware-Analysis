{
  "name": "CyclomaticComplexity",
  "comment": "Class with a utility function to calculate the cyclomatic complexity of a function.",
  "javadoc": "Class with a utility function to calculate the cyclomatic complexity of a function.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "calculateCyclomaticComplexity",
      "comment": "Calculates the cyclomatic complexity of a function by decomposing it into a flow\n graph using a BasicBlockModel.",
      "javadoc": "Calculates the cyclomatic complexity of a function by decomposing it into a flow\n graph using a BasicBlockModel.\n@param function the function\n@param monitor a monitor\n@return the cyclomatic complexity\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a monitor"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the cyclomatic complexity"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    }
  ]
}
