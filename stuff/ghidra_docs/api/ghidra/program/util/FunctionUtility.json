{
  "name": "FunctionUtility",
  "comment": "Utility methods for performing function related actions.",
  "javadoc": "Utility methods for performing function related actions.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateFunction",
      "comment": "Updates the destination function so its signature will match the source function\u0027s signature\n as closely as possible. This method will try to create conflict names if necessary for the\n function and its parameters.",
      "javadoc": "Updates the destination function so its signature will match the source function\u0027s signature\n as closely as possible. This method will try to create conflict names if necessary for the\n function and its parameters.\n@param destinationFunction the destination function to update\n@param sourceFunction the source function to use as a template\n@throws InvalidInputException if the function name or a variable name is invalid or if a\n parameter data type is not a fixed length.\n@throws DuplicateNameException This shouldn\u0027t happen since it will try to create conflict\n names for the function and its variables if necessary. Otherwise, this would be because\n the function\u0027s name or a variable name already exists.",
      "static": true,
      "params": [
        {
          "name": "destinationFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the destination function to update"
        },
        {
          "name": "sourceFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the source function to use as a template"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if the function name or a variable name is invalid or if a\n parameter data type is not a fixed length."
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "This shouldn\u0027t happen since it will try to create conflict\n names for the function and its variables if necessary. Otherwise, this would be because\n the function\u0027s name or a variable name already exists."
        }
      ]
    },
    {
      "name": "updateFunctionExceptName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "destinationFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "sourceFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setUniqueParameterNames",
      "comment": "Changes the names of the parameters in the array to unique names that won\u0027t conflict with\n any other names in the function\u0027s namespace when the parameters are used to replace\n the existing parameters in the function. Appends an integer number to\n the base name if necessary to create a unique name in the function\u0027s namespace.",
      "javadoc": "Changes the names of the parameters in the array to unique names that won\u0027t conflict with\n any other names in the function\u0027s namespace when the parameters are used to replace\n the existing parameters in the function. Appends an integer number to\n the base name if necessary to create a unique name in the function\u0027s namespace.\n@param function the function\n@param parameters the parameters that need names that won\u0027t conflict. These should be\n Impl objects and not DB objects since their names will be changed within this method.\n@throws InvalidInputException\n@throws DuplicateNameException",
      "static": true,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function"
        },
        {
          "name": "parameters",
          "type_long": "java.util.List\u003cghidra.program.model.listing.Parameter\u003e",
          "type_short": "List",
          "comment": "the parameters that need names that won\u0027t conflict. These should be\n Impl objects and not DB objects since their names will be changed within this method."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getUniqueReplacementParameterName",
      "comment": "Get a unique parameter name for a parameter when all parameter names are being replaced.\n If the specified name is  a default parameter name then the original default name passed\n in is returned.",
      "javadoc": "Get a unique parameter name for a parameter when all parameter names are being replaced.\n If the specified name is  a default parameter name then the original default name passed\n in is returned.\n@param symbolTable the symbol table containing symbols for the indicated namespace\n@param namespace the namespace containing symbol names to check.\n@param baseName the base name to append with an integer number if necessary\n to create a unique name.\n@param namesNotToBeUsed set of names that should not be used when determining a unique name.\n@return a unique parameter name",
      "static": true,
      "params": [
        {
          "name": "symbolTable",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": "the symbol table containing symbols for the indicated namespace"
        },
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "namesNotToBeUsed",
          "type_long": "java.util.Set\u003cjava.lang.String\u003e",
          "type_short": "Set",
          "comment": "set of names that should not be used when determining a unique name."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a unique parameter name"
      },
      "throws": []
    },
    {
      "name": "getUniqueNameIgnoringCurrentParameters",
      "comment": "Gets a unique name in the indicated namespace by appending an integer number if necessary\n and ignoring any conflicts with existing parameters.",
      "javadoc": "Gets a unique name in the indicated namespace by appending an integer number if necessary\n and ignoring any conflicts with existing parameters.\n@param symbolTable the symbol table containing symbols for the indicated namespace\n@param function the namespace containing symbol names to check.\n@param baseName the base name to append with an integer number if necessary to create a\n unique name.\n@param namesNotToBeUsed set of names that should not be used when determining a unique name.\n@return an unused unique name within the namespace ignoring current parameter names and\n that doesn\u0027t conflict with any in the set of names not to be used.",
      "static": true,
      "params": [
        {
          "name": "symbolTable",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": "the symbol table containing symbols for the indicated namespace"
        },
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the namespace containing symbol names to check."
        },
        {
          "name": "baseName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the base name to append with an integer number if necessary to create a\n unique name."
        },
        {
          "name": "namesNotToBeUsed",
          "type_long": "java.util.Set\u003cjava.lang.String\u003e",
          "type_short": "Set",
          "comment": "set of names that should not be used when determining a unique name."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "an unused unique name within the namespace ignoring current parameter names and\n that doesn\u0027t conflict with any in the set of names not to be used."
      },
      "throws": []
    },
    {
      "name": "applyInline",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "destinationFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "sourceFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyNoReturn",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "destinationFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "sourceFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyVarArgs",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "destinationFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "sourceFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyCallFixup",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "destinationFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "sourceFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "sameLanguage",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFunctionName",
      "comment": "Sets the destination function\u0027s name to match the source function\u0027s name. Otherwise, it\n creates a conflict name if the desired name already exists elsewhere in the program.",
      "javadoc": "Sets the destination function\u0027s name to match the source function\u0027s name. Otherwise, it\n creates a conflict name if the desired name already exists elsewhere in the program.\n@param destinationFunction the destination function to update\n@param sourceFunction the source function to use as a template\n@throws InvalidInputException if the function name is invalid.\n@throws DuplicateNameException This shouldn\u0027t happen since it will try to create a conflict\n name for the function if necessary. Otherwise, this would be because the function\u0027s name\n already exists.",
      "static": true,
      "params": [
        {
          "name": "destinationFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the destination function to update"
        },
        {
          "name": "sourceFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the source function to use as a template"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if the function name is invalid."
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "This shouldn\u0027t happen since it will try to create a conflict\n name for the function if necessary. Otherwise, this would be because the function\u0027s name\n already exists."
        }
      ]
    },
    {
      "name": "createConflictName",
      "comment": "Creates a conflict name based on the specified name and when being applied to the\n destination function.",
      "javadoc": "Creates a conflict name based on the specified name and when being applied to the\n destination function.\n@param name the base name to use when creating the conflict name.\n@param destinationFunction the function that will use the conflict name.\n@return the conflict name.",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the base name to use when creating the conflict name."
        },
        {
          "name": "destinationFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function that will use the conflict name."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the conflict name."
      },
      "throws": []
    },
    {
      "name": "getBaseName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSameLanguage",
      "comment": "Determines whether or not the two programs are considered to have the same processor\n language and compiler specification.",
      "javadoc": "Determines whether or not the two programs are considered to have the same processor\n language and compiler specification.\n@param program1 the first program\n@param program2 the second program\n@return true if the two programs have the same processor language and compiler spec.",
      "static": true,
      "params": [
        {
          "name": "program1",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the first program"
        },
        {
          "name": "program2",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the second program"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the two programs have the same processor language and compiler spec."
      },
      "throws": []
    },
    {
      "name": "determineCallingConventionName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "destinationFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "sourceFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "sameLanguage",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "determineCustomStorageUse",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "destinationFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "sourceFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "sameLanguage",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "determineReturnValue",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "destinationFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "sourceFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "useCustomStorage",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable",
        "type_short": "Variable",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "determineParameters",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "destinationFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "sourceFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "useCustomStorage",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.listing.Parameter\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isDefaultFunctionName",
      "comment": "Determines if the indicated function has a default name.",
      "javadoc": "Determines if the indicated function has a default name.\n@param function the function\n@return true if the function has a default name.",
      "static": true,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the function has a default name."
      },
      "throws": []
    },
    {
      "name": "getFunctionTitle",
      "comment": "Gets a title string wrapped as HTML and indicating the function\u0027s name and the program\n containing it.",
      "javadoc": "Gets a title string wrapped as HTML and indicating the function\u0027s name and the program\n containing it.\n@param function the function to be indicated in the title.\n@return the title string as HTML.",
      "static": true,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function to be indicated in the title."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the title string as HTML."
      },
      "throws": []
    }
  ]
}
