{
  "name": "CommentFieldLocation",
  "comment": "The CommentFieldLocation class contains specific location information\n within the COMMENTS field of a CodeUnitLocation object.",
  "javadoc": "The \u003cCODE\u003eCommentFieldLocation\u003c/CODE\u003e class contains specific location information\n within the COMMENTS field of a CodeUnitLocation object.",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.util.CodeUnitLocation",
  "fields": [
    {
      "name": "comment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "type",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new CommentFieldLocation.",
      "javadoc": "Construct a new CommentFieldLocation.\n@param program the program of the location\n@param addr address of the location; should not be null\n hierarchy names; this parameter may be null\n@param componentPath if not null, it is the array of indexes that point\n to a specific data type inside of another data type\n@param comment The array of strings that make up the comment\n@param type The type of this comment.\n                  Can be either CodeUnit.PRE_COMMENT, CodeUnit.POST_COMMENT, \n                  CodeUnit.PLATE_COMMENT, CodeUnit.EOL_COMMENT, or CodeUnit.REPEATABLE_COMMENT.\n@param row The index of the string that contains the exact location.\n@param charOffset The position within the string that specifies the exact location.\n@exception IllegalArgumentException Thrown if type is not one of the comment values given in \u003cCODE\u003eCodeUnit\u003c/CODE\u003e",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program of the location"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of the location; should not be null\n hierarchy names; this parameter may be null"
        },
        {
          "name": "componentPath",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "if not null, it is the array of indexes that point\n to a specific data type inside of another data type"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "The array of strings that make up the comment"
        },
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "The type of this comment.\n                  Can be either CodeUnit.PRE_COMMENT, CodeUnit.POST_COMMENT, \n                  CodeUnit.PLATE_COMMENT, CodeUnit.EOL_COMMENT, or CodeUnit.REPEATABLE_COMMENT."
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "The index of the string that contains the exact location."
        },
        {
          "name": "charOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "The position within the string that specifies the exact location."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Default constructor needed for restoring\n a comment field location from XML.",
      "javadoc": "Default constructor needed for restoring\n a comment field location from XML.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "validateType",
      "comment": "Checks that the type is a valid comment type.",
      "javadoc": "Checks that the type is a valid comment type.\n@throws IllegalArgumentException if this doesn\u0027t have a valid comment type.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComment",
      "comment": "Returns the array of strings that make up the comment.",
      "javadoc": "Returns the array of strings that make up the comment.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCommentType",
      "comment": "Returns the comment type.  The type is either CodeUnit.EOL_COMMENT,\n   CodeUnit.POST_COMMENT, CodeUnit.PLATE_COMMENT, CodeUnit.PRE_COMMENT,\n   or CodeUnit.REPEATABLE_COMMENT.",
      "javadoc": "Returns the comment type.  The type is either CodeUnit.EOL_COMMENT,\n   CodeUnit.POST_COMMENT, CodeUnit.PLATE_COMMENT, CodeUnit.PRE_COMMENT,\n   or CodeUnit.REPEATABLE_COMMENT.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Returns a String representation of this location.",
      "javadoc": "Returns a String representation of this location.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.options.SaveState",
          "type_short": "SaveState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "obj",
          "type_long": "ghidra.framework.options.SaveState",
          "type_short": "SaveState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
