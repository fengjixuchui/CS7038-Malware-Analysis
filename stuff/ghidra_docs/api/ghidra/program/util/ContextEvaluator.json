{
  "name": "ContextEvaluator",
  "comment": "ContextEvaluator provides a callback mechanism for the SymbolicPropogator as code is evaluated.",
  "javadoc": "ContextEvaluator provides a callback mechanism for the SymbolicPropogator as code is evaluated.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "evaluateContextBefore",
      "comment": "Evaluate the current instruction given the context before the instruction is evaluated",
      "javadoc": "Evaluate the current instruction given the context before the instruction is evaluated\n@param context describes current state of registers\n@param instr instruction whose context has not yet been applied\n@return true if evaluation should stop",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": "describes current state of registers"
        },
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction whose context has not yet been applied"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if evaluation should stop"
      },
      "throws": []
    },
    {
      "name": "evaluateContext",
      "comment": "Evaluate the current instruction given the final context for the instruction",
      "javadoc": "Evaluate the current instruction given the final context for the instruction\n@param context describes current state of registers\n@param instr instruction whose context has been applied\n@return true if evaluation should stop, false to continue evaluation",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": "describes current state of registers"
        },
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction whose context has been applied"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if evaluation should stop, false to continue evaluation"
      },
      "throws": []
    },
    {
      "name": "evaluateReference",
      "comment": "Evaluate the reference that has been found on this instruction. Computed values that are used as an\n address will be passed to this function.  For example a value passed to a function, or a stored\n constant value.",
      "javadoc": "Evaluate the reference that has been found on this instruction. Computed values that are used as an\n address will be passed to this function.  For example a value passed to a function, or a stored\n constant value.\n@param context current program context\n@param instr instruction on which this reference was detected\n@param pcodeop the PcodeOp operation that is causing this reference\n@param address address being referenced\n@param size size of the item being referenced (only non-zero if load or store of data)\n@param refType reference type (flow, data/read/write)\n@return false if the reference should be ignored (or has been taken care of by this routine)",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": "current program context"
        },
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction on which this reference was detected"
        },
        {
          "name": "pcodeop",
          "type_long": "int",
          "type_short": "int",
          "comment": "the PcodeOp operation that is causing this reference"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address being referenced"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of the item being referenced (only non-zero if load or store of data)"
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "reference type (flow, data/read/write)"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "false if the reference should be ignored (or has been taken care of by this routine)"
      },
      "throws": []
    },
    {
      "name": "evaluateConstant",
      "comment": "Evaluate a potential constant to be used as an address or an interesting constant that\n should have a reference created for it.  Computed values that are not know to be used as an address will\n be passed to this function.  For example a value passed to a function, or a stored constant value.",
      "javadoc": "Evaluate a potential constant to be used as an address or an interesting constant that\n should have a reference created for it.  Computed values that are not know to be used as an address will\n be passed to this function.  For example a value passed to a function, or a stored constant value.\n@param context current program context\n@param instr instruction on which this reference was detected\n@param pcodeop the PcodeOp operation that is causing this potential constant\n@param constant constant value (in constant.getOffset() )\n@param size size of constant value in bytes\n@param refType reference type (flow, data/read/write)\n@return the original address unchanged if it should be a reference\n         null if the constant reference should not be created\n         a new address if the value should be a different address or address space\n             Using something like instr.getProgram().getAddressFactory().getDefaultAddressSpace();",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": "current program context"
        },
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction on which this reference was detected"
        },
        {
          "name": "pcodeop",
          "type_long": "int",
          "type_short": "int",
          "comment": "the PcodeOp operation that is causing this potential constant"
        },
        {
          "name": "constant",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "constant value (in constant.getOffset() )"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of constant value in bytes"
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "reference type (flow, data/read/write)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the original address unchanged if it should be a reference\n         null if the constant reference should not be created\n         a new address if the value should be a different address or address space\n             Using something like instr.getProgram().getAddressFactory().getDefaultAddressSpace();"
      },
      "throws": []
    },
    {
      "name": "evaluateDestination",
      "comment": "Evaluate the instruction for an unknown destination",
      "javadoc": "Evaluate the instruction for an unknown destination\n@param context current register context\n@param instruction instruction that has an unknown destination\n@return true if the evaluation should stop, false to continue evaluation",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": "current register context"
        },
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction that has an unknown destination"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the evaluation should stop, false to continue evaluation"
      },
      "throws": []
    },
    {
      "name": "unknownValue",
      "comment": "Called when a value is needed for a register that is unknown",
      "javadoc": "Called when a value is needed for a register that is unknown\n@param context current register context\n@param instruction instruction that has an unknown destination\n@param node varnode for the register being accessed to obtain a value\n@return null if the varnode should not have an assumed value.\n         a long value if the varnode such as a Global Register should have an assumed constant",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": "current register context"
        },
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction that has an unknown destination"
        },
        {
          "name": "node",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "varnode for the register being accessed to obtain a value"
        }
      ],
      "return": {
        "type_long": "java.lang.Long",
        "type_short": "Long",
        "comment": "null if the varnode should not have an assumed value.\n         a long value if the varnode such as a Global Register should have an assumed constant"
      },
      "throws": []
    },
    {
      "name": "followFalseConditionalBranches",
      "comment": "Follow all branches, even if the condition evaluates to false, indicating it shouldn\u0027t be followed.",
      "javadoc": "Follow all branches, even if the condition evaluates to false, indicating it shouldn\u0027t be followed.\n@return true if false evaluated conditional branches should be followed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if false evaluated conditional branches should be followed."
      },
      "throws": []
    },
    {
      "name": "evaluateSymbolicReference",
      "comment": "Evaluate the reference that has been found on this instruction that points into an unknown space that\n has been designated as tracked.",
      "javadoc": "Evaluate the reference that has been found on this instruction that points into an unknown space that\n has been designated as tracked.\n@param context current program context\n@param instr instruction on which this reference was detected\n@param address address being referenced\n@return false if the reference should be ignored (or has been taken care of by this routine)\n         true to allow the reference to be created",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": "current program context"
        },
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction on which this reference was detected"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address being referenced"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "false if the reference should be ignored (or has been taken care of by this routine)\n         true to allow the reference to be created"
      },
      "throws": []
    },
    {
      "name": "allowAccess",
      "comment": "Evaluate the address and check if the access to the value in the memory location to be read\n The address is read-only and is not close to this address.",
      "javadoc": "Evaluate the address and check if the access to the value in the memory location to be read\n The address is read-only and is not close to this address.\n@param context current program context\n@param addr Address of memory where location is attempting to be read\n@return true if the access should be allowed",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.util.VarnodeContext",
          "type_short": "VarnodeContext",
          "comment": "current program context"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address of memory where location is attempting to be read"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the access should be allowed"
      },
      "throws": []
    }
  ]
}
