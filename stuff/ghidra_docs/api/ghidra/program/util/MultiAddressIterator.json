{
  "name": "MultiAddressIterator",
  "comment": "MultiAddressIterator is a class for iterating through multiple\n address iterators simultaneously. The next() method returns the next address\n as determined from all the iterators.",
  "javadoc": "\u003cCODE\u003eMultiAddressIterator\u003c/CODE\u003e is a class for iterating through multiple\n address iterators simultaneously. The next() method returns the next address\n as determined from all the iterators.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "iters",
      "comment": "the code unit iterators",
      "javadoc": "the code unit iterators",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressIterator[]",
      "type_short": "ghidra.program.model.address.AddressIterator[]",
      "constant_value": null
    },
    {
      "name": "addrs",
      "comment": "the current code units",
      "javadoc": "the current code units",
      "static": false,
      "type_long": "ghidra.program.model.address.Address[]",
      "type_short": "ghidra.program.model.address.Address[]",
      "constant_value": null
    },
    {
      "name": "forward",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor of a multi address iterator for multiple forward address iterators.",
      "javadoc": "Constructor of a multi address iterator for multiple forward address iterators.\n@param iters the address iterators.",
      "static": false,
      "params": [
        {
          "name": "iters",
          "type_long": "ghidra.program.model.address.AddressIterator[]",
          "type_short": "ghidra.program.model.address.AddressIterator[]",
          "comment": "the address iterators."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor of a multi address iterator.\n Note: all iterators must iterate in the same direction (forwards or backwards).",
      "javadoc": "Constructor of a multi address iterator.\n \u003cbr\u003eNote: all iterators must iterate in the same direction (forwards or backwards).\n@param iters the address iterators. All must iterate in the direction indicated\n by the \"forward\" parameter.\n@param forward true indicates that forward iterators are in the array.\n false indicates backward iterators are in the array.",
      "static": false,
      "params": [
        {
          "name": "iters",
          "type_long": "ghidra.program.model.address.AddressIterator[]",
          "type_short": "ghidra.program.model.address.AddressIterator[]",
          "comment": "the address iterators. All must iterate in the direction indicated\n by the \"forward\" parameter."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates that forward iterators are in the array.\n false indicates backward iterators are in the array."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasNext",
      "comment": "Determines whether or not any of the original iterators has a\n  next address.",
      "javadoc": "Determines whether or not any of the original iterators has a\n  next address.\n@return true if a next address can be obtained from any of\n the address iterators.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a next address can be obtained from any of\n the address iterators."
      },
      "throws": []
    },
    {
      "name": "next",
      "comment": "Returns the next address. The next address could be from any \n one of the iterators.",
      "javadoc": "Returns the next address. The next address could be from any \n one of the iterators.\n@return the next address.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the next address."
      },
      "throws": []
    },
    {
      "name": "nextAddresses",
      "comment": "Returns the next address(es). The next address could be from any \n one or more of the iterators.",
      "javadoc": "Returns the next address(es). The next address could be from any \n one or more of the iterators.\n@return an array with the next address(es). Each element in this array \n corresponds to each iterator passed to the constructor. \n Null is returned in an element if the next overall address is not the \n next address from the corresponding iterator.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address[]",
        "type_short": "ghidra.program.model.address.Address[]",
        "comment": "an array with the next address(es). Each element in this array \n corresponds to each iterator passed to the constructor. \n Null is returned in an element if the next overall address is not the \n next address from the corresponding iterator."
      },
      "throws": []
    }
  ]
}
