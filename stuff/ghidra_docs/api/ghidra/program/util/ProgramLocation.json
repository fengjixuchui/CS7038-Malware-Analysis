{
  "name": "ProgramLocation",
  "comment": "ProgramLocation provides information about a location in a program in the most\n generic way.\n\n \n ProgramLocations refer to a specific location in a program and can be specified down to an\n address, a field at that address, and within that field, a row, col, and character offset. The\n field is not recorded directly, but by the subclass of the ProgramLocation. The \"cursor position\"\n within a field is specified by three variables: row, col, and character offset. The row is\n literally the row (line #) the cursor is on within the field, the column represents the display\n item on that row (For example, in the bytes field the column will represent which \"byte\" the\n cursor is on. Most fields only have one column item per row.) And finally, the character offset\n is the character position within the display item specified by the row and column. Simple fields\n like the address field and Mnemonic field will always have a row and column of 0.",
  "javadoc": "\u003cCODE\u003eProgramLocation\u003c/CODE\u003e provides information about a location in a program in the most\n generic way.\n\n \u003cp\u003e\n ProgramLocations refer to a specific location in a program and can be specified down to an\n address, a field at that address, and within that field, a row, col, and character offset. The\n field is not recorded directly, but by the subclass of the ProgramLocation. The \"cursor position\"\n within a field is specified by three variables: row, col, and character offset. The row is\n literally the row (line #) the cursor is on within the field, the column represents the display\n item on that row (For example, in the bytes field the column will represent which \"byte\" the\n cursor is on. Most fields only have one column item per row.) And finally, the character offset\n is the character position within the display item specified by the row and column. Simple fields\n like the address field and Mnemonic field will always have a row and column of 0.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "addr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "refAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "componentPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "byteAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "row",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "col",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "charOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new ProgramLocation.",
      "javadoc": "Construct a new ProgramLocation.\n@param program the program of the location\n@param addr address of the location; cannot be null; This could be a code unit minimum\n            address where the byteAddr is within the code unit.\n@param byteAddr address of the location; cannot be null\n@param componentPath array of indexes for each nested data component; the data index is the\n            data component\u0027s index within its parent; may be null\n@param refAddr the \"referred to\" address if the location is over a reference; may be null\n@param row the row within the field.\n@param col the display item index on the given row. (Note most fields only have one display\n            item per row)\n@param charOffset the character offset within the display item.\n@throws NullPointerException if {@code addr} or {@code program} is null",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program of the location"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of the location; cannot be null; This could be a code unit minimum\n            address where the byteAddr is within the code unit."
        },
        {
          "name": "byteAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of the location; cannot be null"
        },
        {
          "name": "componentPath",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "array of indexes for each nested data component; the data index is the\n            data component\u0027s index within its parent; may be null"
        },
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the \"referred to\" address if the location is over a reference; may be null"
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row within the field."
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "the display item index on the given row. (Note most fields only have one display\n            item per row)"
        },
        {
          "name": "charOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the character offset within the display item."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new ProgramLocation for the given address. The address will be adjusted to the\n beginning of the CodeUnit containing that address (if it exists). The\n original address can be retrieved using the #getByteAddress()\" method.",
      "javadoc": "Construct a new ProgramLocation for the given address. The address will be adjusted to the\n beginning of the {@link CodeUnit code unit} containing that address (if it exists). The\n original address can be retrieved using the {@link #getByteAddress()}\" method.\n@param program the program associated with this program location (also used to obtain a\n            code-unit-aligned address)\n@param addr address of the location; cannot be null\n@param componentPath array of indexes for each nested data component; the index is the data\n            component\u0027s index within its parent; may be null\n@param refAddr the \"referred to\" address if the location is over a reference; may be null\n@param row the row within the field.\n@param col the display item index on the given row. (Note most fields only have one display\n            item per row)\n@param charOffset the character offset within the display item.\n@throws NullPointerException if {@code addr} or {@code program} is null",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program associated with this program location (also used to obtain a\n            code-unit-aligned address)"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of the location; cannot be null"
        },
        {
          "name": "componentPath",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "array of indexes for each nested data component; the index is the data\n            component\u0027s index within its parent; may be null"
        },
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the \"referred to\" address if the location is over a reference; may be null"
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row within the field."
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "the display item index on the given row. (Note most fields only have one display\n            item per row)"
        },
        {
          "name": "charOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the character offset within the display item."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new ProgramLocation for the given address. The address will be adjusted to the\n beginning of the CodeUnit containing that address (if it exists). The\n original address can be retrieved using the #getByteAddress() method.",
      "javadoc": "Construct a new ProgramLocation for the given address. The address will be adjusted to the\n beginning of the {@link CodeUnit code unit} containing that address (if it exists). The\n original address can be retrieved using the {@link #getByteAddress()} method.\n@param program the program associated with this program location (also used to obtain a\n            code-unit-aligned address)\n@param addr address for the location\n@throws NullPointerException if {@code addr} or {@code program} is null",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program associated with this program location (also used to obtain a\n            code-unit-aligned address)"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address for the location"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new ProgramLocation for the given address. The address will be adjusted to the\n beginning of the CodeUnit containing that address (if it exists). The\n original address can be retrieved using the #getByteAddress() method.",
      "javadoc": "Construct a new ProgramLocation for the given address. The address will be adjusted to the\n beginning of the {@link CodeUnit code unit} containing that address (if it exists). The\n original address can be retrieved using the {@link #getByteAddress()} method.\n@param program the program associated with this program location (also used to obtain a\n            code-unit-aligned address)\n@param addr address for the location\n@param row the row within the field.\n@param col the display item index on the given row. (Note most fields only have one display\n            item per row)\n@param charOffset the character offset within the display item.\n@throws NullPointerException if {@code addr} or {@code program} is null",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program associated with this program location (also used to obtain a\n            code-unit-aligned address)"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address for the location"
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row within the field."
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "the display item index on the given row. (Note most fields only have one display\n            item per row)"
        },
        {
          "name": "charOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the character offset within the display item."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new ProgramLocation for the given address. The address will be adjusted to the\n beginning of the CodeUnit containing that address (if it exists). The\n original address can be retrieved using the #getByteAddress() method.",
      "javadoc": "Construct a new ProgramLocation for the given address. The address will be adjusted to the\n beginning of the {@link CodeUnit code unit} containing that address (if it exists). The\n original address can be retrieved using the {@link #getByteAddress()} method.\n@param program the program associated with this program location (also used to obtain a\n            code-unit-aligned address)\n@param addr address for the location\n@param refAddr the \"referred to\" address if the location is over a reference\n@throws NullPointerException if {@code addr} or {@code program} is null",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program associated with this program location (also used to obtain a\n            code-unit-aligned address)"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address for the location"
        },
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the \"referred to\" address if the location is over a reference"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Default constructor required for restoring a program location from XML.",
      "javadoc": "Default constructor required for restoring a program location from XML.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponentPath",
      "comment": "Returns the componentPath for the CodeUnit. Null will be returned if the\n object is an Instruction or a top-level Data object.",
      "javadoc": "Returns the componentPath for the {@link CodeUnit code unit}. Null will be returned if the\n object is an {@link Instruction} or a top-level {@link Data} object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "Returns the program associated with this location.",
      "javadoc": "Returns the program associated with this location.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Returns the address associated with this location.\n \n \n Note: this may not be the same as the byte address. For example, in a CodeUnit location this may be the minimum address of the code unit that contains the byte\n address.",
      "javadoc": "Returns the address associated with this location.\n \n \u003cp\u003e\n Note: this may not be the same as the byte address. For example, in a {@link CodeUnit code\n unit} location this may be the minimum address of the code unit that contains the byte\n address.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getByteAddress",
      "comment": "Returns the byte level address associated with this location.",
      "javadoc": "Returns the byte level address associated with this location.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRefAddress",
      "comment": "Returns the \"referred to\" address if the location is over an address in some field.",
      "javadoc": "Returns the \"referred to\" address if the location is over an address in some field.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveState",
      "comment": "Save this program location to the given save state object.",
      "javadoc": "Save this program location to the given save state object.\n@param obj the save state object for saving the location",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.options.SaveState",
          "type_short": "SaveState",
          "comment": "the save state object for saving the location"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreState",
      "comment": "Restore this program location using the given program and save state object.",
      "javadoc": "Restore this program location using the given program and save state object.\n@param program1 program to restore from\n@param obj the save state to restore from",
      "static": false,
      "params": [
        {
          "name": "program1",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program to restore from"
        },
        {
          "name": "obj",
          "type_long": "ghidra.framework.options.SaveState",
          "type_short": "SaveState",
          "comment": "the save state to restore from"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLocation",
      "comment": "Get the program location for the given program and save state object.",
      "javadoc": "Get the program location for the given program and save state object.\n@param program the program for the location\n@param saveState the state to restore\n@return the restored program location",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for the location"
        },
        {
          "name": "saveState",
          "type_long": "ghidra.framework.options.SaveState",
          "type_short": "SaveState",
          "comment": "the state to restore"
        }
      ],
      "return": {
        "type_long": "ghidra.program.util.ProgramLocation",
        "type_short": "ProgramLocation",
        "comment": "the restored program location"
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.program.util.ProgramLocation",
          "type_short": "ProgramLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkComponentPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p1",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        },
        {
          "name": "p2",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareAddr",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "addr1",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "addr2",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCodeUnitAddress",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showException",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "exception",
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValid",
      "comment": "Returns true if this location represents a valid location in the given program",
      "javadoc": "Returns true if this location represents a valid location in the given program\n@param testProgram the program to test if this location is valid.\n@return true if this location represents a valid location in the given program",
      "static": false,
      "params": [
        {
          "name": "testProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to test if this location is valid."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this location represents a valid location in the given program"
      },
      "throws": []
    },
    {
      "name": "getRow",
      "comment": "Returns the row within the program location.",
      "javadoc": "Returns the row within the program location.\n@return the row within the program location.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the row within the program location."
      },
      "throws": []
    },
    {
      "name": "getCharOffset",
      "comment": "Returns the character offset in the display item at the (row,col)",
      "javadoc": "Returns the character offset in the display item at the (row,col)\n@return the character offset in the display item at the (row,col)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the character offset in the display item at the (row,col)"
      },
      "throws": []
    },
    {
      "name": "getColumn",
      "comment": "Returns the column index of the display piece represented by this location. For most\n locations, there is only one display item per row, in which case this value will be 0.",
      "javadoc": "Returns the column index of the display piece represented by this location. For most\n locations, there is only one display item per row, in which case this value will be 0.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
