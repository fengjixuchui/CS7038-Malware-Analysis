{
  "name": "AddressEvaluator",
  "comment": "The AddressEvaluator class provides a way to evaluate a string\n that represents an address and resolve it to an address for a particular program.",
  "javadoc": "The \u003cCODE\u003eAddressEvaluator\u003c/CODE\u003e class provides a way to evaluate a string\n that represents an address and resolve it to an address for a particular program.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "TOKEN_CHARS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"+-*/()\u003c\u003e|^\u0026~ \u003d\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "evaluate",
      "comment": "Gets a legitimate address for the specified program as indicated by the string.",
      "javadoc": "Gets a legitimate address for the specified program as indicated by the string.\n@param p the program to use for determining the address.\n@param baseAddr the base address to use for relative addressing.\n@param s string representation of the address desired.\n@return the address. Otherwise, return null if the string fails to evaluate\n to a unique legitimate address.",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to use for determining the address."
        },
        {
          "name": "baseAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the base address to use for relative addressing."
        },
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string representation of the address desired."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address. Otherwise, return null if the string fails to evaluate\n to a unique legitimate address."
      },
      "throws": []
    },
    {
      "name": "evaluateToLong",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Long",
        "type_short": "Long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseToList",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "af",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        },
        {
          "name": "st",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": ""
        },
        {
          "name": "list",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkDoubleToken",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tok",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "lookahead",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "evaluate",
      "comment": "Gets a legitimate address for the specified program as indicated by the string.",
      "javadoc": "Gets a legitimate address for the specified program as indicated by the string.\n@param p the program to use for determining the address.\n@param s string representation of the address desired.\n@return the address. Otherwise, return null if the string fails to evaluate\n to a legitimate address.",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to use for determining the address."
        },
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string representation of the address desired."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address. Otherwise, return null if the string fails to evaluate\n to a legitimate address."
      },
      "throws": []
    },
    {
      "name": "evaluate",
      "comment": "Utility method for creating an Address object from a byte array. The Address object may or may not\n be a legitimate Address in the program\u0027s address space. This method is meant to provide a way of\n creating an Address object from a sequence of bytes that can be used for additional tests and\n comparisons.",
      "javadoc": "Utility method for creating an Address object from a byte array. The Address object may or may not\n be a legitimate Address in the program\u0027s address space. This method is meant to provide a way of\n creating an Address object from a sequence of bytes that can be used for additional tests and\n comparisons.\n@param p - program being analyzed.\n@param addrBytes - byte array to use containing the values the address will be constructed from.\n@return - Address object constructed from the addrBytes array. Returns null if the program is null,\n addrBytes is null, or the length of addrBytes does not match the default Pointer size or does not contain\n a valid offset.",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "- program being analyzed."
        },
        {
          "name": "addrBytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "- byte array to use containing the values the address will be constructed from."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "- Address object constructed from the addrBytes array. Returns null if the program is null,\n addrBytes is null, or the length of addrBytes does not match the default Pointer size or does not contain\n a valid offset."
      },
      "throws": []
    },
    {
      "name": "getValueObject",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "st",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": ""
        },
        {
          "name": "af",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        },
        {
          "name": "tok",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValueObject",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "strValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "eval",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "evaluateOperator",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "op1",
          "type_long": "ghidra.program.util.Operator",
          "type_short": "Operator",
          "comment": ""
        },
        {
          "name": "op2",
          "type_long": "ghidra.program.util.Operator",
          "type_short": "Operator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "computeValue",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "v1",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "op",
          "type_long": "ghidra.program.util.Operator",
          "type_short": "Operator",
          "comment": ""
        },
        {
          "name": "v2",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDifference",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "v1",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "v2",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Long",
        "type_short": "Long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findMatchingParen",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
