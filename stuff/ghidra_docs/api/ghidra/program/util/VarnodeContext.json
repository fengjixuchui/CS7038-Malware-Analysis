{
  "name": "VarnodeContext",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.program.model.lang.ProcessorContext"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "BAD_ADDRESS",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "BAD_SPACE_ID_VALUE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "65535"
    },
    {
      "name": "offsetContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.disassemble.DisassemblerContextImpl",
      "type_short": "DisassemblerContextImpl",
      "constant_value": null
    },
    {
      "name": "spaceContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.disassemble.DisassemblerContextImpl",
      "type_short": "DisassemblerContextImpl",
      "constant_value": null
    },
    {
      "name": "memoryVals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Stack\u003cjava.util.HashMap\u003cghidra.program.model.pcode.Varnode,ghidra.program.model.pcode.Varnode\u003e\u003e",
      "type_short": "Stack",
      "constant_value": null
    },
    {
      "name": "tempVals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cghidra.program.model.pcode.Varnode,ghidra.program.model.pcode.Varnode\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "tempUniqueVals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cghidra.program.model.pcode.Varnode,ghidra.program.model.pcode.Varnode\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "keepTempUniqueValues",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "clearVals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashSet\u003cghidra.program.model.pcode.Varnode\u003e",
      "type_short": "HashSet",
      "constant_value": null
    },
    {
      "name": "lastSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cghidra.program.model.pcode.Varnode,ghidra.program.model.address.Address\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "allLastSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cghidra.program.model.pcode.Varnode,ghidra.program.model.address.AddressSet\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "trans",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.VarnodeTranslator",
      "type_short": "VarnodeTranslator",
      "constant_value": null
    },
    {
      "name": "retVarnodes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode[]",
      "type_short": "ghidra.program.model.pcode.Varnode[]",
      "constant_value": null
    },
    {
      "name": "stackVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode",
      "type_short": "Varnode",
      "constant_value": null
    },
    {
      "name": "stackReg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Register",
      "type_short": "Register",
      "constant_value": null
    },
    {
      "name": "validSymbolicStackNames",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashSet\u003cjava.lang.String\u003e",
      "type_short": "HashSet",
      "constant_value": null
    },
    {
      "name": "notFoundExc",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.util.exception.NotFoundException",
      "type_short": "NotFoundException",
      "constant_value": null
    },
    {
      "name": "hitDest",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "addrFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressFactory",
      "type_short": "AddressFactory",
      "constant_value": null
    },
    {
      "name": "programContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.ProgramContext",
      "type_short": "ProgramContext",
      "constant_value": null
    },
    {
      "name": "currentAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "currentInstruction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Instruction",
      "type_short": "Instruction",
      "constant_value": null
    },
    {
      "name": "debug",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "programContext",
          "type_long": "ghidra.program.model.listing.ProgramContext",
          "type_short": "ProgramContext",
          "comment": ""
        },
        {
          "name": "spaceProgramContext",
          "type_long": "ghidra.program.model.listing.ProgramContext",
          "type_short": "ProgramContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDebug",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugOn",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDebug",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCurrentInstruction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCurrentInstruction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBaseContextRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "flowEnd",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "flowToAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKnownFlowToAddresses",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address[]",
        "type_short": "ghidra.program.model.address.Address[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "flowStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copyToFutureFlowState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mergeToFutureFlowState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFutureRegisterValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "regVal",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReturnVarnode",
      "comment": "",
      "javadoc": "@param targetFunc function to get a returning varnode for\n \n NOTE: this only gets one, unless there is custom storage on the called function\n    there may be bonded ones in the default convention!\n@return varnode that represents where functions place their return value",
      "static": false,
      "params": [
        {
          "name": "targetFunc",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "function to get a returning varnode for\n \n NOTE: this only gets one, unless there is custom storage on the called function\n    there may be bonded ones in the default convention!"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode[]",
        "type_short": "ghidra.program.model.pcode.Varnode[]",
        "comment": "varnode that represents where functions place their return value"
      },
      "throws": []
    },
    {
      "name": "getStackVarnode",
      "comment": "",
      "javadoc": "@return Varnode that represents the stack register",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "Varnode that represents the stack register"
      },
      "throws": []
    },
    {
      "name": "setupValidSymbolicStackNames",
      "comment": "Sets up the valid names for stack register based spaces.\n   The symbolic stack spaces are named based on the register used to store things\n   into the symbolic space.",
      "javadoc": "Sets up the valid names for stack register based spaces.\n   The symbolic stack spaces are named based on the register used to store things\n   into the symbolic space.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isStackSymbolicSpace",
      "comment": "Return true if this varnode is stored in the symbolic stack space",
      "javadoc": "Return true if this varnode is stored in the symbolic stack space",
      "static": false,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStackRegister",
      "comment": "",
      "javadoc": "@return Register that represents the stack register",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "Register that represents the stack register"
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "evaluator",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "evaluator",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getMemoryValue",
      "comment": "Search the value state stack for the first occurence of the set value",
      "javadoc": "Search the value state stack for the first occurence of the set value\n@param varnode varnode to search for a value\n@return first value found on stack, null otherwise",
      "static": false,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "varnode to search for a value"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "first value found on stack, null otherwise"
      },
      "throws": []
    },
    {
      "name": "putMemoryValue",
      "comment": "Put the value for the varnode on the top of the memory state stack",
      "javadoc": "Put the value for the varnode on the top of the memory state stack\n@param out varnode for the value\n@param value value to store for the varnode",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "varnode for the value"
        },
        {
          "name": "value",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "value to store for the varnode"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTranslatedSpaceValue",
      "comment": "get the translated stored space value.\n SpaceID is stored invert\u0027ed so that the constants for subpieces will blend,\n but no other space will.",
      "javadoc": "get the translated stored space value.\n SpaceID is stored invert\u0027ed so that the constants for subpieces will blend,\n but no other space will.\n@return null space for constant space, real spaceID otherwise.",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": "null space for constant space, real spaceID otherwise."
      },
      "throws": []
    },
    {
      "name": "getTranslatedSpaceValue",
      "comment": "get the translated stored space value.\n SpaceID is stored invert\u0027ed so that the constants for subpieces will blend,\n but no other space will.",
      "javadoc": "get the translated stored space value.\n SpaceID is stored invert\u0027ed so that the constants for subpieces will blend,\n but no other space will.\n@return null space for constant space, real spaceID otherwise.",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": "null space for constant space, real spaceID otherwise."
      },
      "throws": []
    },
    {
      "name": "isReadOnly",
      "comment": "Check if the symbol at the address is read_only.",
      "javadoc": "Check if the symbol at the address is read_only.\n@param addr - address of the symbol\n@return true if the block is read_only, and there are no write references.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "- address of the symbol"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the block is read_only, and there are no write references."
      },
      "throws": []
    },
    {
      "name": "createVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "spaceID",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createConstantVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createBadVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "bigVal",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "spaceVal",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "result",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "mustClear",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readExecutableCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setReadExecutableCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearReadExecutableCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "propogateResults",
      "comment": "Propogate any results that are in the value cache.",
      "javadoc": "Propogate any results that are in the value cache.\n@param clearContext true if the cache should be cleared.\n                      The propogation could be for flow purposes, and the\n                      processing of the instruction is finished, so it\u0027s effects should be kept.",
      "static": false,
      "params": [
        {
          "name": "clearContext",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the cache should be cleared.\n                      The propogation could be for flow purposes, and the\n                      processing of the instruction is finished, so it\u0027s effects should be kept."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "propogateValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "node",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "val",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addSetVarnodeToLastSetLocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "node",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLastSetLocation",
      "comment": "return the location that this register was last set\n This is a transient thing, so it should only be used as a particular flow is being processed...",
      "javadoc": "return the location that this register was last set\n This is a transient thing, so it should only be used as a particular flow is being processed...\n@param reg register to find last set location\n@param bval value to look for to differentiate set locations, null if don\u0027t care\n@return address that the register was set.",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "register to find last set location"
        },
        {
          "name": "bval",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "value to look for to differentiate set locations, null if don\u0027t care"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "address that the register was set."
      },
      "throws": []
    },
    {
      "name": "getLastSetLocation",
      "comment": "return the location that this varnode was last set\n This is a transient thing, so it should only be used as a particular flow is being processed...",
      "javadoc": "return the location that this varnode was last set\n This is a transient thing, so it should only be used as a particular flow is being processed...\n@param rvar the register varnode\n@param bval this parameter is unused.\n@return address that the register was set.",
      "static": false,
      "params": [
        {
          "name": "rvar",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "the register varnode"
        },
        {
          "name": "bval",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "this parameter is unused."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "address that the register was set."
      },
      "throws": []
    },
    {
      "name": "getVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "spaceID",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConstant",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "evaluator",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "space",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "evaluator",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRegisterVarnodeValue",
      "comment": "get the value of a register as a varnode (value, space, size)",
      "javadoc": "get the value of a register as a varnode (value, space, size)\n@param reg register to get value for\n@param fromAddr from address\n@param toAddr to address\n@param signed true if signed\n@return the register value or null",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "register to get value for"
        },
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "from address"
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "to address"
        },
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if signed"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "the register value or null"
      },
      "throws": []
    },
    {
      "name": "print",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rvnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegisterValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegisterValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegisterValueAddressRanges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRangeIterator",
        "type_short": "AddressRangeIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasValueOverRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "bval",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "Copy the varnode with as little manipulation as possible.\n Try to keep whatever partical state there is intact if a real value isn\u0027t required.",
      "javadoc": "Copy the varnode with as little manipulation as possible.\n Try to keep whatever partical state there is intact if a real value isn\u0027t required.\n@param out varnode to put it in\n@param in varnode to copy from.\n@param evaluator\n@throws NotFoundException",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "varnode to put it in"
        },
        {
          "name": "in",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "varnode to copy from."
        },
        {
          "name": "mustClearAll",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "evaluator",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "add",
      "comment": "Add two varnodes together to get a new value\n This could create a new space and return a varnode pointed into that space",
      "javadoc": "Add two varnodes together to get a new value\n This could create a new space and return a varnode pointed into that space\n@param val1 first value\n@param val2 second value\n@return varnode that could be a constant, or an offset into a space\n@throws NotFoundException if any constant is needed not known",
      "static": false,
      "params": [
        {
          "name": "val1",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "first value"
        },
        {
          "name": "val2",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "second value"
        },
        {
          "name": "evaluator",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "varnode that could be a constant, or an offset into a space"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": "if any constant is needed not known"
        }
      ]
    },
    {
      "name": "isRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "and",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "val1",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "val2",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "evaluator",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "or",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "val1",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "val2",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "evaluator",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "left",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "val1",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "val2",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "evaluator",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getAddressSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "subtract",
      "comment": "Subtract two varnodes to get a new value\n This could create a new space and return a varnode pointed into that space",
      "javadoc": "Subtract two varnodes to get a new value\n This could create a new space and return a varnode pointed into that space\n@param val1 first value\n@param val2 second value\n@return varnode that could be a constant, or an offset into a space\n@throws NotFoundException if any constant is needed not known",
      "static": false,
      "params": [
        {
          "name": "val1",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "first value"
        },
        {
          "name": "val2",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "second value"
        },
        {
          "name": "evaluator",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "varnode that could be a constant, or an offset into a space"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": "if any constant is needed not known"
        }
      ]
    },
    {
      "name": "extendValue",
      "comment": "Extend a constant value if it can be extended.",
      "javadoc": "Extend a constant value if it can be extended.\n@param out varnode to extend into (for size)\n@param in varnode value to extend the size\n@return \n@throws NotFoundException",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "varnode to extend into (for size)"
        },
        {
          "name": "in",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": "varnode value to extend the size"
        },
        {
          "name": "signExtend",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "evaluator",
          "type_long": "ghidra.program.util.ContextEvaluator",
          "type_short": "ContextEvaluator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "clearRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegisterValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegisterVarnodeValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegisterVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "Return a register given a varnode",
      "javadoc": "Return a register given a varnode",
      "static": false,
      "params": [
        {
          "name": "vnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegisters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRegisterValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "node",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSymbolicSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "space",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSymbolicSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "spaceID",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "pushMemState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "popMemState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
