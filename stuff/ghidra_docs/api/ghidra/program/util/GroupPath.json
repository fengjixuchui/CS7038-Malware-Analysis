{
  "name": "GroupPath",
  "comment": "The GroupPath is a class to represent a unique path in a tree for a Group.",
  "javadoc": "The \u003cCODE\u003eGroupPath\u003c/CODE\u003e is a class to represent a unique path in a tree for a Group.",
  "static": false,
  "implements": [
    "java.io.Serializable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "serialVersionUID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "groupNames",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new GroupPath that is only a single level.",
      "javadoc": "Construct a new GroupPath that is only a single level.\n@param groupName name of group",
      "static": false,
      "params": [
        {
          "name": "groupName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of group"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new GroupPath with the given names.",
      "javadoc": "Construct a new GroupPath with the given names.\n@param groupNames group names. The first name is the oldest ancestor\n and the last name is the youngest descendant in the path.",
      "static": false,
      "params": [
        {
          "name": "groupNames",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "group names. The first name is the oldest ancestor\n and the last name is the youngest descendant in the path."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateGroupPath",
      "comment": "Update this group path with the new group name wherever the old group name is found.",
      "javadoc": "Update this group path with the new group name wherever the old group name is found.\n@param oldname old name\n@param newname new name",
      "static": false,
      "params": [
        {
          "name": "oldname",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "old name"
        },
        {
          "name": "newname",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "@see java.lang.Object#equals(Object)",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLastPathComponent",
      "comment": "Get the last name in the path.",
      "javadoc": "Get the last name in the path.\n@return String",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String"
      },
      "throws": []
    },
    {
      "name": "getGroup",
      "comment": "Get the Group for this group path object.",
      "javadoc": "Get the Group for this group path object.\n@return null if there is no group with the name in this\n group path.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Group",
        "type_short": "Group",
        "comment": "null if there is no group with the name in this\n group path."
      },
      "throws": []
    },
    {
      "name": "getParentPath",
      "comment": "Get the parent path for this group.",
      "javadoc": "Get the parent path for this group.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.util.GroupPath",
        "type_short": "GroupPath",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPath",
      "comment": "Return the array of names that make up this group\u0027s path.",
      "javadoc": "Return the array of names that make up this group\u0027s path.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPathCount",
      "comment": "Get the number of names (levels) that make up this path.",
      "javadoc": "Get the number of names (levels) that make up this path.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPathComponent",
      "comment": "Get the name at the given index into this group\u0027s path.",
      "javadoc": "Get the name at the given index into this group\u0027s path.\n@param index the index in the group path",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index in the group path"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isDescendant",
      "comment": "Return true if the indicated group path is a descendent of this group path.",
      "javadoc": "Return true if the indicated group path is a descendent of this group path.\n@param grpPath the group path",
      "static": false,
      "params": [
        {
          "name": "grpPath",
          "type_long": "ghidra.program.util.GroupPath",
          "type_short": "GroupPath",
          "comment": "the group path"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "pathByAddingChild",
      "comment": "Create a new GroupPath object by adding the given\n child name to this group path.",
      "javadoc": "Create a new GroupPath object by adding the given\n child name to this group path.\n@param child name of child to add to path",
      "static": false,
      "params": [
        {
          "name": "child",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of child to add to path"
        }
      ],
      "return": {
        "type_long": "ghidra.program.util.GroupPath",
        "type_short": "GroupPath",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Returns a string representation of this group path.",
      "javadoc": "Returns a string representation of this group path.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "@see java.lang.Object#hashCode()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
