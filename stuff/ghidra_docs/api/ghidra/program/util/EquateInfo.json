{
  "name": "EquateInfo",
  "comment": "Class to hold information about an Equate; it is used\n in a ProgramChangeRecord when an equate is created and\n when references to the Equate are updated.",
  "javadoc": "Class to hold information about an Equate; it is used\n in a ProgramChangeRecord when an equate is created and\n when references to the Equate are updated.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "value",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "refAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "opIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "dynamicHash",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor.",
      "javadoc": "Constructor.\n@param name Equate name\n@param value Equate value\n@param refAddr Reference address (may be null for some event types)\n@param opIndex operand index for the reference; useful only if \n refAddr is not null. May be -1 if only dynamicHash applies.\n@param dynamicHash dynamic hash. May be 0 if only opIndex applies.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "Equate name"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "Equate value"
        },
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Reference address (may be null for some event types)"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index for the reference; useful only if \n refAddr is not null. May be -1 if only dynamicHash applies."
        },
        {
          "name": "dynamicHash",
          "type_long": "long",
          "type_short": "long",
          "comment": "dynamic hash. May be 0 if only opIndex applies."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Get the equate name.",
      "javadoc": "Get the equate name.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "Get the equate value.",
      "javadoc": "Get the equate value.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceAddress",
      "comment": "Get the reference address.",
      "javadoc": "Get the reference address.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOperandIndex",
      "comment": "Get the operand index of where the equate was placed;\n This value is meaningful only if the reference address is not null, and\n may be -1 if only the dynamicHash applies.",
      "javadoc": "Get the operand index of where the equate was placed;\n This value is meaningful only if the reference address is not null, and\n may be -1 if only the dynamicHash applies.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDynamicHash",
      "comment": "Get the varnode dynamic hash of where the equate was placed;\n This value is meaningful only if the reference address is not null, and\n may be 0 if only the operand index applies.",
      "javadoc": "Get the varnode dynamic hash of where the equate was placed;\n This value is meaningful only if the reference address is not null, and\n may be 0 if only the operand index applies.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Return a meaningful string for debugging purposes.",
      "javadoc": "Return a meaningful string for debugging purposes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
