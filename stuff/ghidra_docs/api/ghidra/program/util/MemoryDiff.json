{
  "name": "MemoryDiff",
  "comment": "MemoryDiff determines where the memory differs between two programs as well as the\n types of differences.",
  "javadoc": "\u003cCODE\u003eMemoryDiff\u003c/CODE\u003e determines where the memory differs between two programs as well as the\n types of differences.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "program1",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "program2",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "memory1",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.mem.Memory",
      "type_short": "Memory",
      "constant_value": null
    },
    {
      "name": "memory2",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.mem.Memory",
      "type_short": "Memory",
      "constant_value": null
    },
    {
      "name": "ranges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressRange[]",
      "type_short": "ghidra.program.model.address.AddressRange[]",
      "constant_value": null
    },
    {
      "name": "diffs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.MemoryBlockDiff[]",
      "type_short": "ghidra.program.util.MemoryBlockDiff[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs an object for determining memory differences between two programs.",
      "javadoc": "Constructs an object for determining memory differences between two programs.\n@param p1 the first program\n@param p2 the second program\n@throws ProgramConflictException if the program memory can\u0027t be compared because the programs\n are based on different languages.",
      "static": false,
      "params": [
        {
          "name": "p1",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the first program"
        },
        {
          "name": "p2",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the second program"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.util.ProgramConflictException",
          "type_short": "ProgramConflictException",
          "comment": "if the program memory can\u0027t be compared because the programs\n are based on different languages."
        }
      ]
    },
    {
      "name": "getProgram1",
      "comment": "Gets the first program that is part of this MemoryDiff.",
      "javadoc": "Gets the first program that is part of this MemoryDiff.\n@return the first program",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the first program"
      },
      "throws": []
    },
    {
      "name": "getProgram2",
      "comment": "Gets the second program that is part of this MemoryDiff.",
      "javadoc": "Gets the second program that is part of this MemoryDiff.\n@return the second program",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the second program"
      },
      "throws": []
    },
    {
      "name": "computeRanges",
      "comment": "Determines the address ranges that the two programs memories must be broken into for \n properly comparing the programs. Each of these address ranges will exist in the first\n program, the second program or both programs.",
      "javadoc": "Determines the address ranges that the two programs memories must be broken into for \n properly comparing the programs. Each of these address ranges will exist in the first\n program, the second program or both programs.\n@throws ProgramConflictException if the two programs can\u0027t be compared.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.util.ProgramConflictException",
          "type_short": "ProgramConflictException",
          "comment": "if the two programs can\u0027t be compared."
        }
      ]
    },
    {
      "name": "getNumRanges",
      "comment": "Gets the number of address ranges that the two programs memories are broken into for \n comparing the programs.",
      "javadoc": "Gets the number of address ranges that the two programs memories are broken into for \n comparing the programs.\n@return the number of address ranges.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of address ranges."
      },
      "throws": []
    },
    {
      "name": "getRange",
      "comment": "Gets the address range as indicated by index. The index is zero based. Address ranges are\n in order from the minimum address to the maximum address range.",
      "javadoc": "Gets the address range as indicated by index. The index is zero based. Address ranges are\n in order from the minimum address to the maximum address range.\n@param index the index of the address range to get.\n@return the address range.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the address range to get."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": "the address range."
      },
      "throws": []
    },
    {
      "name": "getDifferenceInfo",
      "comment": "Gets the memory difference flags for the address range as indicated by index.",
      "javadoc": "Gets the memory difference flags for the address range as indicated by index.\n@param index the index of the address range to get the difference flags for.\n@return the difference flags for the indicated address range.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the address range to get the difference flags for."
        }
      ],
      "return": {
        "type_long": "ghidra.program.util.MemoryBlockDiff",
        "type_short": "MemoryBlockDiff",
        "comment": "the difference flags for the indicated address range."
      },
      "throws": []
    },
    {
      "name": "computeDifferences",
      "comment": "Determines the memory differences and sets the flags for each associated address range.",
      "javadoc": "Determines the memory differences and sets the flags for each associated address range.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDifferences",
      "comment": "Gets a string representation of the types of memory differences that exist for the memory \n block that contains the indicated address.",
      "javadoc": "Gets a string representation of the types of memory differences that exist for the memory \n block that contains the indicated address.\n@param p1Address address that is obtained via the first program.\n@return a string indicating the types of memory differences.",
      "static": false,
      "params": [
        {
          "name": "p1Address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address that is obtained via the first program."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a string indicating the types of memory differences."
      },
      "throws": []
    },
    {
      "name": "getAddressRangeIndex",
      "comment": "Gets the index of the address range containing the indicated address, \n if it is contained in the list;\n\t       otherwise, (-(insertion point) - 1).",
      "javadoc": "Gets the index of the address range containing the indicated address, \n if it is contained in the list;\n\t       otherwise, \u003ctt\u003e(-(\u003ci\u003einsertion point\u003c/i\u003e) - 1)\u003c/tt\u003e.\n@param address the address whose range we are interested in finding.\n@return the index of the address range.",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address whose range we are interested in finding."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index of the address range."
      },
      "throws": []
    },
    {
      "name": "getDifferentAddressRanges",
      "comment": "Returns an array of address ranges where there are memory differences.",
      "javadoc": "Returns an array of address ranges where there are memory differences.\n@return address ranges with differences.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange[]",
        "type_short": "ghidra.program.model.address.AddressRange[]",
        "comment": "address ranges with differences."
      },
      "throws": []
    },
    {
      "name": "sameMemoryBlock",
      "comment": "Determines whether the two memory blocks are the same.",
      "javadoc": "Determines whether the two memory blocks are the same.\n@param block1 the first program\u0027s memory block\n@param block2 the second program\u0027s memory block\n@return true if the memory blocks are the same.",
      "static": false,
      "params": [
        {
          "name": "block1",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": "the first program\u0027s memory block"
        },
        {
          "name": "block2",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": "the second program\u0027s memory block"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the memory blocks are the same."
      },
      "throws": []
    },
    {
      "name": "merge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "mergeFields",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "shouldMerge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "mergeFields",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "memDiffType",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
