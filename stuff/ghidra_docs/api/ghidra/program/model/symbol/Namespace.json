{
  "name": "Namespace",
  "comment": "The Namespace interface",
  "javadoc": "The Namespace interface",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "GLOBAL_NAMESPACE_ID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "0"
    },
    {
      "name": "DELIMITER",
      "comment": "The delimiter that is used to separate namespace nodes in a namespace\n string.  For example, \"Global::child1::symbolName\"",
      "javadoc": "The delimiter that is used to separate namespace nodes in a namespace\n string.  For example, \"Global::child1::symbolName\"",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"::\""
    },
    {
      "name": "NAMESPACE_DELIMITER",
      "comment": "Replaced by #DELIMITER",
      "javadoc": "Replaced by {@link #DELIMITER}\n@deprecated use {@link #DELIMITER}",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"::\""
    }
  ],
  "methods": [
    {
      "name": "getSymbol",
      "comment": "Get the symbol for this namespace; Note: The global namespace will return null",
      "javadoc": "Get the symbol for this namespace; Note: The global namespace will return null\n@return the symbol for this namespace; Note: The global namespace will return null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": "the symbol for this namespace; Note: The global namespace will return null"
      },
      "throws": []
    },
    {
      "name": "isExternal",
      "comment": "Returns true if this namespace is external (i.e., associated with a Library)",
      "javadoc": "Returns true if this namespace is external (i.e., associated with a Library)\n@return true if this namespace is external (i.e., associated with a Library)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this namespace is external (i.e., associated with a Library)"
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Get the name of the symbol for this scope",
      "javadoc": "Get the name of the symbol for this scope\n@return the name of the symbol for this scope",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the symbol for this scope"
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the fully qualified name",
      "javadoc": "Returns the fully qualified name\n@param includeNamespacePath true to include the namespace in the returned name\n@return the fully qualified name",
      "static": false,
      "params": [
        {
          "name": "includeNamespacePath",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to include the namespace in the returned name"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the fully qualified name"
      },
      "throws": []
    },
    {
      "name": "getID",
      "comment": "Return the namespace id",
      "javadoc": "Return the namespace id\n@return the namespace id",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the namespace id"
      },
      "throws": []
    },
    {
      "name": "getParentNamespace",
      "comment": "Get the parent scope.",
      "javadoc": "Get the parent scope.\n@return null if this scope is the global scope.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Namespace",
        "type_short": "Namespace",
        "comment": "null if this scope is the global scope."
      },
      "throws": []
    },
    {
      "name": "getBody",
      "comment": "Get the address set for this namespace.  Note: The body of a namespace (currently\n only used by the function namespace) is restricted it Integer.MAX_VALUE.",
      "javadoc": "Get the address set for this namespace.  Note: The body of a namespace (currently\n only used by the function namespace) is restricted it Integer.MAX_VALUE.\n@return the address set for this namespace",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "the address set for this namespace"
      },
      "throws": []
    },
    {
      "name": "setParentNamespace",
      "comment": "Set the parent namespace for this namespace. Restrictions may apply.",
      "javadoc": "Set the parent namespace for this namespace. Restrictions may apply.\n@param parentNamespace the namespace to use as this namespace\u0027s parent.\n@throws InvalidInputException if the parent namespace is not applicable for\n this namespace.\n@throws DuplicateNameException if another symbol exists in the parent namespace with\n the same name as this namespace\n@throws CircularDependencyException if the parent namespace is a descendent of this\n namespace.",
      "static": false,
      "params": [
        {
          "name": "parentNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the namespace to use as this namespace\u0027s parent."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if another symbol exists in the parent namespace with\n the same name as this namespace"
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if the parent namespace is not applicable for\n this namespace."
        },
        {
          "type_long": "ghidra.program.model.listing.CircularDependencyException",
          "type_short": "CircularDependencyException",
          "comment": "if the parent namespace is a descendent of this\n namespace."
        }
      ]
    },
    {
      "name": "isGlobal",
      "comment": "Return true if this is the global namespace;",
      "javadoc": "Return true if this is the global namespace;\n@return true if this is the global namespace;",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is the global namespace;"
      },
      "throws": []
    }
  ]
}
