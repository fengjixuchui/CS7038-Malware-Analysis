{
  "name": "Reference",
  "comment": "Base class to hold information about a referring address. Derived classes add\n what the address is referring to. A basic reference consists of a \"from\"\n address, the reference type, the operand index for where the reference is,\n and whether the reference is user defined.",
  "javadoc": "Base class to hold information about a referring address. Derived classes add\n what the address is referring to. A basic reference consists of a \"from\"\n address, the reference type, the operand index for where the reference is,\n and whether the reference is user defined.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "fields": [
    {
      "name": "MNEMONIC",
      "comment": "Operand index which corresponds to the instruction/data mnemonic.",
      "javadoc": "Operand index which corresponds to the instruction/data mnemonic.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "OTHER",
      "comment": "Special purpose operand index when not applicable (i.e., Thunk reference)",
      "javadoc": "Special purpose operand index when not applicable (i.e., Thunk reference)",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-2"
    }
  ],
  "methods": [
    {
      "name": "getFromAddress",
      "comment": "Get the address of the codeunit that is making the reference.",
      "javadoc": "Get the address of the codeunit that is making the reference.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToAddress",
      "comment": "Get the \"to\" address for this reference.",
      "javadoc": "Get the \"to\" address for this reference.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPrimary",
      "comment": "Return whether this reference is marked as primary.",
      "javadoc": "Return whether this reference is marked as primary.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbolID",
      "comment": "Get the symbol ID associated with this reference.",
      "javadoc": "Get the symbol ID associated with this reference.\n@return symbol ID or -1 if no symbol is associated with this reference",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "symbol ID or -1 if no symbol is associated with this reference"
      },
      "throws": []
    },
    {
      "name": "getReferenceType",
      "comment": "Get the type of reference being made.",
      "javadoc": "Get the type of reference being made.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType",
        "type_short": "RefType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOperandIndex",
      "comment": "Get the operand index of where this reference was placed.",
      "javadoc": "Get the operand index of where this reference was placed.\n@return op index or ReferenceManager.MNEMONIC",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "op index or ReferenceManager.MNEMONIC"
      },
      "throws": []
    },
    {
      "name": "isMnemonicReference",
      "comment": "Return true if this reference is on the Mnemonic and not on an operand",
      "javadoc": "Return true if this reference is on the Mnemonic and not on an operand",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOperandReference",
      "comment": "Return true if this reference is on an operand and not on the Mnemonic.",
      "javadoc": "Return true if this reference is on an operand and not on the Mnemonic.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isStackReference",
      "comment": "Returns true if this reference is an instance of StackReference and\n refers to a stack location.",
      "javadoc": "Returns true if this reference is an instance of StackReference and\n refers to a stack location.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isExternalReference",
      "comment": "Returns true if this reference is an instance of ExternalReference.",
      "javadoc": "Returns true if this reference is an instance of ExternalReference.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEntryPointReference",
      "comment": "Returns true if this reference is an instance of EntryReference.",
      "javadoc": "Returns true if this reference is an instance of EntryReference.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isMemoryReference",
      "comment": "Returns true if this reference to an address in the programs memory\n space. This includes offset and shifted references.",
      "javadoc": "Returns true if this reference to an address in the programs memory\n space. This includes offset and shifted references.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isRegisterReference",
      "comment": "Returns true if this reference to an address in the programs register\n space.",
      "javadoc": "Returns true if this reference to an address in the programs register\n space.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOffsetReference",
      "comment": "Returns true if this reference is an instance of OffsetReference.",
      "javadoc": "Returns true if this reference is an instance of OffsetReference.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isShiftedReference",
      "comment": "Returns true if this reference is an instance of ShiftedReference.",
      "javadoc": "Returns true if this reference is an instance of ShiftedReference.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSource",
      "comment": "Gets the source of this reference. SourceTypes",
      "javadoc": "Gets the source of this reference. {@link SourceType}s\n@return the source of this reference",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.SourceType",
        "type_short": "SourceType",
        "comment": "the source of this reference"
      },
      "throws": []
    }
  ]
}
