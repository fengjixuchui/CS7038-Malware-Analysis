{
  "name": "ReferenceListener",
  "comment": "Interface to define methods that are called when references are\n added or removed.",
  "javadoc": "Interface to define methods that are called when references are\n added or removed.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "memReferenceAdded",
      "comment": "Notification that the given memory reference has been added.",
      "javadoc": "Notification that the given memory reference has been added.\n@param ref the reference that was added.",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the reference that was added."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "memReferenceRemoved",
      "comment": "Notification that the given memory reference has bee removed.",
      "javadoc": "Notification that the given memory reference has bee removed.\n@param ref the reference that was removed.",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the reference that was removed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "memReferenceTypeChanged",
      "comment": "Notification that the reference type on the given memory reference\n has changed.",
      "javadoc": "Notification that the reference type on the given memory reference\n has changed.\n@param newRef the reference with the new reference type.\n@param oldRef the reference with the old reference type.",
      "static": false,
      "params": [
        {
          "name": "newRef",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the reference with the new reference type."
        },
        {
          "name": "oldRef",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the reference with the old reference type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "memReferencePrimarySet",
      "comment": "Notification that the given memory reference has been set as\n the primary reference.",
      "javadoc": "Notification that the given memory reference has been set as\n the primary reference.\n@param ref the reference that is now primary.",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the reference that is now primary."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "memReferencePrimaryRemoved",
      "comment": "Notification that the given memory reference is no longer the primary\n reference.",
      "javadoc": "Notification that the given memory reference is no longer the primary\n reference.\n@param ref the reference that was primary but now is not.",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the reference that was primary but now is not."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "stackReferenceAdded",
      "comment": "Notification that the given stack reference has been added.",
      "javadoc": "Notification that the given stack reference has been added.\n@param ref the stack reference that was added.",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the stack reference that was added."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "stackReferenceRemoved",
      "comment": "Notification tbat the given stack reference has been removed.",
      "javadoc": "Notification tbat the given stack reference has been removed.\n@param ref The stack reference that was removed",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "The stack reference that was removed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "externalReferenceAdded",
      "comment": "Notification that the given external reference has been added.",
      "javadoc": "Notification that the given external reference has been added.\n@param ref the external reference that was added.",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the external reference that was added."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "externalReferenceRemoved",
      "comment": "Notification that the given external reference has been removed.",
      "javadoc": "Notification that the given external reference has been removed.\n@param ref the external reference that was removed.",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the external reference that was removed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "externalReferenceNameChanged",
      "comment": "Notification that the external program name in the reference\n has changed.",
      "javadoc": "Notification that the external program name in the reference\n has changed.\n@param ref the external reference with its new external name.",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the external reference with its new external name."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
