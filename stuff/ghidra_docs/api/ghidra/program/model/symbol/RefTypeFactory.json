{
  "name": "RefTypeFactory",
  "comment": "Factory class to create RefType objects.",
  "javadoc": "Factory class to create RefType objects.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "REFTYPE_LOOKUP_BY_TYPE_MAP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.util.datastruct.IntObjectHashtable\u003cghidra.program.model.symbol.RefType\u003e",
      "type_short": "IntObjectHashtable",
      "constant_value": null
    },
    {
      "name": "memoryRefTypes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.RefType[]",
      "type_short": "ghidra.program.model.symbol.RefType[]",
      "constant_value": null
    },
    {
      "name": "validMemRefTypes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.HashSet\u003cghidra.program.model.symbol.RefType\u003e",
      "type_short": "HashSet",
      "constant_value": null
    },
    {
      "name": "stackRefTypes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.RefType[]",
      "type_short": "ghidra.program.model.symbol.RefType[]",
      "constant_value": null
    },
    {
      "name": "dataRefTypes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.RefType[]",
      "type_short": "ghidra.program.model.symbol.RefType[]",
      "constant_value": null
    },
    {
      "name": "extRefTypes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.RefType[]",
      "type_short": "ghidra.program.model.symbol.RefType[]",
      "constant_value": null
    },
    {
      "name": "MASKS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long[]",
      "type_short": "long[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMemoryRefTypes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType[]",
        "type_short": "ghidra.program.model.symbol.RefType[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStackRefTypes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType[]",
        "type_short": "ghidra.program.model.symbol.RefType[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataRefTypes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType[]",
        "type_short": "ghidra.program.model.symbol.RefType[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExternalRefTypes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType[]",
        "type_short": "ghidra.program.model.symbol.RefType[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "Get static instance of the specified RefType/FlowType",
      "javadoc": "Get static instance of the specified RefType/FlowType\n@param type ref-type value\n@return ref-type instance\n@throws NoSuchElementException if ref-type is not defined",
      "static": true,
      "params": [
        {
          "name": "type",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "ref-type value"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType",
        "type_short": "RefType",
        "comment": "ref-type instance"
      },
      "throws": []
    },
    {
      "name": "getDefaultRegisterRefType",
      "comment": "Get the default stack data RefType for the specified code-unit/opIndex and register",
      "javadoc": "Get the default stack data RefType for the specified code-unit/opIndex and register\n@param cu the code unit\n@param reg the register\n@param opIndex the op index\n@return default RefType",
      "static": true,
      "params": [
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": "the code unit"
        },
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the op index"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType",
        "type_short": "RefType",
        "comment": "default RefType"
      },
      "throws": []
    },
    {
      "name": "getDefaultStackRefType",
      "comment": "Get the default register data RefType for the specified code-unit/opIndex and register",
      "javadoc": "Get the default register data RefType for the specified code-unit/opIndex and register\n@param cu the code unit to get the default stack ref type.\n@param opIndex the operand index.\n@return the default register datat refType.",
      "static": true,
      "params": [
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": "the code unit to get the default stack ref type."
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the operand index."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType",
        "type_short": "RefType",
        "comment": "the default register datat refType."
      },
      "throws": []
    },
    {
      "name": "getDefaultFlowType",
      "comment": "Determine default FlowType for a specified instruction and flow destination toAddr.",
      "javadoc": "Determine default FlowType for a specified instruction and flow destination toAddr.\n@param instr instruction\n@param toAddr flow destination address\n@param allowComputedFlowType if true and an absolute flow type is not found\n a computed flow type will be returned if only one exists.\n@return FlowType or null if unable to determine",
      "static": true,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction"
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "flow destination address"
        },
        {
          "name": "allowComputedFlowType",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true and an absolute flow type is not found\n a computed flow type will be returned if only one exists."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.FlowType",
        "type_short": "FlowType",
        "comment": "FlowType or null if unable to determine"
      },
      "throws": []
    },
    {
      "name": "getDefaultComputedFlowType",
      "comment": "Determine default computed FlowType for a specified instruction.  It is assumed\n that all computed flows utilize a register in its destination specification/computation.",
      "javadoc": "Determine default computed FlowType for a specified instruction.  It is assumed\n that all computed flows utilize a register in its destination specification/computation.\n@param instr instruction\n@return FlowType or null if unable to determine",
      "static": true,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.FlowType",
        "type_short": "FlowType",
        "comment": "FlowType or null if unable to determine"
      },
      "throws": []
    },
    {
      "name": "getDefaultMemoryRefType",
      "comment": "Get the default memory flow/data RefType for the specified code unit and opIndex.",
      "javadoc": "Get the default memory flow/data RefType for the specified code unit and opIndex.\n@param cu the code unit\n@param opIndex the op index\n@param toAddr reference destination\n@param ignoreExistingReferences if true existing references will not influence default\n reference type returned.\n@return default RefType",
      "static": true,
      "params": [
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": "the code unit"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the op index"
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "reference destination"
        },
        {
          "name": "ignoreExistingReferences",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true existing references will not influence default\n reference type returned."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType",
        "type_short": "RefType",
        "comment": "default RefType"
      },
      "throws": []
    },
    {
      "name": "getDefaultJumpOrCallFlowType",
      "comment": "Return default flow-type without terminator",
      "javadoc": "Return default flow-type without terminator\n@param inst the instruction\n@return call/jump flow type or null",
      "static": true,
      "params": [
        {
          "name": "inst",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "the instruction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.FlowType",
        "type_short": "FlowType",
        "comment": "call/jump flow type or null"
      },
      "throws": []
    },
    {
      "name": "getMemRefType",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "memAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType",
        "type_short": "RefType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isFlowOp",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLoadStoreRefType",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "ops",
          "type_long": "ghidra.program.model.pcode.PcodeOp[]",
          "type_short": "ghidra.program.model.pcode.PcodeOp[]",
          "comment": ""
        },
        {
          "name": "startOpSeq",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "offsetAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType",
        "type_short": "RefType",
        "comment": ""
      },
      "throws": []
    }
  ]
}
