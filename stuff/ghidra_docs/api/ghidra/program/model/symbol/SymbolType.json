{
  "name": "SymbolType",
  "comment": "Class to represent the various types of Symbols.",
  "javadoc": "Class to represent the various types of Symbols.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "LABEL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.SymbolType",
      "type_short": "SymbolType",
      "constant_value": null
    },
    {
      "name": "CODE",
      "comment": "",
      "javadoc": "@deprecated use {@link #LABEL} instead.",
      "static": true,
      "type_long": "ghidra.program.model.symbol.SymbolType",
      "type_short": "SymbolType",
      "constant_value": null
    },
    {
      "name": "LIBRARY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.SymbolType",
      "type_short": "SymbolType",
      "constant_value": null
    },
    {
      "name": "NAMESPACE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.SymbolType",
      "type_short": "SymbolType",
      "constant_value": null
    },
    {
      "name": "CLASS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.SymbolType",
      "type_short": "SymbolType",
      "constant_value": null
    },
    {
      "name": "FUNCTION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.SymbolType",
      "type_short": "SymbolType",
      "constant_value": null
    },
    {
      "name": "PARAMETER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.SymbolType",
      "type_short": "SymbolType",
      "constant_value": null
    },
    {
      "name": "LOCAL_VAR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.SymbolType",
      "type_short": "SymbolType",
      "constant_value": null
    },
    {
      "name": "GLOBAL_VAR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.SymbolType",
      "type_short": "SymbolType",
      "constant_value": null
    },
    {
      "name": "GLOBAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.SymbolType",
      "type_short": "SymbolType",
      "constant_value": null
    },
    {
      "name": "types",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.SymbolType[]",
      "type_short": "ghidra.program.model.symbol.SymbolType[]",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "value",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "isNamespace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "isNamespace",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValidParent",
      "comment": "Returns true if the given namespace is a valid parent for a symbol of this type\n if it has the given address and whether or not it is external.",
      "javadoc": "Returns true if the given namespace is a valid parent for a symbol of this type\n if it has the given address and whether or not it is external.\n@param program the program to contain the symbol\n@param parent the namespace where a symbol will potentially be parented.\n@param symbolAddr the address of they symbol to be parented.\n@param isExternalSymbol true if the symbol is external.\n@return true if the given namespace is a valid parent for a symbol if it has the\n given address and whether or not it is external.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to contain the symbol"
        },
        {
          "name": "parent",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the namespace where a symbol will potentially be parented."
        },
        {
          "name": "symbolAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of they symbol to be parented."
        },
        {
          "name": "isExternalSymbol",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the symbol is external."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given namespace is a valid parent for a symbol if it has the\n given address and whether or not it is external."
      },
      "throws": []
    },
    {
      "name": "isValidAddress",
      "comment": "Returns true if the given address is valid for this symbol type.",
      "javadoc": "Returns true if the given address is valid for this symbol type.\n@param program the program to test for a valid address.\n@param symbolAddress the address of the symbol to be tested.\n@return true if the given address is valid within the given program.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to test for a valid address."
        },
        {
          "name": "symbolAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the symbol to be tested."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given address is valid within the given program."
      },
      "throws": []
    },
    {
      "name": "isValidSourceType",
      "comment": "Returns true if the given SourceType is valid for this symbol type. (For example, Some symbols\n don\u0027t support the SymbolType.DEFAULT)",
      "javadoc": "Returns true if the given SourceType is valid for this symbol type. (For example, Some symbols\n don\u0027t support the SymbolType.DEFAULT)\n@param sourceType the sourceType to test.\n@param symbolAddress the address of the symbol to be tested.\n@return true if the given SourceType is valid for this symbol type.",
      "static": false,
      "params": [
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the sourceType to test."
        },
        {
          "name": "symbolAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the symbol to be tested."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given SourceType is valid for this symbol type."
      },
      "throws": []
    },
    {
      "name": "allowsDuplicates",
      "comment": "Returns true of this symbol type allows duplicate names.",
      "javadoc": "Returns true of this symbol type allows duplicate names.\n@return true of this symbol type allows duplicate names.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true of this symbol type allows duplicate names."
      },
      "throws": []
    },
    {
      "name": "isNamespace",
      "comment": "Returns true if this symbol represents a namespace.",
      "javadoc": "Returns true if this symbol represents a namespace.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getID",
      "comment": "Returns the id of this symbol type.",
      "javadoc": "Returns the id of this symbol type.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbolType",
      "comment": "Returns the SymbolType for the given id.",
      "javadoc": "Returns the SymbolType for the given id.\n@param id the id for the SymbolType to find.",
      "static": true,
      "params": [
        {
          "name": "id",
          "type_long": "int",
          "type_short": "int",
          "comment": "the id for the SymbolType to find."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.SymbolType",
        "type_short": "SymbolType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
