{
  "name": "ReferenceManager",
  "comment": "Interface for managing references.",
  "javadoc": "Interface for managing references.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "MNEMONIC",
      "comment": "Operand index which corresponds to the instruction/data mnemonic.",
      "javadoc": "Operand index which corresponds to the instruction/data mnemonic.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    }
  ],
  "methods": [
    {
      "name": "addReference",
      "comment": "Add a memory, stack, register or external reference",
      "javadoc": "Add a memory, stack, register or external reference\n@param reference",
      "static": false,
      "params": [
        {
          "name": "reference",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addStackReference",
      "comment": "Add a reference to a stack location. If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.",
      "javadoc": "Add a reference to a stack location. If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.\n@param fromAddr \"from\" address within a function\n@param opIndex operand index\n@param stackOffset stack offset of the reference\n@param type reference type - how the location is being referenced.\n@param source the source of this reference",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "\"from\" address within a function"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        },
        {
          "name": "stackOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "stack offset of the reference"
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "reference type - how the location is being referenced."
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this reference"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addRegisterReference",
      "comment": "Add a reference to a register. If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.",
      "javadoc": "Add a reference to a register. If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.\n@param fromAddr \"from\" address\n@param opIndex operand index\n@param register register to add the reference to\n@param type reference type - how the location is being referenced.\n@param source the source of this reference",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "\"from\" address"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        },
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "register to add the reference to"
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "reference type - how the location is being referenced."
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this reference"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addMemoryReference",
      "comment": "Adds a memory reference.  Only first the first memory reference placed on\n an operand will be made primary by default.  All non-memory references \n will be removed from the specified operand.",
      "javadoc": "Adds a memory reference.  Only first the first memory reference placed on\n an operand will be made primary by default.  All non-memory references \n will be removed from the specified operand.\n@param fromAddr address of the codeunit where the reference occurs\n@param toAddr address of the location being referenced.  \n Memory, stack, and register addresses are all permitted.\n@param type reference type - how the location is being referenced.\n@param source the source of this reference\n@param opIndex the operand index \n display of the operand making this reference",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of the codeunit where the reference occurs"
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of the location being referenced.  \n Memory, stack, and register addresses are all permitted."
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "reference type - how the location is being referenced."
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this reference"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the operand index \n display of the operand making this reference"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addOffsetMemReference",
      "comment": "Add an offset memory reference.  Only first the first memory reference placed on\n an operand will be made primary by default.  All non-memory references \n will be removed from the specified operand.",
      "javadoc": "Add an offset memory reference.  Only first the first memory reference placed on\n an operand will be made primary by default.  All non-memory references \n will be removed from the specified operand.\n@param fromAddr address for the \"from\"\n@param toAddr address of the \"to\"\n@param offset value added to a base address to get the toAddr\n@param type reference type - how the location is being referenced\n@param source the source of this reference\n@param opIndex the operand index",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address for the \"from\""
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of the \"to\""
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "value added to a base address to get the toAddr"
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "reference type - how the location is being referenced"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this reference"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the operand index"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addShiftedMemReference",
      "comment": "Add a shifted memory reference; the \"to\" address is computed as the value\n at the operand at opIndex shifted by some number of bits, specified in the \n shiftValue parameter.  Only first the first memory reference placed on\n an operand will be made primary by default.  All non-memory references \n will be removed from the specified operand.",
      "javadoc": "Add a shifted memory reference; the \"to\" address is computed as the value\n at the operand at opIndex shifted by some number of bits, specified in the \n shiftValue parameter.  Only first the first memory reference placed on\n an operand will be made primary by default.  All non-memory references \n will be removed from the specified operand.\n@param fromAddr address for the \"from\"\n@param toAddr computed as the value of the operand at opIndex shifted\n by the number of bits specified by shiftValue\n@param shiftValue\n@param type reference type - how the location is being referenced\n@param source the source of this reference\n@param opIndex the operand index",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address for the \"from\""
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "computed as the value of the operand at opIndex shifted\n by the number of bits specified by shiftValue"
        },
        {
          "name": "shiftValue",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "reference type - how the location is being referenced"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this reference"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the operand index"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addExternalReference",
      "comment": "Adds an external reference.  If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.",
      "javadoc": "Adds an external reference.  If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.\n@param fromAddr from address (source of the reference)\n@param libraryName name of external program\n@param extLabel label within the external program, may be null if extAddr is not null\n@param extAddr address within the external program, may be null\n@param source the source of this reference\n@param type reference type - how the location is being referenced\n@param opIndex operand index\n@throws InvalidInputException\n@throws DuplicateNameException",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "from address (source of the reference)"
        },
        {
          "name": "libraryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of external program"
        },
        {
          "name": "extLabel",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "label within the external program, may be null if extAddr is not null"
        },
        {
          "name": "extAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address within the external program, may be null"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this reference"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "reference type - how the location is being referenced"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addExternalReference",
      "comment": "Adds an external reference.  If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.",
      "javadoc": "Adds an external reference.  If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.\n@param fromAddr from address (source of the reference)\n@param extNamespace external namespace containing the named external label.\n@param extLabel label within the external program, may be null if extAddr is not null\n@param extAddr address within the external program, may be null\n@param source the source of this reference\n@param type reference type - how the location is being referenced\n@param opIndex operand index\n@throws InvalidInputException\n@throws DuplicateNameException",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "from address (source of the reference)"
        },
        {
          "name": "extNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "external namespace containing the named external label."
        },
        {
          "name": "extLabel",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "label within the external program, may be null if extAddr is not null"
        },
        {
          "name": "extAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address within the external program, may be null"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this reference"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "reference type - how the location is being referenced"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addExternalReference",
      "comment": "Adds an external reference.  If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.",
      "javadoc": "Adds an external reference.  If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.\n@param fromAddr from address (source of the reference)\n@param opIndex operand index\n@param location external location\n@param source the source of this reference\n@param type reference type - how the location is being referenced\n@return external reference\n@throws InvalidInputException",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "from address (source of the reference)"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        },
        {
          "name": "location",
          "type_long": "ghidra.program.model.symbol.ExternalLocation",
          "type_short": "ExternalLocation",
          "comment": "external location"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this reference"
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "reference type - how the location is being referenced"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": "external reference"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "removeAllReferencesFrom",
      "comment": "Removes all references where \"From address\" is in the given range.",
      "javadoc": "Removes all references where \"From address\" is in the given range.\n@param beginAddr the first address in the range.\n@param endAddr the last address in the range.",
      "static": false,
      "params": [
        {
          "name": "beginAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address in the range."
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last address in the range."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAllReferencesFrom",
      "comment": "Remove all stack, external, and memory references for the given\n from address.",
      "javadoc": "Remove all stack, external, and memory references for the given\n from address.\n@param fromAddr the address of the codeunit from which to remove all references.",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the codeunit from which to remove all references."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAllReferencesTo",
      "comment": "Remove all stack, external, and memory references for the given\n to address.",
      "javadoc": "Remove all stack, external, and memory references for the given\n to address.\n@param toAddr the address for which all references to should be removed.",
      "static": false,
      "params": [
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address for which all references to should be removed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferencesTo",
      "comment": "Returns all references to the given variable.  Only data references to storage \n are considered.",
      "javadoc": "Returns all references to the given variable.  Only data references to storage \n are considered.\n@param var variable to retrieve references to\n@return array of variable references, or zero length array if no\n references exist",
      "static": false,
      "params": [
        {
          "name": "var",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "variable to retrieve references to"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference[]",
        "type_short": "ghidra.program.model.symbol.Reference[]",
        "comment": "array of variable references, or zero length array if no\n references exist"
      },
      "throws": []
    },
    {
      "name": "getReferencedVariable",
      "comment": "Returns the referenced function variable.",
      "javadoc": "Returns the referenced function variable.\n@param reference\n@return function variable or null if variable not found",
      "static": false,
      "params": [
        {
          "name": "reference",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable",
        "type_short": "Variable",
        "comment": "function variable or null if variable not found"
      },
      "throws": []
    },
    {
      "name": "setPrimary",
      "comment": "Set the given reference\u0027s primary attribute",
      "javadoc": "Set the given reference\u0027s primary attribute\n@param ref the reference to make primary.\n@param isPrimary true to make the reference primary, false to make it non-primary",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the reference to make primary."
        },
        {
          "name": "isPrimary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to make the reference primary, false to make it non-primary"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasFlowReferencesFrom",
      "comment": "Return whether the given address has flow references from this address.",
      "javadoc": "Return whether the given address has flow references from this address.\n@param addr the address to test for flow references.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to test for flow references."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFlowReferencesFrom",
      "comment": "Get the flow references from the given address.",
      "javadoc": "Get the flow references from the given address.\n@param addr the address of the codeunit to get all flows from.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the codeunit to get all flows from."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference[]",
        "type_short": "ghidra.program.model.symbol.Reference[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExternalReferences",
      "comment": "Returns an iterator over all external references",
      "javadoc": "Returns an iterator over all external references",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.ReferenceIterator",
        "type_short": "ReferenceIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferencesTo",
      "comment": "Get an iterator over all references that have the given address as\n their \"To\" address.",
      "javadoc": "Get an iterator over all references that have the given address as\n their \"To\" address.\n@param addr the address that all references in the iterator refer to.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address that all references in the iterator refer to."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ReferenceIterator",
        "type_short": "ReferenceIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceIterator",
      "comment": "Get an iterator over references starting with the specified \n fromAddr.  A forward iterator is returned with references sorted on\n the from address.",
      "javadoc": "Get an iterator over references starting with the specified \n fromAddr.  A forward iterator is returned with references sorted on\n the from address.\n@param startAddr the first from address to consider.\n@return a forward memory reference iterator.",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first from address to consider."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ReferenceIterator",
        "type_short": "ReferenceIterator",
        "comment": "a forward memory reference iterator."
      },
      "throws": []
    },
    {
      "name": "getReference",
      "comment": "Get the reference that has the given from and to address, and\n operand index.",
      "javadoc": "Get the reference that has the given from and to address, and\n operand index.\n@param fromAddr the address of the codeunit making the reference.\n@param toAddr the address being referred to.\n@param opIndex the operand index.",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the codeunit making the reference."
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address being referred to."
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the operand index."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferencesFrom",
      "comment": "Get all references \"from\" the specified addr.",
      "javadoc": "Get all references \"from\" the specified addr.\n@param addr address of code-unit making the references.\n@return array of all references \"from\" the specified addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of code-unit making the references."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference[]",
        "type_short": "ghidra.program.model.symbol.Reference[]",
        "comment": "array of all references \"from\" the specified addr."
      },
      "throws": []
    },
    {
      "name": "getReferencesFrom",
      "comment": "Returns all references \"from\" the given fromAddr and operand (specified by opIndex).",
      "javadoc": "Returns all references \"from\" the given fromAddr and operand (specified by opIndex).\n@param fromAddr the from which to get references\n@param opIndex the operand from which to get references\n@return all references \"from\" the given fromAddr and operand.",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the from which to get references"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the operand from which to get references"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference[]",
        "type_short": "ghidra.program.model.symbol.Reference[]",
        "comment": "all references \"from\" the given fromAddr and operand."
      },
      "throws": []
    },
    {
      "name": "hasReferencesFrom",
      "comment": "Returns true if there are any memory references at the given\n address/opIndex.  Keep in mind this is a rather inefficient \n method as it must examine all references from the specified \n fromAddr.",
      "javadoc": "Returns true if there are any memory references at the given\n address/opIndex.  Keep in mind this is a rather inefficient \n method as it must examine all references from the specified \n fromAddr.\n@param fromAddr the address of the codeunit being tested\n@param opIndex the index of the operand being tested.",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the codeunit being tested"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the operand being tested."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasReferencesFrom",
      "comment": "Returns true if there are any memory references at the given\n address.",
      "javadoc": "Returns true if there are any memory references at the given\n address.\n@param fromAddr the address of the codeunit being tested",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the codeunit being tested"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrimaryReferenceFrom",
      "comment": "Get the primary reference from the given address.",
      "javadoc": "Get the primary reference from the given address.\n@param addr from address\n@param opIndex operand index",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "from address"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceSourceIterator",
      "comment": "Returns an iterator over addresses that are the \"From\" address in a\n reference",
      "javadoc": "Returns an iterator over addresses that are the \"From\" address in a\n reference\n@param startAddr address to position iterator.\n@param forward true means to iterate in the forward direction",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address to position iterator."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to iterate in the forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceSourceIterator",
      "comment": "Returns an iterator over all addresses that are the \"From\" address in a\n reference, restricted by the given address set.",
      "javadoc": "Returns an iterator over all addresses that are the \"From\" address in a\n reference, restricted by the given address set.\n@param addrSet the set of address to restrict the iterator or null for all addresses.\n@param forward true means to iterate in the forward direction",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the set of address to restrict the iterator or null for all addresses."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to iterate in the forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceDestinationIterator",
      "comment": "Returns an iterator over all addresses that are the \"To\" address in a\n reference.",
      "javadoc": "Returns an iterator over all addresses that are the \"To\" address in a\n reference.\n@param startAddr start of iterator\n@param forward true means to iterate in the forward direction",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "start of iterator"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to iterate in the forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceDestinationIterator",
      "comment": "Returns an iterator over all addresses that are the \"To\" address in a\n memory reference, restricted by the given address set.",
      "javadoc": "Returns an iterator over all addresses that are the \"To\" address in a\n memory reference, restricted by the given address set.\n@param addrSet the set of address to restrict the iterator or null for all addresses.\n@param forward true means to iterate in the forward direction",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the set of address to restrict the iterator or null for all addresses."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to iterate in the forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceCountTo",
      "comment": "Returns the number of memory References to the specified\n toAddr",
      "javadoc": "Returns the number of memory References to the specified\n \u003ccode\u003etoAddr\u003c/code\u003e\n@param toAddr the address being referenced",
      "static": false,
      "params": [
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address being referenced"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceCountFrom",
      "comment": "Returns the number of memory References from the specified\n fromAddr",
      "javadoc": "Returns the number of memory References from the specified\n \u003ccode\u003efromAddr\u003c/code\u003e\n@param fromAddr the address of the codeunit making the reference.",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the codeunit making the reference."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceDestinationCount",
      "comment": "Return the number of references for \"to\" addresses.",
      "javadoc": "Return the number of references for \"to\" addresses.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceSourceCount",
      "comment": "Return the number of references for \"from\" addresses.",
      "javadoc": "Return the number of references for \"from\" addresses.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasReferencesTo",
      "comment": "Return true if a memory reference exists with the given \"to\" address.",
      "javadoc": "Return true if a memory reference exists with the given \"to\" address.\n@param toAddr address being referred to.",
      "static": false,
      "params": [
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address being referred to."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateRefType",
      "comment": "Uodate the reference type on a memory reference.",
      "javadoc": "Uodate the reference type on a memory reference.\n@param ref reference to be updated\n@param refType new reference type",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "reference to be updated"
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "new reference type"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setAssociation",
      "comment": "Associates the given reference with the given symbol.",
      "javadoc": "Associates the given reference with the given symbol.\n@param s the symbol to associate with the given reference.\n@param ref the reference to associate with the given symbol\n@throws IllegalArgumentException If the given reference does not already\n exist or its \"To\" address\n is not the same as the symbol\u0027s address.",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to associate with the given reference."
        },
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the reference to associate with the given symbol"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAssociation",
      "comment": "Removes any symbol associations with the given reference.",
      "javadoc": "Removes any symbol associations with the given reference.\n@param ref the reference for which any symbol association is to be removed.\n@throws IllegalArgumentException if the given references does not exist.",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the reference for which any symbol association is to be removed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "delete",
      "comment": "Deletes the given reference object",
      "javadoc": "Deletes the given reference object\n@param ref the reference to be deleted.",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the reference to be deleted."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceLevel",
      "comment": "Returns the reference level for the references to the given address",
      "javadoc": "Returns the reference level for the references to the given address\n@param toAddr the address at which to find the highest reference level",
      "static": false,
      "params": [
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to find the highest reference level"
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": []
    }
  ]
}
