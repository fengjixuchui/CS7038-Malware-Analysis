{
  "name": "Equate",
  "comment": "An Equate associates a string with a scalar value in the program, \n and contains a list of addresses and operand positions that refer \n to this equate.",
  "javadoc": "An Equate associates a string with a scalar value in the program, \n and contains a list of addresses and operand positions that refer \n to this equate.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getName",
      "comment": "Get the actual name of this equate.  Note that this name may be different than the\n \"display name,\" which is what the user will see.",
      "javadoc": "Get the actual name of this equate.  Note that this name may be different than the\n \"display name,\" which is what the user will see.\n@return The actual name of this equate.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The actual name of this equate."
      },
      "throws": []
    },
    {
      "name": "getDisplayName",
      "comment": "Gets the \"display name\" of this equate.  Note that the display name may be different\n than the equate\u0027s actual name if the equate is based off a data type id.",
      "javadoc": "Gets the \"display name\" of this equate.  Note that the display name may be different\n than the equate\u0027s actual name if the equate is based off a data type id.\n@return The \"display name\" of this equate.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The \"display name\" of this equate."
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "Get the value of this equate.",
      "javadoc": "Get the value of this equate.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDisplayValue",
      "comment": "Gets a more accurate representation of the equate value. Used for rendering as close to the\n listing as possible.",
      "javadoc": "Gets a more accurate representation of the equate value. Used for rendering as close to the\n listing as possible.\n@return A more accurate representation of the equate value.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "A more accurate representation of the equate value."
      },
      "throws": []
    },
    {
      "name": "getReferenceCount",
      "comment": "Get the number of references to this equate.",
      "javadoc": "Get the number of references to this equate.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addReference",
      "comment": "Add a reference (at the given operand position) to this equate.  If a reference already\n exists for the instruction at this address, then the old reference will be removed\n before the new reference is added.",
      "javadoc": "Add a reference (at the given operand position) to this equate.  If a reference already\n exists for the instruction at this address, then the old reference will be removed\n before the new reference is added.\n@param refAddr the address where the equate is used.\n@param opndPosition the operand index where the equate is used.",
      "static": false,
      "params": [
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address where the equate is used."
        },
        {
          "name": "opndPosition",
          "type_long": "int",
          "type_short": "int",
          "comment": "the operand index where the equate is used."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addReference",
      "comment": "Add a reference (at the given dynamic hash position) to this equate. If a reference already\n exists for the instruction at this address, then the old reference will be removed\n before the new reference is added.",
      "javadoc": "Add a reference (at the given dynamic hash position) to this equate. If a reference already\n exists for the instruction at this address, then the old reference will be removed\n before the new reference is added.\n@param dynamicHash constant varnode dynamic hash value\n@param refAddr the address where the equate is used.",
      "static": false,
      "params": [
        {
          "name": "dynamicHash",
          "type_long": "long",
          "type_short": "long",
          "comment": "constant varnode dynamic hash value"
        },
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address where the equate is used."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "renameEquate",
      "comment": "Changes the name associated with the equate.",
      "javadoc": "Changes the name associated with the equate.\n@param newName the new name for this equate.\n@exception DuplicateNameException thrown if newName is already\n   used by another equate.\n@throws InvalidInputException if newName contains blank characters,\n is zero length, or is null",
      "static": false,
      "params": [
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new name for this equate."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if newName contains blank characters,\n is zero length, or is null"
        }
      ]
    },
    {
      "name": "getReferences",
      "comment": "Get the references for this equate.",
      "javadoc": "Get the references for this equate.\n@return a array of EquateReferences.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.EquateReference[]",
        "type_short": "ghidra.program.model.symbol.EquateReference[]",
        "comment": "a array of EquateReferences."
      },
      "throws": []
    },
    {
      "name": "getReferences",
      "comment": "Get references for this equate attached to a specific address",
      "javadoc": "Get references for this equate attached to a specific address\n@param refAddr is the address\n@return the list of EquateReferences",
      "static": false,
      "params": [
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is the address"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.symbol.EquateReference\u003e",
        "type_short": "List",
        "comment": "the list of EquateReferences"
      },
      "throws": []
    },
    {
      "name": "removeReference",
      "comment": "Remove the reference at the given operand position.",
      "javadoc": "Remove the reference at the given operand position.\n@param refAddr the address that was using this equate\n@param opndPosition the operand index of the operand that was using this eqate.",
      "static": false,
      "params": [
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address that was using this equate"
        },
        {
          "name": "opndPosition",
          "type_long": "int",
          "type_short": "int",
          "comment": "the operand index of the operand that was using this eqate."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeReference",
      "comment": "Remove the reference at the given address",
      "javadoc": "Remove the reference at the given address\n@param dynamicHash the hash of the reference\n@param refAddr the reference\u0027s address",
      "static": false,
      "params": [
        {
          "name": "dynamicHash",
          "type_long": "long",
          "type_short": "long",
          "comment": "the hash of the reference"
        },
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the reference\u0027s address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValidUUID",
      "comment": "Checks if equate is based off an enum\u0027s universal id and checks if the enum still exists.\n The equate is still valid if the equate is not based off an enum.",
      "javadoc": "Checks if equate is based off an enum\u0027s universal id and checks if the enum still exists.\n The equate is still valid if the equate is not based off an enum.\n@return true if the equate is based off an enum that still exists.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the equate is based off an enum that still exists."
      },
      "throws": []
    },
    {
      "name": "isEnumBased",
      "comment": "Checks if equate is based off an enum\u0027s universal id.",
      "javadoc": "Checks if equate is based off an enum\u0027s universal id.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEnumUUID",
      "comment": "Gets the universal id from this equate if the equate was based off of an enum.",
      "javadoc": "Gets the universal id from this equate if the equate was based off of an enum.\n@return The universal id for this equate.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.UniversalID",
        "type_short": "UniversalID",
        "comment": "The universal id for this equate."
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Get the name of this equate.",
      "javadoc": "Get the name of this equate.\n@see #getName()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
