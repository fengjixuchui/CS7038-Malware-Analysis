{
  "name": "ExternalManager",
  "comment": "External manager interface. Defines methods for dealing with external programs and locations\n within those programs.",
  "javadoc": "External manager interface. Defines methods for dealing with external programs and locations\n within those programs.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getExternalLibraryNames",
      "comment": "Returns an array of all external names for which locations have been defined.",
      "javadoc": "Returns an array of all external names for which locations have been defined.\n@return array of external names",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "array of external names"
      },
      "throws": []
    },
    {
      "name": "getExternalLibrary",
      "comment": "Get the Library which corresponds to the specified name",
      "javadoc": "Get the Library which corresponds to the specified name\n@param libraryName name of library\n@return library or null if not found",
      "static": false,
      "params": [
        {
          "name": "libraryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of library"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Library",
        "type_short": "Library",
        "comment": "library or null if not found"
      },
      "throws": []
    },
    {
      "name": "removeExternalLibrary",
      "comment": "Removes external name if no associated ExternalLocation\u0027s exist",
      "javadoc": "Removes external name if no associated ExternalLocation\u0027s exist\n@param libraryName external library name\n@return true if removed, false if unable to due to associated locations/references",
      "static": false,
      "params": [
        {
          "name": "libraryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "external library name"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if removed, false if unable to due to associated locations/references"
      },
      "throws": []
    },
    {
      "name": "getExternalLibraryPath",
      "comment": "Returns the file pathname associated with an external name.\n Null is returned if either the external name does not exist or\n a pathname has not been set.",
      "javadoc": "Returns the file pathname associated with an external name.\n Null is returned if either the external name does not exist or\n a pathname has not been set.\n@param libraryName external name\n@return project file pathname or null",
      "static": false,
      "params": [
        {
          "name": "libraryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "external name"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "project file pathname or null"
      },
      "throws": []
    },
    {
      "name": "setExternalPath",
      "comment": "Sets the file pathname associated with an existing external name.",
      "javadoc": "Sets the file pathname associated with an existing external name.\n@param libraryName the name of the library to associate with a file.\n@param pathname the path to the program to be associated with the library name.\n@param userDefined true if the external path is being specified by the user\n@throws InvalidInputException",
      "static": false,
      "params": [
        {
          "name": "libraryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the library to associate with a file."
        },
        {
          "name": "pathname",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path to the program to be associated with the library name."
        },
        {
          "name": "userDefined",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the external path is being specified by the user"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "updateExternalLibraryName",
      "comment": "Change the name of an existing external name.",
      "javadoc": "Change the name of an existing external name.\n@param oldName the old name of the external library name.\n@param newName the new name of the external library name.\n@param source the source of this external library\n@throws DuplicateNameException if another namespace has the same name\n@throws InvalidInputException",
      "static": false,
      "params": [
        {
          "name": "oldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the old name of the external library name."
        },
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new name of the external library name."
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this external library"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if another namespace has the same name"
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getExternalLocations",
      "comment": "Get an iterator over all external locations associated with the specified\n externalName.",
      "javadoc": "Get an iterator over all external locations associated with the specified\n externalName.\n@param libraryName the name of the library to get locations for\n@return external location iterator",
      "static": false,
      "params": [
        {
          "name": "libraryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the library to get locations for"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocationIterator",
        "type_short": "ExternalLocationIterator",
        "comment": "external location iterator"
      },
      "throws": []
    },
    {
      "name": "getExternalLocations",
      "comment": "Get an iterator over all external locations which have been associated to\n the specified memory address",
      "javadoc": "Get an iterator over all external locations which have been associated to\n the specified memory address\n@param memoryAddress memory address\n@return external location iterator",
      "static": false,
      "params": [
        {
          "name": "memoryAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "memory address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocationIterator",
        "type_short": "ExternalLocationIterator",
        "comment": "external location iterator"
      },
      "throws": []
    },
    {
      "name": "getExternalLocation",
      "comment": "Get an external location.",
      "javadoc": "Get an external location.\n@param libraryName the name of the library for which to get an external location\n@param label the name of the external location.\n@return first matching external location\n@deprecated Use  {@link #getExternalLocations(String, String)} or \n {@link #getUniqueExternalLocation(String, String)} since duplicate names may exist",
      "static": false,
      "params": [
        {
          "name": "libraryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the library for which to get an external location"
        },
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the external location."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocation",
        "type_short": "ExternalLocation",
        "comment": "first matching external location"
      },
      "throws": []
    },
    {
      "name": "getExternalLocation",
      "comment": "Get an external location.",
      "javadoc": "Get an external location.\n@param namespace the namespace containing the external label.\n@param label the name of the external location.\n@return first matching external location\n@deprecated Use {@link #getExternalLocations(Namespace, String)} or \n {@link #getUniqueExternalLocation(Namespace, String)} since duplicate names may exist",
      "static": false,
      "params": [
        {
          "name": "namespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the namespace containing the external label."
        },
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the external location."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocation",
        "type_short": "ExternalLocation",
        "comment": "first matching external location"
      },
      "throws": []
    },
    {
      "name": "getExternalLocations",
      "comment": "Returns a list of External Locations matching the given label name in the given Library.",
      "javadoc": "Returns a list of External Locations matching the given label name in the given Library.\n@param libraryName the name of the library\n@param label the name of the label\n@return a list of External Locations matching the given label name in the given Library.",
      "static": false,
      "params": [
        {
          "name": "libraryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the library"
        },
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the label"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.symbol.ExternalLocation\u003e",
        "type_short": "List",
        "comment": "a list of External Locations matching the given label name in the given Library."
      },
      "throws": []
    },
    {
      "name": "getExternalLocations",
      "comment": "Returns a list of External Locations matching the given label name in the given Namespace.",
      "javadoc": "Returns a list of External Locations matching the given label name in the given Namespace.\n@param namespace the Namespace to search\n@param label the name of the labels to search for.\n@return a list of External Locations matching the given label name in the given Namespace.",
      "static": false,
      "params": [
        {
          "name": "namespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the Namespace to search"
        },
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the labels to search for."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.symbol.ExternalLocation\u003e",
        "type_short": "List",
        "comment": "a list of External Locations matching the given label name in the given Namespace."
      },
      "throws": []
    },
    {
      "name": "getUniqueExternalLocation",
      "comment": "Returns the unique external location associated with the given library name and label",
      "javadoc": "Returns the unique external location associated with the given library name and label\n@param libraryName the library name\n@param label the label of the external location\n@return the unique external location or null",
      "static": false,
      "params": [
        {
          "name": "libraryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the library name"
        },
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the label of the external location"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocation",
        "type_short": "ExternalLocation",
        "comment": "the unique external location or null"
      },
      "throws": []
    },
    {
      "name": "getUniqueExternalLocation",
      "comment": "Returns the unique external location associated with the given namespace and label",
      "javadoc": "Returns the unique external location associated with the given namespace and label\n@param namespace the namespace\n@param label the label of the external location\n@return the unique external location or null",
      "static": false,
      "params": [
        {
          "name": "namespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the namespace"
        },
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the label of the external location"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocation",
        "type_short": "ExternalLocation",
        "comment": "the unique external location or null"
      },
      "throws": []
    },
    {
      "name": "getExternalLocation",
      "comment": "Returns the external location associated with the given external symbol",
      "javadoc": "Returns the external location associated with the given external symbol\n@param symbol the external symbol.\n@return the external location or null",
      "static": false,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the external symbol."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocation",
        "type_short": "ExternalLocation",
        "comment": "the external location or null"
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Determines if the indicated external library name is being managed (exists).",
      "javadoc": "Determines if the indicated external library name is being managed (exists).\n@param libraryName the external library name\n@return true if the name is defined (whether it has a path or not).",
      "static": false,
      "params": [
        {
          "name": "libraryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the external library name"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the name is defined (whether it has a path or not)."
      },
      "throws": []
    },
    {
      "name": "addExternalLibraryName",
      "comment": "Adds a new external library name",
      "javadoc": "Adds a new external library name\n@param libraryName the new external library name to add.\n@param source the source of this external library\n@return library\n@throws InvalidInputException\n@throws DuplicateNameException if another non-Library namespace has the same name",
      "static": false,
      "params": [
        {
          "name": "libraryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new external library name to add."
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this external library"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Library",
        "type_short": "Library",
        "comment": "library"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if another non-Library namespace has the same name"
        }
      ]
    },
    {
      "name": "addExtLocation",
      "comment": "Get or create an external location associated with an library/file named extName\n and the label within that file specified by extLabel",
      "javadoc": "Get or create an external location associated with an library/file named extName\n and the label within that file specified by extLabel\n@param libraryName the external library name\n@param extLabel the external label\n@param extAddr the external address\n@param sourceType the source type of this external library\u0027s symbol\n@return external location\n@throws InvalidInputException\n@throws DuplicateNameException if another non-Library namespace has the same name",
      "static": false,
      "params": [
        {
          "name": "libraryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the external library name"
        },
        {
          "name": "extLabel",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the external label"
        },
        {
          "name": "extAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the external address"
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source type of this external library\u0027s symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocation",
        "type_short": "ExternalLocation",
        "comment": "external location"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if another non-Library namespace has the same name"
        }
      ]
    },
    {
      "name": "addExtLocation",
      "comment": "Get or create an external location in the indicated parent namespace with the specified name.",
      "javadoc": "Get or create an external location in the indicated parent namespace with the specified name.\n@param extNamespace the external namespace\n@param extLabel the external label\n@param extAddr the external address\n@param sourceType the source type of this external library\u0027s symbol\n@return external location\n@throws InvalidInputException",
      "static": false,
      "params": [
        {
          "name": "extNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the external namespace"
        },
        {
          "name": "extLabel",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the external label"
        },
        {
          "name": "extAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the external address"
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source type of this external library\u0027s symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocation",
        "type_short": "ExternalLocation",
        "comment": "external location"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addExtLocation",
      "comment": "Get or create an external location in the indicated parent namespace with the specified name.",
      "javadoc": "Get or create an external location in the indicated parent namespace with the specified name.\n@param extNamespace the external namespace\n@param extLabel the external label\n@param extAddr the external address\n@param sourceType the source type of this external library\u0027s symbol\n@param reuseExisting if true, this will return an existing matching external\n location instead of creating a new one.\n@return external location\n@throws InvalidInputException",
      "static": false,
      "params": [
        {
          "name": "extNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the external namespace"
        },
        {
          "name": "extLabel",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the external label"
        },
        {
          "name": "extAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the external address"
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source type of this external library\u0027s symbol"
        },
        {
          "name": "reuseExisting",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, this will return an existing matching external\n location instead of creating a new one."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocation",
        "type_short": "ExternalLocation",
        "comment": "external location"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addExtFunction",
      "comment": "Get or create an external location associated with an library/file named extName\n and the label within that file specified by extLabel",
      "javadoc": "Get or create an external location associated with an library/file named extName\n and the label within that file specified by extLabel\n@param libraryName the external library name\n@param extLabel the external label\n@param extAddr the external address\n@param sourceType the source type of this external library\u0027s symbol\n@return external location\n@throws InvalidInputException\n@throws DuplicateNameException if another non-Library namespace has the same name",
      "static": false,
      "params": [
        {
          "name": "libraryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the external library name"
        },
        {
          "name": "extLabel",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the external label"
        },
        {
          "name": "extAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the external address"
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source type of this external library\u0027s symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocation",
        "type_short": "ExternalLocation",
        "comment": "external location"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if another non-Library namespace has the same name"
        }
      ]
    },
    {
      "name": "addExtFunction",
      "comment": "Get or create an external function location associated with an library/file named extName\n and the label within that file specified by extLabel",
      "javadoc": "Get or create an external function location associated with an library/file named extName\n and the label within that file specified by extLabel\n@param extNamespace the external namespace\n@param extLabel the external label\n@param extAddr the external address\n@param sourceType the source type of this external library\u0027s symbol\n@return external location\n@throws InvalidInputException",
      "static": false,
      "params": [
        {
          "name": "extNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the external namespace"
        },
        {
          "name": "extLabel",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the external label"
        },
        {
          "name": "extAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the external address"
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source type of this external library\u0027s symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocation",
        "type_short": "ExternalLocation",
        "comment": "external location"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addExtFunction",
      "comment": "Get or create an external function location associated with an library/file named extName\n and the label within that file specified by extLabel",
      "javadoc": "Get or create an external function location associated with an library/file named extName\n and the label within that file specified by extLabel\n@param extNamespace the external namespace\n@param extLabel the external label\n@param sourceType the source type of this external library\u0027s symbol\n@param reuseExisting if true, will return any existing matching location instead of\n creating a new one. If false, will prefer to create a new one as long as the specified\n address is not null and not used in an existing location.\n@return external location\n@throws InvalidInputException",
      "static": false,
      "params": [
        {
          "name": "extNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the external namespace"
        },
        {
          "name": "extLabel",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the external label"
        },
        {
          "name": "extAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source type of this external library\u0027s symbol"
        },
        {
          "name": "reuseExisting",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, will return any existing matching location instead of\n creating a new one. If false, will prefer to create a new one as long as the specified\n address is not null and not used in an existing location."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalLocation",
        "type_short": "ExternalLocation",
        "comment": "external location"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    }
  ]
}
