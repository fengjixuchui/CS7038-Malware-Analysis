{
  "name": "EquateTable",
  "comment": "EquateTable manages all equates for program. An equate defines a relationship\n   between a scalar value and a string whereby the scalar may be represented by\n   the string. All equates are defined by the user and remain until explicitly\n   removed by the user.",
  "javadoc": "EquateTable manages all equates for program. An equate defines a relationship\n   between a scalar value and a string whereby the scalar may be represented by\n   the string. All equates are defined by the user and remain until explicitly\n   removed by the user.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "createEquate",
      "comment": "Creates a new equate",
      "javadoc": "Creates a new equate\n@param name the name to associate with the given value.\n@param value the value to associate with the given name.\n@return the equate\n@exception DuplicateNameException thrown if name is already in use\n   as an equate.\n@throws InvalidInputException if name contains blank characters,\n is zero length, or is null",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name to associate with the given value."
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the value to associate with the given name."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Equate",
        "type_short": "Equate",
        "comment": "the equate"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if name contains blank characters,\n is zero length, or is null"
        }
      ]
    },
    {
      "name": "removeEquate",
      "comment": "Removes the equate from the program.",
      "javadoc": "Removes the equate from the program.\n@param name the name of the equate to remove.\n@return true if the equate existed, false otherwise.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the equate to remove."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the equate existed, false otherwise."
      },
      "throws": []
    },
    {
      "name": "deleteAddressRange",
      "comment": "Removes all equates defined in the given range.",
      "javadoc": "Removes all equates defined in the given range.\n@param start start of the range\n@param end end of the range\n@param monitor task monitor to cancel the remove operation\n@throws CancelledException if the operation was cancelled.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "start of the range"
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "end of the range"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor to cancel the remove operation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the operation was cancelled."
        }
      ]
    },
    {
      "name": "getEquate",
      "comment": "Returns the equate with the given name, null if no such equate exists",
      "javadoc": "Returns the equate with the given name, null if no such equate exists\n@param name the of the equate to be retrieved\n@return the equate",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the of the equate to be retrieved"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Equate",
        "type_short": "Equate",
        "comment": "the equate"
      },
      "throws": []
    },
    {
      "name": "getEquate",
      "comment": "Returns the first equate found that is associated with the given \n value at the given reference address and operand position;",
      "javadoc": "Returns the first equate found that is associated with the given \n value at the given reference address and operand position;\n@param reference address where the equate is used.\n@param opndPosition the operand index of the operand where the equate is used.\n@param value the value where the equate is used.\n@return the equate or null if there is no such equate.",
      "static": false,
      "params": [
        {
          "name": "reference",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address where the equate is used."
        },
        {
          "name": "opndPosition",
          "type_long": "int",
          "type_short": "int",
          "comment": "the operand index of the operand where the equate is used."
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the value where the equate is used."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Equate",
        "type_short": "Equate",
        "comment": "the equate or null if there is no such equate."
      },
      "throws": []
    },
    {
      "name": "getEquates",
      "comment": "Returns the equates (one for each scalar) at the given reference address \n and operand position; For an instruction a given operand can have multiple scalars.",
      "javadoc": "Returns the equates (one for each scalar) at the given reference address \n and operand position; For an instruction a given operand can have multiple scalars.\n@param reference address where the equate is used.\n@param opndPosition the operand index of the operand where the equate is used.\n@return the list of equates or empty list if there is no such equate.",
      "static": false,
      "params": [
        {
          "name": "reference",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address where the equate is used."
        },
        {
          "name": "opndPosition",
          "type_long": "int",
          "type_short": "int",
          "comment": "the operand index of the operand where the equate is used."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.symbol.Equate\u003e",
        "type_short": "List",
        "comment": "the list of equates or empty list if there is no such equate."
      },
      "throws": []
    },
    {
      "name": "getEquates",
      "comment": "Returns the equates (one for each scalar and opIndex) at the given reference address.\n For an instruction a given operand can have multiple scalars.",
      "javadoc": "Returns the equates (one for each scalar and opIndex) at the given reference address.\n For an instruction a given operand can have multiple scalars.\n@param reference address where the equate is used.\n@return the list of equates or empty list if there is no such equate.",
      "static": false,
      "params": [
        {
          "name": "reference",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address where the equate is used."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.symbol.Equate\u003e",
        "type_short": "List",
        "comment": "the list of equates or empty list if there is no such equate."
      },
      "throws": []
    },
    {
      "name": "getEquateAddresses",
      "comment": "Returns an address iterator over all the addresses where\n equates have been set.",
      "javadoc": "Returns an address iterator over all the addresses where\n equates have been set.\n@return the iterator",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": "the iterator"
      },
      "throws": []
    },
    {
      "name": "getEquates",
      "comment": "Returns all equates defined for value.",
      "javadoc": "Returns all equates defined for value.\n@param value the value to get all equates for.\n@return the equates",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the value to get all equates for."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.symbol.Equate\u003e",
        "type_short": "List",
        "comment": "the equates"
      },
      "throws": []
    },
    {
      "name": "getEquates",
      "comment": "Returns an iterator over all equates.",
      "javadoc": "Returns an iterator over all equates.\n@return the iterator",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.symbol.Equate\u003e",
        "type_short": "Iterator",
        "comment": "the iterator"
      },
      "throws": []
    },
    {
      "name": "getEquateAddresses",
      "comment": "Return an address iterator over each address with an\n equate reference starting at the start address.",
      "javadoc": "Return an address iterator over each address with an\n equate reference starting at the start address.\n@param start start address\n@return an AddressIterator over addresses with defined equate references",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "start address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": "an AddressIterator over addresses with defined equate references"
      },
      "throws": []
    },
    {
      "name": "getEquateAddresses",
      "comment": "Return an address iterator over each address with an\n equate reference that is in the specified address set.",
      "javadoc": "Return an address iterator over each address with an\n equate reference that is in the specified address set.\n@param asv the address set\n@return AddressIterator over addresses with defined equate references",
      "static": false,
      "params": [
        {
          "name": "asv",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address set"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": "AddressIterator over addresses with defined equate references"
      },
      "throws": []
    }
  ]
}
