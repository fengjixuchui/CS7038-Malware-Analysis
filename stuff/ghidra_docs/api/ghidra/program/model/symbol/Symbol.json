{
  "name": "Symbol",
  "comment": "Interface for a symbol, which associates a string value with\n an address.",
  "javadoc": "Interface for a symbol, which associates a string value with\n an address.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getAddress",
      "comment": "",
      "javadoc": "@return the address for the symbol.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address for the symbol."
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "@return the name of this symbol.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of this symbol."
      },
      "throws": []
    },
    {
      "name": "getPath",
      "comment": "Gets the full path name for this symbol as an ordered array of strings ending\n with the symbol name. The global symbol will return an empty array.",
      "javadoc": "Gets the full path name for this symbol as an ordered array of strings ending\n with the symbol name. The global symbol will return an empty array.\n@return the array indicating the full path name for this symbol.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "the array indicating the full path name for this symbol."
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "",
      "javadoc": "@return the program associated with this symbol.\n Null may be returned for global symbols.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the program associated with this symbol.\n Null may be returned for global symbols."
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the symbol name, optionally prepended with the namespace path.",
      "javadoc": "Returns the symbol name, optionally prepended with the namespace path.\n@param includeNamespace if true, the namespace path is prepended to the name.\n@return formatted name",
      "static": false,
      "params": [
        {
          "name": "includeNamespace",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the namespace path is prepended to the name."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "formatted name"
      },
      "throws": []
    },
    {
      "name": "getParentNamespace",
      "comment": "Return the parent namespace for this symbol.",
      "javadoc": "Return the parent namespace for this symbol.\n@return the namespace that contains this symbol.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Namespace",
        "type_short": "Namespace",
        "comment": "the namespace that contains this symbol."
      },
      "throws": []
    },
    {
      "name": "getParentSymbol",
      "comment": "Returns namespace symbol of the namespace containing this symbol",
      "javadoc": "Returns namespace symbol of the namespace containing this symbol\n@return parent namespace symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": "parent namespace symbol"
      },
      "throws": []
    },
    {
      "name": "isDescendant",
      "comment": "Returns true if the given namespace symbol is a descendant of this symbol.",
      "javadoc": "Returns true if the given namespace symbol is a descendant of this symbol.\n@param namespace to test as descendant symbol of this Symbol\n@return true if this symbol is an ancestor of the given namespace symbol",
      "static": false,
      "params": [
        {
          "name": "namespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "to test as descendant symbol of this Symbol"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this symbol is an ancestor of the given namespace symbol"
      },
      "throws": []
    },
    {
      "name": "isValidParent",
      "comment": "Determines if the given parent is valid for this Symbol.  Specified namespace \n must belong to the same symbol table as this symbol.",
      "javadoc": "Determines if the given parent is valid for this Symbol.  Specified namespace \n must belong to the same symbol table as this symbol.\n@param parent prospective parent namespace for this symbol\n@return true if parent is valid",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "prospective parent namespace for this symbol"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if parent is valid"
      },
      "throws": []
    },
    {
      "name": "getSymbolType",
      "comment": "Returns this symbol\u0027s type",
      "javadoc": "Returns this symbol\u0027s type\n@return symbol type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.SymbolType",
        "type_short": "SymbolType",
        "comment": "symbol type"
      },
      "throws": []
    },
    {
      "name": "getReferenceCount",
      "comment": "",
      "javadoc": "@return the number of References to this symbol.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of References to this symbol."
      },
      "throws": []
    },
    {
      "name": "hasMultipleReferences",
      "comment": "",
      "javadoc": "@return true if this symbol has more than one reference to it.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this symbol has more than one reference to it."
      },
      "throws": []
    },
    {
      "name": "hasReferences",
      "comment": "",
      "javadoc": "@return true if this symbol has at least one reference to it.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this symbol has at least one reference to it."
      },
      "throws": []
    },
    {
      "name": "getReferences",
      "comment": "Returns all memory references to the address of this symbol.  If you do not have a\n TaskMonitor instance, then you can pass TaskMonitorAdapter#DUMMY_MONITOR or\n null.",
      "javadoc": "Returns all memory references to the address of this symbol.  If you do not have a\n {@link TaskMonitor} instance, then you can pass {@link TaskMonitorAdapter#DUMMY_MONITOR} or\n \u003ccode\u003enull\u003c/code\u003e.\n@return all memory references to the address of this symbol.\n@param monitor the monitor that is used to report progress and to cancel this\n        potentially long-running call",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor that is used to report progress and to cancel this\n        potentially long-running call"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference[]",
        "type_short": "ghidra.program.model.symbol.Reference[]",
        "comment": "all memory references to the address of this symbol."
      },
      "throws": []
    },
    {
      "name": "getReferences",
      "comment": "Returns all memory references to the address of this symbol.",
      "javadoc": "Returns all memory references to the address of this symbol.\n@return all memory references to the address of this symbol\n@see #getReferences(TaskMonitor)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference[]",
        "type_short": "ghidra.program.model.symbol.Reference[]",
        "comment": "all memory references to the address of this symbol"
      },
      "throws": []
    },
    {
      "name": "getProgramLocation",
      "comment": "",
      "javadoc": "@return a program location corresponding to this symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.util.ProgramLocation",
        "type_short": "ProgramLocation",
        "comment": "a program location corresponding to this symbol"
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "Sets the name this symbol.\n If this symbol is dynamic, then the name is set\n and the symbol is no longer dynamic.",
      "javadoc": "Sets the name this symbol.\n If this symbol is dynamic, then the name is set\n and the symbol is no longer dynamic.\n@param newName the new name for this symbol.\n@param source the source of this symbol\n \u003cbr\u003eSome symbol types, such as function symbols, can set the source to Symbol.DEFAULT.\n@throws DuplicateNameException if name already exists as the name of another symbol or alias.\n@throws InvalidInputException if alias contains blank characters, is zero length, or is null\n@throws IllegalArgumentException if you try to set the source to DEFAULT for a symbol type\n that doesn\u0027t allow it.",
      "static": false,
      "params": [
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new name for this symbol."
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this symbol\n Some symbol types, such as function symbols, can set the source to Symbol.DEFAULT."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if name already exists as the name of another symbol or alias."
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if alias contains blank characters, is zero length, or is null"
        }
      ]
    },
    {
      "name": "setNamespace",
      "comment": "Sets the symbols namespace",
      "javadoc": "Sets the symbols namespace\n@param newNamespace new parent namespace\n@throws DuplicateNameException if newNamespace already contains a symbol\n with this symbol\u0027s name\n@throws InvalidInputException is newNamespace is not a valid parent for\n this symbol\n@throws CircularDependencyException if this symbol is an ancestor of\n newNamespace",
      "static": false,
      "params": [
        {
          "name": "newNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "new parent namespace"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if newNamespace already contains a symbol\n with this symbol\u0027s name"
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "is newNamespace is not a valid parent for\n this symbol"
        },
        {
          "type_long": "ghidra.program.model.listing.CircularDependencyException",
          "type_short": "CircularDependencyException",
          "comment": "if this symbol is an ancestor of\n newNamespace"
        }
      ]
    },
    {
      "name": "setNameAndNamespace",
      "comment": "Sets the symbols name and namespace.  This is provided to allow the caller to\n avoid a name conflict by creating an autonomous action.",
      "javadoc": "Sets the symbols name and namespace.  This is provided to allow the caller to\n avoid a name conflict by creating an autonomous action.\n@param newName new symbol name\n@param newNamespace new parent namespace\n@param source the source of this symbol\n \u003cbr\u003eSome symbol types, such as function symbols, can set the source to Symbol.DEFAULT.\n@throws DuplicateNameException if newNamespace already contains a symbol\n with this symbol\u0027s name\n@throws InvalidInputException is newNamespace is not a valid parent for\n this symbol\n@throws CircularDependencyException if this symbol is an ancestor of\n newNamespace",
      "static": false,
      "params": [
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new symbol name"
        },
        {
          "name": "newNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "new parent namespace"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this symbol\n Some symbol types, such as function symbols, can set the source to Symbol.DEFAULT."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if newNamespace already contains a symbol\n with this symbol\u0027s name"
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "is newNamespace is not a valid parent for\n this symbol"
        },
        {
          "type_long": "ghidra.program.model.listing.CircularDependencyException",
          "type_short": "CircularDependencyException",
          "comment": "if this symbol is an ancestor of\n newNamespace"
        }
      ]
    },
    {
      "name": "delete",
      "comment": "Delete the symbol and its associated resources.  Any references symbol associations\n will be discarded.",
      "javadoc": "Delete the symbol and its associated resources.  Any references symbol associations\n will be discarded.\n@return true if successful",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if successful"
      },
      "throws": []
    },
    {
      "name": "isPinned",
      "comment": "Returns true if the symbol is pinned to its current address. If it is pinned, then moving\n or removing the memory associated with that address will not affect this symbol.",
      "javadoc": "Returns true if the symbol is pinned to its current address. If it is pinned, then moving\n or removing the memory associated with that address will not affect this symbol.\n@return true if the symbol is pinned to its current address.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the symbol is pinned to its current address."
      },
      "throws": []
    },
    {
      "name": "setPinned",
      "comment": "Sets whether or not this symbol is pinned to its associated address.\n\n If the symbol is pinned then moving or removing the memory associated with its address will\n not cause this symbol to be removed and will not cause its address to change.\n If the symbol is not pinned, then removing the memory at its address will also remove this\n symbol.\n\n Likewise, moving a memory block containing a symbol that is not anchored will change\n the address for that symbol to keep it associated with the same byte in the memory block.",
      "javadoc": "\u003cp\u003eSets whether or not this symbol is pinned to its associated address.\u003c/p\u003e\n\n \u003cp\u003eIf the symbol is pinned then moving or removing the memory associated with its address will\n not cause this symbol to be removed and will not cause its address to change.\n If the symbol is not pinned, then removing the memory at its address will also remove this\n symbol.\u003c/p\u003e\n\n \u003cp\u003eLikewise, moving a memory block containing a symbol that is not anchored will change\n the address for that symbol to keep it associated with the same byte in the memory block.\u003c/p\u003e\n@param pinned true indicates this symbol is anchored to its address.\n \t\tfalse indicates this symbol is not anchored to its address.",
      "static": false,
      "params": [
        {
          "name": "pinned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates this symbol is anchored to its address.\n \t\tfalse indicates this symbol is not anchored to its address."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isDynamic",
      "comment": "",
      "javadoc": "@return true if this symbol is a dynamic symbol (not actually defined in the database).",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this symbol is a dynamic symbol (not actually defined in the database)."
      },
      "throws": []
    },
    {
      "name": "isExternal",
      "comment": "Returns true if this an external symbol.",
      "javadoc": "Returns true if this an external symbol.\n@return true if this an external symbol.\n@see Address#isExternalAddress()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this an external symbol."
      },
      "throws": []
    },
    {
      "name": "isPrimary",
      "comment": "",
      "javadoc": "@return true if this symbol is primary",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this symbol is primary"
      },
      "throws": []
    },
    {
      "name": "setPrimary",
      "comment": "Sets this symbol to be primary. All other symbols at the same address will be set to \n !primary.  Only applies to non-function symbols.",
      "javadoc": "Sets this symbol to be primary. All other symbols at the same address will be set to \n !primary.  Only applies to non-function symbols.\n@return returns true if the symbol was not primary and now it is, otherwise false",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "returns true if the symbol was not primary and now it is, otherwise false"
      },
      "throws": []
    },
    {
      "name": "isExternalEntryPoint",
      "comment": "",
      "javadoc": "@return true if the symbol is at an address\n set as a external entry point.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the symbol is at an address\n set as a external entry point."
      },
      "throws": []
    },
    {
      "name": "getID",
      "comment": "",
      "javadoc": "@return this symbol\u0027s ID.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "this symbol\u0027s ID."
      },
      "throws": []
    },
    {
      "name": "getObject",
      "comment": "",
      "javadoc": "@return object associated with this symbol or null if symbol has been deleted",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "object associated with this symbol or null if symbol has been deleted"
      },
      "throws": []
    },
    {
      "name": "isGlobal",
      "comment": "",
      "javadoc": "@return true if the symbol is global",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the symbol is global"
      },
      "throws": []
    },
    {
      "name": "setSource",
      "comment": "Sets the source of this symbol.\n SourceType",
      "javadoc": "Sets the source of this symbol.\n {@link SourceType}\n@param source the new source of this symbol",
      "static": false,
      "params": [
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the new source of this symbol"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSource",
      "comment": "Gets the source of this symbol.\n SourceType",
      "javadoc": "Gets the source of this symbol.\n {@link SourceType}\n@return the source of this symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.SourceType",
        "type_short": "SourceType",
        "comment": "the source of this symbol"
      },
      "throws": []
    },
    {
      "name": "isDeleted",
      "comment": "Determine if this symbol object has been deleted.  NOTE: the symbol could be\n deleted at anytime due to asynchronous activity.",
      "javadoc": "Determine if this symbol object has been deleted.  NOTE: the symbol could be\n deleted at anytime due to asynchronous activity.\n@return true if symbol has been deleted, false if not.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if symbol has been deleted, false if not."
      },
      "throws": []
    }
  ]
}
