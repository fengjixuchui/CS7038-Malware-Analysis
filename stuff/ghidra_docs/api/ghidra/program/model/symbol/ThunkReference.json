{
  "name": "ThunkReference",
  "comment": "Implementation for a Thunk Function reference.\n These references are dynamic in nature and may not be explicitly added,\n removed or altered.  There presence is inferred by the existence\n of a thunk function.",
  "javadoc": "Implementation for a Thunk Function reference.\n These references are dynamic in nature and may not be explicitly added,\n removed or altered.  There presence is inferred by the existence\n of a thunk function.",
  "static": false,
  "implements": [
    "ghidra.program.model.symbol.DynamicReference"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "OPINDEX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-2"
    },
    {
      "name": "fromAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "toAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Thunk reference constructor",
      "javadoc": "Thunk reference constructor\n@param thunkAddr thunk function address\n@param thunkedAddr \"thunked\" function address",
      "static": false,
      "params": [
        {
          "name": "thunkAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "thunk function address"
        },
        {
          "name": "thunkedAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "\"thunked\" function address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFromAddress",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#getFromAddress()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToAddress",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#getToAddress()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPrimary",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#isPrimary()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbolID",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#getSymbolID()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceType",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#getReferenceType()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType",
        "type_short": "RefType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOperandIndex",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#getOperandIndex()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isMnemonicReference",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#isMnemonicReference()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOperandReference",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#isOperandReference()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "@see java.lang.Comparable#compareTo(Object)",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "@see java.lang.Object#equals(Object)",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isExternalReference",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#isExternalReference()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOffsetReference",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#isOffsetReference()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isShiftedReference",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#isShiftedReference()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEntryPointReference",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#isEntryPointReference()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isMemoryReference",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#isMemoryReference()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isRegisterReference",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#isRegisterReference()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isStackReference",
      "comment": "",
      "javadoc": "@see ghidra.program.model.symbol.Reference#isStackReference()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSource",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.SourceType",
        "type_short": "SourceType",
        "comment": ""
      },
      "throws": []
    }
  ]
}
