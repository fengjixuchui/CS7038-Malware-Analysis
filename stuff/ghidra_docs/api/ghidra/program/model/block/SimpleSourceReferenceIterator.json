{
  "name": "SimpleSourceReferenceIterator",
  "comment": "SimpleSourceReferenceIterator is a unidirectional iterator over the CodeBlockReferences\n for a CodeBlock.  It is not failfast, whenever hasNext()\n are called it will find if there is a next CodeBlockReference and acquire\n a handle if there is one. If new code units are added to the listing after\n the iterator is created it will find them as it scans ahead.",
  "javadoc": "SimpleSourceReferenceIterator is a unidirectional iterator over the \u003cCODE\u003eCodeBlockReference\u003c/CODE\u003es\n for a CodeBlock.  It is \u003cB\u003enot\u003c/B\u003e failfast, whenever \u003cCODE\u003ehasNext()\u003c/CODE\u003e\n are called it will find if there is a next \u003cCODE\u003eCodeBlockReference\u003c/CODE\u003e and acquire\n a handle if there is one. If new code units are added to the listing after\n the iterator is created it will find them as it scans ahead.",
  "static": false,
  "implements": [
    "ghidra.program.model.block.CodeBlockReferenceIterator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "blockRefQueue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.LinkedList\u003cghidra.program.model.block.CodeBlockReferenceImpl\u003e",
      "type_short": "LinkedList",
      "constant_value": null
    },
    {
      "name": "monitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an Iterator over Source blocks for a CodeBlock.",
      "javadoc": "Construct an Iterator over Source blocks for a CodeBlock.\n@param block block to get destination blocks for.  This should be a\n block obtained from SimpleBlockModel.\n@param followIndirectFlows indirect references will only be included if true\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "block to get destination blocks for.  This should be a\n block obtained from SimpleBlockModel."
        },
        {
          "name": "followIndirectFlows",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "indirect references will only be included if true"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "next",
      "comment": "",
      "javadoc": "@see ghidra.program.model.block.CodeBlockReferenceIterator#next()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockReference",
        "type_short": "CodeBlockReference",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "hasNext",
      "comment": "",
      "javadoc": "@see ghidra.program.model.block.CodeBlockReferenceIterator#hasNext()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getNumSources",
      "comment": "Get number of source references flowing from this subroutine (block).\n All Calls to this block, and all external FlowType block references\n to this block are counted.",
      "javadoc": "Get number of source references flowing from this subroutine (block).\n All Calls to this block, and all external FlowType block references\n to this block are counted.\n@param block code block to get the number of source references to.\n@param followIndirectFlows indirect references will only be included if true\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.\n@deprecated this method should be avoided since it repeats the work of the iterator",
      "static": true,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "code block to get the number of source references to."
        },
        {
          "name": "followIndirectFlows",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "indirect references will only be included if true"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getSources",
      "comment": "Count and queue all source references flowing from this block.\n All Calls to this block, and all external FlowType block references\n to this block are counted.",
      "javadoc": "Count and queue all source references flowing from this block.\n All Calls to this block, and all external FlowType block references\n to this block are counted.\n@param block code block to get the number of source references to.\n@param blockRefQueue the CodeBlockReference queue, may be null\n@param followIndirectFlows indirect references will only be included if true\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": true,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "code block to get the number of source references to."
        },
        {
          "name": "blockRefQueue",
          "type_long": "java.util.LinkedList\u003cghidra.program.model.block.CodeBlockReferenceImpl\u003e",
          "type_short": "LinkedList",
          "comment": "the CodeBlockReference queue, may be null"
        },
        {
          "name": "followIndirectFlows",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "indirect references will only be included if true"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "followIndirection",
      "comment": "Process a data reference for possible indirect sources.  Update block reference queue \n with indirect block references.",
      "javadoc": "Process a data reference for possible indirect sources.  Update block reference queue \n with indirect block references.\n@param blockRefQueue the CodeBlockReference queue, may be null\n@param destBlock reference/destination block\n@param destRef possible pointer reference to destBlock (is not verified)\n@param indirectFlowType reference type to assign to indirect references discovered\n@param monitor task monitor which allows user to cancel operation.\n@return number of references found, 0 if memRef does not correspond to a pointer.\n@throws CancelledException if the monitor cancels the operation.",
      "static": true,
      "params": [
        {
          "name": "blockRefQueue",
          "type_long": "java.util.LinkedList\u003cghidra.program.model.block.CodeBlockReferenceImpl\u003e",
          "type_short": "LinkedList",
          "comment": "the CodeBlockReference queue, may be null"
        },
        {
          "name": "destBlock",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "reference/destination block"
        },
        {
          "name": "destRef",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "possible pointer reference to destBlock (is not verified)"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of references found, 0 if memRef does not correspond to a pointer."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "queueDestReference",
      "comment": "Create a new block reference and add it to the queue.",
      "javadoc": "Create a new block reference and add it to the queue.\n@param blockRefQueue the CodeBlockReference queue, may be null\n@param destBlock reference/destination block\n@param toAddr reference destination address\n@param fromAddr reference source address\n@param flowType reference flow type\n@param monitor task monitor which allows user to cancel operation.",
      "static": true,
      "params": [
        {
          "name": "blockRefQueue",
          "type_long": "java.util.LinkedList\u003cghidra.program.model.block.CodeBlockReferenceImpl\u003e",
          "type_short": "LinkedList",
          "comment": "the CodeBlockReference queue, may be null"
        },
        {
          "name": "destBlock",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "reference/destination block"
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "reference destination address"
        },
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "reference source address"
        },
        {
          "name": "flowType",
          "type_long": "ghidra.program.model.symbol.FlowType",
          "type_short": "FlowType",
          "comment": "reference flow type"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
