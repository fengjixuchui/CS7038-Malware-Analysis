{
  "name": "SingleEntSubIterator",
  "comment": "SingleEntSubIterator is an implementation of\n CodeBlockIterator capable of iterating in\n the forward direction over subroutine code blocks.\n This iterator supports subroutine models which allow only one\n called/source entry point within a subroutine and may\n share code with other subroutines produced by the same model.\n All entry points must be accounted for within M-Model subroutines.\n\n NOTE: This iterator only supports OverlapCodeSubModel block models\n and extensions.\n\n NOTE: If the containing M-model subroutine has two entry points, say\n A and B, such that the code traversed from A is identical to the code traversed\n by B (due to a cycle), then this iterator will include it twice rather than\n skipping over the identical address set.  This is because the iterator works by\n iterating through M-model subroutines, and wherever M-model subroutines have\n n  1 multiple entry points, the iterator produces an O-model subroutine\n for every one of the entry points.",
  "javadoc": "\u003cCODE\u003eSingleEntSubIterator\u003c/CODE\u003e is an implementation of\n \u003cCODE\u003eCodeBlockIterator\u003c/CODE\u003e capable of iterating in\n the forward direction over subroutine code blocks.\n This iterator supports subroutine models which allow only one\n called/source entry point within a subroutine and may\n share code with other subroutines produced by the same model.\n All entry points must be accounted for within M-Model subroutines.\n\n NOTE: This iterator only supports OverlapCodeSubModel block models\n and extensions.\n\n NOTE: If the containing M-model subroutine has two entry points, say\n A and B, such that the code traversed from A is identical to the code traversed\n by B (due to a cycle), then this iterator will include it twice rather than\n skipping over the identical address set.  This is because the iterator works by\n iterating through M-model subroutines, and wherever M-model subroutines have\n n \u0026gt; 1 multiple entry points, the iterator produces an O-model subroutine\n for every one of the entry points.",
  "static": false,
  "implements": [
    "ghidra.program.model.block.CodeBlockIterator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "nextSub",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.block.CodeBlock",
      "type_short": "CodeBlock",
      "constant_value": null
    },
    {
      "name": "addrSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSetView",
      "type_short": "AddressSetView",
      "constant_value": null
    },
    {
      "name": "model",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.block.OverlapCodeSubModel",
      "type_short": "OverlapCodeSubModel",
      "constant_value": null
    },
    {
      "name": "subList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.LinkedList\u003cghidra.program.model.block.CodeBlock\u003e",
      "type_short": "LinkedList",
      "constant_value": null
    },
    {
      "name": "modelMIter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.block.CodeBlockIterator",
      "type_short": "CodeBlockIterator",
      "constant_value": null
    },
    {
      "name": "monitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new iterator that will iterate over the entire\n program starting from its current minimum address.",
      "javadoc": "Creates a new iterator that will iterate over the entire\n program starting from its current minimum address.\n@param model the BlockModel the iterator will use in its operations.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "ghidra.program.model.block.OverlapCodeSubModel",
          "type_short": "OverlapCodeSubModel",
          "comment": "the BlockModel the iterator will use in its operations."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new iterator that will iterate over the\n program within a given address range set. All blocks which \n overlap the address set will be returned.\n ",
      "javadoc": "Creates a new iterator that will iterate over the\n program within a given address range set. All blocks which \n overlap the address set will be returned.\n \u003cP\u003e\n@param model the BlockModel the iterator will use in its operations.\n@param set the address range set which the iterator is to be\n               restricted to.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "ghidra.program.model.block.OverlapCodeSubModel",
          "type_short": "OverlapCodeSubModel",
          "comment": "the BlockModel the iterator will use in its operations."
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address range set which the iterator is to be\n               restricted to."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "hasNext",
      "comment": "",
      "javadoc": "@see ghidra.program.model.block.CodeBlockIterator#hasNext()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "next",
      "comment": "",
      "javadoc": "@see ghidra.program.model.block.CodeBlockIterator#next()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlock",
        "type_short": "CodeBlock",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    }
  ]
}
