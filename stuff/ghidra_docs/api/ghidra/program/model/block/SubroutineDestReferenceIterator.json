{
  "name": "SubroutineDestReferenceIterator",
  "comment": "SubroutineDestReferenceIterator is a unidirectional iterator over \n the destination CodeBlockReferences for a CodeBlock.",
  "javadoc": "SubroutineDestReferenceIterator is a unidirectional iterator over \n the destination \u003cCODE\u003eCodeBlockReference\u003c/CODE\u003es for a CodeBlock.",
  "static": false,
  "implements": [
    "ghidra.program.model.block.CodeBlockReferenceIterator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "blockRefQueue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.LinkedList\u003cghidra.program.model.block.CodeBlockReference\u003e",
      "type_short": "LinkedList",
      "constant_value": null
    },
    {
      "name": "monitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an Iterator over Destination blocks for a CodeBlock.\n External references will be ignored.",
      "javadoc": "Construct an Iterator over Destination blocks for a CodeBlock.\n External references will be ignored.\n@param block block to get destination blocks for.  This should be a\n subroutine obtained from PartitionCodeSubModel.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "block to get destination blocks for.  This should be a\n subroutine obtained from PartitionCodeSubModel."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "next",
      "comment": "",
      "javadoc": "@see ghidra.program.model.block.CodeBlockReferenceIterator#next()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockReference",
        "type_short": "CodeBlockReference",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "hasNext",
      "comment": "",
      "javadoc": "@see ghidra.program.model.block.CodeBlockReferenceIterator#hasNext()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getNumDestinations",
      "comment": "Get number of destination references flowing out of this subroutine (block).\n All Calls from this block, and all external FlowType block references\n from this block are counted.",
      "javadoc": "Get number of destination references flowing out of this subroutine (block).\n All Calls from this block, and all external FlowType block references\n from this block are counted.\n@param block code block to get the number of destination references from.\n@param monitor task monitor",
      "static": true,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "code block to get the number of destination references from."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDestinations",
      "comment": "Count and queue all destination references flowing out of this subroutine (block).\n All Calls from this block, and all external FlowType block references\n from this block are counted.",
      "javadoc": "Count and queue all destination references flowing out of this subroutine (block).\n All Calls from this block, and all external FlowType block references\n from this block are counted.\n@param block code block to get the number of destination references from.\n@param blockRefQueue the CodeBlockReference queue, may be null\n@param includeExternals external references will be included if true\n@param monitor task monitor",
      "static": true,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "code block to get the number of destination references from."
        },
        {
          "name": "blockRefQueue",
          "type_long": "java.util.List\u003cghidra.program.model.block.CodeBlockReference\u003e",
          "type_short": "List",
          "comment": "the CodeBlockReference queue, may be null"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "queueDestReferences",
      "comment": "Create destination block reference(s) and add to the blockRefQueue if not null.\n A valid CodeBlock must exist at the destAddr for a reference to be added and/or counted.",
      "javadoc": "Create destination block reference(s) and add to the blockRefQueue if not null.\n A valid CodeBlock must exist at the destAddr for a reference to be added and/or counted.\n@param blockRefQueue the CodeBlockReference queue, may be null\n@param srcBlock the source block associated with the CodeBlockReference(s)\n@param srcAddr source address\n@param destAddr destination address\n@param flowType the flow type to be associated with reference.\n@return the number of destination references",
      "static": true,
      "params": [
        {
          "name": "blockRefQueue",
          "type_long": "java.util.List\u003cghidra.program.model.block.CodeBlockReference\u003e",
          "type_short": "List",
          "comment": "the CodeBlockReference queue, may be null"
        },
        {
          "name": "srcBlock",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "the source block associated with the CodeBlockReference(s)"
        },
        {
          "name": "srcAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "source address"
        },
        {
          "name": "destAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "destination address"
        },
        {
          "name": "flowType",
          "type_long": "ghidra.program.model.symbol.FlowType",
          "type_short": "FlowType",
          "comment": "the flow type to be associated with reference."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": "the number of destination references"
      },
      "throws": []
    }
  ]
}
