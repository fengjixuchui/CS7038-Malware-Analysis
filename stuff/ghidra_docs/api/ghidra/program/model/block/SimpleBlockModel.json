{
  "name": "SimpleBlockModel",
  "comment": "This BlockModel implements the simple block model.\n\n Each Codeblock is made up of contiguous instructions in address order.\n\n  Blocks satisfy the following:\n   Any instruction with a label starts a block.\n   Each instruction that could cause program control flow to change is the\n       last instruction of a Codeblock.\n   All other instructions are \"NOP\" fallthroughs, meaning\n      after execution the program counter will be at\n      the instruction immediately following.\n   Any instruction that is unreachable and has no label is also considered the start\n       of a block.\n \n So a CodeBlock in this model consists of contiguous code that has zero or\n more nonflow fallthrough instructions followed by a single flow instruction.\n Each block may or may not have a label at the first instruction, but may not\n have a label at any other instruction contained in the block.\n\n This model does not implement the pure simple block model\n because unreachable code is still considered a block.\n \n This model handles delay slot instructions with the following \n assumptions:\n A delayed instruction is always corresponds to a change in\n     flow and terminates a block.  The delay slot instructions\n     following this instruction are always included with the\n     block.  Therefor, delay slot instructions will always fall\n     at the bottom of a simple block.\n The delay slot depth of the delayed instruction will always\n     correspond to the number of delay slot instructions immediately\n     following the instruction. The model may not behave properly if\n     the disassembled code violates this assumption.\n ",
  "javadoc": "This BlockModel implements the simple block model.\n\n Each Codeblock is made up of contiguous instructions in address order.\n\n  Blocks satisfy the following:\u003col\u003e\n   \u003cli\u003eAny instruction with a label starts a block.\n   \u003cli\u003eEach instruction that could cause program control flow to change is the\n       last instruction of a Codeblock.\n   \u003cli\u003eAll other instructions are \"NOP\" fallthroughs, meaning\n      after execution the program counter will be at\n      the instruction immediately following.\n   \u003cli\u003eAny instruction that is unreachable and has no label is also considered the start\n       of a block.\n \u003c/ol\u003e\n So a CodeBlock in this model consists of contiguous code that has zero or\n more nonflow fallthrough instructions followed by a single flow instruction.\n Each block may or may not have a label at the first instruction, but may not\n have a label at any other instruction contained in the block.\n\n This model does not implement the pure simple block model\n because unreachable code is still considered a block.\n \n This model handles delay slot instructions with the following \n assumptions:\u003col\u003e\n \u003cli\u003eA delayed instruction is always corresponds to a change in\n     flow and terminates a block.  The delay slot instructions\n     following this instruction are always included with the\n     block.  Therefor, delay slot instructions will always fall\n     at the bottom of a simple block.\n \u003cli\u003eThe delay slot depth of the delayed instruction will always\n     correspond to the number of delay slot instructions immediately\n     following the instruction. The model may not behave properly if\n     the disassembled code violates this assumption.\n \u003c/ol\u003e\n@see ghidra.program.model.block.CodeBlockModel",
  "static": false,
  "implements": [
    "ghidra.program.model.block.CodeBlockModel"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Simple Block\""
    },
    {
      "name": "emptyArray",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.block.CodeBlock[]",
      "type_short": "ghidra.program.model.block.CodeBlock[]",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "listing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Listing",
      "type_short": "Listing",
      "constant_value": null
    },
    {
      "name": "referenceMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.symbol.ReferenceManager",
      "type_short": "ReferenceManager",
      "constant_value": null
    },
    {
      "name": "foundBlockMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressObjectMap",
      "type_short": "AddressObjectMap",
      "constant_value": null
    },
    {
      "name": "includeExternals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "followIndirectFlows",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": "true"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a SimpleBlockModel on a program.\n Externals will be excluded.",
      "javadoc": "Construct a SimpleBlockModel on a program.\n Externals will be excluded.\n@param program program to create blocks from.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program to create blocks from."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a SimpleBlockModel on a program.",
      "javadoc": "Construct a SimpleBlockModel on a program.\n@param program program to create blocks from.\n@param includeExternals externals will be included if true",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program to create blocks from."
        },
        {
          "name": "includeExternals",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "externals will be included if true"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCodeBlockAt",
      "comment": "Get the code/data block starting at this address.",
      "javadoc": "Get the code/data block starting at this address.\n@param addr\n@param monitor task monitor which allows user to cancel operation.\n@return null if there is no codeblock starting at the address\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlock",
        "type_short": "CodeBlock",
        "comment": "null if there is no codeblock starting at the address"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getCodeBlockAt",
      "comment": "Get the basic code block starting at the specified instruction.",
      "javadoc": "Get the basic code block starting at the specified instruction.\n@param instr first instruction of basic block\n@param monitor task monitor which allows user to cancel operation.\n@return null if there is no codeblock starting at the specified instruction\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "first instruction of basic block"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlock",
        "type_short": "CodeBlock",
        "comment": "null if there is no codeblock starting at the specified instruction"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "hasEndOfBlockFlow",
      "comment": "Examine an instruction for out-bound flows which qualify it\n as an end-of-block.",
      "javadoc": "Examine an instruction for out-bound flows which qualify it\n as an end-of-block.\n@param instr\n@return true if end-of-block flow exists from specified instruction.",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if end-of-block flow exists from specified instruction."
      },
      "throws": []
    },
    {
      "name": "createSimpleDataBlock",
      "comment": "Create a new block over an address range with a single entry-point.",
      "javadoc": "Create a new block over an address range with a single entry-point.\n@param start the first address which is also the only entry-point.\n@param end the last address.\n@return CodeBlock",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address which is also the only entry-point."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last address."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlock",
        "type_short": "CodeBlock",
        "comment": "CodeBlock"
      },
      "throws": []
    },
    {
      "name": "createSimpleBlock",
      "comment": "Create a new block over an address range with one or more entry-points.",
      "javadoc": "Create a new block over an address range with one or more entry-points.\n@param entryPts an array of entry-point addresses for the block.\n@param begin the first address in the range.\n@param end last address in the range.\n@return CodeBlock",
      "static": false,
      "params": [
        {
          "name": "entryPts",
          "type_long": "ghidra.program.model.address.Address[]",
          "type_short": "ghidra.program.model.address.Address[]",
          "comment": "an array of entry-point addresses for the block."
        },
        {
          "name": "begin",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address in the range."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "last address in the range."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlock",
        "type_short": "CodeBlock",
        "comment": "CodeBlock"
      },
      "throws": []
    },
    {
      "name": "createSimpleExtBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "extAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlock",
        "type_short": "CodeBlock",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCodeBlocksContaining",
      "comment": "Get all the Code Blocks containing the address.",
      "javadoc": "Get all the Code Blocks containing the address.\n@param addr Address to find a containing block.\n@param monitor task monitor which allows user to cancel operation.\n@return A SimpleBlock if any block contains the address\n        empty array otherwise.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address to find a containing block."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlock[]",
        "type_short": "ghidra.program.model.block.CodeBlock[]",
        "comment": "A SimpleBlock if any block contains the address\n        empty array otherwise."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getFirstCodeBlockContaining",
      "comment": "Get the First Code Block that contains the address.",
      "javadoc": "Get the First Code Block that contains the address.\n@param addr Address to find a containing block.\n@param monitor task monitor which allows user to cancel operation.\n@return A SimpleBlock if any block contains the address.\n        null otherwise.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address to find a containing block."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlock",
        "type_short": "CodeBlock",
        "comment": "A SimpleBlock if any block contains the address.\n        null otherwise."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getCodeBlocks",
      "comment": "Get an iterator over the code blocks in the entire program.",
      "javadoc": "Get an iterator over the code blocks in the entire program.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockIterator",
        "type_short": "CodeBlockIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getCodeBlocksContaining",
      "comment": "Get an iterator over CodeBlocks which overlap the specified address set.",
      "javadoc": "Get an iterator over CodeBlocks which overlap the specified address set.\n@param addrSet an address set within program\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "an address set within program"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockIterator",
        "type_short": "CodeBlockIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getProgram",
      "comment": "",
      "javadoc": "@see ghidra.program.model.block.CodeBlockModel#getProgram()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getListing",
      "comment": "Returns the program listing associated with this model.",
      "javadoc": "Returns the program listing associated with this model.\n@return the program listing associated with this model",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Listing",
        "type_short": "Listing",
        "comment": "the program listing associated with this model"
      },
      "throws": []
    },
    {
      "name": "isBlockStart",
      "comment": "Check if the instruction at the address is\n the start of a basic block.",
      "javadoc": "Check if the instruction at the address is\n the start of a basic block.\n@param addr Address to check\n@return true - if the address starts a basic block\n         false - otherwise",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true - if the address starts a basic block\n         false - otherwise"
      },
      "throws": []
    },
    {
      "name": "isBlockStart",
      "comment": "Check if the instruction starts a Simple block.",
      "javadoc": "Check if the instruction starts a Simple block.\n@param instruction instruction to test if it starts a block\n@return true if this instruction is the start of a simple block.",
      "static": false,
      "params": [
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction to test if it starts a block"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this instruction is the start of a simple block."
      },
      "throws": []
    },
    {
      "name": "isBlockStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "fallFrom",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "@see ghidra.program.model.block.CodeBlockModel#getName(ghidra.program.model.block.CodeBlock)",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFlowType",
      "comment": "Return in general how things flow out of this node.\n If there are any abnormal ways to flow out of this node,\n (ie: jump, call, etc...) then the flow type of the node\n takes on that type.\n\n If there are multiple unique ways out of the node, then we\n should return FlowType.UNKNOWN (or FlowType.MULTIFLOW ?).\n\n Fallthrough is returned if that is the only way out.\n\n If this block really has no valid instructions, it can\u0027t flow,\n so FlowType.INVALID is returned.",
      "javadoc": "Return in general how things flow out of this node.\n If there are any abnormal ways to flow out of this node,\n (ie: jump, call, etc...) then the flow type of the node\n takes on that type.\n\n If there are multiple unique ways out of the node, then we\n should return FlowType.UNKNOWN (or FlowType.MULTIFLOW ?).\n\n Fallthrough is returned if that is the only way out.\n\n If this block really has no valid instructions, it can\u0027t flow,\n so FlowType.INVALID is returned.\n@return flow type of this node",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.FlowType",
        "type_short": "FlowType",
        "comment": "flow type of this node"
      },
      "throws": []
    },
    {
      "name": "getSources",
      "comment": "Get an iterator over source blocks flowing into this block.",
      "javadoc": "Get an iterator over source blocks flowing into this block.\n@param block code block to get the source iterator for.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "code block to get the source iterator for."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockReferenceIterator",
        "type_short": "CodeBlockReferenceIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getNumSources",
      "comment": "Get number of source blocks flowing into this block",
      "javadoc": "Get number of source blocks flowing into this block\n@param block code block to get the source iterator for.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.\n@deprecated this method should be avoided since it repeats the work of the getSources iterator",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "code block to get the source iterator for."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getDestinations",
      "comment": "Get an iterator over destination blocks flowing from this block.",
      "javadoc": "Get an iterator over destination blocks flowing from this block.\n@param block code block to get the destination block iterator for.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "code block to get the destination block iterator for."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockReferenceIterator",
        "type_short": "CodeBlockReferenceIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getNumDestinations",
      "comment": "Get number of destination blocks flowing out of this block",
      "javadoc": "Get number of destination blocks flowing out of this block\n@param block code block to get the destination block iterator for.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.\n@deprecated this method should be avoided since it repeats the work of the getDestinations iterator",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "code block to get the destination block iterator for."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getBasicBlockModel",
      "comment": "",
      "javadoc": "@see ghidra.program.model.block.CodeBlockModel#getBasicBlockModel()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockModel",
        "type_short": "CodeBlockModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "@see ghidra.program.model.block.CodeBlockModel#getName()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "allowsBlockOverlap",
      "comment": "",
      "javadoc": "@see ghidra.program.model.block.CodeBlockModel#allowsBlockOverlap()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "externalsIncluded",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
