{
  "name": "BasicBlockModel",
  "comment": "This BlockModel implements the Basic block model.\n\n Each Codeblock is made up of contiguous instructions in address order.\n\n  Blocks satisfy the following:\n   Any instruction with a label starts a block.\n   Each instruction that could cause program control flow to change local to \n       the containing function (i.e., excludes calls) is the last instruction of a Codeblock.\n   All other instructions are \"NOP\" fallthroughs, meaning\n      after execution the program counter will be at\n      the instruction immediately following.\n   Any instruction that is unreachable and has no label is also considered the start\n       of a block.\n \n So a CodeBlock in this model consists of contiguous code that has zero or\n more fallthrough or call instructions followed by a single flow instruction.\n Each block may or may not have a label at the first instruction, but may not\n have a label at any other instruction contained in the block.\n \n This model handles delay slot instructions with the following \n assumptions:\n The delay slot depth of the delayed instruction will always\n     correspond to the number of delay slot instructions immediately\n     following the instruction. The model may not behave properly if\n     the disassembled code violates this assumption.\n ",
  "javadoc": "This BlockModel implements the Basic block model.\n\n Each Codeblock is made up of contiguous instructions in address order.\n\n  Blocks satisfy the following:\u003col\u003e\n   \u003cli\u003eAny instruction with a label starts a block.\n   \u003cli\u003eEach instruction that could cause program control flow to change local to \n       the containing function (i.e., excludes calls) is the last instruction of a Codeblock.\n   \u003cli\u003eAll other instructions are \"NOP\" fallthroughs, meaning\n      after execution the program counter will be at\n      the instruction immediately following.\n   \u003cli\u003eAny instruction that is unreachable and has no label is also considered the start\n       of a block.\n \u003c/ol\u003e\n So a CodeBlock in this model consists of contiguous code that has zero or\n more fallthrough or call instructions followed by a single flow instruction.\n Each block may or may not have a label at the first instruction, but may not\n have a label at any other instruction contained in the block.\n \n This model handles delay slot instructions with the following \n assumptions:\u003col\u003e\n \u003cli\u003eThe delay slot depth of the delayed instruction will always\n     correspond to the number of delay slot instructions immediately\n     following the instruction. The model may not behave properly if\n     the disassembled code violates this assumption.\n \u003c/ol\u003e\n@see ghidra.program.model.block.CodeBlockModel",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.block.SimpleBlockModel",
  "fields": [
    {
      "name": "NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Basic Block\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "includeExternals",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasEndOfBlockFlow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
