{
  "name": "CodeBlock",
  "comment": "CodeBlock represents some group of Instructions/Data.  Each block\n has some set of source blocks that flow into it and some\n set of destination blocks that flow out of it.  A BlockModel\n is used to produce CodeBlocks.  Each model produces blocks\n based on its interpretation of Instruction/Data grouping and flow\n between those groups.",
  "javadoc": "CodeBlock represents some group of Instructions/Data.  Each block\n has some set of source blocks that flow into it and some\n set of destination blocks that flow out of it.  A BlockModel\n is used to produce CodeBlocks.  Each model produces blocks\n based on its interpretation of Instruction/Data grouping and flow\n between those groups.",
  "static": false,
  "implements": [
    "ghidra.program.model.address.AddressSetView"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getFirstStartAddress",
      "comment": "Return the first start address of the CodeBlock.\n Depending on the model used to generate the CodeBlock,\n there may be multiple entry points to the block.  This will\n return the first start address for the block.  It should\n always return the same address for a given block if there\n is more than one entry point.",
      "javadoc": "Return the first start address of the CodeBlock.\n Depending on the model used to generate the CodeBlock,\n there may be multiple entry points to the block.  This will\n return the first start address for the block.  It should\n always return the same address for a given block if there\n is more than one entry point.\n@return the first start address of the block.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the first start address of the block."
      },
      "throws": []
    },
    {
      "name": "getStartAddresses",
      "comment": "Get all the entry points to this block.  Depending on the\n model, there may be more than one entry point.\n Entry points will be returned in natural sorted order.",
      "javadoc": "Get all the entry points to this block.  Depending on the\n model, there may be more than one entry point.\n Entry points will be returned in natural sorted order.\n@return an array of entry points to this block.\n a zero length array if there are no entry points.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address[]",
        "type_short": "ghidra.program.model.address.Address[]",
        "comment": "an array of entry points to this block.\n a zero length array if there are no entry points."
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Return the name of the block.",
      "javadoc": "Return the name of the block.\n@return name of block,\n  normally the symbol at the starting address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "name of block,\n  normally the symbol at the starting address"
      },
      "throws": []
    },
    {
      "name": "getFlowType",
      "comment": "Return, in theory, how things flow out of this node.\n If there are any abnormal ways to flow out of this node,\n (ie: jump, call, etc...) then the flow type of the node\n takes on that type.\n If there are multiple unique ways out of the node, then we\n should return FlowType.UNKNOWN.\n Fallthrough is returned if that is the only way out.",
      "javadoc": "Return, in theory, how things flow out of this node.\n If there are any abnormal ways to flow out of this node,\n (ie: jump, call, etc...) then the flow type of the node\n takes on that type.\n If there are multiple unique ways out of the node, then we\n should return FlowType.UNKNOWN.\n Fallthrough is returned if that is the only way out.\n@return flow type of this node",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.FlowType",
        "type_short": "FlowType",
        "comment": "flow type of this node"
      },
      "throws": []
    },
    {
      "name": "getNumSources",
      "comment": "Get the number of CodeBlocks that flow into this CodeBlock.\n Note that this is almost as much work as getting the actual source references.",
      "javadoc": "Get the number of CodeBlocks that flow into this CodeBlock.\n Note that this is almost as much work as getting the actual source references.\n@param monitor task monitor which allows user to cancel operation.\n@return number of source CodeBlocks.\n@throws CancelledException if the monitor cancels the operation.\n@see #getSources(ghidra.util.task.TaskMonitor)",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of source CodeBlocks."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getSources",
      "comment": "Get an Iterator over the CodeBlocks that flow into this CodeBlock.",
      "javadoc": "Get an Iterator over the CodeBlocks that flow into this CodeBlock.\n@param monitor task monitor which allows user to cancel operation.\n@return An iterator over CodeBlocks referencing this Block.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockReferenceIterator",
        "type_short": "CodeBlockReferenceIterator",
        "comment": "An iterator over CodeBlocks referencing this Block."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getNumDestinations",
      "comment": "Get the number of CodeBlocks this block flows to.\n Note that this is almost as much work as getting the actual destination references.",
      "javadoc": "Get the number of CodeBlocks this block flows to.\n Note that this is almost as much work as getting the actual destination references.\n@param monitor task monitor which allows user to cancel operation.\n@return number of destination CodeBlocks.\n@throws CancelledException if the monitor cancels the operation.\n@see #getDestinations(ghidra.util.task.TaskMonitor)",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of destination CodeBlocks."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getDestinations",
      "comment": "Get an Iterator over the CodeBlocks that are flowed to from this\n CodeBlock.",
      "javadoc": "Get an Iterator over the CodeBlocks that are flowed to from this\n CodeBlock.\n@param monitor task monitor which allows user to cancel operation.\n@return An iterator over CodeBlocks referred to by this Block.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockReferenceIterator",
        "type_short": "CodeBlockReferenceIterator",
        "comment": "An iterator over CodeBlocks referred to by this Block."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getModel",
      "comment": "Get the model instance which was used to generate this block.",
      "javadoc": "Get the model instance which was used to generate this block.\n@return the model used to build this CodeBlock",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockModel",
        "type_short": "CodeBlockModel",
        "comment": "the model used to build this CodeBlock"
      },
      "throws": []
    }
  ]
}
