{
  "name": "CodeBlockModel",
  "comment": "An implementation of a CodeBlockModel will produce CodeBlocks\n based on some algorithm.",
  "javadoc": "An implementation of a CodeBlockModel will produce CodeBlocks\n based on some algorithm.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "emptyBlockArray",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.block.CodeBlock[]",
      "type_short": "ghidra.program.model.block.CodeBlock[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getName",
      "comment": "Returns the model name.",
      "javadoc": "Returns the model name.\n@return the model name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the model name"
      },
      "throws": []
    },
    {
      "name": "getCodeBlockAt",
      "comment": "Get the code block with a starting address (i.e., entry-point) of addr.",
      "javadoc": "Get the code block with a starting address (i.e., entry-point) of addr.\n@param addr starting address of a codeblock.\n@param monitor task monitor which allows user to cancel operation.\n@return null if there is no codeblock starting at the address.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "starting address of a codeblock."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlock",
        "type_short": "CodeBlock",
        "comment": "null if there is no codeblock starting at the address."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getFirstCodeBlockContaining",
      "comment": "Get the first code block that contains the given address.",
      "javadoc": "Get the first code block that contains the given address.\n@param addr address to find a containing block.\n@param monitor task monitor which allows user to cancel operation.\n@return a block that contains the address, or null otherwise.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address to find a containing block."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlock",
        "type_short": "CodeBlock",
        "comment": "a block that contains the address, or null otherwise."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getCodeBlocksContaining",
      "comment": "Get all the code blocks containing the address.",
      "javadoc": "Get all the code blocks containing the address.\n@param addr address to find a containing block.\n@param monitor task monitor which allows user to cancel operation.\n@return an array of blocks that contains the address, null otherwise.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address to find a containing block."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlock[]",
        "type_short": "ghidra.program.model.block.CodeBlock[]",
        "comment": "an array of blocks that contains the address, null otherwise."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getCodeBlocks",
      "comment": "Get an iterator over the code blocks in the entire program.",
      "javadoc": "Get an iterator over the code blocks in the entire program.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockIterator",
        "type_short": "CodeBlockIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getCodeBlocksContaining",
      "comment": "Get an iterator over code blocks which overlap the specified address set.",
      "javadoc": "Get an iterator over code blocks which overlap the specified address set.\n@param addrSet an address set within program\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "an address set within program"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockIterator",
        "type_short": "CodeBlockIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getSources",
      "comment": "Get an iterator over the source flows into the block.",
      "javadoc": "Get an iterator over the source flows into the block.\n@param block the block to get the destination flows for.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "the block to get the destination flows for."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockReferenceIterator",
        "type_short": "CodeBlockReferenceIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getNumSources",
      "comment": "Get the number of source flows into the block.",
      "javadoc": "Get the number of source flows into the block.\n@param block the code blocks to get the destination flows for.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "the code blocks to get the destination flows for."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getDestinations",
      "comment": "Get an iterator over the destination flows out of the block.",
      "javadoc": "Get an iterator over the destination flows out of the block.\n@param block the block to get the destination flows for.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "the block to get the destination flows for."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockReferenceIterator",
        "type_short": "CodeBlockReferenceIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getNumDestinations",
      "comment": "Get the number of destination flows out of the block.",
      "javadoc": "Get the number of destination flows out of the block.\n@param block the code blocks to get the destination flows for.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": "the code blocks to get the destination flows for."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getBasicBlockModel",
      "comment": "Get the basic block model used by this model.",
      "javadoc": "Get the basic block model used by this model.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlockModel",
        "type_short": "CodeBlockModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "externalsIncluded",
      "comment": "Returns true if externals are handled by the model,\n false if externals are ignored.  When handled, externals\n are represented by an ExtCodeBlockImpl.",
      "javadoc": "Returns true if externals are handled by the model,\n false if externals are ignored.  When handled, externals\n are represented by an ExtCodeBlockImpl.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFlowType",
      "comment": "Return in general how things flow out of this node.\n If there are any abnormal ways to flow out of this node,\n (ie: jump, call, etc...) then the flow type of the node\n takes on that type.\n If there are multiple unique ways out of the node, then we\n should return FlowType.UNKNOWN (or FlowType.MULTIFLOW ?).\n Fallthrough is returned if that is the only way out.",
      "javadoc": "Return in general how things flow out of this node.\n If there are any abnormal ways to flow out of this node,\n (ie: jump, call, etc...) then the flow type of the node\n takes on that type.\n If there are multiple unique ways out of the node, then we\n should return FlowType.UNKNOWN (or FlowType.MULTIFLOW ?).\n Fallthrough is returned if that is the only way out.\n@return flow type of this node",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.FlowType",
        "type_short": "FlowType",
        "comment": "flow type of this node"
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Get a name for this block.",
      "javadoc": "Get a name for this block.\n@return usually the label at the start address of the block\n    however the model can choose any name it wants for its blocks.",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "usually the label at the start address of the block\n    however the model can choose any name it wants for its blocks."
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "Returns the program object associated with this CodeBlockModel instance.",
      "javadoc": "Returns the program object associated with this CodeBlockModel instance.\n@return program associated with this CodeBlockModel.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "program associated with this CodeBlockModel."
      },
      "throws": []
    },
    {
      "name": "allowsBlockOverlap",
      "comment": "Return true if this model allows overlapping of address sets for\n the blocks it returns.",
      "javadoc": "Return true if this model allows overlapping of address sets for\n the blocks it returns.\n@return true if this model allows overlapping of address sets for\n         the blocks it returns.\n         This implies that getBlocksContaining() can return more than one block.\n         false implies that getBlocksContaining() will return at most one block.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this model allows overlapping of address sets for\n         the blocks it returns.\n         This implies that getBlocksContaining() can return more than one block.\n         false implies that getBlocksContaining() will return at most one block."
      },
      "throws": []
    }
  ]
}
