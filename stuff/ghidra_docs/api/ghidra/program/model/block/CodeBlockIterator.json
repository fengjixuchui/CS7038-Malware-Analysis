{
  "name": "CodeBlockIterator",
  "comment": "An iterator interface over CodeBlocks.\n \n Note: this iterator is also Iterable.  The #hasNext() and #next()\n methods of this interface throw a CancelledException if the monitor is cancelled.  The\n iterator returned from #iterator() does not throw a cancelled exception.  If \n you need to know the cancelled state of this iterator, then you must check the cancelled state\n of the monitor passed into this iterator via the CodeBlockModel.  See \n TaskMonitor#isCancelled().",
  "javadoc": "An iterator interface over CodeBlocks.\n \n \u003cP\u003eNote: this iterator is also {@link Iterable}.  The {@link #hasNext()} and {@link #next()}\n methods of this interface throw a {@link CancelledException} if the monitor is cancelled.  The\n iterator returned from {@link #iterator()} does \u003cb\u003enot\u003c/b\u003e throw a cancelled exception.  If \n you need to know the cancelled state of this iterator, then you must check the cancelled state\n of the monitor passed into this iterator via the {@link CodeBlockModel}.  See \n {@link TaskMonitor#isCancelled()}.\n@see ghidra.program.model.block.CodeBlock\n@see CollectionUtils#asIterable",
  "static": false,
  "implements": [
    "java.lang.Iterable"
  ],
  "fields": [],
  "methods": [
    {
      "name": "hasNext",
      "comment": "Return true if next() will return a CodeBlock.",
      "javadoc": "Return true if next() will return a CodeBlock.\n@return true if next() will return a CodeBlock.\n@throws CancelledException thrown if the operation is cancelled.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if next() will return a CodeBlock."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "thrown if the operation is cancelled."
        }
      ]
    },
    {
      "name": "next",
      "comment": "Return the next CodeBlock.",
      "javadoc": "Return the next CodeBlock.\n@return the next CodeBlock.\n@throws CancelledException thrown if the operation is cancelled.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlock",
        "type_short": "CodeBlock",
        "comment": "the next CodeBlock."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "thrown if the operation is cancelled."
        }
      ]
    },
    {
      "name": "iterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.block.CodeBlock\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    }
  ]
}
