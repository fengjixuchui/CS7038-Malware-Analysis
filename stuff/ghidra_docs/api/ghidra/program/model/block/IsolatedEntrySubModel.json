{
  "name": "IsolatedEntrySubModel",
  "comment": "IsolatedEntryCodeSubModel (S-model) defines subroutines with a\n unique entry point, which may share code with other subroutines. Each entry-\n point may either be a source or called entry-point and is identified using\n the MultEntSubModel. This model extends the OverlapCodeSubModel, redefining\n the set of addresses contained within each subroutine. Unlike the\n OverlapCodeSubModel, the address set of a IsolatedEntryCodeSubModel\n subroutine is permitted to span entry-points of other subroutines based upon\n the possible flows from its entry- point.",
  "javadoc": "\u003cCODE\u003eIsolatedEntryCodeSubModel\u003c/CODE\u003e (S-model) defines subroutines with a\n unique entry point, which may share code with other subroutines. Each entry-\n point may either be a source or called entry-point and is identified using\n the MultEntSubModel. This model extends the OverlapCodeSubModel, redefining\n the set of addresses contained within each subroutine. Unlike the\n OverlapCodeSubModel, the address set of a IsolatedEntryCodeSubModel\n subroutine is permitted to span entry-points of other subroutines based upon\n the possible flows from its entry- point.\n@see ghidra.program.model.block.CodeBlockModel\n@see ghidra.program.model.block.OverlapCodeSubModel\n@see ghidra.program.model.block.MultEntSubModel",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.block.OverlapCodeSubModel",
  "fields": [
    {
      "name": "ISOLATED_MODEL_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Isolated Entry\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a IsolatedEntrySubModel subroutine on a program.",
      "javadoc": "Construct a \u003cCODE\u003eIsolatedEntrySubModel\u003c/CODE\u003e subroutine on a program.\n@param program program to create blocks from.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program to create blocks from."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a IsolatedEntrySubModel subroutine on a program.",
      "javadoc": "Construct a \u003cCODE\u003eIsolatedEntrySubModel\u003c/CODE\u003e subroutine on a program.\n@param program program to create blocks from.\n@param includeExternals externals are included if true",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program to create blocks from."
        },
        {
          "name": "includeExternals",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "externals are included if true"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSubroutine",
      "comment": "Get the subroutine code block which starts at the specified address which\n is an entry point of a Model-M subroutine.\n \n Classes which extend this class should implement this method.",
      "javadoc": "Get the subroutine code block which starts at the specified address which\n is an entry point of a Model-M subroutine.\n \n Classes which extend this class should implement this method.\n@param mStartAddr \u003d a Model-M subroutine entry point.\n@param monitor task monitor which allows user to cancel operation.\n@return a subroutine code block\n@throws CancelledException if the monitor cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "mStartAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "\u003d a Model-M subroutine entry point."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor which allows user to cancel operation."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.block.CodeBlock",
        "type_short": "CodeBlock",
        "comment": "a subroutine code block"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancels the operation."
        }
      ]
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "@see ghidra.program.model.block.CodeBlockModel#getName()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
