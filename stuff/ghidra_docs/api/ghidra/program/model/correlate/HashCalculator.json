{
  "name": "HashCalculator",
  "comment": "Interface for hashing across sequences of Instructions in different ways",
  "javadoc": "Interface for hashing across sequences of Instructions in different ways",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "calcHash",
      "comment": "Calculate a (partial) hash across a single instruction",
      "javadoc": "Calculate a (partial) hash across a single instruction\n@param startHash is initial hash value\n@param inst is the instruction to fold into the hash\n@return the final hash value\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "startHash",
          "type_long": "int",
          "type_short": "int",
          "comment": "is initial hash value"
        },
        {
          "name": "inst",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "is the instruction to fold into the hash"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the final hash value"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    }
  ]
}
