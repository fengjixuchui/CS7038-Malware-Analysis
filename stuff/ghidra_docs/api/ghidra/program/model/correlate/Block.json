{
  "name": "Block",
  "comment": "This class holds basic-block information for matching algorithms. It is used as a node to traverse the\n control-flow graph. It serves as a container for hashing information associated with Instructions in the\n block.  It holds disambiguating hashes (calculated primarily from basic-block parent/child relationships)\n to help separate identical or near identical sequences of Instructions within one function.",
  "javadoc": "This class holds basic-block information for matching algorithms. It is used as a node to traverse the\n control-flow graph. It serves as a container for hashing information associated with Instructions in the\n block.  It holds disambiguating hashes (calculated primarily from basic-block parent/child relationships)\n to help separate identical or near identical sequences of Instructions within one function.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "isMatched",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isVisited",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "origBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.block.CodeBlock",
      "type_short": "CodeBlock",
      "constant_value": null
    },
    {
      "name": "matchHash",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "instList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.correlate.InstructHash[]",
      "type_short": "ghidra.program.model.correlate.InstructHash[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "codeBlock",
          "type_long": "ghidra.program.model.block.CodeBlock",
          "type_short": "CodeBlock",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearSort",
      "comment": "Clear out structures associated with main sort",
      "javadoc": "Clear out structures associated with main sort",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMatched",
      "comment": "Set up block match deconfliction value matchHash. This is fed into the n-gram hashes for Instructions\n contained by this block to uniquely associate the n-grams with this block (and the matching block on\n the other side)",
      "javadoc": "Set up block match deconfliction value matchHash. This is fed into the n-gram hashes for Instructions\n contained by this block to uniquely associate the n-grams with this block (and the matching block on\n the other side)\n@param index is the 1-up index used to uniquely label this block",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the 1-up index used to uniquely label this block"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMatchHash",
      "comment": "",
      "javadoc": "@return the main deconfliction hash feed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the main deconfliction hash feed"
      },
      "throws": []
    },
    {
      "name": "allUnknown",
      "comment": "If the indicated n-gram, within this block, consists of unmatched instructions",
      "javadoc": "If the indicated n-gram, within this block, consists of unmatched instructions\n@param startindex is the index of the first Instruction in the n-gram\n@param length is the number of instructions in the n-gram\n@return true if all Instructions in the n-gram are not matched, false otherwise.",
      "static": false,
      "params": [
        {
          "name": "startindex",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the index of the first Instruction in the n-gram"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the number of instructions in the n-gram"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if all Instructions in the n-gram are not matched, false otherwise."
      },
      "throws": []
    },
    {
      "name": "hashGram",
      "comment": "Calculate an n-gram hash, given a particular hash function",
      "javadoc": "Calculate an n-gram hash, given a particular hash function\n@param gramSize is the size of the n-gram\n@param instHash is the first Instruction in the n-gram\n@param hashCalc is the hash function\n@return the final 32-bit hash\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "gramSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the size of the n-gram"
        },
        {
          "name": "instHash",
          "type_long": "ghidra.program.model.correlate.InstructHash",
          "type_short": "InstructHash",
          "comment": "is the first Instruction in the n-gram"
        },
        {
          "name": "hashCalc",
          "type_long": "ghidra.program.model.correlate.HashCalculator",
          "type_short": "HashCalculator",
          "comment": "is the hash function"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the final 32-bit hash"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "calcHashes",
      "comment": "Calculate n-gram hashes used for matching (for Instructions in this basic-block).  The exact hashes generated\n can be changed to get different looks at the data over multiple matching passes.",
      "javadoc": "Calculate n-gram hashes used for matching (for Instructions in this basic-block).  The exact hashes generated\n can be changed to get different looks at the data over multiple matching passes.\n@param minLength is the minimum length of an n-gram to calculate\n@param maxLength is the maximum length of an n-gram\n@param wholeBlock , true indicates a hash of the whole block should be calculated even if its size is below minLength\n@param matchOnly , true indicates hashes should only be calculated for previously matched, or small, blocks\n@param hashCalc is the hash function for this matching pass\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "minLength",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the minimum length of an n-gram to calculate"
        },
        {
          "name": "maxLength",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the maximum length of an n-gram"
        },
        {
          "name": "wholeBlock",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ", true indicates a hash of the whole block should be calculated even if its size is below minLength"
        },
        {
          "name": "matchOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ", true indicates hashes should only be calculated for previously matched, or small, blocks"
        },
        {
          "name": "hashCalc",
          "type_long": "ghidra.program.model.correlate.HashCalculator",
          "type_short": "HashCalculator",
          "comment": "is the hash function for this matching pass"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    }
  ]
}
