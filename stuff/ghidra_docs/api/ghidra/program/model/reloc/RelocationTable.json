{
  "name": "RelocationTable",
  "comment": "An interface for storing the relocations defined in a program.",
  "javadoc": "An interface for storing the relocations defined in a program.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "RELOCATABLE_PROP_NAME",
      "comment": "Name of the relocatable property in the program information property list.",
      "javadoc": "Name of the relocatable property in the program information property list.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Relocatable\""
    }
  ],
  "methods": [
    {
      "name": "add",
      "comment": "Creates and adds a new relocation with the specified\n address, type, and value.",
      "javadoc": "Creates and adds a new relocation with the specified\n address, type, and value.\n@param addr the address where the relocation is required\n@param type the type of relocation to perform\n@param values the values needed when performing the relocation\n@param bytes original instruction bytes affected by relocation\n@param symbolName the name of the symbol being relocated; may be null\n@return the newly added relocation object",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address where the relocation is required"
        },
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "the type of relocation to perform"
        },
        {
          "name": "values",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": "the values needed when performing the relocation"
        },
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "original instruction bytes affected by relocation"
        },
        {
          "name": "symbolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the symbol being relocated; may be null"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.reloc.Relocation",
        "type_short": "Relocation",
        "comment": "the newly added relocation object"
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Removes the relocation object.",
      "javadoc": "Removes the relocation object.\n@param reloc the relocation object to remove",
      "static": false,
      "params": [
        {
          "name": "reloc",
          "type_long": "ghidra.program.model.reloc.Relocation",
          "type_short": "Relocation",
          "comment": "the relocation object to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRelocation",
      "comment": "Returns the relocation with the specified address.",
      "javadoc": "Returns the relocation with the specified address.\n@param addr the address where the relocation is defined\n@return the relocation with the specified address",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address where the relocation is defined"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.reloc.Relocation",
        "type_short": "Relocation",
        "comment": "the relocation with the specified address"
      },
      "throws": []
    },
    {
      "name": "getRelocations",
      "comment": "Returns an iterator over all relocation points (in ascending address order) located \n within the program.",
      "javadoc": "Returns an iterator over all relocation points (in ascending address order) located \n within the program.\n@return relocation iterator",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.reloc.Relocation\u003e",
        "type_short": "Iterator",
        "comment": "relocation iterator"
      },
      "throws": []
    },
    {
      "name": "getRelocations",
      "comment": "Returns an iterator over all the relocation points (in ascending address order) located \n within the specified address set.",
      "javadoc": "Returns an iterator over all the relocation points (in ascending address order) located \n within the specified address set.\n@param set address set\n@return relocation iterator",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "address set"
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.reloc.Relocation\u003e",
        "type_short": "Iterator",
        "comment": "relocation iterator"
      },
      "throws": []
    },
    {
      "name": "getRelocationAfter",
      "comment": "Returns the next relocation point which follows the specified address.",
      "javadoc": "Returns the next relocation point which follows the specified address.\n@param addr starting point\n@return next relocation after addr",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "starting point"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.reloc.Relocation",
        "type_short": "Relocation",
        "comment": "next relocation after addr"
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "Returns the number of relocation in this table.",
      "javadoc": "Returns the number of relocation in this table.\n@return the number of relocation in this table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of relocation in this table"
      },
      "throws": []
    },
    {
      "name": "isRelocatable",
      "comment": "Returns true if this relocation table contains relocations for a relocatable binary.\n Some binaries may contain relocations, but not actually be relocatable. For example, ELF executables.",
      "javadoc": "Returns true if this relocation table contains relocations for a relocatable binary.\n Some binaries may contain relocations, but not actually be relocatable. For example, ELF executables.\n@return true if this relocation table contains relocations for a relocatable binary",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this relocation table contains relocations for a relocatable binary"
      },
      "throws": []
    }
  ]
}
