{
  "name": "PcodeBlockBasic",
  "comment": "A basic block constructed from PcodeOps",
  "javadoc": "A basic block constructed from PcodeOps",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.pcode.PcodeBlock",
  "fields": [
    {
      "name": "oplist",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.ListLinked\u003cghidra.program.model.pcode.PcodeOp\u003e",
      "type_short": "ListLinked",
      "constant_value": null
    },
    {
      "name": "cover",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStop",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Is the given address in the range of instructions represented by this basic block",
      "javadoc": "Is the given address in the range of instructions represented by this basic block\n@param addr is the Address\n@return true if the Address is contained",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is the Address"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the Address is contained"
      },
      "throws": []
    },
    {
      "name": "insertBefore",
      "comment": "Insert a new PcodeOp before a specific point in the list of PcodeOps",
      "javadoc": "Insert a new PcodeOp before a specific point in the list of PcodeOps\n@param iter points to the PcodeOp to insert before\n@param op is the new PcodeOp to insert",
      "static": false,
      "params": [
        {
          "name": "iter",
          "type_long": "java.util.Iterator\u003cghidra.program.model.pcode.PcodeOp\u003e",
          "type_short": "Iterator",
          "comment": "points to the PcodeOp to insert before"
        },
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": "is the new PcodeOp to insert"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insertAfter",
      "comment": "Insert a new PcodeOp after a specific point in the list of PcodeOps",
      "javadoc": "Insert a new PcodeOp after a specific point in the list of PcodeOps\n@param iter points to the PcodeOp to insert after\n@param op is the new PcodeOp to insert",
      "static": false,
      "params": [
        {
          "name": "iter",
          "type_long": "java.util.Iterator\u003cghidra.program.model.pcode.PcodeOp\u003e",
          "type_short": "Iterator",
          "comment": "points to the PcodeOp to insert after"
        },
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": "is the new PcodeOp to insert"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insertEnd",
      "comment": "Insert a PcodeOp at the end of the block",
      "javadoc": "Insert a PcodeOp at the end of the block\n@param op is the PcodeOp to insert",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": "is the PcodeOp to insert"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Remove a PcodeOp from the block",
      "javadoc": "Remove a PcodeOp from the block\n@param op is the PcodeOp to remove",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": "is the PcodeOp to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIterator",
      "comment": "",
      "javadoc": "@return an iterator over the PcodeOps in this basic block",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.pcode.PcodeOp\u003e",
        "type_short": "Iterator",
        "comment": "an iterator over the PcodeOps in this basic block"
      },
      "throws": []
    },
    {
      "name": "saveXmlBody",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "writer",
          "type_long": "java.io.Writer",
          "type_short": "Writer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "restoreXmlBody",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "resolver",
          "type_long": "ghidra.program.model.pcode.BlockMap",
          "type_short": "BlockMap",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    }
  ]
}
