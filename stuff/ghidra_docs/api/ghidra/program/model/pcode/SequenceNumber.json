{
  "name": "SequenceNumber",
  "comment": "Basically a unique address for a PcodeOp\n It is unique, maintains original assembly instruction address, and is comparable\n within a basic block",
  "javadoc": "Basically a unique address for a PcodeOp\n It is unique, maintains original assembly instruction address, and is comparable\n within a basic block",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "pc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "uniq",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "order",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a sequence number for an instruction at an address and sequence of pcode op within\n that instructions set of pcode.",
      "javadoc": "Construct a sequence number for an instruction at an address and sequence of pcode op within\n that instructions set of pcode.\n@param instrAddr address of instruction\n@param sequenceNum sequence of pcode op with an instructions pcode ops",
      "static": false,
      "params": [
        {
          "name": "instrAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of instruction"
        },
        {
          "name": "sequenceNum",
          "type_long": "int",
          "type_short": "int",
          "comment": "sequence of pcode op with an instructions pcode ops"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTarget",
      "comment": "",
      "javadoc": "@return get address of instruction this sequence belongs to",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "get address of instruction this sequence belongs to"
      },
      "throws": []
    },
    {
      "name": "getTime",
      "comment": "Get unique Sub-address for distinguishing multiple PcodeOps at one\n instruction address.\n Does not change over lifetime of PcodeOp",
      "javadoc": "Get unique Sub-address for distinguishing multiple PcodeOps at one\n instruction address.\n Does not change over lifetime of PcodeOp\n@return unique id for a pcode op within a given instruction",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "unique id for a pcode op within a given instruction"
      },
      "throws": []
    },
    {
      "name": "setTime",
      "comment": "Set unique Sub-address for distinguishing multiple PcodeOps at one\n instruction address.\n Does not change over lifetime of PcodeOp",
      "javadoc": "Set unique Sub-address for distinguishing multiple PcodeOps at one\n instruction address.\n Does not change over lifetime of PcodeOp\n@param t unique id",
      "static": false,
      "params": [
        {
          "name": "t",
          "type_long": "int",
          "type_short": "int",
          "comment": "unique id"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOrder",
      "comment": "Get relative position information of PcodeOps within\n a basic block, may change as basic block is edited.",
      "javadoc": "Get relative position information of PcodeOps within\n a basic block, may change as basic block is edited.\n@return relative position of pcode in a basic block",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "relative position of pcode in a basic block"
      },
      "throws": []
    },
    {
      "name": "setOrder",
      "comment": "Set relative position information of PcodeOps within\n a basic block, may change as basic block is edited.",
      "javadoc": "Set relative position information of PcodeOps within\n a basic block, may change as basic block is edited.\n@param o relative position of pcodeOp within a basic block",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "int",
          "type_short": "int",
          "comment": "relative position of pcodeOp within a basic block"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sq",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildXML",
      "comment": "",
      "javadoc": "@return Build XML tag for SequenceNumber",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.StringBuilder",
        "type_short": "StringBuilder",
        "comment": "Build XML tag for SequenceNumber"
      },
      "throws": []
    },
    {
      "name": "readXML",
      "comment": "Create a new Sequence number from XML SAX tree element.",
      "javadoc": "Create a new Sequence number from XML SAX tree element.\n@param parser the xml parser\n@param factory pcode factory used to create new pcode\n@return new sequence number",
      "static": true,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "the xml parser"
        },
        {
          "name": "factory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": "pcode factory used to create new pcode"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.SequenceNumber",
        "type_short": "SequenceNumber",
        "comment": "new sequence number"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
