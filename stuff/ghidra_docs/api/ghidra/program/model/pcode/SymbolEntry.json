{
  "name": "SymbolEntry",
  "comment": "A mapping from a HighSymbol object to the storage that holds the symbol\u0027s value.",
  "javadoc": "A mapping from a HighSymbol object to the storage that holds the symbol\u0027s value.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "symbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.HighSymbol",
      "type_short": "HighSymbol",
      "constant_value": null
    },
    {
      "name": "pcaddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for use with restoreXML",
      "javadoc": "Constructor for use with restoreXML\n@param sym is the symbol owning this entry",
      "static": false,
      "params": [
        {
          "name": "sym",
          "type_long": "ghidra.program.model.pcode.HighSymbol",
          "type_short": "HighSymbol",
          "comment": "is the symbol owning this entry"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXML",
      "comment": "Restore this entry from the given XML stream. Typically more than one tag is consumed",
      "javadoc": "Restore this entry from the given XML stream. Typically more than one tag is consumed\n@param parser is the given XML stream\n@throws PcodeXMLException if the XML is invalid",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the given XML stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "if the XML is invalid"
        }
      ]
    },
    {
      "name": "saveXml",
      "comment": "Save this entry as (a set of) XML tags to the given stream",
      "javadoc": "Save this entry as (a set of) XML tags to the given stream\n@param buf is the given stream",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the given stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStorage",
      "comment": "Get the storage associated with this particular mapping of the Symbol",
      "javadoc": "Get the storage associated with this particular mapping of the Symbol\n@return the storage object",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": "the storage object"
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "Get the number of bytes consumed by the symbol when using this storage",
      "javadoc": "Get the number of bytes consumed by the symbol when using this storage\n@return the size of this entry",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of this entry"
      },
      "throws": []
    },
    {
      "name": "isReadOnly",
      "comment": "",
      "javadoc": "@return true if the mapped storage is read-only",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the mapped storage is read-only"
      },
      "throws": []
    },
    {
      "name": "isVolatile",
      "comment": "",
      "javadoc": "@return true if the mapped storage is volatile",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the mapped storage is volatile"
      },
      "throws": []
    },
    {
      "name": "getPCAdress",
      "comment": "The storage used to hold this Symbol may be used for other purposes at different points in\n the code.  This returns the earliest address in the code where this storage is used for this symbol",
      "javadoc": "The storage used to hold this Symbol may be used for other purposes at different points in\n the code.  This returns the earliest address in the code where this storage is used for this symbol\n@return the starting address where the Symbol uses this storage",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the starting address where the Symbol uses this storage"
      },
      "throws": []
    },
    {
      "name": "parseRangeList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildRangelistXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "res",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
