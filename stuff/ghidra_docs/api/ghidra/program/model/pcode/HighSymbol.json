{
  "name": "HighSymbol",
  "comment": "A symbol within the decompiler\u0027s model of a particular function.  The symbol has a name and a data-type\n along with other properties. The symbol is mapped to one or more storage locations by attaching a\n SymbolEntry for each mapping.",
  "javadoc": "A symbol within the decompiler\u0027s model of a particular function.  The symbol has a name and a data-type\n along with other properties. The symbol is mapped to one or more storage locations by attaching a\n SymbolEntry for each mapping.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "ID_BASE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "4611686018427387904"
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "type",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "function",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.HighFunction",
      "type_short": "HighFunction",
      "constant_value": null
    },
    {
      "name": "category",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "categoryIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "namelock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "typelock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isThis",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isHidden",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "id",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "entryList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.SymbolEntry[]",
      "type_short": "ghidra.program.model.pcode.SymbolEntry[]",
      "constant_value": null
    },
    {
      "name": "highVariable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.HighVariable",
      "type_short": "HighVariable",
      "constant_value": null
    },
    {
      "name": "dtmanage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
      "type_short": "PcodeDataTypeManager",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for use with restoreXML",
      "javadoc": "Constructor for use with restoreXML\n@param func is the HighFunction using the symbol",
      "static": false,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.pcode.HighFunction",
          "type_short": "HighFunction",
          "comment": "is the HighFunction using the symbol"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a base symbol, given a name and data-type.  Mappings must be attached separately.",
      "javadoc": "Construct a base symbol, given a name and data-type.  Mappings must be attached separately.\n@param uniqueId is the id to associate with the new symbol\n@param nm is the given name\n@param tp is the given data-type\n@param func is the function model owning the new symbol",
      "static": false,
      "params": [
        {
          "name": "uniqueId",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the id to associate with the new symbol"
        },
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the given name"
        },
        {
          "name": "tp",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "is the given data-type"
        },
        {
          "name": "func",
          "type_long": "ghidra.program.model.pcode.HighFunction",
          "type_short": "HighFunction",
          "comment": "is the function model owning the new symbol"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a symbol that is not attached to a function model. The symbol is given\n a name, data-type, and other basic attributes.  Mappings must be attached separately.",
      "javadoc": "Construct a symbol that is not attached to a function model. The symbol is given\n a name, data-type, and other basic attributes.  Mappings must be attached separately.\n@param uniqueId is the id to associate with the new symbol\n@param nm is the given name\n@param tp is the given data-type\n@param tlock is true if the symbol is type locked\n@param nlock is true if the symbol is name locked\n@param manage is a PcodeDataTypeManager to facilitate XML marshaling",
      "static": false,
      "params": [
        {
          "name": "uniqueId",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the id to associate with the new symbol"
        },
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the given name"
        },
        {
          "name": "tp",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "is the given data-type"
        },
        {
          "name": "tlock",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "is true if the symbol is type locked"
        },
        {
          "name": "nlock",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "is true if the symbol is name locked"
        },
        {
          "name": "manage",
          "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
          "type_short": "PcodeDataTypeManager",
          "comment": "is a PcodeDataTypeManager to facilitate XML marshaling"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addMapEntry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "entry",
          "type_long": "ghidra.program.model.pcode.SymbolEntry",
          "type_short": "SymbolEntry",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getId",
      "comment": "Get id associated with this symbol.",
      "javadoc": "Get id associated with this symbol.\n@return the id",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the id"
      },
      "throws": []
    },
    {
      "name": "getSymbol",
      "comment": "Fetch the corresponding database Symbol if it exists.",
      "javadoc": "Fetch the corresponding database Symbol if it exists.\n@return the matching Symbol object or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": "the matching Symbol object or null"
      },
      "throws": []
    },
    {
      "name": "getNamespace",
      "comment": "Fetch the namespace owning this symbol, if it exists.",
      "javadoc": "Fetch the namespace owning this symbol, if it exists.\n@return the Namespace object or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Namespace",
        "type_short": "Namespace",
        "comment": "the Namespace object or null"
      },
      "throws": []
    },
    {
      "name": "setHighVariable",
      "comment": "Associate a particular HighVariable with this symbol. This is used to link the symbol\n into the decompiler\u0027s description of how a function manipulates a particular symbol.",
      "javadoc": "Associate a particular HighVariable with this symbol. This is used to link the symbol\n into the decompiler\u0027s description of how a function manipulates a particular symbol.\n@param high is the associated HighVariable",
      "static": false,
      "params": [
        {
          "name": "high",
          "type_long": "ghidra.program.model.pcode.HighVariable",
          "type_short": "HighVariable",
          "comment": "is the associated HighVariable"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHighVariable",
      "comment": "Get the HighVariable associate with this symbol if any.  This allows the user to go straight\n into the decompiler\u0027s function to see how the symbol gets manipulated.",
      "javadoc": "Get the HighVariable associate with this symbol if any.  This allows the user to go straight\n into the decompiler\u0027s function to see how the symbol gets manipulated.\n@return the associated HighVariable or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighVariable",
        "type_short": "HighVariable",
        "comment": "the associated HighVariable or null"
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Get the base name of this symbol",
      "javadoc": "Get the base name of this symbol\n@return the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "Get the Program object containing the function being modeled.",
      "javadoc": "Get the Program object containing the function being modeled.\n@return the Program",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the Program"
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "",
      "javadoc": "@return the data-type associate with this symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the data-type associate with this symbol"
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "",
      "javadoc": "@return the number of bytes consumed by the storage for this symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of bytes consumed by the storage for this symbol"
      },
      "throws": []
    },
    {
      "name": "getPCAddress",
      "comment": "Get the first code Address, within the function, where this symbol\u0027s storage actually\n holds the value of the symbol.  If there is more than one mapping for the symbol, this\n returns the code Address for the first mapping.  A null value indicates that the storage\n is valid over the whole function (at least). If the value is non-null, the symbol storage\n may be used for other purposes at prior locations.",
      "javadoc": "Get the first code Address, within the function, where this symbol\u0027s storage actually\n holds the value of the symbol.  If there is more than one mapping for the symbol, this\n returns the code Address for the first mapping.  A null value indicates that the storage\n is valid over the whole function (at least). If the value is non-null, the symbol storage\n may be used for other purposes at prior locations.\n@return the first use code Address or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the first use code Address or null"
      },
      "throws": []
    },
    {
      "name": "getFirstUseOffset",
      "comment": "Get the first code Address (expressed as a different in bytes from the starting address of the\n function) where this symbol\u0027s storage actually holds the value of the symbol. A value of 0 indicates\n that the storage is valid across the entire function.  A negative value indicates the storage is\n an input to the function.",
      "javadoc": "Get the first code Address (expressed as a different in bytes from the starting address of the\n function) where this symbol\u0027s storage actually holds the value of the symbol. A value of 0 indicates\n that the storage is valid across the entire function.  A negative value indicates the storage is\n an input to the function.\n@return the first-use offset of this symbol\u0027s storage",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the first-use offset of this symbol\u0027s storage"
      },
      "throws": []
    },
    {
      "name": "getHighFunction",
      "comment": "Get the function model of which this symbol is a part.",
      "javadoc": "Get the function model of which this symbol is a part.\n@return the HighFunction owning this symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighFunction",
        "type_short": "HighFunction",
        "comment": "the HighFunction owning this symbol"
      },
      "throws": []
    },
    {
      "name": "setCategory",
      "comment": "Set the category and associated index for this symbol. The category indicates a specific sub-class\n of symbols. Currently -1\u003dnone, 0\u003dparameter, 1\u003dequate",
      "javadoc": "Set the category and associated index for this symbol. The category indicates a specific sub-class\n of symbols. Currently -1\u003dnone, 0\u003dparameter, 1\u003dequate\n@param cat is the category\n@param index is the category index (\"slot\" for parameters)",
      "static": false,
      "params": [
        {
          "name": "cat",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the category"
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the category index (\"slot\" for parameters)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTypeLock",
      "comment": "Set whether this symbol\u0027s data-type is considered \"locked\". If it is \"locked\",\n this symbol\u0027s data-type is considered unchangeable during decompilation. The data-type\n will be forced into the decompiler\u0027s model of the function to the extent possible.",
      "javadoc": "Set whether this symbol\u0027s data-type is considered \"locked\". If it is \"locked\",\n this symbol\u0027s data-type is considered unchangeable during decompilation. The data-type\n will be forced into the decompiler\u0027s model of the function to the extent possible.\n@param typelock is true if the data-type should be considered \"locked\".",
      "static": false,
      "params": [
        {
          "name": "typelock",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "is true if the data-type should be considered \"locked\"."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setNameLock",
      "comment": "Set whether this symbol\u0027s name is considered \"locked\". If it is \"locked\", the decompiler\n will use the name when labeling the storage described by this symbol.",
      "javadoc": "Set whether this symbol\u0027s name is considered \"locked\". If it is \"locked\", the decompiler\n will use the name when labeling the storage described by this symbol.\n@param namelock is true if the name should be considered \"locked\".",
      "static": false,
      "params": [
        {
          "name": "namelock",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "is true if the name should be considered \"locked\"."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isTypeLocked",
      "comment": "If this returns true, this symbol\u0027s data-type is \"locked\", meaning\n it is considered unchangeable during decompilation. The data-type\n will be forced into the decompiler\u0027s model of the function to the extent possible.",
      "javadoc": "If this returns true, this symbol\u0027s data-type is \"locked\", meaning\n it is considered unchangeable during decompilation. The data-type\n will be forced into the decompiler\u0027s model of the function to the extent possible.\n@return true if the data-type is considered \"locked\".",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the data-type is considered \"locked\"."
      },
      "throws": []
    },
    {
      "name": "isNameLocked",
      "comment": "If this returns true, this symbol\u0027s name is \"locked\". meaning the decompiler\n is forced to use the name when labeling the storage described by this symbol.",
      "javadoc": "If this returns true, this symbol\u0027s name is \"locked\". meaning the decompiler\n is forced to use the name when labeling the storage described by this symbol.\n@return true if the name is considered \"locked\".",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the name is considered \"locked\"."
      },
      "throws": []
    },
    {
      "name": "isIsolated",
      "comment": "If this returns true, the decompiler will not speculatively merge this with\n other variables.\n Currently, being isolated is equivalent to being typelocked.",
      "javadoc": "If this returns true, the decompiler will not speculatively merge this with\n other variables.\n Currently, being isolated is equivalent to being typelocked.\n@return true if this will not be merged with other variables",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this will not be merged with other variables"
      },
      "throws": []
    },
    {
      "name": "isReadOnly",
      "comment": "",
      "javadoc": "@return true if the symbol\u0027s value is considered read-only (by the decompiler)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the symbol\u0027s value is considered read-only (by the decompiler)"
      },
      "throws": []
    },
    {
      "name": "isParameter",
      "comment": "Is this symbol a parameter for a function",
      "javadoc": "Is this symbol a parameter for a function\n@return true if this is a parameter",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is a parameter"
      },
      "throws": []
    },
    {
      "name": "getCategoryIndex",
      "comment": "For parameters (category\u003d0), this method returns the position of the parameter within the function prototype.",
      "javadoc": "For parameters (category\u003d0), this method returns the position of the parameter within the function prototype.\n@return the category index for this symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the category index for this symbol"
      },
      "throws": []
    },
    {
      "name": "isGlobal",
      "comment": "Is this symbol in the global scope or some other global namespace",
      "javadoc": "Is this symbol in the global scope or some other global namespace\n@return true if this is global",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is global"
      },
      "throws": []
    },
    {
      "name": "isThisPointer",
      "comment": "",
      "javadoc": "@return true if symbol is a \"this\" pointer for a class method",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if symbol is a \"this\" pointer for a class method"
      },
      "throws": []
    },
    {
      "name": "isHiddenReturn",
      "comment": "",
      "javadoc": "@return true is symbol holds a pointer to where a function\u0027s return value should be stored",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true is symbol holds a pointer to where a function\u0027s return value should be stored"
      },
      "throws": []
    },
    {
      "name": "getFirstWholeMap",
      "comment": "",
      "javadoc": "@return the first mapping object attached to this symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.SymbolEntry",
        "type_short": "SymbolEntry",
        "comment": "the first mapping object attached to this symbol"
      },
      "throws": []
    },
    {
      "name": "getStorage",
      "comment": "",
      "javadoc": "@return the storage associated with this symbol (associated with the first mapping)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": "the storage associated with this symbol (associated with the first mapping)"
      },
      "throws": []
    },
    {
      "name": "saveXMLHeader",
      "comment": "Write out attributes for the base XML tag",
      "javadoc": "Write out attributes for the base XML tag\n@param buf is the XML output stream",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the XML output stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveXML",
      "comment": "Save the symbol description as a tag to the XML stream.  This does NOT save the mappings.",
      "javadoc": "Save the symbol description as a tag to the XML stream.  This does NOT save the mappings.\n@param buf is the XML stream",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the XML stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXMLHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "symel",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "restoreXML",
      "comment": "Restore this symbol object and its associated mappings from an XML description\n in the given stream.",
      "javadoc": "Restore this symbol object and its associated mappings from an XML description\n in the given stream.\n@param parser is the given XML stream\n@throws PcodeXMLException if the XML description is invalid",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the given XML stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "if the XML description is invalid"
        }
      ]
    },
    {
      "name": "restoreMapSymXML",
      "comment": "Restore a full HighSymbol from the next mapsym tag in the given XML stream.\n This method acts as an XML based HighSymbol factory, instantiating the correct class\n based on the particular tags.",
      "javadoc": "Restore a full HighSymbol from the next \u0026lt;mapsym\u0026gt; tag in the given XML stream.\n This method acts as an XML based HighSymbol factory, instantiating the correct class\n based on the particular tags.\n@param parser is the given XML stream\n@param isGlobal is true if this symbol is being read into a global scope\n@param high is the function model that will own the new symbol\n@return the new symbol\n@throws PcodeXMLException if the XML description is invalid",
      "static": true,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the given XML stream"
        },
        {
          "name": "isGlobal",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "is true if this symbol is being read into a global scope"
        },
        {
          "name": "high",
          "type_long": "ghidra.program.model.pcode.HighFunction",
          "type_short": "HighFunction",
          "comment": "is the function model that will own the new symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighSymbol",
        "type_short": "HighSymbol",
        "comment": "the new symbol"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "if the XML description is invalid"
        }
      ]
    },
    {
      "name": "buildMapSymXML",
      "comment": "Write out the given symbol with all its mapping as a mapsym tag to the given XML stream.",
      "javadoc": "Write out the given symbol with all its mapping as a \u0026lt;mapsym\u0026gt; tag to the given XML stream.\n@param res is the given XML stream\n@param sym is the given symbol",
      "static": true,
      "params": [
        {
          "name": "res",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the given XML stream"
        },
        {
          "name": "sym",
          "type_long": "ghidra.program.model.pcode.HighSymbol",
          "type_short": "HighSymbol",
          "comment": "is the given symbol"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
