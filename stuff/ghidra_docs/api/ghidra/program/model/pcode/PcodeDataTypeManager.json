{
  "name": "PcodeDataTypeManager",
  "comment": "Class for making Ghidra DataTypes suitable for use with pcode",
  "javadoc": "Class for making Ghidra DataTypes suitable for use with pcode",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "progDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataTypeManager",
      "type_short": "DataTypeManager",
      "constant_value": null
    },
    {
      "name": "builtInDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataTypeManager",
      "type_short": "DataTypeManager",
      "constant_value": null
    },
    {
      "name": "dataOrganization",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataOrganization",
      "type_short": "DataOrganization",
      "constant_value": null
    },
    {
      "name": "displayLanguage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.DecompilerLanguage",
      "type_short": "DecompilerLanguage",
      "constant_value": null
    },
    {
      "name": "voidInputIsVarargs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "coreBuiltin",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager.TypeMap[]",
      "type_short": "ghidra.program.model.pcode.PcodeDataTypeManager.TypeMap[]",
      "constant_value": null
    },
    {
      "name": "voidDt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.VoidDataType",
      "type_short": "VoidDataType",
      "constant_value": null
    },
    {
      "name": "pointerWordSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findUndefined",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findBaseType",
      "comment": "Find a base/built-in data-type with the given name and/or id.  If an id is provided and\n a corresponding data-type exists, this data-type is returned. Otherwise the first\n built-in data-type with a matching name is returned",
      "javadoc": "Find a base/built-in data-type with the given name and/or id.  If an id is provided and\n a corresponding data-type exists, this data-type is returned. Otherwise the first\n built-in data-type with a matching name is returned\n@param nm name of data-type\n@param idstr is an optional string containing a data-type id number\n@return the data-type object or null if no matching data-type exists",
      "static": false,
      "params": [
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of data-type"
        },
        {
          "name": "idstr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is an optional string containing a data-type id number"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the data-type object or null if no matching data-type exists"
      },
      "throws": []
    },
    {
      "name": "readXMLDataType",
      "comment": "Get the data type that corresponds to the given XML element.",
      "javadoc": "Get the data type that corresponds to the given XML element.\n@param parser the xml parser\n@return the read data type\n@throws PcodeXMLException if the data type could be resolved from the \n element",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "the xml parser"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the read data type"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "if the data type could be resolved from the \n element"
        }
      ]
    },
    {
      "name": "buildTypeRef",
      "comment": "Generate an XML tag describing the given data-type. Most data-types produce a  tag,\n fully describing the data-type. Where possible a  tag is produced, which just gives\n the name of the data-type, deferring a full description of the data-type. For certain simple or\n nameless data-types, a  tag is emitted giving a full description.",
      "javadoc": "Generate an XML tag describing the given data-type. Most data-types produce a {@code \u003ctype\u003e} tag,\n fully describing the data-type. Where possible a {@code \u003ctyperef\u003e} tag is produced, which just gives\n the name of the data-type, deferring a full description of the data-type. For certain simple or\n nameless data-types, a {@code \u003ctype\u003e} tag is emitted giving a full description.\n@param resBuf is the stream to append the tag to\n@param type is the data-type to be converted\n@param size is the size in bytes of the specific instance of the data-type",
      "static": false,
      "params": [
        {
          "name": "resBuf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the stream to append the tag to"
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "is the data-type to be converted"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the size in bytes of the specific instance of the data-type"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "appendCharTypeRef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "resBuf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "appendOpaqueString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "resBuf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildTypeInternal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "resBuf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "appendNameIdAttributes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "resBuf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildType",
      "comment": "Build an XML document string representing the type information for a data type",
      "javadoc": "Build an XML document string representing the type information for a data type\n@param resBuf is the stream to append the document to\n@param type data type to build XML for\n@param size size of the data type",
      "static": false,
      "params": [
        {
          "name": "resBuf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the stream to append the document to"
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "data type to build XML for"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of the data type"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildStructTypeZeroSizeOveride",
      "comment": "Build an XML document string representing the Structure that has\n  its size reported as zero.",
      "javadoc": "Build an XML document string representing the Structure that has\n  its size reported as zero.\n@param type data type to build XML for\n@return XML string document",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "data type to build XML for"
        }
      ],
      "return": {
        "type_long": "java.lang.StringBuilder",
        "type_short": "StringBuilder",
        "comment": "XML string document"
      },
      "throws": []
    },
    {
      "name": "generateCoreTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sortCoreTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findTypeById",
      "comment": "Search for a core-type by id",
      "javadoc": "Search for a core-type by id\n@param id to search for\n@return the index of the matching TypeMap or -1",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "to search for"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index of the matching TypeMap or -1"
      },
      "throws": []
    },
    {
      "name": "buildCoreTypes",
      "comment": "Build the coretypes xml element",
      "javadoc": "Build the coretypes xml element\n@return coretypes xml element",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "coretypes xml element"
      },
      "throws": []
    }
  ]
}
