{
  "name": "PcodeOverride",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getInstructionStart",
      "comment": "",
      "javadoc": "@return current instruction address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "current instruction address"
      },
      "throws": []
    },
    {
      "name": "getFlowOverride",
      "comment": "Get the flow override which may have been applied\n to the current instruction.",
      "javadoc": "Get the flow override which may have been applied\n to the current instruction.\n@return flow override or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.FlowOverride",
        "type_short": "FlowOverride",
        "comment": "flow override or null"
      },
      "throws": []
    },
    {
      "name": "getOverridingReference",
      "comment": "Get the primary overriding reference address of RefType  from \n the current instruction",
      "javadoc": "Get the primary overriding reference address of {@link RefType} {@code type} from \n the current instruction\n@param type type of reference\n@return call reference address or null",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "type of reference"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "call reference address or null"
      },
      "throws": []
    },
    {
      "name": "getFallThroughOverride",
      "comment": "Get the fall-through override address which may have been \n applied to the current instruction.",
      "javadoc": "Get the fall-through override address which may have been \n applied to the current instruction.\n@return fall-through override address or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "fall-through override address or null"
      },
      "throws": []
    },
    {
      "name": "hasCallFixup",
      "comment": "Returns the call-fixup for a specified call destination.",
      "javadoc": "Returns the call-fixup for a specified call destination.\n@param callDestAddr call destination address.  This address is used to \n identify a function which may have been tagged with a CallFixup.\n@return true if call destination function has been tagged with a call-fixup",
      "static": false,
      "params": [
        {
          "name": "callDestAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "call destination address.  This address is used to \n identify a function which may have been tagged with a CallFixup."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if call destination function has been tagged with a call-fixup"
      },
      "throws": []
    },
    {
      "name": "getCallFixup",
      "comment": "Returns the call-fixup for a specified call destination.\n If the destination function has not be tagged or was tagged \n with an unknown CallFixup name this method will return null.",
      "javadoc": "Returns the call-fixup for a specified call destination.\n If the destination function has not be tagged or was tagged \n with an unknown CallFixup name this method will return null.\n@param callDestAddr call destination address.  This address is used to \n identify a function which may have been tagged with a CallFixup.\n@return call fixup object or null",
      "static": false,
      "params": [
        {
          "name": "callDestAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "call destination address.  This address is used to \n identify a function which may have been tagged with a CallFixup."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.InjectPayload",
        "type_short": "InjectPayload",
        "comment": "call fixup object or null"
      },
      "throws": []
    },
    {
      "name": "setCallOverrideRefApplied",
      "comment": "Register that a call override has been applied at the current instruction.",
      "javadoc": "Register that a call override has been applied at the current instruction.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCallOverrideRefApplied",
      "comment": "Returns a boolean indicating whether a call override has been applied at the current instruction",
      "javadoc": "Returns a boolean indicating whether a call override has been applied at the current instruction\n@return has call override been applied",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "has call override been applied"
      },
      "throws": []
    },
    {
      "name": "setJumpOverrideRefApplied",
      "comment": "Register that a jump override has been applied at the current instruction",
      "javadoc": "Register that a jump override has been applied at the current instruction",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isJumpOverrideRefApplied",
      "comment": "Returns a boolean indicating whether a jump override has been applied at the current instruction",
      "javadoc": "Returns a boolean indicating whether a jump override has been applied at the current instruction\n@return has jump override been applied",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "has jump override been applied"
      },
      "throws": []
    },
    {
      "name": "setCallOtherCallOverrideRefApplied",
      "comment": "Register that a callother call override has been applied at the current instruction",
      "javadoc": "Register that a callother call override has been applied at the current instruction",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCallOtherCallOverrideRefApplied",
      "comment": "Returns a boolean indicating whether a callother call override has been applied at the current\n instruction",
      "javadoc": "Returns a boolean indicating whether a callother call override has been applied at the current\n instruction\n@return has callother call override been applied",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "has callother call override been applied"
      },
      "throws": []
    },
    {
      "name": "setCallOtherJumpOverrideRefApplied",
      "comment": "Register that a callother jump override has been applied at the current instruction",
      "javadoc": "Register that a callother jump override has been applied at the current instruction",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCallOtherJumpOverrideApplied",
      "comment": "Returns a boolean indicating whether a callother jump override has been applied at the current\n instruction",
      "javadoc": "Returns a boolean indicating whether a callother jump override has been applied at the current\n instruction\n@return has callother jump override been applied",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "has callother jump override been applied"
      },
      "throws": []
    },
    {
      "name": "hasPotentialOverride",
      "comment": "Returns a boolean indicating whether there are any primary overriding references at the current \n instruction",
      "javadoc": "Returns a boolean indicating whether there are any primary overriding references at the current \n instruction\n@return are there primary overriding references",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "are there primary overriding references"
      },
      "throws": []
    },
    {
      "name": "getPrimaryCallReference",
      "comment": "Get the primary call reference address from the current instruction",
      "javadoc": "Get the primary call reference address from the current instruction\n@return call reference address or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "call reference address or null"
      },
      "throws": []
    }
  ]
}
