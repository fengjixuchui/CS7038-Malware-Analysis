{
  "name": "PcodeSyntaxTree",
  "comment": "Varnodes and PcodeOps in a coherent graph structure",
  "javadoc": "Varnodes and PcodeOps in a coherent graph structure",
  "static": false,
  "implements": [
    "ghidra.program.model.pcode.PcodeFactory"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "addrFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressFactory",
      "type_short": "AddressFactory",
      "constant_value": null
    },
    {
      "name": "datatypeManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
      "type_short": "PcodeDataTypeManager",
      "constant_value": null
    },
    {
      "name": "refmap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cjava.lang.Integer,ghidra.program.model.pcode.Varnode\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "oprefmap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cjava.lang.Integer,ghidra.program.model.pcode.PcodeOp\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "joinmap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cjava.lang.Integer,ghidra.program.model.listing.VariableStorage\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "joinAllocate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "opbank",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.PcodeOpBank",
      "type_short": "PcodeOpBank",
      "constant_value": null
    },
    {
      "name": "vbank",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.VarnodeBank",
      "type_short": "VarnodeBank",
      "constant_value": null
    },
    {
      "name": "bblocks",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.program.model.pcode.PcodeBlockBasic\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "uniqId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "afact",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        },
        {
          "name": "dtmanage",
          "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
          "type_short": "PcodeDataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVarnodePiece",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "pieceStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readXMLVarnodePieces",
      "comment": "Read an XML join address with \"piece\" attributes",
      "javadoc": "Read an XML join address with \"piece\" attributes\n@param el SAX parse tree element\n@param addr join address associated with pieces\n@return the VariableStorage associated with xml\n@throws PcodeXMLException\n@throws InvalidInputException",
      "static": false,
      "params": [
        {
          "name": "el",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": "SAX parse tree element"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "join address associated with pieces"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": "the VariableStorage associated with xml"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "allocateJoinStorage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "pieces",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findJoinStorage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildStorage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "locRange",
      "comment": "Returns an iterator for all Varnodes in the tree ordered by Address",
      "javadoc": "Returns an iterator for all Varnodes in the tree ordered by Address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.pcode.VarnodeAST\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVarnodes",
      "comment": "return Iterator to all Varnodes in the indicated AddressSpace",
      "javadoc": "return Iterator to all Varnodes in the indicated AddressSpace\n@param spc -- AddressSpace to restrict Iterator to\n@return -- Iterator to Varnodes",
      "static": false,
      "params": [
        {
          "name": "spc",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "-- AddressSpace to restrict Iterator to"
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.pcode.VarnodeAST\u003e",
        "type_short": "Iterator",
        "comment": "-- Iterator to Varnodes"
      },
      "throws": []
    },
    {
      "name": "getVarnodes",
      "comment": "return all Varnodes that start at a given Address",
      "javadoc": "return all Varnodes that start at a given Address\n@param addr -- Address of Varnodes\n@return -- Iterator to Varnodes",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "-- Address of Varnodes"
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.pcode.VarnodeAST\u003e",
        "type_short": "Iterator",
        "comment": "-- Iterator to Varnodes"
      },
      "throws": []
    },
    {
      "name": "getVarnodes",
      "comment": "return all Varnodes of a given size that start at a given Address",
      "javadoc": "return all Varnodes of a given size that start at a given Address\n@param sz -- Size of Varnodes\n@param addr -- Starting Address of Varnodes\n@return -- Iterator to Varnodes",
      "static": false,
      "params": [
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": "-- Size of Varnodes"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "-- Starting Address of Varnodes"
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.pcode.VarnodeAST\u003e",
        "type_short": "Iterator",
        "comment": "-- Iterator to Varnodes"
      },
      "throws": []
    },
    {
      "name": "findVarnode",
      "comment": "return first instance of a Varnode with given size, starting Address,\n and bound to an instruction at the given Address",
      "javadoc": "return first instance of a Varnode with given size, starting Address,\n and bound to an instruction at the given Address\n@param sz -- size of Varnode\n@param addr -- starting Address of Varnode\n@param pc -- Address of instruction writing to Varnode\n@return -- the Varnode",
      "static": false,
      "params": [
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": "-- size of Varnode"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "-- starting Address of Varnode"
        },
        {
          "name": "pc",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "-- Address of instruction writing to Varnode"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "-- the Varnode"
      },
      "throws": []
    },
    {
      "name": "findVarnode",
      "comment": "return Varnode of given size and starting Address defined by a PcodeOp\n with a given SequenceNumber",
      "javadoc": "return Varnode of given size and starting Address defined by a PcodeOp\n with a given SequenceNumber\n@param sz -- size of Varnode\n@param addr -- starting Address of Varnode\n@param sq -- SequenceNumber of PcodeOp defining the Varnode\n@return -- the Varnode",
      "static": false,
      "params": [
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": "-- size of Varnode"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "-- starting Address of Varnode"
        },
        {
          "name": "sq",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": "-- SequenceNumber of PcodeOp defining the Varnode"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "-- the Varnode"
      },
      "throws": []
    },
    {
      "name": "findInputVarnode",
      "comment": "return Varnode of given size and starting Address, which is also an input",
      "javadoc": "return Varnode of given size and starting Address, which is also an input\n@param sz -- size of Varnode\n@param addr -- starting Address of Varnode\n@return -- the Varnode",
      "static": false,
      "params": [
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": "-- size of Varnode"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "-- starting Address of Varnode"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "-- the Varnode"
      },
      "throws": []
    },
    {
      "name": "getNumVarnodes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPcodeOps",
      "comment": "return all PcodeOps (alive or dead) ordered by SequenceNumber",
      "javadoc": "return all PcodeOps (alive or dead) ordered by SequenceNumber\n@return -- Iterator to PcodeOps",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.pcode.PcodeOpAST\u003e",
        "type_short": "Iterator",
        "comment": "-- Iterator to PcodeOps"
      },
      "throws": []
    },
    {
      "name": "getPcodeOps",
      "comment": "return all PcodeOps associated with a particular instruction Address",
      "javadoc": "return all PcodeOps associated with a particular instruction Address\n@param addr -- Address of instruction generating PcodeOps\n@return -- Iterator to PcodeOps",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "-- Address of instruction generating PcodeOps"
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.pcode.PcodeOpAST\u003e",
        "type_short": "Iterator",
        "comment": "-- Iterator to PcodeOps"
      },
      "throws": []
    },
    {
      "name": "getPcodeOp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sq",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp",
        "type_short": "PcodeOp",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVbank",
      "comment": "",
      "javadoc": "@deprecated\n@return the varnode bank for this syntax tree",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.VarnodeBank",
        "type_short": "VarnodeBank",
        "comment": "the varnode bank for this syntax tree"
      },
      "throws": []
    },
    {
      "name": "getBasicBlocks",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.ArrayList\u003cghidra.program.model.pcode.PcodeBlockBasic\u003e",
        "type_short": "ArrayList",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressFactory",
        "type_short": "AddressFactory",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTypeManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
        "type_short": "PcodeDataTypeManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "id",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createFromStorage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "storage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": ""
        },
        {
          "name": "logicalSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setInput",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "val",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildVarnodeRefs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "symbolId",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighSymbol",
        "type_short": "HighSymbol",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setAddrTied",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "val",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPersistent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "val",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setUnaffected",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "val",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMergeGroup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "val",
          "type_long": "short",
          "type_short": "short",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildOpRefs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOpRef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp",
        "type_short": "PcodeOp",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insertBefore",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newop",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "follow",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insertAfter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newop",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "prev",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setOpcode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "opc",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setOutput",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "unSetOutput",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setInput",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "slot",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "unSetInput",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        },
        {
          "name": "slot",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "unInsert",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "delete",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "unlink",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOpAST",
          "type_short": "PcodeOpAST",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newOp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sq",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": ""
        },
        {
          "name": "opc",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "inputs",
          "type_long": "java.util.ArrayList\u003cghidra.program.model.pcode.Varnode\u003e",
          "type_short": "ArrayList",
          "comment": ""
        },
        {
          "name": "output",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp",
        "type_short": "PcodeOp",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.UnknownInstructionException",
          "type_short": "UnknownInstructionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readVarnodeXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readBasicBlockXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "resolver",
          "type_long": "ghidra.program.model.pcode.BlockMap",
          "type_short": "BlockMap",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readBlockEdgeXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    }
  ]
}
