{
  "name": "HighVariable",
  "comment": "A High-level variable (as in a high-level language like C/C++)\n built out of Varnodes (low-level variables).  This is a base-class",
  "javadoc": "A High-level variable (as in a high-level language like C/C++)\n built out of Varnodes (low-level variables).  This is a base-class",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "type",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "represent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode",
      "type_short": "Varnode",
      "constant_value": null
    },
    {
      "name": "instances",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode[]",
      "type_short": "ghidra.program.model.pcode.Varnode[]",
      "constant_value": null
    },
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "function",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.HighFunction",
      "type_short": "HighFunction",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for use with restoreXml",
      "javadoc": "Constructor for use with restoreXml\n@param func is the HighFunction this variable belongs to",
      "static": false,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.pcode.HighFunction",
          "type_short": "HighFunction",
          "comment": "is the HighFunction this variable belongs to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "tp",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "rep",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "inst",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": ""
        },
        {
          "name": "func",
          "type_long": "ghidra.program.model.pcode.HighFunction",
          "type_short": "HighFunction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setHighOnInstances",
      "comment": "Link Varnodes directly to this HighVariable",
      "javadoc": "Link Varnodes directly to this HighVariable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHighFunction",
      "comment": "",
      "javadoc": "@return the high function associated with this variable.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighFunction",
        "type_short": "HighFunction",
        "comment": "the high function associated with this variable."
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "@return get the name of the variable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "get the name of the variable"
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "",
      "javadoc": "@return get the size of the variable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "get the size of the variable"
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "",
      "javadoc": "@return get the data type attached to the variable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "get the data type attached to the variable"
      },
      "throws": []
    },
    {
      "name": "getRepresentative",
      "comment": "",
      "javadoc": "@return get the varnode that represents this variable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "get the varnode that represents this variable"
      },
      "throws": []
    },
    {
      "name": "getInstances",
      "comment": "A variable can reside in different locations at various times.\n Get all the instances of the variable.",
      "javadoc": "A variable can reside in different locations at various times.\n Get all the instances of the variable.\n@return all the variables instances",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode[]",
        "type_short": "ghidra.program.model.pcode.Varnode[]",
        "comment": "all the variables instances"
      },
      "throws": []
    },
    {
      "name": "getSymbol",
      "comment": "Retrieve any underlying HighSymbol",
      "javadoc": "Retrieve any underlying HighSymbol\n@return the HighSymbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighSymbol",
        "type_short": "HighSymbol",
        "comment": "the HighSymbol"
      },
      "throws": []
    },
    {
      "name": "getOffset",
      "comment": "Get the offset of this variable into its containing HighSymbol.  If the value\n is -1, this indicates that this HighVariable matches the size and storage of the symbol.",
      "javadoc": "Get the offset of this variable into its containing HighSymbol.  If the value\n is -1, this indicates that this HighVariable matches the size and storage of the symbol.\n@return the offset",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the offset"
      },
      "throws": []
    },
    {
      "name": "attachInstances",
      "comment": "Attach an instance or additional location the variable can be found in.",
      "javadoc": "Attach an instance or additional location the variable can be found in.\n@param inst varnode where variable can reside.\n@param rep location that variable comes into scope.",
      "static": false,
      "params": [
        {
          "name": "inst",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": "varnode where variable can reside."
        },
        {
          "name": "rep",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "location that variable comes into scope."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreInstances",
      "comment": "Restore the data-type and the Varnode instances of this HighVariable.\n The \"representative\" Varnode is also populated.",
      "javadoc": "Restore the data-type and the Varnode instances of this HighVariable.\n The \"representative\" Varnode is also populated.\n@param parser is the XML stream\n@param el is the root {@code \u003chigh\u003e} tag\n@throws PcodeXMLException if the XML is not valid",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML stream"
        },
        {
          "name": "el",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": "is the root  tag"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "if the XML is not valid"
        }
      ]
    },
    {
      "name": "requiresDynamicStorage",
      "comment": "Return true in when the HighVariable should be recorded (in the database) using dynamic storage\n rather than using the actual address space and offset of the representative varnode.  Dynamic storage\n is typically needed if the actual storage is ephemeral (in the unique space).",
      "javadoc": "Return true in when the HighVariable should be recorded (in the database) using dynamic storage\n rather than using the actual address space and offset of the representative varnode.  Dynamic storage\n is typically needed if the actual storage is ephemeral (in the unique space).\n@return true if this needs dynamic storage",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this needs dynamic storage"
      },
      "throws": []
    },
    {
      "name": "restoreXml",
      "comment": "Restore this HighVariable from a  XML tag",
      "javadoc": "Restore this HighVariable from a {@code \u003chigh\u003e} XML tag\n@param parser is the XML stream\n@throws PcodeXMLException if the XML is not valid",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "if the XML is not valid"
        }
      ]
    }
  ]
}
