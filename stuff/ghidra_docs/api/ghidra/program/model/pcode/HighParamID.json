{
  "name": "HighParamID",
  "comment": "High-level abstraction associated with a low level function made up of assembly instructions.\n Based on information the decompiler has produced after working on a function.",
  "javadoc": "High-level abstraction associated with a low level function made up of assembly instructions.\n Based on information the decompiler has produced after working on a function.",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.pcode.PcodeSyntaxTree",
  "fields": [
    {
      "name": "DECOMPILER_TAG_MAP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"decompiler_tags\""
    },
    {
      "name": "func",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Function",
      "type_short": "Function",
      "constant_value": null
    },
    {
      "name": "functionname",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "functionaddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "modelname",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "protoextrapop",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Integer",
      "type_short": "Integer",
      "constant_value": null
    },
    {
      "name": "inputlist",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.pcode.ParamMeasure\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "outputlist",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.pcode.ParamMeasure\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@param function function associated with the higher level function abstraction.\n@param language language parser used to disassemble/get info on the language.\n@param compilerSpec the compiler spec.\n@param dtManager data type manager.",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "function associated with the higher level function abstraction."
        },
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "language parser used to disassemble/get info on the language."
        },
        {
          "name": "compilerSpec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": "the compiler spec."
        },
        {
          "name": "dtManager",
          "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
          "type_short": "PcodeDataTypeManager",
          "comment": "data type manager."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionName",
      "comment": "",
      "javadoc": "@return get the name of the function",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "get the name of the function"
      },
      "throws": []
    },
    {
      "name": "getFunctionAddress",
      "comment": "",
      "javadoc": "@return get the Address of the function",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "get the Address of the function"
      },
      "throws": []
    },
    {
      "name": "getModelName",
      "comment": "",
      "javadoc": "@return get the name of the model",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "get the name of the model"
      },
      "throws": []
    },
    {
      "name": "getProtoExtraPop",
      "comment": "",
      "javadoc": "@return get the prototype extrapop information",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Integer",
        "type_short": "Integer",
        "comment": "get the prototype extrapop information"
      },
      "throws": []
    },
    {
      "name": "getFunction",
      "comment": "",
      "javadoc": "@return get the associated low level function",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "get the associated low level function"
      },
      "throws": []
    },
    {
      "name": "getNumInputs",
      "comment": "",
      "javadoc": "@return the number of inputs for functionparams",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of inputs for functionparams"
      },
      "throws": []
    },
    {
      "name": "getInput",
      "comment": "",
      "javadoc": "@param i is the specific index to return\n@return the specific input for functionparams",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the specific index to return"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.ParamMeasure",
        "type_short": "ParamMeasure",
        "comment": "the specific input for functionparams"
      },
      "throws": []
    },
    {
      "name": "getNumOutputs",
      "comment": "",
      "javadoc": "@return the number of outputs for functionparams",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of outputs for functionparams"
      },
      "throws": []
    },
    {
      "name": "getOutput",
      "comment": "",
      "javadoc": "@param i is the index of the specific output\n@return the specific of output for functionparams",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the index of the specific output"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.ParamMeasure",
        "type_short": "ParamMeasure",
        "comment": "the specific of output for functionparams"
      },
      "throws": []
    },
    {
      "name": "readXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parseParamMeasureXML",
      "comment": "Read in the inputs or outputs list for this function from an XML rep",
      "javadoc": "Read in the inputs or outputs list for this function from an XML rep\n@param parser is the XML parser\n@param pmlist is populated with the resulting list\n@param tag is the name of the tag\n@throws PcodeXMLException for improperly formed XML",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML parser"
        },
        {
          "name": "pmlist",
          "type_long": "java.util.List\u003cghidra.program.model.pcode.ParamMeasure\u003e",
          "type_short": "List",
          "comment": "is populated with the resulting list"
        },
        {
          "name": "tag",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the name of the tag"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "for improperly formed XML"
        }
      ]
    },
    {
      "name": "getErrorHandler",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "errOriginator",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "targetName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "org.xml.sax.ErrorHandler",
        "type_short": "ErrorHandler",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "stringTree",
      "comment": "Create and XML SAX parse tree from an input XML string\n \n TODO: this probably doesn\u0027t belong here.",
      "javadoc": "Create and XML SAX parse tree from an input XML string\n \n TODO: this probably doesn\u0027t belong here.\n@param xml string to parse\n@param handler is the error handler\n@return an XML tree element\n@throws PcodeXMLException for improper XML",
      "static": true,
      "params": [
        {
          "name": "xml",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string to parse"
        },
        {
          "name": "handler",
          "type_long": "org.xml.sax.ErrorHandler",
          "type_short": "ErrorHandler",
          "comment": "is the error handler"
        }
      ],
      "return": {
        "type_long": "ghidra.xml.XmlPullParser",
        "type_short": "XmlPullParser",
        "comment": "an XML tree element"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "for improper XML"
        }
      ]
    },
    {
      "name": "storeReturnToDatabase",
      "comment": "Update any parameters for this Function from parameters defined in this map.",
      "javadoc": "Update any parameters for this Function from parameters defined in this map.\n@param storeDataTypes is true if data-types are getting stored\n@param srctype function signature source",
      "static": false,
      "params": [
        {
          "name": "storeDataTypes",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "is true if data-types are getting stored"
        },
        {
          "name": "srctype",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "function signature source"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "storeParametersToDatabase",
      "comment": "Update any parameters for this Function from parameters defined in this map.\n   Originally from LocalSymbolMap, but being modified.",
      "javadoc": "Update any parameters for this Function from parameters defined in this map.\n   Originally from LocalSymbolMap, but being modified.\n@param storeDataTypes is true if data-types are being stored\n@param srctype function signature source",
      "static": false,
      "params": [
        {
          "name": "storeDataTypes",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "is true if data-types are being stored"
        },
        {
          "name": "srctype",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "function signature source"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "paramStorageMatches",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "params",
          "type_long": "java.util.List\u003cghidra.program.model.listing.Variable\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
