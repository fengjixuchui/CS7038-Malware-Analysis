{
  "name": "MappedEntry",
  "comment": "A normal mapping of a HighSymbol to a particular Address, consuming a set number of bytes",
  "javadoc": "A normal mapping of a HighSymbol to a particular Address, consuming a set number of bytes",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.pcode.SymbolEntry",
  "fields": [
    {
      "name": "storage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.VariableStorage",
      "type_short": "VariableStorage",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "For use with restoreXML",
      "javadoc": "For use with restoreXML\n@param sym is the owning symbol",
      "static": false,
      "params": [
        {
          "name": "sym",
          "type_long": "ghidra.program.model.pcode.HighSymbol",
          "type_short": "HighSymbol",
          "comment": "is the owning symbol"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct given a symbol, storage, and first-use Address",
      "javadoc": "Construct given a symbol, storage, and first-use Address\n@param sym is the given symbol\n@param store is the given storage\n@param addr is the first-use Address (or null)",
      "static": false,
      "params": [
        {
          "name": "sym",
          "type_long": "ghidra.program.model.pcode.HighSymbol",
          "type_short": "HighSymbol",
          "comment": "is the given symbol"
        },
        {
          "name": "store",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": "is the given storage"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is the first-use Address (or null)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "saveXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStorage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isReadOnly",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isVolatile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
