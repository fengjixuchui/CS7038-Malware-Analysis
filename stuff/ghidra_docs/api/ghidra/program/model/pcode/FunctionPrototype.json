{
  "name": "FunctionPrototype",
  "comment": "High-level prototype of a function based on Varnodes, describing the inputs and outputs\n of this function.",
  "javadoc": "High-level prototype of a function based on Varnodes, describing the inputs and outputs\n of this function.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "localsyms",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.LocalSymbolMap",
      "type_short": "LocalSymbolMap",
      "constant_value": null
    },
    {
      "name": "modelname",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "gconv",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.GenericCallingConvention",
      "type_short": "GenericCallingConvention",
      "constant_value": null
    },
    {
      "name": "injectname",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "returntype",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "returnstorage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.VariableStorage",
      "type_short": "VariableStorage",
      "constant_value": null
    },
    {
      "name": "params",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.ParameterDefinition[]",
      "type_short": "ghidra.program.model.data.ParameterDefinition[]",
      "constant_value": null
    },
    {
      "name": "modellock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "voidinputlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "outputlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "dotdotdot",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "extrapop",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "isinline",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "noreturn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "custom",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "hasThis",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isConstruct",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isDestruct",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a FunctionPrototype backed by a local symbolmap.\n This is only a partial initialization.  It is intended to be followed either by\n grabFromFunction() or readPrototypeXML()",
      "javadoc": "Construct a FunctionPrototype backed by a local symbolmap.\n This is only a partial initialization.  It is intended to be followed either by\n grabFromFunction() or readPrototypeXML()\n@param ls is the LocalSymbolMap backing the prototype\n@param func is the function using the symbolmap",
      "static": false,
      "params": [
        {
          "name": "ls",
          "type_long": "ghidra.program.model.pcode.LocalSymbolMap",
          "type_short": "LocalSymbolMap",
          "comment": "is the LocalSymbolMap backing the prototype"
        },
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "is the function using the symbolmap"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an internally backed prototype based on a FunctionSignature prototype",
      "javadoc": "Construct an internally backed prototype based on a FunctionSignature prototype\n@param proto is the FunctionSignature used to internally back input parameters\n@param cspec is the compiler spec used to pick prototype model\n@param voidimpliesdotdotdot set to true if a void prototype is interpreted as varargs",
      "static": false,
      "params": [
        {
          "name": "proto",
          "type_long": "ghidra.program.model.listing.FunctionSignature",
          "type_short": "FunctionSignature",
          "comment": "is the FunctionSignature used to internally back input parameters"
        },
        {
          "name": "cspec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": "is the compiler spec used to pick prototype model"
        },
        {
          "name": "voidimpliesdotdotdot",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "set to true if a void prototype is interpreted as varargs"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "grabFromFunction",
      "comment": "Populate Function Prototype from information attached to a function in the Program DB.",
      "javadoc": "Populate Function Prototype from information attached to a function in the Program DB.\n@param f is the function to grab prototype from\n@param overrideExtrapop is the override value to use for extrapop\n@param doOverride is true if the override value should be used",
      "static": false,
      "params": [
        {
          "name": "f",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "is the function to grab prototype from"
        },
        {
          "name": "overrideExtrapop",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the override value to use for extrapop"
        },
        {
          "name": "doOverride",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "is true if the override value should be used"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isNoReturnInjection",
      "comment": "check if the code injection does not return",
      "javadoc": "check if the code injection does not return",
      "static": false,
      "params": [
        {
          "name": "f",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "fixupname",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumParams",
      "comment": "",
      "javadoc": "@return the number of defined parameters for this function prototype",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of defined parameters for this function prototype"
      },
      "throws": []
    },
    {
      "name": "getParam",
      "comment": "",
      "javadoc": "@param i i\u0027th parameter index\n@return the i\u0027th HighParam to this function prototype or null\n if this prototype is not backed by a LocalSymbolMap",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": "i\u0027th parameter index"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighSymbol",
        "type_short": "HighSymbol",
        "comment": "the i\u0027th HighParam to this function prototype or null\n if this prototype is not backed by a LocalSymbolMap"
      },
      "throws": []
    },
    {
      "name": "getParameterDefinitions",
      "comment": "",
      "javadoc": "@return parameter definitions if prototype was produced\n from a FunctionSignature or null if backed by a \n LocalSymbolMap",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.ParameterDefinition[]",
        "type_short": "ghidra.program.model.data.ParameterDefinition[]",
        "comment": "parameter definitions if prototype was produced\n from a FunctionSignature or null if backed by a \n LocalSymbolMap"
      },
      "throws": []
    },
    {
      "name": "isBackedByLocalSymbolMap",
      "comment": "",
      "javadoc": "@return true if this prototype is backed by a LocalSymbolMap, or \n false if generated from a FunctionSignature.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this prototype is backed by a LocalSymbolMap, or \n false if generated from a FunctionSignature."
      },
      "throws": []
    },
    {
      "name": "getReturnType",
      "comment": "",
      "javadoc": "@return the return type for the function",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the return type for the function"
      },
      "throws": []
    },
    {
      "name": "getReturnStorage",
      "comment": "",
      "javadoc": "@return the return storage for the function",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": "the return storage for the function"
      },
      "throws": []
    },
    {
      "name": "getExtraPop",
      "comment": "",
      "javadoc": "@return the number of extra bytes popped off by this functions return",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of extra bytes popped off by this functions return"
      },
      "throws": []
    },
    {
      "name": "isVarArg",
      "comment": "",
      "javadoc": "@return true if this function has variable arguments",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this function has variable arguments"
      },
      "throws": []
    },
    {
      "name": "isInline",
      "comment": "",
      "javadoc": "@return true if this function should be inlined by the decompile",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this function should be inlined by the decompile"
      },
      "throws": []
    },
    {
      "name": "hasNoReturn",
      "comment": "",
      "javadoc": "@return true if calls to this function do not return",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if calls to this function do not return"
      },
      "throws": []
    },
    {
      "name": "hasThisPointer",
      "comment": "",
      "javadoc": "@return true if this function is a method taking a \u0027this\u0027 pointer as a parameter",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this function is a method taking a \u0027this\u0027 pointer as a parameter"
      },
      "throws": []
    },
    {
      "name": "isConstructor",
      "comment": "",
      "javadoc": "@return true if this function is an (object-oriented) constructor",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this function is an (object-oriented) constructor"
      },
      "throws": []
    },
    {
      "name": "isDestructor",
      "comment": "",
      "javadoc": "@return true if this function is an (object-oriented) destructor",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this function is an (object-oriented) destructor"
      },
      "throws": []
    },
    {
      "name": "getModelName",
      "comment": "",
      "javadoc": "@return calling convention model name specific to the associated compiler spec",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "calling convention model name specific to the associated compiler spec"
      },
      "throws": []
    },
    {
      "name": "getGenericCallingConvention",
      "comment": "",
      "javadoc": "@return generic calling convention",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.GenericCallingConvention",
        "type_short": "GenericCallingConvention",
        "comment": "generic calling convention"
      },
      "throws": []
    },
    {
      "name": "buildPrototypeXML",
      "comment": "append an XML string representing this function prototype",
      "javadoc": "append an XML string representing this function prototype\n@param res is where the string should be appended\n@param dtmanage is the DataTypeManager for building type reference tags",
      "static": false,
      "params": [
        {
          "name": "res",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is where the string should be appended"
        },
        {
          "name": "dtmanage",
          "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
          "type_short": "PcodeDataTypeManager",
          "comment": "is the DataTypeManager for building type reference tags"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readPrototypeXML",
      "comment": "Parse the function prototype from  tag.",
      "javadoc": "Parse the function prototype from {@code \u003cprototype\u003e} tag.\n@param parser is the XML document to parse\n@param dtmanage is the DataTypeManager used to parse data-type tags\n@throws PcodeXMLException for any problems parsing",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML document to parse"
        },
        {
          "name": "dtmanage",
          "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
          "type_short": "PcodeDataTypeManager",
          "comment": "is the DataTypeManager used to parse data-type tags"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "for any problems parsing"
        }
      ]
    }
  ]
}
