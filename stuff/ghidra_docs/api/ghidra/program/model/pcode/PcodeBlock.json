{
  "name": "PcodeBlock",
  "comment": "Blocks of PcodeOps",
  "javadoc": "Blocks of PcodeOps",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "index",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "blocktype",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "parent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.PcodeBlock",
      "type_short": "PcodeBlock",
      "constant_value": null
    },
    {
      "name": "intothis",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.program.model.pcode.PcodeBlock.BlockEdge\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "outofthis",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.program.model.pcode.PcodeBlock.BlockEdge\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "PLAIN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "BASIC",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "GRAPH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "COPY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "GOTO",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "MULTIGOTO",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "LIST",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "CONDITION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "7"
    },
    {
      "name": "PROPERIF",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "IFELSE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "9"
    },
    {
      "name": "IFGOTO",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "10"
    },
    {
      "name": "WHILEDO",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "11"
    },
    {
      "name": "DOWHILE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "12"
    },
    {
      "name": "SWITCH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "13"
    },
    {
      "name": "INFLOOP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "14"
    }
  ],
  "methods": [
    {
      "name": "typeToName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "nameToType",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStart",
      "comment": "",
      "javadoc": "@return the first Address covered by this block",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the first Address covered by this block"
      },
      "throws": []
    },
    {
      "name": "getStop",
      "comment": "",
      "javadoc": "@return the last Address covered by this block",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the last Address covered by this block"
      },
      "throws": []
    },
    {
      "name": "setIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeBlock",
        "type_short": "PcodeBlock",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addInEdge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "ghidra.program.model.pcode.PcodeBlock",
          "type_short": "PcodeBlock",
          "comment": ""
        },
        {
          "name": "lab",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreNextInEdge",
      "comment": "Restore the next input edge via XML",
      "javadoc": "Restore the next input edge via XML\n@param parser\n@param resolver\n@throws PcodeXMLException",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "resolver",
          "type_long": "ghidra.program.model.pcode.BlockMap",
          "type_short": "BlockMap",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "restoreNextInEdge",
      "comment": "Restore the next input edge via XML. Resolve block indices via a blockList",
      "javadoc": "Restore the next input edge via XML. Resolve block indices via a blockList\n@param parser\n@param blockList allows lookup of PcodeBlock via index\n@throws PcodeXMLException",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "blockList",
          "type_long": "java.util.ArrayList\u003c? extends ghidra.program.model.pcode.PcodeBlock\u003e",
          "type_short": "ArrayList",
          "comment": "allows lookup of PcodeBlock via index"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getIn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeBlock",
        "type_short": "PcodeBlock",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOut",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeBlock",
        "type_short": "PcodeBlock",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOutRevIndex",
      "comment": "Get reverse index of the i-th outgoing block. I.e this.getOut(i).getIn(reverse_index) \u003d\u003d this",
      "javadoc": "Get reverse index of the i-th outgoing block. I.e this.getOut(i).getIn(reverse_index) \u003d\u003d this\n@param i is the outgoing block to request reverse index from\n@return the reverse index",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the outgoing block to request reverse index from"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the reverse index"
      },
      "throws": []
    },
    {
      "name": "getInRevIndex",
      "comment": "Get reverse index of the i-th incoming block. I.e. this.getIn(i).getOut(reverse_index) \u003d\u003d this",
      "javadoc": "Get reverse index of the i-th incoming block. I.e. this.getIn(i).getOut(reverse_index) \u003d\u003d this\n@param i is the incoming block to request reverse index from\n@return the reverse index",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the incoming block to request reverse index from"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the reverse index"
      },
      "throws": []
    },
    {
      "name": "getFalseOut",
      "comment": "Assuming paths out of this block depend on a boolean condition",
      "javadoc": "Assuming paths out of this block depend on a boolean condition\n@return the PcodeBlock coming out of this if the condition is false",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeBlock",
        "type_short": "PcodeBlock",
        "comment": "the PcodeBlock coming out of this if the condition is false"
      },
      "throws": []
    },
    {
      "name": "getTrueOut",
      "comment": "Assuming paths out of this block depend on a boolean condition",
      "javadoc": "Assuming paths out of this block depend on a boolean condition\n@return the PcodeBlock coming out of this if the condition is true",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeBlock",
        "type_short": "PcodeBlock",
        "comment": "the PcodeBlock coming out of this if the condition is true"
      },
      "throws": []
    },
    {
      "name": "getInSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOutSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "calcDepth",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leaf",
          "type_long": "ghidra.program.model.pcode.PcodeBlock",
          "type_short": "PcodeBlock",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFrontLeaf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeBlock",
        "type_short": "PcodeBlock",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveXmlHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXmlHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "el",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "saveXmlBody",
      "comment": "Serialize information about the block to XML,\n other than header and edge info",
      "javadoc": "Serialize information about the block to XML,\n other than header and edge info\n@param writer is where to serialize to\n@throws IOException if there is a problem with the stream",
      "static": false,
      "params": [
        {
          "name": "writer",
          "type_long": "java.io.Writer",
          "type_short": "Writer",
          "comment": "is where to serialize to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem with the stream"
        }
      ]
    },
    {
      "name": "saveXmlEdges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "writer",
          "type_long": "java.io.Writer",
          "type_short": "Writer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "restoreXmlBody",
      "comment": "Restore the any additional information beyond header and edges from XML",
      "javadoc": "Restore the any additional information beyond header and edges from XML\n@param parser is the XML parser\n@param resolver is for looking up edge references\n@throws PcodeXMLException for invalid XML descriptions",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML parser"
        },
        {
          "name": "resolver",
          "type_long": "ghidra.program.model.pcode.BlockMap",
          "type_short": "BlockMap",
          "comment": "is for looking up edge references"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "for invalid XML descriptions"
        }
      ]
    },
    {
      "name": "restoreXmlEdges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "resolver",
          "type_long": "ghidra.program.model.pcode.BlockMap",
          "type_short": "BlockMap",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "saveXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "writer",
          "type_long": "java.io.Writer",
          "type_short": "Writer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "restoreXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "resolver",
          "type_long": "ghidra.program.model.pcode.BlockMap",
          "type_short": "BlockMap",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    }
  ]
}
