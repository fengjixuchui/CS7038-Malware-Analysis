{
  "name": "AddressXML",
  "comment": "Utility class for the myriad ways of marshaling/unmarshaling an address and an optional size,\n to/from XML for the various configuration files.\n \n An object of the class itself is the most general form, where the specified address\n   - MAY have an associated size given in bytes\n   - MAY be in the JOIN address space, with physical pieces making up the logical value explicitly provided.\n \n The static buildXML methods write out an \\ tag given component elements without allocating an object.\n The static readXML methods read XML tags (presented in different forms) and returns an Address object.\n The static appendAttributes methods write out attributes of an address to an arbitrary XML tag.\n The static restoreXML methods read an \\ tag and produce a general AddressXML object.",
  "javadoc": "Utility class for the myriad ways of marshaling/unmarshaling an address and an optional size,\n to/from XML for the various configuration files.\n \n An object of the class itself is the most general form, where the specified address\n   - MAY have an associated size given in bytes\n   - MAY be in the JOIN address space, with physical pieces making up the logical value explicitly provided.\n \n The static buildXML methods write out an \\\u003caddr\u003e tag given component elements without allocating an object.\n The static readXML methods read XML tags (presented in different forms) and returns an Address object.\n The static appendAttributes methods write out attributes of an address to an arbitrary XML tag.\n The static restoreXML methods read an \\\u003caddr\u003e tag and produce a general AddressXML object.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "space",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    },
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "joinRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode[]",
      "type_short": "ghidra.program.model.pcode.Varnode[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Internal constructor for incremental initialization",
      "javadoc": "Internal constructor for incremental initialization",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an Address range as a space/offset/size",
      "javadoc": "Construct an Address range as a space/offset/size\n@param spc is the address space containing the range\n@param off is the starting byte offset of the range\n@param sz is the size of the range in bytes",
      "static": false,
      "params": [
        {
          "name": "spc",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "is the address space containing the range"
        },
        {
          "name": "off",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the starting byte offset of the range"
        },
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the size of the range in bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a logical memory range, representing multiple ranges pieced together.\n The logical range is assigned an address in the JOIN address space.\n The physical pieces making up the logical range are passed in as a sequence of\n Varnodes representing, in order, the most significant through the least significant\n portions of the value.",
      "javadoc": "Construct a logical memory range, representing multiple ranges pieced together.\n The logical range is assigned an address in the JOIN address space.\n The physical pieces making up the logical range are passed in as a sequence of\n Varnodes representing, in order, the most significant through the least significant\n portions of the value.\n@param spc is the JOIN address space (must have a type of AddressSpace.TYPE_JOIN)\n@param off is the offset of the logical value within the JOIN space\n@param sz is the number of bytes in the logical value\n@param pieces is the array of 1 or more physical pieces",
      "static": false,
      "params": [
        {
          "name": "spc",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "is the JOIN address space (must have a type of AddressSpace.TYPE_JOIN)"
        },
        {
          "name": "off",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the offset of the logical value within the JOIN space"
        },
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the number of bytes in the logical value"
        },
        {
          "name": "pieces",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": "is the array of 1 or more physical pieces"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readJoinXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "el",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": ""
        },
        {
          "name": "cspec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "saveXml",
      "comment": "Write this sized address as an \\ XML tag.",
      "javadoc": "Write this sized address as an \\\u003caddr\u003e XML tag.\n@param buffer is the buffer to write to",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the buffer to write to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXml",
      "comment": "Restore an Address (as an AddressSpace and an offset) and an optional size from XML tag.\n The tag can have any name, but it must either have:\n    - A \"name\" attribute, indicating a register name  OR\n    - A \"space\" and \"offset\" attribute, indicating the address space and offset\n    \n If a register name is given, size is obtained from the register.  If an offset is\n given, the size can optionally be specified using a \"size\" attribute.\n If not explicitly described, the size is set to zero.\n \n This method supports the \"join\" address space attached to the compiler specification",
      "javadoc": "Restore an Address (as an AddressSpace and an offset) and an optional size from XML tag.\n The tag can have any name, but it must either have:\n    - A \"name\" attribute, indicating a register name  OR\n    - A \"space\" and \"offset\" attribute, indicating the address space and offset\n    \n If a register name is given, size is obtained from the register.  If an offset is\n given, the size can optionally be specified using a \"size\" attribute.\n If not explicitly described, the size is set to zero.\n \n This method supports the \"join\" address space attached to the compiler specification\n@param el is the XML tag\n@param cspec is the compiler spec for looking up registers\n@return an AddressXML object containing the recovered space,offset,size\n@throws XmlParseException for problems parsing",
      "static": true,
      "params": [
        {
          "name": "el",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": "is the XML tag"
        },
        {
          "name": "cspec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": "is the compiler spec for looking up registers"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.AddressXML",
        "type_short": "AddressXML",
        "comment": "an AddressXML object containing the recovered space,offset,size"
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": "for problems parsing"
        }
      ]
    },
    {
      "name": "restoreXml",
      "comment": "Restore an Address (as an AddressSpace and an offset) and an optional size from XML tag.\n The tag can have any name, but it must either have:\n    - A \"name\" attribute, indicating a register name  OR\n    - A \"space\" and \"offset\" attribute, indicating the address space and offset\n    \n If a register name is given, size is obtained from the register.  If an offset is\n given, the size can optionally be specified using a \"size\" attribute.\n If not explicitly described, the size is set to zero.",
      "javadoc": "Restore an Address (as an AddressSpace and an offset) and an optional size from XML tag.\n The tag can have any name, but it must either have:\n    - A \"name\" attribute, indicating a register name  OR\n    - A \"space\" and \"offset\" attribute, indicating the address space and offset\n    \n If a register name is given, size is obtained from the register.  If an offset is\n given, the size can optionally be specified using a \"size\" attribute.\n If not explicitly described, the size is set to zero.\n@param el is the XML tag\n@param language is the processor language for looking up registers and address spaces\n@return an AddressXML object containing the recovered space,offset,size\n@throws XmlParseException for problems parsing",
      "static": true,
      "params": [
        {
          "name": "el",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": "is the XML tag"
        },
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "is the processor language for looking up registers and address spaces"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.AddressXML",
        "type_short": "AddressXML",
        "comment": "an AddressXML object containing the recovered space,offset,size"
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": "for problems parsing"
        }
      ]
    },
    {
      "name": "restoreRangeXml",
      "comment": "A memory range is read from attributes of an XML tag. The tag must either have:\n    - \"name\" attribute - indicating a register \n    - \"space\" attribute - with optional \"first\" and \"last\" attributes\n \n With the \"space\" attribute, \"first\" defaults to 0 and \"last\" defaults to the last offset in the space.",
      "javadoc": "A memory range is read from attributes of an XML tag. The tag must either have:\n    - \"name\" attribute - indicating a register \n    - \"space\" attribute - with optional \"first\" and \"last\" attributes\n \n With the \"space\" attribute, \"first\" defaults to 0 and \"last\" defaults to the last offset in the space.\n@param el is the XML element\n@param cspec is a compiler spec to resolve address spaces and registers\n@return an AddressXML object representing the range\n@throws XmlParseException if the XML is badly formed",
      "static": true,
      "params": [
        {
          "name": "el",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": "is the XML element"
        },
        {
          "name": "cspec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": "is a compiler spec to resolve address spaces and registers"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.AddressXML",
        "type_short": "AddressXML",
        "comment": "an AddressXML object representing the range"
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": "if the XML is badly formed"
        }
      ]
    },
    {
      "name": "getAddressSpace",
      "comment": "",
      "javadoc": "@return the space associated of this address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": "the space associated of this address"
      },
      "throws": []
    },
    {
      "name": "getOffset",
      "comment": "",
      "javadoc": "@return the byte offset of this address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the byte offset of this address"
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "",
      "javadoc": "@return the size in bytes associated with this address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the size in bytes associated with this address"
      },
      "throws": []
    },
    {
      "name": "getJoinRecord",
      "comment": "Get the array of physical pieces making up this logical address range, if\n the range is in the JOIN address space. Otherwise return null.",
      "javadoc": "Get the array of physical pieces making up this logical address range, if\n the range is in the JOIN address space. Otherwise return null.\n@return the physical pieces or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode[]",
        "type_short": "ghidra.program.model.pcode.Varnode[]",
        "comment": "the physical pieces or null"
      },
      "throws": []
    },
    {
      "name": "getVarnode",
      "comment": "Build a raw Varnode from the Address and size",
      "javadoc": "Build a raw Varnode from the Address and size\n@return the new Varnode",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "the new Varnode"
      },
      "throws": []
    },
    {
      "name": "getFirstAddress",
      "comment": "",
      "javadoc": "@return the first address in the range",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the first address in the range"
      },
      "throws": []
    },
    {
      "name": "getLastAddress",
      "comment": "",
      "javadoc": "@return the last address in the range",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the last address in the range"
      },
      "throws": []
    },
    {
      "name": "readXML",
      "comment": "Parse String containing an XML tag representing an Address.\n The format options are simple enough that we don\u0027t try to invoke\n an actual XML parser but just walk the string. This recognizes\n   - \\\n   - \\ or\n   - any tag with a \"space\" and \"offset\" attribute",
      "javadoc": "Parse String containing an XML tag representing an Address.\n The format options are simple enough that we don\u0027t try to invoke\n an actual XML parser but just walk the string. This recognizes\n   - \\\u003caddr\u003e\n   - \\\u003cspaceid\u003e or\n   - any tag with a \"space\" and \"offset\" attribute\n@param addrstring is the string containing the XML tag\n@param addrfactory is the factory that can produce addresses\n@return the created Address or Address.NO_ADDRESS in some special cases\n@throws PcodeXMLException for a badly formed Address",
      "static": true,
      "params": [
        {
          "name": "addrstring",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the string containing the XML tag"
        },
        {
          "name": "addrfactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": "is the factory that can produce addresses"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the created Address or Address.NO_ADDRESS in some special cases"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "for a badly formed Address"
        }
      ]
    },
    {
      "name": "readXMLSize",
      "comment": "Read the (first) size attribute from an XML tag string as an integer",
      "javadoc": "Read the (first) size attribute from an XML tag string as an integer\n@param addrxml is the XML string\n@return the decoded integer or zero if the attribute doesn\u0027t exist",
      "static": true,
      "params": [
        {
          "name": "addrxml",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the XML string"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the decoded integer or zero if the attribute doesn\u0027t exist"
      },
      "throws": []
    },
    {
      "name": "readXML",
      "comment": "Create an address from an XML parse tree node. This recognizes XML tags\n   - \\\n   - \\\n   - \\ or\n   - any tag with \"space\" and \"offset\" attributes\n \n An empty \\ tag, with no attributes, results in Address.NO_ADDRESS being returned.",
      "javadoc": "Create an address from an XML parse tree node. This recognizes XML tags\n   - \\\u003caddr\u003e\n   - \\\u003cspaceid\u003e\n   - \\\u003ciop\u003e or\n   - any tag with \"space\" and \"offset\" attributes\n \n An empty \\\u003caddr\u003e tag, with no attributes, results in Address.NO_ADDRESS being returned.\n@param el is the parse tree element\n@param addrFactory address factory used to create valid addresses\n@return Address created from XML info",
      "static": true,
      "params": [
        {
          "name": "el",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": "is the parse tree element"
        },
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": "address factory used to create valid addresses"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address created from XML info"
      },
      "throws": []
    },
    {
      "name": "readXML",
      "comment": "Read an Address given an XML tag name and its attributes. This recognizes XML tags\n   - \\\n   - \\\n   - \\\n   - any tag with \"space\" or \"offset\" attributes\n \n An empty \\ tag, with no attributes, results in Address.NO_ADDRESS being returned.",
      "javadoc": "Read an Address given an XML tag name and its attributes. This recognizes XML tags\n   - \\\u003caddr\u003e\n   - \\\u003cspaceid\u003e\n   - \\\u003ciop\u003e\n   - any tag with \"space\" or \"offset\" attributes\n \n An empty \\\u003caddr\u003e tag, with no attributes, results in Address.NO_ADDRESS being returned.\n@param localName is the name of the tag\n@param attr is the collection of attributes for the tag\n@param addrFactory is an Address factory\n@return the scanned address",
      "static": true,
      "params": [
        {
          "name": "localName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the name of the tag"
        },
        {
          "name": "attr",
          "type_long": "org.xml.sax.Attributes",
          "type_short": "Attributes",
          "comment": "is the collection of attributes for the tag"
        },
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": "is an Address factory"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the scanned address"
      },
      "throws": []
    },
    {
      "name": "appendAttributes",
      "comment": "Append \"space\" and \"offset\" attributes describing the given Address to the XML stream.\n This assumes the XML tag name has already been emitted.",
      "javadoc": "Append \"space\" and \"offset\" attributes describing the given Address to the XML stream.\n This assumes the XML tag name has already been emitted.\n@param buf is the XML stream\n@param addr is the given Address",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the XML stream"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is the given Address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "appendAttributes",
      "comment": "Append \"space\" \"offset\" and \"size\" attributes describing the given memory range to the XML stream.\n This assumes the XML tag name has already been emitted.",
      "javadoc": "Append \"space\" \"offset\" and \"size\" attributes describing the given memory range to the XML stream.\n This assumes the XML tag name has already been emitted.\n@param buf is the XML stream\n@param addr is the starting Address of the memory range\n@param size is the size of the memory range",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the XML stream"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is the starting Address of the memory range"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the size of the memory range"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "appendAttributes",
      "comment": "Append a memory range, as \"space\", \"first\", and \"last\" attributes, to the XML stream.\n This assumes the XML tag name has already been emitted.",
      "javadoc": "Append a memory range, as \"space\", \"first\", and \"last\" attributes, to the XML stream.\n This assumes the XML tag name has already been emitted.\n@param buffer is the XML stream\n@param startAddr is the first address in the range\n@param endAddr is the last address in the range",
      "static": true,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the XML stream"
        },
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is the first address in the range"
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is the last address in the range"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildXML",
      "comment": "Write out the given Address as an \\ tag to the XML stream",
      "javadoc": "Write out the given Address as an \\\u003caddr\u003e tag to the XML stream\n@param buf is the XML stream\n@param addr -- Address to convert to XML",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the XML stream"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "-- Address to convert to XML"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildXML",
      "comment": "Write out the given Address and a size as an \\ tag to the XML stream",
      "javadoc": "Write out the given Address and a size as an \\\u003caddr\u003e tag to the XML stream\n@param buf is the XML stream\n@param addr is the given Address\n@param size is the given size",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the XML stream"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is the given Address"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the given size"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildVarnodePiece",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildXML",
      "comment": "Write out a sequence of Varnodes as a single \\ tag to an XML stream.\n If there is more than one Varnode, or if the logical size is non-zero,\n the \\ tag will specify the address space as \"join\" and will have\n additional \"piece\" attributes.",
      "javadoc": "Write out a sequence of Varnodes as a single \\\u003caddr\u003e tag to an XML stream.\n If there is more than one Varnode, or if the logical size is non-zero,\n the \\\u003caddr\u003e tag will specify the address space as \"join\" and will have\n additional \"piece\" attributes.\n@param buf is the XML stream\n@param varnodes is the sequence of storage varnodes\n@param logicalsize is the logical size value of the varnode",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the XML stream"
        },
        {
          "name": "varnodes",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": "is the sequence of storage varnodes"
        },
        {
          "name": "logicalsize",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the logical size value of the varnode"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
