{
  "name": "Varnode",
  "comment": "Rawest possible Varnode.\n Just a variable location and size, not part of a syntax tree.\n A raw varnode is said to be free, it is not attached to any variable.",
  "javadoc": "Rawest possible Varnode.\n Just a variable location and size, not part of a syntax tree.\n A raw varnode is said to be free, it is not attached to any variable.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "masks",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long[]",
      "type_short": "long[]",
      "constant_value": null
    },
    {
      "name": "address",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "spaceID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@param a location varnode attached to\n@param sz size of varnode",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "location varnode attached to"
        },
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of varnode"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@param a location varnode attached to\n@param sz size of varnode\n@param symbolKey associated symbol key",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "location varnode attached to"
        },
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of varnode"
        },
        {
          "name": "symbolKey",
          "type_long": "int",
          "type_short": "int",
          "comment": "associated symbol key"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "",
      "javadoc": "@return size of the varnode in bytes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "size of the varnode in bytes"
      },
      "throws": []
    },
    {
      "name": "getSpace",
      "comment": "",
      "javadoc": "@return the space this varnode belongs to (ram, register, ...)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the space this varnode belongs to (ram, register, ...)"
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "",
      "javadoc": "@return the address this varnode is attached to",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address this varnode is attached to"
      },
      "throws": []
    },
    {
      "name": "getPCAddress",
      "comment": "Get the address where this varnode is defined or\n NO_ADDRESS if this varnode is an input",
      "javadoc": "Get the address where this varnode is defined or\n NO_ADDRESS if this varnode is an input\n@return the address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address"
      },
      "throws": []
    },
    {
      "name": "getOffset",
      "comment": "",
      "javadoc": "@return the offset into the address space varnode is defined within",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the offset into the address space varnode is defined within"
      },
      "throws": []
    },
    {
      "name": "getWordOffset",
      "comment": "Returns the word offset into the address space this is defined within\n \n The word size is defined in the Language\u0027s .slaspec file with the\n \"WORDSIZE\" argument when DEFINEing a memory SPACE (capitalization is\n for emphasis; the directives are actually lowercase).",
      "javadoc": "Returns the word offset into the address space this is defined within\n \n The word size is defined in the Language\u0027s .slaspec file with the\n \"WORDSIZE\" argument when DEFINEing a memory SPACE (capitalization is\n for emphasis; the directives are actually lowercase).\n@return the word offset into the address space this is defined within",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the word offset into the address space this is defined within"
      },
      "throws": []
    },
    {
      "name": "isFree",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Determine if this varnode contains the specified address",
      "javadoc": "Determine if this varnode contains the specified address\n@param addr the address for which to check\n@return true if this varnode contains the specified address",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address for which to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this varnode contains the specified address"
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "Determine if this varnode intersects another varnode.",
      "javadoc": "Determine if this varnode intersects another varnode.\n@param varnode other varnode\n@return true if this varnode intersects the specified varnode",
      "static": false,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "other varnode"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this varnode intersects the specified varnode"
      },
      "throws": []
    },
    {
      "name": "rangeIntersects",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "otherOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "otherEndOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "Determine if this varnode intersects the specified address set",
      "javadoc": "Determine if this varnode intersects the specified address set\n@param set address set\n@return true if this varnode intersects the specified address set",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "address set"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this varnode intersects the specified address set"
      },
      "throws": []
    },
    {
      "name": "isAddress",
      "comment": "",
      "javadoc": "@return true if this varnode exists in a Memory space (vs. register etc...).\n Keep in mind this varnode may also correspond to a defined register \n if true is returned and {@link #isRegister()} return false.  \n Memory-based registers may be indirectly addressed which leads to the \n distinction with registers within the register space.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this varnode exists in a Memory space (vs. register etc...).\n Keep in mind this varnode may also correspond to a defined register \n if true is returned and #isRegister() return false.  \n Memory-based registers may be indirectly addressed which leads to the \n distinction with registers within the register space."
      },
      "throws": []
    },
    {
      "name": "isRegister",
      "comment": "",
      "javadoc": "@return true if this varnode exists in a Register type space.\n If false is returned, keep in mind this varnode may still correspond to a \n defined register within a memory space.  Memory-based registers may be indirectly \n addressed which leads to the distinction with registers within the register space.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this varnode exists in a Register type space.\n If false is returned, keep in mind this varnode may still correspond to a \n defined register within a memory space.  Memory-based registers may be indirectly \n addressed which leads to the distinction with registers within the register space."
      },
      "throws": []
    },
    {
      "name": "isConstant",
      "comment": "",
      "javadoc": "@return true if this varnode is just a constant number",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this varnode is just a constant number"
      },
      "throws": []
    },
    {
      "name": "isUnique",
      "comment": "",
      "javadoc": "@return true if this varnode doesn\u0027t exist anywhere.  A temporary variable.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this varnode doesn\u0027t exist anywhere.  A temporary variable."
      },
      "throws": []
    },
    {
      "name": "isHash",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInput",
      "comment": "",
      "javadoc": "@return is input to a pcode op",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "is input to a pcode op"
      },
      "throws": []
    },
    {
      "name": "isPersistent",
      "comment": "",
      "javadoc": "@return is persistent",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "is persistent"
      },
      "throws": []
    },
    {
      "name": "isAddrTied",
      "comment": "",
      "javadoc": "@return is mapped to an address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "is mapped to an address"
      },
      "throws": []
    },
    {
      "name": "isUnaffected",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDef",
      "comment": "",
      "javadoc": "@return get the pcode op this varnode belongs to",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp",
        "type_short": "PcodeOp",
        "comment": "get the pcode op this varnode belongs to"
      },
      "throws": []
    },
    {
      "name": "getDescendants",
      "comment": "",
      "javadoc": "@return iterator to all PcodeOp s that take this as input",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.pcode.PcodeOp\u003e",
        "type_short": "Iterator",
        "comment": "iterator to all PcodeOp s that take this as input"
      },
      "throws": []
    },
    {
      "name": "getLoneDescend",
      "comment": "If there is only one PcodeOp taking this varnode as input, return it. Otherwise return null",
      "javadoc": "If there is only one PcodeOp taking this varnode as input, return it. Otherwise return null\n@return the lone descendant PcodeOp",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp",
        "type_short": "PcodeOp",
        "comment": "the lone descendant PcodeOp"
      },
      "throws": []
    },
    {
      "name": "getHigh",
      "comment": "",
      "javadoc": "@return the high level variable this varnode represents",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighVariable",
        "type_short": "HighVariable",
        "comment": "the high level variable this varnode represents"
      },
      "throws": []
    },
    {
      "name": "getMergeGroup",
      "comment": "",
      "javadoc": "@return the index of the group, within the high containing this, that are forced merged with this",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the index of the group, within the high containing this, that are forced merged with this"
      },
      "throws": []
    },
    {
      "name": "buildXML",
      "comment": "",
      "javadoc": "@param buf is the builder to which to append XML",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the builder to which to append XML"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readXML",
      "comment": "Build a Varnode from an XML stream",
      "javadoc": "Build a Varnode from an XML stream\n@param parser the parser\n@param factory pcode factory used to create valid pcode\n@return new varnode element based on info in the XML.\n@throws PcodeXMLException if XML is improperly formed",
      "static": true,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "the parser"
        },
        {
          "name": "factory",
          "type_long": "ghidra.program.model.pcode.PcodeFactory",
          "type_short": "PcodeFactory",
          "comment": "pcode factory used to create valid pcode"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "new varnode element based on info in the XML."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "if XML is improperly formed"
        }
      ]
    },
    {
      "name": "trim",
      "comment": "Trim a varnode in a constant space to the correct starting offset.\n \n Constant handles may contain constants of indeterminate size.\n This is where the size gets fixed, i.e. we mask off the constant\n to its proper size.  A varnode that is ends up in pcode should\n call this method to ensure that varnodes always contains raw data.\n On the other hand, varnodes in handles are allowed to have offsets\n that violate size restrictions.",
      "javadoc": "Trim a varnode in a constant space to the correct starting offset.\n \n Constant handles may contain constants of indeterminate size.\n This is where the size gets fixed, i.e. we mask off the constant\n to its proper size.  A varnode that is ends up in pcode should\n call this method to ensure that varnodes always contains raw data.\n On the other hand, varnodes in handles are allowed to have offsets\n that violate size restrictions.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Convert this varnode to an alternate String representation based on a specified language.",
      "javadoc": "Convert this varnode to an alternate String representation based on a specified language.\n@param language is the specified Language\n@return string representation",
      "static": false,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "is the specified Language"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "string representation"
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
