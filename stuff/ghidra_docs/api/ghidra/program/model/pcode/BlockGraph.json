{
  "name": "BlockGraph",
  "comment": "A block (with in edges and out edges) that contains other blocks",
  "javadoc": "A block (with in edges and out edges) that contains other blocks",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.pcode.PcodeBlock",
  "fields": [
    {
      "name": "list",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.program.model.pcode.PcodeBlock\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "maxindex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addBlock",
      "comment": "Add a block to this container. There are (initially) no edges between\n it and any other block in the container.",
      "javadoc": "Add a block to this container. There are (initially) no edges between\n it and any other block in the container.\n@param bl is the new block to add",
      "static": false,
      "params": [
        {
          "name": "bl",
          "type_long": "ghidra.program.model.pcode.PcodeBlock",
          "type_short": "PcodeBlock",
          "comment": "is the new block to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setIndices",
      "comment": "Assign a unique index to all blocks in this container. After this call,\n getBlock(i) will return the block that satisfies block.getIndex() \u003d\u003d i",
      "javadoc": "Assign a unique index to all blocks in this container. After this call,\n getBlock(i) will return the block that satisfies block.getIndex() \u003d\u003d i",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "",
      "javadoc": "@return the number of blocks in this container",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of blocks in this container"
      },
      "throws": []
    },
    {
      "name": "getBlock",
      "comment": "Retrieve the i-th block from this container",
      "javadoc": "Retrieve the i-th block from this container\n@param i is the index of the block to fetch\n@return ",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the index of the block to fetch"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeBlock",
        "type_short": "PcodeBlock",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addEdge",
      "comment": "Add a directed edge between two blocks in this container",
      "javadoc": "Add a directed edge between two blocks in this container\n@param begin is the \"from\" block of the edge\n@param end is the \"to\" block of the edge",
      "static": false,
      "params": [
        {
          "name": "begin",
          "type_long": "ghidra.program.model.pcode.PcodeBlock",
          "type_short": "PcodeBlock",
          "comment": "is the \"from\" block of the edge"
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.pcode.PcodeBlock",
          "type_short": "PcodeBlock",
          "comment": "is the \"to\" block of the edge"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "transferObjectRef",
      "comment": "Recursively run through this structured BlockGraph finding the BlockCopy leaves.\n Using the BlockCopy altindex, lookup the original BlockCopy in -ingraph- and\n transfer the Object ref and Address into the leaf",
      "javadoc": "Recursively run through this structured BlockGraph finding the BlockCopy leaves.\n Using the BlockCopy altindex, lookup the original BlockCopy in -ingraph- and\n transfer the Object ref and Address into the leaf\n@param ingraph is the original flow graph",
      "static": false,
      "params": [
        {
          "name": "ingraph",
          "type_long": "ghidra.program.model.pcode.BlockGraph",
          "type_short": "BlockGraph",
          "comment": "is the original flow graph"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveXmlBody",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "writer",
          "type_long": "java.io.Writer",
          "type_short": "Writer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "restoreXmlBody",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "resolver",
          "type_long": "ghidra.program.model.pcode.BlockMap",
          "type_short": "BlockMap",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "restoreXml",
      "comment": "Restore all blocks and edges in this container from an XML stream.",
      "javadoc": "Restore all blocks and edges in this container from an XML stream.\n@param parser is the XML stream parser\n@param factory is the AddressFactory used to construct any Address\n@throws PcodeXMLException if part of the XML description is invalid",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML stream parser"
        },
        {
          "name": "factory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": "is the AddressFactory used to construct any Address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "if part of the XML description is invalid"
        }
      ]
    }
  ]
}
