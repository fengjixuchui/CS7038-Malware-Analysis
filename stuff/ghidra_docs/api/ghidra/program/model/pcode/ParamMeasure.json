{
  "name": "ParamMeasure",
  "comment": "ParamMeasure",
  "javadoc": "ParamMeasure",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "vn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode",
      "type_short": "Varnode",
      "constant_value": null
    },
    {
      "name": "dt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "rank",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Integer",
      "type_short": "Integer",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a ParamMeasure Object.\n The ParamMeasure will be empty until #readXml is invoked.",
      "javadoc": "Constructs a ParamMeasure Object.\n \u003cb\u003eThe ParamMeasure will be empty until {@link #readXml} is invoked.\u003c/b\u003e",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readXml",
      "comment": "Create a ParamMeasure object by parsing the XML elements",
      "javadoc": "Create a ParamMeasure object by parsing the XML elements\n@param parser xml parser\n@param factory pcode factory\n@throws PcodeXMLException if an error occurs when reading the xml.",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "xml parser"
        },
        {
          "name": "factory",
          "type_long": "ghidra.program.model.pcode.PcodeFactory",
          "type_short": "PcodeFactory",
          "comment": "pcode factory"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "if an error occurs when reading the xml."
        }
      ]
    },
    {
      "name": "getVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRank",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Integer",
        "type_short": "Integer",
        "comment": ""
      },
      "throws": []
    }
  ]
}
