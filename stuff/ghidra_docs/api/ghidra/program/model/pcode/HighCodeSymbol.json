{
  "name": "HighCodeSymbol",
  "comment": "A global symbol as part of the decompiler\u0027s model of a function. This symbol can\n be backed by a formal CodeSymbol, obtained using getCodeSymbol(). This symbol can be backed\n by a formal Data object, obtained using getData(). If there is a backing CodeSymbol, this takes its name,\n otherwise the name is dynamically generated using SymbolUtilities. The data-type attached to this does\n not necessarily match the backing CodeSymbol or Data object.",
  "javadoc": "A global symbol as part of the decompiler\u0027s model of a function. This symbol can\n be backed by a formal CodeSymbol, obtained using getCodeSymbol(). This symbol can be backed\n by a formal Data object, obtained using getData(). If there is a backing CodeSymbol, this takes its name,\n otherwise the name is dynamically generated using SymbolUtilities. The data-type attached to this does\n not necessarily match the backing CodeSymbol or Data object.",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.pcode.HighSymbol",
  "fields": [
    {
      "name": "symbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.symbol.CodeSymbol",
      "type_short": "CodeSymbol",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct with a backing CodeSymbol.  An attempt is made to also find a backing Data object.",
      "javadoc": "Construct with a backing CodeSymbol.  An attempt is made to also find a backing Data object.\n@param sym is the backing CodeSymbol\n@param dataType is the (possibly distinct) data-type associated with the new HighSymbol\n@param sz is the storage size, in bytes, of the symbol\n@param func is the decompiler function model owning the new HighSymbol",
      "static": false,
      "params": [
        {
          "name": "sym",
          "type_long": "ghidra.program.database.symbol.CodeSymbol",
          "type_short": "CodeSymbol",
          "comment": "is the backing CodeSymbol"
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "is the (possibly distinct) data-type associated with the new HighSymbol"
        },
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the storage size, in bytes, of the symbol"
        },
        {
          "name": "func",
          "type_long": "ghidra.program.model.pcode.HighFunction",
          "type_short": "HighFunction",
          "comment": "is the decompiler function model owning the new HighSymbol"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct with just a (global) storage address and size. There will be no backing CodeSymbol.\n An attempt is made to find a backing Data object.",
      "javadoc": "Construct with just a (global) storage address and size. There will be no backing CodeSymbol.\n An attempt is made to find a backing Data object.\n@param id is the id to associate with the new HighSymbol\n@param addr is the starting Address of the symbol storage\n@param dataType is the data-type associated with the new symbol\n@param sz is the size of the symbol storage in bytes\n@param func is the decompiler function model owning the new symbol",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the id to associate with the new HighSymbol"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is the starting Address of the symbol storage"
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "is the data-type associated with the new symbol"
        },
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the size of the symbol storage in bytes"
        },
        {
          "name": "func",
          "type_long": "ghidra.program.model.pcode.HighFunction",
          "type_short": "HighFunction",
          "comment": "is the decompiler function model owning the new symbol"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for HighSymbol which is unattached to a HighFunction",
      "javadoc": "Constructor for HighSymbol which is unattached to a HighFunction\n@param id is the unique id to assign\n@param nm is the name of the symbol\n@param data is an underlying Data object defining the storage and data-type\n@param dtmanage is the data-type manager for XML reference",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the unique id to assign"
        },
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the name of the symbol"
        },
        {
          "name": "data",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": "is an underlying Data object defining the storage and data-type"
        },
        {
          "name": "dtmanage",
          "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
          "type_short": "PcodeDataTypeManager",
          "comment": "is the data-type manager for XML reference"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isGlobal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCodeSymbol",
      "comment": "Get the CodeSymbol backing this, if it exists",
      "javadoc": "Get the CodeSymbol backing this, if it exists\n@return the CodeSymbol or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.database.symbol.CodeSymbol",
        "type_short": "CodeSymbol",
        "comment": "the CodeSymbol or null"
      },
      "throws": []
    },
    {
      "name": "getData",
      "comment": "Get the Data object backing this, if it exists",
      "javadoc": "Get the Data object backing this, if it exists\n@return the Data object or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the Data object or null"
      },
      "throws": []
    },
    {
      "name": "restoreXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    }
  ]
}
