{
  "name": "HighFunction",
  "comment": "High-level abstraction associated with a low level function made up of assembly instructions.\n Based on information the decompiler has produced after working on a function.",
  "javadoc": "High-level abstraction associated with a low level function made up of assembly instructions.\n Based on information the decompiler has produced after working on a function.",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.pcode.PcodeSyntaxTree",
  "fields": [
    {
      "name": "DECOMPILER_TAG_MAP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"decompiler_tags\""
    },
    {
      "name": "func",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Function",
      "type_short": "Function",
      "constant_value": null
    },
    {
      "name": "language",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Language",
      "type_short": "Language",
      "constant_value": null
    },
    {
      "name": "compilerSpec",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.CompilerSpec",
      "type_short": "CompilerSpec",
      "constant_value": null
    },
    {
      "name": "proto",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.FunctionPrototype",
      "type_short": "FunctionPrototype",
      "constant_value": null
    },
    {
      "name": "localSymbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.LocalSymbolMap",
      "type_short": "LocalSymbolMap",
      "constant_value": null
    },
    {
      "name": "globalSymbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.GlobalSymbolMap",
      "type_short": "GlobalSymbolMap",
      "constant_value": null
    },
    {
      "name": "jumpTables",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.pcode.JumpTable\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "protoOverrides",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.pcode.DataTypeSymbol\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@param function function associated with the higher level function abstraction.\n@param language description of the processor language of the function\n@param compilerSpec description of the compiler that produced the function\n@param dtManager data type manager",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "function associated with the higher level function abstraction."
        },
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "description of the processor language of the function"
        },
        {
          "name": "compilerSpec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": "description of the compiler that produced the function"
        },
        {
          "name": "dtManager",
          "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
          "type_short": "PcodeDataTypeManager",
          "comment": "data type manager"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunction",
      "comment": "",
      "javadoc": "@return get the associated low level function",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "get the associated low level function"
      },
      "throws": []
    },
    {
      "name": "getID",
      "comment": "Get the id with the associated function symbol, if it exists.\n Otherwise return a dynamic id based on the entry point.",
      "javadoc": "Get the id with the associated function symbol, if it exists.\n Otherwise return a dynamic id based on the entry point.\n@return the symbol id, or possibly a dynamic id",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the symbol id, or possibly a dynamic id"
      },
      "throws": []
    },
    {
      "name": "getLanguage",
      "comment": "",
      "javadoc": "@return get the language parser used to disassemble",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Language",
        "type_short": "Language",
        "comment": "get the language parser used to disassemble"
      },
      "throws": []
    },
    {
      "name": "getCompilerSpec",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.CompilerSpec",
        "type_short": "CompilerSpec",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionPrototype",
      "comment": "",
      "javadoc": "@return the function prototype for the function (how things are passed/returned)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.FunctionPrototype",
        "type_short": "FunctionPrototype",
        "comment": "the function prototype for the function (how things are passed/returned)"
      },
      "throws": []
    },
    {
      "name": "getJumpTables",
      "comment": "",
      "javadoc": "@return an array of jump table definitions found for this function decompilation",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.JumpTable[]",
        "type_short": "ghidra.program.model.pcode.JumpTable[]",
        "comment": "an array of jump table definitions found for this function decompilation"
      },
      "throws": []
    },
    {
      "name": "getLocalSymbolMap",
      "comment": "",
      "javadoc": "@return the local variable map describing the defined local variables",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.LocalSymbolMap",
        "type_short": "LocalSymbolMap",
        "comment": "the local variable map describing the defined local variables"
      },
      "throws": []
    },
    {
      "name": "getGlobalSymbolMap",
      "comment": "",
      "javadoc": "@return a map describing global variables accessed by this function",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.GlobalSymbolMap",
        "type_short": "GlobalSymbolMap",
        "comment": "a map describing global variables accessed by this function"
      },
      "throws": []
    },
    {
      "name": "getMappedSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "pcaddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighSymbol",
        "type_short": "HighSymbol",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "symbolId",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighSymbol",
        "type_short": "HighSymbol",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "grabFromFunction",
      "comment": "Populate the information for the HighFunction from the information in the\n Function object.",
      "javadoc": "Populate the information for the HighFunction from the information in the\n Function object.\n@param overrideExtrapop is the value to use if extrapop is overridden\n@param includeDefaultNames is true if default symbol names should be considered locked\n@param doOverride is true if extrapop is overridden",
      "static": false,
      "params": [
        {
          "name": "overrideExtrapop",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the value to use if extrapop is overridden"
        },
        {
          "name": "includeDefaultNames",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "is true if default symbol names should be considered locked"
        },
        {
          "name": "doOverride",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "is true if extrapop is overridden"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "grabOverrides",
      "comment": "Check the symbol space for objects that indicate specific overrides to decompiler analysis:\n      a) switch flow",
      "javadoc": "Check the symbol space for objects that indicate specific overrides to decompiler analysis:\n      a) switch flow",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "id",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readHighXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readHighlistXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readJumpTableListXML",
      "comment": "Read in the Jump Table list for this function from XML",
      "javadoc": "Read in the Jump Table list for this function from XML\n@param parser is the XML stream\n@throws PcodeXMLException for any format errors",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "for any format errors"
        }
      ]
    },
    {
      "name": "getPCAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rep",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "splitOutMergeGroup",
      "comment": "If a HighVariable consists of more than one (forced) merge group, split out the group\n that contains vn as a separate HighVariable. Otherwise just return the original high.",
      "javadoc": "If a HighVariable consists of more than one (forced) merge group, split out the group\n that contains vn as a separate HighVariable. Otherwise just return the original high.\n@param high is the HighVariable to split\n@param vn is a representative of the merge group to split out\n@return a HighVariable containing just the forced merge group of vn\n@throws PcodeException if the split can\u0027t be performed",
      "static": false,
      "params": [
        {
          "name": "high",
          "type_long": "ghidra.program.model.pcode.HighVariable",
          "type_short": "HighVariable",
          "comment": "is the HighVariable to split"
        },
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "is a representative of the merge group to split out"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighVariable",
        "type_short": "HighVariable",
        "comment": "a HighVariable containing just the forced merge group of vn"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeException",
          "type_short": "PcodeException",
          "comment": "if the split can\u0027t be performed"
        }
      ]
    },
    {
      "name": "buildFunctionXML",
      "comment": "Build an XML string that represents all the information about this HighFunction. The\n size describes how many bytes starting from the entry point are used by the function, but\n this doesn\u0027t need to be strictly accurate as it is only used to associate the function with\n addresses near its entry point.",
      "javadoc": "Build an XML string that represents all the information about this HighFunction. The\n size describes how many bytes starting from the entry point are used by the function, but\n this doesn\u0027t need to be strictly accurate as it is only used to associate the function with\n addresses near its entry point.\n@param id is the id associated with the function symbol\n@param namespace is the namespace containing the function symbol\n@param entryPoint pass null to use the function entryPoint, pass an address to force an entry point\n@param size describes how many bytes the function occupies as code\n@return the XML string",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the id associated with the function symbol"
        },
        {
          "name": "namespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "is the namespace containing the function symbol"
        },
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "pass null to use the function entryPoint, pass an address to force an entry point"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "describes how many bytes the function occupies as code"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the XML string"
      },
      "throws": []
    },
    {
      "name": "getErrorHandler",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "errOriginator",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "targetName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "org.xml.sax.ErrorHandler",
        "type_short": "ErrorHandler",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findOverrideSpace",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Namespace",
        "type_short": "Namespace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findCreateOverrideSpace",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Namespace",
        "type_short": "Namespace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findNamespace",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "symtab",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": ""
        },
        {
          "name": "parent",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Namespace",
        "type_short": "Namespace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createLabelSymbol",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "symtab",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "namespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": ""
        },
        {
          "name": "useLocalNamespace",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "deleteSymbol",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "symtab",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "space",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "clearNamespace",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "symtab",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": ""
        },
        {
          "name": "space",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findCreateNamespace",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "symtab",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": ""
        },
        {
          "name": "parentspace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Namespace",
        "type_short": "Namespace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "stringTree",
      "comment": "Create XML parse tree from an input XML string\n\n TODO: this probably doesn\u0027t belong here.",
      "javadoc": "Create XML parse tree from an input XML string\n\n TODO: this probably doesn\u0027t belong here.\n@param xml is the XML string to parse\n@param handler is the handler to use for parsing errors\n@return the XML tree\n@throws PcodeXMLException for format errors in the XML",
      "static": true,
      "params": [
        {
          "name": "xml",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "is the XML string to parse"
        },
        {
          "name": "handler",
          "type_long": "org.xml.sax.ErrorHandler",
          "type_short": "ErrorHandler",
          "comment": "is the handler to use for parsing errors"
        }
      ],
      "return": {
        "type_long": "ghidra.xml.XmlPullParser",
        "type_short": "XmlPullParser",
        "comment": "the XML tree"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "for format errors in the XML"
        }
      ]
    },
    {
      "name": "collapseToGlobal",
      "comment": "The decompiler treats some namespaces as equivalent to the \"global\" namespace.\n Return true if the given namespace is treated as equivalent.",
      "javadoc": "The decompiler treats some namespaces as equivalent to the \"global\" namespace.\n Return true if the given namespace is treated as equivalent.\n@param namespace is the namespace\n@return true if equivalent",
      "static": true,
      "params": [
        {
          "name": "namespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "is the namespace"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if equivalent"
      },
      "throws": []
    },
    {
      "name": "createNamespaceTag",
      "comment": "Append an XML parent tag to the buffer describing the formal path elements\n from the root (global) namespace up to the given namespace",
      "javadoc": "Append an XML \u0026lt;parent\u0026gt; tag to the buffer describing the formal path elements\n from the root (global) namespace up to the given namespace\n@param buf is the buffer to write to\n@param namespace is the namespace being described",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the buffer to write to"
        },
        {
          "name": "namespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "is the namespace being described"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "tagFindExclude",
      "comment": "",
      "javadoc": "@param tagname -- Name of tag to search for\n@param doc -- String through which to search for tags\n@return all characters between beginning and ending XML tags, excluding tags themselves",
      "static": true,
      "params": [
        {
          "name": "tagname",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "-- Name of tag to search for"
        },
        {
          "name": "doc",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "-- String through which to search for tags"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "all characters between beginning and ending XML tags, excluding tags themselves"
      },
      "throws": []
    }
  ]
}
