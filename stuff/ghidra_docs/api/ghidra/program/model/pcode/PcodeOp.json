{
  "name": "PcodeOp",
  "comment": "Pcode Op describes a generic machine operation.  You can think of\n it as the microcode for a specific processor\u0027s instruction set.  There\n are a finite number of PcodeOp\u0027s that theoretically can define the\n operations for any given processor.\n \n Pcode have\n    An operation code\n    Some number of input parameter varnodes\n    possible output varnode",
  "javadoc": "Pcode Op describes a generic machine operation.  You can think of\n it as the microcode for a specific processor\u0027s instruction set.  There\n are a finite number of PcodeOp\u0027s that theoretically can define the\n operations for any given processor.\n \n Pcode have\n    An operation code\n    Some number of input parameter varnodes\n    possible output varnode",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "UNIMPLEMENTED",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "COPY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "LOAD",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "STORE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "BRANCH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "CBRANCH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "BRANCHIND",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "CALL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "7"
    },
    {
      "name": "CALLIND",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "CALLOTHER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "9"
    },
    {
      "name": "RETURN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "10"
    },
    {
      "name": "INT_EQUAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "11"
    },
    {
      "name": "INT_NOTEQUAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "12"
    },
    {
      "name": "INT_SLESS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "13"
    },
    {
      "name": "INT_SLESSEQUAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "14"
    },
    {
      "name": "INT_LESS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "15"
    },
    {
      "name": "INT_LESSEQUAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16"
    },
    {
      "name": "INT_ZEXT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "17"
    },
    {
      "name": "INT_SEXT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "18"
    },
    {
      "name": "INT_ADD",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "19"
    },
    {
      "name": "INT_SUB",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "20"
    },
    {
      "name": "INT_CARRY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "21"
    },
    {
      "name": "INT_SCARRY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "22"
    },
    {
      "name": "INT_SBORROW",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "23"
    },
    {
      "name": "INT_2COMP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "24"
    },
    {
      "name": "INT_NEGATE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "25"
    },
    {
      "name": "INT_XOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "26"
    },
    {
      "name": "INT_AND",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "27"
    },
    {
      "name": "INT_OR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "28"
    },
    {
      "name": "INT_LEFT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "29"
    },
    {
      "name": "INT_RIGHT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "30"
    },
    {
      "name": "INT_SRIGHT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "31"
    },
    {
      "name": "INT_MULT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32"
    },
    {
      "name": "INT_DIV",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "33"
    },
    {
      "name": "INT_SDIV",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "34"
    },
    {
      "name": "INT_REM",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "35"
    },
    {
      "name": "INT_SREM",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "36"
    },
    {
      "name": "BOOL_NEGATE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "37"
    },
    {
      "name": "BOOL_XOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "38"
    },
    {
      "name": "BOOL_AND",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "39"
    },
    {
      "name": "BOOL_OR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "40"
    },
    {
      "name": "FLOAT_EQUAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "41"
    },
    {
      "name": "FLOAT_NOTEQUAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "42"
    },
    {
      "name": "FLOAT_LESS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "43"
    },
    {
      "name": "FLOAT_LESSEQUAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "44"
    },
    {
      "name": "FLOAT_NAN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "46"
    },
    {
      "name": "FLOAT_ADD",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "47"
    },
    {
      "name": "FLOAT_DIV",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "48"
    },
    {
      "name": "FLOAT_MULT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "49"
    },
    {
      "name": "FLOAT_SUB",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "50"
    },
    {
      "name": "FLOAT_NEG",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "51"
    },
    {
      "name": "FLOAT_ABS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "52"
    },
    {
      "name": "FLOAT_SQRT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "53"
    },
    {
      "name": "FLOAT_INT2FLOAT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "54"
    },
    {
      "name": "FLOAT_FLOAT2FLOAT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "55"
    },
    {
      "name": "FLOAT_TRUNC",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "56"
    },
    {
      "name": "FLOAT_CEIL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "57"
    },
    {
      "name": "FLOAT_FLOOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "58"
    },
    {
      "name": "FLOAT_ROUND",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "59"
    },
    {
      "name": "MULTIEQUAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "60"
    },
    {
      "name": "INDIRECT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "61"
    },
    {
      "name": "PIECE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "62"
    },
    {
      "name": "SUBPIECE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "63"
    },
    {
      "name": "CAST",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "64"
    },
    {
      "name": "PTRADD",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "65"
    },
    {
      "name": "PTRSUB",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "66"
    },
    {
      "name": "SEGMENTOP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "67"
    },
    {
      "name": "CPOOLREF",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "68"
    },
    {
      "name": "NEW",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "69"
    },
    {
      "name": "INSERT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "70"
    },
    {
      "name": "EXTRACT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "71"
    },
    {
      "name": "POPCOUNT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "72"
    },
    {
      "name": "PCODE_MAX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "73"
    },
    {
      "name": "opcodeTable",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Hashtable\u003cjava.lang.String,java.lang.Integer\u003e",
      "type_short": "Hashtable",
      "constant_value": null
    },
    {
      "name": "opcode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "seqnum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.SequenceNumber",
      "type_short": "SequenceNumber",
      "constant_value": null
    },
    {
      "name": "input",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode[]",
      "type_short": "ghidra.program.model.pcode.Varnode[]",
      "constant_value": null
    },
    {
      "name": "output",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode",
      "type_short": "Varnode",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor - pcode part of sequence of pcodes, some number of inputs, output",
      "javadoc": "Constructor - pcode part of sequence of pcodes, some number of inputs, output\n@param sq place in sequence of pcode\n@param op pcode operation\n@param numinputs number of inputs to operation, actual inputs not defined yet.\n@param out output from operation",
      "static": false,
      "params": [
        {
          "name": "sq",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": "place in sequence of pcode"
        },
        {
          "name": "op",
          "type_long": "int",
          "type_short": "int",
          "comment": "pcode operation"
        },
        {
          "name": "numinputs",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of inputs to operation, actual inputs not defined yet."
        },
        {
          "name": "out",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "output from operation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor - pcode part of sequence of pcodes, inputs, outputs",
      "javadoc": "Constructor - pcode part of sequence of pcodes, inputs, outputs\n@param sq place in sequence of pcode\n@param op pcode operation\n@param in inputs to operation\n@param out output from operation",
      "static": false,
      "params": [
        {
          "name": "sq",
          "type_long": "ghidra.program.model.pcode.SequenceNumber",
          "type_short": "SequenceNumber",
          "comment": "place in sequence of pcode"
        },
        {
          "name": "op",
          "type_long": "int",
          "type_short": "int",
          "comment": "pcode operation"
        },
        {
          "name": "in",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": "inputs to operation"
        },
        {
          "name": "out",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "output from operation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor - inputs and outputs",
      "javadoc": "Constructor - inputs and outputs\n@param a address pcode is attached to\n@param sequencenumber unique sequence number for the specified address.\n@param op pcode operation\n@param in inputs to operation\n@param out output from operation",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address pcode is attached to"
        },
        {
          "name": "sequencenumber",
          "type_long": "int",
          "type_short": "int",
          "comment": "unique sequence number for the specified address."
        },
        {
          "name": "op",
          "type_long": "int",
          "type_short": "int",
          "comment": "pcode operation"
        },
        {
          "name": "in",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": "inputs to operation"
        },
        {
          "name": "out",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "output from operation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor - no output",
      "javadoc": "Constructor - no output\n@param a address pcode is attached to\n@param sequencenumber id within a single address\n@param op operation pcode performs\n@param in inputs from pcode operation",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address pcode is attached to"
        },
        {
          "name": "sequencenumber",
          "type_long": "int",
          "type_short": "int",
          "comment": "id within a single address"
        },
        {
          "name": "op",
          "type_long": "int",
          "type_short": "int",
          "comment": "operation pcode performs"
        },
        {
          "name": "in",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": "inputs from pcode operation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor - no inputs, output",
      "javadoc": "Constructor - no inputs, output\n@param a address pcode is attached to\n@param sequencenumber id within a single address\n@param op pcode operation",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address pcode is attached to"
        },
        {
          "name": "sequencenumber",
          "type_long": "int",
          "type_short": "int",
          "comment": "id within a single address"
        },
        {
          "name": "op",
          "type_long": "int",
          "type_short": "int",
          "comment": "pcode operation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOpcode",
      "comment": "",
      "javadoc": "@return pcode operation code",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "pcode operation code"
      },
      "throws": []
    },
    {
      "name": "getNumInputs",
      "comment": "",
      "javadoc": "@return number of input varnodes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of input varnodes"
      },
      "throws": []
    },
    {
      "name": "getInputs",
      "comment": "",
      "javadoc": "@return get input varnodes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode[]",
        "type_short": "ghidra.program.model.pcode.Varnode[]",
        "comment": "get input varnodes"
      },
      "throws": []
    },
    {
      "name": "getInput",
      "comment": "",
      "javadoc": "@param i the i\u0027th input varnode\n@return the i\u0027th input varnode",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": "the i\u0027th input varnode"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "the i\u0027th input varnode"
      },
      "throws": []
    },
    {
      "name": "getOutput",
      "comment": "",
      "javadoc": "@return get output varnodes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "get output varnodes"
      },
      "throws": []
    },
    {
      "name": "getSlot",
      "comment": "Assuming vn is an input to this op, return its input slot number",
      "javadoc": "Assuming vn is an input to this op, return its input slot number\n@param vn is the input varnode\n@return the slot number",
      "static": false,
      "params": [
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "is the input varnode"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the slot number"
      },
      "throws": []
    },
    {
      "name": "getMnemonic",
      "comment": "",
      "javadoc": "@return get the string representation for the pcode operation",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "get the string representation for the pcode operation"
      },
      "throws": []
    },
    {
      "name": "isDead",
      "comment": "Check if the pcode has been determined to be a dead operation.",
      "javadoc": "Check if the pcode has been determined to be a dead operation.\n@return true if the pcode has been determined to have no effect in the context it is used",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the pcode has been determined to have no effect in the context it is used"
      },
      "throws": []
    },
    {
      "name": "isAssignment",
      "comment": "",
      "javadoc": "@return true if the pcode assigns a value to an output varnode",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the pcode assigns a value to an output varnode"
      },
      "throws": []
    },
    {
      "name": "getSeqnum",
      "comment": "",
      "javadoc": "@return the sequence number this pcode is within some number of pcode",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.SequenceNumber",
        "type_short": "SequenceNumber",
        "comment": "the sequence number this pcode is within some number of pcode"
      },
      "throws": []
    },
    {
      "name": "getBasicIter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.pcode.PcodeOp\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInsertIter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cjava.lang.Object\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParent",
      "comment": "",
      "javadoc": "@return the pcode basic block this pcode belongs to",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeBlockBasic",
        "type_short": "PcodeBlockBasic",
        "comment": "the pcode basic block this pcode belongs to"
      },
      "throws": []
    },
    {
      "name": "setOpcode",
      "comment": "Set the pcode operation code",
      "javadoc": "Set the pcode operation code\n@param o pcode operation code",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "int",
          "type_short": "int",
          "comment": "pcode operation code"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setInput",
      "comment": "Set/Replace an input varnode at the given slot.",
      "javadoc": "Set/Replace an input varnode at the given slot.\n@param vn varnode to replace\n@param slot index of input varnode to be replaced",
      "static": false,
      "params": [
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "varnode to replace"
        },
        {
          "name": "slot",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of input varnode to be replaced"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeInput",
      "comment": "Remove a varnode at the given slot from the list of input varnodes",
      "javadoc": "Remove a varnode at the given slot from the list of input varnodes\n@param slot index of input varnode to remove",
      "static": false,
      "params": [
        {
          "name": "slot",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of input varnode to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insertInput",
      "comment": "Insert an input varnode at the given index of input varnodes",
      "javadoc": "Insert an input varnode at the given index of input varnodes\n@param vn varnode to insert\n@param slot insert index in input varnode list",
      "static": false,
      "params": [
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "varnode to insert"
        },
        {
          "name": "slot",
          "type_long": "int",
          "type_short": "int",
          "comment": "insert index in input varnode list"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTime",
      "comment": "Set a unique number for pcode ops that are attached to the same address",
      "javadoc": "Set a unique number for pcode ops that are attached to the same address\n@param t unique id",
      "static": false,
      "params": [
        {
          "name": "t",
          "type_long": "int",
          "type_short": "int",
          "comment": "unique id"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setOrder",
      "comment": "Set relative position information of PcodeOps within\n a basic block, may change as basic block is edited.",
      "javadoc": "Set relative position information of PcodeOps within\n a basic block, may change as basic block is edited.\n@param ord relative position of pcode op in basic block",
      "static": false,
      "params": [
        {
          "name": "ord",
          "type_long": "int",
          "type_short": "int",
          "comment": "relative position of pcode op in basic block"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setOutput",
      "comment": "Set the output varnode for the pcode operation.",
      "javadoc": "Set the output varnode for the pcode operation.\n@param vn new output varnode",
      "static": false,
      "params": [
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "new output varnode"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "resBuf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readXML",
      "comment": "Read p-code from XML stream",
      "javadoc": "Read p-code from XML stream\n@param parser is the XML stream\n@param pfact factory used to create p-code correctly\n@return new PcodeOp\n@throws PcodeXMLException if XML layout is incorrect",
      "static": true,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML stream"
        },
        {
          "name": "pfact",
          "type_long": "ghidra.program.model.pcode.PcodeFactory",
          "type_short": "PcodeFactory",
          "comment": "factory used to create p-code correctly"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp",
        "type_short": "PcodeOp",
        "comment": "new PcodeOp"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": "if XML layout is incorrect"
        }
      ]
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generateOpcodeTable",
      "comment": "Generate a lookup table that maps pcode mnemonic strings to pcode operation codes.",
      "javadoc": "Generate a lookup table that maps pcode mnemonic strings to pcode operation codes.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMnemonic",
      "comment": "Get string representation for p-code operation",
      "javadoc": "Get string representation for p-code operation\n@param op operation code\n@return String representation of p-code operation",
      "static": true,
      "params": [
        {
          "name": "op",
          "type_long": "int",
          "type_short": "int",
          "comment": "operation code"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String representation of p-code operation"
      },
      "throws": []
    },
    {
      "name": "getOpcode",
      "comment": "Get the p-code op code for the given mnemonic string.",
      "javadoc": "Get the p-code op code for the given mnemonic string.\n@param s is the mnemonic string\n@return the op code\n@throws UnknownInstructionException if there is no matching mnemonic",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the mnemonic string"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the op code"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.UnknownInstructionException",
          "type_short": "UnknownInstructionException",
          "comment": "if there is no matching mnemonic"
        }
      ]
    }
  ]
}
