{
  "name": "Instruction",
  "comment": "Interface to define an instruction for a processor.",
  "javadoc": "Interface to define an instruction for a processor.",
  "static": false,
  "implements": [
    "ghidra.program.model.listing.CodeUnit",
    "ghidra.program.model.lang.ProcessorContext"
  ],
  "fields": [
    {
      "name": "INVALID_DEPTH_CHANGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16777216"
    }
  ],
  "methods": [
    {
      "name": "getPrototype",
      "comment": "Get the prototype for this instruction.",
      "javadoc": "Get the prototype for this instruction.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.InstructionPrototype",
        "type_short": "InstructionPrototype",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "If operand is a pure Register, return the register.",
      "javadoc": "If operand is a pure Register, return the register.\n@param opIndex index of the operand.\n@return A register if the operand represents a register.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of the operand."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "A register if the operand represents a register."
      },
      "throws": []
    },
    {
      "name": "getOpObjects",
      "comment": "Get objects used by this operand (Address, Scalar, Register ...)",
      "javadoc": "Get objects used by this operand (Address, Scalar, Register ...)\n@param opIndex index of the operand.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of the operand."
        }
      ],
      "return": {
        "type_long": "java.lang.Object[]",
        "type_short": "java.lang.Object[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInputObjects",
      "comment": "Get the Input objects used by this instruction.\n These could be Scalars, Registers, Addresses",
      "javadoc": "Get the Input objects used by this instruction.\n These could be Scalars, Registers, Addresses\n@return an array of objects that are used by this instruction",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Object[]",
        "type_short": "java.lang.Object[]",
        "comment": "an array of objects that are used by this instruction"
      },
      "throws": []
    },
    {
      "name": "getResultObjects",
      "comment": "Get the Result objects produced/affected by this instruction\n These would probably only be Register or Address",
      "javadoc": "Get the Result objects produced/affected by this instruction\n These would probably only be Register or Address\n@return an array of objects that are affected by this instruction",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Object[]",
        "type_short": "java.lang.Object[]",
        "comment": "an array of objects that are affected by this instruction"
      },
      "throws": []
    },
    {
      "name": "getDefaultOperandRepresentation",
      "comment": "Get the operand representation for the given operand index without markup.",
      "javadoc": "Get the operand representation for the given operand index without markup.\n@param opIndex operand index\n@return operand represented as a string.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "operand represented as a string."
      },
      "throws": []
    },
    {
      "name": "getDefaultOperandRepresentationList",
      "comment": "Get the operand representation for the given operand index.\n A list of Register, Address, Scalar, Character and String objects is returned - without markup!",
      "javadoc": "Get the operand representation for the given operand index.\n A list of Register, Address, Scalar, Character and String objects is returned - without markup!\n@param opIndex operand index\n@return ArrayList of pieces of the operand representation.  Unsupported languages may return null.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.Object\u003e",
        "type_short": "List",
        "comment": "ArrayList of pieces of the operand representation.  Unsupported languages may return null."
      },
      "throws": []
    },
    {
      "name": "getSeparator",
      "comment": "Get the separator strings between an operand.\n \n The separator string for 0 are the characters before the first operand.\n The separator string for numOperands+1 are the characters after the last operand.",
      "javadoc": "Get the separator strings between an operand.\n \n The separator string for 0 are the characters before the first operand.\n The separator string for numOperands+1 are the characters after the last operand.\n@param opIndex valid values are 0 thru numOperands+1\n@return separator string, or null if there is no string",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "valid values are 0 thru numOperands+1"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "separator string, or null if there is no string"
      },
      "throws": []
    },
    {
      "name": "getOperandType",
      "comment": "Get the type of a specific operand.",
      "javadoc": "Get the type of a specific operand.\n@param opIndex the index of the operand. (zero based)\n@return the type of the operand.\n@see OperandType",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the operand. (zero based)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the type of the operand."
      },
      "throws": []
    },
    {
      "name": "getOperandRefType",
      "comment": "Get the operand reference type for the given operand index.",
      "javadoc": "Get the operand reference type for the given operand index.\n@param index operand index",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType",
        "type_short": "RefType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultFallThroughOffset",
      "comment": "Get default fall-through offset in bytes from start of instruction to the\n fallthrough instruction.  This accounts for any\n instructions contained with delay slots.",
      "javadoc": "Get default fall-through offset in bytes from start of instruction to the\n fallthrough instruction.  This accounts for any\n instructions contained with delay slots.\n@return default fall-through offset or zero (0) if instruction has no fallthrough",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "default fall-through offset or zero (0) if instruction has no fallthrough"
      },
      "throws": []
    },
    {
      "name": "getDefaultFallThrough",
      "comment": "Get the default fallthrough for this instruction.\n This accounts for any instructions contained with delay slots.",
      "javadoc": "Get the default fallthrough for this instruction.\n This accounts for any instructions contained with delay slots.\n@return fall-through address or null if instruction has no default fallthrough",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "fall-through address or null if instruction has no default fallthrough"
      },
      "throws": []
    },
    {
      "name": "getFallThrough",
      "comment": "Get the fallthrough for this instruction, factoring in\n any fallthrough override and delay slotted instructions.",
      "javadoc": "Get the fallthrough for this instruction, factoring in\n any fallthrough override and delay slotted instructions.\n@return fall-through address or null if instruction has no fallthrough",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "fall-through address or null if instruction has no fallthrough"
      },
      "throws": []
    },
    {
      "name": "getFallFrom",
      "comment": "Get the Address for the instruction that fell through to\n this instruction.\n This is useful for handling instructions that are found\n in a delay slot.",
      "javadoc": "Get the Address for the instruction that fell through to\n this instruction.\n This is useful for handling instructions that are found\n in a delay slot.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFlows",
      "comment": "Get an array of Address objects for all flows other than\n a fall-through.  This will include any flow references which\n have been added to the instruction.",
      "javadoc": "Get an array of Address objects for all flows other than\n a fall-through.  This will include any flow references which\n have been added to the instruction.\n@return flow addresses or null if there are no flows",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address[]",
        "type_short": "ghidra.program.model.address.Address[]",
        "comment": "flow addresses or null if there are no flows"
      },
      "throws": []
    },
    {
      "name": "getDefaultFlows",
      "comment": "Get an array of Address objects for all default flows established\n by the underlying instruction prototype.  References are ignored.",
      "javadoc": "Get an array of Address objects for all default flows established\n by the underlying instruction prototype.  References are ignored.\n@return flow addresses or null if there are no flows",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address[]",
        "type_short": "ghidra.program.model.address.Address[]",
        "comment": "flow addresses or null if there are no flows"
      },
      "throws": []
    },
    {
      "name": "getFlowType",
      "comment": "Get the flow type of this instruction (how this\n instruction flows to the next instruction).",
      "javadoc": "Get the flow type of this instruction (how this\n instruction flows to the next instruction).",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.FlowType",
        "type_short": "FlowType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isFallthrough",
      "comment": "Returns true if this instruction has no execution flow other than fall-through.",
      "javadoc": "Returns true if this instruction has no execution flow other than fall-through.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasFallthrough",
      "comment": "Returns true if this instruction has a fall-through flow.",
      "javadoc": "Returns true if this instruction has a fall-through flow.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFlowOverride",
      "comment": "Returns the flow override which may have been set on this instruction.",
      "javadoc": "Returns the flow override which may have been set on this instruction.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.FlowOverride",
        "type_short": "FlowOverride",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFlowOverride",
      "comment": "Set the flow override for this instruction.",
      "javadoc": "Set the flow override for this instruction.\n@param flowOverride",
      "static": false,
      "params": [
        {
          "name": "flowOverride",
          "type_long": "ghidra.program.model.listing.FlowOverride",
          "type_short": "FlowOverride",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPcode",
      "comment": "Get an array of PCode operations (micro code) that this instruction\n performs.  Flow overrides are not factored into pcode.",
      "javadoc": "Get an array of PCode operations (micro code) that this instruction\n performs.  Flow overrides are not factored into pcode.\n@return an array of Pcode operations,\n         a zero length array if the language does not support PCode",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp[]",
        "type_short": "ghidra.program.model.pcode.PcodeOp[]",
        "comment": "an array of Pcode operations,\n         a zero length array if the language does not support PCode"
      },
      "throws": []
    },
    {
      "name": "getPcode",
      "comment": "Get an array of PCode operations (micro code) that this instruction\n performs.  NOTE: If includeOverrides is true, unique temporary varnodes\n may be produced which vary in size to those produced for other instructions.\n If your analysis is sensitive to this you should consider using \n InstructionPrototype#getPcode(InstructionContext, PcodeOverride, UniqueAddressFactory)\n instead with your own UniqueAddressFactory to prevent duplication within \n your scope of analysis.\n by this method may not be suitable for use with certain analysis",
      "javadoc": "Get an array of PCode operations (micro code) that this instruction\n performs.  NOTE: If includeOverrides is true, unique temporary varnodes\n may be produced which vary in size to those produced for other instructions.\n If your analysis is sensitive to this you should consider using \n {@link InstructionPrototype#getPcode(InstructionContext, PcodeOverride, UniqueAddressFactory)}\n instead with your own {@link UniqueAddressFactory} to prevent duplication within \n your scope of analysis.\n by this method may not be suitable for use with certain analysis\n@param includeOverrides if true any flow overrides will be factored\n into generated pcode.\n@return an array of Pcode operations,\n         a zero length array if the language does not support PCode",
      "static": false,
      "params": [
        {
          "name": "includeOverrides",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true any flow overrides will be factored\n into generated pcode."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp[]",
        "type_short": "ghidra.program.model.pcode.PcodeOp[]",
        "comment": "an array of Pcode operations,\n         a zero length array if the language does not support PCode"
      },
      "throws": []
    },
    {
      "name": "getPcode",
      "comment": "Get an array of PCode operations (micro code) that a particular operand\n performs to compute its value.",
      "javadoc": "Get an array of PCode operations (micro code) that a particular operand\n performs to compute its value.\n@param opIndex index of the operand to retrieve PCode\n@return an array of PCode operations,\n         a zero length array if the language does not support PCode",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of the operand to retrieve PCode"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp[]",
        "type_short": "ghidra.program.model.pcode.PcodeOp[]",
        "comment": "an array of PCode operations,\n         a zero length array if the language does not support PCode"
      },
      "throws": []
    },
    {
      "name": "getDelaySlotDepth",
      "comment": "Get the number of delay slot instructions for this\n argument. This should be 0 for instructions which don\u0027t have a\n delay slot.  This is used to support the delay slots found on\n some RISC processors such as SPARC and the PA-RISC. This\n returns an integer instead of a boolean in case some other\n processor executes more than one instruction from a delay slot.",
      "javadoc": "Get the number of delay slot instructions for this\n argument. This should be 0 for instructions which don\u0027t have a\n delay slot.  This is used to support the delay slots found on\n some RISC processors such as SPARC and the PA-RISC. This\n returns an integer instead of a boolean in case some other\n processor executes more than one instruction from a delay slot.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInDelaySlot",
      "comment": "Return true if this instruction was disassembled in a delay slot",
      "javadoc": "Return true if this instruction was disassembled in a delay slot",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNext",
      "comment": "Get the instruction following this one in address order.",
      "javadoc": "Get the instruction following this one in address order.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrevious",
      "comment": "Get the instruction before this one in address order.",
      "javadoc": "Get the instruction before this one in address order.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFallThrough",
      "comment": "Overrides the instruction\u0027s default fallthrough address to the given address.\n The given address may be null to indicate that the instruction has no fallthrough.",
      "javadoc": "Overrides the instruction\u0027s default fallthrough address to the given address.\n The given address may be null to indicate that the instruction has no fallthrough.\n@param addr the address to be used as this instructions fallthrough address.  May be null.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to be used as this instructions fallthrough address.  May be null."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearFallThroughOverride",
      "comment": "Restores this instruction\u0027s fallthrough address back to the default fallthrough\n for this instruction.",
      "javadoc": "Restores this instruction\u0027s fallthrough address back to the default fallthrough\n for this instruction.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isFallThroughOverridden",
      "comment": "Returns true if this instructions fallthrough has been overriden.",
      "javadoc": "Returns true if this instructions fallthrough has been overriden.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInstructionContext",
      "comment": "",
      "javadoc": "@return the instruction context for this instruction",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.InstructionContext",
        "type_short": "InstructionContext",
        "comment": "the instruction context for this instruction"
      },
      "throws": []
    }
  ]
}
