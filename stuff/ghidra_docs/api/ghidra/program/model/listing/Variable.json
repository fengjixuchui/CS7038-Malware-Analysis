{
  "name": "Variable",
  "comment": "Defines an object that stores a value of some specific data type. The\n variable has a name, type, size, and a comment.",
  "javadoc": "Defines an object that stores a value of some specific data type. The\n variable has a name, type, size, and a comment.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getDataType",
      "comment": "Get the Data Type of this variable",
      "javadoc": "Get the Data Type of this variable\n@return the data type of the variable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the data type of the variable"
      },
      "throws": []
    },
    {
      "name": "setDataType",
      "comment": "Set the Data Type of this variable and the associated storage whose size matches the \n data type length.\n NOTE: The storage and source are ignored if the function does not have custom storage enabled.",
      "javadoc": "Set the Data Type of this variable and the associated storage whose size matches the \n data type length.\n \u003cp\u003eNOTE: The storage and source are ignored if the function does not have custom storage enabled.\n@param type the data type\n@param storage properly sized storage for the new data type\n@param force overwrite conflicting variables\n@param source variable storage source (used only for function parameters and return)\n@throws InvalidInputException if data type is not a fixed length or violates storage constraints.\n@throws VariableSizeException if force is false and data type size causes a conflict \n with other variables",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type"
        },
        {
          "name": "storage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": "properly sized storage for the new data type"
        },
        {
          "name": "force",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "overwrite conflicting variables"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "variable storage source (used only for function parameters and return)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if data type is not a fixed length or violates storage constraints."
        }
      ]
    },
    {
      "name": "setDataType",
      "comment": "Set the Data Type of this variable using the default alignment behavior (implementation specific). \n The given dataType must have a fixed length.  If contained within a stack-frame, data-type size\n will be constrained by existing variables (e.g., equivalent to force\u003dfalse)\n Note: stack offset will be maintained for stack variables.",
      "javadoc": "Set the Data Type of this variable using the default alignment behavior (implementation specific). \n The given dataType must have a fixed length.  If contained within a stack-frame, data-type size\n will be constrained by existing variables (e.g., equivalent to force\u003dfalse)\n Note: stack offset will be maintained for stack variables.\n@param type the data type\n@param source signature source\n@throws InvalidInputException if data type is not a fixed length or violates storage constraints.\n@throws VariableSizeException if data type size causes a conflict with other variables\n@see #setDataType(DataType, boolean, boolean, SourceType)",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "signature source"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if data type is not a fixed length or violates storage constraints."
        }
      ]
    },
    {
      "name": "setDataType",
      "comment": "Set the Data Type of this variable. The given dataType must have a fixed length.",
      "javadoc": "Set the Data Type of this variable. The given dataType must have a fixed length.\n@param type the data type\n@param alignStack maintain proper stack alignment/justification if supported by implementation.\n \t\t\tIf false and this is a stack variable, the current stack address/offset will not change.\n \t\t\tIf true, the affect is implementation dependent since alignment can\n \t\t\tnot be performed without access to a compiler specification.\n@param force overwrite conflicting variables\n@param source signature source\n@throws InvalidInputException if data type is not a fixed length or violates storage constraints.\n@throws VariableSizeException if force is false and data type size causes a conflict \n with other variables",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type"
        },
        {
          "name": "alignStack",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "maintain proper stack alignment/justification if supported by implementation.\n \t\t\tIf false and this is a stack variable, the current stack address/offset will not change.\n \t\t\tIf true, the affect is implementation dependent since alignment can\n \t\t\tnot be performed without access to a compiler specification."
        },
        {
          "name": "force",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "overwrite conflicting variables"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "signature source"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if data type is not a fixed length or violates storage constraints."
        }
      ]
    },
    {
      "name": "getName",
      "comment": "Get the Name of this variable or null if not assigned or not-applicable",
      "javadoc": "Get the Name of this variable or null if not assigned or not-applicable\n@return the name of the variable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the variable"
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Get the length of this variable",
      "javadoc": "Get the length of this variable\n@return the length of the variable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of the variable"
      },
      "throws": []
    },
    {
      "name": "isValid",
      "comment": "Verify that the variable is valid \n (i.e., storage is valid and size matches variable data type size)",
      "javadoc": "Verify that the variable is valid \n (i.e., storage is valid and size matches variable data type size)\n@return true if variable is valid",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if variable is valid"
      },
      "throws": []
    },
    {
      "name": "getFunction",
      "comment": "Returns the function that contains this Variable.  May be null if the variable is not in\n a function.",
      "javadoc": "Returns the function that contains this Variable.  May be null if the variable is not in\n a function.\n@return containing function or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "containing function or null"
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "Returns the program that contains this variable or is the intended target",
      "javadoc": "Returns the program that contains this variable or is the intended target\n@return the program.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the program."
      },
      "throws": []
    },
    {
      "name": "getSource",
      "comment": "Get the source of this variable",
      "javadoc": "Get the source of this variable\n@return the source of this variable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.SourceType",
        "type_short": "SourceType",
        "comment": "the source of this variable"
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "Set the name of this variable.",
      "javadoc": "Set the name of this variable.\n@param name the name\n@param source the source of this variable name\n@throws DuplicateNameException if the name collides with the name of another variable.\n@throws InvalidInputException if name contains blank characters, is zero length, or is null",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this variable name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if the name collides with the name of another variable."
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if name contains blank characters, is zero length, or is null"
        }
      ]
    },
    {
      "name": "getComment",
      "comment": "Get the Comment for this variable",
      "javadoc": "Get the Comment for this variable\n@return the comment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the comment"
      },
      "throws": []
    },
    {
      "name": "setComment",
      "comment": "Set the comment for this variable",
      "javadoc": "Set the comment for this variable\n@param comment the comment",
      "static": false,
      "params": [
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the comment"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVariableStorage",
      "comment": "Get the variable storage associated with this variable.",
      "javadoc": "Get the variable storage associated with this variable.\n@return the variable storage for this variable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": "the variable storage for this variable"
      },
      "throws": []
    },
    {
      "name": "getFirstStorageVarnode",
      "comment": "Get the first storage varnode for this variable",
      "javadoc": "Get the first storage varnode for this variable\n@return the first storage varnode associated with this variable\n@see #getVariableStorage()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "the first storage varnode associated with this variable"
      },
      "throws": []
    },
    {
      "name": "getLastStorageVarnode",
      "comment": "Get the last storage varnode for this variable",
      "javadoc": "Get the last storage varnode for this variable\n@return the last storage varnode associated with this variable\n@see #getVariableStorage()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "the last storage varnode associated with this variable"
      },
      "throws": []
    },
    {
      "name": "isStackVariable",
      "comment": "",
      "javadoc": "@return true if this is a simple variable consisting of a single stack varnode\n which will be returned by either the {@link #getFirstStorageVarnode()} or \n {@link #getLastStorageVarnode()} methods. The stack offset can be obtained using:\n \u003cpre\u003e\n \t\tgetFirstStorageVarnode().getOffset()\n  \u003c/pre\u003e",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is a simple variable consisting of a single stack varnode\n which will be returned by either the #getFirstStorageVarnode() or \n #getLastStorageVarnode() methods. The stack offset can be obtained using:\n \n \t\tgetFirstStorageVarnode().getOffset()\n  "
      },
      "throws": []
    },
    {
      "name": "hasStackStorage",
      "comment": "",
      "javadoc": "@return true if this variable uses simple or compound storage which contains a stack element.  \n If true, the last storage varnode will always be the stack element.\n@see #getLastStorageVarnode()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this variable uses simple or compound storage which contains a stack element.  \n If true, the last storage varnode will always be the stack element."
      },
      "throws": []
    },
    {
      "name": "isRegisterVariable",
      "comment": "",
      "javadoc": "@return true if this is a simple variable consisting of a single register varnode\n which will be returned by either the {@link #getFirstStorageVarnode()} or \n {@link #getLastStorageVarnode()} methods.  The register can be obtained using the \n {@link #getRegister()} method.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is a simple variable consisting of a single register varnode\n which will be returned by either the #getFirstStorageVarnode() or \n #getLastStorageVarnode() methods.  The register can be obtained using the \n #getRegister() method."
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "",
      "javadoc": "@return first storage register associated with this variable, else null is returned.\n A variable with compound storage may have more than one register or other storage\n in addition to the register returned by this method.\n@see #isRegisterVariable()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "first storage register associated with this variable, else null is returned.\n A variable with compound storage may have more than one register or other storage\n in addition to the register returned by this method."
      },
      "throws": []
    },
    {
      "name": "getRegisters",
      "comment": "",
      "javadoc": "@return all storage register(s) associated with this variable, else null is returned if \n no registers are used.  A variable with compound storage may have more than one register \n or other storage in addition to the register(s) returned by this method.\n@see #isRegisterVariable()\n@see #isCompoundVariable()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
        "type_short": "List",
        "comment": "all storage register(s) associated with this variable, else null is returned if \n no registers are used.  A variable with compound storage may have more than one register \n or other storage in addition to the register(s) returned by this method."
      },
      "throws": []
    },
    {
      "name": "getMinAddress",
      "comment": "",
      "javadoc": "@return the minimum address corresponding to the first varnode of this storage\n or null if this is a special empty storage: {@link VariableStorage#BAD_STORAGE},\n {@link VariableStorage#UNASSIGNED_STORAGE}, {@link VariableStorage#VOID_STORAGE}",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the minimum address corresponding to the first varnode of this storage\n or null if this is a special empty storage: VariableStorage#BAD_STORAGE,\n VariableStorage#UNASSIGNED_STORAGE, VariableStorage#VOID_STORAGE"
      },
      "throws": []
    },
    {
      "name": "getStackOffset",
      "comment": "",
      "javadoc": "@return the stack offset associated with simple stack variable (i.e., {@link #isStackVariable()} \n returns true).\n@throws UnsupportedOperationException if storage is not a simple stack variable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the stack offset associated with simple stack variable (i.e., #isStackVariable() \n returns true)."
      },
      "throws": []
    },
    {
      "name": "isMemoryVariable",
      "comment": "",
      "javadoc": "@return true if this is a simple variable consisting of a single storage memory element\n which will be returned by either the {@link #getFirstStorageVarnode()} or \n {@link #getVariableStorage()} methods.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is a simple variable consisting of a single storage memory element\n which will be returned by either the #getFirstStorageVarnode() or \n #getVariableStorage() methods."
      },
      "throws": []
    },
    {
      "name": "isUniqueVariable",
      "comment": "",
      "javadoc": "@return true if this is a simple variable consisting of a single storage unique/hash element\n which will be returned by either the {@link #getFirstStorageVarnode()} or \n {@link #getVariableStorage()} methods.  The unique hash can be obtained from the \n storage address offset corresponding to the single storage element.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is a simple variable consisting of a single storage unique/hash element\n which will be returned by either the #getFirstStorageVarnode() or \n #getVariableStorage() methods.  The unique hash can be obtained from the \n storage address offset corresponding to the single storage element."
      },
      "throws": []
    },
    {
      "name": "isCompoundVariable",
      "comment": "",
      "javadoc": "@return true if this variable uses compound storage consisting of two or more storage elements\n which will be returned by the {@link #getVariableStorage()} method.  Compound variables will\n always use a register(s) optionally followed by other storage (i.e., stack).",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this variable uses compound storage consisting of two or more storage elements\n which will be returned by the #getVariableStorage() method.  Compound variables will\n always use a register(s) optionally followed by other storage (i.e., stack)."
      },
      "throws": []
    },
    {
      "name": "hasAssignedStorage",
      "comment": "",
      "javadoc": "@return true if this variable has been assigned storage.  This is equivalent to \n {@link #getVariableStorage()} !\u003d null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this variable has been assigned storage.  This is equivalent to \n #getVariableStorage() !\u003d null"
      },
      "throws": []
    },
    {
      "name": "getFirstUseOffset",
      "comment": "",
      "javadoc": "@return the first use offset relative to the function entry point.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the first use offset relative to the function entry point."
      },
      "throws": []
    },
    {
      "name": "getSymbol",
      "comment": "",
      "javadoc": "@return the symbol associated with this variable or null if no symbol \n associated.  Certain dynamic variables such as auto-parameters do not\n have a symbol and will return null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": "the symbol associated with this variable or null if no symbol \n associated.  Certain dynamic variables such as auto-parameters do not\n have a symbol and will return null."
      },
      "throws": []
    },
    {
      "name": "isEquivalent",
      "comment": "Determine is another variable is equivalent to this variable.",
      "javadoc": "Determine is another variable is equivalent to this variable.\n@param variable other variable\n@return true if the specified variable is equivalent to this variable",
      "static": false,
      "params": [
        {
          "name": "variable",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "other variable"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the specified variable is equivalent to this variable"
      },
      "throws": []
    }
  ]
}
