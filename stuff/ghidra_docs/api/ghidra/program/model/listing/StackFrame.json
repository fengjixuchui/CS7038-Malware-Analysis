{
  "name": "StackFrame",
  "comment": "Definition of a stack frame.\n All offsets into a stack are from a zero base.  Usually\n negative offsets are parameters and positive offsets are\n locals.  That does not have to be the case, it depends on whether\n the stack grows positively or negatively.  On an a 80x86 architecture,\n the stack grows negatively.  When a value is pushed onto the stack,\n the stack pointer is decremented by some size.\n\n Each frame consists of a local sections, parameter section, and save\n information (return address, saved registers, etc...).  A frame is said to\n grow negative if the parameters are referenced with negative offsets from 0,\n or positive if the parameters are referenced with negative offsets from 0.\n  \n\n\n  Negative Growth\n                    -5      local2 (2 bytes)\n                    -3      local1 (4 bytes)\n   frame base        0      stuff (4 bytes)\n   return offset     4      return addr (4 bytes)\n   param offset      8      param2 (4 bytes)\n                    12      param1\n\n       \n  Positive Growth\n                   -15     param offset 1\n                   -11     param offset 2\n   param offset     -8     \n   return offset    -7     return address\n                    -3     stuff \n   frame base        0     local 1\n                     4     local 2\n                     8     \n",
  "javadoc": "Definition of a stack frame.\n All offsets into a stack are from a zero base.  Usually\n negative offsets are parameters and positive offsets are\n locals.  That does not have to be the case, it depends on whether\n the stack grows positively or negatively.  On an a 80x86 architecture,\n the stack grows negatively.  When a value is pushed onto the stack,\n the stack pointer is decremented by some size.\n\n \u003cp\u003eEach frame consists of a local sections, parameter section, and save\n information (return address, saved registers, etc...).  A frame is said to\n grow negative if the parameters are referenced with negative offsets from 0,\n or positive if the parameters are referenced with negative offsets from 0.\n \u003cp\u003e \u003cpre\u003e\n\n\n  Negative Growth\n                    -5      local2 (2 bytes)\n                    -3      local1 (4 bytes)\n   frame base        0      stuff (4 bytes)\n   return offset     4      return addr (4 bytes)\n   param offset      8      param2 (4 bytes)\n                    12      param1\n\n       \n  Positive Growth\n                   -15     param offset 1\n                   -11     param offset 2\n   param offset     -8     \n   return offset    -7     return address\n                    -3     stuff \n   frame base        0     local 1\n                     4     local 2\n                     8     \n\u003c/pre\u003e",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "GROWS_NEGATIVE",
      "comment": "Indicator for a Stack that grows negatively.",
      "javadoc": "Indicator for a Stack that grows negatively.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "GROWS_POSITIVE",
      "comment": "Indicator for a Stack that grows positively.",
      "javadoc": "Indicator for a Stack that grows positively.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "UNKNOWN_PARAM_OFFSET",
      "comment": "Indicator for a unknown stack parameter offset",
      "javadoc": "Indicator for a unknown stack parameter offset",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "131072"
    }
  ],
  "methods": [
    {
      "name": "getFunction",
      "comment": "Get the function that this stack belongs to.\n This could return null if the stack frame isn\u0027t part of a function.",
      "javadoc": "Get the function that this stack belongs to.\n This could return null if the stack frame isn\u0027t part of a function.\n@return the function",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "the function"
      },
      "throws": []
    },
    {
      "name": "getFrameSize",
      "comment": "Get the size of this stack frame in bytes.",
      "javadoc": "Get the size of this stack frame in bytes.\n@return stack frame size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "stack frame size"
      },
      "throws": []
    },
    {
      "name": "getLocalSize",
      "comment": "Get the local portion of the stack frame in bytes.",
      "javadoc": "Get the local portion of the stack frame in bytes.\n@return local frame size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "local frame size"
      },
      "throws": []
    },
    {
      "name": "getParameterSize",
      "comment": "Get the parameter portion of the stack frame in bytes.",
      "javadoc": "Get the parameter portion of the stack frame in bytes.\n@return parameter frame size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "parameter frame size"
      },
      "throws": []
    },
    {
      "name": "getParameterOffset",
      "comment": "Get the offset to the start of the parameters.",
      "javadoc": "Get the offset to the start of the parameters.\n@return offset",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "offset"
      },
      "throws": []
    },
    {
      "name": "isParameterOffset",
      "comment": "Returns true if specified offset could correspond to a parameter",
      "javadoc": "Returns true if specified offset could correspond to a parameter\n@param offset",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLocalSize",
      "comment": "Set the size of the local stack in bytes.",
      "javadoc": "Set the size of the local stack in bytes.\n@param size size of local stack",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of local stack"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setReturnAddressOffset",
      "comment": "Set the return address stack offset.",
      "javadoc": "Set the return address stack offset.\n@param offset offset of return address.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset of return address."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReturnAddressOffset",
      "comment": "Get the return address stack offset.",
      "javadoc": "Get the return address stack offset.\n@return return address offset.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "return address offset."
      },
      "throws": []
    },
    {
      "name": "getVariableContaining",
      "comment": "Get the stack variable containing offset.  This may fall in\n the middle of a defined variable.",
      "javadoc": "Get the stack variable containing offset.  This may fall in\n the middle of a defined variable.\n@param offset offset of on stack to get variable.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset of on stack to get variable."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable",
        "type_short": "Variable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createVariable",
      "comment": "Create a stack variable.  It could be a parameter or a local depending\n on the direction of the stack.\n WARNING! Use of this method to add parameters may force the function\n to use custom variable storage.  In addition, parameters may be appended even if the\n current calling convention does not support them.",
      "javadoc": "Create a stack variable.  It could be a parameter or a local depending\n on the direction of the stack.\n \u003cp\u003e\u003cB\u003eWARNING!\u003c/B\u003e Use of this method to add parameters may force the function\n to use custom variable storage.  In addition, parameters may be appended even if the\n current calling convention does not support them.\n@throws DuplicateNameException if another variable(parameter or local) already\n exists in the function with that name.\n@throws InvalidInputException if data type is not a fixed length or variable name is invalid.\n@throws VariableSizeException if data type size is too large based upon storage constraints.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable",
        "type_short": "Variable",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if another variable(parameter or local) already\n exists in the function with that name."
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if data type is not a fixed length or variable name is invalid."
        }
      ]
    },
    {
      "name": "clearVariable",
      "comment": "Clear the stack variable defined at offset",
      "javadoc": "Clear the stack variable defined at offset\n@param offset Offset onto the stack to be cleared.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "Offset onto the stack to be cleared."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStackVariables",
      "comment": "Get all defined stack variables.\n Variables are returned from least offset (-) to greatest offset (+)",
      "javadoc": "Get all defined stack variables.\n Variables are returned from least offset (-) to greatest offset (+)\n@return an array of parameters.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": "an array of parameters."
      },
      "throws": []
    },
    {
      "name": "getParameters",
      "comment": "Get all defined parameters as stack variables.",
      "javadoc": "Get all defined parameters as stack variables.\n@return an array of parameters.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": "an array of parameters."
      },
      "throws": []
    },
    {
      "name": "getLocals",
      "comment": "Get all defined local variables.",
      "javadoc": "Get all defined local variables.\n@return an array of all local variables",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": "an array of all local variables"
      },
      "throws": []
    },
    {
      "name": "growsNegative",
      "comment": "A stack that grows negative has local references negative and\n parameter references positive.  A positive growing stack has\n positive locals and negative parameters.",
      "javadoc": "A stack that grows negative has local references negative and\n parameter references positive.  A positive growing stack has\n positive locals and negative parameters.\n@return true if the stack grows in a negative direction.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the stack grows in a negative direction."
      },
      "throws": []
    }
  ]
}
