{
  "name": "FunctionManager",
  "comment": "The manager for functions",
  "javadoc": "The manager for functions",
  "static": false,
  "implements": [
    "ghidra.program.database.ManagerDB"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getProgram",
      "comment": "Returns this manager\u0027s program",
      "javadoc": "Returns this manager\u0027s program\n@return the program",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the program"
      },
      "throws": []
    },
    {
      "name": "getCallingConventionNames",
      "comment": "Gets the names associated with each of the current calling conventions associated with this\n program. Within the exception of \"unknown\", all of these calling convention names should have\n a PrototypeModel.",
      "javadoc": "Gets the names associated with each of the current calling conventions associated with this\n program. Within the exception of \"unknown\", all of these calling convention names should have\n a PrototypeModel.\n@return the calling convention names.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "the calling convention names."
      },
      "throws": []
    },
    {
      "name": "getDefaultCallingConvention",
      "comment": "Gets the default calling convention\u0027s prototype model in this program.",
      "javadoc": "Gets the default calling convention\u0027s prototype model in this program.\n@return the default calling convention prototype model or null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": "the default calling convention prototype model or null."
      },
      "throws": []
    },
    {
      "name": "getCallingConvention",
      "comment": "Gets the prototype model of the calling convention with the specified name in this program",
      "javadoc": "Gets the prototype model of the calling convention with the specified name in this program\n@param name the calling convention name\n@return the named function calling convention prototype model or null.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the calling convention name"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": "the named function calling convention prototype model or null."
      },
      "throws": []
    },
    {
      "name": "getCallingConventions",
      "comment": "Gets all the calling convention prototype models in this program that have names.",
      "javadoc": "Gets all the calling convention prototype models in this program that have names.\n@return the function calling convention prototype models.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel[]",
        "type_short": "ghidra.program.model.lang.PrototypeModel[]",
        "comment": "the function calling convention prototype models."
      },
      "throws": []
    },
    {
      "name": "createFunction",
      "comment": "Create a function with the given body at entry point within the global namespace.",
      "javadoc": "Create a function with the given body at entry point within the global namespace.\n@param name the name of the new function or null for default name\n@param entryPoint entry point of function\n@param body addresses contained in the function body\n@param source the source of this function\n@return new function or null if one or more functions overlap the specified body address set.\n@throws InvalidInputException if the name has invalid characters\n@throws OverlappingFunctionException if the address set of the body overlaps an existing\n             function",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the new function or null for default name"
        },
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "entry point of function"
        },
        {
          "name": "body",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "addresses contained in the function body"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this function"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "new function or null if one or more functions overlap the specified body address set."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if the name has invalid characters"
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": "if the address set of the body overlaps an existing\n             function"
        }
      ]
    },
    {
      "name": "createFunction",
      "comment": "Create a function with the given body at entry point.",
      "javadoc": "Create a function with the given body at entry point.\n@param name the name of the new function or null for default name\n@param nameSpace the nameSpace in which to create the function\n@param entryPoint entry point of function\n@param body addresses contained in the function body\n@param source the source of this function\n@return new function or null if one or more functions overlap the specified body address set.\n@throws InvalidInputException if the name has invalid characters\n@throws OverlappingFunctionException if the address set of the body overlaps an existing\n             function",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the new function or null for default name"
        },
        {
          "name": "nameSpace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the nameSpace in which to create the function"
        },
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "entry point of function"
        },
        {
          "name": "body",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "addresses contained in the function body"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this function"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "new function or null if one or more functions overlap the specified body address set."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if the name has invalid characters"
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": "if the address set of the body overlaps an existing\n             function"
        }
      ]
    },
    {
      "name": "createThunkFunction",
      "comment": "Create a thunk function with the given body at entry point.",
      "javadoc": "Create a thunk function with the given body at entry point.\n@param name the name of the new function or null for default name\n@param nameSpace the nameSpace in which to create the function\n@param entryPoint entry point of function\n@param body addresses contained in the function body\n@param thunkedFunction referenced function (required is creating a thunk function)\n@param source the source of this function\n@return new function or null if one or more functions overlap the specified body address set.\n@throws OverlappingFunctionException if the address set of the body overlaps an existing\n             function",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the new function or null for default name"
        },
        {
          "name": "nameSpace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the nameSpace in which to create the function"
        },
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "entry point of function"
        },
        {
          "name": "body",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "addresses contained in the function body"
        },
        {
          "name": "thunkedFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "referenced function (required is creating a thunk function)"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this function"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "new function or null if one or more functions overlap the specified body address set."
      },
      "throws": [
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": "if the address set of the body overlaps an existing\n             function"
        }
      ]
    },
    {
      "name": "getFunctionCount",
      "comment": "Returns the total number of functions in the program including external functions",
      "javadoc": "Returns the total number of functions in the program including external functions\n@return the count",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the count"
      },
      "throws": []
    },
    {
      "name": "removeFunction",
      "comment": "Remove a function defined at entryPoint",
      "javadoc": "Remove a function defined at entryPoint\n@param entryPoint the entry point\n@return true if the function was removed",
      "static": false,
      "params": [
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the entry point"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the function was removed"
      },
      "throws": []
    },
    {
      "name": "getFunctionAt",
      "comment": "Get the function at entryPoint",
      "javadoc": "Get the function at entryPoint\n@param entryPoint the entry point\n@return null if there is no function at entryPoint",
      "static": false,
      "params": [
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the entry point"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "null if there is no function at entryPoint"
      },
      "throws": []
    },
    {
      "name": "getReferencedFunction",
      "comment": "Get the function which resides at the specified address or is referenced from the specified \n address",
      "javadoc": "Get the function which resides at the specified address or is referenced from the specified \n address\n@param address function address or address of pointer to a function.\n@return referenced function or null",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "function address or address of pointer to a function."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "referenced function or null"
      },
      "throws": []
    },
    {
      "name": "getFunctionContaining",
      "comment": "Get a function containing an address.",
      "javadoc": "Get a function containing an address.\n@param addr address within the function\n@return function containing this address, null otherwise",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address within the function"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "function containing this address, null otherwise"
      },
      "throws": []
    },
    {
      "name": "getFunctions",
      "comment": "Returns an iterator over all non-external functions in address (entry point) order",
      "javadoc": "Returns an iterator over all non-external functions in address (entry point) order\n@param forward true means to iterate in ascending address order\n@return the iterator",
      "static": false,
      "params": [
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to iterate in ascending address order"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": "the iterator"
      },
      "throws": []
    },
    {
      "name": "getFunctions",
      "comment": "Get an iterator over non-external functions starting at an address and ordered by entry\n address",
      "javadoc": "Get an iterator over non-external functions starting at an address and ordered by entry\n address\n@param start starting address\n@param forward true means to iterate in ascending address order\n@return an iterator over functions.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "starting address"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to iterate in ascending address order"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": "an iterator over functions."
      },
      "throws": []
    },
    {
      "name": "getFunctions",
      "comment": "Get an iterator over functions with entry points in the specified address set. Function are\n ordered based upon entry address.",
      "javadoc": "Get an iterator over functions with entry points in the specified address set. Function are\n ordered based upon entry address.\n@param asv address set to iterate over\n@param forward true means to iterate in ascending address order\n@return an iterator over functions.",
      "static": false,
      "params": [
        {
          "name": "asv",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "address set to iterate over"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to iterate in ascending address order"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": "an iterator over functions."
      },
      "throws": []
    },
    {
      "name": "getFunctionsNoStubs",
      "comment": "Returns an iterator over all REAL functions in address (entry point) order (real functions\n have instructions, and aren\u0027t stubs)",
      "javadoc": "Returns an iterator over all REAL functions in address (entry point) order (real functions\n have instructions, and aren\u0027t stubs)\n@param forward true means to iterate in ascending address order\n@return the iterator",
      "static": false,
      "params": [
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to iterate in ascending address order"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": "the iterator"
      },
      "throws": []
    },
    {
      "name": "getFunctionsNoStubs",
      "comment": "Get an iterator over REAL functions starting at an address and ordered by entry address (real\n functions have instructions, and aren\u0027t stubs).",
      "javadoc": "Get an iterator over REAL functions starting at an address and ordered by entry address (real\n functions have instructions, and aren\u0027t stubs).\n@param start starting address\n@param forward true means to iterate in ascending address order\n@return an iterator over functions.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "starting address"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to iterate in ascending address order"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": "an iterator over functions."
      },
      "throws": []
    },
    {
      "name": "getFunctionsNoStubs",
      "comment": "Get an iterator over REAL functions with entry points in the specified address set (real\n functions have instructions, and aren\u0027t stubs). Functions are ordered based upon entry\n address.",
      "javadoc": "Get an iterator over REAL functions with entry points in the specified address set (real\n functions have instructions, and aren\u0027t stubs). Functions are ordered based upon entry\n address.\n@param asv address set to iterate over\n@param forward true means to iterate in ascending address order\n@return an iterator over functions.",
      "static": false,
      "params": [
        {
          "name": "asv",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "address set to iterate over"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to iterate in ascending address order"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": "an iterator over functions."
      },
      "throws": []
    },
    {
      "name": "getExternalFunctions",
      "comment": "Get an iterator over all external functions. Functions returned have no particular order.",
      "javadoc": "Get an iterator over all external functions. Functions returned have no particular order.\n@return an iterator over external functions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": "an iterator over external functions"
      },
      "throws": []
    },
    {
      "name": "isInFunction",
      "comment": "Check if this address contains a function.",
      "javadoc": "Check if this address contains a function.\n@param addr address to check\n@return true if this address is contained in a function.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this address is contained in a function."
      },
      "throws": []
    },
    {
      "name": "getFunctionsOverlapping",
      "comment": "Return an iterator over functions that overlap the given address set.",
      "javadoc": "Return an iterator over functions that overlap the given address set.\n@param set address set of interest\n@return iterator over Functions",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "address set of interest"
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.listing.Function\u003e",
        "type_short": "Iterator",
        "comment": "iterator over Functions"
      },
      "throws": []
    },
    {
      "name": "getReferencedVariable",
      "comment": "Attempts to determine which if any of the local functions variables are referenced by the\n specified reference. In utilizing the firstUseOffset scoping model, negative offsets\n (relative to the functions entry) are shifted beyond the maximum positive offset within the\n function. While this does not account for the actual instruction flow, it is hopefully\n accurate enough for most situations.",
      "javadoc": "Attempts to determine which if any of the local functions variables are referenced by the\n specified reference. In utilizing the firstUseOffset scoping model, negative offsets\n (relative to the functions entry) are shifted beyond the maximum positive offset within the\n function. While this does not account for the actual instruction flow, it is hopefully\n accurate enough for most situations.\n@param instrAddr the instruction address\n@param storageAddr the storage address\n@param size varnode size in bytes (1 is assumed if value \u0026lt;\u003d 0)\n@param isRead true if the reference is a read reference\n@return referenced variable or null if one not found",
      "static": false,
      "params": [
        {
          "name": "instrAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the instruction address"
        },
        {
          "name": "storageAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the storage address"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "varnode size in bytes (1 is assumed if value \u003d 0)"
        },
        {
          "name": "isRead",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the reference is a read reference"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable",
        "type_short": "Variable",
        "comment": "referenced variable or null if one not found"
      },
      "throws": []
    },
    {
      "name": "getFunction",
      "comment": "Get a Function object by its key",
      "javadoc": "Get a Function object by its key\n@param key function symbol key\n@return function object or null if not found",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": "function symbol key"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "function object or null if not found"
      },
      "throws": []
    },
    {
      "name": "getFunctionTagManager",
      "comment": "Returns the function tag manager",
      "javadoc": "Returns the function tag manager\n@return the function tag manager",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionTagManager",
        "type_short": "FunctionTagManager",
        "comment": "the function tag manager"
      },
      "throws": []
    },
    {
      "name": "invalidateCache",
      "comment": "Clears all data caches",
      "javadoc": "Clears all data caches\n@param all if false, some managers may not need to update their cache if they can\n tell that its not necessary.  If this flag is true, then all managers should clear\n their cache no matter what.",
      "static": false,
      "params": [
        {
          "name": "all",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if false, some managers may not need to update their cache if they can\n tell that its not necessary.  If this flag is true, then all managers should clear\n their cache no matter what."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveAddressRange",
      "comment": "Move all objects within an address range to a new location",
      "javadoc": "Move all objects within an address range to a new location\n@param fromAddr the first address of the range to be moved\n@param toAddr the address where to the range is to be moved\n@param length the number of addresses to move\n@param monitor the task monitor to use in any upgrade operations\n@throws CancelledException if the user cancelled the operation via the task monitor",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address of the range to be moved"
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address where to the range is to be moved"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the number of addresses to move"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor to use in any upgrade operations"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancelled the operation via the task monitor"
        }
      ]
    }
  ]
}
