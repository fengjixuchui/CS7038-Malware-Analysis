{
  "name": "Data",
  "comment": "Interface for interacting with data at an address in a program.",
  "javadoc": "Interface for interacting with data at an address in a program.",
  "static": false,
  "implements": [
    "ghidra.program.model.listing.CodeUnit",
    "ghidra.docking.settings.Settings"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getValue",
      "comment": "Returns the value of the data item.  The value may be an address, a scalar,\n register or null if no value.",
      "javadoc": "Returns the value of the data item.  The value may be an address, a scalar,\n register or null if no value.\n@return the value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "the value"
      },
      "throws": []
    },
    {
      "name": "getValueClass",
      "comment": "Get the class used to express the value of this data.\n \n NOTE: This determination is made based upon data type and settings only and does not\n examine memory bytes which are used to construct the data value object.",
      "javadoc": "Get the class used to express the value of this data.\n \n \u003cp\u003eNOTE: This determination is made based upon data type and settings only and does not\n examine memory bytes which are used to construct the data value object.\n@return value class or null if a consistent class is not utilized.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003c?\u003e",
        "type_short": "Class",
        "comment": "value class or null if a consistent class is not utilized."
      },
      "throws": []
    },
    {
      "name": "hasStringValue",
      "comment": "Returns true if this data corresponds to string data.  This is determined\n by the corresponding data type producing a String value.",
      "javadoc": "Returns true if this data corresponds to string data.  This is determined\n by the corresponding data type producing a String value.\n@return true if this data returns a String value and can be treated as string data.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this data returns a String value and can be treated as string data."
      },
      "throws": []
    },
    {
      "name": "isConstant",
      "comment": "",
      "javadoc": "@return true if data is constant.\n If true, isConstant will always be false",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if data is constant.\n If true, isConstant will always be false"
      },
      "throws": []
    },
    {
      "name": "isVolatile",
      "comment": "",
      "javadoc": "@return true if data is volatile.\n If true, isVolatile will always be false",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if data is volatile.\n If true, isVolatile will always be false"
      },
      "throws": []
    },
    {
      "name": "isDefined",
      "comment": "Returns true if the data type is defined.  Any address that has not been defined to be code\n or data is treated as undefined data.",
      "javadoc": "Returns true if the data type is defined.  Any address that has not been defined to be code\n or data is treated as undefined data.\n@return true if is defined",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if is defined"
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "Get the Data type for the data.",
      "javadoc": "Get the Data type for the data.\n@return the data type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the data type"
      },
      "throws": []
    },
    {
      "name": "getBaseDataType",
      "comment": "If the dataType is a typeDef, then the typeDef\u0027s base type is returned, otherwise, the\n datatType is returned.",
      "javadoc": "If the dataType is a typeDef, then the typeDef\u0027s base type is returned, otherwise, the\n datatType is returned.\n@return the data type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the data type"
      },
      "throws": []
    },
    {
      "name": "getValueReferences",
      "comment": "Get the references for the value.",
      "javadoc": "Get the references for the value.\n@return the references",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference[]",
        "type_short": "ghidra.program.model.symbol.Reference[]",
        "comment": "the references"
      },
      "throws": []
    },
    {
      "name": "addValueReference",
      "comment": "Add a memory reference to the value.",
      "javadoc": "Add a memory reference to the value.\n@param refAddr address referenced.\n@param type the type of reference to be added.",
      "static": false,
      "params": [
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address referenced."
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "the type of reference to be added."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeValueReference",
      "comment": "Remove a reference to the value.",
      "javadoc": "Remove a reference to the value.\n@param refAddr address of reference to be removed.",
      "static": false,
      "params": [
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of reference to be removed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFieldName",
      "comment": "Get the field name of this data item if it is \"inside\" another data item, otherwise return\n null.",
      "javadoc": "Get the field name of this data item if it is \"inside\" another data item, otherwise return\n null.\n@return the name of this data as known from some parent data item or\n         null if this data item is not a component of another data item.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of this data as known from some parent data item or\n         null if this data item is not a component of another data item."
      },
      "throws": []
    },
    {
      "name": "getPathName",
      "comment": "Returns the full path name (dot notation) for this field.  This includes the symbol name at\n this address.",
      "javadoc": "Returns the full path name (dot notation) for this field.  This includes the symbol name at\n this address.\n@return the path name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the path name"
      },
      "throws": []
    },
    {
      "name": "getComponentPathName",
      "comment": "Returns the component path name (dot notation) for this field",
      "javadoc": "Returns the component path name (dot notation) for this field\n@return the component path name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the component path name"
      },
      "throws": []
    },
    {
      "name": "isPointer",
      "comment": "Returns true if this is a pointer, implies getValue() will will return an Object that is an\n Address.",
      "javadoc": "Returns true if this is a pointer, implies getValue() will will return an Object that is an\n Address.\n@return true if a pointer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a pointer"
      },
      "throws": []
    },
    {
      "name": "isUnion",
      "comment": "Returns true if this data item is a Union.",
      "javadoc": "Returns true if this data item is a Union.\n@return true if a union",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a union"
      },
      "throws": []
    },
    {
      "name": "isStructure",
      "comment": "Returns true if this data item is a Structure.",
      "javadoc": "Returns true if this data item is a Structure.\n@return true if a structure",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a structure"
      },
      "throws": []
    },
    {
      "name": "isArray",
      "comment": "Returns true if this data item is an Array of DataTypes",
      "javadoc": "Returns true if this data item is an Array of DataTypes\n@return true if an array",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if an array"
      },
      "throws": []
    },
    {
      "name": "isDynamic",
      "comment": "Returns true if this data item is a dynamic DataType.",
      "javadoc": "Returns true if this data item is a dynamic DataType.\n@return true if is dynamic",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if is dynamic"
      },
      "throws": []
    },
    {
      "name": "getParent",
      "comment": "Get the immediate parent data item of this data item or null if this data item is not\n contained in another data item.",
      "javadoc": "Get the immediate parent data item of this data item or null if this data item is not\n contained in another data item.\n@return the data",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the data"
      },
      "throws": []
    },
    {
      "name": "getRoot",
      "comment": "Get the highest level Data item in a hierarchy of structures containing this component.",
      "javadoc": "Get the highest level Data item in a hierarchy of structures containing this component.\n@return the data",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the data"
      },
      "throws": []
    },
    {
      "name": "getRootOffset",
      "comment": "Get the offset of this Data item from the start of the root data item of some hierarchy of\n structures.",
      "javadoc": "Get the offset of this Data item from the start of the root data item of some hierarchy of\n structures.\n@return the offset",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the offset"
      },
      "throws": []
    },
    {
      "name": "getParentOffset",
      "comment": "Get the offset of this Data item from the start of its immediate parent.",
      "javadoc": "Get the offset of this Data item from the start of its immediate parent.\n@return the offset",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the offset"
      },
      "throws": []
    },
    {
      "name": "getComponent",
      "comment": "Returns the immediate n\u0027th component or null if none exists.",
      "javadoc": "Returns the immediate n\u0027th component or null if none exists.\n@param index the index of the component to get.\n@return the component",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the component to get."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the component"
      },
      "throws": []
    },
    {
      "name": "getComponent",
      "comment": "Get a data item given  the index path. Each integer in the array represents an index into\n the data item at that level.",
      "javadoc": "Get a data item given  the index path. Each integer in the array represents an index into\n the data item at that level.\n@param componentPath the array of indexes to use to find the requested data item.\n@return the component",
      "static": false,
      "params": [
        {
          "name": "componentPath",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "the array of indexes to use to find the requested data item."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the component"
      },
      "throws": []
    },
    {
      "name": "getComponentPath",
      "comment": "Get the component path if this is a component. The component path is an array of integers\n that represent each index in the tree of data items. Top level data items have an empty\n array for their component path.",
      "javadoc": "Get the component path if this is a component. The component path is an array of integers\n that represent each index in the tree of data items. Top level data items have an empty\n array for their component path.\n@return the path",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "the path"
      },
      "throws": []
    },
    {
      "name": "getNumComponents",
      "comment": "Return the number of components that make up this data item.\n if this is an Array, return the number of elements in the array.",
      "javadoc": "Return the number of components that make up this data item.\n if this is an Array, return the number of elements in the array.\n@return the number of components",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of components"
      },
      "throws": []
    },
    {
      "name": "getComponentAt",
      "comment": "Return the first immediate child component that contains the byte at the given offset.  It\n is important to note that with certain datatypes there may be more than one component\n containing the specified offset (see #getComponentsContaining(int)).",
      "javadoc": "Return the first immediate child component that contains the byte at the given offset.  It\n is important to note that with certain datatypes there may be more than one component\n containing the specified offset (see {@link #getComponentsContaining(int)}).\n@param offset the amount to add to this data items address to get the address of the\n requested data item.\n@return first data component containing offset or null\n@deprecated method name has been changed to better reflect behavior.  The method\n {@link #getComponentContaining(int)} should be used instead.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the amount to add to this data items address to get the address of the\n requested data item."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "first data component containing offset or null"
      },
      "throws": []
    },
    {
      "name": "getComponentContaining",
      "comment": "RReturn the first immediate child component that contains the byte at the given offset.  It\n is important to note that with certain datatypes there may be more than one component\n containing the specified offset (see #getComponentsContaining(int)).",
      "javadoc": "RReturn the first immediate child component that contains the byte at the given offset.  It\n is important to note that with certain datatypes there may be more than one component\n containing the specified offset (see {@link #getComponentsContaining(int)}).\n@param offset the amount to add to this data items address to get the\n@return first data component containing offset or null address of the requested data item.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the amount to add to this data items address to get the"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "first data component containing offset or null address of the requested data item."
      },
      "throws": []
    },
    {
      "name": "getComponentsContaining",
      "comment": "Returns a list of all the immediate child components that contain the byte at the\n given offset.\n \n For a union, this will return all the components (if the offset is 0).  The presence of bit-fields\n or zero-length components may cause multiple components to be returned.",
      "javadoc": "Returns a list of all the immediate child components that contain the byte at the\n given offset.\n \u003cP\u003e\n For a union, this will return all the components (if the offset is 0).  The presence of bit-fields\n or zero-length components may cause multiple components to be returned.\n@param offset the amount to add to this data items address to get the\n address of the requested data item.\n@return a list of all the immediate child components that contain the byte at the\n given offset or null if offset is out of bounds.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the amount to add to this data items address to get the\n address of the requested data item."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.listing.Data\u003e",
        "type_short": "List",
        "comment": "a list of all the immediate child components that contain the byte at the\n given offset or null if offset is out of bounds."
      },
      "throws": []
    },
    {
      "name": "getPrimitiveAt",
      "comment": "Returns the primitive component containing this offset (i.e., one that does not\n have sub-components).  This is useful for data items which are made up of multiple\n layers of other data items. This method immediately goes to the lowest level data item.\n If the minimum offset of a component is specified, the only first component containing\n the offset will be considered (e.g., 0-element array).",
      "javadoc": "Returns the primitive component containing this offset (i.e., one that does not\n have sub-components).  This is useful for data items which are made up of multiple\n layers of other data items. This method immediately goes to the lowest level data item.\n If the minimum offset of a component is specified, the only first component containing\n the offset will be considered (e.g., 0-element array).\n@param offset the offset\n@return primitive component containing this offset",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "primitive component containing this offset"
      },
      "throws": []
    },
    {
      "name": "getComponentIndex",
      "comment": "Get the index of this component in its parent",
      "javadoc": "Get the index of this component in its parent\n@return -1 if this data item is not a component of another data item.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "-1 if this data item is not a component of another data item."
      },
      "throws": []
    },
    {
      "name": "getComponentLevel",
      "comment": "Get this data\u0027s component level in its hierarchy of components.",
      "javadoc": "Get this data\u0027s component level in its hierarchy of components.\n@return the level of this data item with 0 being the level of top data items.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the level of this data item with 0 being the level of top data items."
      },
      "throws": []
    },
    {
      "name": "getDefaultValueRepresentation",
      "comment": "Returns a string that represents the data value without markup.",
      "javadoc": "Returns a string that represents the data value without markup.\n@return the string",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string"
      },
      "throws": []
    },
    {
      "name": "getDefaultLabelPrefix",
      "comment": "Returns the appropriate string to use as the default label prefix or null if it has no\n preferred default label prefix;",
      "javadoc": "Returns the appropriate string to use as the default label prefix or null if it has no\n preferred default label prefix;\n@param options the options\n@return the prefix",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.program.model.data.DataTypeDisplayOptions",
          "type_short": "DataTypeDisplayOptions",
          "comment": "the options"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the prefix"
      },
      "throws": []
    }
  ]
}
