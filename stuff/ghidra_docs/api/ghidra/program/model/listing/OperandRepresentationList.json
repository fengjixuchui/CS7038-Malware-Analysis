{
  "name": "OperandRepresentationList",
  "comment": "OperandRepresentation provides a list for operand sub-elements.\n The number of elements are expected to remain constant for a given code unit\n operand regardless of its format.\n \n The list may contain various Objects including any combination of Character,\n String, VariableOffset, Register, Address, Scalar, LabelString, and \n nesting of other OperandRepresentationList objects.\n  \n All objects returned must support the toString() method for producing\n an appropriate listing representation.",
  "javadoc": "\u003ccode\u003eOperandRepresentation\u003c/code\u003e provides a list for operand sub-elements.\n The number of elements are expected to remain constant for a given code unit\n operand regardless of its format.\n \u003cbr\u003e\n The list may contain various Objects including any combination of Character,\n String, VariableOffset, Register, Address, Scalar, LabelString, and \n nesting of other OperandRepresentationList objects.\n \u003cbr\u003e \n All objects returned must support the toString() method for producing\n an appropriate listing representation.",
  "static": false,
  "implements": [],
  "extends": "java.util.ArrayList",
  "fields": [
    {
      "name": "primaryReferenceIsHidden",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "hasError",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opList",
          "type_long": "java.util.List\u003c?\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "primaryReferenceIsHidden",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "primaryReferenceIsHidden",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opList",
          "type_long": "java.util.List\u003c?\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "error",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPrimaryReferenceHidden",
      "comment": "Set flag indicating that representation does not include primary\n reference representation.",
      "javadoc": "Set flag indicating that representation does not include primary\n reference representation.\n@param primaryReferenceIsHidden",
      "static": false,
      "params": [
        {
          "name": "primaryReferenceIsHidden",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPrimaryReferenceHidden",
      "comment": "Returns true if the primary reference is not reflected in the representation.",
      "javadoc": "Returns true if the primary reference is not reflected in the representation.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setHasError",
      "comment": "Set flag indicating that representation encountered an error.",
      "javadoc": "Set flag indicating that representation encountered an error.\n@param hasError",
      "static": false,
      "params": [
        {
          "name": "hasError",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasError",
      "comment": "Returns true if the representation encountered an error.\n Error will be reflected within the representation as a String.",
      "javadoc": "Returns true if the representation encountered an error.\n Error will be reflected within the representation as a String.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Returns a formatted string representation of the specified code unit operand.",
      "javadoc": "Returns a formatted string representation of the specified code unit operand.\n@return formatted code unit representation",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "formatted code unit representation"
      },
      "throws": []
    }
  ]
}
