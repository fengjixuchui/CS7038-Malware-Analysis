{
  "name": "Program",
  "comment": "This interface represents the main entry point into an object which\n stores all information relating to a single program.  This program\n model divides a program into four major parts: the memory, the symbol table,\n the equate table, and the listing.  Each of these parts has an extensive\n interface and can be retrieved via this program interface.  Although the\n components are divided into separate objects, they are not independent.  Any\n changes to one component may and probably will affect the other components.\n Also, the state of one component will restrict the actions of another\n component.\n For example, the createCodeUnit() method of listing will fail if memory is\n undefined at the address where the codeUnit is to be created.",
  "javadoc": "This interface represents the main entry point into an object which\n stores all information relating to a single program.  This program\n model divides a program into four major parts: the memory, the symbol table,\n the equate table, and the listing.  Each of these parts has an extensive\n interface and can be retrieved via this program interface.  Although the\n components are divided into separate objects, they are not independent.  Any\n changes to one component may and probably will affect the other components.\n Also, the state of one component will restrict the actions of another\n component.\n For example, the createCodeUnit() method of listing will fail if memory is\n undefined at the address where the codeUnit is to be created.",
  "static": false,
  "implements": [
    "ghidra.program.model.data.DataTypeManagerDomainObject"
  ],
  "fields": [
    {
      "name": "ANALYSIS_PROPERTIES",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Analyzers\""
    },
    {
      "name": "DISASSEMBLER_PROPERTIES",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Disassembler\""
    },
    {
      "name": "PROGRAM_INFO",
      "comment": "Name of program information property list",
      "javadoc": "Name of program information property list",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Program Information\""
    },
    {
      "name": "PROGRAM_SETTINGS",
      "comment": "Name of program settings property list",
      "javadoc": "Name of program settings property list",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Program Settings\""
    },
    {
      "name": "ANALYZED",
      "comment": "Name of boolean analyzed property",
      "javadoc": "Name of boolean analyzed property",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Analyzed\""
    },
    {
      "name": "DATE_CREATED",
      "comment": "Name of date created property",
      "javadoc": "Name of date created property",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Date Created\""
    },
    {
      "name": "CREATED_WITH_GHIDRA_VERSION",
      "comment": "Name of ghidra version property",
      "javadoc": "Name of ghidra version property",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Created With Ghidra Version\""
    },
    {
      "name": "ANALYSIS_START_DATE",
      "comment": "Creation date to ask for analysis",
      "javadoc": "Creation date to ask for analysis",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"2007-Jan-01\""
    },
    {
      "name": "ANALYSIS_START_DATE_FORMAT",
      "comment": "Format string of analysis date",
      "javadoc": "Format string of analysis date",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"yyyy-MMM-dd\""
    },
    {
      "name": "JANUARY_1_1970",
      "comment": "A date from January 1, 1970",
      "javadoc": "A date from January 1, 1970",
      "static": true,
      "type_long": "java.util.Date",
      "type_short": "Date",
      "constant_value": null
    },
    {
      "name": "MAX_OPERANDS",
      "comment": "The maximum number of operands for any assembly language",
      "javadoc": "The maximum number of operands for any assembly language",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16"
    }
  ],
  "methods": [
    {
      "name": "getListing",
      "comment": "Get the listing object.",
      "javadoc": "Get the listing object.\n@return the Listing interface to the listing object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Listing",
        "type_short": "Listing",
        "comment": "the Listing interface to the listing object."
      },
      "throws": []
    },
    {
      "name": "getAddressMap",
      "comment": "Get the internal program address map",
      "javadoc": "Get the internal program address map\n@return internal address map",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.database.map.AddressMap",
        "type_short": "AddressMap",
        "comment": "internal address map"
      },
      "throws": []
    },
    {
      "name": "getDataTypeManager",
      "comment": "Returns the program\u0027s datatype manager.",
      "javadoc": "Returns the program\u0027s datatype manager.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.ProgramBasedDataTypeManager",
        "type_short": "ProgramBasedDataTypeManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionManager",
      "comment": "Returns the programs function manager.",
      "javadoc": "Returns the programs function manager.\n@return the function manager",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionManager",
        "type_short": "FunctionManager",
        "comment": "the function manager"
      },
      "throws": []
    },
    {
      "name": "getProgramUserData",
      "comment": "Returns the user-specific data manager for\n this program.",
      "javadoc": "Returns the user-specific data manager for\n this program.\n@return the program-specific user data manager",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramUserData",
        "type_short": "ProgramUserData",
        "comment": "the program-specific user data manager"
      },
      "throws": []
    },
    {
      "name": "getSymbolTable",
      "comment": "Get the symbol table object.",
      "javadoc": "Get the symbol table object.\n@return the symbol table object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.SymbolTable",
        "type_short": "SymbolTable",
        "comment": "the symbol table object."
      },
      "throws": []
    },
    {
      "name": "getExternalManager",
      "comment": "Returns the external manager.",
      "javadoc": "Returns the external manager.\n@return the external manager",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalManager",
        "type_short": "ExternalManager",
        "comment": "the external manager"
      },
      "throws": []
    },
    {
      "name": "getEquateTable",
      "comment": "Get the equate table object.",
      "javadoc": "Get the equate table object.\n@return the equate table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.EquateTable",
        "type_short": "EquateTable",
        "comment": "the equate table."
      },
      "throws": []
    },
    {
      "name": "getMemory",
      "comment": "Get the memory object.",
      "javadoc": "Get the memory object.\n@return the memory object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.mem.Memory",
        "type_short": "Memory",
        "comment": "the memory object."
      },
      "throws": []
    },
    {
      "name": "getReferenceManager",
      "comment": "Get the reference manager.",
      "javadoc": "Get the reference manager.\n@return the reference manager",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.ReferenceManager",
        "type_short": "ReferenceManager",
        "comment": "the reference manager"
      },
      "throws": []
    },
    {
      "name": "getBookmarkManager",
      "comment": "Get the bookmark manager.",
      "javadoc": "Get the bookmark manager.\n@return the bookmark manager",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.BookmarkManager",
        "type_short": "BookmarkManager",
        "comment": "the bookmark manager"
      },
      "throws": []
    },
    {
      "name": "getDefaultPointerSize",
      "comment": "Gets the default pointer size in bytes as it may be stored within the program listing.",
      "javadoc": "Gets the default pointer size in bytes as it may be stored within the program listing.\n@return default pointer size.\n@see DataOrganization#getPointerSize()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "default pointer size."
      },
      "throws": []
    },
    {
      "name": "getCompiler",
      "comment": "Gets the name of the compiler believed to have been used to create this program.\n If the compiler hasn\u0027t been determined then \"unknown\" is returned.",
      "javadoc": "Gets the name of the compiler believed to have been used to create this program.\n If the compiler hasn\u0027t been determined then \"unknown\" is returned.\n@return name of the compiler or \"unknown\".",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "name of the compiler or \"unknown\"."
      },
      "throws": []
    },
    {
      "name": "setCompiler",
      "comment": "Sets the name of the compiler which created this program.",
      "javadoc": "Sets the name of the compiler which created this program.\n@param compiler the name",
      "static": false,
      "params": [
        {
          "name": "compiler",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExecutablePath",
      "comment": "Gets the path to the program\u0027s executable file.\n For example, C:\\Temp\\test.exe.\n This will allow plugins to execute the program.",
      "javadoc": "Gets the path to the program\u0027s executable file.\n For example, \u003ccode\u003eC:\\Temp\\test.exe\u003c/code\u003e.\n This will allow plugins to execute the program.\n@return String  path to program\u0027s exe file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String  path to program\u0027s exe file"
      },
      "throws": []
    },
    {
      "name": "setExecutablePath",
      "comment": "Sets the path to the program\u0027s executable file.\n For example, C:\\Temp\\test.exe.",
      "javadoc": "Sets the path to the program\u0027s executable file.\n For example, \u003ccode\u003eC:\\Temp\\test.exe\u003c/code\u003e.\n@param path the path to the program\u0027s exe",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path to the program\u0027s exe"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExecutableFormat",
      "comment": "Returns a value corresponding to the original file format.",
      "javadoc": "Returns a value corresponding to the original file format.\n@return original file format used to load program or null if unknown",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "original file format used to load program or null if unknown"
      },
      "throws": []
    },
    {
      "name": "setExecutableFormat",
      "comment": "Sets the value corresponding to the original file format.",
      "javadoc": "Sets the value corresponding to the original file format.\n@param format the binary file format string to set.",
      "static": false,
      "params": [
        {
          "name": "format",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the binary file format string to set."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExecutableMD5",
      "comment": "Returns a value corresponding to the original binary file MD5 hash.",
      "javadoc": "Returns a value corresponding to the original binary file MD5 hash.\n@return original loaded file MD5 or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "original loaded file MD5 or null"
      },
      "throws": []
    },
    {
      "name": "setExecutableMD5",
      "comment": "Sets the value corresponding to the original binary file MD5 hash.",
      "javadoc": "Sets the value corresponding to the original binary file MD5 hash.\n@param md5 MD5 binary file hash",
      "static": false,
      "params": [
        {
          "name": "md5",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "MD5 binary file hash"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setExecutableSHA256",
      "comment": "Sets the value corresponding to the original binary file SHA256 hash.",
      "javadoc": "Sets the value corresponding to the original binary file SHA256 hash.\n@param sha256 SHA256 binary file hash",
      "static": false,
      "params": [
        {
          "name": "sha256",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "SHA256 binary file hash"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExecutableSHA256",
      "comment": "Returns a value corresponding to the original binary file SHA256 hash.",
      "javadoc": "Returns a value corresponding to the original binary file SHA256 hash.\n@return original loaded file SHA256 or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "original loaded file SHA256 or null"
      },
      "throws": []
    },
    {
      "name": "getCreationDate",
      "comment": "Returns the creation date of this program.\n If the program was created before this property\n existed, then Jan 1, 1970 is returned.",
      "javadoc": "Returns the creation date of this program.\n If the program was created before this property\n existed, then Jan 1, 1970 is returned.\n@return the creation date of this program",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Date",
        "type_short": "Date",
        "comment": "the creation date of this program"
      },
      "throws": []
    },
    {
      "name": "getRelocationTable",
      "comment": "Gets the relocation table.",
      "javadoc": "Gets the relocation table.\n@return relocation table object",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.reloc.RelocationTable",
        "type_short": "RelocationTable",
        "comment": "relocation table object"
      },
      "throws": []
    },
    {
      "name": "getLanguage",
      "comment": "Returns the language used by this program.",
      "javadoc": "Returns the language used by this program.\n@return the language used by this program.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Language",
        "type_short": "Language",
        "comment": "the language used by this program."
      },
      "throws": []
    },
    {
      "name": "getCompilerSpec",
      "comment": "Returns the CompilerSpec currently used by this program.",
      "javadoc": "Returns the CompilerSpec currently used by this program.\n@return the compilerSpec currently used by this program.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.CompilerSpec",
        "type_short": "CompilerSpec",
        "comment": "the compilerSpec currently used by this program."
      },
      "throws": []
    },
    {
      "name": "getLanguageID",
      "comment": "Return the name of the language used by this program.",
      "javadoc": "Return the name of the language used by this program.\n@return the name of the language",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.LanguageID",
        "type_short": "LanguageID",
        "comment": "the name of the language"
      },
      "throws": []
    },
    {
      "name": "getUsrPropertyManager",
      "comment": "Get the user propertyMangager stored with this program. The user property\n manager is used to store arbitrary address indexed information associated\n with the program.",
      "javadoc": "Get the user propertyMangager stored with this program. The user property\n manager is used to store arbitrary address indexed information associated\n with the program.\n@return the user property manager.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.util.PropertyMapManager",
        "type_short": "PropertyMapManager",
        "comment": "the user property manager."
      },
      "throws": []
    },
    {
      "name": "getProgramContext",
      "comment": "Returns the program context.",
      "javadoc": "Returns the program context.\n@return the program context object",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramContext",
        "type_short": "ProgramContext",
        "comment": "the program context object"
      },
      "throws": []
    },
    {
      "name": "getMinAddress",
      "comment": "get the program\u0027s minimum address.",
      "javadoc": "get the program\u0027s minimum address.\n@return the program\u0027s minimum address or null if no memory blocks\n have been defined in the program.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the program\u0027s minimum address or null if no memory blocks\n have been defined in the program."
      },
      "throws": []
    },
    {
      "name": "getMaxAddress",
      "comment": "Get the programs maximum address.",
      "javadoc": "Get the programs maximum address.\n@return the program\u0027s maximum address or null if no memory blocks\n have been defined in the program.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the program\u0027s maximum address or null if no memory blocks\n have been defined in the program."
      },
      "throws": []
    },
    {
      "name": "getChanges",
      "comment": "Get the program changes since the last save as a set of addresses.",
      "javadoc": "Get the program changes since the last save as a set of addresses.\n@return set of changed addresses within program.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramChangeSet",
        "type_short": "ProgramChangeSet",
        "comment": "set of changed addresses within program."
      },
      "throws": []
    },
    {
      "name": "getAddressFactory",
      "comment": "Returns the AddressFactory for this program.",
      "javadoc": "Returns the AddressFactory for this program.\n@return the program address factory",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressFactory",
        "type_short": "AddressFactory",
        "comment": "the program address factory"
      },
      "throws": []
    },
    {
      "name": "parseAddress",
      "comment": "Return an array of Addresses that could represent the given\n string.",
      "javadoc": "Return an array of Addresses that could represent the given\n string.\n@param addrStr the string to parse.\n@return zero length array if addrStr is properly formatted but\n no matching addresses were found or if the address is improperly formatted.",
      "static": false,
      "params": [
        {
          "name": "addrStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to parse."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address[]",
        "type_short": "ghidra.program.model.address.Address[]",
        "comment": "zero length array if addrStr is properly formatted but\n no matching addresses were found or if the address is improperly formatted."
      },
      "throws": []
    },
    {
      "name": "parseAddress",
      "comment": "Return an array of Addresses that could represent the given\n string.",
      "javadoc": "Return an array of Addresses that could represent the given\n string.\n@param addrStr the string to parse.\n@param caseSensitive whether or not to process any addressSpace names as case sensitive.\n@return zero length array if addrStr is properly formatted but\n no matching addresses were found or if the address is improperly formatted.",
      "static": false,
      "params": [
        {
          "name": "addrStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to parse."
        },
        {
          "name": "caseSensitive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "whether or not to process any addressSpace names as case sensitive."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address[]",
        "type_short": "ghidra.program.model.address.Address[]",
        "comment": "zero length array if addrStr is properly formatted but\n no matching addresses were found or if the address is improperly formatted."
      },
      "throws": []
    },
    {
      "name": "invalidate",
      "comment": "Invalidates any caching in a program.\n NOTE: Over-using this method can adversely affect system performance.",
      "javadoc": "Invalidates any caching in a program.\n NOTE: Over-using this method can adversely affect system performance.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "Returns the register with the given name;",
      "javadoc": "Returns the register with the given name;\n@param name the name of the register to retrieve\n@return register or null",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the register to retrieve"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "register or null"
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "Returns the largest register located at the specified address",
      "javadoc": "Returns the largest register located at the specified address\n@param addr register minimum address\n@return largest register at addr or null",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "register minimum address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "largest register at addr or null"
      },
      "throws": []
    },
    {
      "name": "getRegisters",
      "comment": "Returns all registers located at the specified address",
      "javadoc": "Returns all registers located at the specified address\n@param addr register minimum address\n@return all registers at addr",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "register minimum address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register[]",
        "type_short": "ghidra.program.model.lang.Register[]",
        "comment": "all registers at addr"
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "Returns a specific register based upon its address and size",
      "javadoc": "Returns a specific register based upon its address and size\n@param addr register address\n@param size the size of the register (in bytes);\n@return register or null",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "register address"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of the register (in bytes);"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "register or null"
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "Returns the register which corresponds to the specified varnode",
      "javadoc": "Returns the register which corresponds to the specified varnode\n@param varnode the varnode\n@return register or null",
      "static": false,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "the varnode"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "register or null"
      },
      "throws": []
    },
    {
      "name": "getImageBase",
      "comment": "Returns the current program image base address",
      "javadoc": "Returns the current program image base address\n@return program image base address within default space",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "program image base address within default space"
      },
      "throws": []
    },
    {
      "name": "setImageBase",
      "comment": "Sets the program\u0027s image base address.",
      "javadoc": "Sets the program\u0027s image base address.\n@param base the new image base address;\n@param commit if false, then the image base change is temporary and does not really change\n the program and will be lost once the program is closed.  If true, the change is permanent\n and marks the program as \"changed\" (needs saving).\n@throws AddressOverflowException if the new image would cause a memory block to end past the\n the address space.\n@throws LockException if the program is shared and the user does not have an exclusive checkout.\n This will never be thrown if commit is false.\n@throws IllegalStateException if the program state is not suitable for setting the image base.",
      "static": false,
      "params": [
        {
          "name": "base",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the new image base address;"
        },
        {
          "name": "commit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if false, then the image base change is temporary and does not really change\n the program and will be lost once the program is closed.  If true, the change is permanent\n and marks the program as \"changed\" (needs saving)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if the new image would cause a memory block to end past the\n the address space."
        },
        {
          "type_long": "ghidra.framework.store.LockException",
          "type_short": "LockException",
          "comment": "if the program is shared and the user does not have an exclusive checkout.\n This will never be thrown if commit is false."
        },
        {
          "type_long": "java.lang.IllegalStateException",
          "type_short": "IllegalStateException",
          "comment": "if the program state is not suitable for setting the image base."
        }
      ]
    },
    {
      "name": "restoreImageBase",
      "comment": "Restores the last committed image base.",
      "javadoc": "Restores the last committed image base.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLanguage",
      "comment": "Sets the language for the program. If the new language is \"compatible\" with the old language,\n the addressMap is adjusted then the program is \"re-disassembled\".",
      "javadoc": "Sets the language for the program. If the new language is \"compatible\" with the old language,\n the addressMap is adjusted then the program is \"re-disassembled\".\n@param language the new language to use.\n@param compilerSpecID the new compiler specification ID\n@param forceRedisassembly if true a redisassembly will be forced.  This should always be false.\n@param monitor the task monitor\n@throws IllegalStateException thrown if any error occurs, including a cancelled monitor, which leaves this \n program object in an unusable state.  The current transaction should be aborted and the program instance\n discarded.\n@throws IncompatibleLanguageException thrown if the new language is too different from the\n existing language.\n@throws LockException if the program is shared and not checked out exclusively.",
      "static": false,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "the new language to use."
        },
        {
          "name": "compilerSpecID",
          "type_long": "ghidra.program.model.lang.CompilerSpecID",
          "type_short": "CompilerSpecID",
          "comment": "the new compiler specification ID"
        },
        {
          "name": "forceRedisassembly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true a redisassembly will be forced.  This should always be false."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalStateException",
          "type_short": "IllegalStateException",
          "comment": "thrown if any error occurs, including a cancelled monitor, which leaves this \n program object in an unusable state.  The current transaction should be aborted and the program instance\n discarded."
        },
        {
          "type_long": "ghidra.program.model.listing.IncompatibleLanguageException",
          "type_short": "IncompatibleLanguageException",
          "comment": "thrown if the new language is too different from the\n existing language."
        },
        {
          "type_long": "ghidra.framework.store.LockException",
          "type_short": "LockException",
          "comment": "if the program is shared and not checked out exclusively."
        }
      ]
    },
    {
      "name": "getGlobalNamespace",
      "comment": "Returns the global namespace for this program",
      "javadoc": "Returns the global namespace for this program\n@return the global namespace",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Namespace",
        "type_short": "Namespace",
        "comment": "the global namespace"
      },
      "throws": []
    },
    {
      "name": "createAddressSetPropertyMap",
      "comment": "Create a new AddressSetPropertyMap with the specified name.",
      "javadoc": "Create a new AddressSetPropertyMap with the specified name.\n@param name name of the property map.\n@return the newly created property map.\n@throws DuplicateNameException if a property map already exists with the given name.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the property map."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.AddressSetPropertyMap",
        "type_short": "AddressSetPropertyMap",
        "comment": "the newly created property map."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if a property map already exists with the given name."
        }
      ]
    },
    {
      "name": "createIntRangeMap",
      "comment": "Create a new IntRangeMap with the specified name.",
      "javadoc": "Create a new IntRangeMap with the specified name.\n@param name name of the property map.\n@return the newly created property map.\n@throws DuplicateNameException if a property map already exists with the given name.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the property map."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.IntRangeMap",
        "type_short": "IntRangeMap",
        "comment": "the newly created property map."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if a property map already exists with the given name."
        }
      ]
    },
    {
      "name": "getAddressSetPropertyMap",
      "comment": "Get the property map with the given name.",
      "javadoc": "Get the property map with the given name.\n@param name name of the property map\n@return null if no property map exist with the given name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the property map"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.AddressSetPropertyMap",
        "type_short": "AddressSetPropertyMap",
        "comment": "null if no property map exist with the given name"
      },
      "throws": []
    },
    {
      "name": "getIntRangeMap",
      "comment": "Get the property map with the given name.",
      "javadoc": "Get the property map with the given name.\n@param name name of the property map\n@return null if no property map exist with the given name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the property map"
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.IntRangeMap",
        "type_short": "IntRangeMap",
        "comment": "null if no property map exist with the given name"
      },
      "throws": []
    },
    {
      "name": "deleteAddressSetPropertyMap",
      "comment": "Remove the property map from the program.",
      "javadoc": "Remove the property map from the program.\n@param name name of the property map to remove",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the property map to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteIntRangeMap",
      "comment": "Remove the property map from the program.",
      "javadoc": "Remove the property map from the program.\n@param name name of the property map to remove",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the property map to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUniqueProgramID",
      "comment": "Returns an ID that is unique for this program.  This provides an easy way to store\n references to a program across client persistence.",
      "javadoc": "Returns an ID that is unique for this program.  This provides an easy way to store\n references to a program across client persistence.\n@return unique program ID",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "unique program ID"
      },
      "throws": []
    }
  ]
}
