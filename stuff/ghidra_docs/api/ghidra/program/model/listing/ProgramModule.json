{
  "name": "ProgramModule",
  "comment": "A ProgramModule is a group of ProgramFragments \n and/or other ProgramModules together with some related \n information such as a name, comment, and alias. Users create modules to \n overlay the program with a hierarchical structure. A child of a module \n is a fragment or module which it directly contains. A parent of a module \n is a module which has this module as a child. A module may be contained in more \n than one module. A Program always has at least one module, the root module. \n The root module cannot be removed and is the ancestor for all other modules and\n fragments in the program.",
  "javadoc": "A \u003cCODE\u003eProgramModule\u003c/CODE\u003e is a group of \u003cCODE\u003eProgramFragment\u003c/CODE\u003es \n and/or other \u003cCODE\u003eProgramModule\u003c/CODE\u003es together with some related \n information such as a name, comment, and alias. Users create modules to \n overlay the program with a hierarchical structure. A \u003cI\u003echild\u003c/I\u003e of a module \n is a fragment or module which it directly contains. A \u003cI\u003eparent\u003c/I\u003e of a module \n is a module which has this module as a child. A module may be contained in more \n than one module. A \u003cCODE\u003eProgram\u003c/CODE\u003e always has at least one module, the root module. \n The root module cannot be removed and is the ancestor for all other modules and\n fragments in the program.",
  "static": false,
  "implements": [
    "ghidra.program.model.listing.Group"
  ],
  "fields": [],
  "methods": [
    {
      "name": "contains",
      "comment": "Returns whether this module directly contains the\n given fragment as a child.",
      "javadoc": "Returns whether this module directly contains the\n given fragment as a child.\n@param fragment the fragment to check.",
      "static": false,
      "params": [
        {
          "name": "fragment",
          "type_long": "ghidra.program.model.listing.ProgramFragment",
          "type_short": "ProgramFragment",
          "comment": "the fragment to check."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Returns whether this module directly contains the\n given module as a child.",
      "javadoc": "Returns whether this module directly contains the\n given module as a child.\n@param module the module to check.\n@return true if module is the same as this module, or if module\n is a child of this module.",
      "static": false,
      "params": [
        {
          "name": "module",
          "type_long": "ghidra.program.model.listing.ProgramModule",
          "type_short": "ProgramModule",
          "comment": "the module to check."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if module is the same as this module, or if module\n is a child of this module."
      },
      "throws": []
    },
    {
      "name": "getNumChildren",
      "comment": "Returns the number of children of this module.",
      "javadoc": "Returns the number of children of this module.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getChildren",
      "comment": "Returns an array containing this module\u0027s children.",
      "javadoc": "Returns an array containing this module\u0027s children.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Group[]",
        "type_short": "ghidra.program.model.listing.Group[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIndex",
      "comment": "Get the index of the child with the given name.",
      "javadoc": "Get the index of the child with the given name.\n@param name name of child\n@return int index or -1 if this Module does not have a child\n with the given name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of child"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int index or -1 if this Module does not have a child\n with the given name"
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Adds the given module as a child of this module.\n ",
      "javadoc": "Adds the given module as a child of this module.\n \u003cP\u003e\n@param module the module to be added.\n@throws CircularDependencyException thrown if the module being\n added is an ancestor of this module. The module structure of\n a program does not allow \"cycles\" of this sort to be created.\n@exception DuplicateGroupException thrown if the module being\n added is already a child of this module.",
      "static": false,
      "params": [
        {
          "name": "module",
          "type_long": "ghidra.program.model.listing.ProgramModule",
          "type_short": "ProgramModule",
          "comment": "the module to be added."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.listing.CircularDependencyException",
          "type_short": "CircularDependencyException",
          "comment": "thrown if the module being\n added is an ancestor of this module. The module structure of\n a program does not allow \"cycles\" of this sort to be created."
        },
        {
          "type_long": "ghidra.program.model.listing.DuplicateGroupException",
          "type_short": "DuplicateGroupException",
          "comment": ""
        }
      ]
    },
    {
      "name": "add",
      "comment": "Adds the given fragment as a child of this module.\n ",
      "javadoc": "Adds the given fragment as a child of this module.\n \u003cP\u003e\n@exception DuplicateGroupException thrown if the fragment being\n added is already a child of this module.",
      "static": false,
      "params": [
        {
          "name": "fragment",
          "type_long": "ghidra.program.model.listing.ProgramFragment",
          "type_short": "ProgramFragment",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.listing.DuplicateGroupException",
          "type_short": "DuplicateGroupException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createModule",
      "comment": "Creates a new module and makes it a child of this\n module.",
      "javadoc": "Creates a new module and makes it a child of this\n module.\u003cP\u003e\n@param moduleName the name to use for the new module.\n@return the newly created module.\n@exception DuplicateNameException thrown if the given\n name is already used by an existing module or fragment.",
      "static": false,
      "params": [
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name to use for the new module."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramModule",
        "type_short": "ProgramModule",
        "comment": "the newly created module."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFragment",
      "comment": "Creates a new fragment and makes it a child of this module.",
      "javadoc": "Creates a new fragment and makes it a child of this module.\u003cP\u003e\n@param fragmentName the name to use for the new fragment.\n@return the newly created fragment.\n@exception DuplicateNameException thrown if the given\n name is already used by an existing module or fragment.",
      "static": false,
      "params": [
        {
          "name": "fragmentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name to use for the new fragment."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramFragment",
        "type_short": "ProgramFragment",
        "comment": "the newly created fragment."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "reparent",
      "comment": "Reparents child with the given name to this Module; removes the\n child from oldParent.",
      "javadoc": "Reparents child with the given name to this Module; removes the\n child from oldParent.\n@param name name of child to reparent\n@param oldParent old parent\n@exception NotFoundException if name is not the name of a child\n in oldParent",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of child to reparent"
        },
        {
          "name": "oldParent",
          "type_long": "ghidra.program.model.listing.ProgramModule",
          "type_short": "ProgramModule",
          "comment": "old parent"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "moveChild",
      "comment": "Changes the ordering of this module\u0027s children by moving\n the child with the given name to position given by index.",
      "javadoc": "Changes the ordering of this module\u0027s children by moving\n the child with the given name to position given by index.\u003cP\u003e\n@param name the name of the child to move.\n@param index the index to move it to.\n@exception NotFoundException thrown if a child with the given\n name cannot be found in this module.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the child to move."
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index to move it to."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "removeChild",
      "comment": "Removes a child module or fragment from this Module.",
      "javadoc": "Removes a child module or fragment from this Module.\n@return true if successful, false if no child in this module has the given name.\n@exception NotEmptyException thrown if the module appears in no other\n modules and it is not empty.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if successful, false if no child in this module has the given name."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotEmptyException",
          "type_short": "NotEmptyException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isDescendant",
      "comment": "Returns whether the given module is a descendant of this\n module.",
      "javadoc": "Returns whether the given module is a descendant of this\n module.\u003cP\u003e\n@param module the module to check.\n@return true if the module is a descendant, false otherwise.",
      "static": false,
      "params": [
        {
          "name": "module",
          "type_long": "ghidra.program.model.listing.ProgramModule",
          "type_short": "ProgramModule",
          "comment": "the module to check."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the module is a descendant, false otherwise."
      },
      "throws": []
    },
    {
      "name": "isDescendant",
      "comment": "Returns whether the given fragment is a descendant of this\n module.",
      "javadoc": "Returns whether the given fragment is a descendant of this\n module.\u003cP\u003e\n@param fragment the fragment to check.\n@return true if the fragment is a descendant, false otherwise.",
      "static": false,
      "params": [
        {
          "name": "fragment",
          "type_long": "ghidra.program.model.listing.ProgramFragment",
          "type_short": "ProgramFragment",
          "comment": "the fragment to check."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the fragment is a descendant, false otherwise."
      },
      "throws": []
    },
    {
      "name": "getMinAddress",
      "comment": "Returns the minimum address of this module which will be the minimum\n address from the set of all fragments which are descendants of this\n module.\n ",
      "javadoc": "Returns the minimum address of this module which will be the minimum\n address from the set of all fragments which are descendants of this\n module.\n \u003cP\u003e\n@return the minimum address, this will be null if all of the module\u0027s\n descendant fragments are empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the minimum address, this will be null if all of the module\u0027s\n descendant fragments are empty."
      },
      "throws": []
    },
    {
      "name": "getMaxAddress",
      "comment": "Returns the maximum address of this module which will be the maximum\n address from the set of all fragments which are descendants of this\n module.\n ",
      "javadoc": "Returns the maximum address of this module which will be the maximum\n address from the set of all fragments which are descendants of this\n module.\n \u003cP\u003e\n@return the maximum address, this will be null if all of the module\u0027s\n descendant fragments are empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the maximum address, this will be null if all of the module\u0027s\n descendant fragments are empty."
      },
      "throws": []
    },
    {
      "name": "getFirstAddress",
      "comment": "Returns the first address of this module which will be the minimum\n address of the first descendant fragment which is non-empty. In other\n words this returns the first address for this module as defined by\n the user ordering of the module\u0027s children.\n ",
      "javadoc": "Returns the first address of this module which will be the minimum\n address of the first descendant fragment which is non-empty. In other\n words this returns the first address for this module as defined by\n the user ordering of the module\u0027s children.\n \u003cP\u003e\n@return the first address, this will be null if all of the module\u0027s\n descendant fragments are empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the first address, this will be null if all of the module\u0027s\n descendant fragments are empty."
      },
      "throws": []
    },
    {
      "name": "getLastAddress",
      "comment": "Returns the last address of this module which will be the maximum address\n of the last descendant fragment which is non-empty. In other words this\n returns the last address for this module as defined by the user\n ordering of the module\u0027s children.\n ",
      "javadoc": "Returns the last address of this module which will be the maximum address\n of the last descendant fragment which is non-empty. In other words this\n returns the last address for this module as defined by the user\n ordering of the module\u0027s children.\n \u003cP\u003e\n@return the last address, this will be null if all of the module\u0027s\n descendant fragments are empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the last address, this will be null if all of the module\u0027s\n descendant fragments are empty."
      },
      "throws": []
    },
    {
      "name": "getAddressSet",
      "comment": "Returns the set of addresses for this module which will be the combined \n set of addresses from the set of all fragments which are descendants of this\n module.",
      "javadoc": "Returns the set of addresses for this module which will be the combined \n set of addresses from the set of all fragments which are descendants of this\n module.\n@return the complete address set for this module.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "the complete address set for this module."
      },
      "throws": []
    },
    {
      "name": "getVersionTag",
      "comment": "Returns an object that can be used to detect when the module tree has been affected\n by an undo or redo. After an undo/redo, if this module was affected, then a new\n verionTag object is created.",
      "javadoc": "Returns an object that can be used to detect when the module tree has been affected\n by an undo or redo. After an undo/redo, if this module was affected, then a new\n verionTag object is created.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getModificationNumber",
      "comment": "Get the current modification number of the module tree; the number \n is updated when ever a change is made to any module or fragment\n that is part of this module\u0027s root tree.",
      "javadoc": "Get the current modification number of the module tree; the number \n is updated when ever a change is made to any module or fragment\n that is part of this module\u0027s root tree.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTreeID",
      "comment": "Get the ID for the tree that this module belongs to.",
      "javadoc": "Get the ID for the tree that this module belongs to.\n@return ID for the tree",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "ID for the tree"
      },
      "throws": []
    }
  ]
}
