{
  "name": "VariableUtilities",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "PARAMETER_PRECEDENCE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "UNIQUE_PRECEDENCE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "MEMORY_PRECEDENCE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "STACK_PRECEDENCE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "REGISTER_PRECEDENCE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "COMPOUND_PRECEDENCE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrecedence",
      "comment": "Get a precedence value for the specified variable.\n This value can be used to assist with LocalVariable.compareTo(Variable var)",
      "javadoc": "Get a precedence value for the specified variable.\n This value can be used to assist with LocalVariable.compareTo(Variable var)\n@param var\n@return numeric precedence",
      "static": true,
      "params": [
        {
          "name": "var",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "numeric precedence"
      },
      "throws": []
    },
    {
      "name": "storageMatches",
      "comment": "Compare storage varnodes for two lists of variables.  No check is done to ensure that\n storage is considered good/valid (i.e., BAD_STORAGE, UNASSIGNED_STORAGE and VOID_STORAGE\n all have an empty varnode list and would be considered a match)",
      "javadoc": "Compare storage varnodes for two lists of variables.  No check is done to ensure that\n storage is considered good/valid (i.e., BAD_STORAGE, UNASSIGNED_STORAGE and VOID_STORAGE\n all have an empty varnode list and would be considered a match)\n@param vars\n@param otherVars\n@return true if the exact sequence of variable storage varnodes matches across two lists of variables.",
      "static": true,
      "params": [
        {
          "name": "vars",
          "type_long": "java.util.List\u003cghidra.program.model.listing.Variable\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "otherVars",
          "type_long": "java.util.List\u003cghidra.program.model.listing.Variable\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the exact sequence of variable storage varnodes matches across two lists of variables."
      },
      "throws": []
    },
    {
      "name": "storageMatches",
      "comment": "Compare storage varnodes for two lists of variables.  No check is done to ensure that\n storage is considered good/valid (i.e., BAD_STORAGE, UNASSIGNED_STORAGE and VOID_STORAGE\n all have an empty varnode list and would be considered a match)",
      "javadoc": "Compare storage varnodes for two lists of variables.  No check is done to ensure that\n storage is considered good/valid (i.e., BAD_STORAGE, UNASSIGNED_STORAGE and VOID_STORAGE\n all have an empty varnode list and would be considered a match)\n@param vars\n@param otherVars\n@return true if the exact sequence of variable storage varnodes matches across two lists of variables.",
      "static": true,
      "params": [
        {
          "name": "vars",
          "type_long": "java.util.List\u003c? extends ghidra.program.model.listing.Variable\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "otherVars",
          "type_long": "ghidra.program.model.listing.Variable[]",
          "type_short": "ghidra.program.model.listing.Variable[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the exact sequence of variable storage varnodes matches across two lists of variables."
      },
      "throws": []
    },
    {
      "name": "compare",
      "comment": "Compare two variables without using the instance specific compareTo method.",
      "javadoc": "Compare two variables without using the instance specific compareTo method.\n@param v1\n@param v2\n@return a negative value if v1 \u0026lt; v2, 0 if equal, and\n positive if v1 \u0026gt; v2",
      "static": true,
      "params": [
        {
          "name": "v1",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": ""
        },
        {
          "name": "v2",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "a negative value if v1  v2, 0 if equal, and\n positive if v1  v2"
      },
      "throws": []
    },
    {
      "name": "getAutoDataType",
      "comment": "Determine the appropriate data type for an automatic parameter",
      "javadoc": "Determine the appropriate data type for an automatic parameter\n@param function\n@param returnDataType\n@param storage variable storage for an auto-parameter (isAutoStorage should be true)\n@return auto-parameter data type",
      "static": true,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "returnDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "storage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": "variable storage for an auto-parameter (isAutoStorage should be true)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "auto-parameter data type"
      },
      "throws": []
    },
    {
      "name": "getPointer",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "baseType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "ptrSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Pointer",
        "type_short": "Pointer",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkStorage",
      "comment": "Perform variable storage checks using the specified datatype.",
      "javadoc": "Perform variable storage checks using the specified datatype.\n@param storage variable storage whose size must match the specified data type size\n@param dataType a datatype checked using {@link #checkDataType(DataType, boolean, int, Program)}\n@param allowSizeMismatch if true size mismatch will be ignore\n@throws InvalidInputException",
      "static": true,
      "params": [
        {
          "name": "storage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": "variable storage whose size must match the specified data type size"
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "a datatype checked using #checkDataType(DataType, boolean, int, Program)"
        },
        {
          "name": "allowSizeMismatch",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true size mismatch will be ignore"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "checkStorage",
      "comment": "Perform variable storage checks using the specified datatype.",
      "javadoc": "Perform variable storage checks using the specified datatype.\n@param function if specified and variable storage size does not match the data-type size\n an attempt will be made to resize the specified storage.\n@param storage variable storage\n@param dataType a datatype checked using {@link #checkDataType(DataType, boolean, int, Program)}\n@param allowSizeMismatch if true size mismatch will be ignore\n@return original storage or resized storage with the correct size.\n@throws InvalidInputException",
      "static": true,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "if specified and variable storage size does not match the data-type size\n an attempt will be made to resize the specified storage."
        },
        {
          "name": "storage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": "variable storage"
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "a datatype checked using #checkDataType(DataType, boolean, int, Program)"
        },
        {
          "name": "allowSizeMismatch",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true size mismatch will be ignore"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": "original storage or resized storage with the correct size."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "checkDataType",
      "comment": "Check the specified datatype for use as a return, parameter or variable type.  It may\n not be suitable for other uses.  The following datatypes will be mutated into a default pointer datatype:\n \n Function definition datatype\n An unsized/zero-element array\n ",
      "javadoc": "Check the specified datatype for use as a return, parameter or variable type.  It may\n not be suitable for other uses.  The following datatypes will be mutated into a default pointer datatype:\n \u003cul\u003e\n \u003cli\u003eFunction definition datatype\u003c/li\u003e\n \u003cli\u003eAn unsized/zero-element array\u003c/li\u003e\n \u003c/ul\u003e\n@param dataType datatype to be checked\n@param voidOK true if checking return datatype and void is allow, else false.\n@param defaultSize Undefined datatype size to be used if specified datatype is null.  A value less than 1\n will result in the DEFAULT data type being returned (i.e., \"undefined\").\n@param dtMgr target datatype manager (null permitted which will adopt default data organization)\n@return cloned/mutated datatype suitable for function parameters and variables (including function return data type).\n@throws InvalidInputException if an unacceptable datatype was specified",
      "static": true,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "datatype to be checked"
        },
        {
          "name": "voidOK",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if checking return datatype and void is allow, else false."
        },
        {
          "name": "defaultSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "Undefined datatype size to be used if specified datatype is null.  A value less than 1\n will result in the DEFAULT data type being returned (i.e., \"undefined\")."
        },
        {
          "name": "dtMgr",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "target datatype manager (null permitted which will adopt default data organization)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "cloned/mutated datatype suitable for function parameters and variables (including function return data type)."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if an unacceptable datatype was specified"
        }
      ]
    },
    {
      "name": "checkDataType",
      "comment": "Check the specified datatype for use as a return, parameter or variable type.  It may\n not be suitable for other uses.  The following datatypes will be mutated into a default pointer datatype:\n \n Function definition datatype\n An unsized/zero-element array\n ",
      "javadoc": "Check the specified datatype for use as a return, parameter or variable type.  It may\n not be suitable for other uses.  The following datatypes will be mutated into a default pointer datatype:\n \u003cul\u003e\n \u003cli\u003eFunction definition datatype\u003c/li\u003e\n \u003cli\u003eAn unsized/zero-element array\u003c/li\u003e\n \u003c/ul\u003e\n@param dataType datatype to be checked\n@param voidOK true if checking return datatype and void is allow, else false.\n@param defaultSize Undefined datatype size to be used if specified datatype is null.  A value less than 1\n will result in the DEFAULT data type being returned (i.e., \"undefined\").\n@param program target program\n@return cloned/mutated datatype suitable for function parameters and variables (including function return data type).\n@throws InvalidInputException if an unacceptable datatype was specified",
      "static": true,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "datatype to be checked"
        },
        {
          "name": "voidOK",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if checking return datatype and void is allow, else false."
        },
        {
          "name": "defaultSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "Undefined datatype size to be used if specified datatype is null.  A value less than 1\n will result in the DEFAULT data type being returned (i.e., \"undefined\")."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "target program"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "cloned/mutated datatype suitable for function parameters and variables (including function return data type)."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if an unacceptable datatype was specified"
        }
      ]
    },
    {
      "name": "checkDataType",
      "comment": "Check the specified datatype for use as a return, parameter or variable type.  It may\n not be suitable for other uses.  The following datatypes will be mutated into a default pointer datatype:\n \n Function definition datatype\n An unsized/zero-element array\n ",
      "javadoc": "Check the specified datatype for use as a return, parameter or variable type.  It may\n not be suitable for other uses.  The following datatypes will be mutated into a default pointer datatype:\n \u003cul\u003e\n \u003cli\u003eFunction definition datatype\u003c/li\u003e\n \u003cli\u003eAn unsized/zero-element array\u003c/li\u003e\n \u003c/ul\u003e\n@param dataType datatype to be checked.  If null is specified the DEFAULT datatype will be\n returned.\n@param voidOK true if checking return datatype and void is allow, else false.\n@param dtMgr target datatype manager (null permitted which will adopt default data organization)\n@return cloned/mutated datatype suitable for function parameters and variables (including function return data type).\n@throws InvalidInputException if an unacceptable datatype was specified",
      "static": true,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "datatype to be checked.  If null is specified the DEFAULT datatype will be\n returned."
        },
        {
          "name": "voidOK",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if checking return datatype and void is allow, else false."
        },
        {
          "name": "dtMgr",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "target datatype manager (null permitted which will adopt default data organization)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "cloned/mutated datatype suitable for function parameters and variables (including function return data type)."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if an unacceptable datatype was specified"
        }
      ]
    },
    {
      "name": "resizeStorage",
      "comment": "Perform resize variable storage to desired newSize.  This method has limited ability to grow\n storage if current storage does not have a stack component or if other space constraints\n are exceeded.",
      "javadoc": "Perform resize variable storage to desired newSize.  This method has limited ability to grow\n storage if current storage does not have a stack component or if other space constraints\n are exceeded.\n@param curStorage\n@param dataType\n@param alignStack if false no attempt is made to align stack usage for big-endian\n@param function\n@return resize storage\n@throws InvalidInputException if unable to resize storage to specified size.",
      "static": true,
      "params": [
        {
          "name": "curStorage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "alignStack",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if false no attempt is made to align stack usage for big-endian"
        },
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": "resize storage"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if unable to resize storage to specified size."
        }
      ]
    },
    {
      "name": "shrinkStorage",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "curStorage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": ""
        },
        {
          "name": "newSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "alignStack",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "expandStorage",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "curStorage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": ""
        },
        {
          "name": "newSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "alignStack",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "shrinkVarnode",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "sizeReduction",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "curStorage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": ""
        },
        {
          "name": "newSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "alignStack",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "shrinkRegister",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "sizeReduction",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "expandVarnode",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "sizeIncrease",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "curStorage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": ""
        },
        {
          "name": "newSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "alignStack",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "resizeStackVarnode",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "newVarnodeSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "curStorage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": ""
        },
        {
          "name": "newSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "align",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getStackAttributes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableUtilities.StackAttributes",
        "type_short": "StackAttributes",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkVariableConflict",
      "comment": "Check for variable storage conflict and optionally remove conflicting variables.",
      "javadoc": "Check for variable storage conflict and optionally remove conflicting variables.\n@param function\n@param var existing function variable or null for new variable\n@param newStorage new/updated variable storage\n@param deleteConflictingVariables\n@throws VariableSizeException if deleteConflictingVariables is false and another variable conflicts",
      "static": true,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "var",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "existing function variable or null for new variable"
        },
        {
          "name": "newStorage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": "new/updated variable storage"
        },
        {
          "name": "deleteConflictingVariables",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.listing.VariableSizeException",
          "type_short": "VariableSizeException",
          "comment": "if deleteConflictingVariables is false and another variable conflicts"
        }
      ]
    },
    {
      "name": "checkVariableConflict",
      "comment": "Check for variable storage conflict and optionally remove conflicting variables.",
      "javadoc": "Check for variable storage conflict and optionally remove conflicting variables.\n@param existingVariables variables to check (may contain null entries)\n@param var\n@param newStorage\n@throws VariableSizeException\n@throws VariableSizeException if another variable conflicts",
      "static": true,
      "params": [
        {
          "name": "existingVariables",
          "type_long": "java.util.List\u003c? extends ghidra.program.model.listing.Variable\u003e",
          "type_short": "List",
          "comment": "variables to check (may contain null entries)"
        },
        {
          "name": "var",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": ""
        },
        {
          "name": "newStorage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": ""
        },
        {
          "name": "conflictHandler",
          "type_long": "ghidra.program.model.listing.VariableUtilities.VariableConflictHandler",
          "type_short": "VariableConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.listing.VariableSizeException",
          "type_short": "VariableSizeException",
          "comment": ""
        }
      ]
    },
    {
      "name": "generateConflictException",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "newStorage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": ""
        },
        {
          "name": "conflicts",
          "type_long": "java.util.List\u003cghidra.program.model.listing.Variable\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "maxConflictVarDetails",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.listing.VariableSizeException",
          "type_short": "VariableSizeException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBaseStackParamOffset",
      "comment": "Determine the minimum stack offset for parameters",
      "javadoc": "Determine the minimum stack offset for parameters\n@param function\n@return stack parameter offset or null if it could not be determined",
      "static": true,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Integer",
        "type_short": "Integer",
        "comment": "stack parameter offset or null if it could not be determined"
      },
      "throws": []
    },
    {
      "name": "getThisParameter",
      "comment": "Generate a suitable \u0027this\u0027 parameter for the specified function",
      "javadoc": "Generate a suitable \u0027this\u0027 parameter for the specified function\n@param function\n@return this parameter or null of calling convention is not a \u0027thiscall\u0027\n or some other error prevents it\n@deprecated should rely on auto-param instead - try not to use this method which may be eliminated",
      "static": true,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "convention",
          "type_long": "ghidra.program.model.lang.PrototypeModel",
          "type_short": "PrototypeModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ParameterImpl",
        "type_short": "ParameterImpl",
        "comment": "this parameter or null of calling convention is not a \u0027thiscall\u0027\n or some other error prevents it"
      },
      "throws": []
    },
    {
      "name": "createPlaceholderClassStruct",
      "comment": "Create an empty placeholder class structure whose category is derived from\n the function\u0027s class namespace.  NOTE: The structure will not be added to the data\n type manager.",
      "javadoc": "Create an empty placeholder class structure whose category is derived from\n the function\u0027s class namespace.  NOTE: The structure will not be added to the data\n type manager.\n@param classNamespace class namespace\n@param dataTypeManager data type manager\u0027s whose data organization should be applied.\n@return new class structure",
      "static": true,
      "params": [
        {
          "name": "classNamespace",
          "type_long": "ghidra.program.model.listing.GhidraClass",
          "type_short": "GhidraClass",
          "comment": "class namespace"
        },
        {
          "name": "dataTypeManager",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "data type manager\u0027s whose data organization should be applied."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Structure",
        "type_short": "Structure",
        "comment": "new class structure"
      },
      "throws": []
    },
    {
      "name": "findOrCreateClassStruct",
      "comment": "Find the structure data type which corresponds to the specified class namespace\n within the specified data type manager.\n The preferred structure will utilize a namespace-based category path, however,\n the match criteria can be fuzzy and relies primarily on the class name.\n While a new empty structure may be returned, it will not be added to the program\u0027s data type\n manager.",
      "javadoc": "Find the structure data type which corresponds to the specified class namespace\n within the specified data type manager.\n The preferred structure will utilize a namespace-based category path, however,\n the match criteria can be fuzzy and relies primarily on the class name.\n While a new empty structure may be returned, it will not be added to the program\u0027s data type\n manager.\n@param classNamespace class namespace\n@param dataTypeManager data type manager which should be searched and whose\n data organization should be used.\n@return new or existing structure whose name matches the specified class namespace",
      "static": true,
      "params": [
        {
          "name": "classNamespace",
          "type_long": "ghidra.program.model.listing.GhidraClass",
          "type_short": "GhidraClass",
          "comment": "class namespace"
        },
        {
          "name": "dataTypeManager",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "data type manager which should be searched and whose\n data organization should be used."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Structure",
        "type_short": "Structure",
        "comment": "new or existing structure whose name matches the specified class namespace"
      },
      "throws": []
    },
    {
      "name": "findOrCreateClassStruct",
      "comment": "Find the structure data type which corresponds to the specified function\u0027s class namespace\n within the function\u0027s program.  One will be instantiated if not found.\n The preferred structure will utilize a namespace-based category path, however,\n the match criteria can be fuzzy and relies primarily on the class name.",
      "javadoc": "Find the structure data type which corresponds to the specified function\u0027s class namespace\n within the function\u0027s program.  One will be instantiated if not found.\n The preferred structure will utilize a namespace-based category path, however,\n the match criteria can be fuzzy and relies primarily on the class name.\n@param function function\u0027s whose class namespace is the basis for the structure\n@return new or existing structure whose name matches the function\u0027s class namespace or\n null if function not contained within a class namespace.",
      "static": true,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "function\u0027s whose class namespace is the basis for the structure"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Structure",
        "type_short": "Structure",
        "comment": "new or existing structure whose name matches the function\u0027s class namespace or\n null if function not contained within a class namespace."
      },
      "throws": []
    },
    {
      "name": "findExistingClassStruct",
      "comment": "Find the structure data type which corresponds to the specified class namespace\n within the specified data type manager. .\n The preferred structure will utilize a namespace-based category path, however,\n the match criteria can be fuzzy and relies primarily on the class name.",
      "javadoc": "Find the structure data type which corresponds to the specified class namespace\n within the specified data type manager. .\n The preferred structure will utilize a namespace-based category path, however,\n the match criteria can be fuzzy and relies primarily on the class name.\n@param classNamespace class namespace\n@param dataTypeManager data type manager which should be searched.\n@return existing structure whose name matches the specified class namespace\n or null if not found.",
      "static": true,
      "params": [
        {
          "name": "classNamespace",
          "type_long": "ghidra.program.model.listing.GhidraClass",
          "type_short": "GhidraClass",
          "comment": "class namespace"
        },
        {
          "name": "dataTypeManager",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "data type manager which should be searched."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Structure",
        "type_short": "Structure",
        "comment": "existing structure whose name matches the specified class namespace\n or null if not found."
      },
      "throws": []
    },
    {
      "name": "findExistingClassStruct",
      "comment": "Find the structure data type which corresponds to the specified function\u0027s class namespace\n within the function\u0027s program.\n The preferred structure will utilize a namespace-based category path, however,\n the match criteria can be fuzzy and relies primarily on the class name.",
      "javadoc": "Find the structure data type which corresponds to the specified function\u0027s class namespace\n within the function\u0027s program.\n The preferred structure will utilize a namespace-based category path, however,\n the match criteria can be fuzzy and relies primarily on the class name.\n@param func the function.\n@return existing structure whose name matches the specified function\u0027s class namespace\n or null if not found.",
      "static": true,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Structure",
        "type_short": "Structure",
        "comment": "existing structure whose name matches the specified function\u0027s class namespace\n or null if not found."
      },
      "throws": []
    },
    {
      "name": "equivalentVariableArrays",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "vars1",
          "type_long": "ghidra.program.model.listing.Variable[]",
          "type_short": "ghidra.program.model.listing.Variable[]",
          "comment": ""
        },
        {
          "name": "vars2",
          "type_long": "ghidra.program.model.listing.Variable[]",
          "type_short": "ghidra.program.model.listing.Variable[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equivalentVariables",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "var1",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": ""
        },
        {
          "name": "var2",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
