{
  "name": "FunctionSignature",
  "comment": "Interface describing all the things about a function that are portable\n from one program to another.",
  "javadoc": "Interface describing all the things about a function that are portable\n from one program to another.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "VAR_ARGS_DISPLAY_STRING",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"...\""
    },
    {
      "name": "VOID_PARAM_DISPLAY_STRING",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"void\""
    }
  ],
  "methods": [
    {
      "name": "getName",
      "comment": "Return the name of this function",
      "javadoc": "Return the name of this function",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrototypeString",
      "comment": "Return a string representation of the function signature without the\n calling convention specified.",
      "javadoc": "Return a string representation of the function signature without the\n calling convention specified.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrototypeString",
      "comment": "Return a string representation of the function signature",
      "javadoc": "Return a string representation of the function signature\n@param includeCallingConvention if true prototype will include call convention\n declaration if known.",
      "static": false,
      "params": [
        {
          "name": "includeCallingConvention",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true prototype will include call convention\n declaration if known."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getArguments",
      "comment": "Return an array of parameters for the function",
      "javadoc": "Return an array of parameters for the function",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.ParameterDefinition[]",
        "type_short": "ghidra.program.model.data.ParameterDefinition[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReturnType",
      "comment": "Return the return data type",
      "javadoc": "Return the return data type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComment",
      "comment": "Return the comment string",
      "javadoc": "Return the comment string",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasVarArgs",
      "comment": "Returns true if this function signature has a variable argument list (VarArgs).",
      "javadoc": "Returns true if this function signature has a variable argument list (VarArgs).",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGenericCallingConvention",
      "comment": "Returns the generic calling convention associated with this function definition.\n The \"unknown\" convention should be returned instead of null.",
      "javadoc": "Returns the generic calling convention associated with this function definition.\n The \"unknown\" convention should be returned instead of null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.GenericCallingConvention",
        "type_short": "GenericCallingConvention",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEquivalentSignature",
      "comment": "Returns true if the given signature is equivalent to this signature.  The\n precise meaning of \"equivalent\" is dependent upon return/parameter dataTypes.",
      "javadoc": "Returns true if the given signature is equivalent to this signature.  The\n precise meaning of \"equivalent\" is dependent upon return/parameter dataTypes.\n@param signature the function signature being tested for equivalence.\n@return true if the if the given signature is equivalent to this signature.",
      "static": false,
      "params": [
        {
          "name": "signature",
          "type_long": "ghidra.program.model.listing.FunctionSignature",
          "type_short": "FunctionSignature",
          "comment": "the function signature being tested for equivalence."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the if the given signature is equivalent to this signature."
      },
      "throws": []
    }
  ]
}
