{
  "name": "FunctionSignatureImpl",
  "comment": "Implementation of a Function Signature.  All the information about\n a function that is portable from one program to another.",
  "javadoc": "Implementation of a Function Signature.  All the information about\n a function that is portable from one program to another.\n@deprecated FunctionDefinitionDataType should be used for defining a function signature",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.data.FunctionDefinitionDataType",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates new FunctionSignatureImpl with the given name, default return type\n and no parameters.",
      "javadoc": "Creates new FunctionSignatureImpl with the given name, default return type\n and no parameters.\n@param name the name of the function",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the function"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates new FunctionSignatureImpl based upon an existing function signature.",
      "javadoc": "Creates new FunctionSignatureImpl based upon an existing function signature.\n@param signature the signature of the function",
      "static": false,
      "params": [
        {
          "name": "signature",
          "type_long": "ghidra.program.model.listing.FunctionSignature",
          "type_short": "FunctionSignature",
          "comment": "the signature of the function"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a Function Definition based on a Function.\n The effective signature will be used where forced indirect and auto-params\n are reflected in the signature.",
      "javadoc": "Create a Function Definition based on a Function.\n The effective signature will be used where forced indirect and auto-params\n are reflected in the signature.\n@param function the function to use to create a Function Signature.",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function to use to create a Function Signature."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a Function Definition based on a Function",
      "javadoc": "Create a Function Definition based on a Function\n@param function the function to use to create a Function Signature.\n@param formalSignature if true only original raw types will be retained and \n auto-params discarded (e.g., this, __return_storage_ptr__, etc.).  If false,\n the effective signature will be used where forced indirect and auto-params\n are reflected in the signature.  This option has no affect if the specified \n function has custom storage enabled.",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function to use to create a Function Signature."
        },
        {
          "name": "formalSignature",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true only original raw types will be retained and \n auto-params discarded (e.g., this, __return_storage_ptr__, etc.).  If false,\n the effective signature will be used where forced indirect and auto-params\n are reflected in the signature.  This option has no affect if the specified \n function has custom storage enabled."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
