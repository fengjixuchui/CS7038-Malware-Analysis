{
  "name": "CodeUnit",
  "comment": "Interface common to both instructions and data.",
  "javadoc": "Interface common to both instructions and data.",
  "static": false,
  "implements": [
    "ghidra.program.model.mem.MemBuffer"
  ],
  "fields": [
    {
      "name": "MNEMONIC",
      "comment": "Indicator for a mnemonic (versus an operand).",
      "javadoc": "Indicator for a mnemonic (versus an operand).",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "NO_COMMENT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "EOL_COMMENT",
      "comment": "comment type for end of line",
      "javadoc": "comment type for end of line",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "PRE_COMMENT",
      "comment": "comment type that goes before a code unit",
      "javadoc": "comment type that goes before a code unit",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "POST_COMMENT",
      "comment": "comment type that follows after a code unit",
      "javadoc": "comment type that follows after a code unit",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "PLATE_COMMENT",
      "comment": "Property name for plate comment type",
      "javadoc": "Property name for plate comment type",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "REPEATABLE_COMMENT",
      "comment": "Property name for repeatable comment type",
      "javadoc": "Property name for repeatable comment type",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "COMMENT_PROPERTY",
      "comment": "Any comment property.",
      "javadoc": "Any comment property.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"COMMENT__GHIDRA_\""
    },
    {
      "name": "SPACE_PROPERTY",
      "comment": "Property name for vertical space formatting",
      "javadoc": "Property name for vertical space formatting",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Space\""
    },
    {
      "name": "INSTRUCTION_PROPERTY",
      "comment": "Property name for code units that are instructions",
      "javadoc": "Property name for code units that are instructions",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"INSTRUCTION__GHIDRA_\""
    },
    {
      "name": "DEFINED_DATA_PROPERTY",
      "comment": "Property name for code units that are defined data",
      "javadoc": "Property name for code units that are defined data",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"DEFINED_DATA__GHIDRA_\""
    }
  ],
  "methods": [
    {
      "name": "getAddressString",
      "comment": "Get the string representation of the starting address for\n this code unit.",
      "javadoc": "Get the string representation of the starting address for\n this code unit.\n@param showBlockName true if the string should include the memory block name\n@param pad if true, the address will be padded with leading zeros.  Even if pad is\n false, the string will be padded to make the address string contain at least 4 digits.\n@return string representation of address",
      "static": false,
      "params": [
        {
          "name": "showBlockName",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the string should include the memory block name"
        },
        {
          "name": "pad",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the address will be padded with leading zeros.  Even if pad is\n false, the string will be padded to make the address string contain at least 4 digits."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "string representation of address"
      },
      "throws": []
    },
    {
      "name": "setProperty",
      "comment": "Set the named property with the given value at the address of this codeunit.",
      "javadoc": "Set the named property with the given value at the address of this codeunit.\n@param name the name of the property.\n@param value value to be stored.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property."
        },
        {
          "name": "value",
          "type_long": "ghidra.util.Saveable",
          "type_short": "Saveable",
          "comment": "value to be stored."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProperty",
      "comment": "Set the named property with the given value at the address of this codeunit.",
      "javadoc": "Set the named property with the given value at the address of this codeunit.\n@param name the name of the property.\n@param value value to be stored.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property."
        },
        {
          "name": "value",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "value to be stored."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProperty",
      "comment": "Set the named property with the given value at the address of this codeunit.",
      "javadoc": "Set the named property with the given value at the address of this codeunit.\n@param name the name of the property.\n@param value value to be stored.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property."
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "value to be stored."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProperty",
      "comment": "Set the named property.  This method is used for \"void\" properites. The\n property is either set or not set - there is no value",
      "javadoc": "Set the named property.  This method is used for \"void\" properites. The\n property is either set or not set - there is no value\n@param name the name of the property.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getObjectProperty",
      "comment": "Get the object property for name; returns null if\n there is no name property for this code unit.",
      "javadoc": "Get the object property for name; returns null if\n there is no name property for this code unit.\n@param name the name of the property",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property"
        }
      ],
      "return": {
        "type_long": "ghidra.util.Saveable",
        "type_short": "Saveable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStringProperty",
      "comment": "Get the string property for name; returns null if\n there is no name property for this code unit.",
      "javadoc": "Get the string property for name; returns null if\n there is no name property for this code unit.\n@param name the name of the property",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIntProperty",
      "comment": "Get the int property for name.",
      "javadoc": "Get the int property for name.\n@param name the name of the property\n@throws NoValueException if there is not name property\n for this code unit",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NoValueException",
          "type_short": "NoValueException",
          "comment": "if there is not name property\n for this code unit"
        }
      ]
    },
    {
      "name": "hasProperty",
      "comment": "Returns true if the codeunit has the given property defined.",
      "javadoc": "Returns true if the codeunit has the given property defined.\n@param name the name of the property",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVoidProperty",
      "comment": "Returns whether this code unit is marked as having the\n name property.",
      "javadoc": "Returns whether this code unit is marked as having the\n name property.\n@param name the name of the property",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "propertyNames",
      "comment": "Get an iterator over the property names.",
      "javadoc": "Get an iterator over the property names.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cjava.lang.String\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeProperty",
      "comment": "Remove the property with the given name from this code unit.",
      "javadoc": "Remove the property with the given name from this code unit.\n@param name the name of the property",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "visitProperty",
      "comment": "Invokes the visit() method of the specified PropertyVisitor if the named\n property exists for this code unit.",
      "javadoc": "Invokes the visit() method of the specified PropertyVisitor if the named\n property exists for this code unit.\n@param visitor the class implementing the PropertyVisitor interface.\n@param propertyName the name of the property to be visited.",
      "static": false,
      "params": [
        {
          "name": "visitor",
          "type_long": "ghidra.util.prop.PropertyVisitor",
          "type_short": "PropertyVisitor",
          "comment": "the class implementing the PropertyVisitor interface."
        },
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to be visited."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLabel",
      "comment": "Get the label for this code unit.",
      "javadoc": "Get the label for this code unit.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbols",
      "comment": "Get the Symbols for this code unit.",
      "javadoc": "Get the Symbols for this code unit.\n@throws ConcurrentModificationException if this object is no\n longer valid.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol[]",
        "type_short": "ghidra.program.model.symbol.Symbol[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrimarySymbol",
      "comment": "Get the Primary Symbol for this code unit.",
      "javadoc": "Get the Primary Symbol for this code unit.\n@throws ConcurrentModificationException if this object is no\n longer valid.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinAddress",
      "comment": "Get the starting address for this code unit.",
      "javadoc": "Get the starting address for this code unit.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaxAddress",
      "comment": "Get the ending address for this code unit.",
      "javadoc": "Get the ending address for this code unit.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMnemonicString",
      "comment": "Get the mnemonic for this code unit, e.g., MOV, JMP",
      "javadoc": "Get the mnemonic for this code unit, e.g., MOV, JMP",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComment",
      "comment": "Get the comment for the given type",
      "javadoc": "Get the comment for the given type\n@param commentType either EOL_COMMENT, PRE_COMMENT, \n POST_COMMENT, or REPEATABLE_COMMENT\n@return the comment string of the appropriate type or null if no comment of\n that type exists for this codeunit\n@throws IllegalArgumentException if type is not one of the\n three types of comments supported",
      "static": false,
      "params": [
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": "either EOL_COMMENT, PRE_COMMENT, \n POST_COMMENT, or REPEATABLE_COMMENT"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the comment string of the appropriate type or null if no comment of\n that type exists for this codeunit"
      },
      "throws": []
    },
    {
      "name": "getCommentAsArray",
      "comment": "Get the comment for the given type and parse it into an array of strings\n such that each line is its own string.",
      "javadoc": "Get the comment for the given type and parse it into an array of strings\n such that each line is its own string.\n@param commentType either EOL_COMMENT, PRE_COMMENT, \n POST_COMMENT, or REPEATABLE_COMMENT\n@return an array of strings where each item in the array is a line of text\n in the comment.  If there is no comment of the requested type, an empty array\n is returned.\n@throws IllegalArgumentException if type is not one of the\n three types of comments supported",
      "static": false,
      "params": [
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": "either EOL_COMMENT, PRE_COMMENT, \n POST_COMMENT, or REPEATABLE_COMMENT"
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "an array of strings where each item in the array is a line of text\n in the comment.  If there is no comment of the requested type, an empty array\n is returned."
      },
      "throws": []
    },
    {
      "name": "setComment",
      "comment": "Set the comment for the given comment type.  Passing null clears the comment",
      "javadoc": "Set the comment for the given comment type.  Passing \u003ccode\u003enull\u003c/code\u003e clears the comment\n@param commentType either EOL_COMMENT, PRE_COMMENT, \n POST_COMMENT, or REPEATABLE_COMMENT\n@param comment comment for code unit; null clears the comment\n@throws IllegalArgumentException if type is not one of the\n three types of comments supported",
      "static": false,
      "params": [
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": "either EOL_COMMENT, PRE_COMMENT, \n POST_COMMENT, or REPEATABLE_COMMENT"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "comment for code unit; null clears the comment"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCommentAsArray",
      "comment": "Set the comment (with each line in its own string) for the given comment type",
      "javadoc": "Set the comment (with each line in its own string) for the given comment type\n@param commentType either EOL_COMMENT, PRE_COMMENT, \n POST_COMMENT, or REPEATABLE_COMMENT\n@param comment an array of strings where each string is a single line of the comment.\n@throws IllegalArgumentException if type is not one of the\n three types of comments supported",
      "static": false,
      "params": [
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": "either EOL_COMMENT, PRE_COMMENT, \n POST_COMMENT, or REPEATABLE_COMMENT"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "an array of strings where each string is a single line of the comment."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSuccessor",
      "comment": "Return true if the given CodeUnit follows\n directly after this code unit.",
      "javadoc": "Return true if the given CodeUnit follows\n directly after this code unit.\n@param codeUnit the codeUnit being tested to see if it follows this codeUnit.",
      "static": false,
      "params": [
        {
          "name": "codeUnit",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": "the codeUnit being tested to see if it follows this codeUnit."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Get length of this code unit.",
      "javadoc": "Get length of this code unit.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Get the bytes that make up this code unit.",
      "javadoc": "Get the bytes that make up this code unit.\n@return an array of bytes that are in memory at the codeunits address.  The\n array length is the same as the codeUnits length\n@throws MemoryAccessException if the full number of bytes could not be read.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "an array of bytes that are in memory at the codeunits address.  The\n array length is the same as the codeUnits length"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the full number of bytes could not be read."
        }
      ]
    },
    {
      "name": "getBytesInCodeUnit",
      "comment": "Copies max(buffer.length, code unit length) bytes into buffer starting at location offset in buffer.",
      "javadoc": "Copies max(buffer.length, code unit length) bytes into buffer starting at location offset in buffer.\n@param buffer byte array to copy into\n@param bufferOffset offset in byte array the copy will start\n@throws MemoryAccessException if the full number of bytes could not be read.",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array to copy into"
        },
        {
          "name": "bufferOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset in byte array the copy will start"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the full number of bytes could not be read."
        }
      ]
    },
    {
      "name": "contains",
      "comment": "Returns true if address is contained in the range of this codeUnit",
      "javadoc": "Returns true if address is contained in the range of this codeUnit\n@param testAddr the address to test.",
      "static": false,
      "params": [
        {
          "name": "testAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to test."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "Compares the given address to the address range of this node.",
      "javadoc": "Compares the given address to the address range of this node.\n@param addr address to compare.\n@return a negative integer if this addr is greater than the maximum range address\n         zero if addr is in the range\n         a positive integer if addr is less than minimum range address",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address to compare."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "a negative integer if this addr is greater than the maximum range address\n         zero if addr is in the range\n         a positive integer if addr is less than minimum range address"
      },
      "throws": []
    },
    {
      "name": "addMnemonicReference",
      "comment": "Add a reference to the mnemonic for this code unit.",
      "javadoc": "Add a reference to the mnemonic for this code unit.\n@param refAddr address to add as a reference.\n@param refType the type of reference to add.\n@param sourceType the source of this reference",
      "static": false,
      "params": [
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address to add as a reference."
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "the type of reference to add."
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this reference"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeMnemonicReference",
      "comment": "Remove a reference to the mnemonic for this code unit.",
      "javadoc": "Remove a reference to the mnemonic for this code unit.\n@param refAddr the address to remove as a reference.",
      "static": false,
      "params": [
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to remove as a reference."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMnemonicReferences",
      "comment": "Get references for the mnemonic for this code unit.",
      "javadoc": "Get references for the mnemonic for this code unit.\n@return an array of memory references. A zero length array will be \n returned if there are no references for the mnemonic.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference[]",
        "type_short": "ghidra.program.model.symbol.Reference[]",
        "comment": "an array of memory references. A zero length array will be \n returned if there are no references for the mnemonic."
      },
      "throws": []
    },
    {
      "name": "getOperandReferences",
      "comment": "Get the references for the operand index.",
      "javadoc": "Get the references for the operand index.\n@param index operand index (0 is the first operand)",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index (0 is the first operand)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference[]",
        "type_short": "ghidra.program.model.symbol.Reference[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrimaryReference",
      "comment": "Get the primary reference for the operand index.",
      "javadoc": "Get the primary reference for the operand index.\n@param index operand index (0 is the first operand)",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index (0 is the first operand)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addOperandReference",
      "comment": "Add a memory reference to the operand at the given index.",
      "javadoc": "Add a memory reference to the operand at the given index.\n@param index operand index\n@param refAddr reference address\n@param type the reference type to be added.\n@param sourceType the source of this reference",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        },
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "reference address"
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "the reference type to be added."
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this reference"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeOperandReference",
      "comment": "Remove a reference to the operand.",
      "javadoc": "Remove a reference to the operand.\n@param index operand index\n@param refAddr address referencing the operand",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        },
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address referencing the operand"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferencesFrom",
      "comment": "Get ALL memory references FROM this code unit.",
      "javadoc": "Get ALL memory references FROM this code unit.\n@return an array of memory references from this codeUnit or an empty array\n if there are no references.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference[]",
        "type_short": "ghidra.program.model.symbol.Reference[]",
        "comment": "an array of memory references from this codeUnit or an empty array\n if there are no references."
      },
      "throws": []
    },
    {
      "name": "getReferenceIteratorTo",
      "comment": "Get an iterator over all references TO this code unit.",
      "javadoc": "Get an iterator over all references TO this code unit.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.ReferenceIterator",
        "type_short": "ReferenceIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "Returns the program that generated this CodeUnit.",
      "javadoc": "Returns the program that generated this CodeUnit.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExternalReference",
      "comment": "Gets the external reference (if any) at the opIndex",
      "javadoc": "Gets the external reference (if any) at the opIndex\n@param opIndex the operand index to look for external references\n@return the external reference at the operand or null if none exists.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the operand index to look for external references"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalReference",
        "type_short": "ExternalReference",
        "comment": "the external reference at the operand or null if none exists."
      },
      "throws": []
    },
    {
      "name": "removeExternalReference",
      "comment": "Remove external reference (if any) at the given opIndex\n opIndex the index of the operand from which to remove any external reference.",
      "javadoc": "Remove external reference (if any) at the given opIndex\n opIndex the index of the operand from which to remove any external reference.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPrimaryMemoryReference",
      "comment": "Sets a memory reference to be the primary reference at its\n address/opIndex location. The primary reference is the one that\n is used in the getOperandRepresentation() method.",
      "javadoc": "Sets a memory reference to be the primary reference at its\n address/opIndex location. The primary reference is the one that\n is used in the getOperandRepresentation() method.\n@param ref the reference to be set as primary.",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the reference to be set as primary."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStackReference",
      "comment": "Sets a stack reference at the offset on the\n specified operand index, which effectively substitutes the previous\n operation interpretation\n \n NOTE: If another reference was previously set on the\n operand, then it will be replaced with this stack\n reference",
      "javadoc": "Sets a stack reference at the \u003ccode\u003eoffset\u003c/code\u003e on the\n specified operand index, which effectively substitutes the previous\n operation interpretation\n \u003cbr\u003e\n \u003ci\u003eNOTE: If another reference was previously set on the\n operand, then it will be replaced with this stack\n reference\u003c/i\u003e\n@param opIndex the index of the operand to set this stack reference\n@param offset the (+/-) offset from stack base address\n@param sourceType the source of this reference\n@param refType type of reference, RefType.READ,WRITE,PTR...",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the operand to set this stack reference"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the (+/-) offset from stack base address"
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this reference"
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "type of reference, RefType.READ,WRITE,PTR..."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRegisterReference",
      "comment": "Sets a register reference at the offset on the\n specified operand index, which effectively substitutes the previous\n operation interpretation\n \n NOTE: If another reference was previously set on the\n operand, then it will be replaced with this register\n reference",
      "javadoc": "Sets a register reference at the \u003ccode\u003eoffset\u003c/code\u003e on the\n specified operand index, which effectively substitutes the previous\n operation interpretation\n \u003cbr\u003e\n \u003ci\u003eNOTE: If another reference was previously set on the\n operand, then it will be replaced with this register\n reference\u003c/i\u003e\n@param opIndex the index of the operand to set this register reference\n@param reg a register\n@param sourceType the source of this reference\n@param refType type of reference, RefType.READ,WRITE,PTR...",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the operand to set this register reference"
        },
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "a register"
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this reference"
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "type of reference, RefType.READ,WRITE,PTR..."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumOperands",
      "comment": "Get the number of operands for this code unit.",
      "javadoc": "Get the number of operands for this code unit.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Get the Address for the given operand index if one exists.  Data\n objects have one operand (the value).",
      "javadoc": "Get the Address for the given operand index if one exists.  Data\n objects have one operand (the value).\n@param opIndex index of the operand.\n@return An addres if the operand represents a fully qualified\n address (given the context), or if the operand is a Scalar treated\n as an address. Null is returned if no address or scalar exists on that \n operand.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of the operand."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "An addres if the operand represents a fully qualified\n address (given the context), or if the operand is a Scalar treated\n as an address. Null is returned if no address or scalar exists on that \n operand."
      },
      "throws": []
    },
    {
      "name": "getScalar",
      "comment": "Returns the scalar at the given operand index.  Data objects have\n one operand (the value).",
      "javadoc": "Returns the scalar at the given operand index.  Data objects have\n one operand (the value).\n@param opIndex index of the operand.\n@return the scalar at the given operand index or null if no\n scalar exists at that index.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of the operand."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.scalar.Scalar",
        "type_short": "Scalar",
        "comment": "the scalar at the given operand index or null if no\n scalar exists at that index."
      },
      "throws": []
    }
  ]
}
