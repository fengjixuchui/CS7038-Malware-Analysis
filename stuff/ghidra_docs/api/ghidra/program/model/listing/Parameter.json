{
  "name": "Parameter",
  "comment": "Interface for function parameters",
  "javadoc": "Interface for function parameters",
  "static": false,
  "implements": [
    "ghidra.program.model.listing.Variable"
  ],
  "fields": [
    {
      "name": "RETURN_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cRETURN\u003e\""
    },
    {
      "name": "RETURN_ORIDINAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "UNASSIGNED_ORDINAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-2"
    }
  ],
  "methods": [
    {
      "name": "getOrdinal",
      "comment": "Returns the ordinal (index) of this parameter within the function signature.",
      "javadoc": "Returns the ordinal (index) of this parameter within the function signature.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isAutoParameter",
      "comment": "",
      "javadoc": "@return true if this parameter is automatically generated based upon the associated\n function calling convention and function signature.  An example of such a parameter \n include the \"__return_storage_ptr__\" parameter.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this parameter is automatically generated based upon the associated\n function calling convention and function signature.  An example of such a parameter \n include the \"__return_storage_ptr__\" parameter."
      },
      "throws": []
    },
    {
      "name": "getAutoParameterType",
      "comment": "If this is an auto-parameter this method will indicate its type.",
      "javadoc": "If this is an auto-parameter this method will indicate its type.\n@return auto-parameter type of null if not applicable.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.AutoParameterType",
        "type_short": "AutoParameterType",
        "comment": "auto-parameter type of null if not applicable."
      },
      "throws": []
    },
    {
      "name": "isForcedIndirect",
      "comment": "If this parameter which was forced by the associated calling \n convention to be passed as a pointer instead of its original formal type.",
      "javadoc": "If this parameter which was forced by the associated calling \n convention to be passed as a pointer instead of its original formal type.\n@return true if this parameter was forced to be passed as a pointer instead of its \n original formal type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this parameter was forced to be passed as a pointer instead of its \n original formal type"
      },
      "throws": []
    },
    {
      "name": "getFormalDataType",
      "comment": "Get the original formal signature data type before a possible forced indirect was\n possibly imposed by the functions calling convention.  The #getDataType() method \n will always return the effective data type which corresponds to the allocated \n variable storage.",
      "javadoc": "Get the original formal signature data type before a possible forced indirect was\n possibly imposed by the functions calling convention.  The {@link #getDataType()} method \n will always return the effective data type which corresponds to the allocated \n variable storage.\n@return Formal data type.  This type will only differ from the {@link #getDataType()}\n value if this parameter isForcedIndirect.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "Formal data type.  This type will only differ from the #getDataType()\n value if this parameter isForcedIndirect."
      },
      "throws": []
    }
  ]
}
