{
  "name": "DataBuffer",
  "comment": "DataBuffer provides an array like interface into a set of Data\n at a specific index.  Data can be retrieved by using a positive\n offset from the current position.  The purpose of this class is to\n provide an opaque storage mechanism for Data that is made up of other\n Data items.\n\n This interface does not provide methods to reposition the data item\n buffer.  This is so that it is clear that methods accepeting this\n base class are not to mess which the base Address for this object.",
  "javadoc": "DataBuffer provides an array like interface into a set of Data\n at a specific index.  Data can be retrieved by using a positive\n offset from the current position.  The purpose of this class is to\n provide an opaque storage mechanism for Data that is made up of other\n Data items.\n\n This interface does not provide methods to reposition the data item\n buffer.  This is so that it is clear that methods accepeting this\n base class are not to mess which the base Address for this object.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getData",
      "comment": "Get one Data item from the buffer at the current position plus offset.",
      "javadoc": "Get one Data item from the buffer at the current position plus offset.\n@param offset the displacement from the current position.\n@return the Data item at offset from the current position.\n@throws ghidra.program.model.address.AddressOutOfBoundsException if offset exceeds\n address space\n@throws IndexOutOfBoundsException if offset is negative",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the displacement from the current position."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the Data item at offset from the current position."
      },
      "throws": []
    },
    {
      "name": "getDataAfter",
      "comment": "Get the next data item starting after offset.",
      "javadoc": "Get the next data item starting after offset.\n@param offset offset to look after\n@return Data item starting after this offset",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset to look after"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "Data item starting after this offset"
      },
      "throws": []
    },
    {
      "name": "getDataBefore",
      "comment": "Get the previous data item starting before offset.",
      "javadoc": "Get the previous data item starting before offset.\n@param offset offset to look before\n@return Data item starting before this offset",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset to look before"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "Data item starting before this offset"
      },
      "throws": []
    },
    {
      "name": "getNextOffset",
      "comment": "Get the offset to the next data item found after offset.",
      "javadoc": "Get the offset to the next data item found after offset.\n@param offset offset to look after\n@return offset of the first data item existing after this one.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset to look after"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "offset of the first data item existing after this one."
      },
      "throws": []
    },
    {
      "name": "getPreviousOffset",
      "comment": "Get the offset to the previous data item existing before this offset.",
      "javadoc": "Get the offset to the previous data item existing before this offset.\n@param offset offset to look before\n@return offset of the first data item existing before this one.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset to look before"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "offset of the first data item existing before this one."
      },
      "throws": []
    },
    {
      "name": "getData",
      "comment": "Get an array of data items that begin at or after start up to end.\n   Data items that exist before start are not returned\n   Data items that exist before end, but terminate after end ARE returned",
      "javadoc": "Get an array of data items that begin at or after start up to end.\n   Data items that exist before start are not returned\n   Data items that exist before end, but terminate after end ARE returned\n@param start start offset\n@param end end offset\n@return array of CodeDatas that exist between start and end.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "int",
          "type_short": "int",
          "comment": "start offset"
        },
        {
          "name": "end",
          "type_long": "int",
          "type_short": "int",
          "comment": "end offset"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data[]",
        "type_short": "ghidra.program.model.listing.Data[]",
        "comment": "array of CodeDatas that exist between start and end."
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Get the Address which corresponds to the offset 0.",
      "javadoc": "Get the Address which corresponds to the offset 0.\n@return the current address of offset 0.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the current address of offset 0."
      },
      "throws": []
    }
  ]
}
