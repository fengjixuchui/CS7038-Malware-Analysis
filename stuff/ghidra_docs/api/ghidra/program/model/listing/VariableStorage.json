{
  "name": "VariableStorage",
  "comment": " encapsulates the ordered list of storage varnodes which correspond to a \n function parameter or local variable.  For big-endian the first element corresponds \n to the most-significant varnode, while for little-endian the first element \n corresponds to the least-significant varnode.",
  "javadoc": "\u003ccode\u003e\u003c/code\u003e encapsulates the ordered list of storage varnodes which correspond to a \n function parameter or local variable.  For big-endian the first element corresponds \n to the most-significant varnode, while for little-endian the first element \n corresponds to the least-significant varnode.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "BAD",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cBAD\u003e\""
    },
    {
      "name": "UNASSIGNED",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cUNASSIGNED\u003e\""
    },
    {
      "name": "VOID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cVOID\u003e\""
    },
    {
      "name": "BAD_STORAGE",
      "comment": "BAD_STORAGE used to identify variable storage which is no longer\n valid.  This can be caused by various events such as significant language/processor\n changes or software bugs which prevent variable storage to be properly decoded.",
      "javadoc": "\u003ccode\u003eBAD_STORAGE\u003c/code\u003e used to identify variable storage which is no longer\n valid.  This can be caused by various events such as significant language/processor\n changes or software bugs which prevent variable storage to be properly decoded.",
      "static": true,
      "type_long": "ghidra.program.model.listing.VariableStorage",
      "type_short": "VariableStorage",
      "constant_value": null
    },
    {
      "name": "UNASSIGNED_STORAGE",
      "comment": "UNASSIGNED_STORAGE used to identify parameter storage which is \"unmapped\"\n or could not be determined.",
      "javadoc": "\u003ccode\u003eUNASSIGNED_STORAGE\u003c/code\u003e used to identify parameter storage which is \"unmapped\"\n or could not be determined.",
      "static": true,
      "type_long": "ghidra.program.model.listing.VariableStorage",
      "type_short": "VariableStorage",
      "constant_value": null
    },
    {
      "name": "VOID_STORAGE",
      "comment": "VOID_STORAGE used to identify parameter/return storage which is \"mapped\"\n with a data-type of void.",
      "javadoc": "\u003ccode\u003eVOID_STORAGE\u003c/code\u003e used to identify parameter/return storage which is \"mapped\"\n with a data-type of void.",
      "static": true,
      "type_long": "ghidra.program.model.listing.VariableStorage",
      "type_short": "VariableStorage",
      "constant_value": null
    },
    {
      "name": "varnodes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode[]",
      "type_short": "ghidra.program.model.pcode.Varnode[]",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "registers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "hashcode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "serialization",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "PRECEDENCE_MAPPED",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "PRECEDENCE_UNMAPPED",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "PRECEDENCE_BAD",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an empty variable storage for reserved usage (i.e., BAD_STORAGE, UNMAPPED_STORAGE)",
      "javadoc": "Construct an empty variable storage for reserved usage (i.e., BAD_STORAGE, UNMAPPED_STORAGE)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct variable storage",
      "javadoc": "Construct variable storage\n@param program\n@param varnodes one or more ordered storage varnodes\n@throws InvalidInputException if specified varnodes violate storage restrictions",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "varnodes",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": "one or more ordered storage varnodes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if specified varnodes violate storage restrictions"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct register variable storage",
      "javadoc": "Construct register variable storage\n@param program\n@param registers one or more ordered registers\n@throws InvalidInputException if specified registers violate storage restrictions",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "registers",
          "type_long": "ghidra.program.model.lang.Register[]",
          "type_short": "ghidra.program.model.lang.Register[]",
          "comment": "one or more ordered registers"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if specified registers violate storage restrictions"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct stack variable storage",
      "javadoc": "Construct stack variable storage\n@param program\n@param stackOffset stack offset\n@param size stack element size\n@throws InvalidInputException if specified registers violate storage restrictions",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "stackOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "stack offset"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "stack element size"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if specified registers violate storage restrictions"
        }
      ]
    },
    {
      "name": "getVarnodeList",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "registers",
          "type_long": "ghidra.program.model.lang.Register[]",
          "type_short": "ghidra.program.model.lang.Register[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode[]",
        "type_short": "ghidra.program.model.pcode.Varnode[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct variable storage",
      "javadoc": "Construct variable storage\n@param program\n@param varnodes one or more ordered storage varnodes\n@throws InvalidInputException if specified varnodes violate storage restrictions",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "varnodes",
          "type_long": "java.util.List\u003cghidra.program.model.pcode.Varnode\u003e",
          "type_short": "List",
          "comment": "one or more ordered storage varnodes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if specified varnodes violate storage restrictions"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct variable storage",
      "javadoc": "Construct variable storage\n@param program\n@param address\n@param size\n@throws InvalidInputException",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "deserialize",
      "comment": "Construct variable storage",
      "javadoc": "Construct variable storage\n@param program\n@param serialization storage serialization string\n@throws InvalidInputException",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "serialization",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "storage serialization string"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getProgram",
      "comment": "",
      "javadoc": "@return program for which this storage is associated",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "program for which this storage is associated"
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "@return the total size of corresponding storage varnodes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the total size of corresponding storage varnodes"
      },
      "throws": []
    },
    {
      "name": "checkVarnodes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "clone",
      "comment": "Attempt to clone variable storage for use in a different program.\n Dynamic storage characteristics will not be preserved.",
      "javadoc": "Attempt to clone variable storage for use in a different program.\n Dynamic storage characteristics will not be preserved.\n@param newProgram target program\n@return cloned storage\n@throws InvalidInputException",
      "static": false,
      "params": [
        {
          "name": "newProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "target program"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": "cloned storage"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addVarnodeInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "builder",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVarnodeCount",
      "comment": "",
      "javadoc": "@return the number of varnodes associated with this variable storage",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of varnodes associated with this variable storage"
      },
      "throws": []
    },
    {
      "name": "getVarnodes",
      "comment": "",
      "javadoc": "@return ordered varnodes associated with this variable storage",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode[]",
        "type_short": "ghidra.program.model.pcode.Varnode[]",
        "comment": "ordered varnodes associated with this variable storage"
      },
      "throws": []
    },
    {
      "name": "isAutoStorage",
      "comment": "Associated with auto-parameters.  Parameters whose existence is dictated\n by a calling-convention may automatically inject additional hidden\n parameters.  If this storage is associated with a auto-parameter, this\n method will return true.",
      "javadoc": "Associated with auto-parameters.  Parameters whose existence is dictated\n by a calling-convention may automatically inject additional hidden\n parameters.  If this storage is associated with a auto-parameter, this\n method will return true.\n@return true if this storage is associated with an auto-parameter, else false",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this storage is associated with an auto-parameter, else false"
      },
      "throws": []
    },
    {
      "name": "getAutoParameterType",
      "comment": "If this storage corresponds to a auto-parameter, return the type associated\n with the auto-parameter.",
      "javadoc": "If this storage corresponds to a auto-parameter, return the type associated\n with the auto-parameter.\n@return auto-parameter type or null if not applicable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.AutoParameterType",
        "type_short": "AutoParameterType",
        "comment": "auto-parameter type or null if not applicable"
      },
      "throws": []
    },
    {
      "name": "isForcedIndirect",
      "comment": "If this storage corresponds to parameter which was forced by the associated calling \n convention to be passed as a pointer instead of its raw type.",
      "javadoc": "If this storage corresponds to parameter which was forced by the associated calling \n convention to be passed as a pointer instead of its raw type.\n@return true if this parameter was forced to be passed as a pointer instead of its raw type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this parameter was forced to be passed as a pointer instead of its raw type"
      },
      "throws": []
    },
    {
      "name": "isBadStorage",
      "comment": "",
      "javadoc": "@return true if this storage is bad (could not be resolved)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this storage is bad (could not be resolved)"
      },
      "throws": []
    },
    {
      "name": "isUnassignedStorage",
      "comment": "",
      "javadoc": "@return true if storage has not been assigned (no varnodes)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if storage has not been assigned (no varnodes)"
      },
      "throws": []
    },
    {
      "name": "isValid",
      "comment": "",
      "javadoc": "@return true if storage is assigned and is not BAD",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if storage is assigned and is not BAD"
      },
      "throws": []
    },
    {
      "name": "isVoidStorage",
      "comment": "",
      "javadoc": "@return true if storage corresponds to the VOID_STORAGE instance\n@see #VOID_STORAGE",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if storage corresponds to the VOID_STORAGE instance"
      },
      "throws": []
    },
    {
      "name": "getFirstVarnode",
      "comment": "",
      "javadoc": "@return first varnode within the ordered list of varnodes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "first varnode within the ordered list of varnodes"
      },
      "throws": []
    },
    {
      "name": "getLastVarnode",
      "comment": "",
      "javadoc": "@return last varnode within the ordered list of varnodes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "last varnode within the ordered list of varnodes"
      },
      "throws": []
    },
    {
      "name": "isStackStorage",
      "comment": "",
      "javadoc": "@return true if storage consists of a single stack varnode",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if storage consists of a single stack varnode"
      },
      "throws": []
    },
    {
      "name": "hasStackStorage",
      "comment": "",
      "javadoc": "@return true if the last varnode for simple or compound storage is a stack varnode",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the last varnode for simple or compound storage is a stack varnode"
      },
      "throws": []
    },
    {
      "name": "isRegisterStorage",
      "comment": "",
      "javadoc": "@return true if this is a simple variable consisting of a single register varnode\n which will be returned by either the {@link Variable#getFirstStorageVarnode()} or \n {@link Variable#getLastStorageVarnode()} methods.  The register can be obtained using the \n {@link #getRegister()} method.  Keep in mind that registers\n may exist in a memory space or the register space.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is a simple variable consisting of a single register varnode\n which will be returned by either the Variable#getFirstStorageVarnode() or \n Variable#getLastStorageVarnode() methods.  The register can be obtained using the \n #getRegister() method.  Keep in mind that registers\n may exist in a memory space or the register space."
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "",
      "javadoc": "@return first storage register associated with this register or compound storage, else\n null is returned.\n@see Variable#isRegisterVariable()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "first storage register associated with this register or compound storage, else\n null is returned."
      },
      "throws": []
    },
    {
      "name": "getRegisters",
      "comment": "",
      "javadoc": "@return storage register(s) associated with this register or compound storage, else\n null is returned.\n@see Variable#isRegisterVariable()\n@see #isCompoundStorage()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
        "type_short": "List",
        "comment": "storage register(s) associated with this register or compound storage, else\n null is returned."
      },
      "throws": []
    },
    {
      "name": "getStackOffset",
      "comment": "",
      "javadoc": "@return the stack offset associated with simple stack storage or compound \n storage where the last varnode is stack, see {@link #hasStackStorage()}.\n@throws UnsupportedOperationException if storage does not have a stack varnode",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the stack offset associated with simple stack storage or compound \n storage where the last varnode is stack, see #hasStackStorage()."
      },
      "throws": []
    },
    {
      "name": "getMinAddress",
      "comment": "",
      "javadoc": "@return the minimum address corresponding to the first varnode of this storage\n or null if this is a special empty storage: {@link #isBadStorage()}, {@link #isUnassignedStorage()},\n {@link #isVoidStorage()}",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the minimum address corresponding to the first varnode of this storage\n or null if this is a special empty storage: #isBadStorage(), #isUnassignedStorage(),\n #isVoidStorage()"
      },
      "throws": []
    },
    {
      "name": "isMemoryStorage",
      "comment": "",
      "javadoc": "@return true if storage consists of a single memory varnode which does not correspond\n to a register.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if storage consists of a single memory varnode which does not correspond\n to a register."
      },
      "throws": []
    },
    {
      "name": "isConstantStorage",
      "comment": "",
      "javadoc": "@return true if storage consists of a single constant-space varnode which is used when storing\n local function constants.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if storage consists of a single constant-space varnode which is used when storing\n local function constants."
      },
      "throws": []
    },
    {
      "name": "isHashStorage",
      "comment": "",
      "javadoc": "@return true if storage consists of a single hash-space varnode which is used when storing\n local unique function variables.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if storage consists of a single hash-space varnode which is used when storing\n local unique function variables."
      },
      "throws": []
    },
    {
      "name": "isUniqueStorage",
      "comment": "",
      "javadoc": "@return true if storage consists of a single unique-space varnode which is used during\n function analysis.  This type of storage is not suitable for database-stored function\n variables.  This type of storage must be properly converted to Hash storage when \n storing unique function variables.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if storage consists of a single unique-space varnode which is used during\n function analysis.  This type of storage is not suitable for database-stored function\n variables.  This type of storage must be properly converted to Hash storage when \n storing unique function variables."
      },
      "throws": []
    },
    {
      "name": "isCompoundStorage",
      "comment": "",
      "javadoc": "@return true if storage consists of two or more storage varnodes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if storage consists of two or more storage varnodes"
      },
      "throws": []
    },
    {
      "name": "getLongHash",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "This storage is considered equal if it consists of the same storage varnodes.",
      "javadoc": "This storage is considered equal if it consists of the same storage varnodes.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "Determine if this variable storage intersects the specified variable storage",
      "javadoc": "Determine if this variable storage intersects the specified variable storage\n@param variableStorage\n@return true if any intersection exists between this storage and the specified\n variable storage",
      "static": false,
      "params": [
        {
          "name": "variableStorage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if any intersection exists between this storage and the specified\n variable storage"
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "Determine if this storage intersects the specified address set",
      "javadoc": "Determine if this storage intersects the specified address set\n@param set address set\n@return true if this storage intersects the specified address set",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "address set"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this storage intersects the specified address set"
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "Determine if this storage intersects the specified register",
      "javadoc": "Determine if this storage intersects the specified register\n@param reg the register\n@return true if this storage intersects the specified register",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this storage intersects the specified register"
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Determine if the specified address is contained within this storage",
      "javadoc": "Determine if the specified address is contained within this storage\n@param address\n@return ",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrecedence",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "storage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "Compare this variable storage with another.  A value of 0 indicates \n that the two objects are equal",
      "javadoc": "Compare this variable storage with another.  A value of 0 indicates \n that the two objects are equal\n@see java.lang.Comparable#compareTo(java.lang.Object)",
      "static": false,
      "params": [
        {
          "name": "otherStorage",
          "type_long": "ghidra.program.model.listing.VariableStorage",
          "type_short": "VariableStorage",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSerializationString",
      "comment": "Return a serialization form of this variable storage.",
      "javadoc": "Return a serialization form of this variable storage.\n@return storage serialization string useful for subsequent reconstruction",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "storage serialization string useful for subsequent reconstruction"
      },
      "throws": []
    },
    {
      "name": "getSerializationString",
      "comment": "Generate VariableStorage serialization string",
      "javadoc": "Generate VariableStorage serialization string\n@param varnodes\n@return storage serialization string useful for subsequent reconstruction\n of a VariableStorage object",
      "static": true,
      "params": [
        {
          "name": "varnodes",
          "type_long": "ghidra.program.model.pcode.Varnode[]",
          "type_short": "ghidra.program.model.pcode.Varnode[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "storage serialization string useful for subsequent reconstruction\n of a VariableStorage object"
      },
      "throws": []
    },
    {
      "name": "getVarnodes",
      "comment": "Parse a storage serialization string to produce an array or varnodes",
      "javadoc": "Parse a storage serialization string to produce an array or varnodes\n@param addrFactory\n@param serialization\n@return array of varnodes or null if invalid",
      "static": true,
      "params": [
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        },
        {
          "name": "serialization",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.pcode.Varnode\u003e",
        "type_short": "List",
        "comment": "array of varnodes or null if invalid"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "translateSerialization",
      "comment": "Perform language translations on VariableStorage serialization string",
      "javadoc": "Perform language translations on VariableStorage serialization string\n@param translator language translator\n@param serialization VariableStorage serialization string\n@return translated serialization string\n@throws InvalidInputException if serialization has invalid format",
      "static": true,
      "params": [
        {
          "name": "translator",
          "type_long": "ghidra.program.util.LanguageTranslator",
          "type_short": "LanguageTranslator",
          "comment": "language translator"
        },
        {
          "name": "serialization",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "VariableStorage serialization string"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "translated serialization string"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if serialization has invalid format"
        }
      ]
    },
    {
      "name": "translateRegisterVarnodeOffset",
      "comment": "Translate register varnode address offsetStr",
      "javadoc": "Translate register varnode address offsetStr\n@param translator\n@param space\n@param offsetStr\n@param sizeStr\n@return translated offsetStr or null if BAD translation",
      "static": true,
      "params": [
        {
          "name": "oldRegAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "varnodeSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "translator",
          "type_long": "ghidra.program.util.LanguageTranslator",
          "type_short": "LanguageTranslator",
          "comment": ""
        },
        {
          "name": "newRegisterSpace",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "translated offsetStr or null if BAD translation"
      },
      "throws": []
    }
  ]
}
