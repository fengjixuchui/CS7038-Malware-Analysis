{
  "name": "CodeUnitFormatOptions",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "showBlockName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName",
      "type_short": "ShowBlockName",
      "constant_value": null
    },
    {
      "name": "showNamespace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions.ShowNamespace",
      "type_short": "ShowNamespace",
      "constant_value": null
    },
    {
      "name": "localPrefixOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "showLibraryInNamespace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "doRegVariableMarkup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "doStackVariableMarkup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "includeInferredVariableMarkup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "alwaysShowPrimaryReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "followReferencedPointers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "includeScalarReferenceAdjustment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "showDataMutability",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "showOffcutInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "displayOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataTypeDisplayOptions",
      "type_short": "DataTypeDisplayOptions",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Format options constructor using primarily default format options.",
      "javadoc": "Format options constructor using primarily default format options.\n@param showBlockName controls display of block name in address representations.\n@param showNamespace controls display of namespace path with label references.",
      "static": false,
      "params": [
        {
          "name": "showBlockName",
          "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName",
          "type_short": "ShowBlockName",
          "comment": "controls display of block name in address representations."
        },
        {
          "name": "showNamespace",
          "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions.ShowNamespace",
          "type_short": "ShowNamespace",
          "comment": "controls display of namespace path with label references."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Format options constructor.  Extended reference mark-up is enabled.",
      "javadoc": "Format options constructor.  Extended reference mark-up is enabled.\n@param showBlockName controls display of block name in address representations.\n@param showNamespace controls display of namespace path with label references.\n@param localPrefixOverride optional override for local name-space when showNamespace\n is ShowNamespace.LOCAL or ShowNamespace.ALWAYS.  Specifying a null value\n will cause the actual name-space to be used.\n@param doRegVariableMarkup perform register variable/reference mark-up if true\n@param doStackVariableMarkup perform stack variable/reference mark-up if true\n@param includeInferredVariableMarkup if true and doRegVariableMarkup is also true, an attempt\n will be made to mark-up inferred register variable usage.\n@param alwaysShowPrimaryReference if true forces the primary reference to be rendered with\n the operand using the \u003d\u0026gt; separator if necessary\n@param includeScalarReferenceAdjustment if true scalar adjustment of certain reference offsets\n will be included to maintain replaced scalar value\n@param showLibraryInNamespace if true any referenced external symbols will include \n library name\n@param followReferencedPointers if true referenced pointers (read or indirect) will\n follow the pointer and display the indirect symbol with -\u0026gt; instead of pointer label.",
      "static": false,
      "params": [
        {
          "name": "showBlockName",
          "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName",
          "type_short": "ShowBlockName",
          "comment": "controls display of block name in address representations."
        },
        {
          "name": "showNamespace",
          "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions.ShowNamespace",
          "type_short": "ShowNamespace",
          "comment": "controls display of namespace path with label references."
        },
        {
          "name": "localPrefixOverride",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "optional override for local name-space when showNamespace\n is ShowNamespace.LOCAL or ShowNamespace.ALWAYS.  Specifying a null value\n will cause the actual name-space to be used."
        },
        {
          "name": "doRegVariableMarkup",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "perform register variable/reference mark-up if true"
        },
        {
          "name": "doStackVariableMarkup",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "perform stack variable/reference mark-up if true"
        },
        {
          "name": "includeInferredVariableMarkup",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true and doRegVariableMarkup is also true, an attempt\n will be made to mark-up inferred register variable usage."
        },
        {
          "name": "alwaysShowPrimaryReference",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true forces the primary reference to be rendered with\n the operand using the \u003d separator if necessary"
        },
        {
          "name": "includeScalarReferenceAdjustment",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true scalar adjustment of certain reference offsets\n will be included to maintain replaced scalar value"
        },
        {
          "name": "showLibraryInNamespace",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true any referenced external symbols will include \n library name"
        },
        {
          "name": "followReferencedPointers",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true referenced pointers (read or indirect) will\n follow the pointer and display the indirect symbol with - instead of pointer label."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getShowBlockNameOption",
      "comment": "Get current ShowBlockName option",
      "javadoc": "Get current ShowBlockName option\n@return ShowBlockName option",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName",
        "type_short": "ShowBlockName",
        "comment": "ShowBlockName option"
      },
      "throws": []
    }
  ]
}
