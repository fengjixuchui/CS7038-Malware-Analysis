{
  "name": "ProgramFragment",
  "comment": "A ProgramFragment is a set of CodeUnits that have been\n bundled together with some additional information such as a name, comment,\n alias, etc. Every code unit in the program is in one and only one fragment\n so the fragments form a partition of the program. Fragments in turn are the\n building blocks of ProgramModules. Program fragments and modules \n allow the user to overlay a hierarchical structure upon the program which can then \n be used to control viewing and navigating the program.",
  "javadoc": "A \u003cCODE\u003eProgramFragment\u003c/CODE\u003e is a set of \u003cCODE\u003eCodeUnit\u003c/CODE\u003es that have been\n bundled together with some additional information such as a name, comment,\n alias, etc. Every code unit in the program is in one and only one fragment\n so the fragments form a partition of the program. Fragments in turn are the\n building blocks of \u003cCODE\u003eProgramModule\u003c/CODE\u003es. Program fragments and modules \n allow the user to overlay a hierarchical structure upon the program which can then \n be used to control viewing and navigating the program.",
  "static": false,
  "implements": [
    "ghidra.program.model.listing.Group",
    "ghidra.program.model.address.AddressSetView"
  ],
  "fields": [],
  "methods": [
    {
      "name": "contains",
      "comment": "Returns whether this fragment contains the given code unit.",
      "javadoc": "Returns whether this fragment contains the given code unit.\u003cP\u003e\n@param codeUnit the code unit being tested.\n@return true if the code unit is in the fragment, false otherwise.",
      "static": false,
      "params": [
        {
          "name": "codeUnit",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": "the code unit being tested."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the code unit is in the fragment, false otherwise."
      },
      "throws": []
    },
    {
      "name": "getCodeUnits",
      "comment": "Returns a forward iterator over the code units making up this fragment.",
      "javadoc": "Returns a forward iterator over the code units making up this fragment.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnitIterator",
        "type_short": "CodeUnitIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "move",
      "comment": "Moves all of the code units in a given range into this fragment.\n Note that min must the starting address of a code unit\n and max must be the ending address of a code unit.\n Furthermore every address in the given range must exist in program\n memory.",
      "javadoc": "Moves all of the code units in a given range into this fragment.\n Note that \u003cCODE\u003emin\u003c/CODE\u003e must the starting address of a code unit\n and \u003cCODE\u003emax\u003c/CODE\u003e must be the ending address of a code unit.\n Furthermore every address in the given range must exist in program\n memory.\u003cP\u003e\n@param min min address of range specifying the code units to move\n@param max max address of range specifying the code units to move\n@exception NotFoundException thrown if any address between \u003cCODE\u003emin\u003c/CODE\u003e\n and \u003cCODE\u003emax\u003c/CODE\u003e (inclusive) does not belong to program memory.",
      "static": false,
      "params": [
        {
          "name": "min",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "min address of range specifying the code units to move"
        },
        {
          "name": "max",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "max address of range specifying the code units to move"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    }
  ]
}
