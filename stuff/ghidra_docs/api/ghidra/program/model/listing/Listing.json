{
  "name": "Listing",
  "comment": "This interface provides all the methods needed to create,delete, retrieve,\n modify code level constructs (CodeUnits, Macros, Fragments, and Modules).",
  "javadoc": "This interface provides all the methods needed to create,delete, retrieve,\n modify code level constructs (CodeUnits, Macros, Fragments, and Modules).",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getCodeUnitAt",
      "comment": "get the code unit that starts at the given address.",
      "javadoc": "get the code unit that starts at the given address.\n@param addr the address to look for a codeUnit.\n@return the codeUnit that begins at the given address",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to look for a codeUnit."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnit",
        "type_short": "CodeUnit",
        "comment": "the codeUnit that begins at the given address"
      },
      "throws": []
    },
    {
      "name": "getCodeUnitContaining",
      "comment": "get the code unit that contains the given address.",
      "javadoc": "get the code unit that contains the given address.\n@param addr the address to look for a codeUnit.\n@return the codeUnit that contains the given address",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to look for a codeUnit."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnit",
        "type_short": "CodeUnit",
        "comment": "the codeUnit that contains the given address"
      },
      "throws": []
    },
    {
      "name": "getCodeUnitAfter",
      "comment": "get the next code unit that starts an an address that is greater than the\n given address. The search will include instructions, defined data, and\n undefined data.",
      "javadoc": "get the next code unit that starts an an address that is greater than the\n given address. The search will include instructions, defined data, and\n undefined data.\n@param addr the address from which to search forward.\n@return the next CodeUnit found while searching forward from addr or null\n         if none found.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address from which to search forward."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnit",
        "type_short": "CodeUnit",
        "comment": "the next CodeUnit found while searching forward from addr or null\n         if none found."
      },
      "throws": []
    },
    {
      "name": "getCodeUnitBefore",
      "comment": "get the next code unit that starts at an address that is less than the\n given address. The search will include instructions, defined data, and\n undefined data.",
      "javadoc": "get the next code unit that starts at an address that is less than the\n given address. The search will include instructions, defined data, and\n undefined data.\n@param addr the address from which to search backwards.\n@return The first codeUnit found while searching backwards from addr or\n         null if none found.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address from which to search backwards."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnit",
        "type_short": "CodeUnit",
        "comment": "The first codeUnit found while searching backwards from addr or\n         null if none found."
      },
      "throws": []
    },
    {
      "name": "getCodeUnitIterator",
      "comment": "Get an iterator that contains all code units in the program which have\n the specified property type defined. Standard property types are defined\n in the CodeUnit class. The property types are: EOL_COMMENT, PRE_COMMENT,\n POST_COMMENT, USER_REFERENCE, MNEMONIC_REFERENCE, VALUE_REFERENCE.\n Property types can also be user defined.",
      "javadoc": "Get an iterator that contains all code units in the program which have\n the specified property type defined. Standard property types are defined\n in the CodeUnit class. The property types are: EOL_COMMENT, PRE_COMMENT,\n POST_COMMENT, USER_REFERENCE, MNEMONIC_REFERENCE, VALUE_REFERENCE.\n Property types can also be user defined.\n@param property the name of the property type.\n@param forward true means get iterator in forward direction\n@return a CodeUnitIterator that returns all code units from the indicated\n         start address that have the specified property type defined.",
      "static": false,
      "params": [
        {
          "name": "property",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property type."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnitIterator",
        "type_short": "CodeUnitIterator",
        "comment": "a CodeUnitIterator that returns all code units from the indicated\n         start address that have the specified property type defined."
      },
      "throws": []
    },
    {
      "name": "getCodeUnitIterator",
      "comment": "Get an iterator that contains the code units which have the specified\n property type defined. Only code units at an address greater than or\n equal to the specified start address will be returned by the iterator. If\n the start address is null then check the entire program. Standard\n property types are defined in the CodeUnit class. The property types are:\n EOL_COMMENT, PRE_COMMENT, POST_COMMENT, USER_REFERENCE,\n MNEMONIC_REFERENCE, VALUE_REFERENCE. Property types can also be user\n defined.",
      "javadoc": "Get an iterator that contains the code units which have the specified\n property type defined. Only code units at an address greater than or\n equal to the specified start address will be returned by the iterator. If\n the start address is null then check the entire program. Standard\n property types are defined in the CodeUnit class. The property types are:\n EOL_COMMENT, PRE_COMMENT, POST_COMMENT, USER_REFERENCE,\n MNEMONIC_REFERENCE, VALUE_REFERENCE. Property types can also be user\n defined.\n@param property the name of the property type. (EOL_COMMENT, PRE_COMMENT,\n            POST_COMMENT, USER_REFERENCE, MNEMONIC_REFERENCE,\n            VALUE_REFERENCE)\n@param addr the start address\n@param forward true means get iterator in forward direction\n@return a CodeUnitIterator that returns all code units from the indicated\n         start address that have the specified property type defined.",
      "static": false,
      "params": [
        {
          "name": "property",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property type. (EOL_COMMENT, PRE_COMMENT,\n            POST_COMMENT, USER_REFERENCE, MNEMONIC_REFERENCE,\n            VALUE_REFERENCE)"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnitIterator",
        "type_short": "CodeUnitIterator",
        "comment": "a CodeUnitIterator that returns all code units from the indicated\n         start address that have the specified property type defined."
      },
      "throws": []
    },
    {
      "name": "getCodeUnitIterator",
      "comment": "Get an iterator that contains the code units which have the specified\n property type defined. Only code units starting within the address set\n will be returned by the iterator. If the address set is null then check\n the entire program. Standard property types are defined in the CodeUnit\n class.",
      "javadoc": "Get an iterator that contains the code units which have the specified\n property type defined. Only code units starting within the address set\n will be returned by the iterator. If the address set is null then check\n the entire program. Standard property types are defined in the CodeUnit\n class.\n@param property the name of the property type.\n@param addrSet the address set\n@param forward true means get iterator in forward direction\n@return a CodeUnitIterator that returns all code units from the indicated\n         address set that have the specified property type defined.",
      "static": false,
      "params": [
        {
          "name": "property",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property type."
        },
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address set"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnitIterator",
        "type_short": "CodeUnitIterator",
        "comment": "a CodeUnitIterator that returns all code units from the indicated\n         address set that have the specified property type defined."
      },
      "throws": []
    },
    {
      "name": "getCommentCodeUnitIterator",
      "comment": "Get a forward code unit iterator over code units that have the specified\n comment type.",
      "javadoc": "Get a forward code unit iterator over code units that have the specified\n comment type.\n@param commentType type defined in CodeUnit\n@param addrSet address set\n@return a CodeUnitIterator that returns all code units from the indicated\n         address set that have the specified comment type defined",
      "static": false,
      "params": [
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": "type defined in CodeUnit"
        },
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "address set"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnitIterator",
        "type_short": "CodeUnitIterator",
        "comment": "a CodeUnitIterator that returns all code units from the indicated\n         address set that have the specified comment type defined"
      },
      "throws": []
    },
    {
      "name": "getCommentAddressIterator",
      "comment": "Get a forward iterator over addresses that have the specified comment\n type.",
      "javadoc": "Get a forward iterator over addresses that have the specified comment\n type.\n@param commentType type defined in CodeUnit\n@param addrSet address set\n@param forward true to iterator from lowest address to highest, false\n            highest to lowest\n@return an AddressIterator that returns all addresses from the indicated\n         address set that have the specified comment type defined",
      "static": false,
      "params": [
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": "type defined in CodeUnit"
        },
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "address set"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to iterator from lowest address to highest, false\n            highest to lowest"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": "an AddressIterator that returns all addresses from the indicated\n         address set that have the specified comment type defined"
      },
      "throws": []
    },
    {
      "name": "getCommentAddressIterator",
      "comment": "Get a forward iterator over addresses that have any type of comment.",
      "javadoc": "Get a forward iterator over addresses that have any type of comment.\n@param addrSet address set\n@param forward true to iterator from lowest address to highest, false\n            highest to lowest\n@return an AddressIterator that returns all addresses from the indicated\n         address set that have any type of comment.",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "address set"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to iterator from lowest address to highest, false\n            highest to lowest"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": "an AddressIterator that returns all addresses from the indicated\n         address set that have any type of comment."
      },
      "throws": []
    },
    {
      "name": "getComment",
      "comment": "Get the comment for the given type at the specified address.",
      "javadoc": "Get the comment for the given type at the specified address.\n@param commentType either EOL_COMMENT, PRE_COMMENT, POST_COMMENT,\n            PLATE_COMMENT, or REPEATABLE_COMMENT\n@param address the address of the comment.\n@return the comment string of the appropriate type or null if no comment\n         of that type exists for this codeunit\n@throws IllegalArgumentException if type is not one of the types of\n             comments supported",
      "static": false,
      "params": [
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": "either EOL_COMMENT, PRE_COMMENT, POST_COMMENT,\n            PLATE_COMMENT, or REPEATABLE_COMMENT"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the comment."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the comment string of the appropriate type or null if no comment\n         of that type exists for this codeunit"
      },
      "throws": []
    },
    {
      "name": "setComment",
      "comment": "Set the comment for the given comment type at the specified address.",
      "javadoc": "Set the comment for the given comment type at the specified address.\n@param address the address of the comment.\n@param commentType either EOL_COMMENT, PRE_COMMENT, POST_COMMENT,\n            PLATE_COMMENT, or REPEATABLE_COMMENT\n@param comment comment to set at the address\n@throws IllegalArgumentException if type is not one of the types of\n             comments supported",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the comment."
        },
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": "either EOL_COMMENT, PRE_COMMENT, POST_COMMENT,\n            PLATE_COMMENT, or REPEATABLE_COMMENT"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "comment to set at the address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCodeUnits",
      "comment": "get a CodeUnit iterator that will iterate over the entire address space.",
      "javadoc": "get a CodeUnit iterator that will iterate over the entire address space.\n@param forward true means get iterator in forward direction\n@return a CodeUnitIterator in forward direction",
      "static": false,
      "params": [
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnitIterator",
        "type_short": "CodeUnitIterator",
        "comment": "a CodeUnitIterator in forward direction"
      },
      "throws": []
    },
    {
      "name": "getCodeUnits",
      "comment": "Returns an iterator of the code units in this listing (in proper\n sequence), starting at the specified address. The specified address\n indicates the first code unit that would be returned by an initial call\n to the next method. An initial call to the previous\n method would return the code unit with an address less than the specified\n address.\n ",
      "javadoc": "Returns an iterator of the code units in this listing (in proper\n sequence), starting at the specified address. The specified address\n indicates the first code unit that would be returned by an initial call\n to the \u003ccode\u003enext\u003c/code\u003e method. An initial call to the \u003ccode\u003eprevious\u003c/code\u003e\n method would return the code unit with an address less than the specified\n address.\n \u003cp\u003e\n@param addr the start address of the iterator.\n@param forward true means get iterator in forward direction\n@return a CodeUnitIterator positioned just before addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the iterator."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnitIterator",
        "type_short": "CodeUnitIterator",
        "comment": "a CodeUnitIterator positioned just before addr."
      },
      "throws": []
    },
    {
      "name": "getCodeUnits",
      "comment": "Get an iterator over the address range(s). Only code units whose start\n addresses are contained in the given address set will be returned by the\n iterator.",
      "javadoc": "Get an iterator over the address range(s). Only code units whose start\n addresses are contained in the given address set will be returned by the\n iterator.\n@param addrSet the AddressRangeSet to iterate over (required).\n@param forward true means get iterator in forward direction\n@return a CodeUnitIterator that is restricted to the give\n         AddressRangeSet.",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the AddressRangeSet to iterate over (required)."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnitIterator",
        "type_short": "CodeUnitIterator",
        "comment": "a CodeUnitIterator that is restricted to the give\n         AddressRangeSet."
      },
      "throws": []
    },
    {
      "name": "getInstructionAt",
      "comment": "get the Instruction that starts at the given address. If no Instruction\n has been defined to start at that address, return null.",
      "javadoc": "get the Instruction that starts at the given address. If no Instruction\n has been defined to start at that address, return null.\n@param addr the address to check for the start of an instruction\n@return the Instruction object that starts at addr; or null if no\n         Instructions starts at addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to check for the start of an instruction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": "the Instruction object that starts at addr; or null if no\n         Instructions starts at addr."
      },
      "throws": []
    },
    {
      "name": "getInstructionContaining",
      "comment": "get the Instruction that contains the given address. If an Instruction is\n defined that contains that address, it will be returned. Otherwise, null\n will be returned.",
      "javadoc": "get the Instruction that contains the given address. If an Instruction is\n defined that contains that address, it will be returned. Otherwise, null\n will be returned.\n@param addr the address to check for containment in an Instruction.\n@return the Instruction object that contains addr; or null if no\n         Instructions contain addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to check for containment in an Instruction."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": "the Instruction object that contains addr; or null if no\n         Instructions contain addr."
      },
      "throws": []
    },
    {
      "name": "getInstructionAfter",
      "comment": "get the closest Instruction that starts at an address that is greater\n than the given address.",
      "javadoc": "get the closest Instruction that starts at an address that is greater\n than the given address.\n@param addr The address at which to begin the forward search.\n@return the next Instruction whose starting address is greater than addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The address at which to begin the forward search."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": "the next Instruction whose starting address is greater than addr."
      },
      "throws": []
    },
    {
      "name": "getInstructionBefore",
      "comment": "get the closest Instruction that starts at an address that is less than\n the given address.",
      "javadoc": "get the closest Instruction that starts at an address that is less than\n the given address.\n@param addr The address at which to begin the backward search.\n@return the closest Instruction whose starting address is less than addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The address at which to begin the backward search."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": "the closest Instruction whose starting address is less than addr."
      },
      "throws": []
    },
    {
      "name": "getInstructions",
      "comment": "get an Instruction iterator that will iterate over the entire address\n space.",
      "javadoc": "get an Instruction iterator that will iterate over the entire address\n space.\n@param forward true means get iterator in forward direction\n@return an InstructionIterator that iterates over all instructions in the\n         program.",
      "static": false,
      "params": [
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.InstructionIterator",
        "type_short": "InstructionIterator",
        "comment": "an InstructionIterator that iterates over all instructions in the\n         program."
      },
      "throws": []
    },
    {
      "name": "getInstructions",
      "comment": "Returns an iterator of the instructions in this listing (in proper\n sequence), starting at the specified address. The specified address\n indicates the first instruction that would be returned by an initial call\n to the next method. An initial call to the previous\n method would return the instruction with an address less than the\n specified address.\n ",
      "javadoc": "Returns an iterator of the instructions in this listing (in proper\n sequence), starting at the specified address. The specified address\n indicates the first instruction that would be returned by an initial call\n to the \u003ccode\u003enext\u003c/code\u003e method. An initial call to the \u003ccode\u003eprevious\u003c/code\u003e\n method would return the instruction with an address less than the\n specified address.\n \u003cp\u003e\n@param addr the initial position of the iterator\n@param forward true means get iterator in forward direction\n@return an InstructionIterator that iterates over all Instruction objects\n         in the given address range set.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the initial position of the iterator"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.InstructionIterator",
        "type_short": "InstructionIterator",
        "comment": "an InstructionIterator that iterates over all Instruction objects\n         in the given address range set."
      },
      "throws": []
    },
    {
      "name": "getInstructions",
      "comment": "Get an Instruction iterator over the address range(s). Only instructions\n whose start addresses are contained in the given address set will be\n returned by the iterator.",
      "javadoc": "Get an Instruction iterator over the address range(s). Only instructions\n whose start addresses are contained in the given address set will be\n returned by the iterator.\n@param addrSet the address range set to iterate over.\n@param forward true means get iterator in forward direction\n@return a DataIterator that iterates over all defined and undefined Data\n         objects in the given address range set.",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address range set to iterate over."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.InstructionIterator",
        "type_short": "InstructionIterator",
        "comment": "a DataIterator that iterates over all defined and undefined Data\n         objects in the given address range set."
      },
      "throws": []
    },
    {
      "name": "getDataAt",
      "comment": "get the Data (Defined or Undefined) that starts at the given address.",
      "javadoc": "get the Data (Defined or Undefined) that starts at the given address.\n@param addr the address to check for a Data object.\n@return the Data object that starts at addr; or null if no Data\n         objects(defined or undefined) start at addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to check for a Data object."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the Data object that starts at addr; or null if no Data\n         objects(defined or undefined) start at addr."
      },
      "throws": []
    },
    {
      "name": "getDataContaining",
      "comment": "Gets the data object that is at or contains the given address or null if\n the address in not in memory or is in an instruction.",
      "javadoc": "Gets the data object that is at or contains the given address or null if\n the address in not in memory or is in an instruction.\n@param addr the address for which to find its containing data element.\n@return the Data object containing the given address or null if there is\n         no data that contains the address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address for which to find its containing data element."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the Data object containing the given address or null if there is\n         no data that contains the address."
      },
      "throws": []
    },
    {
      "name": "getDataAfter",
      "comment": "get the closest Data object that starts at an address that is greater\n than the given address.",
      "javadoc": "get the closest Data object that starts at an address that is greater\n than the given address.\n@param addr the address at which to begin the forward search.\n@return the next Data object whose starting address is greater than addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to begin the forward search."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the next Data object whose starting address is greater than addr."
      },
      "throws": []
    },
    {
      "name": "getDataBefore",
      "comment": "get the closest Data object that starts at an address that is less than\n the given address.",
      "javadoc": "get the closest Data object that starts at an address that is less than\n the given address.\n@param addr The address at which to begin the backward search.\n@return the closest Data object whose starting address is less than addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The address at which to begin the backward search."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the closest Data object whose starting address is less than addr."
      },
      "throws": []
    },
    {
      "name": "getData",
      "comment": "get a Data iterator that will iterate over the entire address space;\n returning both defined and undefined Data objects.",
      "javadoc": "get a Data iterator that will iterate over the entire address space;\n returning both defined and undefined Data objects.\n@param forward true means get iterator in forward direction\n@return a DataIterator that iterates over all defined and undefined Data\n         object in the program.",
      "static": false,
      "params": [
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.DataIterator",
        "type_short": "DataIterator",
        "comment": "a DataIterator that iterates over all defined and undefined Data\n         object in the program."
      },
      "throws": []
    },
    {
      "name": "getData",
      "comment": "Returns an iterator of the data in this listing (in proper sequence),\n starting at the specified address. The specified address indicates the\n first Data that would be returned by an initial call to the next\n method. An initial call to the previous method would return the\n Data with an address less than the specified address.\n ",
      "javadoc": "Returns an iterator of the data in this listing (in proper sequence),\n starting at the specified address. The specified address indicates the\n first Data that would be returned by an initial call to the \u003ccode\u003enext\u003c/code\u003e\n method. An initial call to the \u003ccode\u003eprevious\u003c/code\u003e method would return the\n Data with an address less than the specified address.\n \u003cp\u003e\n@param addr the initial position of the iterator\n@param forward true means get iterator in forward direction\n@return a DataIterator that iterates over all Data objects in the given\n         address range set.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the initial position of the iterator"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.DataIterator",
        "type_short": "DataIterator",
        "comment": "a DataIterator that iterates over all Data objects in the given\n         address range set."
      },
      "throws": []
    },
    {
      "name": "getData",
      "comment": "Get an iterator over the address range(s). Only data whose start\n addresses are contained in the given address set will be returned by the\n iterator.",
      "javadoc": "Get an iterator over the address range(s). Only data whose start\n addresses are contained in the given address set will be returned by the\n iterator.\n@param addrSet the address range set to iterate over.\n@param forward true means get iterator in forward direction\n@return a DataIterator that iterates over all defined and undefined Data\n         objects in the given address range set.",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address range set to iterate over."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.DataIterator",
        "type_short": "DataIterator",
        "comment": "a DataIterator that iterates over all defined and undefined Data\n         objects in the given address range set."
      },
      "throws": []
    },
    {
      "name": "getDefinedDataAt",
      "comment": "get the Data (defined) object that starts at the given address. If no\n Data object is defined at that address, then return null.",
      "javadoc": "get the Data (defined) object that starts at the given address. If no\n Data object is defined at that address, then return null.\n@param addr The address to check for defined Data.\n@return a Data object that starts at addr, or null if no Data object has\n         been defined to start at addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The address to check for defined Data."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "a Data object that starts at addr, or null if no Data object has\n         been defined to start at addr."
      },
      "throws": []
    },
    {
      "name": "getDefinedDataContaining",
      "comment": "get the Data object that starts at the given address. If no Data objects\n have been defined that contain that address, then return null.",
      "javadoc": "get the Data object that starts at the given address. If no Data objects\n have been defined that contain that address, then return null.\n@param addr the address to check for containment in a defined Data\n            object.\n@return the defined Data object containing addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to check for containment in a defined Data\n            object."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the defined Data object containing addr."
      },
      "throws": []
    },
    {
      "name": "getDefinedDataAfter",
      "comment": "get the defined Data object that starts at an address that is greater\n than the given address.",
      "javadoc": "get the defined Data object that starts at an address that is greater\n than the given address.\n@param addr the address at which to begin the forward search.\n@return the next defined Data object whose starting address is greater\n         than addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to begin the forward search."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the next defined Data object whose starting address is greater\n         than addr."
      },
      "throws": []
    },
    {
      "name": "getDefinedDataBefore",
      "comment": "get the closest defined Data object that starts at an address that is\n less than the given address.",
      "javadoc": "get the closest defined Data object that starts at an address that is\n less than the given address.\n@param addr The address at which to begin the backward search.\n@return the closest defined Data object whose starting address is less\n         than addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The address at which to begin the backward search."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the closest defined Data object whose starting address is less\n         than addr."
      },
      "throws": []
    },
    {
      "name": "getDefinedData",
      "comment": "get a Data iterator that will iterate over the entire address space;\n returning only defined Data objects.",
      "javadoc": "get a Data iterator that will iterate over the entire address space;\n returning only defined Data objects.\n@param forward true means get iterator in forward direction\n@return a DataIterator that iterates over all defined Data objects in the\n         program.",
      "static": false,
      "params": [
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.DataIterator",
        "type_short": "DataIterator",
        "comment": "a DataIterator that iterates over all defined Data objects in the\n         program."
      },
      "throws": []
    },
    {
      "name": "getDefinedData",
      "comment": "Returns an iterator of the defined data in this listing (in proper\n sequence), starting at the specified address. The specified address\n indicates the first defined Data that would be returned by an initial\n call to the next method. An initial call to the\n previous method would return the defined Data with an address\n less than the specified address.\n ",
      "javadoc": "Returns an iterator of the defined data in this listing (in proper\n sequence), starting at the specified address. The specified address\n indicates the first defined Data that would be returned by an initial\n call to the \u003ccode\u003enext\u003c/code\u003e method. An initial call to the\n \u003ccode\u003eprevious\u003c/code\u003e method would return the defined Data with an address\n less than the specified address.\n \u003cp\u003e\n@param addr the initial position of the iterator\n@param forward true means get iterator in forward direction\n@return a DataIterator that iterates over all defined Data objects in the\n         given address range set.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the initial position of the iterator"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.DataIterator",
        "type_short": "DataIterator",
        "comment": "a DataIterator that iterates over all defined Data objects in the\n         given address range set."
      },
      "throws": []
    },
    {
      "name": "getDefinedData",
      "comment": "Get an iterator over the address range(s). Only defined data whose start\n addresses are contained in the given address set will be returned by the\n iterator.",
      "javadoc": "Get an iterator over the address range(s). Only defined data whose start\n addresses are contained in the given address set will be returned by the\n iterator.\n@param addrSet the address range set to iterate over.\n@param forward true means get iterator in forward direction\n@return a DataIterator that iterates over all defined Data objects in the\n         given address range set.",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address range set to iterate over."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.DataIterator",
        "type_short": "DataIterator",
        "comment": "a DataIterator that iterates over all defined Data objects in the\n         given address range set."
      },
      "throws": []
    },
    {
      "name": "getUndefinedDataAt",
      "comment": "get the Data (undefined) object that starts at the given address.",
      "javadoc": "get the Data (undefined) object that starts at the given address.\n@param addr The address to check for undefined data.\n@return a default DataObject if bytes exist at addr and nothing has been\n         defined to exist there. Otherwise returns null.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The address to check for undefined data."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "a default DataObject if bytes exist at addr and nothing has been\n         defined to exist there. Otherwise returns null."
      },
      "throws": []
    },
    {
      "name": "getUndefinedDataAfter",
      "comment": "Get the undefined Data object that starts at an address that is greater\n than the given address. This operation can be slow for large programs so\n a TaskMonitor is required.",
      "javadoc": "Get the undefined Data object that starts at an address that is greater\n than the given address. This operation can be slow for large programs so\n a TaskMonitor is required.\n@param addr the address at which to begin the forward search.\n@param monitor a task monitor allowing this operation to be cancelled\n@return the next undefined Data object whose starting address is greater\n         than addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to begin the forward search."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a task monitor allowing this operation to be cancelled"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the next undefined Data object whose starting address is greater\n         than addr."
      },
      "throws": []
    },
    {
      "name": "getFirstUndefinedData",
      "comment": "Get the undefined Data object that falls within the set. This operation\n can be slow for large programs so a TaskMonitor is required.",
      "javadoc": "Get the undefined Data object that falls within the set. This operation\n can be slow for large programs so a TaskMonitor is required.\n@param set the addressSet at which to find the first undefined address.\n@param monitor a task monitor allowing this operation to be cancelled\n@return the next undefined Data object whose starting address falls\n         within the addresSet.",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the addressSet at which to find the first undefined address."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a task monitor allowing this operation to be cancelled"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the next undefined Data object whose starting address falls\n         within the addresSet."
      },
      "throws": []
    },
    {
      "name": "getUndefinedDataBefore",
      "comment": "get the closest undefined Data object that starts at an address that is\n less than the given address. This operation can be slow for large\n programs so a TaskMonitor is required.",
      "javadoc": "get the closest undefined Data object that starts at an address that is\n less than the given address. This operation can be slow for large\n programs so a TaskMonitor is required.\n@param addr The address at which to begin the backward search.\n@param monitor a task monitor allowing this operation to be cancelled\n@return the closest undefined Data object whose starting address is less\n         than addr.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The address at which to begin the backward search."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a task monitor allowing this operation to be cancelled"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the closest undefined Data object whose starting address is less\n         than addr."
      },
      "throws": []
    },
    {
      "name": "getUndefinedRanges",
      "comment": "Get the address set which corresponds to all undefined code units within\n the specified set of address.",
      "javadoc": "Get the address set which corresponds to all undefined code units within\n the specified set of address.\n@param set set of addresses to search\n@param initializedMemoryOnly if true set will be constrained to\n            initialized memory areas, if false set will be constrained to\n            all defined memory blocks.\n@param monitor task monitor\n@return address set corresponding to undefined code units\n@throws CancelledException if monitor cancelled",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "set of addresses to search"
        },
        {
          "name": "initializedMemoryOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true set will be constrained to\n            initialized memory areas, if false set will be constrained to\n            all defined memory blocks."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "address set corresponding to undefined code units"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if monitor cancelled"
        }
      ]
    },
    {
      "name": "getDefinedCodeUnitAfter",
      "comment": "Returns the next instruction or defined data after the given address;",
      "javadoc": "Returns the next instruction or defined data after the given address;\n@param addr the address at which to begin the search\n@return the next instruction or defined data at an address higher than\n         the given address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to begin the search"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnit",
        "type_short": "CodeUnit",
        "comment": "the next instruction or defined data at an address higher than\n         the given address."
      },
      "throws": []
    },
    {
      "name": "getDefinedCodeUnitBefore",
      "comment": "Returns the closest instruction or defined data that starts before the\n given address.",
      "javadoc": "Returns the closest instruction or defined data that starts before the\n given address.\n@param addr the address at which to begin the search\n@return the closest instruction or defined data at an address below the\n         given address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to begin the search"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnit",
        "type_short": "CodeUnit",
        "comment": "the closest instruction or defined data at an address below the\n         given address."
      },
      "throws": []
    },
    {
      "name": "getCompositeData",
      "comment": "Get an iterator over all the composite data objects (Arrays, Structures,\n and Union) in the program.",
      "javadoc": "Get an iterator over all the composite data objects (Arrays, Structures,\n and Union) in the program.\n@param forward true means get iterator that starts at the minimum address\n            and iterates forward. Otherwise it starts at the maximum\n            address and iterates backwards.\n@return an iterator over all the composite data objects.",
      "static": false,
      "params": [
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator that starts at the minimum address\n            and iterates forward. Otherwise it starts at the maximum\n            address and iterates backwards."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.DataIterator",
        "type_short": "DataIterator",
        "comment": "an iterator over all the composite data objects."
      },
      "throws": []
    },
    {
      "name": "getCompositeData",
      "comment": "Get an iterator over all the composite data objects (Arrays, Structures,\n and Union) in the program at or after the given Address.",
      "javadoc": "Get an iterator over all the composite data objects (Arrays, Structures,\n and Union) in the program at or after the given Address.\n@param start start of the iterator\n@param forward true means get iterator in forward direction\n@return an iterator over all the composite data objects starting with the\n         given address.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "start of the iterator"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.DataIterator",
        "type_short": "DataIterator",
        "comment": "an iterator over all the composite data objects starting with the\n         given address."
      },
      "throws": []
    },
    {
      "name": "getCompositeData",
      "comment": "Get an iterator over all the composite data objects (Arrays, Structures,\n and Union) within the specified address set in the program.",
      "javadoc": "Get an iterator over all the composite data objects (Arrays, Structures,\n and Union) within the specified address set in the program.\n@param addrSet the address set\n@param forward true means get iterator in forward direction\n@return an iterator over all the composite data objects in the given\n         address set.",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address set"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get iterator in forward direction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.DataIterator",
        "type_short": "DataIterator",
        "comment": "an iterator over all the composite data objects in the given\n         address set."
      },
      "throws": []
    },
    {
      "name": "getUserDefinedProperties",
      "comment": "Returns an iterator over all user defined property names.",
      "javadoc": "Returns an iterator over all user defined property names.\n@return an iterator over all user defined property names.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cjava.lang.String\u003e",
        "type_short": "Iterator",
        "comment": "an iterator over all user defined property names."
      },
      "throws": []
    },
    {
      "name": "removeUserDefinedProperty",
      "comment": "Removes the entire property from the program",
      "javadoc": "Removes the entire property from the program\n@param propertyName the name of the property to remove.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to remove."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPropertyMap",
      "comment": "Returns the PropertyMap associated with the given name",
      "javadoc": "Returns the PropertyMap associated with the given name\n@param propertyName the property name\n@return PropertyMap the propertyMap object.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the property name"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.PropertyMap",
        "type_short": "PropertyMap",
        "comment": "PropertyMap the propertyMap object."
      },
      "throws": []
    },
    {
      "name": "createInstruction",
      "comment": "Creates a new Instruction object at the given address. The specified\n context is only used to create the associated prototype. It is critical\n that the context be written immediately after creation of the instruction\n and must be done with a single set operation on the program context. Once\n a set context is done on the instruction address, any subsequent context\n changes will result in a ContextChangeException",
      "javadoc": "Creates a new Instruction object at the given address. The specified\n context is only used to create the associated prototype. It is critical\n that the context be written immediately after creation of the instruction\n and must be done with a single set operation on the program context. Once\n a set context is done on the instruction address, any subsequent context\n changes will result in a \u003ccode\u003eContextChangeException\u003c/code\u003e\n@param addr the address at which to create an instruction\n@param prototype the InstructionPrototype the describes the type of\n            instruction to create.\n@param memBuf buffer that provides the bytes that make up the\n            instruction.\n@param context the processor context at this location.\n@return the newly created instruction.\n@exception CodeUnitInsertionException thrown if the new Instruction would\n                overlap and existing Instruction or defined data.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to create an instruction"
        },
        {
          "name": "prototype",
          "type_long": "ghidra.program.model.lang.InstructionPrototype",
          "type_short": "InstructionPrototype",
          "comment": "the InstructionPrototype the describes the type of\n            instruction to create."
        },
        {
          "name": "memBuf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "buffer that provides the bytes that make up the\n            instruction."
        },
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.ProcessorContextView",
          "type_short": "ProcessorContextView",
          "comment": "the processor context at this location."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": "the newly created instruction."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addInstructions",
      "comment": "Creates a complete set of instructions. A preliminary pass will be made\n checking for code unit conflicts which will be marked within the\n instructionSet causing dependent blocks to get pruned.",
      "javadoc": "Creates a complete set of instructions. A preliminary pass will be made\n checking for code unit conflicts which will be marked within the\n instructionSet causing dependent blocks to get pruned.\n@param instructionSet the set of instructions to be added. All code unit\n            conflicts will be marked within the instructionSet and\n            associated blocks.\n@param overwrite if true, overwrites existing code units.\n@throws CodeUnitInsertionException if the instruction set is incompatible\n             with the program memory\n@return the set of addresses over which instructions were actually added\n         to the program. This may differ from the InstructionSet address\n         set if conflict errors occurred. Such conflict errors will be\n         recorded within the InstructionSet and its InstructionBlocks.",
      "static": false,
      "params": [
        {
          "name": "instructionSet",
          "type_long": "ghidra.program.model.lang.InstructionSet",
          "type_short": "InstructionSet",
          "comment": "the set of instructions to be added. All code unit\n            conflicts will be marked within the instructionSet and\n            associated blocks."
        },
        {
          "name": "overwrite",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, overwrites existing code units."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "the set of addresses over which instructions were actually added\n         to the program. This may differ from the InstructionSet address\n         set if conflict errors occurred. Such conflict errors will be\n         recorded within the InstructionSet and its InstructionBlocks."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": "if the instruction set is incompatible\n             with the program memory"
        }
      ]
    },
    {
      "name": "createData",
      "comment": "Creates a new defined Data object of a given length at the given address.\n This ignores the bytes that are present",
      "javadoc": "Creates a new defined Data object of a given length at the given address.\n This ignores the bytes that are present\n@param addr the address at which to create a new Data object.\n@param dataType the Data Type that describes the type of Data object to\n            create.\n@param length the length of the datatype.\n@return newly created data unit\n@exception CodeUnitInsertionException thrown if the new Instruction would\n                overlap and existing Instruction or defined data.\n@throws DataTypeConflictException if the given datatype conflicts (same\n             name, but not equal) with an existing datatype.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to create a new Data object."
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the Data Type that describes the type of Data object to\n            create."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the length of the datatype."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "newly created data unit"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.data.DataTypeConflictException",
          "type_short": "DataTypeConflictException",
          "comment": "if the given datatype conflicts (same\n             name, but not equal) with an existing datatype."
        }
      ]
    },
    {
      "name": "createData",
      "comment": "Creates a new defined Data object at the given address. This ignores the\n bytes that are present",
      "javadoc": "Creates a new defined Data object at the given address. This ignores the\n bytes that are present\n@param addr the address at which to create a new Data object.\n@param dataType the Data Type that describes the type of Data object to\n            create.\n@return newly created data unit\n@exception CodeUnitInsertionException thrown if the new Instruction would\n                overlap and existing Instruction or defined data.\n@throws DataTypeConflictException if the given datatype conflicts (same\n             name, but not equal) with an existing datatype.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to create a new Data object."
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the Data Type that describes the type of Data object to\n            create."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "newly created data unit"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.data.DataTypeConflictException",
          "type_short": "DataTypeConflictException",
          "comment": "if the given datatype conflicts (same\n             name, but not equal) with an existing datatype."
        }
      ]
    },
    {
      "name": "clearCodeUnits",
      "comment": "Clears any code units in the given range returning everything to \"db\"s,\n and removing any references in the affected area. Note that the module\n and fragment structure is unaffected. If part of a code unit is contained\n in the given address range then the whole code unit will be cleared.",
      "javadoc": "Clears any code units in the given range returning everything to \"db\"s,\n and removing any references in the affected area. Note that the module\n and fragment structure is unaffected. If part of a code unit is contained\n in the given address range then the whole code unit will be cleared.\n@param startAddr the start address of the area to be cleared.\n@param endAddr the end address of the area to be cleared.\n@param clearContext clear context register values if true",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the area to be cleared."
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end address of the area to be cleared."
        },
        {
          "name": "clearContext",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "clear context register values if true"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearCodeUnits",
      "comment": "Clears any code units in the given range returning everything to \"db\"s,\n and removing any references in the affected area. Note that the module\n and fragment structure is unaffected. If part of a code unit is contained\n in the given address range then the whole code unit will be cleared.",
      "javadoc": "Clears any code units in the given range returning everything to \"db\"s,\n and removing any references in the affected area. Note that the module\n and fragment structure is unaffected. If part of a code unit is contained\n in the given address range then the whole code unit will be cleared.\n@param startAddr the start address of the area to be cleared.\n@param endAddr the end address of the area to be cleared.\n@param clearContext clear context register values if true\n@param monitor monitor that can be used to cancel the clear operation\n@throws CancelledException if the operation was cancelled.",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the area to be cleared."
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end address of the area to be cleared."
        },
        {
          "name": "clearContext",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "clear context register values if true"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "monitor that can be used to cancel the clear operation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the operation was cancelled."
        }
      ]
    },
    {
      "name": "isUndefined",
      "comment": "Checks if the given ranges consists entirely of undefined data.",
      "javadoc": "Checks if the given ranges consists entirely of undefined data.\n@param start The start address of the range to check.\n@param end The end address of the range to check.\n@return boolean true if the given range is in memory and has no\n         instructions or defined data.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The start address of the range to check."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The end address of the range to check."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the given range is in memory and has no\n         instructions or defined data."
      },
      "throws": []
    },
    {
      "name": "clearComments",
      "comment": "Clears the comments in the given range.",
      "javadoc": "Clears the comments in the given range.\n@param startAddr the start address of the range to be cleared\n@param endAddr the end address of the range to be cleard",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the range to be cleared"
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end address of the range to be cleard"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearProperties",
      "comment": "Clears the properties in the given range.",
      "javadoc": "Clears the properties in the given range.\n@param startAddr the start address of the range to be cleared\n@param endAddr the end address of the range to be cleard\n@param monitor task monitor for cancelling operation.\n@throws CancelledException if the operation was cancelled.",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the range to be cleared"
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end address of the range to be cleard"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor for cancelling operation."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the operation was cancelled."
        }
      ]
    },
    {
      "name": "clearAll",
      "comment": "Removes all CodeUnits, comments, properties, and references from the\n listing.",
      "javadoc": "Removes all CodeUnits, comments, properties, and references from the\n listing.\n@param clearContext if true, also clear any instruction context that has\n            been laid down from previous disassembly.\n@param monitor used for tracking progress and cancelling the clear\n            operation.",
      "static": false,
      "params": [
        {
          "name": "clearContext",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, also clear any instruction context that has\n            been laid down from previous disassembly."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "used for tracking progress and cancelling the clear\n            operation."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFragment",
      "comment": "Returns the fragment containing the given address.\n ",
      "javadoc": "Returns the fragment containing the given address.\n \u003cP\u003e\n@param treeName name of the tree to search\n@param addr the address that is contained within a fragment.\n@return will return null if the address is not in the program.",
      "static": false,
      "params": [
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the tree to search"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address that is contained within a fragment."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramFragment",
        "type_short": "ProgramFragment",
        "comment": "will return null if the address is not in the program."
      },
      "throws": []
    },
    {
      "name": "getModule",
      "comment": "Returns the module with the given name.\n ",
      "javadoc": "Returns the module with the given name.\n \u003cP\u003e\n@param treeName name of the tree to search\n@param name the name of the module to find.\n@return will return null if there is no module with the given name.",
      "static": false,
      "params": [
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the tree to search"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the module to find."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramModule",
        "type_short": "ProgramModule",
        "comment": "will return null if there is no module with the given name."
      },
      "throws": []
    },
    {
      "name": "getFragment",
      "comment": "Returns the fragment with the given name.\n ",
      "javadoc": "Returns the fragment with the given name.\n \u003cP\u003e\n@param treeName name of the tree to search\n@param name the name of the fragment to find.\n@return will return null if there is no fragment with the given name.",
      "static": false,
      "params": [
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the tree to search"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the fragment to find."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramFragment",
        "type_short": "ProgramFragment",
        "comment": "will return null if there is no fragment with the given name."
      },
      "throws": []
    },
    {
      "name": "createRootModule",
      "comment": "Create a new tree that will be identified by the given name. By default,\n the new root module is populated with fragments based on memory blocks.\n Note that the root module\u0027s name is not the same as its tree name. The\n root module name defaults to the name of the program.",
      "javadoc": "Create a new tree that will be identified by the given name. By default,\n the new root module is populated with fragments based on memory blocks.\n Note that the root module\u0027s name is not the same as its tree name. The\n root module name defaults to the name of the program.\n@param treeName name of the tree to search\n@return root module\n@throws DuplicateNameException if a tree with the given name already\n             exists",
      "static": false,
      "params": [
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the tree to search"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramModule",
        "type_short": "ProgramModule",
        "comment": "root module"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if a tree with the given name already\n             exists"
        }
      ]
    },
    {
      "name": "getRootModule",
      "comment": "Gets the root module for a tree in this listing.",
      "javadoc": "Gets the root module for a tree in this listing.\n@param treeName name of tree\n@return the root module for the listing; returns null if there is no tree\n         rooted at a module with the given name.",
      "static": false,
      "params": [
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of tree"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramModule",
        "type_short": "ProgramModule",
        "comment": "the root module for the listing; returns null if there is no tree\n         rooted at a module with the given name."
      },
      "throws": []
    },
    {
      "name": "getRootModule",
      "comment": "Returns the root module of the program tree with the given name;",
      "javadoc": "Returns the root module of the program tree with the given name;\n@param treeID id of the program tree\n@return the root module of the specified tree.",
      "static": false,
      "params": [
        {
          "name": "treeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "id of the program tree"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramModule",
        "type_short": "ProgramModule",
        "comment": "the root module of the specified tree."
      },
      "throws": []
    },
    {
      "name": "getDefaultRootModule",
      "comment": "Returns the root module for the default program tree. This would be the\n program tree that has existed the longest.",
      "javadoc": "Returns the root module for the default program tree. This would be the\n program tree that has existed the longest.\n@return the root module for the oldest existing program tree.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramModule",
        "type_short": "ProgramModule",
        "comment": "the root module for the oldest existing program tree."
      },
      "throws": []
    },
    {
      "name": "getTreeNames",
      "comment": "Get the names of all the trees defined in this listing.",
      "javadoc": "Get the names of all the trees defined in this listing.\n@return the names of all program trees defined in the program.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "the names of all program trees defined in the program."
      },
      "throws": []
    },
    {
      "name": "removeTree",
      "comment": "Remove the tree rooted at the given name.",
      "javadoc": "Remove the tree rooted at the given name.\n@param treeName the name of the tree to remove.\n@return true if the tree was removed; return false if this is the last\n         tree for the program; cannot delete the last tree.",
      "static": false,
      "params": [
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the tree to remove."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the tree was removed; return false if this is the last\n         tree for the program; cannot delete the last tree."
      },
      "throws": []
    },
    {
      "name": "renameTree",
      "comment": "Rename the tree. This method does not change the root module\u0027s name only\n the identifier for the tree.",
      "javadoc": "Rename the tree. This method does not change the root module\u0027s name only\n the identifier for the tree.\n@param oldName old name of the tree\n@param newName new name of the tree.\n@throws DuplicateNameException if newName already exists for a root\n             module",
      "static": false,
      "params": [
        {
          "name": "oldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "old name of the tree"
        },
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new name of the tree."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if newName already exists for a root\n             module"
        }
      ]
    },
    {
      "name": "getNumCodeUnits",
      "comment": "gets the total number of CodeUnits (Instructions, defined Data, and\n undefined Data)",
      "javadoc": "gets the total number of CodeUnits (Instructions, defined Data, and\n undefined Data)\n@return the total number of CodeUnits in the listing.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the total number of CodeUnits in the listing."
      },
      "throws": []
    },
    {
      "name": "getNumDefinedData",
      "comment": "gets the total number of defined Data objects in the listing.",
      "javadoc": "gets the total number of defined Data objects in the listing.\n@return the total number of defined Data objects in the listing.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the total number of defined Data objects in the listing."
      },
      "throws": []
    },
    {
      "name": "getNumInstructions",
      "comment": "gets the total number of Instructions in the listing.",
      "javadoc": "gets the total number of Instructions in the listing.\n@return number of Instructions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "number of Instructions"
      },
      "throws": []
    },
    {
      "name": "getDataTypeManager",
      "comment": "Get the data type manager for the program.",
      "javadoc": "Get the data type manager for the program.\n@return the datatype manager for the program.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeManager",
        "type_short": "DataTypeManager",
        "comment": "the datatype manager for the program."
      },
      "throws": []
    },
    {
      "name": "createFunction",
      "comment": "Create a function with an entry point and a body of addresses.",
      "javadoc": "Create a function with an entry point and a body of addresses.\n@param name the name of the function to create\n@param entryPoint the entry point for the function\n@param body the address set that makes up the functions body\n@param source the source of this function\n@return the created function\n@throws InvalidInputException if the name contains invalid characters\n@throws OverlappingFunctionException if the given body overlaps with an\n             existing function.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the function to create"
        },
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the entry point for the function"
        },
        {
          "name": "body",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address set that makes up the functions body"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this function"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "the created function"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if the name contains invalid characters"
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": "if the given body overlaps with an\n             existing function."
        }
      ]
    },
    {
      "name": "createFunction",
      "comment": "Create a function in the specified namespace with an entry point and a\n body of addresses.",
      "javadoc": "Create a function in the specified namespace with an entry point and a\n body of addresses.\n@param name the name of the function to create\n@param nameSpace the namespace in which to create the function\n@param entryPoint the entry point for the function\n@param body the address set that makes up the functions body\n@param source the source of this function\n@return the created function\n@throws InvalidInputException if the name contains invalid characters\n@throws OverlappingFunctionException if the given body overlaps with an\n             existing function.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the function to create"
        },
        {
          "name": "nameSpace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the namespace in which to create the function"
        },
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the entry point for the function"
        },
        {
          "name": "body",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address set that makes up the functions body"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this function"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "the created function"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if the name contains invalid characters"
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": "if the given body overlaps with an\n             existing function."
        }
      ]
    },
    {
      "name": "removeFunction",
      "comment": "Remove a function a given entry point.",
      "javadoc": "Remove a function a given entry point.\n@param entryPoint entry point of function to be removed.",
      "static": false,
      "params": [
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "entry point of function to be removed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionAt",
      "comment": "Get a function with a given entry point.",
      "javadoc": "Get a function with a given entry point.\n@param entryPoint entry point of the function\n@return function at the entry point",
      "static": false,
      "params": [
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "entry point of the function"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "function at the entry point"
      },
      "throws": []
    },
    {
      "name": "getGlobalFunctions",
      "comment": "Returns a list of all global functions with the given name.",
      "javadoc": "Returns a list of all global functions with the given name.\n@param name the name of the functions to retrieve.\n@return a list of all global functions with the given name.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the functions to retrieve."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.listing.Function\u003e",
        "type_short": "List",
        "comment": "a list of all global functions with the given name."
      },
      "throws": []
    },
    {
      "name": "getFunctions",
      "comment": "Returns a list of all functions with the given name in the given\n namespace.",
      "javadoc": "Returns a list of all functions with the given name in the given\n namespace.\n@param namespace the namespace to search for functions of the given name.\n            Can be null, in which case it will search the global\n            namespace.\n@param name the name of the functions to retrieve.\n@return a list of all global functions with the given name.",
      "static": false,
      "params": [
        {
          "name": "namespace",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the namespace to search for functions of the given name.\n            Can be null, in which case it will search the global\n            namespace."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the functions to retrieve."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.listing.Function\u003e",
        "type_short": "List",
        "comment": "a list of all global functions with the given name."
      },
      "throws": []
    },
    {
      "name": "getFunctionContaining",
      "comment": "Get a function containing an address.",
      "javadoc": "Get a function containing an address.\n@param addr the address to search.\n@return function containing this address, null otherwise",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to search."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "function containing this address, null otherwise"
      },
      "throws": []
    },
    {
      "name": "getExternalFunctions",
      "comment": "Get an iterator over all external functions",
      "javadoc": "Get an iterator over all external functions\n@return an iterator over all currently defined external functions.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": "an iterator over all currently defined external functions."
      },
      "throws": []
    },
    {
      "name": "getFunctions",
      "comment": "Get an iterator over all functions",
      "javadoc": "Get an iterator over all functions\n@param forward if true functions are return in address order, otherwise\n            backwards address order\n@return an iterator over all currently defined functions.",
      "static": false,
      "params": [
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true functions are return in address order, otherwise\n            backwards address order"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": "an iterator over all currently defined functions."
      },
      "throws": []
    },
    {
      "name": "getFunctions",
      "comment": "Get an iterator over all functions starting at address",
      "javadoc": "Get an iterator over all functions starting at address\n@param start the address to start iterating at.\n@param forward if true functions are return in address order, otherwise\n            backwards address order\n@return an iterator over functions",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to start iterating at."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true functions are return in address order, otherwise\n            backwards address order"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": "an iterator over functions"
      },
      "throws": []
    },
    {
      "name": "getFunctions",
      "comment": "Get an iterator over all functions with entry points in the address set.",
      "javadoc": "Get an iterator over all functions with entry points in the address set.\n@param asv the set of addresses to iterator function entry points over.\n@param forward if true functions are return in address order, otherwise\n            backwards address order\n@return an iterator over functions",
      "static": false,
      "params": [
        {
          "name": "asv",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the set of addresses to iterator function entry points over."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true functions are return in address order, otherwise\n            backwards address order"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": "an iterator over functions"
      },
      "throws": []
    },
    {
      "name": "isInFunction",
      "comment": "Check if an address is contained in a function",
      "javadoc": "Check if an address is contained in a function\n@param addr address to test\n@return true if this address is in one or more functions",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address to test"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this address is in one or more functions"
      },
      "throws": []
    },
    {
      "name": "getCommentHistory",
      "comment": "Get the comment history for comments at the given address.",
      "javadoc": "Get the comment history for comments at the given address.\n@param addr address for comments\n@param commentType comment type defined in CodeUnit\n@return array of comment history records",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address for comments"
        },
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": "comment type defined in CodeUnit"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CommentHistory[]",
        "type_short": "ghidra.program.model.listing.CommentHistory[]",
        "comment": "array of comment history records"
      },
      "throws": []
    }
  ]
}
