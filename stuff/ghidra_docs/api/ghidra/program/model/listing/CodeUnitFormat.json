{
  "name": "CodeUnitFormat",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "PLUS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"+\""
    },
    {
      "name": "UNDERSCORE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"_\""
    },
    {
      "name": "EXTENDED_REFERENCE_DELIMITER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "EXTENDED_INDIRECT_REFERENCE_DELIMITER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "SHIFT_CASES",
      "comment": "Supported memory address shift cases (bits)",
      "javadoc": "Supported memory address shift cases (bits)",
      "static": true,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "MASK_CASES",
      "comment": "Supported memory address mask cases (mask value)",
      "javadoc": "Supported memory address mask cases (mask value)",
      "static": true,
      "type_long": "long[]",
      "type_short": "long[]",
      "constant_value": null
    },
    {
      "name": "DEFAULT",
      "comment": "Default code unit format",
      "javadoc": "Default code unit format",
      "static": true,
      "type_long": "ghidra.program.model.listing.CodeUnitFormat",
      "type_short": "CodeUnitFormat",
      "constant_value": null
    },
    {
      "name": "options",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions",
      "type_short": "CodeUnitFormatOptions",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Default constructor using default format options",
      "javadoc": "Default constructor using default format options",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Format constructor.",
      "javadoc": "Format constructor.\n@param showBlockName whether or not to display block name;\n            {SHOW_BLOCKNAME_ALWAYS, SHOW_BLOCKNAME_NEVER,\n            SHOW_SEGMENT_NON_LOCAL}\n@param showNamespace if true display labels with their name-space path.",
      "static": false,
      "params": [
        {
          "name": "showBlockName",
          "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName",
          "type_short": "ShowBlockName",
          "comment": "whether or not to display block name;\n            {SHOW_BLOCKNAME_ALWAYS, SHOW_BLOCKNAME_NEVER,\n            SHOW_SEGMENT_NON_LOCAL}"
        },
        {
          "name": "showNamespace",
          "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions.ShowNamespace",
          "type_short": "ShowNamespace",
          "comment": "if true display labels with their name-space path."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Format constructor with more options. Extended reference mark-up is\n enabled.",
      "javadoc": "Format constructor with more options. Extended reference mark-up is\n enabled.\n@param options format options",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions",
          "type_short": "CodeUnitFormatOptions",
          "comment": "format options"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepresentationString",
      "comment": "Returns a formatted string representation of the specified code unit,\n including mnemonic and operand(s) only.",
      "javadoc": "Returns a formatted string representation of the specified code unit,\n including mnemonic and operand(s) only.\n@param cu code unit\n@return formatted code unit representation",
      "static": false,
      "params": [
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": "code unit"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "formatted code unit representation"
      },
      "throws": []
    },
    {
      "name": "getRepresentationString",
      "comment": "Returns a formatted string representation of the specified code unit\n mnemonic and operand(s).",
      "javadoc": "Returns a formatted string representation of the specified code unit\n mnemonic and operand(s).\n@param cu code unit\n@param includeEOLcomment if true EOL comment will be appended to code\n            unit representation\n@return formatted code unit representation",
      "static": false,
      "params": [
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": "code unit"
        },
        {
          "name": "includeEOLcomment",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true EOL comment will be appended to code\n            unit representation"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "formatted code unit representation"
      },
      "throws": []
    },
    {
      "name": "getMnemonicRepresentation",
      "comment": "Returns a formatted code unit mnemonic",
      "javadoc": "Returns a formatted code unit mnemonic\n@param cu code unit\n@return mnemonic representation",
      "static": false,
      "params": [
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": "code unit"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "mnemonic representation"
      },
      "throws": []
    },
    {
      "name": "getOperandRepresentationString",
      "comment": "Returns a formatted string representation of the specified code unit\n operand.",
      "javadoc": "Returns a formatted string representation of the specified code unit\n operand.\n@param cu code unit\n@param opIndex\n@return formatted code unit representation",
      "static": false,
      "params": [
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": "code unit"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "formatted code unit representation"
      },
      "throws": []
    },
    {
      "name": "getOperandRepresentationList",
      "comment": "Returns a formatted list of operand objects for the specified code unit\n operand. In the case of Data opIndex\u003d1, this will be a list containing a\n single String object (see getDataValueRepresentation(Data)). In the case\n of an Instruction, the list will contain a list of Objects, including any\n combination of Character, String, VariableOffset, Register, Address,\n Scalar, List, LabelString etc.. All objects returned must support the\n toString() method.",
      "javadoc": "Returns a formatted list of operand objects for the specified code unit\n operand. In the case of Data opIndex\u003d1, this will be a list containing a\n single String object (see getDataValueRepresentation(Data)). In the case\n of an Instruction, the list will contain a list of Objects, including any\n combination of Character, String, VariableOffset, Register, Address,\n Scalar, List, LabelString etc.. All objects returned must support the\n toString() method.\n@param cu code unit\n@param opIndex operand index\n@return list of representation objects or null for an unsupported\n         language.",
      "static": false,
      "params": [
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": "code unit"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.OperandRepresentationList",
        "type_short": "OperandRepresentationList",
        "comment": "list of representation objects or null for an unsupported\n         language."
      },
      "throws": []
    },
    {
      "name": "performRegisterMarkup",
      "comment": "Perform register markup with explicit and implied register variable\n reference.",
      "javadoc": "Perform register markup with explicit and implied register variable\n reference.\n@param inst instruction\n@param opIndex\n@param func function containing instruction\n@param primaryRef primary reference or null\n@param referencedVariable option variable referenced by primaryRef\n@param regIndexMap register index map\n@param representationList\n@return true if primaryRef was included in register mark-up",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "function containing instruction"
        },
        {
          "name": "primaryRef",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "primary reference or null"
        },
        {
          "name": "referencedVariable",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "option variable referenced by primaryRef"
        },
        {
          "name": "regIndexMap",
          "type_long": "java.util.HashMap\u003cghidra.program.model.lang.Register,java.lang.Integer\u003e",
          "type_short": "HashMap",
          "comment": "register index map"
        },
        {
          "name": "representationList",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if primaryRef was included in register mark-up"
      },
      "throws": []
    },
    {
      "name": "registersOverlap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg1",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "reg2",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasRegisterWriteReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "performExtendedMarkup",
      "comment": "If primaryRef is not already shown in other markup, add to end of operand\n representation.",
      "javadoc": "If primaryRef is not already shown in other markup, add to end of operand\n representation.\n@param instr instruction\n@param primaryRef primary reference or null\n@param referencedVariable optional variable corresponding to primaryRef\n@param representationList\n@return true if primaryRef was included in extended mark-up",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction"
        },
        {
          "name": "primaryRef",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "primary reference or null"
        },
        {
          "name": "referencedVariable",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "optional variable corresponding to primaryRef"
        },
        {
          "name": "representationList",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if primaryRef was included in extended mark-up"
      },
      "throws": []
    },
    {
      "name": "performAddressMarkup",
      "comment": "Attempt to markup any or all addresses contained within the\n representationList.",
      "javadoc": "Attempt to markup any or all addresses contained within the\n representationList.\n@param instr instruction\n@param opIndex operand index\n@param func function containing instruction\n@param primaryRef primary reference\n@param referencedVariable optional variable associated with reference\n@param regIndexMap register index map\n@param representationList\n@return true if primaryRef was included in scalar mark-up",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        },
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "function containing instruction"
        },
        {
          "name": "primaryRef",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "primary reference"
        },
        {
          "name": "representationList",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if primaryRef was included in scalar mark-up"
      },
      "throws": []
    },
    {
      "name": "performScalarMarkup",
      "comment": "Attempt to markup any or all Scalars contained within the\n representationList.",
      "javadoc": "Attempt to markup any or all Scalars contained within the\n representationList.\n@param inst instruction\n@param opIndex operand index\n@param function function containing instruction\n@param primaryRef primary reference\n@param referencedVariable optional variable associated with reference\n@param regIndexMap register index map\n@param representations\n@return true if primaryRef was included in scalar mark-up",
      "static": false,
      "params": [
        {
          "name": "inst",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index"
        },
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "function containing instruction"
        },
        {
          "name": "primaryRef",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "primary reference"
        },
        {
          "name": "referencedVariable",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "optional variable associated with reference"
        },
        {
          "name": "regIndexMap",
          "type_long": "java.util.Map\u003cghidra.program.model.lang.Register,java.lang.Integer\u003e",
          "type_short": "Map",
          "comment": "register index map"
        },
        {
          "name": "representations",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if primaryRef was included in scalar mark-up"
      },
      "throws": []
    },
    {
      "name": "markupAddressAsRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "primaryRef",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": ""
        },
        {
          "name": "representationList",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "addressIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupAddressAsScalar",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "primaryRef",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": ""
        },
        {
          "name": "representationList",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "addressIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupScalarWithImpliedRegisterVariable",
      "comment": "Markup scalar with implied register variable reference if one can be\n determined.",
      "javadoc": "Markup scalar with implied register variable reference if one can be\n determined.\n@param instr instruction\n@param func function containing instruction\n@param scalarToReplace\n@param scalarIndex index of scalarToReplace within representationList\n@param associatedRegister register associated with scalarToReplace via an\n            INT_ADD operation\n@param representationList",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "instruction"
        },
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "function containing instruction"
        },
        {
          "name": "scalarToReplace",
          "type_long": "ghidra.program.model.scalar.Scalar",
          "type_short": "Scalar",
          "comment": ""
        },
        {
          "name": "scalarIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of scalarToReplace within representationList"
        },
        {
          "name": "associatedRegister",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "register associated with scalarToReplace via an\n            INT_ADD operation"
        },
        {
          "name": "representationList",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeTypeDefs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupScalarWithEquate",
      "comment": "Markup scalar with equate if an appropriate one is contained within the\n specified equates list",
      "javadoc": "Markup scalar with equate if an appropriate one is contained within the\n specified equates list\n@param scalarToReplace\n@param scalarIndex index of scalarToReplace within representationList\n@param equates equates for the current code unit operand\n@param representationList\n@return true if scalar was replaced by equate",
      "static": false,
      "params": [
        {
          "name": "scalarToReplace",
          "type_long": "ghidra.program.model.scalar.Scalar",
          "type_short": "Scalar",
          "comment": ""
        },
        {
          "name": "scalarIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of scalarToReplace within representationList"
        },
        {
          "name": "equates",
          "type_long": "java.util.List\u003cghidra.program.model.symbol.Equate\u003e",
          "type_short": "List",
          "comment": "equates for the current code unit operand"
        },
        {
          "name": "representationList",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if scalar was replaced by equate"
      },
      "throws": []
    },
    {
      "name": "markupScalarWithMemoryReference",
      "comment": "",
      "javadoc": "@param instr\n@param scalarToReplace\n@param scalarIndex index of scalarToReplace within representationList\n@param primaryRef primary reference\n@param representationList\n@return true if primaryRef was included in scalar mark-up",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        },
        {
          "name": "scalarToReplace",
          "type_long": "ghidra.program.model.scalar.Scalar",
          "type_short": "Scalar",
          "comment": ""
        },
        {
          "name": "scalarIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of scalarToReplace within representationList"
        },
        {
          "name": "primaryRef",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "primary reference"
        },
        {
          "name": "representationList",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if primaryRef was included in scalar mark-up"
      },
      "throws": []
    },
    {
      "name": "markupScalarWithStackReference",
      "comment": "Markup scalar with stack variable/reference",
      "javadoc": "Markup scalar with stack variable/reference\n@param scalarToReplace\n@param scalarIndex index of scalarToReplace within representationList\n@param primaryRef stack reference\n@param referencedVariable referenced variable or null\n@param representationList\n@return true if primaryRef was included in scalar mark-up",
      "static": false,
      "params": [
        {
          "name": "scalarToReplace",
          "type_long": "ghidra.program.model.scalar.Scalar",
          "type_short": "Scalar",
          "comment": ""
        },
        {
          "name": "scalarIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of scalarToReplace within representationList"
        },
        {
          "name": "primaryRef",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "stack reference"
        },
        {
          "name": "referencedVariable",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "referenced variable or null"
        },
        {
          "name": "representationList",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if primaryRef was included in scalar mark-up"
      },
      "throws": []
    },
    {
      "name": "markupScalarWithReferencedRegisterVariable",
      "comment": "Markup scalar with register variable",
      "javadoc": "Markup scalar with register variable\n@param scalarToReplace\n@param scalarIndex index of scalarToReplace within representationList\n@param primaryReference primary reference\n@param referencedVariable referenced register variable (required)\n@param representationList\n@return true if primaryRef was included in scalar mark-up",
      "static": false,
      "params": [
        {
          "name": "scalarToReplace",
          "type_long": "ghidra.program.model.scalar.Scalar",
          "type_short": "Scalar",
          "comment": ""
        },
        {
          "name": "scalarIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of scalarToReplace within representationList"
        },
        {
          "name": "primaryReference",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "primary reference"
        },
        {
          "name": "referencedVariable",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "referenced register variable (required)"
        },
        {
          "name": "representationList",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if primaryRef was included in scalar mark-up"
      },
      "throws": []
    },
    {
      "name": "isRegisterAssociatedWithReferencedVariable",
      "comment": "Determine if the referencedVariable corresponds to the specified\n register.",
      "javadoc": "Determine if the referencedVariable corresponds to the specified\n register.\n@param variable\n@param register\n@return true if variable is a RegisterVariable corresponding to the\n         specified register.",
      "static": false,
      "params": [
        {
          "name": "variable",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": ""
        },
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if variable is a RegisterVariable corresponding to the\n         specified register."
      },
      "throws": []
    },
    {
      "name": "getRegisterIndexMap",
      "comment": "Build register index map based upon a raw operand representation list\n where the index corresponds to the index within the list.",
      "javadoc": "Build register index map based upon a raw operand representation list\n where the index corresponds to the index within the list.\n@param rawRepresentationList\n@return register index map",
      "static": false,
      "params": [
        {
          "name": "rawRepresentationList",
          "type_long": "java.util.List\u003cjava.lang.Object\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.HashMap\u003cghidra.program.model.lang.Register,java.lang.Integer\u003e",
        "type_short": "HashMap",
        "comment": "register index map"
      },
      "throws": []
    },
    {
      "name": "addScalarAdjustment",
      "comment": "Add scalar adjustment markup to the specified opObj. If the specified\n addr is a memory address and an adjustment is performed, the \"offset \"\n prefix will also be added to the modified opObj which is returned.",
      "javadoc": "Add scalar adjustment markup to the specified opObj. If the specified\n addr is a memory address and an adjustment is performed, the \"offset \"\n prefix will also be added to the modified opObj which is returned.\n@param opObj original sub-operand object\n@param addr reference address which corresponds to opObj\n@param originalScalar scalar which was replaced by opObj\n@param scalarOperand true if operand consists of single scalar only\n@return modified opObj with scalar adjustments reflected or null if\n         memory address requires excessive adjustment",
      "static": false,
      "params": [
        {
          "name": "opObj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "original sub-operand object"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "reference address which corresponds to opObj"
        },
        {
          "name": "originalScalar",
          "type_long": "ghidra.program.model.scalar.Scalar",
          "type_short": "Scalar",
          "comment": "scalar which was replaced by opObj"
        },
        {
          "name": "scalarOperand",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if operand consists of single scalar only"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "modified opObj with scalar adjustments reflected or null if\n         memory address requires excessive adjustment"
      },
      "throws": []
    },
    {
      "name": "isRead",
      "comment": "Determine if the specified register is read by the specified instruction.",
      "javadoc": "Determine if the specified register is read by the specified instruction.\n@param register\n@param instruction\n@return true if register is read",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if register is read"
      },
      "throws": []
    },
    {
      "name": "isWritten",
      "comment": "Determine if the specified register is written by the specified\n instruction.",
      "javadoc": "Determine if the specified register is written by the specified\n instruction.\n@param register\n@param instruction\n@return true if register is written",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if register is written"
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "Search for the register which has the specified address among register\n keys contained with in the regIndexMap.",
      "javadoc": "Search for the register which has the specified address among register\n keys contained with in the regIndexMap.\n@param addr register address\n@param regIndexMap register index map\n@return register matching register or null if not found.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "register address"
        },
        {
          "name": "regIndexMap",
          "type_long": "java.util.Map\u003cghidra.program.model.lang.Register,java.lang.Integer\u003e",
          "type_short": "Map",
          "comment": "register index map"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "register matching register or null if not found."
      },
      "throws": []
    },
    {
      "name": "findRegister",
      "comment": "Find a register varnode within a map keyed by acceptable register\n choices.",
      "javadoc": "Find a register varnode within a map keyed by acceptable register\n choices.\n@param v varnode\n@param regIndexMap register index map\n@return register which matches varnode, or null.",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "varnode"
        },
        {
          "name": "regIndexMap",
          "type_long": "java.util.Map\u003cghidra.program.model.lang.Register,java.lang.Integer\u003e",
          "type_short": "Map",
          "comment": "register index map"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "register which matches varnode, or null."
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "Check for value equality between a constant varnode and a scalar value.",
      "javadoc": "Check for value equality between a constant varnode and a scalar value.\n@param v constant varnode\n@param value scalar value\n@return true if values are equals",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "constant varnode"
        },
        {
          "name": "value",
          "type_long": "ghidra.program.model.scalar.Scalar",
          "type_short": "Scalar",
          "comment": "scalar value"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if values are equals"
      },
      "throws": []
    },
    {
      "name": "findAssociatedOperandRegister",
      "comment": "Find a register which has a direct association with the specified scalar\n via an INT_ADD p-code operation. Eligible registers are must be contained\n within the regIndexMap.",
      "javadoc": "Find a register which has a direct association with the specified scalar\n via an INT_ADD p-code operation. Eligible registers are must be contained\n within the regIndexMap.\n@param scalar\n@param regIndexMap registers appearing in operand representation\n@param pcode operand p-code\n@return associated register, or null if not found",
      "static": false,
      "params": [
        {
          "name": "scalar",
          "type_long": "ghidra.program.model.scalar.Scalar",
          "type_short": "Scalar",
          "comment": ""
        },
        {
          "name": "regIndexMap",
          "type_long": "java.util.Map\u003cghidra.program.model.lang.Register,java.lang.Integer\u003e",
          "type_short": "Map",
          "comment": "registers appearing in operand representation"
        },
        {
          "name": "pcode",
          "type_long": "ghidra.program.model.pcode.PcodeOp[]",
          "type_short": "ghidra.program.model.pcode.PcodeOp[]",
          "comment": "operand p-code"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "associated register, or null if not found"
      },
      "throws": []
    },
    {
      "name": "findEquate",
      "comment": "Search list of equates for scalar value match.",
      "javadoc": "Search list of equates for scalar value match.\n@param scalar\n@param equates list of equates\n@return equate which matches scalar value or null if not found.",
      "static": false,
      "params": [
        {
          "name": "scalar",
          "type_long": "ghidra.program.model.scalar.Scalar",
          "type_short": "Scalar",
          "comment": ""
        },
        {
          "name": "equates",
          "type_long": "java.util.List\u003cghidra.program.model.symbol.Equate\u003e",
          "type_short": "List",
          "comment": "list of equates"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Equate",
        "type_short": "Equate",
        "comment": "equate which matches scalar value or null if not found."
      },
      "throws": []
    },
    {
      "name": "getDataValueRepresentation",
      "comment": "Returns a formatted data value for the specified data unit. The return\n list will contain a single object which may be an instance of String,\n LabelString, Address, Scalar or Equate",
      "javadoc": "Returns a formatted data value for the specified data unit. The return\n list will contain a single object which may be an instance of String,\n LabelString, Address, Scalar or Equate\n@param data data unit\n@return representation list containing a single object.",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": "data unit"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.OperandRepresentationList",
        "type_short": "OperandRepresentationList",
        "comment": "representation list containing a single object."
      },
      "throws": []
    },
    {
      "name": "getDataValueRepresentationString",
      "comment": "Returns a formatted data value for the specified data unit.",
      "javadoc": "Returns a formatted data value for the specified data unit.\n@param data data unit\n@return data value string",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": "data unit"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "data value string"
      },
      "throws": []
    },
    {
      "name": "getVariableReferenceRepresentation",
      "comment": "Build a suitable variable or stack reference representation with optional\n scalar replacement.",
      "javadoc": "Build a suitable variable or stack reference representation with optional\n scalar replacement.\n@param ref variable reference\n@param var associated variable or null\n@param replacedScalar replaced scalar object or null\n@return representation object or null if var is null and ref is not a\n         stack reference.",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "variable reference"
        },
        {
          "name": "var",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "associated variable or null"
        },
        {
          "name": "replacedScalar",
          "type_long": "ghidra.program.model.scalar.Scalar",
          "type_short": "Scalar",
          "comment": "replaced scalar object or null"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "representation object or null if var is null and ref is not a\n         stack reference."
      },
      "throws": []
    },
    {
      "name": "getReferenceRepresentationString",
      "comment": "Returns a marked-up representation of the reference destination.",
      "javadoc": "Returns a marked-up representation of the reference destination.\n@param fromCodeUnit\n@param ref\n@return destination as a string or null if a suitable string could not be\n         produced.",
      "static": false,
      "params": [
        {
          "name": "fromCodeUnit",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": ""
        },
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "destination as a string or null if a suitable string could not be\n         produced."
      },
      "throws": []
    },
    {
      "name": "getReferenceRepresentation",
      "comment": "Get a representation object corresponding to the specified reference.\n Format options are considered when generating label.",
      "javadoc": "Get a representation object corresponding to the specified reference.\n Format options are considered when generating label.\n@param cu\n@param ref\n@param var variable which corresponds to reference or null\n@param showIndirectValue if true, indirect memory references which refer\n            to a pointer will get an additional \"\u003dvalue\" appended where\n            value corresponds to data pointed to by the referenced\n            pointer.\n@return reference representation object",
      "static": false,
      "params": [
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": ""
        },
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": ""
        },
        {
          "name": "var",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "variable which corresponds to reference or null"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "reference representation object"
      },
      "throws": []
    },
    {
      "name": "getMemoryReferenceLabel",
      "comment": "Get a LabelString object which corresponds to the specified memory\n reference from the specified code unit. Format options are considered\n when generating label.",
      "javadoc": "Get a LabelString object which corresponds to the specified memory\n reference from the specified code unit. Format options are considered\n when generating label.\n@param fromCodeUnit code unit\n@param ref memory reference\n@return LabelString representation object",
      "static": false,
      "params": [
        {
          "name": "fromCodeUnit",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": "code unit"
        },
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "memory reference"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "LabelString representation object"
      },
      "throws": []
    },
    {
      "name": "getExtendedPointerReferenceMarkup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.LabelString",
        "type_short": "LabelString",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addBlockName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "toAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "refBlock",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": ""
        },
        {
          "name": "withBlockName",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addNamespace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "parentNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "markupAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbolLabelString",
      "comment": "Generate a string for the given symbol, accounting for offcut situations.",
      "javadoc": "Generate a string for the given symbol, accounting for offcut situations.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        },
        {
          "name": "markupAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isStringData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLabelStringForStringData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": ""
        },
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOffcutLabelString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offcutAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOffcut",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOffcutDataString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offcutAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "data",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOffcutLabelStringForInstruction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offcutAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "instruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addOffcutInformation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "prefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "addressString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "diff",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "decorate",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrefixForStringData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": ""
        },
        {
          "name": "dataAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "diff",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultOffcutString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        },
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": ""
        },
        {
          "name": "diff",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "decorate",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getShowBlockName",
      "comment": "Returns ShowBlockName setting",
      "javadoc": "Returns ShowBlockName setting",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName",
        "type_short": "ShowBlockName",
        "comment": ""
      },
      "throws": []
    }
  ]
}
