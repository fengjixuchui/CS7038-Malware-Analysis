{
  "name": "ProgramUserData",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.framework.model.UserData"
  ],
  "fields": [],
  "methods": [
    {
      "name": "startTransaction",
      "comment": "Start a transaction prior to changing any properties",
      "javadoc": "Start a transaction prior to changing any properties\n@return transaction ID needed for endTransaction",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "transaction ID needed for endTransaction"
      },
      "throws": []
    },
    {
      "name": "endTransaction",
      "comment": "End a previously started transaction",
      "javadoc": "End a previously started transaction\n@param transactionID",
      "static": false,
      "params": [
        {
          "name": "transactionID",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStringProperty",
      "comment": "Get a address-based String property map",
      "javadoc": "Get a address-based String property map\n@param owner name of property owner (e.g., plugin name)\n@param propertyName\n@param create creates the property map if it does not exist\n@return property map\n@throws PropertyTypeMismatchException if a conflicting map definition was found",
      "static": false,
      "params": [
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of property owner (e.g., plugin name)"
        },
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "creates the property map if it does not exist"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.StringPropertyMap",
        "type_short": "StringPropertyMap",
        "comment": "property map"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.PropertyTypeMismatchException",
          "type_short": "PropertyTypeMismatchException",
          "comment": "if a conflicting map definition was found"
        }
      ]
    },
    {
      "name": "getLongProperty",
      "comment": "Get a address-based Long property map",
      "javadoc": "Get a address-based Long property map\n@param owner name of property owner (e.g., plugin name)\n@param propertyName\n@param create creates the property map if it does not exist\n@return property map\n@throws PropertyTypeMismatchException if a conflicting map definition was found",
      "static": false,
      "params": [
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of property owner (e.g., plugin name)"
        },
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "creates the property map if it does not exist"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.LongPropertyMap",
        "type_short": "LongPropertyMap",
        "comment": "property map"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.PropertyTypeMismatchException",
          "type_short": "PropertyTypeMismatchException",
          "comment": "if a conflicting map definition was found"
        }
      ]
    },
    {
      "name": "getIntProperty",
      "comment": "Get a address-based Integer property map",
      "javadoc": "Get a address-based Integer property map\n@param owner name of property owner (e.g., plugin name)\n@param propertyName\n@param create creates the property map if it does not exist\n@return property map\n@throws PropertyTypeMismatchException if a conflicting map definition was found",
      "static": false,
      "params": [
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of property owner (e.g., plugin name)"
        },
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "creates the property map if it does not exist"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.IntPropertyMap",
        "type_short": "IntPropertyMap",
        "comment": "property map"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.PropertyTypeMismatchException",
          "type_short": "PropertyTypeMismatchException",
          "comment": "if a conflicting map definition was found"
        }
      ]
    },
    {
      "name": "getBooleanProperty",
      "comment": "Get a address-based Boolean property map",
      "javadoc": "Get a address-based Boolean property map\n@param owner name of property owner (e.g., plugin name)\n@param propertyName\n@param create creates the property map if it does not exist\n@return property map\n@throws PropertyTypeMismatchException if a conflicting map definition was found",
      "static": false,
      "params": [
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of property owner (e.g., plugin name)"
        },
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "creates the property map if it does not exist"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.VoidPropertyMap",
        "type_short": "VoidPropertyMap",
        "comment": "property map"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.PropertyTypeMismatchException",
          "type_short": "PropertyTypeMismatchException",
          "comment": "if a conflicting map definition was found"
        }
      ]
    },
    {
      "name": "getObjectProperty",
      "comment": "Get a address-based Saveable-object property map",
      "javadoc": "Get a address-based Saveable-object property map\n@param owner name of property owner (e.g., plugin name)\n@param propertyName\n@param create creates the property map if it does not exist\n@return property map\n@throws PropertyTypeMismatchException if a conflicting map definition was found",
      "static": false,
      "params": [
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of property owner (e.g., plugin name)"
        },
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "saveableObjectClass",
          "type_long": "java.lang.Class\u003c? extends ghidra.util.Saveable\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "creates the property map if it does not exist"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.ObjectPropertyMap",
        "type_short": "ObjectPropertyMap",
        "comment": "property map"
      },
      "throws": []
    },
    {
      "name": "getProperties",
      "comment": "Get all property maps associated with a specific owner.",
      "javadoc": "Get all property maps associated with a specific owner.\n@param owner name of property owner (e.g., plugin name)\n@return list of property maps",
      "static": false,
      "params": [
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of property owner (e.g., plugin name)"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.util.PropertyMap\u003e",
        "type_short": "List",
        "comment": "list of property maps"
      },
      "throws": []
    },
    {
      "name": "getPropertyOwners",
      "comment": "Returns list of all property owners for which property maps have been defined.",
      "javadoc": "Returns list of all property owners for which property maps have been defined.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOptionsNames",
      "comment": "Returns all properties lists contained by this domain object.",
      "javadoc": "Returns all properties lists contained by this domain object.\n@return all property lists contained by this domain object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "all property lists contained by this domain object."
      },
      "throws": []
    },
    {
      "name": "getOptions",
      "comment": "Get the property list for the given name.",
      "javadoc": "Get the property list for the given name.\n@param propertyListName name of property list",
      "static": false,
      "params": [
        {
          "name": "propertyListName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of property list"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.options.Options",
        "type_short": "Options",
        "comment": ""
      },
      "throws": []
    }
  ]
}
