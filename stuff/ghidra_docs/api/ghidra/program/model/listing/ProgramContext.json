{
  "name": "ProgramContext",
  "comment": "Interface to define a processor register context over the address space.",
  "javadoc": "Interface to define a processor register context over the address space.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "hasNonFlowingContext",
      "comment": "",
      "javadoc": "@return true if one or more non-flowing context registers fields\n have been defined within the base processor context register.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if one or more non-flowing context registers fields\n have been defined within the base processor context register."
      },
      "throws": []
    },
    {
      "name": "getFlowValue",
      "comment": "Modify register value to eliminate non-flowing bits",
      "javadoc": "Modify register value to eliminate non-flowing bits\n@param value register value to be modified\n@return value suitable for flowing",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": "register value to be modified"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": "value suitable for flowing"
      },
      "throws": []
    },
    {
      "name": "getNonFlowValue",
      "comment": "Modify register value to only include non-flowing bits",
      "javadoc": "Modify register value to only include non-flowing bits\n@param value register value to be modified\n@return new value or null",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": "register value to be modified"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": "new value or null"
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "Get a Register object given the name of a register",
      "javadoc": "Get a Register object given the name of a register\n@param name the name of the register.\n@return The register with the given name or null if no register has that name.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the register."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "The register with the given name or null if no register has that name."
      },
      "throws": []
    },
    {
      "name": "getRegisters",
      "comment": "Get all the register descriptions defined for this program context.",
      "javadoc": "Get all the register descriptions defined for this program context.\n@return unmodifiable list of defined register descriptions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
        "type_short": "List",
        "comment": "unmodifiable list of defined register descriptions"
      },
      "throws": []
    },
    {
      "name": "getRegistersWithValues",
      "comment": "Returns an array of all registers that at least one value associated with an address.",
      "javadoc": "Returns an array of all registers that at least one value associated with an address.\n@return a array of all registers that at least one value associated with an address.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Register[]",
        "type_short": "ghidra.program.model.lang.Register[]",
        "comment": "a array of all registers that at least one value associated with an address."
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "Returns the value assigned to a register at a given address.  This method will return any\n default value assigned to the register at the given address if no explicit value has been set\n at that address.",
      "javadoc": "Returns the value assigned to a register at a given address.  This method will return any\n default value assigned to the register at the given address if no explicit value has been set\n at that address.\n@param register the register for which to get its value.\n@param address the address at which to get a value.\n@param signed if true, interprets the fix-bit size register value as a signed value.\n@return a BigInteger object containing the value of the registe at the given address or null\n if no value has been assigned.",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register for which to get its value."
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to get a value."
        },
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, interprets the fix-bit size register value as a signed value."
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": "a BigInteger object containing the value of the registe at the given address or null\n if no value has been assigned."
      },
      "throws": []
    },
    {
      "name": "getRegisterValue",
      "comment": "Returns a register value and mask for the given register.",
      "javadoc": "Returns a register value and mask for the given register.\n@param register the register\n@param address the address of the value\n@return a register value and mask for the given register",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the value"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": "a register value and mask for the given register"
      },
      "throws": []
    },
    {
      "name": "setRegisterValue",
      "comment": "Sets the register context over the given range to the given value.",
      "javadoc": "Sets the register context over the given range to the given value.\n@param start the start address to set values\n@param end the end address to set values\n@param value the actual values to store at address\n@throws ContextChangeException if failed to modifiy context across specified range \n (e.g., instruction exists).",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address to set values"
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end address to set values"
        },
        {
          "name": "value",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": "the actual values to store at address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.listing.ContextChangeException",
          "type_short": "ContextChangeException",
          "comment": "if failed to modifiy context across specified range \n (e.g., instruction exists)."
        }
      ]
    },
    {
      "name": "getNonDefaultValue",
      "comment": "Returns the (non-default)value assigned to a register at a given address.",
      "javadoc": "Returns the (non-default)value assigned to a register at a given address.\n@param register the register for which to get its value.\n@param address the address at which to get a value.\n@return a RegisterValue object containing the value of the register at the given address or \n possibly null if no value has been assigned.",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register for which to get its value."
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to get a value."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": "a RegisterValue object containing the value of the register at the given address or \n possibly null if no value has been assigned."
      },
      "throws": []
    },
    {
      "name": "setValue",
      "comment": "Associates a value with a register over a given address range. Any previous values will be\n overwritten.",
      "javadoc": "Associates a value with a register over a given address range. Any previous values will be\n overwritten.\n@param register the register for which to assign a value.\n@param start the start address.\n@param end the end address (inclusive).\n@param value the value to assign.  A value of null will effective clear any existing values.\n@throws ContextChangeException if failed to modifiy context across specified range \n (e.g., instruction exists).",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register for which to assign a value."
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end address (inclusive)."
        },
        {
          "name": "value",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "the value to assign.  A value of null will effective clear any existing values."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.listing.ContextChangeException",
          "type_short": "ContextChangeException",
          "comment": "if failed to modifiy context across specified range \n (e.g., instruction exists)."
        }
      ]
    },
    {
      "name": "getRegisterValueAddressRanges",
      "comment": "Returns an AddressRangeIterator over all addresses that have an associated value for the given \n register.  Each range returned will have the same value associated with the register for all \n addresses in that range.",
      "javadoc": "Returns an AddressRangeIterator over all addresses that have an associated value for the given \n register.  Each range returned will have the same value associated with the register for all \n addresses in that range.\n@param register the register for which to get set value ranges.\n@return An AddressRangeIterator over all address that have values for the given register.",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register for which to get set value ranges."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRangeIterator",
        "type_short": "AddressRangeIterator",
        "comment": "An AddressRangeIterator over all address that have values for the given register."
      },
      "throws": []
    },
    {
      "name": "getRegisterValueAddressRanges",
      "comment": "Returns an AddressRangeIterator over all addresses that have an associated value within the\n given range for the given register.  Each range returned will have the same value\n associated with the register for all addresses in that range.",
      "javadoc": "Returns an AddressRangeIterator over all addresses that have an associated value within the\n given range for the given register.  Each range returned will have the same value\n associated with the register for all addresses in that range.\n@param register the register for which to get set value ranges.\n@param start start of address range to search\n@param end end of address range to search\n@return An AddressRangeIterator over all address within the given range that have values\n  for the given register.",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register for which to get set value ranges."
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "start of address range to search"
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "end of address range to search"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRangeIterator",
        "type_short": "AddressRangeIterator",
        "comment": "An AddressRangeIterator over all address within the given range that have values\n  for the given register."
      },
      "throws": []
    },
    {
      "name": "getRegisterValueRangeContaining",
      "comment": "Returns the bounding address-range containing addr and the the same RegisterValue throughout.\n The range returned may be limited by other value changes associated with register\u0027s base-register.",
      "javadoc": "Returns the bounding address-range containing addr and the the same RegisterValue throughout.\n The range returned may be limited by other value changes associated with register\u0027s base-register.\n@param register program register\n@param addr program address\n@return single register-value address-range containing addr",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "program register"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "program address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": "single register-value address-range containing addr"
      },
      "throws": []
    },
    {
      "name": "getDefaultRegisterValueAddressRanges",
      "comment": "Returns an AddressRangeIterator over all addresses that have an associated default value for the given \n register.  Each range returned will have the same default value associated with the register for all \n addresses in that range.",
      "javadoc": "Returns an AddressRangeIterator over all addresses that have an associated default value for the given \n register.  Each range returned will have the same default value associated with the register for all \n addresses in that range.\n@param register the register for which to get set default value ranges.\n@return An AddressRangeIterator over all address that have default values for the given register.",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register for which to get set default value ranges."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRangeIterator",
        "type_short": "AddressRangeIterator",
        "comment": "An AddressRangeIterator over all address that have default values for the given register."
      },
      "throws": []
    },
    {
      "name": "getDefaultRegisterValueAddressRanges",
      "comment": "Returns an AddressRangeIterator over all addresses that have an associated default value within the\n given range for the given register.  Each range returned will have the same default value\n associated with the register for all addresses in that range.",
      "javadoc": "Returns an AddressRangeIterator over all addresses that have an associated default value within the\n given range for the given register.  Each range returned will have the same default value\n associated with the register for all addresses in that range.\n@param register the register for which to get default value ranges.\n@param start start of address range to search\n@param end end of address range to search\n@return An AddressRangeIterator over all address within the given range that have default values\n  for the given register.",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register for which to get default value ranges."
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "start of address range to search"
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "end of address range to search"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRangeIterator",
        "type_short": "AddressRangeIterator",
        "comment": "An AddressRangeIterator over all address within the given range that have default values\n  for the given register."
      },
      "throws": []
    },
    {
      "name": "getContextRegisters",
      "comment": "Gets the registers for this context that are used for processor context states.",
      "javadoc": "Gets the registers for this context that are used for processor context states.\n@return all processor context registers",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
        "type_short": "List",
        "comment": "all processor context registers"
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Remove (unset) the register values for a given address range.",
      "javadoc": "Remove (unset) the register values for a given address range.\n@param start starting address.\n@param end ending adddress.\n@param register handle to the register to be set.\n@throws ContextChangeException thrown if context change not permitted over specified \n range (e.g., instructions exist)",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "starting address."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "ending adddress."
        },
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "handle to the register to be set."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.listing.ContextChangeException",
          "type_short": "ContextChangeException",
          "comment": "thrown if context change not permitted over specified \n range (e.g., instructions exist)"
        }
      ]
    },
    {
      "name": "getRegisterNames",
      "comment": "Get an alphabetical sorted unmodifiable list of original register names \n (including context registers).  Names correspond to orignal register\n name and not aliases which may be defined.",
      "javadoc": "Get an alphabetical sorted unmodifiable list of original register names \n (including context registers).  Names correspond to orignal register\n name and not aliases which may be defined.\n@return alphabetical sorted unmodifiable list of original register names.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "alphabetical sorted unmodifiable list of original register names."
      },
      "throws": []
    },
    {
      "name": "hasValueOverRange",
      "comment": "Returns true if the given register has the value over the addressSet",
      "javadoc": "Returns true if the given register has the value over the addressSet\n@param reg the register whose value is to be tested.\n@param value the value to test for.\n@param addrSet the set of addresses to test\n@return true if every address in the addrSet has the value.",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register whose value is to be tested."
        },
        {
          "name": "value",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "the value to test for."
        },
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the set of addresses to test"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if every address in the addrSet has the value."
      },
      "throws": []
    },
    {
      "name": "getDefaultValue",
      "comment": "Returns the default value of a register at a given address.",
      "javadoc": "Returns the default value of a register at a given address.\n@param register the register for which to get a default value.\n@param address the address at which to get a default value.\n@return the default value of the register at the given address or null if no default value\n has been assigned.",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register for which to get a default value."
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to get a default value."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": "the default value of the register at the given address or null if no default value\n has been assigned."
      },
      "throws": []
    },
    {
      "name": "getBaseContextRegister",
      "comment": "Returns the base context register.",
      "javadoc": "Returns the base context register.\n@return the base context register.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "the base context register."
      },
      "throws": []
    },
    {
      "name": "getDefaultDisassemblyContext",
      "comment": "",
      "javadoc": "@return Get the current default disassembly context to be used when initiating disassmbly",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": "Get the current default disassembly context to be used when initiating disassmbly"
      },
      "throws": []
    },
    {
      "name": "setDefaultDisassemblyContext",
      "comment": "Set the initial disassembly context to be used when initiating disassmbly",
      "javadoc": "Set the initial disassembly context to be used when initiating disassmbly\n@param value context register value",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": "context register value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDisassemblyContext",
      "comment": "Get the disassembly context for a specified address.  This context is formed\n from the default disassembly context and the context register value stored\n at the specified address.  Those bits specified by the stored context value\n take precedence.",
      "javadoc": "Get the disassembly context for a specified address.  This context is formed\n from the default disassembly context and the context register value stored\n at the specified address.  Those bits specified by the stored context value\n take precedence.\n@param address program address\n@return disassembly context register value",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "program address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": "disassembly context register value"
      },
      "throws": []
    }
  ]
}
