{
  "name": "VariableOffset",
  "comment": "VariableOffset can be used as an operand or sub-operand representation\n object.  The toString() method should be used to obtain the displayable representation\n string.  This object is intended to correspond to a explicit or implicit register/stack \n variable reference.  If an offset other than 0 is specified, the original Scalar should\n be specified.",
  "javadoc": "\u003ccode\u003eVariableOffset\u003c/code\u003e can be used as an operand or sub-operand representation\n object.  The toString() method should be used to obtain the displayable representation\n string.  This object is intended to correspond to a explicit or implicit register/stack \n variable reference.  If an offset other than 0 is specified, the original Scalar should\n be specified.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "variable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Variable",
      "type_short": "Variable",
      "constant_value": null
    },
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "indirect",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "dataAccess",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "replacedElement",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Object",
      "type_short": "Object",
      "constant_value": null
    },
    {
      "name": "includeScalarAdjustment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for an implied variable reference.",
      "javadoc": "Constructor for an implied variable reference.\n@param variable function variable\n@param offset offset into variable\n@param indirect if true and variable data-type is a pointer, the offset \n is relative to underlying data-type of the pointer-type.  This should generally be\n true for register use which would contain a structure pointer not a structure instance,\n whereas it would be false for stack-references.\n@param dataAccess true if content of variable is being read and/or written",
      "static": false,
      "params": [
        {
          "name": "variable",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "function variable"
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "offset into variable"
        },
        {
          "name": "indirect",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true and variable data-type is a pointer, the offset \n is relative to underlying data-type of the pointer-type.  This should generally be\n true for register use which would contain a structure pointer not a structure instance,\n whereas it would be false for stack-references."
        },
        {
          "name": "dataAccess",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if content of variable is being read and/or written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for an explicit variable reference.",
      "javadoc": "Constructor for an explicit variable reference.\n@param ref the reference\n@param var the variable being referenced",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": "the reference"
        },
        {
          "name": "var",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "the variable being referenced"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setReplacedElement",
      "comment": "Sets the original replaced sub-operand Scalar.",
      "javadoc": "Sets the original replaced sub-operand Scalar.\n@param s scalar\n@param includeScalarAdjustment if true scalar adjustment will be included \n with object list or string representation",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.scalar.Scalar",
          "type_short": "Scalar",
          "comment": "scalar"
        },
        {
          "name": "includeScalarAdjustment",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true scalar adjustment will be included \n with object list or string representation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setReplacedElement",
      "comment": "Sets the original replaced sub-operand Register.",
      "javadoc": "Sets the original replaced sub-operand Register.",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReplacedElement",
      "comment": "Returns the Scalar or Register sub-operand replaced by this VariableOffset object.",
      "javadoc": "Returns the Scalar or Register sub-operand replaced by this VariableOffset object.\n@return object or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "object or null"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "@see java.lang.Object#toString()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTypeDisplayText",
      "comment": "Returns the data type access portion of this variable offset as a string",
      "javadoc": "Returns the data type access portion of this variable offset as a string\n@return the text",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the text"
      },
      "throws": []
    },
    {
      "name": "getObjects",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "showScalarAdjustment",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.Object\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getObjects",
      "comment": "Get list of markup objects",
      "javadoc": "Get list of markup objects\n@return list of markup objects",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.Object\u003e",
        "type_short": "List",
        "comment": "list of markup objects"
      },
      "throws": []
    },
    {
      "name": "getVariable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable",
        "type_short": "Variable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isIndirect",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isDataAccess",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
