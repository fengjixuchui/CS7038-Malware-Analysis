{
  "name": "WrappedMemBuffer",
  "comment": "WrappedMemBuffer implements a MemBuffer that provides a zero based index\n on top of an underlying membuffer with at a given address.  It can buffer N bytes\n at time using the constructor that takes a cache size.  However the default\n is to provide no buffering.  Use of the buffer can\n reduce the overall number of calls to Memory, greatly reducing\n the overhead of various error checks.  This implementation will not wrap\n if the end of the memory space is encountered.\n \n The #getByte(int), #getBytes(byte[], int) methods can cause the bytes in the\n buffer cache if the request is outside of the current cached bytes.\n \n WARNING: The underlying MemBuffer should not change its base address. Using a\n mutable MemBuffer can cause problematic behavior if not controlled carefully.\n \n WARNING: Not thread-safe.",
  "javadoc": "WrappedMemBuffer implements a MemBuffer that provides a zero based index\n on top of an underlying membuffer with at a given address.  It can buffer N bytes\n at time using the constructor that takes a cache size.  However the default\n is to provide no buffering.  Use of the buffer can\n reduce the overall number of calls to Memory, greatly reducing\n the overhead of various error checks.  This implementation will not wrap\n if the end of the memory space is encountered.\n \n The {@link #getByte(int)}, {@link #getBytes(byte[], int)} methods can cause the bytes in the\n buffer cache if the request is outside of the current cached bytes.\n \n WARNING: The underlying MemBuffer should not change its base address. Using a\n mutable MemBuffer can cause problematic behavior if not controlled carefully.\n \n WARNING: Not thread-safe.",
  "static": false,
  "implements": [
    "ghidra.program.model.mem.MemBuffer"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "converter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.GhidraDataConverter",
      "type_short": "GhidraDataConverter",
      "constant_value": null
    },
    {
      "name": "memBuffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.mem.MemBuffer",
      "type_short": "MemBuffer",
      "constant_value": null
    },
    {
      "name": "baseOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "address",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "DEFAULT_BUFSIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "buffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "minOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "maxOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a wrapped MemBuffer with an adjustable base offset",
      "javadoc": "Construct a wrapped MemBuffer with an adjustable base offset\n@param buf memory buffer\n@param baseOffset offset relative to the underlying buffer\u0027s start address\n               (addr + baseOffset) will be the 0 index into this buffer\n@throws AddressOutOfBoundsException",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "memory buffer"
        },
        {
          "name": "baseOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset relative to the underlying buffer\u0027s start address\n               (addr + baseOffset) will be the 0 index into this buffer"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOutOfBoundsException",
          "type_short": "AddressOutOfBoundsException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a wrapped MemBuffer with an adjustable base offset",
      "javadoc": "Construct a wrapped MemBuffer with an adjustable base offset\n@param buf memory buffer\n@param bufferSize size of cache buffer - specify 0 for no buffering\n@param baseOffset offset relative to the underlying buffer\u0027s start address\n               (addr + baseOffset) will be the 0 index into this buffer\n@throws AddressOutOfBoundsException",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "memory buffer"
        },
        {
          "name": "bufferSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of cache buffer - specify 0 for no buffering"
        },
        {
          "name": "baseOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset relative to the underlying buffer\u0027s start address\n               (addr + baseOffset) will be the 0 index into this buffer"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOutOfBoundsException",
          "type_short": "AddressOutOfBoundsException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setBaseOffset",
      "comment": "Set new base offset relative to the associated MemBuffer\u0027s address",
      "javadoc": "Set new base offset relative to the associated MemBuffer\u0027s address\n@param offset new base offset of this buffer\n@throws AddressOutOfBoundsException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "new base offset of this buffer"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOutOfBoundsException",
          "type_short": "AddressOutOfBoundsException",
          "comment": ""
        }
      ]
    },
    {
      "name": "computeOffset",
      "comment": "Compute offset into original memBuffer, making sure the offset doesn\u0027t wrap",
      "javadoc": "Compute offset into original memBuffer, making sure the offset doesn\u0027t wrap\n@param offset the offset relative to the baseOffset.\n@return the offset relative to the original memBuffer.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset relative to the baseOffset."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the offset relative to the original memBuffer."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getByte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fillBuffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getMemory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.mem.Memory",
        "type_short": "Memory",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isBigEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getShort",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getInt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getLong",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBigInteger",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    }
  ]
}
