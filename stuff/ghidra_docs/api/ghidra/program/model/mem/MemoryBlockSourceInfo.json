{
  "name": "MemoryBlockSourceInfo",
  "comment": "Describes the source of bytes for a memory block.",
  "javadoc": "Describes the source of bytes for a memory block.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getLength",
      "comment": "Returns the length of this block byte source.",
      "javadoc": "Returns the length of this block byte source.\n@return the length of this block byte source.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the length of this block byte source."
      },
      "throws": []
    },
    {
      "name": "getMinAddress",
      "comment": "Returns the start address where this byte source is mapped.",
      "javadoc": "Returns the start address where this byte source is mapped.\n@return the start address where this byte source is mapped.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the start address where this byte source is mapped."
      },
      "throws": []
    },
    {
      "name": "getMaxAddress",
      "comment": "Returns the end address where this byte source is mapped.",
      "javadoc": "Returns the end address where this byte source is mapped.\n@return the end address where this byte source is mapped.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the end address where this byte source is mapped."
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "Returns a description of this SourceInfo object.",
      "javadoc": "Returns a description of this SourceInfo object.\n@return a description of this SourceInfo object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a description of this SourceInfo object."
      },
      "throws": []
    },
    {
      "name": "getFileBytes",
      "comment": "Returns an Optional FileBytes object if a FileBytes object is the byte\n source for this SourceInfo.  Otherwise, the Optional will be empty.",
      "javadoc": "Returns an {@link Optional} {@link FileBytes} object if a FileBytes object is the byte\n source for this SourceInfo.  Otherwise, the Optional will be empty.\n@return the {@link FileBytes} object if it is the byte source for this section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Optional\u003cghidra.program.database.mem.FileBytes\u003e",
        "type_short": "Optional",
        "comment": "the FileBytes object if it is the byte source for this section"
      },
      "throws": []
    },
    {
      "name": "getFileBytesOffset",
      "comment": "Returns the offset into the underlying FileBytes object where this sub-block \n starts getting its bytes from or -1 if this sub-block does not have an associated FileBytes\n or a complex bit/byte-mapping is used.",
      "javadoc": "Returns the offset into the underlying {@link FileBytes} object where this sub-block \n starts getting its bytes from or -1 if this sub-block does not have an associated {@link FileBytes}\n or a complex bit/byte-mapping is used.\n@return the offset into the {@link FileBytes} object where this section starts getting its bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the offset into the FileBytes object where this section starts getting its bytes."
      },
      "throws": []
    },
    {
      "name": "getFileBytesOffset",
      "comment": "Returns the offset into the FileBytes object for the given address or\n -1 if this sub-block if address is out of range or this sub-block does not have \n an associated FileBytes, or a complex bit/byte-mapping is used.",
      "javadoc": "Returns the offset into the {@link FileBytes} object for the given address or\n -1 if this sub-block if address is out of range or this sub-block does not have \n an associated {@link FileBytes}, or a complex bit/byte-mapping is used.\n@param address the address for which to get an offset into the {@link FileBytes} object.\n@return the offset into the {@link FileBytes} object for the given address.",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address for which to get an offset into the FileBytes object."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the offset into the FileBytes object for the given address."
      },
      "throws": []
    },
    {
      "name": "getMappedRange",
      "comment": "Returns an Optional AddressRange for the mapped addresses if this is a mapped\n memory block (bit mapped or byte mapped). Otherwise, the Optional is empty.",
      "javadoc": "Returns an {@link Optional} {@link AddressRange} for the mapped addresses if this is a mapped\n memory block (bit mapped or byte mapped). Otherwise, the Optional is empty.\n@return an {@link Optional} {@link AddressRange} for the mapped addresses if this is a mapped\n memory block",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Optional\u003cghidra.program.model.address.AddressRange\u003e",
        "type_short": "Optional",
        "comment": "an Optional AddressRange for the mapped addresses if this is a mapped\n memory block"
      },
      "throws": []
    },
    {
      "name": "getByteMappingScheme",
      "comment": "Returns an Optional ByteMappingScheme employed if this is a byte-mapped \n memory block.  Otherwise, the Optional is empty.",
      "javadoc": "Returns an {@link Optional} {@link ByteMappingScheme} employed if this is a byte-mapped \n memory block.  Otherwise, the Optional is empty.\n@return an {@link Optional} {@link ByteMappingScheme} employed if this is a byte-mapped memory block.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Optional\u003cghidra.program.database.mem.ByteMappingScheme\u003e",
        "type_short": "Optional",
        "comment": "an Optional ByteMappingScheme employed if this is a byte-mapped memory block."
      },
      "throws": []
    },
    {
      "name": "getMemoryBlock",
      "comment": "Returns the containing Memory Block",
      "javadoc": "Returns the containing Memory Block\n@return the containing Memory Block",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.mem.MemoryBlock",
        "type_short": "MemoryBlock",
        "comment": "the containing Memory Block"
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Returns true if this SourceInfo object applies to the given address;",
      "javadoc": "Returns true if this SourceInfo object applies to the given address;\n@param address the address to test if this is its SourceInfo\n@return true if this SourceInfo object applies to the given address;",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to test if this is its SourceInfo"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this SourceInfo object applies to the given address;"
      },
      "throws": []
    },
    {
      "name": "containsFileOffset",
      "comment": "Determine if this block source contains the specified file offset.",
      "javadoc": "Determine if this block source contains the specified file offset.\n@param fileOffset file offset within underlying FileBytes (if applicable) within the loaded \n   range associated with this source info.\n@return true if file offset is within the loaded range of the corresponding FileBytes, else \n   false if method is not supported by the sub-block type (e.g., bit/byte-mapped sub-block).",
      "static": false,
      "params": [
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "file offset within underlying FileBytes (if applicable) within the loaded \n   range associated with this source info."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if file offset is within the loaded range of the corresponding FileBytes, else \n   false if method is not supported by the sub-block type (e.g., bit/byte-mapped sub-block)."
      },
      "throws": []
    },
    {
      "name": "locateAddressForFileOffset",
      "comment": "Get the Address within this sub-block which corresponds to the specified file offset.",
      "javadoc": "Get the Address within this sub-block which corresponds to the specified file offset.\n@param fileOffset file offset\n@return {@link Address} within this sub-block or null if file offset is out of range\n or method is not supported by the sub-block type (e.g., bit/byte-mapped sub-block).",
      "static": false,
      "params": [
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "file offset"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address within this sub-block or null if file offset is out of range\n or method is not supported by the sub-block type (e.g., bit/byte-mapped sub-block)."
      },
      "throws": []
    }
  ]
}
