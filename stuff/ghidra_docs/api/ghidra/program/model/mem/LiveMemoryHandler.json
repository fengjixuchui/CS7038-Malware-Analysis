{
  "name": "LiveMemoryHandler",
  "comment": "Live memory handler interface.",
  "javadoc": "Live memory handler interface.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "clearCache",
      "comment": "Called when the memory map is re-initializing. Usually after an undo or redo.",
      "javadoc": "Called when the memory map is re-initializing. Usually after an undo or redo.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getByte",
      "comment": "Gets the byte at the given address.",
      "javadoc": "Gets the byte at the given address.\n@param addr the address of the byte to be retrieved\n@return the byte at the given address.\n@throws MemoryAccessException if the byte can\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the byte to be retrieved"
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the byte at the given address."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the byte can\u0027t be read."
        }
      ]
    },
    {
      "name": "getBytes",
      "comment": "Get the bytes at the given address and size and put them into the destination buffer.",
      "javadoc": "Get the bytes at the given address and size and put them into the destination buffer.\n@param address the address of the first byte to be retrieved.\n@param buffer the byte buffer in which to place the bytes.\n@param startIndex the starting index in the buffer to put the first byte.\n@param size the number of bytes to retrieve and put in the buffer.\n@return the number of bytes placed into the given buffer.\n@throws MemoryAccessException if the bytes can\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the first byte to be retrieved."
        },
        {
          "name": "buffer",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the byte buffer in which to place the bytes."
        },
        {
          "name": "startIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the starting index in the buffer to put the first byte."
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to retrieve and put in the buffer."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of bytes placed into the given buffer."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the bytes can\u0027t be read."
        }
      ]
    },
    {
      "name": "putByte",
      "comment": "Writes the given byte value to the address in memory.",
      "javadoc": "Writes the given byte value to the address in memory.\n@param address the address whose byte is to be updated to the new value.\n@param value the value to set at the given address.\n@throws MemoryAccessException if the value can not be written to the memory.",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address whose byte is to be updated to the new value."
        },
        {
          "name": "value",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "the value to set at the given address."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the value can not be written to the memory."
        }
      ]
    },
    {
      "name": "putBytes",
      "comment": "Writes the given bytes to memory starting at the given address.",
      "javadoc": "Writes the given bytes to memory starting at the given address.\n@param address the address in memory to write the bytes.\n@param source the buffer containing the byte values to be written to memory.\n@param startIndex the starting index in the buffer to get byte values.\n@param size the number of bytes to write to memory.\n@return the number of bytes written to memory.\n@throws MemoryAccessException if the bytes can\u0027t be written to memory.",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address in memory to write the bytes."
        },
        {
          "name": "source",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the buffer containing the byte values to be written to memory."
        },
        {
          "name": "startIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the starting index in the buffer to get byte values."
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to write to memory."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of bytes written to memory."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the bytes can\u0027t be written to memory."
        }
      ]
    },
    {
      "name": "addLiveMemoryListener",
      "comment": "Adds a LiveMemoryListener to this handler.  The listener will be notified when memory\n bytes change.",
      "javadoc": "Adds a LiveMemoryListener to this handler.  The listener will be notified when memory\n bytes change.\n@param listener the listener to be notified of memory byte value changes.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.program.model.mem.LiveMemoryListener",
          "type_short": "LiveMemoryListener",
          "comment": "the listener to be notified of memory byte value changes."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeLiveMemoryListener",
      "comment": "Removes the LiveMemoryListener from this handler.",
      "javadoc": "Removes the LiveMemoryListener from this handler.\n@param listener the listener to be removed.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.program.model.mem.LiveMemoryListener",
          "type_short": "LiveMemoryListener",
          "comment": "the listener to be removed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
