{
  "name": "FileDataTypeManager",
  "comment": "DataTypeManager for a file. Can import categories from a file, or export\n categories to a packed database.",
  "javadoc": "DataTypeManager for a file. Can import categories from a file, or export\n categories to a packed database.",
  "static": false,
  "implements": [
    "ghidra.program.model.data.FileArchiveBasedDataTypeManager"
  ],
  "extends": "ghidra.program.model.data.StandAloneDataTypeManager",
  "fields": [
    {
      "name": "EXTENSION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"gdt\""
    },
    {
      "name": "SUFFIX",
      "comment": "Suffix for an archive file.",
      "javadoc": "Suffix for an archive file.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\".gdt\""
    },
    {
      "name": "OLD_EXTENSION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"dtf\""
    },
    {
      "name": "OLD_SUFFIX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\".dtf\""
    },
    {
      "name": "file",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.jar.ResourceFile",
      "type_short": "ResourceFile",
      "constant_value": null
    },
    {
      "name": "packedDB",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.store.db.PackedDatabase",
      "type_short": "PackedDatabase",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new DataTypeFileManager using the default data organization.",
      "javadoc": "Construct a new DataTypeFileManager using the default data organization.\n@param packedDbfile file to load or create based upon openMode\n@param openMode one of the DBConstants: CREATE, UPDATE, READ_ONLY, UPGRADE\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "packedDbfile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "file to load or create based upon openMode"
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": "one of the DBConstants: CREATE, UPDATE, READ_ONLY, UPGRADE"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "validateFilename",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "packedDbfile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createFileArchive",
      "comment": "Create a new data-type file archive using the default data organization",
      "javadoc": "Create a new data-type file archive using the default data organization\n@param packedDbfile archive file (filename must end with DataTypeFileManager.SUFFIX)\n@return data-type manager backed by specified packedDbFile\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "packedDbfile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "archive file (filename must end with DataTypeFileManager.SUFFIX)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.FileDataTypeManager",
        "type_short": "FileDataTypeManager",
        "comment": "data-type manager backed by specified packedDbFile"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "openFileArchive",
      "comment": "Open an existing data-type file archive using the default data organization",
      "javadoc": "Open an existing data-type file archive using the default data organization\n@param packedDbfile archive file (filename must end with DataTypeFileManager.SUFFIX)\n@param openForUpdate if true archive will be open for update\n@return data-type manager backed by specified packedDbFile\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "packedDbfile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "archive file (filename must end with DataTypeFileManager.SUFFIX)"
        },
        {
          "name": "openForUpdate",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true archive will be open for update"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.FileDataTypeManager",
        "type_short": "FileDataTypeManager",
        "comment": "data-type manager backed by specified packedDbFile"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "openFileArchive",
      "comment": "Open an existing data-type file archive using the default data organization",
      "javadoc": "Open an existing data-type file archive using the default data organization\n@param packedDbfile archive file (filename must end with DataTypeFileManager.SUFFIX)\n@param openForUpdate if true archive will be open for update\n@return data-type manager backed by specified packedDbFile\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "packedDbfile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "archive file (filename must end with DataTypeFileManager.SUFFIX)"
        },
        {
          "name": "openForUpdate",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true archive will be open for update"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.FileDataTypeManager",
        "type_short": "FileDataTypeManager",
        "comment": "data-type manager backed by specified packedDbFile"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "saveAs",
      "comment": "Saves the data type manager to the given file with a specific databaseId.\n NOTE: This method is intended for use in transforming one archive database to\n match another existing archive database.",
      "javadoc": "Saves the data type manager to the given file with a specific databaseId.\n NOTE: This method is intended for use in transforming one archive database to\n match another existing archive database.\n@param saveFile the file to save\n@param newUniversalId the new id to use\n@throws DuplicateFileException\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "saveFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to save"
        },
        {
          "name": "newUniversalId",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": "the new id to use"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateFileException",
          "type_short": "DuplicateFileException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "saveAs",
      "comment": "Saves the data type manager to the given file",
      "javadoc": "Saves the data type manager to the given file\n@param saveFile the file to save",
      "static": false,
      "params": [
        {
          "name": "saveFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to save"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateFileException",
          "type_short": "DuplicateFileException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "save",
      "comment": "Save the category to source file.",
      "javadoc": "Save the category to source file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFilename",
      "comment": "Get the filename for the current file.",
      "javadoc": "Get the filename for the current file.\n@return String filename, or null if there is no current file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String filename, or null if there is no current file."
      },
      "throws": []
    },
    {
      "name": "convertFilename",
      "comment": "Convert the filename for the given file to have the packed database\n file extension.",
      "javadoc": "Convert the filename for the given file to have the packed database\n file extension.\n@param file file whose name is to be converted\n@return file if the filename already ends in the packed database\n file extension, or a new File object that has the packed database\n file extension",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "file whose name is to be converted"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "file if the filename already ends in the packed database\n file extension, or a new File object that has the packed database\n file extension"
      },
      "throws": []
    },
    {
      "name": "updateRootCategoryName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": ""
        },
        {
          "name": "root",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRootName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "delete",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "close",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isClosed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "finalize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "delete",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "packedDbfile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.ArchiveType",
        "type_short": "ArchiveType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
