{
  "name": "StringRenderParser",
  "comment": "A parser to invert StringDataInstance#getStringRepresentation(),\n StringDataInstance#getCharRepresentation(), and related.",
  "javadoc": "A parser to invert {@link StringDataInstance#getStringRepresentation()},\n {@link StringDataInstance#getCharRepresentation()}, and related.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "hexDigits",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "quoteChar",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "char",
      "type_short": "char",
      "constant_value": null
    },
    {
      "name": "endian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Endian",
      "type_short": "Endian",
      "constant_value": null
    },
    {
      "name": "charsetName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "includeBOM",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "oneCodePointBuffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.nio.CharBuffer",
      "type_short": "CharBuffer",
      "constant_value": null
    },
    {
      "name": "pos",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "state",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.StringRenderParser.State",
      "type_short": "State",
      "constant_value": null
    },
    {
      "name": "charset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.nio.charset.Charset",
      "type_short": "Charset",
      "constant_value": null
    },
    {
      "name": "encoder",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.nio.charset.CharsetEncoder",
      "type_short": "CharsetEncoder",
      "constant_value": null
    },
    {
      "name": "val",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "codeDigits",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a parser",
      "javadoc": "Construct a parser\n@param quoteChar the character expected to enclose the representation. Use double quote (\")\n            for strings. Use single quote (\u0027) for characters.\n@param endian the endian for unicode strings\n@param charsetName the character set name, as in {@link Charset#forName(String)}\n@param includeBOM true to prepend a byte order marker, if applicable",
      "static": false,
      "params": [
        {
          "name": "quoteChar",
          "type_long": "char",
          "type_short": "char",
          "comment": "the character expected to enclose the representation. Use double quote (\")\n            for strings. Use single quote (\u0027) for characters."
        },
        {
          "name": "endian",
          "type_long": "ghidra.program.model.lang.Endian",
          "type_short": "Endian",
          "comment": "the endian for unicode strings"
        },
        {
          "name": "charsetName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the character set name, as in Charset#forName(String)"
        },
        {
          "name": "includeBOM",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to prepend a byte order marker, if applicable"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "reset",
      "comment": "Reset the parser",
      "javadoc": "Reset the parser",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initCharset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        },
        {
          "name": "reprCharsetName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "valHexDigit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseCharInit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StringRenderParser.State",
        "type_short": "State",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseCharPrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StringRenderParser.State",
        "type_short": "State",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseCharUnit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StringRenderParser.State",
        "type_short": "State",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "encodeCodePoint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        },
        {
          "name": "cp",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.nio.charset.MalformedInputException",
          "type_short": "MalformedInputException",
          "comment": ""
        },
        {
          "type_long": "java.nio.charset.UnmappableCharacterException",
          "type_short": "UnmappableCharacterException",
          "comment": ""
        }
      ]
    },
    {
      "name": "encodeChar",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.nio.charset.MalformedInputException",
          "type_short": "MalformedInputException",
          "comment": ""
        },
        {
          "type_long": "java.nio.charset.UnmappableCharacterException",
          "type_short": "UnmappableCharacterException",
          "comment": ""
        }
      ]
    },
    {
      "name": "encodeBufferedCodePoint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.nio.charset.MalformedInputException",
          "type_short": "MalformedInputException",
          "comment": ""
        },
        {
          "type_long": "java.nio.charset.UnmappableCharacterException",
          "type_short": "UnmappableCharacterException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parseCharStr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StringRenderParser.State",
        "type_short": "State",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.nio.charset.MalformedInputException",
          "type_short": "MalformedInputException",
          "comment": ""
        },
        {
          "type_long": "java.nio.charset.UnmappableCharacterException",
          "type_short": "UnmappableCharacterException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parseCharByte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StringRenderParser.State",
        "type_short": "State",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseCharByteSuffix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StringRenderParser.State",
        "type_short": "State",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseCharComma",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StringRenderParser.State",
        "type_short": "State",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseCharEscape",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StringRenderParser.State",
        "type_short": "State",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.nio.charset.MalformedInputException",
          "type_short": "MalformedInputException",
          "comment": ""
        },
        {
          "type_long": "java.nio.charset.UnmappableCharacterException",
          "type_short": "UnmappableCharacterException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parseCharCodePoint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StringRenderParser.State",
        "type_short": "State",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.nio.charset.MalformedInputException",
          "type_short": "MalformedInputException",
          "comment": ""
        },
        {
          "type_long": "java.nio.charset.UnmappableCharacterException",
          "type_short": "UnmappableCharacterException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parseChar",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StringRenderParser.State",
        "type_short": "State",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.nio.charset.MalformedInputException",
          "type_short": "MalformedInputException",
          "comment": ""
        },
        {
          "type_long": "java.nio.charset.UnmappableCharacterException",
          "type_short": "UnmappableCharacterException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parse",
      "comment": "Parse and encode a complete string or character representation",
      "javadoc": "Parse and encode a complete string or character representation\n@param in the buffer containing the representation\n@return a buffer containing the encoded string or character\n@throws StringParseException if the representation could not be parsed\n@throws MalformedInputException if a character sequence in the representation is not valid\n@throws UnmappableCharacterException if a character cannot be encoded",
      "static": false,
      "params": [
        {
          "name": "in",
          "type_long": "java.nio.CharBuffer",
          "type_short": "CharBuffer",
          "comment": "the buffer containing the representation"
        }
      ],
      "return": {
        "type_long": "java.nio.ByteBuffer",
        "type_short": "ByteBuffer",
        "comment": "a buffer containing the encoded string or character"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.StringRenderParser.StringParseException",
          "type_short": "StringParseException",
          "comment": "if the representation could not be parsed"
        },
        {
          "type_long": "java.nio.charset.MalformedInputException",
          "type_short": "MalformedInputException",
          "comment": "if a character sequence in the representation is not valid"
        },
        {
          "type_long": "java.nio.charset.UnmappableCharacterException",
          "type_short": "UnmappableCharacterException",
          "comment": "if a character cannot be encoded"
        }
      ]
    },
    {
      "name": "parse",
      "comment": "Parse and encode a portion of a string or character representation",
      "javadoc": "Parse and encode a portion of a string or character representation\n@param out the destination buffer for the encoded string or character, having matching byte\n            order to the charset.\n@param in the source buffer for the representation\n@throws StringParseException if the representation could not be parsed\n@throws MalformedInputException if a character sequence in the representation is not valid\n@throws UnmappableCharacterException if a character cannot be encoded",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": "the destination buffer for the encoded string or character, having matching byte\n            order to the charset."
        },
        {
          "name": "in",
          "type_long": "java.nio.CharBuffer",
          "type_short": "CharBuffer",
          "comment": "the source buffer for the representation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.StringRenderParser.StringParseException",
          "type_short": "StringParseException",
          "comment": "if the representation could not be parsed"
        },
        {
          "type_long": "java.nio.charset.MalformedInputException",
          "type_short": "MalformedInputException",
          "comment": "if a character sequence in the representation is not valid"
        },
        {
          "type_long": "java.nio.charset.UnmappableCharacterException",
          "type_short": "UnmappableCharacterException",
          "comment": "if a character cannot be encoded"
        }
      ]
    },
    {
      "name": "finish",
      "comment": "Finish parsing and encoded a string or character representation",
      "javadoc": "Finish parsing and encoded a string or character representation\n@param out the destination buffer for the encoded string or character\n@throws StringParseException if the representation is not complete",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.nio.ByteBuffer",
          "type_short": "ByteBuffer",
          "comment": "the destination buffer for the encoded string or character"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.StringRenderParser.StringParseException",
          "type_short": "StringParseException",
          "comment": "if the representation is not complete"
        }
      ]
    }
  ]
}
