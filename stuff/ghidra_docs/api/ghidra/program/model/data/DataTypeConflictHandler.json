{
  "name": "DataTypeConflictHandler",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DEFAULT_HANDLER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
      "type_short": "DataTypeConflictHandler",
      "constant_value": null
    },
    {
      "name": "DEFAULT_SUBSEQUENT_HANDLER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
      "type_short": "DataTypeConflictHandler",
      "constant_value": null
    },
    {
      "name": "REPLACE_HANDLER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
      "type_short": "DataTypeConflictHandler",
      "constant_value": null
    },
    {
      "name": "SUBSEQUENT_REPLACE_HANDLER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
      "type_short": "DataTypeConflictHandler",
      "constant_value": null
    },
    {
      "name": "KEEP_HANDLER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
      "type_short": "DataTypeConflictHandler",
      "constant_value": null
    },
    {
      "name": "REPLACE_EMPTY_STRUCTS_OR_RENAME_AND_ADD_HANDLER",
      "comment": "This DataTypeConflictHandler behaves similar to \n the #DEFAULT_HANDLER with the difference being that a \n empty composite (see Composite#isNotYetDefined()) will be \n replaced by a similar non-empty composite type.  Alignment (e.g., packing)\n is not considered when determining conflict resolution.\n \n For datatypes originating from a source archive with matching ID, the \n replacment strategy will utilize the implementation with the \n latest timestamp.\n \n Unlike the #DEFAULT_HANDLER, follow-on dependency datatype \n resolutions will retain the same conflict resolution strategy.",
      "javadoc": "This {@link DataTypeConflictHandler conflict handler} behaves similar to \n the {@link #DEFAULT_HANDLER} with the difference being that a \n empty composite (see {@link Composite#isNotYetDefined()}) will be \n replaced by a similar non-empty composite type.  Alignment (e.g., packing)\n is not considered when determining conflict resolution.\n \u003cbr\u003e\n For datatypes originating from a source archive with matching ID, the \n replacment strategy will utilize the implementation with the \n latest timestamp.\n \u003cbr\u003e\n Unlike the {@link #DEFAULT_HANDLER}, follow-on dependency datatype \n resolutions will retain the same conflict resolution strategy.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
      "type_short": "DataTypeConflictHandler",
      "constant_value": null
    },
    {
      "name": "BUILT_IN_MANAGER_HANDLER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
      "type_short": "DataTypeConflictHandler",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveConflict",
      "comment": "Callback to handle conflicts in a datatype manager when new datatypes are added that\n have the same name as an existing datatype. The implementer of this interface should do\n one of the following:\n \t\treturn the addedDataType - which means to replace the existingDataType with the addedDataType\n \t\t\t\t\t\t\t(may throw exception if the datatypes are not compatible)\n \t\treturn the existingDataType the addedDataType will be ignored and the existing dataType will\n \t\t\t\t\t\t\tbe used.\n \t\treturn a new DataType with a new name/category",
      "javadoc": "Callback to handle conflicts in a datatype manager when new datatypes are added that\n have the same name as an existing datatype. The implementer of this interface should do\n one of the following:\n \t\treturn the addedDataType - which means to replace the existingDataType with the addedDataType\n \t\t\t\t\t\t\t(may throw exception if the datatypes are not compatible)\n \t\treturn the existingDataType the addedDataType will be ignored and the existing dataType will\n \t\t\t\t\t\t\tbe used.\n \t\treturn a new DataType with a new name/category\n@param addedDataType the datatype being added.\n@param existingDataType the datatype that exists with the same name/category as the one added\n@return an enum specify how to handle the conflict",
      "static": false,
      "params": [
        {
          "name": "addedDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype being added."
        },
        {
          "name": "existingDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype that exists with the same name/category as the one added"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeConflictHandler.ConflictResult",
        "type_short": "ConflictResult",
        "comment": "an enum specify how to handle the conflict"
      },
      "throws": []
    },
    {
      "name": "shouldUpdate",
      "comment": "Callback invoked when an associated dataType is being resolved and its local version of the\n dataType is different from the source archive\u0027s dataType.  This method returns true if the\n local version should be updated to the archive\u0027s version of the dataType.  Otherwise, the\n local dataType will be used (without updating) in the resolve operation.",
      "javadoc": "Callback invoked when an associated dataType is being resolved and its local version of the\n dataType is different from the source archive\u0027s dataType.  This method returns true if the\n local version should be updated to the archive\u0027s version of the dataType.  Otherwise, the\n local dataType will be used (without updating) in the resolve operation.\n@param sourceDataType\n@param localDataType\n@return true if the localDataType should be updated to be equivalent to the sourceDataType.",
      "static": false,
      "params": [
        {
          "name": "sourceDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "localDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the localDataType should be updated to be equivalent to the sourceDataType."
      },
      "throws": []
    },
    {
      "name": "getSubsequentHandler",
      "comment": "Returns the appropriate handler for recursive resolve calls.",
      "javadoc": "Returns the appropriate handler for recursive resolve calls.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
        "type_short": "DataTypeConflictHandler",
        "comment": ""
      },
      "throws": []
    }
  ]
}
