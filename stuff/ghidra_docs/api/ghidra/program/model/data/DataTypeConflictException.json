{
  "name": "DataTypeConflictException",
  "comment": "Exception thrown when an attempt is made to add a data type to a category\n and the category has a data type by that name but the types do not\n match.",
  "javadoc": "Exception thrown when an attempt is made to add a data type to a category\n and the category has a data type by that name but the types do not\n match.",
  "static": false,
  "implements": [],
  "extends": "java.lang.RuntimeException",
  "fields": [
    {
      "name": "datatype1",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "datatype2",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new DataTypeConflictException with no message",
      "javadoc": "Construct a new DataTypeConflictException with no message",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new DataTypeConflictException with the given message",
      "javadoc": "Construct a new DataTypeConflictException with the given message\n@param msg the exception message",
      "static": false,
      "params": [
        {
          "name": "msg",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the exception message"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new DataTypeConflictException with the given datatypes.\n The message will indicate there is a conflict between the two data types.",
      "javadoc": "Construct a new DataTypeConflictException with the given datatypes.\n The message will indicate there is a conflict between the two data types.\n@param dt1 the first of the two conflicting data types. \n (The new data type.)\n@param dt2 the second of the two conflicting data types. \n (The existing data type.)",
      "static": false,
      "params": [
        {
          "name": "dt1",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the first of the two conflicting data types. \n (The new data type.)"
        },
        {
          "name": "dt2",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the second of the two conflicting data types. \n (The existing data type.)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConflictingDataTypes",
      "comment": "Returns the conflicting data types in a Data Type array of size 2. \n The first entry is the first data type in conflict. \n The second entry is the second data type in conflict. \n Note: These values can be null. They are only known if this\n object was created using the constructor that has the conflicting\n data types as parameters.",
      "javadoc": "Returns the conflicting data types in a Data Type array of size 2. \n The first entry is the first data type in conflict. \n The second entry is the second data type in conflict. \n \u003cP\u003eNote: These values can be null. They are only known if this\n object was created using the constructor that has the conflicting\n data types as parameters.\n@return the two conflicting data types or nulls.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType[]",
        "type_short": "ghidra.program.model.data.DataType[]",
        "comment": "the two conflicting data types or nulls."
      },
      "throws": []
    }
  ]
}
