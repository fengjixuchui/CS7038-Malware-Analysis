{
  "name": "CompositeInternal",
  "comment": "Interface for common methods in Structure and Union",
  "javadoc": "Interface for common methods in Structure and Union",
  "static": false,
  "implements": [
    "ghidra.program.model.data.Composite"
  ],
  "fields": [
    {
      "name": "ALIGN_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"aligned\""
    },
    {
      "name": "PACKING_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"pack\""
    },
    {
      "name": "DISABLED_PACKING_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"disabled\""
    },
    {
      "name": "DEFAULT_PACKING_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\""
    },
    {
      "name": "DEFAULT_PACKING",
      "comment": "The stored packing value which corresponds to a composite that will automatically pack\n based upon the alignment requirements of its components.  A positive pack value will\n also pack in a similar fashion but will use the pack value as a maximum alignment\n for each component.\n See #getStoredPackingValue.",
      "javadoc": "The stored packing value which corresponds to a composite that will automatically pack\n based upon the alignment requirements of its components.  A positive pack value will\n also pack in a similar fashion but will use the pack value as a maximum alignment\n for each component.\n See {@link #getStoredPackingValue}.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "NO_PACKING",
      "comment": "The stored packing value which corresponds to a composite whose packing has been disabled.\n In the case of structures this will permit explicit component placement by\n offset within the structure and undefined filler components will be used.\n This is the initial state of all newly instantiated structures.\n See #getStoredPackingValue().",
      "javadoc": "The stored packing value which corresponds to a composite whose packing has been disabled.\n In the case of structures this will permit explicit component placement by\n offset within the structure and undefined filler components will be used.\n This is the initial state of all newly instantiated structures.\n See {@link #getStoredPackingValue()}.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "DEFAULT_ALIGNMENT",
      "comment": "The stored minimum alignment value which indicates the default alignment\n should be used based upon the packing and component alignment requirements.\n See #getStoredMinimumAlignment.",
      "javadoc": "The stored minimum alignment value which indicates the default alignment\n should be used based upon the packing and component alignment requirements.\n See {@link #getStoredMinimumAlignment}.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "MACHINE_ALIGNMENT",
      "comment": "The stored minimum alignment value which indicates the machine alignment\n should be used as the minimum alignment (as defined by the current\n DataOrganization#getMachineAlignment()).\n See #getStoredMinimumAlignment().",
      "javadoc": "The stored minimum alignment value which indicates the machine alignment\n should be used as the minimum alignment (as defined by the current\n {@link DataOrganization#getMachineAlignment()}).\n See {@link #getStoredMinimumAlignment()}.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    }
  ],
  "methods": [
    {
      "name": "getStoredPackingValue",
      "comment": "Gets the current packing value (typically a power of 2).  Other special values\n which may be returned include  and .",
      "javadoc": "Gets the current packing value (typically a power of 2).  Other special values\n which may be returned include {@value #DEFAULT_PACKING} and {@value #NO_PACKING}.\n@return the current positive packing value, {@value #DEFAULT_PACKING} or {@value #NO_PACKING}.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the current positive packing value,  or ."
      },
      "throws": []
    },
    {
      "name": "getStoredMinimumAlignment",
      "comment": "Get the minimum alignment setting for this Composite which contributes\n to the actual computed alignment value (see #getAlignment().",
      "javadoc": "Get the minimum alignment setting for this Composite which contributes\n to the actual computed alignment value (see {@link #getAlignment()}.\n@return the minimum alignment setting for this Composite or a reserved value to indicate\n either {@link #DEFAULT_ALIGNMENT} or {@link #MACHINE_ALIGNMENT}.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the minimum alignment setting for this Composite or a reserved value to indicate\n either #DEFAULT_ALIGNMENT or #MACHINE_ALIGNMENT."
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Dump composite and its components for use in #toString() representation.",
      "javadoc": "Dump composite and its components for use in {@link #toString()} representation.\n@param composite composite instance to be dumped\n@return formatted dump as string",
      "static": true,
      "params": [
        {
          "name": "composite",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": "composite instance to be dumped"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "formatted dump as string"
      },
      "throws": []
    },
    {
      "name": "dumpComponents",
      "comment": "Dump all components for use in #toString() representation.",
      "javadoc": "Dump all components for use in {@link #toString()} representation.\n@param buffer string buffer\n@param pad padding to be used with each component output line",
      "static": true,
      "params": [
        {
          "name": "composite",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        },
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "string buffer"
        },
        {
          "name": "pad",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "padding to be used with each component output line"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTypeName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "composite",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAlignmentAndPackingString",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "composite",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinAlignmentString",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "composite",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPackingString",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "composite",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
