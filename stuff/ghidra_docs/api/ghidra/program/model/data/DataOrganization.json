{
  "name": "DataOrganization",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "NO_MAXIMUM_ALIGNMENT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    }
  ],
  "methods": [
    {
      "name": "isBigEndian",
      "comment": "",
      "javadoc": "@return true if data stored big-endian byte order",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if data stored big-endian byte order"
      },
      "throws": []
    },
    {
      "name": "getPointerSize",
      "comment": "",
      "javadoc": "@return the size of a pointer data type in bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of a pointer data type in bytes."
      },
      "throws": []
    },
    {
      "name": "getPointerShift",
      "comment": "Shift amount affects interpretation of in-memory pointer values only\n and will also be reflected within instruction pcode.  A value of zero indicates\n that shifted-pointers are not supported.",
      "javadoc": "Shift amount affects interpretation of in-memory pointer values only\n and will also be reflected within instruction pcode.  A value of zero indicates\n that shifted-pointers are not supported.\n@return the left shift amount for shifted-pointers.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the left shift amount for shifted-pointers."
      },
      "throws": []
    },
    {
      "name": "isSignedChar",
      "comment": "",
      "javadoc": "@return true if the \"char\" type is signed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the \"char\" type is signed"
      },
      "throws": []
    },
    {
      "name": "getCharSize",
      "comment": "",
      "javadoc": "@return the size of a char (char) primitive data type in bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of a char (char) primitive data type in bytes."
      },
      "throws": []
    },
    {
      "name": "getWideCharSize",
      "comment": "",
      "javadoc": "@return the size of a wide-char (wchar_t) primitive data type in bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of a wide-char (wchar_t) primitive data type in bytes."
      },
      "throws": []
    },
    {
      "name": "getShortSize",
      "comment": "",
      "javadoc": "@return the size of a short primitive data type in bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of a short primitive data type in bytes."
      },
      "throws": []
    },
    {
      "name": "getIntegerSize",
      "comment": "",
      "javadoc": "@return the size of a int primitive data type in bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of a int primitive data type in bytes."
      },
      "throws": []
    },
    {
      "name": "getLongSize",
      "comment": "",
      "javadoc": "@return the size of a long primitive data type in bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of a long primitive data type in bytes."
      },
      "throws": []
    },
    {
      "name": "getLongLongSize",
      "comment": "",
      "javadoc": "@return the size of a long long primitive data type in bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of a long long primitive data type in bytes."
      },
      "throws": []
    },
    {
      "name": "getFloatSize",
      "comment": "",
      "javadoc": "@return the size of a float primitive data type in bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of a float primitive data type in bytes."
      },
      "throws": []
    },
    {
      "name": "getDoubleSize",
      "comment": "",
      "javadoc": "@return the size of a double primitive data type in bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of a double primitive data type in bytes."
      },
      "throws": []
    },
    {
      "name": "getLongDoubleSize",
      "comment": "",
      "javadoc": "@return the size of a long double primitive data type in bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of a long double primitive data type in bytes."
      },
      "throws": []
    },
    {
      "name": "getAbsoluteMaxAlignment",
      "comment": "Gets the maximum alignment value that is allowed by this data organization. When getting\n an alignment for any data type it will not exceed this value. If NO_MAXIMUM_ALIGNMENT\n is returned, the data organization isn\u0027t specifically limited.",
      "javadoc": "Gets the maximum alignment value that is allowed by this data organization. When getting\n an alignment for any data type it will not exceed this value. If NO_MAXIMUM_ALIGNMENT\n is returned, the data organization isn\u0027t specifically limited.\n@return the absolute maximum alignment or NO_MAXIMUM_ALIGNMENT",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the absolute maximum alignment or NO_MAXIMUM_ALIGNMENT"
      },
      "throws": []
    },
    {
      "name": "getMachineAlignment",
      "comment": "Gets the maximum useful alignment for the target machine",
      "javadoc": "Gets the maximum useful alignment for the target machine\n@return the machine alignment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the machine alignment"
      },
      "throws": []
    },
    {
      "name": "getDefaultAlignment",
      "comment": "Gets the default alignment to be used for any data type that isn\u0027t a \n structure, union, array, pointer, type definition, and whose size isn\u0027t in the \n size/alignment map.",
      "javadoc": "Gets the default alignment to be used for any data type that isn\u0027t a \n structure, union, array, pointer, type definition, and whose size isn\u0027t in the \n size/alignment map.\n@return the default alignment to be used if no other alignment can be \n determined for a data type.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the default alignment to be used if no other alignment can be \n determined for a data type."
      },
      "throws": []
    },
    {
      "name": "getDefaultPointerAlignment",
      "comment": "Gets the default alignment to be used for a pointer that doesn\u0027t have size.",
      "javadoc": "Gets the default alignment to be used for a pointer that doesn\u0027t have size.\n@return the default alignment for a pointer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the default alignment for a pointer"
      },
      "throws": []
    },
    {
      "name": "getSizeAlignment",
      "comment": "Gets the alignment that is defined for a data type of the indicated size if one is defined.",
      "javadoc": "Gets the alignment that is defined for a data type of the indicated size if one is defined.\n@param size the size of the data type\n@return the alignment of the data type.\n@throws NoValueException if there isn\u0027t an alignment defined for the indicated size.",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of the data type"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the alignment of the data type."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NoValueException",
          "type_short": "NoValueException",
          "comment": "if there isn\u0027t an alignment defined for the indicated size."
        }
      ]
    },
    {
      "name": "getBitFieldPacking",
      "comment": "Get the composite bitfield packing information associated with this data organization.",
      "javadoc": "Get the composite bitfield packing information associated with this data organization.\n@return composite bitfield packing information",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.BitFieldPacking",
        "type_short": "BitFieldPacking",
        "comment": "composite bitfield packing information"
      },
      "throws": []
    },
    {
      "name": "getSizeAlignmentCount",
      "comment": "Gets the number of sizes that have an alignment specified.",
      "javadoc": "Gets the number of sizes that have an alignment specified.\n@return the number of sizes with an alignment mapped to them.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of sizes with an alignment mapped to them."
      },
      "throws": []
    },
    {
      "name": "getSizes",
      "comment": "Gets the sizes that have an alignment specified.",
      "javadoc": "Gets the sizes that have an alignment specified.\n@return the sizes with alignments mapped to them.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "the sizes with alignments mapped to them."
      },
      "throws": []
    },
    {
      "name": "getIntegerCTypeApproximation",
      "comment": "Returns the best fitting integer C-type whose size is less-than-or-equal\n to the specified size.  \"long long\" will be returned for any size larger\n than \"long long\";",
      "javadoc": "Returns the best fitting integer C-type whose size is less-than-or-equal\n to the specified size.  \"long long\" will be returned for any size larger\n than \"long long\";\n@param size integer size\n@param signed if false the unsigned modifier will be prepended.\n@return the best fitting",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "integer size"
        },
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if false the unsigned modifier will be prepended."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the best fitting"
      },
      "throws": []
    },
    {
      "name": "getAlignment",
      "comment": "Determines the alignment value for the indicated data type. (i.e. how the data type gets\n aligned within other data types.)  NOTE: this method should not be used for bitfields\n which are highly dependent upon packing for a composite.  This method will always return 1\n for Dynamic and FactoryDataTypes.",
      "javadoc": "Determines the alignment value for the indicated data type. (i.e. how the data type gets\n aligned within other data types.)  NOTE: this method should not be used for bitfields\n which are highly dependent upon packing for a composite.  This method will always return 1\n for Dynamic and FactoryDataTypes.\n@param dataType the data type\n@return the datatype alignment",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the datatype alignment"
      },
      "throws": []
    }
  ]
}
