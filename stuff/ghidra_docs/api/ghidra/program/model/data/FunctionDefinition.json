{
  "name": "FunctionDefinition",
  "comment": "Defines a function signature for things like function pointers.",
  "javadoc": "Defines a function signature for things like function pointers.",
  "static": false,
  "implements": [
    "ghidra.program.model.data.DataType",
    "ghidra.program.model.listing.FunctionSignature"
  ],
  "fields": [],
  "methods": [
    {
      "name": "setArguments",
      "comment": "Set the arguments to this function.",
      "javadoc": "Set the arguments to this function.\n@param args array of parameter definitions to be used as arguments to this function",
      "static": false,
      "params": [
        {
          "name": "args",
          "type_long": "ghidra.program.model.data.ParameterDefinition[]",
          "type_short": "ghidra.program.model.data.ParameterDefinition[]",
          "comment": "array of parameter definitions to be used as arguments to this function"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setReturnType",
      "comment": "Set the return data type for this function",
      "javadoc": "Set the return data type for this function\n@param type the return datatype to be set.\n@throws IllegalArgumentException if data type is not a fixed length type",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the return datatype to be set."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if data type is not a fixed length type"
        }
      ]
    },
    {
      "name": "setComment",
      "comment": "Set the function comment",
      "javadoc": "Set the function comment\n@param comment the comment to set.",
      "static": false,
      "params": [
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the comment to set."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVarArgs",
      "comment": "Set whether parameters can be passed as a VarArg (variable argument list).",
      "javadoc": "Set whether parameters can be passed as a VarArg (variable argument list).\n@param hasVarArgs true if this function has a variable argument list (ie printf(fmt, ...)).",
      "static": false,
      "params": [
        {
          "name": "hasVarArgs",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if this function has a variable argument list (ie printf(fmt, ...))."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setGenericCallingConvention",
      "comment": "Set the generic calling convention associated with this function definition.",
      "javadoc": "Set the generic calling convention associated with this function definition.\n@param genericCallingConvention generic calling convention",
      "static": false,
      "params": [
        {
          "name": "genericCallingConvention",
          "type_long": "ghidra.program.model.data.GenericCallingConvention",
          "type_short": "GenericCallingConvention",
          "comment": "generic calling convention"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "replaceArgument",
      "comment": "Replace the given argument with another data type",
      "javadoc": "Replace the given argument with another data type\n@param ordinal the index of the argument to be replaced, starting from \u00270\u0027\n@param name name of the new argument\n@param dt data type of the new argument\n@param comment comment for the argument\n@param source the source of this function definition argument: \n Symbol.DEFAULT, Symbol.ANALYSIS, Symbol.IMPORTED, or Symbol.USER_DEFINED",
      "static": false,
      "params": [
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the argument to be replaced, starting from \u00270\u0027"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the new argument"
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "data type of the new argument"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "comment for the argument"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this function definition argument: \n Symbol.DEFAULT, Symbol.ANALYSIS, Symbol.IMPORTED, or Symbol.USER_DEFINED"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
