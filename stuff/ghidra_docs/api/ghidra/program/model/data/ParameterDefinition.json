{
  "name": "ParameterDefinition",
  "comment": "ParameterDefinition specifies a parameter which can be\n used to specify a function definition.",
  "javadoc": "\u003ccode\u003eParameterDefinition\u003c/code\u003e specifies a parameter which can be\n used to specify a function definition.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getOrdinal",
      "comment": "Get the parameter ordinal",
      "javadoc": "Get the parameter ordinal\n@return the ordinal (index) of this parameter within the function signature.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the ordinal (index) of this parameter within the function signature."
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "Get the Data Type of this variable",
      "javadoc": "Get the Data Type of this variable\n@return the data type of the variable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the data type of the variable"
      },
      "throws": []
    },
    {
      "name": "setDataType",
      "comment": "Set the Data Type of this variable.",
      "javadoc": "Set the Data Type of this variable.\n@param type dataType the fixed-length datatype of the parameter\n@throws IllegalArgumentException if invalid parameter datatype specified",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "dataType the fixed-length datatype of the parameter"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if invalid parameter datatype specified"
        }
      ]
    },
    {
      "name": "getName",
      "comment": "Get the Name of this variable.",
      "javadoc": "Get the Name of this variable.\n@return the name of the variable or null if no name has been specified.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the variable or null if no name has been specified."
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Get the length of this variable",
      "javadoc": "Get the length of this variable\n@return the length of the variable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of the variable"
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "Set the name of this variable.",
      "javadoc": "Set the name of this variable.\n@param name the name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComment",
      "comment": "Get the Comment for this variable",
      "javadoc": "Get the Comment for this variable\n@return the comment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the comment"
      },
      "throws": []
    },
    {
      "name": "setComment",
      "comment": "Set the comment for this variable",
      "javadoc": "Set the comment for this variable\n@param comment the comment",
      "static": false,
      "params": [
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the comment"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEquivalent",
      "comment": "Determine if a variable corresponds to a parameter which is equivalent to \n this parameter definition by both ordinal and datatype.  Name is not considered\n relevant.",
      "javadoc": "Determine if a variable corresponds to a parameter which is equivalent to \n this parameter definition by both ordinal and datatype.  Name is not considered\n relevant.\n@param variable variable to be compared with this parameter definition.\n@return true if the specified variable represents the same parameter by ordinal\n and dataType.  False will always be returned if specified variable is\n not a {@link Parameter}.",
      "static": false,
      "params": [
        {
          "name": "variable",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "variable to be compared with this parameter definition."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the specified variable represents the same parameter by ordinal\n and dataType.  False will always be returned if specified variable is\n not a Parameter."
      },
      "throws": []
    },
    {
      "name": "isEquivalent",
      "comment": "Determine if parm is equivalent to this parameter definition by both ordinal \n and datatype.  Name is not considered relevant.",
      "javadoc": "Determine if parm is equivalent to this parameter definition by both ordinal \n and datatype.  Name is not considered relevant.\n@param parm parameter definition to be compared with this parameter definition.\n@return true if the specified parameter definition represents the same parameter \n by ordinal and dataType.",
      "static": false,
      "params": [
        {
          "name": "parm",
          "type_long": "ghidra.program.model.data.ParameterDefinition",
          "type_short": "ParameterDefinition",
          "comment": "parameter definition to be compared with this parameter definition."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the specified parameter definition represents the same parameter \n by ordinal and dataType."
      },
      "throws": []
    }
  ]
}
