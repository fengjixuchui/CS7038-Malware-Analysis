{
  "name": "DataType",
  "comment": "The interface that all datatypes must implement.",
  "javadoc": "The interface that all datatypes must implement.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "DEFAULT",
      "comment": "Singleton instance of default datatype.",
      "javadoc": "Singleton instance of default datatype.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "VOID",
      "comment": "Instance of void datatype (never use \u003d\u003d)",
      "javadoc": "Instance of void datatype (never use \u003ccode\u003e\u003d\u003d\u003c/code\u003e)\n@deprecated should use {@link VoidDataType#dataType} instead",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "CONFLICT_SUFFIX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\".conflict\""
    },
    {
      "name": "NO_SOURCE_SYNC_TIME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "0"
    },
    {
      "name": "NO_LAST_CHANGE_TIME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "0"
    }
  ],
  "methods": [
    {
      "name": "hasLanguageDependantLength",
      "comment": "Indicates if the length of this data-type is determined based upon the\n DataOrganization obtained from the associated DataTypeManager.",
      "javadoc": "Indicates if the length of this data-type is determined based upon the\n {@link DataOrganization} obtained from the associated {@link DataTypeManager}.\n@return true length is language/compiler-specification dependent, else false",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true length is language/compiler-specification dependent, else false"
      },
      "throws": []
    },
    {
      "name": "getSettingsDefinitions",
      "comment": "Gets a list of all the settingsDefinitions used by this datatype.",
      "javadoc": "Gets a list of all the settingsDefinitions used by this datatype.\n@return a list of the settingsDefinitions used by this datatype.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.docking.settings.SettingsDefinition[]",
        "type_short": "ghidra.docking.settings.SettingsDefinition[]",
        "comment": "a list of the settingsDefinitions used by this datatype."
      },
      "throws": []
    },
    {
      "name": "getDefaultSettings",
      "comment": "Gets the default settings for this datatype.",
      "javadoc": "Gets the default settings for this datatype.\n@return the default settings for this datatype.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.docking.settings.Settings",
        "type_short": "Settings",
        "comment": "the default settings for this datatype."
      },
      "throws": []
    },
    {
      "name": "clone",
      "comment": "Returns an instance of this DataType with its universalID and SourceArchive identity\n retained.\n \n The current instanceof will be returned if this datatype\u0027s DataTypeManager matches the\n specified dtm. The recursion depth of a clone will stop on any datatype whose DataTypeManager\n matches the specified dtm and simply use the existing datatype instance.",
      "javadoc": "Returns an instance of this DataType with its universalID and SourceArchive identity\n retained.\n \u003cp\u003e\n The current instanceof will be returned if this datatype\u0027s DataTypeManager matches the\n specified dtm. The recursion depth of a clone will stop on any datatype whose DataTypeManager\n matches the specified dtm and simply use the existing datatype instance.\n@param dtm the data-type manager instance whose data-organization should apply.\n@return cloned instance which may be the same as this instance",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "the data-type manager instance whose data-organization should apply."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "cloned instance which may be the same as this instance"
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "Returns a new instance (shallow copy) of this DataType with a new identity.\n \n Any reference to other datatypes will use #clone(DataTypeManager).",
      "javadoc": "Returns a new instance (shallow copy) of this DataType with a new identity.\n \u003cp\u003e\n Any reference to other datatypes will use {@link #clone(DataTypeManager)}.\n@param dtm the data-type manager instance whose data-organization should apply.\n@return new instanceof of this datatype",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "the data-type manager instance whose data-organization should apply."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "new instanceof of this datatype"
      },
      "throws": []
    },
    {
      "name": "getCategoryPath",
      "comment": "Gets the categoryPath associated with this datatype",
      "javadoc": "Gets the categoryPath associated with this datatype\n@return the datatype\u0027s category path",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.CategoryPath",
        "type_short": "CategoryPath",
        "comment": "the datatype\u0027s category path"
      },
      "throws": []
    },
    {
      "name": "getDataTypePath",
      "comment": "Returns the dataTypePath for this datatype;",
      "javadoc": "Returns the dataTypePath for this datatype;\n@return the dataTypePath for this datatype;",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypePath",
        "type_short": "DataTypePath",
        "comment": "the dataTypePath for this datatype;"
      },
      "throws": []
    },
    {
      "name": "setCategoryPath",
      "comment": "Set the categoryPath associated with this datatype",
      "javadoc": "Set the categoryPath associated with this datatype\n@param path the new path\n@throws DuplicateNameException if an attempt to place this datatype into the specified\n             category resulted in a name collision. This should not occur for non-DB DataType\n             instances.",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the new path"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if an attempt to place this datatype into the specified\n             category resulted in a name collision. This should not occur for non-DB DataType\n             instances."
        }
      ]
    },
    {
      "name": "getDataTypeManager",
      "comment": "Get the DataTypeManager containing this datatype.\n \n This association should not be used to indicate whether this DataType has been resolved, but\n is intended to indicate whether the appropriate DataOrganization is being used.",
      "javadoc": "Get the DataTypeManager containing this datatype.\n \u003cp\u003e\n This association should not be used to indicate whether this DataType has been resolved, but\n is intended to indicate whether the appropriate DataOrganization is being used.\n@return the DataTypeManager that is associated with this datatype.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeManager",
        "type_short": "DataTypeManager",
        "comment": "the DataTypeManager that is associated with this datatype."
      },
      "throws": []
    },
    {
      "name": "getDisplayName",
      "comment": "Gets the name for referring to this datatype.",
      "javadoc": "Gets the name for referring to this datatype.\n@return generic name for this Data Type (i.e.: Word)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "generic name for this Data Type (i.e.: Word)"
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Get the name of this datatype.",
      "javadoc": "Get the name of this datatype.\n@return the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "getPathName",
      "comment": "Get the full category path name that includes this datatype\u0027s name.\n \n If the category is null, then this just the datatype\u0027s name is returned.",
      "javadoc": "Get the full category path name that includes this datatype\u0027s name.\n \u003cp\u003e\n If the category is null, then this just the datatype\u0027s name is returned.\n@return the path, or just this type\u0027s name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the path, or just this type\u0027s name"
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "Sets the name of the datatype",
      "javadoc": "Sets the name of the datatype\n@param name the new name for this datatype.\n@throws InvalidNameException if the given name does not form a valid name.\n@throws DuplicateNameException if name change on stored {@link DataType} is a duplicate of\n             another datatype within the same category (only applies to DB stored\n             {@link DataType}).",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new name for this datatype."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the given name does not form a valid name."
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if name change on stored DataType is a duplicate of\n             another datatype within the same category (only applies to DB stored\n             DataType)."
        }
      ]
    },
    {
      "name": "setNameAndCategory",
      "comment": "Sets the name and category of a datatype at the same time.",
      "javadoc": "Sets the name and category of a datatype at the same time.\n@param path the new category path.\n@param name the new name\n@throws InvalidNameException if the name is invalid\n@throws DuplicateNameException if name change on stored {@link DataType} is a duplicate of\n             another datatype within the same category (only applies to DB stored\n             {@link DataType}).",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the new category path."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the name is invalid"
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if name change on stored DataType is a duplicate of\n             another datatype within the same category (only applies to DB stored\n             DataType)."
        }
      ]
    },
    {
      "name": "getMnemonic",
      "comment": "Get the mnemonic for this DataType.",
      "javadoc": "Get the mnemonic for this DataType.\n@param settings settings which may influence the result or null\n@return the mnemonic for this DataType.",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "settings which may influence the result or null"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the mnemonic for this DataType."
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Get the length (number of 8-bit bytes) of this DataType.\n \n NOTE: No datatype should ever return 0, even if #isZeroLength(), and only\n Dynamic datatypes should return -1. If #isZeroLength() is true a length of 1\n should be returned. Where a zero-length datatype can be handled (e.g., Composite) the\n #isZeroLength() method should be used.",
      "javadoc": "Get the length (number of 8-bit bytes) of this DataType.\n \u003cp\u003e\n NOTE: No datatype should ever return 0, even if {@link #isZeroLength()}, and only\n {@link Dynamic} datatypes should return -1. If {@link #isZeroLength()} is true a length of 1\n should be returned. Where a zero-length datatype can be handled (e.g., {@link Composite}) the\n {@link #isZeroLength()} method should be used.\n@return the length of this DataType",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of this DataType"
      },
      "throws": []
    },
    {
      "name": "isZeroLength",
      "comment": "Indicates this datatype is defined with a zero length.\n \n This method should not be confused with #isNotYetDefined() which indicates that\n nothing but the name and basic type is known.\n \n NOTE: a zero-length datatype must return a length of 1 via #getLength(). Zero-length\n datatypes used as a component within a Composite may, or may not, be assigned a\n component length of 0. The method DataTypeComponent#usesZeroLengthComponent(DataType)\n is used to make this determination.",
      "javadoc": "Indicates this datatype is defined with a zero length.\n \u003cp\u003e\n This method should not be confused with {@link #isNotYetDefined()} which indicates that\n nothing but the name and basic type is known.\n \u003cp\u003e\n NOTE: a zero-length datatype must return a length of 1 via {@link #getLength()}. Zero-length\n datatypes used as a component within a {@link Composite} may, or may not, be assigned a\n component length of 0. The method {@link DataTypeComponent#usesZeroLengthComponent(DataType)}\n is used to make this determination.\n@return true if type definition has a length of 0, else false",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if type definition has a length of 0, else false"
      },
      "throws": []
    },
    {
      "name": "isNotYetDefined",
      "comment": "Indicates if this datatype has not yet been fully defined.\n \n Such datatypes should always return a #getLength() of 1 and true for\n #isZeroLength(). (example: empty structure)",
      "javadoc": "Indicates if this datatype has not yet been fully defined.\n \u003cp\u003e\n Such datatypes should always return a {@link #getLength()} of 1 and true for\n {@link #isZeroLength()}. (example: empty structure)\n@return true if this type is not yet defined.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this type is not yet defined."
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "Get a String briefly describing this DataType.",
      "javadoc": "Get a String briefly describing this DataType.\n@return a one-liner describing this DataType.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a one-liner describing this DataType."
      },
      "throws": []
    },
    {
      "name": "setDescription",
      "comment": "Sets a String briefly describing this DataType.",
      "javadoc": "Sets a String briefly describing this DataType.\n@param description a one-liner describing this DataType.\n@throws UnsupportedOperationException if the description is not allowed to be set for this\n             datatype.",
      "static": false,
      "params": [
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a one-liner describing this DataType."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.UnsupportedOperationException",
          "type_short": "UnsupportedOperationException",
          "comment": "if the description is not allowed to be set for this\n             datatype."
        }
      ]
    },
    {
      "name": "getDocs",
      "comment": "The getDocs method should provide a URL pointing to extended documentation for this DataType\n if it exists.\n \n A typical use would be to return a URL pointing to the programmers reference for this\n instruction or a page describing this data structure.",
      "javadoc": "The getDocs method should provide a URL pointing to extended documentation for this DataType\n if it exists.\n \u003cp\u003e\n A typical use would be to return a URL pointing to the programmers reference for this\n instruction or a page describing this data structure.\n@return null - there is no URL documentation for this prototype.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.net.URL",
        "type_short": "URL",
        "comment": "null - there is no URL documentation for this prototype."
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "Get the data in the form of the appropriate Object for this DataType.\n \n For instance if the datatype is an AddressDT, return an Address object. a Byte, return a\n Scalar* (maybe this should be a Byte) a Float, return a Float",
      "javadoc": "Get the data in the form of the appropriate Object for this DataType.\n \u003cp\u003e\n For instance if the datatype is an AddressDT, return an Address object. a Byte, return a\n Scalar* (maybe this should be a Byte) a Float, return a Float\n@param buf the data buffer.\n@param settings the settings to use.\n@param length the number of bytes to get the value from.\n@return the data Object.",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "the data buffer."
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "the settings to use."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to get the value from."
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "the data Object."
      },
      "throws": []
    },
    {
      "name": "isEncodable",
      "comment": "Check if this type supports encoding (patching)\n \n If unsupported, #encodeValue(Object, MemBuffer, Settings, int) and\n #encodeRepresentation(String, MemBuffer, Settings, int) will always throw an\n exception. Actions which rely on either  method should not be displayed if the\n applicable datatype is not encodable.",
      "javadoc": "Check if this type supports encoding (patching)\n \u003cp\u003e\n If unsupported, {@link #encodeValue(Object, MemBuffer, Settings, int)} and\n {@link #encodeRepresentation(String, MemBuffer, Settings, int)} will always throw an\n exception. Actions which rely on either {@code encode} method should not be displayed if the\n applicable datatype is not encodable.\n@return true if encoding is supported",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if encoding is supported"
      },
      "throws": []
    },
    {
      "name": "encodeValue",
      "comment": "Encode bytes from an Object appropriate for this DataType.\n \n Converts the given object to the byte encoding and returns it. When appropriate, this should\n seek the nearest encoding to the specified value, since the object may come from a user\n script. For example, a floating-point value may be rounded. Invalid values should be rejected\n with a DataTypeEncodeException.",
      "javadoc": "Encode bytes from an Object appropriate for this DataType.\n \u003cp\u003e\n Converts the given object to the byte encoding and returns it. When appropriate, this should\n seek the nearest encoding to the specified value, since the object may come from a user\n script. For example, a floating-point value may be rounded. Invalid values should be rejected\n with a {@link DataTypeEncodeException}.\n@param value the desired value.\n@param buf a buffer representing the eventual destination of the bytes.\n@param settings the settings to use.\n@param length the expected length of the result, usually the length of the data unit, or -1\n            to let the type choose the length. It may be ignored, e.g., for fixed-length\n            types.\n@return the encoded value.\n@throws DataTypeEncodeException if the value cannot be encoded for any reason, e.g.,\n             incorrect type, not enough space, buffer overflow, unsupported (see\n             {@link #isEncodable()}).",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the desired value."
        },
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "a buffer representing the eventual destination of the bytes."
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "the settings to use."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the expected length of the result, usually the length of the data unit, or -1\n            to let the type choose the length. It may be ignored, e.g., for fixed-length\n            types."
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the encoded value."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeEncodeException",
          "type_short": "DataTypeEncodeException",
          "comment": "if the value cannot be encoded for any reason, e.g.,\n             incorrect type, not enough space, buffer overflow, unsupported (see\n             #isEncodable())."
        }
      ]
    },
    {
      "name": "getValueClass",
      "comment": "Get the Class of the value to be returned by this datatype.",
      "javadoc": "Get the Class of the value to be returned by this datatype.\n@param settings the relevant settings to use or null for default.\n@return Class of the value to be returned by this datatype or null if it can vary or is\n         unspecified. Types which correspond to a string or char array will return the String\n         class.",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "the relevant settings to use or null for default."
        }
      ],
      "return": {
        "type_long": "java.lang.Class\u003c?\u003e",
        "type_short": "Class",
        "comment": "Class of the value to be returned by this datatype or null if it can vary or is\n         unspecified. Types which correspond to a string or char array will return the String\n         class."
      },
      "throws": []
    },
    {
      "name": "getDefaultLabelPrefix",
      "comment": "Returns the appropriate string to use as the default label prefix in the absence of any data.",
      "javadoc": "Returns the appropriate string to use as the default label prefix in the absence of any data.\n@return the default label prefix or null if none specified.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the default label prefix or null if none specified."
      },
      "throws": []
    },
    {
      "name": "getDefaultAbbreviatedLabelPrefix",
      "comment": "Returns the prefix to use for this datatype when an abbreviated prefix is desired.\n \n For example, some datatypes will built a large default label, at which is is more desirable\n to have a shortened prefix.",
      "javadoc": "Returns the prefix to use for this datatype when an abbreviated prefix is desired.\n \u003cp\u003e\n For example, some datatypes will built a large default label, at which is is more desirable\n to have a shortened prefix.\n@return the prefix to use for this datatype when an abbreviated prefix is desired. May return\n         null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the prefix to use for this datatype when an abbreviated prefix is desired. May return\n         null."
      },
      "throws": []
    },
    {
      "name": "getDefaultLabelPrefix",
      "comment": "Returns the appropriate string to use as the default label prefix.",
      "javadoc": "Returns the appropriate string to use as the default label prefix.\n@param buf memory buffer containing the bytes.\n@param settings the Settings object\n@param len the length of the data.\n@param options options for how to format the default label prefix.\n@return the default label prefix or null if none specified.",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "memory buffer containing the bytes."
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "the Settings object"
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "the length of the data."
        },
        {
          "name": "options",
          "type_long": "ghidra.program.model.data.DataTypeDisplayOptions",
          "type_short": "DataTypeDisplayOptions",
          "comment": "options for how to format the default label prefix."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the default label prefix or null if none specified."
      },
      "throws": []
    },
    {
      "name": "getDefaultOffcutLabelPrefix",
      "comment": "Returns the appropriate string to use as the default label prefix.\n \n This takes into account the fact that there exists a reference to the data that references\n offcutLength bytes into this type",
      "javadoc": "Returns the appropriate string to use as the default label prefix.\n \u003cp\u003e\n This takes into account the fact that there exists a reference to the data that references\n \u003ccode\u003eoffcutLength\u003c/code\u003e bytes into this type\n@param buf memory buffer containing the bytes.\n@param settings the Settings object\n@param len the length of the data.\n@param options options for how to format the default label prefix.\n@param offcutOffset offset into datatype\n@return the default label prefix.",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "memory buffer containing the bytes."
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "the Settings object"
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "the length of the data."
        },
        {
          "name": "options",
          "type_long": "ghidra.program.model.data.DataTypeDisplayOptions",
          "type_short": "DataTypeDisplayOptions",
          "comment": "options for how to format the default label prefix."
        },
        {
          "name": "offcutOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset into datatype"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the default label prefix."
      },
      "throws": []
    },
    {
      "name": "getRepresentation",
      "comment": "Get bytes from memory in a printable format for this type.",
      "javadoc": "Get bytes from memory in a printable format for this type.\n@param buf the data.\n@param settings the settings to use for the representation.\n@param length the number of bytes to represent.\n@return the representation of the data in this format, never null.",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "the data."
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "the settings to use for the representation."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to represent."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the representation of the data in this format, never null."
      },
      "throws": []
    },
    {
      "name": "encodeRepresentation",
      "comment": "Encode bytes according to the display format for this type.\n \n Converts the given representation to the byte encoding and returns it. When appropriate, this\n should seek the nearest encoding to the specified value, since the representation is likely\n coming from user input. For example, a floating-point value may be rounded. Invalid\n representations should be rejected with a DataTypeEncodeException.",
      "javadoc": "Encode bytes according to the display format for this type.\n \u003cp\u003e\n Converts the given representation to the byte encoding and returns it. When appropriate, this\n should seek the nearest encoding to the specified value, since the representation is likely\n coming from user input. For example, a floating-point value may be rounded. Invalid\n representations should be rejected with a {@link DataTypeEncodeException}.\n@param repr the representation of the desired value, as in\n            {@link #getRepresentation(MemBuffer, Settings, int)}. The supported formats depend\n            on the specific datatype and its settings.\n@param buf a buffer representing the eventual destination of the bytes.\n@param settings the settings to use for the representation.\n@param length the expected length of the result, usually the length of the data unit, or -1\n            to let the type choose the length. It may be ignored, e.g., for fixed-length\n            types.\n@return the encoded value.\n@throws DataTypeEncodeException if the value cannot be encoded for any reason, e.g.,\n             incorrect format, not enough space, buffer overflow, unsupported (see\n             {@link #isEncodable()}).",
      "static": false,
      "params": [
        {
          "name": "repr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the representation of the desired value, as in\n            #getRepresentation(MemBuffer, Settings, int). The supported formats depend\n            on the specific datatype and its settings."
        },
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "a buffer representing the eventual destination of the bytes."
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "the settings to use for the representation."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the expected length of the result, usually the length of the data unit, or -1\n            to let the type choose the length. It may be ignored, e.g., for fixed-length\n            types."
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the encoded value."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeEncodeException",
          "type_short": "DataTypeEncodeException",
          "comment": "if the value cannot be encoded for any reason, e.g.,\n             incorrect format, not enough space, buffer overflow, unsupported (see\n             #isEncodable())."
        }
      ]
    },
    {
      "name": "isDeleted",
      "comment": "Returns true if this datatype has been deleted and is no longer valid",
      "javadoc": "Returns true if this datatype has been deleted and is no longer valid\n@return true if this datatype has been deleted and is no longer valid.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this datatype has been deleted and is no longer valid."
      },
      "throws": []
    },
    {
      "name": "isEquivalent",
      "comment": "Check if the given datatype is equivalent to this datatype.\n \n The precise meaning of \"equivalent\" is datatype dependent. \n NOTE: if invoked by a DB object or manager it should be invoked on the DataTypeDB object\n passing the other datatype as the argument.",
      "javadoc": "Check if the given datatype is equivalent to this datatype.\n \u003cp\u003e\n The precise meaning of \"equivalent\" is datatype dependent. \u003cbr\u003e\n NOTE: if invoked by a DB object or manager it should be invoked on the DataTypeDB object\n passing the other datatype as the argument.\n@param dt the datatype being tested for equivalence.\n@return true if the if the given datatype is equivalent to this datatype.",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype being tested for equivalence."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the if the given datatype is equivalent to this datatype."
      },
      "throws": []
    },
    {
      "name": "dataTypeSizeChanged",
      "comment": "Notification that the given datatype\u0027s size has changed.\n \n DataTypes may need to make internal changes in response. \n TODO: This method is reserved for internal DB use. ",
      "javadoc": "Notification that the given datatype\u0027s size has changed.\n \u003cp\u003e\n DataTypes may need to make internal changes in response. \u003cbr\u003e\n TODO: This method is reserved for internal DB use. \u003cbr\u003e\n@param dt the datatype that has changed.",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype that has changed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeAlignmentChanged",
      "comment": "Notification that the given datatype\u0027s alignment has changed.\n \n DataTypes may need to make internal changes in response. \n TODO: This method is reserved for internal DB use. ",
      "javadoc": "Notification that the given datatype\u0027s alignment has changed.\n \u003cp\u003e\n DataTypes may need to make internal changes in response. \u003cbr\u003e\n TODO: This method is reserved for internal DB use. \u003cbr\u003e\n@param dt the datatype that has changed.",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype that has changed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeDeleted",
      "comment": "Informs this datatype that the given datatype has been deleted.\n \n TODO: This method is reserved for internal DB use. ",
      "javadoc": "Informs this datatype that the given datatype has been deleted.\n \u003cp\u003e\n TODO: This method is reserved for internal DB use. \u003cbr\u003e\n@param dt the datatype that has been deleted.",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype that has been deleted."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeReplaced",
      "comment": "Informs this datatype that the given oldDT has been replaced with newDT\n \n TODO: This method is reserved for internal DB use. ",
      "javadoc": "Informs this datatype that the given oldDT has been replaced with newDT\n \u003cp\u003e\n TODO: This method is reserved for internal DB use. \u003cbr\u003e\n@param oldDt old datatype\n@param newDt new datatype",
      "static": false,
      "params": [
        {
          "name": "oldDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "old datatype"
        },
        {
          "name": "newDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "new datatype"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDefaultSettings",
      "comment": "Set the default settings for this datatype.\n \n TODO: This method is reserved for internal DB use. ",
      "javadoc": "Set the default settings for this datatype.\n \u003cp\u003e\n TODO: This method is reserved for internal DB use. \u003cbr\u003e\n@param settings the settings to be used as this dataTypes default settings.",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "the settings to be used as this dataTypes default settings."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addParent",
      "comment": "Inform this datatype that it has the given parent\n \n TODO: This method is reserved for internal DB use. ",
      "javadoc": "Inform this datatype that it has the given parent\n \u003cp\u003e\n TODO: This method is reserved for internal DB use. \u003cbr\u003e\n@param dt parent datatype",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "parent datatype"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeParent",
      "comment": "Remove a parent datatype\n \n TODO: This method is reserved for internal DB use. ",
      "javadoc": "Remove a parent datatype\n \u003cp\u003e\n TODO: This method is reserved for internal DB use. \u003cbr\u003e\n@param dt parent datatype",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "parent datatype"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeNameChanged",
      "comment": "Informs this datatype that its name has changed from the indicated old name.\n \n TODO: This method is reserved for internal DB use. ",
      "javadoc": "Informs this datatype that its name has changed from the indicated old name.\n \u003cp\u003e\n TODO: This method is reserved for internal DB use. \u003cbr\u003e\n@param dt the datatype whose name changed\n@param oldName the datatype\u0027s old name",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype whose name changed"
        },
        {
          "name": "oldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the datatype\u0027s old name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParents",
      "comment": "Get the parents of this datatype",
      "javadoc": "Get the parents of this datatype\n@return an array of parents of this datatype",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType[]",
        "type_short": "ghidra.program.model.data.DataType[]",
        "comment": "an array of parents of this datatype"
      },
      "throws": []
    },
    {
      "name": "getAlignment",
      "comment": "Gets the alignment to be used when aligning this datatype within another datatype.",
      "javadoc": "Gets the alignment to be used when aligning this datatype within another datatype.\n@return this datatype\u0027s alignment.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "this datatype\u0027s alignment."
      },
      "throws": []
    },
    {
      "name": "dependsOn",
      "comment": "Check if this datatype depends on the existence of the given datatype.\n \n For example byte[] depends on byte. If byte were deleted, then byte[] would also be deleted.",
      "javadoc": "Check if this datatype depends on the existence of the given datatype.\n \u003cp\u003e\n For example byte[] depends on byte. If byte were deleted, then byte[] would also be deleted.\n@param dt the datatype to test that this datatype depends on.\n@return true if the existence of this datatype relies on the existence of the specified\n         datatype dt.",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to test that this datatype depends on."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the existence of this datatype relies on the existence of the specified\n         datatype dt."
      },
      "throws": []
    },
    {
      "name": "getSourceArchive",
      "comment": "Get the source archive where this type originated",
      "javadoc": "Get the source archive where this type originated\n@return source archive object",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.SourceArchive",
        "type_short": "SourceArchive",
        "comment": "source archive object"
      },
      "throws": []
    },
    {
      "name": "setSourceArchive",
      "comment": "Set the source archive where this type originated",
      "javadoc": "Set the source archive where this type originated\n@param archive source archive object",
      "static": false,
      "params": [
        {
          "name": "archive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": "source archive object"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLastChangeTime",
      "comment": "Get the timestamp corresponding to the last time this type was changed within its datatype\n manager",
      "javadoc": "Get the timestamp corresponding to the last time this type was changed within its datatype\n manager\n@return timestamp of last change within datatype manager",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "timestamp of last change within datatype manager"
      },
      "throws": []
    },
    {
      "name": "getLastChangeTimeInSourceArchive",
      "comment": "Get the timestamp corresponding to the last time this type was sync\u0027d within its source\n archive",
      "javadoc": "Get the timestamp corresponding to the last time this type was sync\u0027d within its source\n archive\n@return timestamp of last sync with source archive",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "timestamp of last sync with source archive"
      },
      "throws": []
    },
    {
      "name": "getUniversalID",
      "comment": "Get the universal ID for this datatype.\n \n This value is intended to be a unique identifier across all programs and archives. The same\n ID indicates that two datatypes were originally the same one. Keep in mind names, categories,\n and component makeup may differ and have changed since there origin.",
      "javadoc": "Get the universal ID for this datatype.\n \u003cp\u003e\n This value is intended to be a unique identifier across all programs and archives. The same\n ID indicates that two datatypes were originally the same one. Keep in mind names, categories,\n and component makeup may differ and have changed since there origin.\n@return datatype UniversalID",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.UniversalID",
        "type_short": "UniversalID",
        "comment": "datatype UniversalID"
      },
      "throws": []
    },
    {
      "name": "replaceWith",
      "comment": "For datatypes that support change, this method replaces the internals of this datatype with\n the internals of the given datatype.\n \n The datatypes must be of the same \"type\" (i.e. structure can only be replacedWith another\n structure.",
      "javadoc": "For datatypes that support change, this method replaces the internals of this datatype with\n the internals of the given datatype.\n \u003cp\u003e\n The datatypes must be of the same \"type\" (i.e. structure can only be replacedWith another\n structure.\n@param datatype the datatype that contains the internals to upgrade to.\n@throws UnsupportedOperationException if the datatype does not support change.\n@throws IllegalArgumentException if the given datatype is not the same type as this datatype.",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLastChangeTime",
      "comment": "Sets the lastChangeTime for this datatype.\n \n Normally, this is updated automatically when a datatype is changed, but when committing or\n updating while synchronizing an archive, the lastChangeTime may need to be updated\n externally.",
      "javadoc": "Sets the lastChangeTime for this datatype.\n \u003cp\u003e\n Normally, this is updated automatically when a datatype is changed, but when committing or\n updating while synchronizing an archive, the lastChangeTime may need to be updated\n externally.\n@param lastChangeTime the time to use as the lastChangeTime for this datatype",
      "static": false,
      "params": [
        {
          "name": "lastChangeTime",
          "type_long": "long",
          "type_short": "long",
          "comment": "the time to use as the lastChangeTime for this datatype"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLastChangeTimeInSourceArchive",
      "comment": "Sets the lastChangeTimeInSourceArchive for this datatype.\n \n This is used by when a datatype change is committed back to its source archive.",
      "javadoc": "Sets the lastChangeTimeInSourceArchive for this datatype.\n \u003cp\u003e\n This is used by when a datatype change is committed back to its source archive.\n@param lastChangeTimeInSourceArchive the time to use as the lastChangeTimeInSourceArchive for\n            this datatype",
      "static": false,
      "params": [
        {
          "name": "lastChangeTimeInSourceArchive",
          "type_long": "long",
          "type_short": "long",
          "comment": "the time to use as the lastChangeTimeInSourceArchive for\n            this datatype"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataOrganization",
      "comment": "Returns the DataOrganization associated with this data-type",
      "javadoc": "Returns the DataOrganization associated with this data-type\n@return associated data organization",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataOrganization",
        "type_short": "DataOrganization",
        "comment": "associated data organization"
      },
      "throws": []
    }
  ]
}
