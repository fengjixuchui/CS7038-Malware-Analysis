{
  "name": "CompositeDataTypeImpl",
  "comment": "Common implementation methods for structure and union",
  "javadoc": "Common implementation methods for structure and union",
  "static": false,
  "implements": [
    "ghidra.program.model.data.CompositeInternal"
  ],
  "extends": "ghidra.program.model.data.GenericDataType",
  "fields": [
    {
      "name": "ALIGN_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"aligned\""
    },
    {
      "name": "PACKING_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"pack\""
    },
    {
      "name": "DISABLED_PACKING_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"disabled\""
    },
    {
      "name": "DEFAULT_PACKING_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\""
    },
    {
      "name": "description",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "minimumAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "packing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new composite with the given name",
      "javadoc": "Construct a new composite with the given name\n@param path the category path indicating where this\n                                      data type is located.\n@param name the name of the new structure\n@param universalID the id for the data type\n@param sourceArchive the source archive for this data type\n@param lastChangeTime the last time this data type was changed\n@param lastChangeTimeInSourceArchive the last time this data type was changed\n                                      in its source archive.\n@param dtm the data type manager associated with\n                                      this data type. This can be null. Also,\n                                      the data type manager may not yet\n                                      contain this actual data type.",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the category path indicating where this\n                                      data type is located."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the new structure"
        },
        {
          "name": "universalID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": "the id for the data type"
        },
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": "the source archive for this data type"
        },
        {
          "name": "lastChangeTime",
          "type_long": "long",
          "type_short": "long",
          "comment": "the last time this data type was changed"
        },
        {
          "name": "lastChangeTimeInSourceArchive",
          "type_long": "long",
          "type_short": "long",
          "comment": "the last time this data type was changed\n                                      in its source archive."
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "the data type manager associated with\n                                      this data type. This can be null. Also,\n                                      the data type manager may not yet\n                                      contain this actual data type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStoredPackingValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStoredMinimumAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeNameChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "oldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPreferredComponentLength",
      "comment": "Get the preferred length for a new component. For Unions and internally\n aligned structures the preferred component length for a fixed-length dataType\n will be the length of that dataType. Otherwise the length returned will be no\n larger than the specified length.",
      "javadoc": "Get the preferred length for a new component. For Unions and internally\n aligned structures the preferred component length for a fixed-length dataType\n will be the length of that dataType. Otherwise the length returned will be no\n larger than the specified length.\n@param dataType new component datatype\n@param length constrained length or -1 to force use of dataType size.\n                 Dynamic types such as string must have a positive length\n                 specified.\n@return preferred component length",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "new component datatype"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "constrained length or -1 to force use of dataType size.\n                 Dynamic types such as string must have a positive length\n                 specified."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "preferred component length"
      },
      "throws": []
    },
    {
      "name": "hasLanguageDependantLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isNotYetDefined",
      "comment": "Determine if this composite should be treated as undefined.\n \n A composite is considered undefined with a zero-length when it has \n no components and packing is disabled.  A DataTypeComponent defined by an\n an datatype which is not-yet-defined (i.e., DataType#isNotYetDefined() is true) \n will always have a size of 1.  If an empty composite should be treated as \n fully specified, packing on the composite should be enabled to ensure that \n a zero-length component is used should the occassion arise (e.g., empty structure \n placed within union as a component).",
      "javadoc": "Determine if this composite should be treated as undefined.\n \u003cp\u003e\n A composite is considered undefined with a zero-length when it has \n no components and packing is disabled.  A {@link DataTypeComponent} defined by an\n an datatype which is not-yet-defined (i.e., {@link DataType#isNotYetDefined()} is true) \n will always have a size of 1.  If an empty composite should be treated as \n fully specified, packing on the composite should be enabled to ensure that \n a zero-length component is used should the occassion arise (e.g., empty structure \n placed within union as a component).",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPartOf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeOfInterest",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkAncestry",
      "comment": "This method throws an exception if the indicated data type is an ancestor of\n this data type. In other words, the specified data type has a component or\n sub-component containing this data type.",
      "javadoc": "This method throws an exception if the indicated data type is an ancestor of\n this data type. In other words, the specified data type has a component or\n sub-component containing this data type.\n@param dataType the data type\n@throws IllegalArgumentException if the data type is an ancestor of this data\n                                  type.",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if the data type is an ancestor of this data\n                                  type."
        }
      ]
    },
    {
      "name": "validateDataType",
      "comment": "This method throws an exception if the indicated data type is not a valid\n data type for a component of this composite data type.  If the DEFAULT \n datatype is specified when unsupported an Undefined1 will be returned \n in its place (e.g., packing enabled, Union).",
      "javadoc": "This method throws an exception if the indicated data type is not a valid\n data type for a component of this composite data type.  If the DEFAULT \n datatype is specified when unsupported an Undefined1 will be returned \n in its place (e.g., packing enabled, Union).\n@param dataType the data type to be checked.\n@return datatype to be used for insert/add\n@throws IllegalArgumentException if the data type is invalid.",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type to be checked."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "datatype to be used for insert/add"
      },
      "throws": []
    },
    {
      "name": "updateBitFieldDataType",
      "comment": "Handle replacement of datatype which may impact bitfield datatype.",
      "javadoc": "Handle replacement of datatype which may impact bitfield datatype.\n@param bitfieldComponent bitfield component\n@param oldDt affected datatype which has been removed or replaced\n@param newDt replacement datatype\n@return true if bitfield component was modified\n@throws InvalidDataTypeException if new datatype is not",
      "static": false,
      "params": [
        {
          "name": "bitfieldComponent",
          "type_long": "ghidra.program.model.data.DataTypeComponentImpl",
          "type_short": "DataTypeComponentImpl",
          "comment": "bitfield component"
        },
        {
          "name": "oldDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "affected datatype which has been removed or replaced"
        },
        {
          "name": "newDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "replacement datatype"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if bitfield component was modified"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": "if new datatype is not"
        }
      ]
    },
    {
      "name": "setDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "desc",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "fieldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insert",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insert",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMnemonic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "repack",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "repack",
      "comment": "Repack components within this composite based on the current packing, alignment \n and DataOrganization settings.  Non-packed Structures: change detection\n is limited to component count and length is assumed to already be correct.\n \n NOTE: If modifications to stored length are made prior to invoking this method, \n detection of a size change may not be possible.  \n \n NOTE: Currently a change in calculated alignment can not be provided since\n this value is not stored.",
      "javadoc": "Repack components within this composite based on the current packing, alignment \n and {@link DataOrganization} settings.  Non-packed Structures: change detection\n is limited to component count and length is assumed to already be correct.\n \u003cp\u003e\n NOTE: If modifications to stored length are made prior to invoking this method, \n detection of a size change may not be possible.  \n \u003cp\u003e\n NOTE: Currently a change in calculated alignment can not be provided since\n this value is not stored.\n@param notify if true notification will be sent to parents if a size change\n or component placement change is detected.\n@return true if a layout change was detected.",
      "static": false,
      "params": [
        {
          "name": "notify",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true notification will be sent to parents if a size change\n or component placement change is detected."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a layout change was detected."
      },
      "throws": []
    },
    {
      "name": "setPackingEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPackingType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.PackingType",
        "type_short": "PackingType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToDefaultPacking",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExplicitPackingValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setExplicitPackingValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "packingValue",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStoredPackingValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "packingValue",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAlignmentType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.AlignmentType",
        "type_short": "AlignmentType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToDefaultAligned",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToMachineAligned",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExplicitMinimumAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setExplicitMinimumAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "minimumAlignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStoredMinimumAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "minimumAlignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNonPackedAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
