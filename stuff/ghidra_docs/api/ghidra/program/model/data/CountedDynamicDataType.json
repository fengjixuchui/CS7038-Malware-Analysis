{
  "name": "CountedDynamicDataType",
  "comment": "A dynamic data type that changes the number of elements it contains based on a count found in\n header data type.\n The data type has a header data type which will contain the number of base data types following\n the header data type.\n \n NOTE: This is a special Dynamic data-type which can only appear as a component\n created by a Dynamic data-type",
  "javadoc": "A dynamic data type that changes the number of elements it contains based on a count found in\n header data type.\n The data type has a header data type which will contain the number of base data types following\n the header data type.\n \n NOTE: This is a special Dynamic data-type which can only appear as a component\n created by a Dynamic data-type",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.data.DynamicDataType",
  "fields": [
    {
      "name": "description",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "header",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "baseStruct",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "counterOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "counterSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "mask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for this dynamic data type builder.",
      "javadoc": "Constructor for this dynamic data type builder.\n@param name name of this dynamic data type\n@param description description of the data type\n@param header header data type that will contain the number of following elements\n@param baseStruct base data type for each of the following elements\n@param counterOffset offset of the number of following elements from the start of the header\n@param counterSize size of the count in bytes\n@param mask mask to apply to the count value to get the actual number of following elements.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of this dynamic data type"
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "description of the data type"
        },
        {
          "name": "header",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "header data type that will contain the number of following elements"
        },
        {
          "name": "baseStruct",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "base data type for each of the following elements"
        },
        {
          "name": "counterOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "offset of the number of following elements from the start of the header"
        },
        {
          "name": "counterSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of the count in bytes"
        },
        {
          "name": "mask",
          "type_long": "long",
          "type_short": "long",
          "comment": "mask to apply to the count value to get the actual number of following elements."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clone",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllComponents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent[]",
        "type_short": "ghidra.program.model.data.DataTypeComponent[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepresentation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMnemonic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCount",
      "comment": "Extract the size of the data type from the given location in memory",
      "javadoc": "Extract the size of the data type from the given location in memory\n@param memory the memory to get the size from\n@param loc the address in memory where the size is located\n@return the size",
      "static": false,
      "params": [
        {
          "name": "memory",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": "the memory to get the size from"
        },
        {
          "name": "loc",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address in memory where the size is located"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the size"
      },
      "throws": []
    }
  ]
}
