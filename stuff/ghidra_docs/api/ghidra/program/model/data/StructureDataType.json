{
  "name": "StructureDataType",
  "comment": "Basic implementation of the structure data type.\n NOTES: \n \n Implementation is not thread safe when being modified.\n For a structure to treated as having a zero-length (see #isZeroLength()) it \n \n ",
  "javadoc": "Basic implementation of the structure data type.\n NOTES: \n \u003cul\u003e\n \u003cli\u003eImplementation is not thread safe when being modified.\u003c/li\u003e\n \u003cli\u003eFor a structure to treated as having a zero-length (see {@link #isZeroLength()}) it \n \n \u003c/ul\u003e",
  "static": false,
  "implements": [
    "ghidra.program.model.data.StructureInternal"
  ],
  "extends": "ghidra.program.model.data.CompositeDataTypeImpl",
  "fields": [
    {
      "name": "structLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "structAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "numComponents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "components",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.data.DataTypeComponentImpl\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new structure with the given name and length. The root category will be used.",
      "javadoc": "Construct a new structure with the given name and length. The root category will be used.\n@param name the name of the new structure\n@param length the initial size of the structure in bytes. If 0 is specified the structure\n            will report its length as 1 and {@link #isNotYetDefined()} will return true.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the new structure"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the initial size of the structure in bytes. If 0 is specified the structure\n            will report its length as 1 and #isNotYetDefined() will return true."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new structure with the given name, length and datatype manager which conveys data\n organization. The root category will be used.",
      "javadoc": "Construct a new structure with the given name, length and datatype manager which conveys data\n organization. The root category will be used.\n@param name the name of the new structure\n@param length the initial size of the structure in bytes. If 0 is specified the structure\n            will report its length as 1 and {@link #isNotYetDefined()} will return true.\n@param dtm the data type manager associated with this data type. This can be null. Also, the\n            data type manager may not yet contain this actual data type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the new structure"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the initial size of the structure in bytes. If 0 is specified the structure\n            will report its length as 1 and #isNotYetDefined() will return true."
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "the data type manager associated with this data type. This can be null. Also, the\n            data type manager may not yet contain this actual data type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new structure with the given name and length within the specified categry path.",
      "javadoc": "Construct a new structure with the given name and length within the specified categry path.\n@param path the category path indicating where this data type is located.\n@param name the name of the new structure\n@param length the initial size of the structure in bytes. If 0 is specified the structure\n            will report its length as 1 and {@link #isNotYetDefined()} will return true.",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the category path indicating where this data type is located."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the new structure"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the initial size of the structure in bytes. If 0 is specified the structure\n            will report its length as 1 and #isNotYetDefined() will return true."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new structure with the given name, length and datatype manager within the\n specified categry path.",
      "javadoc": "Construct a new structure with the given name, length and datatype manager within the\n specified categry path.\n@param path the category path indicating where this data type is located.\n@param name the name of the new structure\n@param length the initial size of the structure in bytes. If 0 is specified the structure\n            will report its length as 1 and {@link #isNotYetDefined()} will return true.\n@param dtm the data type manager associated with this data type. This can be null. Also, the\n            data type manager may not yet contain this actual data type.",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the category path indicating where this data type is located."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the new structure"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the initial size of the structure in bytes. If 0 is specified the structure\n            will report its length as 1 and #isNotYetDefined() will return true."
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "the data type manager associated with this data type. This can be null. Also, the\n            data type manager may not yet contain this actual data type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new structure with the given name and length",
      "javadoc": "Construct a new structure with the given name and length\n@param path the category path indicating where this data type is located.\n@param name the name of the new structure\n@param length the initial size of the structure in bytes. If 0 is specified the structure\n            will report its length as 1 and {@link #isNotYetDefined()} will return true.\n@param universalID the id for the data type\n@param sourceArchive the source archive for this data type\n@param lastChangeTime the last time this data type was changed\n@param lastChangeTimeInSourceArchive the last time this data type was changed in its source\n            archive.\n@param dtm the data type manager associated with this data type. This can be null. Also, the\n            data type manager may not yet contain this actual data type.",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the category path indicating where this data type is located."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the new structure"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the initial size of the structure in bytes. If 0 is specified the structure\n            will report its length as 1 and #isNotYetDefined() will return true."
        },
        {
          "name": "universalID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": "the id for the data type"
        },
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": "the source archive for this data type"
        },
        {
          "name": "lastChangeTime",
          "type_long": "long",
          "type_short": "long",
          "comment": "the last time this data type was changed"
        },
        {
          "name": "lastChangeTimeInSourceArchive",
          "type_long": "long",
          "type_short": "long",
          "comment": "the last time this data type was changed in its source\n            archive."
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "the data type manager associated with this data type. This can be null. Also, the\n            data type manager may not yet contain this actual data type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepresentation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefinedComponentAtOrAfterOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponentContaining",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponentsContaining",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.data.DataTypeComponent\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generateUndefinedComponent",
      "comment": "Generate an undefined component following a binary search across the defined components.",
      "javadoc": "Generate an undefined component following a binary search across the defined components.\n@param offset the offset within this structure which was searched for\n@param missingComponentIndex the defined component binary search index result (must be negative)\n@return undefined component",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset within this structure which was searched for"
        },
        {
          "name": "missingComponentIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the defined component binary search index result (must be negative)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponentImpl",
        "type_short": "DataTypeComponentImpl",
        "comment": "undefined component"
      },
      "throws": []
    },
    {
      "name": "getDataTypeAt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isZeroLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasLanguageDependantLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "delete",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doDelete",
      "comment": "Removes a defined component at the specified index without\n any alteration to other components.",
      "javadoc": "Removes a defined component at the specified index without\n any alteration to other components.\n@param index defined component index\n@return the defined component which was removed.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "defined component index"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponentImpl",
        "type_short": "DataTypeComponentImpl",
        "comment": "the defined component which was removed."
      },
      "throws": []
    },
    {
      "name": "doDeleteWithComponentShift",
      "comment": "Removes a defined component at the specified index.\n If this corresponds to a zero-length or bit-field component it will \n be cleared without an offset shift to the remaining components.  Removal of\n other component types will result in an offset and ordinal shift\n to the remaining components.",
      "javadoc": "Removes a defined component at the specified index.\n If this corresponds to a zero-length or bit-field component it will \n be cleared without an offset shift to the remaining components.  Removal of\n other component types will result in an offset and ordinal shift\n to the remaining components.\n@param index defined component index\n@param disableOffsetShift if false, and component is not a bit-field, an offset shift\n and possible structure length change will be performed for non-packed structure.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "defined component index"
        },
        {
          "name": "disableOffsetShift",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if false, and component is not a bit-field, an offset shift\n and possible structure length change will be performed for non-packed structure."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "delete",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ordinals",
          "type_long": "java.util.Set\u003cjava.lang.Integer\u003e",
          "type_short": "Set",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "shiftOffsets",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "deltaOrdinal",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "deltaOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "shiftOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dtc",
          "type_long": "ghidra.program.model.data.DataTypeComponentImpl",
          "type_short": "DataTypeComponentImpl",
          "comment": ""
        },
        {
          "name": "deltaOrdinal",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "deltaOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponentImpl",
        "type_short": "DataTypeComponentImpl",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumComponents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumDefinedComponents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insertAtOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponentImpl",
        "type_short": "DataTypeComponentImpl",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insertAtOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "componentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponentImpl",
        "type_short": "DataTypeComponentImpl",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": ""
        }
      ]
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "componentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doAdd",
      "comment": "Add a new component to the end of this structure.\n \n NOTE: This method differs from inserting to the end the structure for the non-packed case in\n that this method will always grow the structure by the positive length specified while the\n insert may limit its growth by the length of a smaller fixed-length dataType.",
      "javadoc": "Add a new component to the end of this structure.\n \u003cp\u003e\n NOTE: This method differs from inserting to the end the structure for the non-packed case in\n that this method will always grow the structure by the positive length specified while the\n insert may limit its growth by the length of a smaller fixed-length dataType.\n@param dataType component data type\n@param length maximum component length or -1 to use length of fixed-length dataType after\n            applying structures data organization as determined by data type manager. If\n            dataType is Dynamic, a positive length must be specified.\n@param componentName component name\n@param comment component comment\n@param packAndNotify if true perform repack and provide change notification\n@return newly added component\n@throws IllegalArgumentException if the specified data type is not allowed to be added to\n             this composite data type or an invalid length is specified.",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "component data type"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "maximum component length or -1 to use length of fixed-length dataType after\n            applying structures data organization as determined by data type manager. If\n            dataType is Dynamic, a positive length must be specified."
        },
        {
          "name": "componentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "component name"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "component comment"
        },
        {
          "name": "packAndNotify",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true perform repack and provide change notification"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": "newly added component"
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if the specified data type is not allowed to be added to\n             this composite data type or an invalid length is specified."
        }
      ]
    },
    {
      "name": "growStructure",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "amount",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insert",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "componentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IndexOutOfBoundsException",
          "type_short": "IndexOutOfBoundsException",
          "comment": ""
        },
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBitField",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "baseDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "bitSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "componentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": ""
        }
      ]
    },
    {
      "name": "insertBitField",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "byteWidth",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bitOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "baseDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "bitSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "componentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": ""
        },
        {
          "type_long": "java.lang.IndexOutOfBoundsException",
          "type_short": "IndexOutOfBoundsException",
          "comment": ""
        }
      ]
    },
    {
      "name": "insertBitFieldAt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "byteOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "byteWidth",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bitOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "baseDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "bitSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "componentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponentImpl",
        "type_short": "DataTypeComponentImpl",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": ""
        }
      ]
    },
    {
      "name": "backupToFirstComponentContainingOffset",
      "comment": "Backup from specified defined-component index to the first component which contains the specified offset.",
      "javadoc": "Backup from specified defined-component index to the first component which contains the specified offset.\n@param index any defined component index which contains offset\n@param offset offset within structure\n@return index of first defined component containing specific offset.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "any defined component index which contains offset"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset within structure"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "index of first defined component containing specific offset."
      },
      "throws": []
    },
    {
      "name": "indexOfFirstNonZeroLenComponentContainingOffset",
      "comment": "Identify defined-component index of the first non-zero-length component which contains the specified offset.\n If only zero-length components exist, the last zero-length component which contains the offset will be returned.",
      "javadoc": "Identify defined-component index of the first non-zero-length component which contains the specified offset.\n If only zero-length components exist, the last zero-length component which contains the offset will be returned.\n@param index any defined component index which contains offset\n@param offset offset within structure\n@return index of first defined component containing specific offset.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "any defined component index which contains offset"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset within structure"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "index of first defined component containing specific offset."
      },
      "throws": []
    },
    {
      "name": "advanceToLastComponentContainingOffset",
      "comment": "Advance from specified defined-component index to the last component which contains the specified offset.",
      "javadoc": "Advance from specified defined-component index to the last component which contains the specified offset.\n@param index any defined component index which contains offset\n@param offset offset within structure\n@return index of last defined component containing specific offset.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "any defined component index which contains offset"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset within structure"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "index of last defined component containing specific offset."
      },
      "throws": []
    },
    {
      "name": "deleteAtOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearAtOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEquivalent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeSizeChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeAlignmentChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "consumeBytesAfter",
      "comment": "",
      "javadoc": "@param definedComponentIndex the index of the defined component that is consuming the bytes.\n@param numBytes the number of undefined bytes to consume\n@return the number of bytes actually consumed",
      "static": false,
      "params": [
        {
          "name": "definedComponentIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the defined component that is consuming the bytes."
        },
        {
          "name": "numBytes",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of undefined bytes to consume"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of bytes actually consumed"
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "Create copy of structure for target dtm (source archive information is discarded). \n \n WARNING! copying non-packed structures which contain bitfields can produce invalid results when\n switching endianess due to the differences in packing order.",
      "javadoc": "Create copy of structure for target dtm (source archive information is discarded). \n \u003cp\u003e\n WARNING! copying non-packed structures which contain bitfields can produce invalid results when\n switching endianess due to the differences in packing order.\n@param dtm target data type manager\n@return cloned structure",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "target data type manager"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "cloned structure"
      },
      "throws": []
    },
    {
      "name": "clone",
      "comment": "Create cloned structure for target dtm preserving source archive information. WARNING!\n cloning non-packed structures which contain bitfields can produce invalid results when\n switching endianess due to the differences in packing order.",
      "javadoc": "Create cloned structure for target dtm preserving source archive information. WARNING!\n cloning non-packed structures which contain bitfields can produce invalid results when\n switching endianess due to the differences in packing order.\n@param dtm target data type manager\n@return cloned structure",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "target data type manager"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StructureDataType",
        "type_short": "StructureDataType",
        "comment": "cloned structure"
      },
      "throws": []
    },
    {
      "name": "clearComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "replaceWith",
      "comment": "Replaces the internal components of this structure with components of the given structure\n including packing and alignment settings.",
      "javadoc": "Replaces the internal components of this structure with components of the given structure\n including packing and alignment settings.\n@param dataType the structure to get the component information from.\n@throws IllegalArgumentException if any of the component data types are not allowed to\n             replace a component in this composite data type. For example, suppose dt1\n             contains dt2. Therefore it is not valid to replace a dt2 component with dt1 since\n             this would cause a cyclic dependency.",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the structure to get the component information from."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doReplaceWithPacked",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "struct",
          "type_long": "ghidra.program.model.data.Structure",
          "type_short": "Structure",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doReplaceWithNonPacked",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "struct",
          "type_long": "ghidra.program.model.data.Structure",
          "type_short": "Structure",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": ""
        }
      ]
    },
    {
      "name": "dataTypeDeleted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeReplaced",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "oldDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "replacementDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setComponentDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "comp",
          "type_long": "ghidra.program.model.data.DataTypeComponentImpl",
          "type_short": "DataTypeComponentImpl",
          "comment": ""
        },
        {
          "name": "newDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "nextIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefinedComponents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent[]",
        "type_short": "ghidra.program.model.data.DataTypeComponent[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent[]",
        "type_short": "ghidra.program.model.data.DataTypeComponent[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "replace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "replace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "componentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IndexOutOfBoundsException",
          "type_short": "IndexOutOfBoundsException",
          "comment": ""
        },
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": ""
        }
      ]
    },
    {
      "name": "replaceAtOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": ""
        }
      ]
    },
    {
      "name": "checkUndefinedSpaceAvailabilityAfter",
      "comment": "Check for available undefined bytes within a non-packed structure for a component\n update with the specified ordinal.",
      "javadoc": "Check for available undefined bytes within a non-packed structure for a component\n update with the specified ordinal.\n@param lastOrdinalReplacedOrUpdated the ordinal of a component to be updated\n or the last ordinal with in a sequence of components being replaced.\n@param bytesNeeded number of additional bytes required to complete operation\n@throws IllegalArgumentException if unable to identify/make sufficient space",
      "static": false,
      "params": [
        {
          "name": "lastOrdinalReplacedOrUpdated",
          "type_long": "int",
          "type_short": "int",
          "comment": "the ordinal of a component to be updated\n or the last ordinal with in a sequence of components being replaced."
        },
        {
          "name": "bytesNeeded",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of additional bytes required to complete operation"
        },
        {
          "name": "newDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if unable to identify/make sufficient space"
        }
      ]
    },
    {
      "name": "replaceComponents",
      "comment": "Replace the specified components with a new component containing the specified data type.\n If DataType#DEFAULT is specified as the resolvedDataType only a clear operation \n is performed.",
      "javadoc": "Replace the specified components with a new component containing the specified data type.\n If {@link DataType#DEFAULT} is specified as the resolvedDataType only a clear operation \n is performed.\n@param origComponents the original sequence of data type components in this structure \n        to be replaced.  These components must be adjacent components in sequential order.\n        If an non-packed undefined component is specified no other component may be included.\n@param dataType the data type of the new component\n@param newOffset offset of replacement component which must fall within origComponents bounds\n@param length the length of the new component\n@param name the field name of the new component\n@param comment the comment for the new component\n@return the new component or null if only a clear operation was performed.\n@throws IllegalArgumentException if unable to identify/make sufficient space",
      "static": false,
      "params": [
        {
          "name": "origComponents",
          "type_long": "java.util.LinkedList\u003cghidra.program.model.data.DataTypeComponentImpl\u003e",
          "type_short": "LinkedList",
          "comment": "the original sequence of data type components in this structure \n        to be replaced.  These components must be adjacent components in sequential order.\n        If an non-packed undefined component is specified no other component may be included."
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type of the new component"
        },
        {
          "name": "newOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset of replacement component which must fall within origComponents bounds"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the length of the new component"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the field name of the new component"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the comment for the new component"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": "the new component or null if only a clear operation was performed."
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if unable to identify/make sufficient space"
        }
      ]
    },
    {
      "name": "getLastDefinedComponentOrdinal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumUndefinedBytes",
      "comment": "Gets the number of Undefined bytes beginning at the indicated component index. Undefined\n bytes that have a field name or comment specified are also included.",
      "javadoc": "Gets the number of Undefined bytes beginning at the indicated component index. Undefined\n bytes that have a field name or comment specified are also included.\n@param index the component index to begin checking at.\n@return the number of contiguous undefined bytes",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the component index to begin checking at."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of contiguous undefined bytes"
      },
      "throws": []
    },
    {
      "name": "dependsOn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteAll",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultLabelPrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "repack",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "notify",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustNonPackedComponents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doGrowStructure",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "amount",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
