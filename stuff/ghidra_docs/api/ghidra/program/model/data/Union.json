{
  "name": "Union",
  "comment": "The union interface.\n \n NOTE: The use of bitfields within all unions assumes a default packing where bit allocation \n always starts with byte-0 of the union.  Bit allocation order is dictated by data organization\n endianess (byte-0 msb allocated first for big-endian, while byte-0 lsb allocated first for little-endian).",
  "javadoc": "The union interface.\n \u003cp\u003e\n NOTE: The use of bitfields within all unions assumes a default packing where bit allocation \n always starts with byte-0 of the union.  Bit allocation order is dictated by data organization\n endianess (byte-0 msb allocated first for big-endian, while byte-0 lsb allocated first for little-endian).",
  "static": false,
  "implements": [
    "ghidra.program.model.data.Composite"
  ],
  "fields": [],
  "methods": [
    {
      "name": "clone",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Union",
        "type_short": "Union",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insertBitField",
      "comment": "Inserts a new bitfield at the specified ordinal position in this union.\n For all Unions, bitfield starts with bit-0 (lsb) of the first byte \n for little-endian, and with bit-7 (msb) of the first byte for big-endian.  This is the \n default behavior for most compilers.  Insertion behavior may not work as expected if \n packing rules differ from this.",
      "javadoc": "Inserts a new bitfield at the specified ordinal position in this union.\n For all Unions, bitfield starts with bit-0 (lsb) of the first byte \n for little-endian, and with bit-7 (msb) of the first byte for big-endian.  This is the \n default behavior for most compilers.  Insertion behavior may not work as expected if \n packing rules differ from this.\n@param ordinal the ordinal where the new datatype is to be inserted.\n@param baseDataType the bitfield base datatype (certain restrictions apply).\n@param bitSize the declared bitfield size in bits.  The effective bit size may be\n adjusted based upon the specified baseDataType.\n@param componentName the field name to associate with this component.\n@param comment the comment to associate with this component.\n@return the bitfield component created whose associated data type will\n be BitFieldDataType.\n@throws InvalidDataTypeException if the specified baseDataType is\n not a valid base type for bitfields.\n@throws IndexOutOfBoundsException if ordinal is less than 0 or greater than the \n current number of components.",
      "static": false,
      "params": [
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": "the ordinal where the new datatype is to be inserted."
        },
        {
          "name": "baseDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the bitfield base datatype (certain restrictions apply)."
        },
        {
          "name": "bitSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the declared bitfield size in bits.  The effective bit size may be\n adjusted based upon the specified baseDataType."
        },
        {
          "name": "componentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the field name to associate with this component."
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the comment to associate with this component."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": "the bitfield component created whose associated data type will\n be BitFieldDataType."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": "if the specified baseDataType is\n not a valid base type for bitfields."
        },
        {
          "type_long": "java.lang.IndexOutOfBoundsException",
          "type_short": "IndexOutOfBoundsException",
          "comment": "if ordinal is less than 0 or greater than the \n current number of components."
        }
      ]
    }
  ]
}
