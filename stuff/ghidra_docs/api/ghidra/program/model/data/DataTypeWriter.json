{
  "name": "DataTypeWriter",
  "comment": "A class used to convert data types into ANSI-C.\n\n The ANSI-C code should compile on most platforms.",
  "javadoc": "A class used to convert data types into ANSI-C.\n\n The ANSI-C code should compile on most platforms.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "INTEGRAL_TYPES",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "INTEGRAL_MODIFIERS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "EOL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "resolved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cghidra.program.model.data.DataType\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "resolvedTypeMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.program.model.data.DataType\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "deferredCompositeDeclarations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cghidra.program.model.data.Composite\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "deferredTypeFIFO",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayDeque\u003cghidra.program.model.data.DataType\u003e",
      "type_short": "ArrayDeque",
      "constant_value": null
    },
    {
      "name": "deferredTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cghidra.program.model.data.DataType\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "writerDepth",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "writer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.Writer",
      "type_short": "Writer",
      "constant_value": null
    },
    {
      "name": "dtm",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataTypeManager",
      "type_short": "DataTypeManager",
      "constant_value": null
    },
    {
      "name": "dataOrganization",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataOrganization",
      "type_short": "DataOrganization",
      "constant_value": null
    },
    {
      "name": "annotator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.AnnotationHandler",
      "type_short": "AnnotationHandler",
      "constant_value": null
    },
    {
      "name": "cppStyleComments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new instance of this class using the given writer. The default annotation\n handler is used.",
      "javadoc": "Constructs a new instance of this class using the given writer. The default annotation\n handler is used.\n@param dtm data-type manager corresponding to target program or null for default\n@param writer the writer to use when writing data types\n@throws IOException if there is an exception writing the output",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "data-type manager corresponding to target program or null for default"
        },
        {
          "name": "writer",
          "type_long": "java.io.Writer",
          "type_short": "Writer",
          "comment": "the writer to use when writing data types"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception writing the output"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new instance of this class using the given writer. The default annotation\n handler is used.",
      "javadoc": "Constructs a new instance of this class using the given writer. The default annotation\n handler is used.\n@param dtm data-type manager corresponding to target program or null for default\n@param writer the writer to use when writing data types\n@param cppStyleComments whether to use C++ style comments\n@throws IOException if there is an exception writing the output",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "data-type manager corresponding to target program or null for default"
        },
        {
          "name": "writer",
          "type_long": "java.io.Writer",
          "type_short": "Writer",
          "comment": "the writer to use when writing data types"
        },
        {
          "name": "cppStyleComments",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "whether to use C++ style comments"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception writing the output"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new instance of this class using the given writer and annotation handler",
      "javadoc": "Constructs a new instance of this class using the given writer and annotation handler\n@param dtm data-type manager corresponding to target program or null for default\n@param writer the writer to use when writing data types\n@param annotator the annotation handler to use to annotate the data types\n@throws IOException if there is an exception writing the output",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "data-type manager corresponding to target program or null for default"
        },
        {
          "name": "writer",
          "type_long": "java.io.Writer",
          "type_short": "Writer",
          "comment": "the writer to use when writing data types"
        },
        {
          "name": "annotator",
          "type_long": "ghidra.program.model.data.AnnotationHandler",
          "type_short": "AnnotationHandler",
          "comment": "the annotation handler to use to annotate the data types"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception writing the output"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new instance of this class using the given writer and annotation handler",
      "javadoc": "Constructs a new instance of this class using the given writer and annotation handler\n@param dtm data-type manager corresponding to target program or null for default\n@param writer the writer to use when writing data types\n@param annotator the annotation handler to use to annotate the data types\n@param cppStyleComments whether to use C++ style comments\n@throws IOException if there is an exception writing the output",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "data-type manager corresponding to target program or null for default"
        },
        {
          "name": "writer",
          "type_long": "java.io.Writer",
          "type_short": "Writer",
          "comment": "the writer to use when writing data types"
        },
        {
          "name": "annotator",
          "type_long": "ghidra.program.model.data.AnnotationHandler",
          "type_short": "AnnotationHandler",
          "comment": "the annotation handler to use to annotate the data types"
        },
        {
          "name": "cppStyleComments",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "whether to use C++ style comments"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception writing the output"
        }
      ]
    },
    {
      "name": "comment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "write",
      "comment": "Converts all data types in the data type manager into ANSI-C code.",
      "javadoc": "Converts all data types in the data type manager into ANSI-C code.\n@param dataTypeManager the manager containing the data types to write\n@param monitor the task monitor\n@throws IOException if there is an exception writing the output\n@throws CancelledException if the action is cancelled by the user",
      "static": false,
      "params": [
        {
          "name": "dataTypeManager",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "the manager containing the data types to write"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception writing the output"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the action is cancelled by the user"
        }
      ]
    },
    {
      "name": "write",
      "comment": "Converts all data types in the category into ANSI-C code.",
      "javadoc": "Converts all data types in the category into ANSI-C code.\n@param category the category containing the datatypes to write\n@param monitor the task monitor\n@throws IOException if there is an exception writing the output\n@throws CancelledException if the action is cancelled by the user",
      "static": false,
      "params": [
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": "the category containing the datatypes to write"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception writing the output"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the action is cancelled by the user"
        }
      ]
    },
    {
      "name": "write",
      "comment": "Converts all data types in the array into ANSI-C code.",
      "javadoc": "Converts all data types in the array into ANSI-C code.\n@param dataTypes the data types to write\n@param monitor the task monitor\n@throws IOException if there is an exception writing the output\n@throws CancelledException if the action is cancelled by the user",
      "static": false,
      "params": [
        {
          "name": "dataTypes",
          "type_long": "ghidra.program.model.data.DataType[]",
          "type_short": "ghidra.program.model.data.DataType[]",
          "comment": "the data types to write"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception writing the output"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the action is cancelled by the user"
        }
      ]
    },
    {
      "name": "write",
      "comment": "Converts all data types in the list into ANSI-C code.",
      "javadoc": "Converts all data types in the list into ANSI-C code.\n@param dataTypes the data types to write\n@param monitor the task monitor\n@throws IOException if there is an exception writing the output\n@throws CancelledException if the action is cancelled by the user",
      "static": false,
      "params": [
        {
          "name": "dataTypes",
          "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "List",
          "comment": "the data types to write"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception writing the output"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the action is cancelled by the user"
        }
      ]
    },
    {
      "name": "write",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypes",
          "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "throwExceptionOnInvalidType",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "deferWrite",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "write",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "write",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "throwExceptionOnInvalidType",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "doWrite",
      "comment": "Writes the data type as ANSI-C using the underlying writer.",
      "javadoc": "Writes the data type as ANSI-C using the underlying writer.\n@param dt the data type to write as ANSI-C\n@param monitor the task monitor\n@throws IOException if there is an exception writing the output",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type to write as ANSI-C"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        },
        {
          "name": "throwExceptionOnInvalidType",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception writing the output"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeDeferredDeclarations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBaseArrayTypedefType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "containsComposite",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "container",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        },
        {
          "name": "contained",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "writeDeferredCompositeDeclarations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "resortComposites",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cghidra.program.model.data.Composite\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDynamicComponentString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dynamicType",
          "type_long": "ghidra.program.model.data.Dynamic",
          "type_short": "Dynamic",
          "comment": ""
        },
        {
          "name": "fieldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "writeCompositePreDeclaration",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "composite",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeCompositeBody",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "composite",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "component",
          "type_long": "ghidra.program.model.data.DataTypeComponent",
          "type_short": "DataTypeComponent",
          "comment": ""
        },
        {
          "name": "composite",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        },
        {
          "name": "sb",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getTypeDeclaration",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "instanceLength",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "writeEnabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDataTypePrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "writeEnum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "enumm",
          "type_long": "ghidra.program.model.data.Enum",
          "type_short": "Enum",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeTypeDef",
      "comment": "Typedef Format: typedef  ",
      "javadoc": "Typedef Format: typedef \u003cTYPE_DEF_NAME\u003e \u003cBASE_TYPE_NAME\u003e\n@throws CancelledException if the action is cancelled by the user",
      "static": false,
      "params": [
        {
          "name": "typeDef",
          "type_long": "ghidra.program.model.data.TypeDef",
          "type_short": "TypeDef",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the action is cancelled by the user"
        }
      ]
    },
    {
      "name": "isIntegral",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "typedefName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "basetypeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "writeDynamicBuiltIn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.Dynamic",
          "type_short": "Dynamic",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeBuiltIn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.BuiltInDataType",
          "type_short": "BuiltInDataType",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeBuiltInDeclarations",
      "comment": "Write all built-in data types declarations into ANSI-C code. Those types whose name matches\n the corresponding primitive C-type. are not included.",
      "javadoc": "Write all built-in data types declarations into ANSI-C code. Those types whose name matches\n the corresponding primitive C-type. are not included.\n@throws IOException if there is an exception writing the output",
      "static": false,
      "params": [
        {
          "name": "manager",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception writing the output"
        }
      ]
    },
    {
      "name": "getArrayDimensions",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "arrayDt",
          "type_long": "ghidra.program.model.data.Array",
          "type_short": "Array",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBaseDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getArrayBaseType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "arrayDt",
          "type_long": "ghidra.program.model.data.Array",
          "type_short": "Array",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPointerBaseDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.data.Pointer",
          "type_short": "Pointer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPointerDepth",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.data.Pointer",
          "type_short": "Pointer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionPointerString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fd",
          "type_long": "ghidra.program.model.data.FunctionDefinition",
          "type_short": "FunctionDefinition",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "functionPointerArrayType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "writeEnabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getParameterListString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fd",
          "type_long": "ghidra.program.model.data.FunctionDefinition",
          "type_short": "FunctionDefinition",
          "comment": ""
        },
        {
          "name": "includeParamNames",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "writeEnabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    }
  ]
}
