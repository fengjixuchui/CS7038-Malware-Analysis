{
  "name": "BitFieldPackingImpl",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.program.model.data.BitFieldPacking"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "useMSConvention",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "typeAlignmentEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "zeroLengthBoundary",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "useMSConvention",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isTypeAlignmentEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getZeroLengthBoundary",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setUseMSConvention",
      "comment": "Control if the alignment and packing of bit-fields follows MSVC conventions.  \n When this is enabled it takes precedence over all other bitfield packing controls.",
      "javadoc": "Control if the alignment and packing of bit-fields follows MSVC conventions.  \n When this is enabled it takes precedence over all other bitfield packing controls.\n@param useMSConvention true if MSVC packing conventions are used, else false (e.g., GNU conventions apply).",
      "static": false,
      "params": [
        {
          "name": "useMSConvention",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if MSVC packing conventions are used, else false (e.g., GNU conventions apply)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTypeAlignmentEnabled",
      "comment": "Control whether the alignment of bit-field types is respected when laying out structures.\n Corresponds to PCC_BITFIELD_TYPE_MATTERS in gcc.",
      "javadoc": "Control whether the alignment of bit-field types is respected when laying out structures.\n Corresponds to PCC_BITFIELD_TYPE_MATTERS in gcc.\n@param typeAlignmentEnabled true if the alignment of the bit-field type should be used\n to impact the alignment of the containing structure, and ensure that individual bit-fields \n will not straddle an alignment boundary.",
      "static": false,
      "params": [
        {
          "name": "typeAlignmentEnabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the alignment of the bit-field type should be used\n to impact the alignment of the containing structure, and ensure that individual bit-fields \n will not straddle an alignment boundary."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setZeroLengthBoundary",
      "comment": "Indicate a fixed alignment size in bytes which should be used for zero-length bit-fields.",
      "javadoc": "Indicate a fixed alignment size in bytes which should be used for zero-length bit-fields.\n@param zeroLengthBoundary fixed alignment size as number of bytes for a bit-field \n which follows a zero-length bit-field.  A value of 0 causes zero-length type size to be used.",
      "static": false,
      "params": [
        {
          "name": "zeroLengthBoundary",
          "type_long": "int",
          "type_short": "int",
          "comment": "fixed alignment size as number of bytes for a bit-field \n which follows a zero-length bit-field.  A value of 0 causes zero-length type size to be used."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveXml",
      "comment": "Write configuration to a stream as an XML \\ tag",
      "javadoc": "Write configuration to a stream as an XML \\\u003cbitfield_packing\u003e tag\n@param buffer is the stream to write to",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the stream to write to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXml",
      "comment": "Restore settings from a \\ tag in an XML stream.\n The XML is designed to override existing settings from the default constructor",
      "javadoc": "Restore settings from a \\\u003cbitfield_packing\u003e tag in an XML stream.\n The XML is designed to override existing settings from the default constructor\n@param parser is the XML stream",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
