{
  "name": "DataTypeWithCharset",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.program.model.data.DataType"
  ],
  "fields": [],
  "methods": [
    {
      "name": "encodeCharacterValue",
      "comment": "Utility for character data types to encode a value.",
      "javadoc": "Utility for character data types to encode a value.\n@param value the character value to encode.\n@param buf a buffer representing the eventual destination of the bytes.\n@param settings the settings to use.\n@return the encoded value\n@throws DataTypeEncodeException if the value cannot be encoded",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the character value to encode."
        },
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "a buffer representing the eventual destination of the bytes."
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "the settings to use."
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the encoded value"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeEncodeException",
          "type_short": "DataTypeEncodeException",
          "comment": "if the value cannot be encoded"
        }
      ]
    },
    {
      "name": "encodeCharacterRepresentation",
      "comment": "Utility for character data types to encode a representation.",
      "javadoc": "Utility for character data types to encode a representation.\n@param repr the single-character string to encode.\n@param buf a buffer representing the eventual destination of the bytes.\n@param settings the settings to use.\n@return the encoded value\n@throws DataTypeEncodeException if the value cannot be encoded",
      "static": false,
      "params": [
        {
          "name": "repr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the single-character string to encode."
        },
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "a buffer representing the eventual destination of the bytes."
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "the settings to use."
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the encoded value"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeEncodeException",
          "type_short": "DataTypeEncodeException",
          "comment": "if the value cannot be encoded"
        }
      ]
    },
    {
      "name": "getCharsetName",
      "comment": "Get the character set for a specific data type and settings",
      "javadoc": "Get the character set for a specific data type and settings\n@param settings data instance settings\n@return Charset for this datatype and settings",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "data instance settings"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "Charset for this datatype and settings"
      },
      "throws": []
    }
  ]
}
