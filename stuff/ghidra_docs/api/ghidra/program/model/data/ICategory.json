{
  "name": "ICategory",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "DELIMITER_CHAR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "char",
      "type_short": "char",
      "constant_value": "/"
    },
    {
      "name": "NAME_DELIMITER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"/\""
    },
    {
      "name": "DELIMITER_STRING",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"/\""
    }
  ],
  "methods": [
    {
      "name": "getName",
      "comment": "Get the name of this category.",
      "javadoc": "Get the name of this category.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getCategories",
      "comment": "Get all categories in this category.",
      "javadoc": "Get all categories in this category.\n@return zero-length array if there are no categories",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.Category[]",
        "type_short": "ghidra.program.model.data.Category[]",
        "comment": "zero-length array if there are no categories"
      },
      "throws": []
    },
    {
      "name": "getDataTypes",
      "comment": "Get all data types in this category.",
      "javadoc": "Get all data types in this category.\n@return zero-length array if there are no data types",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType[]",
        "type_short": "ghidra.program.model.data.DataType[]",
        "comment": "zero-length array if there are no data types"
      },
      "throws": []
    },
    {
      "name": "addDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCategory",
      "comment": "Get a category with the given name.",
      "javadoc": "Get a category with the given name.\n@param name the name of the category\n@return null if there is no category by this name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the category"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": "null if there is no category by this name"
      },
      "throws": []
    },
    {
      "name": "getCategoryPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.CategoryPath",
        "type_short": "CategoryPath",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "Get a data type with the given name.",
      "javadoc": "Get a data type with the given name.\n@param name the name of the data type\n@return null if there is no data type by this name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the data type"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "null if there is no data type by this name"
      },
      "throws": []
    },
    {
      "name": "createCategory",
      "comment": "Create a category with the given name.",
      "javadoc": "Create a category with the given name.\n@param name the category name\n@throws DuplicateNameException if this category already contains a\n category or data type with the given name\n@throws InvalidNameException if name has invalid characters",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the category name"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if this category already contains a\n category or data type with the given name"
        },
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if name has invalid characters"
        }
      ]
    },
    {
      "name": "removeCategory",
      "comment": "Remove the named category from this category.",
      "javadoc": "Remove the named category from this category.\n@param name the name of the category to remove\n@param monitor the task monitor\n@return true if the category was removed",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the category to remove"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the category was removed"
      },
      "throws": []
    },
    {
      "name": "moveCategory",
      "comment": "Move the given category to this category; category is removed from\n its original parent category.",
      "javadoc": "Move the given category to this category; category is removed from\n its original parent category.\n@param category the category to move\n@throws DuplicateNameException if this category already contains a\n category or data type with the same name as the category param.",
      "static": false,
      "params": [
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": "the category to move"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if this category already contains a\n category or data type with the same name as the category param."
        }
      ]
    },
    {
      "name": "copyCategory",
      "comment": "Make a new subcategory from the given category.",
      "javadoc": "Make a new subcategory from the given category.\n@param category the category to copy into this category\n@return category that is added to this category",
      "static": false,
      "params": [
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": "the category to copy into this category"
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": "category that is added to this category"
      },
      "throws": []
    },
    {
      "name": "getParent",
      "comment": "Return this category\u0027s parent; return null if this is the root category.",
      "javadoc": "Return this category\u0027s parent; return null if this is the root category.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isRoot",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCategoryPathName",
      "comment": "Get the fully qualified name for this category.",
      "javadoc": "Get the fully qualified name for this category.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRoot",
      "comment": "Get the root category.",
      "javadoc": "Get the root category.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTypeManager",
      "comment": "Get the data type manager associated with this category.",
      "javadoc": "Get the data type manager associated with this category.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeManager",
        "type_short": "DataTypeManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveDataType",
      "comment": "",
      "javadoc": "@param type",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeDependencyException",
          "type_short": "DataTypeDependencyException",
          "comment": ""
        }
      ]
    },
    {
      "name": "remove",
      "comment": "",
      "javadoc": "@param type",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
