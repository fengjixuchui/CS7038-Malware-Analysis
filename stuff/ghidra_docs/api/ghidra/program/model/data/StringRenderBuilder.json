{
  "name": "StringRenderBuilder",
  "comment": "Helper class used to build up a formatted (for human consumption) string representation returned\n by Unicode and String data types.\n \n Call #toString() to retrieve the formatted string.\n \n Example (quotes are part of result): ",
  "javadoc": "Helper class used to build up a formatted (for human consumption) string representation returned\n by Unicode and String data types.\n \u003cp\u003e\n Call {@link #toString()} to retrieve the formatted string.\n \u003cp\u003e\n Example (quotes are part of result): {@code \"Test\\tstring\",01,02,\"Second\\npart\",00}",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DOUBLE_QUOTE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "char",
      "type_short": "char",
      "constant_value": "\""
    },
    {
      "name": "SINGLE_QUOTE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "char",
      "type_short": "char",
      "constant_value": "\u0027"
    },
    {
      "name": "MAX_ASCII",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "128"
    },
    {
      "name": "sb",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.StringBuilder",
      "type_short": "StringBuilder",
      "constant_value": null
    },
    {
      "name": "byteMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "quoteChar",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "char",
      "type_short": "char",
      "constant_value": null
    },
    {
      "name": "charSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "charSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "charSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "quoteChar",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "startsWithQuotedText",
      "comment": "Returns true if the current formatted string starts with a quoted text section,\n instead of a byte value section.  Useful to indicate if\n the string could have a prefix applied to it (ie. u8\"text\")\n ",
      "javadoc": "Returns true if the current formatted string starts with a quoted text section,\n instead of a byte value section.  Useful to indicate if\n the string could have a prefix applied to it (ie. u8\"text\")\n \u003cp\u003e\n@return boolean true if this string will start with a quoted text section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if this string will start with a quoted text section"
      },
      "throws": []
    },
    {
      "name": "addString",
      "comment": "Append the characters in the specified string. The added characters will\n be shown in a quoted text region.",
      "javadoc": "Append the characters in the specified string. The added characters will\n be shown in a quoted text region.\n@param str String to add",
      "static": false,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addEscapedChar",
      "comment": "Append the specified char after an escaping backslash \"\\\", ie\n ",
      "javadoc": "Append the specified char after an escaping backslash \"\\\", ie\n {@literal \"x\" -\u003e \"\\x\";}\n@param ch",
      "static": false,
      "params": [
        {
          "name": "ch",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addCodePointChar",
      "comment": "Add a single character.  It will be shown in a quoted text region.",
      "javadoc": "Add a single character.  It will be shown in a quoted text region.\n@param codePoint Character to add",
      "static": false,
      "params": [
        {
          "name": "codePoint",
          "type_long": "int",
          "type_short": "int",
          "comment": "Character to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addCodePointValue",
      "comment": "Add a single character that needs to be shown as a numeric hex value.",
      "javadoc": "Add a single character that needs to be shown as a numeric hex value.\n@param codePoint Character to add",
      "static": false,
      "params": [
        {
          "name": "codePoint",
          "type_long": "int",
          "type_short": "int",
          "comment": "Character to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addByteSeq",
      "comment": "Add byte values, shown as numeric hex values.\n \n ",
      "javadoc": "Add byte values, shown as numeric hex values.\n \u003cp\u003e\n {@literal { 0, 1, 2 } -\u003e 00,01,02}\n@param bytes to convert to hex and append.  If null, append \"???\"",
      "static": false,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "to convert to hex and append.  If null, append \"???\""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addEscapedCodePoint",
      "comment": "Add an unicode codepoint as its escaped hex value, with a escape character\n prefix of \u0027x\u0027, \u0027u\u0027 or \u0027U\u0027 depending on the magnitude of the codePoint value.\n \n \n \n ",
      "javadoc": "Add an unicode codepoint as its escaped hex value, with a escape character\n prefix of \u0027x\u0027, \u0027u\u0027 or \u0027U\u0027 depending on the magnitude of the codePoint value.\n \u003cp\u003e\n {@literal codePoint 15 -\u003e \u0027\\\u0027 \u0027x\u0027 \"0F\"}\u003cbr\u003e\n {@literal codePoint 65535 -\u003e \u0027\\\u0027 \u0027u\u0027 \"FFFF\"}\u003cbr\u003e\n {@literal codePoint 65536 -\u003e \u0027\\\u0027 \u0027U\u0027 \"10000\"}\u003cbr\u003e\n@param codePoint int value",
      "static": false,
      "params": [
        {
          "name": "codePoint",
          "type_long": "int",
          "type_short": "int",
          "comment": "int value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Example (quotes are part of result): \n ",
      "javadoc": "Example (quotes are part of result): {@code \"Test\\tstring\",01,02,\"Second\\npart\",00}\n \u003cp\u003e\n@return Formatted string",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "Formatted string"
      },
      "throws": []
    },
    {
      "name": "ensureTextMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "ensureByteMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
