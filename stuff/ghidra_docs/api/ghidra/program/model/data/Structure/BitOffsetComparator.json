{
  "name": "BitOffsetComparator",
  "comment": "BitOffsetComparator provides ability to compare an normalized bit offset (see\n #getNormalizedBitfieldOffset(int, int, int, int, boolean)) with a\n DataTypeComponent object. The offset will be considered equal (0) if the component\n contains the offset. A normalized component bit numbering is used to establish the footprint\n of each component with an ordinal-based ordering (assumes specific LE/BE allocation rules).\n Bit offsets for this comparator number the first allocated bit of the structure as 0 and the\n last allocated bit of the structure as (8 * structLength) - 1. For big-endian bitfields the\n msb of the bitfield will be assigned the lower bit-number (assumes msb-allocated-first),\n while little-endian will perform similar numbering assuming byte-swap and bit-reversal of the\n storage unit (assumes lsb-allocated-first). Both cases result in a normalized view where\n normalized bit-0 is allocated first.\n \n \n \n ",
  "javadoc": "\u003ccode\u003eBitOffsetComparator\u003c/code\u003e provides ability to compare an normalized bit offset (see\n {@link #getNormalizedBitfieldOffset(int, int, int, int, boolean)}) with a\n {@link DataTypeComponent} object. The offset will be considered equal (0) if the component\n contains the offset. A normalized component bit numbering is used to establish the footprint\n of each component with an ordinal-based ordering (assumes specific LE/BE allocation rules).\n Bit offsets for this comparator number the first allocated bit of the structure as 0 and the\n last allocated bit of the structure as (8 * structLength) - 1. For big-endian bitfields the\n msb of the bitfield will be assigned the lower bit-number (assumes msb-allocated-first),\n while little-endian will perform similar numbering assuming byte-swap and bit-reversal of the\n storage unit (assumes lsb-allocated-first). Both cases result in a normalized view where\n normalized bit-0 is allocated first.\n \n \u003cpre\u003e\n {@literal\n Example:\n    \n Big-Endian (normalized view):\n    | . . . . . . . 7 | 8 9 . . . . . . |\n    |\u003c---------------------------------\u003e| storage-size (2-bytes)\n                        |\u003c--------------| bit-offset (6, lsb position within storage unit)\n                    |\u003c---\u003e|               bit-size (3)\n                        \n Little-Endian (normalized view, w/ storage byte-swap and bit-reversal):\n    | . . . . . . 6 7 | 8 . . . . . . . |\n    |------------\u003e|                       bit-offset (6, lsb position within storage unit)\n                  |\u003c---\u003e|                 bit-size (3)\n }\n \u003c/pre\u003e",
  "static": true,
  "implements": [
    "java.util.Comparator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "INSTANCE_LE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Comparator\u003cjava.lang.Object\u003e",
      "type_short": "Comparator",
      "constant_value": null
    },
    {
      "name": "INSTANCE_BE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Comparator\u003cjava.lang.Object\u003e",
      "type_short": "Comparator",
      "constant_value": null
    },
    {
      "name": "bigEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "bigEndian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compare",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "o1",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "o2",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNormalizedBitfieldOffset",
      "comment": "Compute the normalized bit offset of a bitfield relative to the start of a structure.\n \n NOTE: This implementation currently relies only on endianess to dictate bit allocation\n ordering. If future support is added for alternate bitfield packing, this implementation\n will require modification.",
      "javadoc": "Compute the normalized bit offset of a bitfield relative to the start of a structure.\n \n NOTE: This implementation currently relies only on endianess to dictate bit allocation\n ordering. If future support is added for alternate bitfield packing, this implementation\n will require modification.\n@param byteOffset byte offset within structure of storage unit\n@param storageSize storage unit size (i.e., component length)\n@param effectiveBitSize size of bitfield in bits\n@param bitOffset left shift amount for bitfield based upon a big-endian view of the\n            storage unit\n@param bigEndian true if big-endian packing applies\n@return normalized bit-offset",
      "static": true,
      "params": [
        {
          "name": "byteOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "byte offset within structure of storage unit"
        },
        {
          "name": "storageSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "storage unit size (i.e., component length)"
        },
        {
          "name": "effectiveBitSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of bitfield in bits"
        },
        {
          "name": "bitOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "left shift amount for bitfield based upon a big-endian view of the\n            storage unit"
        },
        {
          "name": "bigEndian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if big-endian packing applies"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "normalized bit-offset"
      },
      "throws": []
    }
  ]
}
