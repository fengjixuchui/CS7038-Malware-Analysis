{
  "name": "BitGroup",
  "comment": "Class used to organize long values into sets of values with overlapping bits.\n For example, if you had values 1,2,3, 8, 12, you could partition them into two bit groups.\n The values 1,2,3, would be in one bit group because they all either use the \"1\" or \"2\" bit\n (If there was on \"3\", then 1 and 2 could be in separate groups). Also the values \"8\" and \"12\"\n are in the same group since they share the \"8\" bit.",
  "javadoc": "Class used to organize long values into sets of values with overlapping bits.\n For example, if you had values 1,2,3, 8, 12, you could partition them into two bit groups.\n The values 1,2,3, would be in one bit group because they all either use the \"1\" or \"2\" bit\n (If there was on \"3\", then 1 and 2 could be in separate groups). Also the values \"8\" and \"12\"\n are in the same group since they share the \"8\" bit.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "values",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cjava.lang.Long\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "mask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new BitGroup seeded with a value.",
      "javadoc": "Creates a new BitGroup seeded with a value.\n@param value the value to start the bit group.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the value to start the bit group."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "Tests if this bit group has any overlapping bits with the given bit group.",
      "javadoc": "Tests if this bit group has any overlapping bits with the given bit group.\n@param bitGroup the BitGroup to test for overlap.\n@return true if the groups have any bits in common.",
      "static": false,
      "params": [
        {
          "name": "bitGroup",
          "type_long": "ghidra.program.model.data.BitGroup",
          "type_short": "BitGroup",
          "comment": "the BitGroup to test for overlap."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the groups have any bits in common."
      },
      "throws": []
    },
    {
      "name": "merge",
      "comment": "Merges the given BitGroup into the group.  All of its values will be added to this\n group\u0027s values and the masks will be or\u0027ed together.",
      "javadoc": "Merges the given BitGroup into the group.  All of its values will be added to this\n group\u0027s values and the masks will be or\u0027ed together.\n@param bitGroup the BitGroup to merge into this one.",
      "static": false,
      "params": [
        {
          "name": "bitGroup",
          "type_long": "ghidra.program.model.data.BitGroup",
          "type_short": "BitGroup",
          "comment": "the BitGroup to merge into this one."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMask",
      "comment": "Returns the mask that represents all the bits that are used by the values in this\n BitGroup.",
      "javadoc": "Returns the mask that represents all the bits that are used by the values in this\n BitGroup.\n@return the mask that represents all the bits that are used by the values in this\n BitGroup.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the mask that represents all the bits that are used by the values in this\n BitGroup."
      },
      "throws": []
    },
    {
      "name": "getValues",
      "comment": "Gets the set of values that make up this BitGroup.",
      "javadoc": "Gets the set of values that make up this BitGroup.\n@return the set of values that make up this BitGroup.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cjava.lang.Long\u003e",
        "type_short": "Set",
        "comment": "the set of values that make up this BitGroup."
      },
      "throws": []
    }
  ]
}
