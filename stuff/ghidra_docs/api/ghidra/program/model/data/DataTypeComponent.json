{
  "name": "DataTypeComponent",
  "comment": "DataTypeComponents are holders for the dataTypes that make up composite (Structures\n and Unions) dataTypes.",
  "javadoc": "DataTypeComponents are holders for the dataTypes that make up composite (Structures\n and Unions) dataTypes.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "DEFAULT_FIELD_NAME_PREFIX",
      "comment": "The default prefix for the name of a component.",
      "javadoc": "The default prefix for the name of a component.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"field\""
    }
  ],
  "methods": [
    {
      "name": "getDataType",
      "comment": "Returns the dataType in this component.",
      "javadoc": "Returns the dataType in this component.\n@return the dataType in this component",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the dataType in this component"
      },
      "throws": []
    },
    {
      "name": "getParent",
      "comment": "returns the dataType that contains this component.",
      "javadoc": "returns the dataType that contains this component.\n@return the dataType that contains this component.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the dataType that contains this component."
      },
      "throws": []
    },
    {
      "name": "isBitFieldComponent",
      "comment": "Determine if the specified component corresponds to a bit-field.",
      "javadoc": "Determine if the specified component corresponds to a bit-field.\n@return true if bit-field else false",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if bit-field else false"
      },
      "throws": []
    },
    {
      "name": "isZeroBitFieldComponent",
      "comment": "Determine if the specified component corresponds to a zero-length bit-field.",
      "javadoc": "Determine if the specified component corresponds to a zero-length bit-field.\n@return true if zero-length bit-field else false",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if zero-length bit-field else false"
      },
      "throws": []
    },
    {
      "name": "getOrdinal",
      "comment": "Get the ordinal position within the parent dataType.",
      "javadoc": "Get the ordinal position within the parent dataType.\n@return ordinal of this component within the parent data type.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "ordinal of this component within the parent data type."
      },
      "throws": []
    },
    {
      "name": "getOffset",
      "comment": "Get the byte offset of where this component begins relative to the start of the parent\n data type.",
      "javadoc": "Get the byte offset of where this component begins relative to the start of the parent\n data type.\n@return offset of start of component relative to the start of the parent\n data type.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "offset of start of component relative to the start of the parent\n data type."
      },
      "throws": []
    },
    {
      "name": "getEndOffset",
      "comment": "Get the byte offset of where this component ends relative to the start of the parent\n data type.",
      "javadoc": "Get the byte offset of where this component ends relative to the start of the parent\n data type.\n@return offset of end of component relative to the start of the parent\n data type.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "offset of end of component relative to the start of the parent\n data type."
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Get the length of this component.  Zero-length components will report a length of 0\n and may overlap other components at the same offset.  Similarly, multiple adjacent \n bit-field components may appear to overlap at the byte-level.",
      "javadoc": "Get the length of this component.  Zero-length components will report a length of 0\n and may overlap other components at the same offset.  Similarly, multiple adjacent \n bit-field components may appear to overlap at the byte-level.\n@return the length of this component",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of this component"
      },
      "throws": []
    },
    {
      "name": "getComment",
      "comment": "Get the comment for this dataTypeComponent.",
      "javadoc": "Get the comment for this dataTypeComponent.\n@return component comment string or null if one has not been set",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "component comment string or null if one has not been set"
      },
      "throws": []
    },
    {
      "name": "getDefaultSettings",
      "comment": "Gets the default settings for this data type component.",
      "javadoc": "Gets the default settings for this data type component.\n@return a Settings object that is the set of default values for this dataType component",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.docking.settings.Settings",
        "type_short": "Settings",
        "comment": "a Settings object that is the set of default values for this dataType component"
      },
      "throws": []
    },
    {
      "name": "setDefaultSettings",
      "comment": "Set default settings for this dataType.",
      "javadoc": "Set default settings for this dataType.\n@param settings the new default settings.",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "the new default settings."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setComment",
      "comment": "Sets the comment for the component.",
      "javadoc": "Sets the comment for the component.\n@param comment this components comment or null to clear comment.",
      "static": false,
      "params": [
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "this components comment or null to clear comment."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFieldName",
      "comment": "Get the name of the field name as a component of a Data Type.",
      "javadoc": "Get the name of the field name as a component of a Data Type.\n@return the name as a component of another Data Type.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name as a component of another Data Type."
      },
      "throws": []
    },
    {
      "name": "setFieldName",
      "comment": "Sets the field name. If the field name is empty it will be set to null,\n which is the default field name. An exception is thrown if one of the\n parent\u0027s other components already has the specified field name.",
      "javadoc": "Sets the field name. If the field name is empty it will be set to null,\n which is the default field name. An exception is thrown if one of the\n parent\u0027s other components already has the specified field name.\n@param fieldName the new field name for this component.\n@throws DuplicateNameException if another component of the parent has\n the specified field name.",
      "static": false,
      "params": [
        {
          "name": "fieldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new field name for this component."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if another component of the parent has\n the specified field name."
        }
      ]
    },
    {
      "name": "getDefaultFieldName",
      "comment": "Returns a default Field name.  Used only if a field name is not set.",
      "javadoc": "Returns a default Field name.  Used only if a field name is not set.\n@return default field name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "default field name"
      },
      "throws": []
    },
    {
      "name": "isEquivalent",
      "comment": "Returns true if the given dataTypeComponent is equivalent to this dataTypeComponent.\n A dataTypeComponent is \"equivalent\" if the other component has a data type\n that is equivalent to this component\u0027s data type. The dataTypeComponents must\n also have the same offset, field name, and comment.  The length is only checked\n for components which are dyanmic and whose size must be specified when creating\n a component.",
      "javadoc": "Returns true if the given dataTypeComponent is equivalent to this dataTypeComponent.\n A dataTypeComponent is \"equivalent\" if the other component has a data type\n that is equivalent to this component\u0027s data type. The dataTypeComponents must\n also have the same offset, field name, and comment.  The length is only checked\n for components which are dyanmic and whose size must be specified when creating\n a component.\n@param dtc the dataTypeComponent being tested for equivalence.\n@return true if the given dataTypeComponent is equivalent to this dataTypeComponent.",
      "static": false,
      "params": [
        {
          "name": "dtc",
          "type_long": "ghidra.program.model.data.DataTypeComponent",
          "type_short": "DataTypeComponent",
          "comment": "the dataTypeComponent being tested for equivalence."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given dataTypeComponent is equivalent to this dataTypeComponent."
      },
      "throws": []
    },
    {
      "name": "usesZeroLengthComponent",
      "comment": "Determine if the specified dataType will be treated as a zero-length component\n allowing it to possibly overlap the next component.  If the specified dataType\n returns true for DataType#isZeroLength() and true for DataType#isNotYetDefined()\n this method will return false causing the associated component to use the reported dataType length \n of 1.",
      "javadoc": "Determine if the specified dataType will be treated as a zero-length component\n allowing it to possibly overlap the next component.  If the specified dataType\n returns true for {@link DataType#isZeroLength()} and true for {@link DataType#isNotYetDefined()}\n this method will return false causing the associated component to use the reported dataType length \n of 1.\n@param dataType datatype to be evaluated\n@return true if zero-length component",
      "static": true,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "datatype to be evaluated"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if zero-length component"
      },
      "throws": []
    }
  ]
}
