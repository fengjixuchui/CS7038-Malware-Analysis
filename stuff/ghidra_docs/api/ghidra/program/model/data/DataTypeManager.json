{
  "name": "DataTypeManager",
  "comment": "Interface for Managing data types.",
  "javadoc": "Interface for Managing data types.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "DEFAULT_DATATYPE_ID",
      "comment": "ID for the default (undefined) data type.",
      "javadoc": "ID for the default (undefined) data type.",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "0"
    },
    {
      "name": "NULL_DATATYPE_ID",
      "comment": "ID if data type type is not known in this data type manager.",
      "javadoc": "ID if data type type is not known in this data type manager.",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "-1"
    },
    {
      "name": "BAD_DATATYPE_ID",
      "comment": "ID if data type type is BAD.",
      "javadoc": "ID if data type type is BAD.",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "-2"
    },
    {
      "name": "BUILT_IN_DATA_TYPES_NAME",
      "comment": "Name of the category for the build in data types.",
      "javadoc": "Name of the category for the build in data types.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"BuiltInTypes\""
    },
    {
      "name": "LOCAL_ARCHIVE_KEY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "0"
    },
    {
      "name": "BUILT_IN_ARCHIVE_KEY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "LOCAL_ARCHIVE_UNIVERSAL_ID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.util.UniversalID",
      "type_short": "UniversalID",
      "constant_value": null
    },
    {
      "name": "BUILT_IN_ARCHIVE_UNIVERSAL_ID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.util.UniversalID",
      "type_short": "UniversalID",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getUniversalID",
      "comment": "Returns the universal ID for this dataType manager",
      "javadoc": "Returns the universal ID for this dataType manager\n@return the universal ID for this dataType manager",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.UniversalID",
        "type_short": "UniversalID",
        "comment": "the universal ID for this dataType manager"
      },
      "throws": []
    },
    {
      "name": "containsCategory",
      "comment": "Returns true if the given category path exists in this datatype manager",
      "javadoc": "Returns true if the given category path exists in this datatype manager\n@param path the path\n@return true if the given category path exists in this datatype manager",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the path"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given category path exists in this datatype manager"
      },
      "throws": []
    },
    {
      "name": "getUniqueName",
      "comment": "Returns a unique name not currently used by any other dataType or category\n with the same baseName",
      "javadoc": "Returns a unique name not currently used by any other dataType or category\n with the same baseName\n@param path the path of the name\n@param baseName the base name to be made unique\n@return a unique name starting with baseName",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the path of the name"
        },
        {
          "name": "baseName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the base name to be made unique"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a unique name starting with baseName"
      },
      "throws": []
    },
    {
      "name": "resolve",
      "comment": "Returns a dataType that is \"in\" (ie suitable implementation) this\n Manager, creating a new one if necessary.  Also the returned dataType\n will be in a category in this dataTypeManager that is equivalent to the\n category of the passed in dataType.",
      "javadoc": "Returns a dataType that is \"in\" (ie suitable implementation) this\n Manager, creating a new one if necessary.  Also the returned dataType\n will be in a category in this dataTypeManager that is equivalent to the\n category of the passed in dataType.\n@param dataType the dataType to be resolved.\n@param handler used to resolve conflicts with existing dataTypes.\n@return an equivalent dataType that \"belongs\" to this dataTypeManager.",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the dataType to be resolved."
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": "used to resolve conflicts with existing dataTypes."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "an equivalent dataType that \"belongs\" to this dataTypeManager."
      },
      "throws": []
    },
    {
      "name": "addDataType",
      "comment": "Returns a data type after adding it to this data manager.\n The returned dataType will be in a category in this dataTypeManager\n that is equivalent to the category of the passed in dataType.",
      "javadoc": "Returns a data type after adding it to this data manager.\n The returned dataType will be in a category in this dataTypeManager\n that is equivalent to the category of the passed in dataType.\n@param dataType the dataType to be resolved.\n@param handler used to resolve conflicts with existing dataTypes.\n@return an equivalent dataType that \"belongs\" to this dataTypeManager.",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the dataType to be resolved."
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": "used to resolve conflicts with existing dataTypes."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "an equivalent dataType that \"belongs\" to this dataTypeManager."
      },
      "throws": []
    },
    {
      "name": "addDataTypes",
      "comment": "Sequentially adds a collection of datatypes to this data manager.\n This method provides the added benefit of equivalence caching\n for improved performance.\n \n WARNING: This is an experimental method whose use may cause the GUI and\n task monitor to become unresponsive due to extended hold times on the manager lock.",
      "javadoc": "Sequentially adds a collection of datatypes to this data manager.\n This method provides the added benefit of equivalence caching\n for improved performance.\n \u003cbr\u003e\n WARNING: This is an experimental method whose use may cause the GUI and\n task monitor to become unresponsive due to extended hold times on the manager lock.\n@param dataTypes collection of datatypes\n@param handler conflict handler\n@param monitor task monitor\n@throws CancelledException if monitor is cancelled",
      "static": false,
      "params": [
        {
          "name": "dataTypes",
          "type_long": "java.util.Collection\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "Collection",
          "comment": "collection of datatypes"
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": "conflict handler"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if monitor is cancelled"
        }
      ]
    },
    {
      "name": "getAllDataTypes",
      "comment": "Returns an iterator over all the dataTypes in this manager",
      "javadoc": "Returns an iterator over all the dataTypes in this manager\n@return an iterator over all the dataTypes in this manager",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.data.DataType\u003e",
        "type_short": "Iterator",
        "comment": "an iterator over all the dataTypes in this manager"
      },
      "throws": []
    },
    {
      "name": "getAllDataTypes",
      "comment": "Adds all data types to the specified list.]",
      "javadoc": "Adds all data types to the specified list.]\n@param list the result list into which the types will be placed",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "List",
          "comment": "the result list into which the types will be placed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllStructures",
      "comment": "Returns an iterator over all structures in this manager",
      "javadoc": "Returns an iterator over all structures in this manager\n@return the iterator",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.data.Structure\u003e",
        "type_short": "Iterator",
        "comment": "the iterator"
      },
      "throws": []
    },
    {
      "name": "getAllComposites",
      "comment": "Returns an iterator over all composite data types (structures and unions) in this manager",
      "javadoc": "Returns an iterator over all composite data types (structures and unions) in this manager\n@return the iterator",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.data.Composite\u003e",
        "type_short": "Iterator",
        "comment": "the iterator"
      },
      "throws": []
    },
    {
      "name": "findDataTypes",
      "comment": "Begin searching at the root category for all data types with the\n given name. Places all the data types in this data type manager\n with the given name into the list.",
      "javadoc": "Begin searching at the root category for all data types with the\n given name. Places all the data types in this data type manager\n with the given name into the list.\n@param name name of the data type\n@param list list that will be populated with matching DataType objects",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the data type"
        },
        {
          "name": "list",
          "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "List",
          "comment": "list that will be populated with matching DataType objects"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findDataTypes",
      "comment": "Begin searching at the root category for all data types with names\n that match the given name that may contain wildcards.",
      "javadoc": "Begin searching at the root category for all data types with names\n that match the given name that may contain wildcards.\n@param name name to match; may contain wildcards\n@param list list that will be populated with matching DataType objects\n@param caseSensitive true if the match is case sensitive\n@param monitor task monitor to cancel the search",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name to match; may contain wildcards"
        },
        {
          "name": "list",
          "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "List",
          "comment": "list that will be populated with matching DataType objects"
        },
        {
          "name": "caseSensitive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the match is case sensitive"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor to cancel the search"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "replaceDataType",
      "comment": "Replace an existing dataType with another.  All instances and references will be updated to\n use the replacement dataType.",
      "javadoc": "Replace an existing dataType with another.  All instances and references will be updated to\n use the replacement dataType.\n@param existingDt the dataType to be replaced.\n@param replacementDt the dataType to use as the replacement.\n@param updateCategoryPath if true, the replacementDt will have its categoryPath changed\n to the exitingDt\u0027s path.\n@return the resolved replacement dataType.\n@throws DataTypeDependencyException if the replacement datatype depends on\n the existing dataType;",
      "static": false,
      "params": [
        {
          "name": "existingDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the dataType to be replaced."
        },
        {
          "name": "replacementDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the dataType to use as the replacement."
        },
        {
          "name": "updateCategoryPath",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the replacementDt will have its categoryPath changed\n to the exitingDt\u0027s path."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the resolved replacement dataType."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeDependencyException",
          "type_short": "DataTypeDependencyException",
          "comment": "if the replacement datatype depends on\n the existing dataType;"
        }
      ]
    },
    {
      "name": "getDataType",
      "comment": "Retrieve the data type with the fully qualified path. So you can get the data named\n \"bar\" in the category \"foo\" by calling getDataType(\"/foo/bar\").  This method can\n be problematic now that datatype names can contain slashes.  It will work provided\n that the part of the datatype name that precedes its internal slash is not also the\n name of a category in the same category as the datatype.  For example, if you call\n getDataType(\"/a/b/c\"), and \"b/c\" is the name of your datatype, it will find it unless\n there is also a category \"b\" under category \"a\".  A better solution is to use\n the #getDataType(DataTypePath) method because the DataTypePath keeps the\n category and datatype name separate.",
      "javadoc": "Retrieve the data type with the fully qualified path. So you can get the data named\n \"bar\" in the category \"foo\" by calling getDataType(\"/foo/bar\").  This method can\n be problematic now that datatype names can contain slashes.  It will work provided\n that the part of the datatype name that precedes its internal slash is not also the\n name of a category in the same category as the datatype.  For example, if you call\n getDataType(\"/a/b/c\"), and \"b/c\" is the name of your datatype, it will find it unless\n there is also a category \"b\" under category \"a\".  A better solution is to use\n the {@link #getDataType(DataTypePath)} method because the DataTypePath keeps the\n category and datatype name separate.\n@param dataTypePath path\n@return the dataType or null if it isn\u0027t found",
      "static": false,
      "params": [
        {
          "name": "dataTypePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the dataType or null if it isn\u0027t found"
      },
      "throws": []
    },
    {
      "name": "findDataType",
      "comment": "Gets the dataType for the given path. See #getDataType(String) for details.",
      "javadoc": "Gets the dataType for the given path. See {@link #getDataType(String)} for details.\n@param dataTypePath dataType path\n@return dataType at the given path\n@deprecated use {@link #getDataType(String)} or better yet {@link #getDataType(DataTypePath)}",
      "static": false,
      "params": [
        {
          "name": "dataTypePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "dataType path"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "dataType at the given path"
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "Find the dataType for the given dataTypePath.",
      "javadoc": "Find the dataType for the given dataTypePath.\n@param dataTypePath the DataTypePath for the datatype\n@return the datatype for the given path.",
      "static": false,
      "params": [
        {
          "name": "dataTypePath",
          "type_long": "ghidra.program.model.data.DataTypePath",
          "type_short": "DataTypePath",
          "comment": "the DataTypePath for the datatype"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the datatype for the given path."
      },
      "throws": []
    },
    {
      "name": "getResolvedID",
      "comment": "Returns the dataTypeId for the given dataType.  If the dataType is not\n currently in the dataTypeManger, it will be added",
      "javadoc": "Returns the dataTypeId for the given dataType.  If the dataType is not\n currently in the dataTypeManger, it will be added\n@param dt the data type\n@return the ID of the resolved type",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the ID of the resolved type"
      },
      "throws": []
    },
    {
      "name": "getID",
      "comment": "Returns the dataTypeId for the given dataType.  If the dataType does not exist,\n a -1 will be returned",
      "javadoc": "Returns the dataTypeId for the given dataType.  If the dataType does not exist,\n a -1 will be returned\n@param dt the datatype to get an id for\n@return the ID of the type",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to get an id for"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the ID of the type"
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "Returns the dataType associated with the given dataTypeId or null if the dataTypeId is\n not valid",
      "javadoc": "Returns the dataType associated with the given dataTypeId or null if the dataTypeId is\n not valid\n@param dataTypeID the ID\n@return the type",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the type"
      },
      "throws": []
    },
    {
      "name": "getCategory",
      "comment": "Returns the Category with the given id",
      "javadoc": "Returns the Category with the given id\n@param categoryID id of the desired category\n@return the category",
      "static": false,
      "params": [
        {
          "name": "categoryID",
          "type_long": "long",
          "type_short": "long",
          "comment": "id of the desired category"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": "the category"
      },
      "throws": []
    },
    {
      "name": "getCategory",
      "comment": "Get the category that has the given path",
      "javadoc": "Get the category that has the given path\n@param path the path\n@return the category if defined, otherwise null",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the path"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": "the category if defined, otherwise null"
      },
      "throws": []
    },
    {
      "name": "dataTypeChanged",
      "comment": "Notification when data type is changed.",
      "javadoc": "Notification when data type is changed.\n@param dataType data type that is changed\n@param isAutoChange true if change was an automatic change in response to\n another datatype\u0027s change (e.g., size, alignment).",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "data type that is changed"
        },
        {
          "name": "isAutoChange",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if change was an automatic change in response to\n another datatype\u0027s change (e.g., size, alignment)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDataTypeManagerListener",
      "comment": "Add a listener that is notified when the dataTypeManger changes.",
      "javadoc": "Add a listener that is notified when the dataTypeManger changes.\n@param l the listener",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.program.model.data.DataTypeManagerChangeListener",
          "type_short": "DataTypeManagerChangeListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeDataTypeManagerListener",
      "comment": "Remove the DataTypeManger change listener.",
      "javadoc": "Remove the DataTypeManger change listener.\n@param l the listener",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.program.model.data.DataTypeManagerChangeListener",
          "type_short": "DataTypeManagerChangeListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addInvalidatedListener",
      "comment": "Adds a listener that will be notified when this manager\u0027s cache is invalidated.  This will\n happen when the system has changed and the manager cannot determine the exact change, like\n during an undo or a redo.",
      "javadoc": "Adds a listener that will be notified when this manager\u0027s cache is invalidated.  This will\n happen when the system has changed and the manager cannot determine the exact change, like\n during an undo or a redo.\n@param listener The listener to add",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.program.model.data.InvalidatedListener",
          "type_short": "InvalidatedListener",
          "comment": "The listener to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeInvalidatedListener",
      "comment": "Removes a previously added InvalidatedListener",
      "javadoc": "Removes a previously added InvalidatedListener\n@param listener the listener to remove.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.program.model.data.InvalidatedListener",
          "type_short": "InvalidatedListener",
          "comment": "the listener to remove."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Remove the given datatype from this manager",
      "javadoc": "Remove the given datatype from this manager\n@param dataType the dataType to be removed\n@param monitor the task monitor\n@return true if the data type existed and was removed",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the dataType to be removed"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the data type existed and was removed"
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Return true if the given dataType exists in this data type manager",
      "javadoc": "Return true if the given dataType exists in this data type manager\n@param dataType the type\n@return true if the type is in this manager",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the type"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the type is in this manager"
      },
      "throws": []
    },
    {
      "name": "createCategory",
      "comment": "Create a category for the given path; returns the current category if it already exits",
      "javadoc": "Create a category for the given path; returns the current category if it already exits\n@param path the path\n@return the category",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the path"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": "the category"
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "Gets the data type with the indicated name in the indicated category.",
      "javadoc": "Gets the data type with the indicated name in the indicated category.\n@param path the path for the category\n@param name the data type\u0027s name\n@return the data type.",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the path for the category"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the data type\u0027s name"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the data type."
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns this data type manager\u0027s name",
      "javadoc": "Returns this data type manager\u0027s name\n@return the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "Sets this data type manager\u0027s name",
      "javadoc": "Sets this data type manager\u0027s name\n@param name the new name\n@throws InvalidNameException if the given name is invalid (such as when null or empty)",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the given name is invalid (such as when null or empty)"
        }
      ]
    },
    {
      "name": "startTransaction",
      "comment": "Starts a transaction for making changes in this data type manager.",
      "javadoc": "Starts a transaction for making changes in this data type manager.\n@param description a short description of the changes to be made.\n@return the transaction ID",
      "static": false,
      "params": [
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a short description of the changes to be made."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the transaction ID"
      },
      "throws": []
    },
    {
      "name": "isUpdatable",
      "comment": "Returns true if this DataTypeManager can be modified.",
      "javadoc": "Returns true if this DataTypeManager can be modified.\n@return true if this DataTypeMangaer can be modified.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this DataTypeMangaer can be modified."
      },
      "throws": []
    },
    {
      "name": "endTransaction",
      "comment": "Ends the current transaction",
      "javadoc": "Ends the current transaction\n@param transactionID id of the transaction to end\n@param commit true if changes are committed, false if changes in transaction are revoked",
      "static": false,
      "params": [
        {
          "name": "transactionID",
          "type_long": "int",
          "type_short": "int",
          "comment": "id of the transaction to end"
        },
        {
          "name": "commit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if changes are committed, false if changes in transaction are revoked"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "flushEvents",
      "comment": "Force all pending notification events to be flushed",
      "javadoc": "Force all pending notification events to be flushed\n@throws IllegalStateException if the client is holding this object\u0027s lock",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "Closes this dataType manager",
      "javadoc": "Closes this dataType manager",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPointer",
      "comment": "Returns a default sized pointer to the given datatype.  The pointer size is established\n dynamically based upon the data organization established by the compiler specification.",
      "javadoc": "Returns a default sized pointer to the given datatype.  The pointer size is established\n dynamically based upon the data organization established by the compiler specification.\n@param datatype the pointed to data type\n@return the pointer",
      "static": false,
      "params": [
        {
          "name": "datatype",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the pointed to data type"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Pointer",
        "type_short": "Pointer",
        "comment": "the pointer"
      },
      "throws": []
    },
    {
      "name": "getPointer",
      "comment": "Returns a pointer of the given size to the given datatype.\n Note: It is preferred to use default sized pointers when possible (i.e., size\u003d-1,\n see #getPointer(DataType)) instead of explicitly specifying the size value.",
      "javadoc": "Returns a pointer of the given size to the given datatype.\n Note: It is preferred to use default sized pointers when possible (i.e., size\u003d-1,\n see {@link #getPointer(DataType)}) instead of explicitly specifying the size value.\n@param datatype the pointed to data type\n@param size the size of the pointer to be created or -1 for a default sized pointer\n@return the pointer",
      "static": false,
      "params": [
        {
          "name": "datatype",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the pointed to data type"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of the pointer to be created or -1 for a default sized pointer"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Pointer",
        "type_short": "Pointer",
        "comment": "the pointer"
      },
      "throws": []
    },
    {
      "name": "getRootCategory",
      "comment": "Returns the root category Manager",
      "javadoc": "Returns the root category Manager\n@return the category",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": "the category"
      },
      "throws": []
    },
    {
      "name": "isFavorite",
      "comment": "Returns true if the given datatype has been designated as a favorite. If the datatype\n does not belong to this datatype manager, then false will be returned.",
      "javadoc": "Returns true if the given datatype has been designated as a favorite. If the datatype\n does not belong to this datatype manager, then false will be returned.\n@param datatype the datatype to check.\n@return true if the given datatype is a favorite in this manager.",
      "static": false,
      "params": [
        {
          "name": "datatype",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to check."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given datatype is a favorite in this manager."
      },
      "throws": []
    },
    {
      "name": "setFavorite",
      "comment": "Sets the given dataType to be either a favorite or not a favorite.",
      "javadoc": "Sets the given dataType to be either a favorite or not a favorite.\n@param datatype the datatype for which to change its status as a favorite.\n@param isFavorite true if the datatype is to be a favorite or false otherwise.\n@throws IllegalArgumentException if the given datatype does not belong to this manager.",
      "static": false,
      "params": [
        {
          "name": "datatype",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype for which to change its status as a favorite."
        },
        {
          "name": "isFavorite",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the datatype is to be a favorite or false otherwise."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFavorites",
      "comment": "Returns a list of datatypes that have been designated as favorites.",
      "javadoc": "Returns a list of datatypes that have been designated as favorites.\n@return the list of favorite datatypes in this manager.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
        "type_short": "List",
        "comment": "the list of favorite datatypes in this manager."
      },
      "throws": []
    },
    {
      "name": "getCategoryCount",
      "comment": "Returns the total number of data type categories",
      "javadoc": "Returns the total number of data type categories\n@return the count",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the count"
      },
      "throws": []
    },
    {
      "name": "getDataTypeCount",
      "comment": "Returns the total number of defined data types.",
      "javadoc": "Returns the total number of defined data types.\n@param includePointersAndArrays if true all pointers and array data types will be included\n@return the count",
      "static": false,
      "params": [
        {
          "name": "includePointersAndArrays",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true all pointers and array data types will be included"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the count"
      },
      "throws": []
    },
    {
      "name": "findEnumValueNames",
      "comment": "Adds all enum value names that match the given value, to the given set.",
      "javadoc": "Adds all enum value names that match the given value, to the given set.\n@param value the value to look for enum name matches\n@param enumValueNames the set to add matches to.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the value to look for enum name matches"
        },
        {
          "name": "enumValueNames",
          "type_long": "java.util.Set\u003cjava.lang.String\u003e",
          "type_short": "Set",
          "comment": "the set to add matches to."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        },
        {
          "name": "datatypeID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findDataTypeForID",
      "comment": "Get\u0027s the data type with the matching universal data type id.",
      "javadoc": "Get\u0027s the data type with the matching universal data type id.\n@param datatypeID The universal id of the data type to search for\n@return The data type with the matching UUID, or null if no such data type can be found.",
      "static": false,
      "params": [
        {
          "name": "datatypeID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": "The universal id of the data type to search for"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "The data type with the matching UUID, or null if no such data type can be found."
      },
      "throws": []
    },
    {
      "name": "getLastChangeTimeForMyManager",
      "comment": "Returns the timestamp of the last time this manager was changed",
      "javadoc": "Returns the timestamp of the last time this manager was changed\n@return the timestamp",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the timestamp"
      },
      "throws": []
    },
    {
      "name": "getSourceArchive",
      "comment": "Returns the source archive for the given ID",
      "javadoc": "Returns the source archive for the given ID\n@param sourceID the ID\n@return the archive; null if the ID is null; null if the archive does not exist",
      "static": false,
      "params": [
        {
          "name": "sourceID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": "the ID"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.SourceArchive",
        "type_short": "SourceArchive",
        "comment": "the archive; null if the ID is null; null if the archive does not exist"
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "Returns this manager\u0027s archive type",
      "javadoc": "Returns this manager\u0027s archive type\n@return the type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.ArchiveType",
        "type_short": "ArchiveType",
        "comment": "the type"
      },
      "throws": []
    },
    {
      "name": "getDataTypes",
      "comment": "Returns all data types within this manager that have as their source the given archive",
      "javadoc": "Returns all data types within this manager that have as their source the given archive\n@param sourceArchive the archive\n@return the types",
      "static": false,
      "params": [
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": "the archive"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
        "type_short": "List",
        "comment": "the types"
      },
      "throws": []
    },
    {
      "name": "getLocalSourceArchive",
      "comment": "Returns the source archive for this manager",
      "javadoc": "Returns the source archive for this manager\n@return the archive; null if the ID is null; null if the archive does not exist",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.SourceArchive",
        "type_short": "SourceArchive",
        "comment": "the archive; null if the ID is null; null if the archive does not exist"
      },
      "throws": []
    },
    {
      "name": "associateDataTypeWithArchive",
      "comment": "Change the given data type so that its source archive is the given archive",
      "javadoc": "Change the given data type so that its source archive is the given archive\n@param datatype the type\n@param archive the archive",
      "static": false,
      "params": [
        {
          "name": "datatype",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the type"
        },
        {
          "name": "archive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": "the archive"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disassociate",
      "comment": "If the indicated data type is associated with a source archive, this will remove the\n association and the data type will become local to this data type manager.",
      "javadoc": "If the indicated data type is associated with a source archive, this will remove the\n association and the data type will become local to this data type manager.\n@param datatype the data type to be disassociated from a source archive.",
      "static": false,
      "params": [
        {
          "name": "datatype",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type to be disassociated from a source archive."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateSourceArchiveName",
      "comment": "Updates the name associated with a source archive in this data type manager.",
      "javadoc": "Updates the name associated with a source archive in this data type manager.\n@param archiveFileID Universal domain file ID of the source data type archive that has a new name.\n@param name the new name of the program or archive.\n@return true if the name associated with the source data type archive was changed.\n false if it wasn\u0027t changed.",
      "static": false,
      "params": [
        {
          "name": "archiveFileID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "Universal domain file ID of the source data type archive that has a new name."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new name of the program or archive."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the name associated with the source data type archive was changed.\n false if it wasn\u0027t changed."
      },
      "throws": []
    },
    {
      "name": "updateSourceArchiveName",
      "comment": "Updates the name associated with a source archive in this data type manager.",
      "javadoc": "Updates the name associated with a source archive in this data type manager.\n@param sourceID Universal archive ID of the source data type archive that has a new name.\n@param name the new name of the program or archive.\n@return true if the name associated with the source data type archive was changed.\n false if it wasn\u0027t changed.",
      "static": false,
      "params": [
        {
          "name": "sourceID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": "Universal archive ID of the source data type archive that has a new name."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new name of the program or archive."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the name associated with the source data type archive was changed.\n false if it wasn\u0027t changed."
      },
      "throws": []
    },
    {
      "name": "getDataOrganization",
      "comment": "Get the data organization associated with this data type manager.  Note that the\n DataOrganization settings may not be changed dynamically.",
      "javadoc": "Get the data organization associated with this data type manager.  Note that the\n DataOrganization settings may not be changed dynamically.\n@return data organization (will never be null)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataOrganization",
        "type_short": "DataOrganization",
        "comment": "data organization (will never be null)"
      },
      "throws": []
    },
    {
      "name": "getSourceArchives",
      "comment": "Returns a list of source archives not including the builtin or the program\u0027s archive.",
      "javadoc": "Returns a list of source archives not including the builtin or the program\u0027s archive.\n@return a list of source archives not including the builtin or the program\u0027s archive.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.data.SourceArchive\u003e",
        "type_short": "List",
        "comment": "a list of source archives not including the builtin or the program\u0027s archive."
      },
      "throws": []
    },
    {
      "name": "removeSourceArchive",
      "comment": "Removes the source archive from this manager.  This will disassociate all data types in\n this manager from the given archive.",
      "javadoc": "Removes the source archive from this manager.  This will disassociate all data types in\n this manager from the given archive.\n@param sourceArchive the archive",
      "static": false,
      "params": [
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": "the archive"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveSourceArchive",
      "comment": "Returns or creates a persisted version of the given source archive",
      "javadoc": "Returns or creates a persisted version of the given source archive\n@param sourceArchive the archive\n@return the archive",
      "static": false,
      "params": [
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": "the archive"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.SourceArchive",
        "type_short": "SourceArchive",
        "comment": "the archive"
      },
      "throws": []
    },
    {
      "name": "getDataTypesContaining",
      "comment": "Returns the data types within this data type manager that contain the specified data type.",
      "javadoc": "Returns the data types within this data type manager that contain the specified data type.\n@param dataType the data type\n@return a set of data types that contain the specified data type.",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.data.DataType\u003e",
        "type_short": "Set",
        "comment": "a set of data types that contain the specified data type."
      },
      "throws": []
    }
  ]
}
