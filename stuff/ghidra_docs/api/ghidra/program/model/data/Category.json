{
  "name": "Category",
  "comment": "Each data type resides in a given a category.",
  "javadoc": "Each data type resides in a given a category.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getName",
      "comment": "Get the name of this category.",
      "javadoc": "Get the name of this category.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "Sets the name of this category.",
      "javadoc": "Sets the name of this category.\n@param name the new name for this category\n@throws DuplicateNameException if another category exists in the same parent with the same name;\n@throws InvalidNameException if the name is not an acceptable name.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new name for this category"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if another category exists in the same parent with the same name;"
        },
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the name is not an acceptable name."
        }
      ]
    },
    {
      "name": "getCategories",
      "comment": "Get all categories in this category.",
      "javadoc": "Get all categories in this category.\n@return zero-length array if there are no categories",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.Category[]",
        "type_short": "ghidra.program.model.data.Category[]",
        "comment": "zero-length array if there are no categories"
      },
      "throws": []
    },
    {
      "name": "getDataTypes",
      "comment": "Get all data types in this category.",
      "javadoc": "Get all data types in this category.\n@return zero-length array if there are no data types",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType[]",
        "type_short": "ghidra.program.model.data.DataType[]",
        "comment": "zero-length array if there are no data types"
      },
      "throws": []
    },
    {
      "name": "getDataTypesByBaseName",
      "comment": "Get all data types in this category whose base name matches the base name of the given name.\n The base name of a name is the first part of the string up to where the first \".conflict\"\n occurs. In other words, finds all data types whose name matches the given name once\n any conflict suffixes have been removed from both the given name and the data types\n that are being scanned.",
      "javadoc": "Get all data types in this category whose base name matches the base name of the given name.\n The base name of a name is the first part of the string up to where the first \".conflict\"\n occurs. In other words, finds all data types whose name matches the given name once\n any conflict suffixes have been removed from both the given name and the data types\n that are being scanned.\n@param name the name for which to get conflict related data types in this category. Note: the\n name that is passed in will be normalized to its base name, so you may pass in names with .conflict\n appended as a convenience.\n@return a list of data types that have the same base name as the base name of the given name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name for which to get conflict related data types in this category. Note: the\n name that is passed in will be normalized to its base name, so you may pass in names with .conflict\n appended as a convenience."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
        "type_short": "List",
        "comment": "a list of data types that have the same base name as the base name of the given name"
      },
      "throws": []
    },
    {
      "name": "addDataType",
      "comment": "Adds the given datatype to this category.",
      "javadoc": "Adds the given datatype to this category.\n@param dt the datatype to add to this category.\n@param handler the DataTypeConflictHandler to use if conflicts are discovered.\n@return the new datatype with its category path adjusted.",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to add to this category."
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": "the DataTypeConflictHandler to use if conflicts are discovered."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the new datatype with its category path adjusted."
      },
      "throws": []
    },
    {
      "name": "getCategory",
      "comment": "Get a category with the given name.",
      "javadoc": "Get a category with the given name.\n@param name the name of the category\n@return null if there is no category by this name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the category"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": "null if there is no category by this name"
      },
      "throws": []
    },
    {
      "name": "getCategoryPath",
      "comment": "return the full CategoryPath for this category.",
      "javadoc": "return the full CategoryPath for this category.\n@return the full CategoryPath for this category.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.CategoryPath",
        "type_short": "CategoryPath",
        "comment": "the full CategoryPath for this category."
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "Get a data type with the given name.",
      "javadoc": "Get a data type with the given name.\n@param name the name of the data type\n@return null if there is no data type by this name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the data type"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "null if there is no data type by this name"
      },
      "throws": []
    },
    {
      "name": "createCategory",
      "comment": "Create a category with the given name; if category already exists, then\n return that category.",
      "javadoc": "Create a category with the given name; if category already exists, then\n return that category.\n@param name the category name\n@throws InvalidNameException if name has invalid characters",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the category name"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if name has invalid characters"
        }
      ]
    },
    {
      "name": "removeCategory",
      "comment": "Remove the named category from this category.",
      "javadoc": "Remove the named category from this category.\n@param name the name of the category to remove\n@param monitor the task monitor\n@return true if the category was removed",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the category to remove"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the category was removed"
      },
      "throws": []
    },
    {
      "name": "removeEmptyCategory",
      "comment": "Remove the named category from this category, IFF it is empty.",
      "javadoc": "Remove the named category from this category, IFF it is empty.\n@param name the name of the category to remove\n@param monitor the task monitor\n@return true if the category was removed",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the category to remove"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the category was removed"
      },
      "throws": []
    },
    {
      "name": "moveCategory",
      "comment": "Move the given category to this category; category is removed from\n its original parent category.",
      "javadoc": "Move the given category to this category; category is removed from\n its original parent category.\n@param category the category to move\n@throws DuplicateNameException if this category already contains a\n category or data type with the same name as the category param.",
      "static": false,
      "params": [
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": "the category to move"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if this category already contains a\n category or data type with the same name as the category param."
        }
      ]
    },
    {
      "name": "copyCategory",
      "comment": "Make a new subcategory from the given category.",
      "javadoc": "Make a new subcategory from the given category.\n@param category the category to copy into this category\n@return category that is added to this category",
      "static": false,
      "params": [
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": "the category to copy into this category"
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": "category that is added to this category"
      },
      "throws": []
    },
    {
      "name": "getParent",
      "comment": "Return this category\u0027s parent; return null if this is the root category.",
      "javadoc": "Return this category\u0027s parent; return null if this is the root category.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isRoot",
      "comment": "Returns true if this is the root category.",
      "javadoc": "Returns true if this is the root category.\n@return true if this is the root category.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is the root category."
      },
      "throws": []
    },
    {
      "name": "getCategoryPathName",
      "comment": "Get the fully qualified name for this category.",
      "javadoc": "Get the fully qualified name for this category.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRoot",
      "comment": "Get the root category.",
      "javadoc": "Get the root category.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTypeManager",
      "comment": "Get the data type manager associated with this category.",
      "javadoc": "Get the data type manager associated with this category.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeManager",
        "type_short": "DataTypeManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveDataType",
      "comment": "Move a data type into this category",
      "javadoc": "Move a data type into this category\n@param type data type to be moved\n@param handler the handler to call if there is a data type conflict\n@throws DataTypeDependencyException",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "data type to be moved"
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": "the handler to call if there is a data type conflict"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeDependencyException",
          "type_short": "DataTypeDependencyException",
          "comment": ""
        }
      ]
    },
    {
      "name": "remove",
      "comment": "Remove a datatype from this category",
      "javadoc": "Remove a datatype from this category\n@param type data type to be removed\n@param monitor monitor of progress in case operation takes a long time.\n@return true if the data type was found in this category and successfully removed.",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "data type to be removed"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "monitor of progress in case operation takes a long time."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the data type was found in this category and successfully removed."
      },
      "throws": []
    },
    {
      "name": "getID",
      "comment": "Get the ID for this category.",
      "javadoc": "Get the ID for this category.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    }
  ]
}
