{
  "name": "DataTypePath",
  "comment": "Object to hold a category path and a datatype name.  They are held separately so that\n the datatype name can contain a categoryPath delimiter (\"/\") character.",
  "javadoc": "Object to hold a category path and a datatype name.  They are held separately so that\n the datatype name can contain a categoryPath delimiter (\"/\") character.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "categoryPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.CategoryPath",
      "type_short": "CategoryPath",
      "constant_value": null
    },
    {
      "name": "dataTypeName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create DatatypePath",
      "javadoc": "Create DatatypePath\n@param categoryPath the category path for the datatype\n@param dataTypeName the name of the datatype.\n@throws IllegalArgumentException if an invalid category path or dataTypeName is given.",
      "static": false,
      "params": [
        {
          "name": "categoryPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the category path for the datatype"
        },
        {
          "name": "dataTypeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the datatype."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Create DatatypePath",
      "javadoc": "Create DatatypePath\n@param categoryPath the category path for the datatype\n@param dataTypeName the name of the datatype.\n@throws IllegalArgumentException if a null category path or dataTypeName is given.",
      "static": false,
      "params": [
        {
          "name": "categoryPath",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the category path for the datatype"
        },
        {
          "name": "dataTypeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the datatype."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCategoryPath",
      "comment": "Returns the categoryPath for the datatype represented by this datatype path.\n (ie. the CategoryPath that contains the DataType that this DataTypePath points to).",
      "javadoc": "Returns the categoryPath for the datatype represented by this datatype path.\n (ie. the CategoryPath that contains the DataType that this DataTypePath points to).\n@return the parent {@link CategoryPath} of the {@link DataType} that this DataTypePath\n points to.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.CategoryPath",
        "type_short": "CategoryPath",
        "comment": "the parent CategoryPath of the DataType that this DataTypePath\n points to."
      },
      "throws": []
    },
    {
      "name": "isAncestor",
      "comment": "Determine if the specified otherCategoryPath is an ancestor of this data type\n path (i.e., does this data types category or any of its parent hierarchy correspond\n to the specified categoryPath).",
      "javadoc": "Determine if the specified otherCategoryPath is an ancestor of this data type\n path (i.e., does this data types category or any of its parent hierarchy correspond\n to the specified categoryPath).\n@param otherCategoryPath category path\n@return true if otherCategoryPath is an ancestor of this data type path, else false",
      "static": false,
      "params": [
        {
          "name": "otherCategoryPath",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "category path"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if otherCategoryPath is an ancestor of this data type path, else false"
      },
      "throws": []
    },
    {
      "name": "getDataTypeName",
      "comment": "Returns the name of the datatype.",
      "javadoc": "Returns the name of the datatype.\n@return the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "getPath",
      "comment": "Returns the full path of this datatype.  NOTE: if the datatype name contains any\n \"/\" characters, then the resulting path string may be ambiguous as to where the\n category path ends and the datatype name begins.",
      "javadoc": "Returns the full path of this datatype.  NOTE: if the datatype name contains any\n \"/\" characters, then the resulting path string may be ambiguous as to where the\n category path ends and the datatype name begins.\n@return the full path",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the full path"
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
