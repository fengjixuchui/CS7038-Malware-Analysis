{
  "name": "DataOrganizationImpl",
  "comment": "DataOrganization provides a single place for determining size and alignment information \n for data types within an archive or a program.",
  "javadoc": "DataOrganization provides a single place for determining size and alignment information \n for data types within an archive or a program.",
  "static": false,
  "implements": [
    "ghidra.program.model.data.DataOrganization"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "absoluteMaxAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "machineAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "defaultAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "defaultPointerAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "pointerShift",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "pointerSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "charSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "wideCharSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "shortSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "integerSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "longSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "longLongSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "floatSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "doubleSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "longDoubleSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "bigEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isSignedChar",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "bitFieldPacking",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.BitFieldPackingImpl",
      "type_short": "BitFieldPackingImpl",
      "constant_value": null
    },
    {
      "name": "sizeAlignmentMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cjava.lang.Integer,java.lang.Integer\u003e",
      "type_short": "HashMap",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getDefaultOrganization",
      "comment": "Creates a new default DataOrganization. This has a mapping which defines the alignment\n of a data type based on its size. The map defines pairs for data types that are\n 1, 2, 4, and 8 bytes in length.",
      "javadoc": "Creates a new default DataOrganization. This has a mapping which defines the alignment\n of a data type based on its size. The map defines pairs for data types that are\n 1, 2, 4, and 8 bytes in length.\n@return a new default DataOrganization.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataOrganization",
        "type_short": "DataOrganization",
        "comment": "a new default DataOrganization."
      },
      "throws": []
    },
    {
      "name": "getDefaultOrganization",
      "comment": "Creates a new default DataOrganization. This has a mapping which defines the alignment\n of a data type based on its size. The map defines pairs for data types that are\n 1, 2, 4, and 8 bytes in length.",
      "javadoc": "Creates a new default DataOrganization. This has a mapping which defines the alignment\n of a data type based on its size. The map defines pairs for data types that are\n 1, 2, 4, and 8 bytes in length.\n@param language optional language used to initialize defaults (pointer size, endianess, etc.) (may be null)\n@return a new default DataOrganization.",
      "static": true,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "optional language used to initialize defaults (pointer size, endianess, etc.) (may be null)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataOrganizationImpl",
        "type_short": "DataOrganizationImpl",
        "comment": "a new default DataOrganization."
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new default DataOrganization with an empty size to alignment mapping.",
      "javadoc": "Creates a new default DataOrganization with an empty size to alignment mapping.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isBigEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPointerSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPointerShift",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSignedChar",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCharSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWideCharSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getShortSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIntegerSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLongSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLongLongSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFloatSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDoubleSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLongDoubleSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBitFieldPacking",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.BitFieldPacking",
        "type_short": "BitFieldPacking",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setBigEndian",
      "comment": "Set data endianess",
      "javadoc": "Set data endianess\n@param bigEndian true if big-endian, false if little-endian",
      "static": false,
      "params": [
        {
          "name": "bigEndian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if big-endian, false if little-endian"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPointerSize",
      "comment": "Defines the size of a pointer data type.",
      "javadoc": "Defines the size of a pointer data type.\n@param pointerSize the size of a pointer.",
      "static": false,
      "params": [
        {
          "name": "pointerSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of a pointer."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPointerShift",
      "comment": "Defines the left shift amount for a shifted pointer data type.\n Shift amount affects interpretation of in-memory pointer values only\n and will also be reflected within instruction pcode.",
      "javadoc": "Defines the left shift amount for a shifted pointer data type.\n Shift amount affects interpretation of in-memory pointer values only\n and will also be reflected within instruction pcode.\n@param pointerShift left shift amount for in-memory pointer values",
      "static": false,
      "params": [
        {
          "name": "pointerShift",
          "type_long": "int",
          "type_short": "int",
          "comment": "left shift amount for in-memory pointer values"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCharIsSigned",
      "comment": "Defines the signed-ness of the \"char\" data type",
      "javadoc": "Defines the signed-ness of the \"char\" data type\n@param signed true if \"char\" type is signed",
      "static": false,
      "params": [
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if \"char\" type is signed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCharSize",
      "comment": "Defines the size of a char (char) data type.",
      "javadoc": "Defines the size of a char (char) data type.\n@param charSize the size of a char (char).",
      "static": false,
      "params": [
        {
          "name": "charSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of a char (char)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setWideCharSize",
      "comment": "Defines the size of a wide-char (wchar_t) data type.",
      "javadoc": "Defines the size of a wide-char (wchar_t) data type.\n@param wideCharSize the size of a wide-char (wchar_t).",
      "static": false,
      "params": [
        {
          "name": "wideCharSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of a wide-char (wchar_t)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setShortSize",
      "comment": "Defines the size of a short primitive data type.",
      "javadoc": "Defines the size of a short primitive data type.\n@param shortSize the size of a short.",
      "static": false,
      "params": [
        {
          "name": "shortSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of a short."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setIntegerSize",
      "comment": "Defines the size of an int primitive data type.",
      "javadoc": "Defines the size of an int primitive data type.\n@param integerSize the size of an int.",
      "static": false,
      "params": [
        {
          "name": "integerSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of an int."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLongSize",
      "comment": "Defines the size of a long primitive data type.",
      "javadoc": "Defines the size of a long primitive data type.\n@param longSize the size of a long.",
      "static": false,
      "params": [
        {
          "name": "longSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of a long."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLongLongSize",
      "comment": "Defines the size of a long long primitive data type.",
      "javadoc": "Defines the size of a long long primitive data type.\n@param longLongSize the size of a long long.",
      "static": false,
      "params": [
        {
          "name": "longLongSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of a long long."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFloatSize",
      "comment": "Defines the size of a float primitive data type.",
      "javadoc": "Defines the size of a float primitive data type.\n@param floatSize the size of a float.",
      "static": false,
      "params": [
        {
          "name": "floatSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of a float."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDoubleSize",
      "comment": "Defines the size of a double primitive data type.",
      "javadoc": "Defines the size of a double primitive data type.\n@param doubleSize the size of a double.",
      "static": false,
      "params": [
        {
          "name": "doubleSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of a double."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLongDoubleSize",
      "comment": "Defines the size of a long double primitive data type.",
      "javadoc": "Defines the size of a long double primitive data type.\n@param longDoubleSize the size of a long double.",
      "static": false,
      "params": [
        {
          "name": "longDoubleSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of a long double."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAbsoluteMaxAlignment",
      "comment": "Gets the maximum alignment value that is allowed by this data organization. When getting\n an alignment for any data type it will not exceed this value. If NO_MAXIMUM_ALIGNMENT\n is returned, the data organization isn\u0027t specifically limited.",
      "javadoc": "Gets the maximum alignment value that is allowed by this data organization. When getting\n an alignment for any data type it will not exceed this value. If NO_MAXIMUM_ALIGNMENT\n is returned, the data organization isn\u0027t specifically limited.\n@return the absolute maximum alignment or NO_MAXIMUM_ALIGNMENT",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the absolute maximum alignment or NO_MAXIMUM_ALIGNMENT"
      },
      "throws": []
    },
    {
      "name": "getMachineAlignment",
      "comment": "Gets the maximum useful alignment for the target machine",
      "javadoc": "Gets the maximum useful alignment for the target machine\n@return the machine alignment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the machine alignment"
      },
      "throws": []
    },
    {
      "name": "getDefaultAlignment",
      "comment": "Gets the default alignment to be used for any data type that isn\u0027t a \n structure, union, array, pointer, type definition, and whose size isn\u0027t in the \n size/alignment map.",
      "javadoc": "Gets the default alignment to be used for any data type that isn\u0027t a \n structure, union, array, pointer, type definition, and whose size isn\u0027t in the \n size/alignment map.\n@return the default alignment to be used if no other alignment can be \n determined for a data type.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the default alignment to be used if no other alignment can be \n determined for a data type."
      },
      "throws": []
    },
    {
      "name": "getDefaultPointerAlignment",
      "comment": "Gets the default alignment to be used for a pointer that doesn\u0027t have size.",
      "javadoc": "Gets the default alignment to be used for a pointer that doesn\u0027t have size.\n@return the default alignment for a pointer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the default alignment for a pointer"
      },
      "throws": []
    },
    {
      "name": "setAbsoluteMaxAlignment",
      "comment": "Sets the maximum alignment value that is allowed by this data organization. When getting\n an alignment for any data type it will not exceed this value. If NO_MAXIMUM_ALIGNMENT\n is returned, the data organization isn\u0027t specifically limited.",
      "javadoc": "Sets the maximum alignment value that is allowed by this data organization. When getting\n an alignment for any data type it will not exceed this value. If NO_MAXIMUM_ALIGNMENT\n is returned, the data organization isn\u0027t specifically limited.\n@param absoluteMaxAlignment the absolute maximum alignment or NO_MAXIMUM_ALIGNMENT",
      "static": false,
      "params": [
        {
          "name": "absoluteMaxAlignment",
          "type_long": "int",
          "type_short": "int",
          "comment": "the absolute maximum alignment or NO_MAXIMUM_ALIGNMENT"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMachineAlignment",
      "comment": "Sets the maximum useful alignment for the target machine",
      "javadoc": "Sets the maximum useful alignment for the target machine\n@param machineAlignment the machine alignment",
      "static": false,
      "params": [
        {
          "name": "machineAlignment",
          "type_long": "int",
          "type_short": "int",
          "comment": "the machine alignment"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDefaultAlignment",
      "comment": "Sets the default alignment to be used for any data type that isn\u0027t a \n structure, union, array, pointer, type definition, and whose size isn\u0027t in the \n size/alignment map.",
      "javadoc": "Sets the default alignment to be used for any data type that isn\u0027t a \n structure, union, array, pointer, type definition, and whose size isn\u0027t in the \n size/alignment map.\n@param defaultAlignment the default alignment to be used if no other alignment can be \n determined for a data type.",
      "static": false,
      "params": [
        {
          "name": "defaultAlignment",
          "type_long": "int",
          "type_short": "int",
          "comment": "the default alignment to be used if no other alignment can be \n determined for a data type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDefaultPointerAlignment",
      "comment": "Sets the default alignment to be used for a pointer that doesn\u0027t have size.",
      "javadoc": "Sets the default alignment to be used for a pointer that doesn\u0027t have size.\n@param defaultPointerAlignment the default alignment for a pointer",
      "static": false,
      "params": [
        {
          "name": "defaultPointerAlignment",
          "type_long": "int",
          "type_short": "int",
          "comment": "the default alignment for a pointer"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeAlignment",
      "comment": "Gets the alignment that is defined for a data type of the indicated size if one is defined.",
      "javadoc": "Gets the alignment that is defined for a data type of the indicated size if one is defined.\n@param size the size of the data type\n@return the alignment of the data type.\n@throws NoValueException if there isn\u0027t an alignment defined for the indicated size.",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of the data type"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the alignment of the data type."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NoValueException",
          "type_short": "NoValueException",
          "comment": "if there isn\u0027t an alignment defined for the indicated size."
        }
      ]
    },
    {
      "name": "setSizeAlignment",
      "comment": "Sets the alignment that is defined for a data type of the indicated size if one is defined.",
      "javadoc": "Sets the alignment that is defined for a data type of the indicated size if one is defined.\n@param size the size of the data type\n@param alignment the alignment of the data type.",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of the data type"
        },
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": "the alignment of the data type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setBitFieldPacking",
      "comment": "Set the bitfield packing information associated with this data organization.",
      "javadoc": "Set the bitfield packing information associated with this data organization.\n@param bitFieldPacking bitfield packing information",
      "static": false,
      "params": [
        {
          "name": "bitFieldPacking",
          "type_long": "ghidra.program.model.data.BitFieldPackingImpl",
          "type_short": "BitFieldPackingImpl",
          "comment": "bitfield packing information"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearSizeAlignmentMap",
      "comment": "Remove all entries from the size alignment map",
      "javadoc": "Remove all entries from the size alignment map",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeAlignmentCount",
      "comment": "Gets the number of sizes that have an alignment specified.",
      "javadoc": "Gets the number of sizes that have an alignment specified.\n@return the number of sizes with an alignment mapped to them.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of sizes with an alignment mapped to them."
      },
      "throws": []
    },
    {
      "name": "getSizes",
      "comment": "Gets the sizes that have an alignment specified.",
      "javadoc": "Gets the sizes that have an alignment specified.\n@return the sizes with alignments mapped to them.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "the sizes with alignments mapped to them."
      },
      "throws": []
    },
    {
      "name": "getIntegerCTypeApproximation",
      "comment": "Returns the best fitting integer C-type whose size is less-than-or-equal\n to the specified size.  \"long long\" will be returned for any size larger\n than \"long long\";",
      "javadoc": "Returns the best fitting integer C-type whose size is less-than-or-equal\n to the specified size.  \"long long\" will be returned for any size larger\n than \"long long\";\n@param size integer size\n@param signed if false the unsigned modifier will be prepended.\n@return the best fitting",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "integer size"
        },
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if false the unsigned modifier will be prepended."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the best fitting"
      },
      "throws": []
    },
    {
      "name": "getAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAlignedOffset",
      "comment": "Determines the first offset that is equal to or greater than the minimum offset which \n has the specified alignment.  If a non-positive alignment is specified the origina\n minimumOffset will be return.",
      "javadoc": "Determines the first offset that is equal to or greater than the minimum offset which \n has the specified alignment.  If a non-positive alignment is specified the origina\n minimumOffset will be return.\n@param alignment the desired alignment (positive value)\n@param minimumOffset the minimum offset\n@return the aligned offset",
      "static": true,
      "params": [
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": "the desired alignment (positive value)"
        },
        {
          "name": "minimumOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the minimum offset"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the aligned offset"
      },
      "throws": []
    },
    {
      "name": "getLeastCommonMultiple",
      "comment": "Determines the least (lowest) common multiple of two numbers.",
      "javadoc": "Determines the least (lowest) common multiple of two numbers.\n@param value1 the first number\n@param value2 the second number\n@return the least common multiple",
      "static": true,
      "params": [
        {
          "name": "value1",
          "type_long": "int",
          "type_short": "int",
          "comment": "the first number"
        },
        {
          "name": "value2",
          "type_long": "int",
          "type_short": "int",
          "comment": "the second number"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the least common multiple"
      },
      "throws": []
    },
    {
      "name": "getGreatestCommonDenominator",
      "comment": "Determines the greatest common denominator of two numbers.",
      "javadoc": "Determines the greatest common denominator of two numbers.\n@param value1 the first number\n@param value2 the second number\n@return the greatest common denominator",
      "static": true,
      "params": [
        {
          "name": "value1",
          "type_long": "int",
          "type_short": "int",
          "comment": "the first number"
        },
        {
          "name": "value2",
          "type_long": "int",
          "type_short": "int",
          "comment": "the second number"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the greatest common denominator"
      },
      "throws": []
    },
    {
      "name": "saveXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXml",
      "comment": "Restore settings from an XML stream. This expects to see a \\ tag.\n The XML is designed to override existing default settings. So this object needs to\n be pre-populated with defaults, typically via getDefaultOrganization().",
      "javadoc": "Restore settings from an XML stream. This expects to see a \\\u003cdata_organization\u003e tag.\n The XML is designed to override existing default settings. So this object needs to\n be pre-populated with defaults, typically via getDefaultOrganization().\n@param parser is the XML stream",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
