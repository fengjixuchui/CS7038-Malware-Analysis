{
  "name": "AbstractIntegerDataType",
  "comment": "Base type for integer data types such as CharDataType, IntegerDataType, and LongDataType.\n \n If FormatSettingsDefinition#getFormat(Settings) indicates that this is a\n FormatSettingsDefinition#CHAR type, the ArrayStringable methods will treat\n an array of this data type as a string.",
  "javadoc": "Base type for integer data types such as {@link CharDataType chars}, {@link IntegerDataType ints}, and {@link LongDataType longs}.\n \u003cp\u003e\n If {@link FormatSettingsDefinition#getFormat(Settings)} indicates that this is a\n {@link FormatSettingsDefinition#CHAR CHAR} type, the {@link ArrayStringable} methods will treat\n an array of this data type as a string.",
  "static": false,
  "implements": [
    "ghidra.program.model.data.ArrayStringable"
  ],
  "extends": "ghidra.program.model.data.BuiltIn",
  "fields": [
    {
      "name": "C_SIGNED_CHAR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"signed char\""
    },
    {
      "name": "C_UNSIGNED_CHAR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"unsigned char\""
    },
    {
      "name": "C_SIGNED_SHORT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"short\""
    },
    {
      "name": "C_UNSIGNED_SHORT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"unsigned short\""
    },
    {
      "name": "C_SIGNED_INT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"int\""
    },
    {
      "name": "C_UNSIGNED_INT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"unsigned int\""
    },
    {
      "name": "C_SIGNED_LONG",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"long\""
    },
    {
      "name": "C_UNSIGNED_LONG",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"unsigned long\""
    },
    {
      "name": "C_SIGNED_LONGLONG",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"long long\""
    },
    {
      "name": "C_UNSIGNED_LONGLONG",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"unsigned long long\""
    },
    {
      "name": "PADDING",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.PaddingSettingsDefinition",
      "type_short": "PaddingSettingsDefinition",
      "constant_value": null
    },
    {
      "name": "ENDIAN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.EndianSettingsDefinition",
      "type_short": "EndianSettingsDefinition",
      "constant_value": null
    },
    {
      "name": "MNEMONIC",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.DataTypeMnemonicSettingsDefinition",
      "type_short": "DataTypeMnemonicSettingsDefinition",
      "constant_value": null
    },
    {
      "name": "SETTINGS_DEFS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.docking.settings.SettingsDefinition[]",
      "type_short": "ghidra.docking.settings.SettingsDefinition[]",
      "constant_value": null
    },
    {
      "name": "signed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "signedTypes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.AbstractIntegerDataType[]",
      "type_short": "ghidra.program.model.data.AbstractIntegerDataType[]",
      "constant_value": null
    },
    {
      "name": "unsignedTypes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.AbstractIntegerDataType[]",
      "type_short": "ghidra.program.model.data.AbstractIntegerDataType[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param name a unique signed/unsigned data-type name (also used as the mnemonic)\n@param signed true if signed, false if unsigned\n@param dtm data-type manager whose data organization should be used",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a unique signed/unsigned data-type name (also used as the mnemonic)"
        },
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if signed, false if unsigned"
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "data-type manager whose data organization should be used"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFormatSettingsDefinition",
      "comment": "Return the Format settings definition included in the settings definition array",
      "javadoc": "Return the Format settings definition included in the settings definition array\n@see #getSettingsDefinitions()\n@return Format settings definition included in the settings definition array",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.docking.settings.FormatSettingsDefinition",
        "type_short": "FormatSettingsDefinition",
        "comment": "Format settings definition included in the settings definition array"
      },
      "throws": []
    },
    {
      "name": "getBuiltInSettingsDefinitions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.docking.settings.SettingsDefinition[]",
        "type_short": "ghidra.docking.settings.SettingsDefinition[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSigned",
      "comment": "",
      "javadoc": "@return true if this is a signed integer data-type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is a signed integer data-type"
      },
      "throws": []
    },
    {
      "name": "getDefaultLabelPrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMnemonic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAssemblyMnemonic",
      "comment": "",
      "javadoc": "@return the Assembly style data-type declaration for this data-type.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the Assembly style data-type declaration for this data-type."
      },
      "throws": []
    },
    {
      "name": "getCMnemonic",
      "comment": "",
      "javadoc": "@return the C style data-type mnemonic for this data-type. NOTE: currently the same as\n         getCDeclaration().",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the C style data-type mnemonic for this data-type. NOTE: currently the same as\n         getCDeclaration()."
      },
      "throws": []
    },
    {
      "name": "getCDeclaration",
      "comment": "",
      "javadoc": "@return the C style data-type declaration for this data-type. Null is returned if no\n         appropriate declaration exists.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the C style data-type declaration for this data-type. Null is returned if no\n         appropriate declaration exists."
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "castValueToEncode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeEncodeException",
          "type_short": "DataTypeEncodeException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isEncodable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "encodeValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeEncodeException",
          "type_short": "DataTypeEncodeException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getValueClass",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Class\u003c?\u003e",
        "type_short": "Class",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepresentation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepresentation",
      "comment": "Get integer representation of the big-endian value.\n \n Does not handle CHAR format, use\n StringDataInstance#getCharRepresentation(DataType, byte[], Settings)",
      "javadoc": "Get integer representation of the big-endian value.\n \u003cp\u003e\n Does not handle CHAR format, use\n {@link StringDataInstance#getCharRepresentation(DataType, byte[], Settings)}\n@param bigInt BigInteger value with the appropriate sign\n@param settings integer format settings (PADDING, FORMAT, etc.)\n@param bitLength number of value bits to be used from bigInt\n@return formatted integer string",
      "static": false,
      "params": [
        {
          "name": "bigInt",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "BigInteger value with the appropriate sign"
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": "integer format settings (PADDING, FORMAT, etc.)"
        },
        {
          "name": "bitLength",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of value bits to be used from bigInt"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "formatted integer string"
      },
      "throws": []
    },
    {
      "name": "encodeRepresentation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "repr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeEncodeException",
          "type_short": "DataTypeEncodeException",
          "comment": ""
        }
      ]
    },
    {
      "name": "hasStringValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getArrayDefaultLabelPrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "ghidra.program.model.data.DataTypeDisplayOptions",
          "type_short": "DataTypeDisplayOptions",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getArrayDefaultOffcutLabelPrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "ghidra.program.model.data.DataTypeDisplayOptions",
          "type_short": "DataTypeDisplayOptions",
          "comment": ""
        },
        {
          "name": "offcutOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOppositeSignednessDataType",
      "comment": "",
      "javadoc": "@return the data-type with the opposite signedness from this data-type. For example, this\n         method on IntegerDataType will return an instance of UnsignedIntegerDataType.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.AbstractIntegerDataType",
        "type_short": "AbstractIntegerDataType",
        "comment": "the data-type with the opposite signedness from this data-type. For example, this\n         method on IntegerDataType will return an instance of UnsignedIntegerDataType."
      },
      "throws": []
    },
    {
      "name": "isEquivalent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSignedTypes",
      "comment": "An \"map\" of the first 8 (by size) signed integer data types, where the element at index\n i points to the datatype of size i+1, with additional types with no\n size restriction appended after the first 8.",
      "javadoc": "An \"map\" of the first 8 (by size) signed integer data types, where the element at index\n \u003ccode\u003ei\u003c/code\u003e points to the datatype of size \u003ccode\u003ei+1\u003c/code\u003e, with additional types with no\n size restriction appended after the first 8.\n@return array of all signed integer types (char and bool types excluded)",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.AbstractIntegerDataType[]",
        "type_short": "ghidra.program.model.data.AbstractIntegerDataType[]",
        "comment": "array of all signed integer types (char and bool types excluded)"
      },
      "throws": []
    },
    {
      "name": "getUnsignedTypes",
      "comment": "An \"map\" of the first 8 (by size) unsigned integer data types, where the element at index\n i points to the datatype of size i+1, with additional types with no\n size restriction appended after the first 8.",
      "javadoc": "An \"map\" of the first 8 (by size) unsigned integer data types, where the element at index\n \u003ccode\u003ei\u003c/code\u003e points to the datatype of size \u003ccode\u003ei+1\u003c/code\u003e, with additional types with no\n size restriction appended after the first 8.\n@return array of all unsigned integer types (char and bool types excluded)",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.AbstractIntegerDataType[]",
        "type_short": "ghidra.program.model.data.AbstractIntegerDataType[]",
        "comment": "array of all unsigned integer types (char and bool types excluded)"
      },
      "throws": []
    },
    {
      "name": "getSignedDataType",
      "comment": "Get a Signed Integer data-type instance of the requested size",
      "javadoc": "Get a Signed Integer data-type instance of the requested size\n@param size data type size, sizes greater than 8 (and other than 16) will cause an\n            SignedByteDataType[size] (i.e., Array) to be returned.\n@param dtm optional program data-type manager, if specified a generic data-type will be\n            returned if possible.\n@return signed integer data type",
      "static": true,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "data type size, sizes greater than 8 (and other than 16) will cause an\n            SignedByteDataType[size] (i.e., Array) to be returned."
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "optional program data-type manager, if specified a generic data-type will be\n            returned if possible."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "signed integer data type"
      },
      "throws": []
    },
    {
      "name": "getSignedDataTypes",
      "comment": "Returns all built-in signed integer data-types.",
      "javadoc": "Returns all built-in signed integer data-types.\n@param dtm optional program data-type manager, if specified generic data-types will be\n            returned in place of fixed-sized data-types.\n@return array of all signed integer types (char and bool types excluded)",
      "static": true,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "optional program data-type manager, if specified generic data-types will be\n            returned in place of fixed-sized data-types."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.AbstractIntegerDataType[]",
        "type_short": "ghidra.program.model.data.AbstractIntegerDataType[]",
        "comment": "array of all signed integer types (char and bool types excluded)"
      },
      "throws": []
    },
    {
      "name": "getUnsignedDataType",
      "comment": "Get a Unsigned Integer data-type instance of the requested size",
      "javadoc": "Get a Unsigned Integer data-type instance of the requested size\n@param size data type size, sizes greater than 8 (and other than 16) will cause an undefined\n            type to be returned.\n@param dtm optional program data-type manager, if specified a generic data-type will be\n            returned if possible.\n@return unsigned integer data type",
      "static": true,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "data type size, sizes greater than 8 (and other than 16) will cause an undefined\n            type to be returned."
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "optional program data-type manager, if specified a generic data-type will be\n            returned if possible."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "unsigned integer data type"
      },
      "throws": []
    },
    {
      "name": "getUnsignedDataTypes",
      "comment": "Returns all built-in unsigned integer data-types",
      "javadoc": "Returns all built-in unsigned integer data-types\n@param dtm optional program data-type manager, if specified generic data-types will be\n            returned in place of fixed-sized data-types.\n@return array of all unsigned integer types (char and bool types excluded)",
      "static": true,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "optional program data-type manager, if specified generic data-types will be\n            returned in place of fixed-sized data-types."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.AbstractIntegerDataType[]",
        "type_short": "ghidra.program.model.data.AbstractIntegerDataType[]",
        "comment": "array of all unsigned integer types (char and bool types excluded)"
      },
      "throws": []
    }
  ]
}
