{
  "name": "OldGenericNamespaceAddress",
  "comment": "OldGenericNamespaceAddress provides a means of instantiating namespace \n oriented addresses which were previously used for External, Stack and Register addresses.\n This class is needed to facilitate an upgrade since this concept is no longer supported by Address.",
  "javadoc": "\u003ccode\u003eOldGenericNamespaceAddress\u003c/code\u003e provides a means of instantiating namespace \n oriented addresses which were previously used for External, Stack and Register addresses.\n This class is needed to facilitate an upgrade since this concept is no longer supported by Address.",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.address.GenericAddress",
  "fields": [
    {
      "name": "OLD_MIN_NAMESPACE_ID",
      "comment": "OLD_MIN_NAMESPACE_ID provides the minimum non-global namespace-ID supported by the\n old namespace address.",
      "javadoc": "OLD_MIN_NAMESPACE_ID provides the minimum non-global namespace-ID supported by the\n old namespace address.",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "OLD_MAX_NAMESPACE_ID",
      "comment": "OLD_MAX_NAMESPACE_ID provides the maximum non-global namespace-ID supported by the\n old namespace address.  This was a function of the old 28-bit encoded address\n field used to store this value.",
      "javadoc": "OLD_MAX_NAMESPACE_ID provides the maximum non-global namespace-ID supported by the\n old namespace address.  This was a function of the old 28-bit encoded address\n field used to store this value.",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "268435455"
    },
    {
      "name": "namespaceID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrSpace",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "namespaceID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNamespaceID",
      "comment": "Returns the namespace ID assigned to this address.\n This namespace ID generally corresponds to a Function.",
      "javadoc": "Returns the namespace ID assigned to this address.\n This namespace ID generally corresponds to a Function.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGlobalAddress",
      "comment": "Returns global address (i.e., GenericAddress) for this address.",
      "javadoc": "Returns global address (i.e., GenericAddress) for this address.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinAddress",
      "comment": "Returns minimum namespace address within the specified address space for upgrade iterators.\n A minimum offset of 0x0 is always assumed.",
      "javadoc": "Returns minimum namespace address within the specified address space for upgrade iterators.\n A minimum offset of 0x0 is always assumed.\n@param addrSpace address space\n@param namespaceID\n@return minimum address",
      "static": true,
      "params": [
        {
          "name": "addrSpace",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "address space"
        },
        {
          "name": "namespaceID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "minimum address"
      },
      "throws": []
    },
    {
      "name": "getMaxAddress",
      "comment": "Returns maximum namespace address within the specified address space for upgrade iterators.\n For a signed stack space, the negative region is treated as positive for the purpose of \n identifying the maximum address key encoding.",
      "javadoc": "Returns maximum namespace address within the specified address space for upgrade iterators.\n For a signed stack space, the negative region is treated as positive for the purpose of \n identifying the maximum address key encoding.\n@param addrSpace address space\n@param namespaceID\n@return maximum address",
      "static": true,
      "params": [
        {
          "name": "addrSpace",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "address space"
        },
        {
          "name": "namespaceID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "maximum address"
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "@see java.lang.Object#equals(java.lang.Object)",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
