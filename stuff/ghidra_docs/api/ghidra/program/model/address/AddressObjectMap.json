{
  "name": "AddressObjectMap",
  "comment": "AddressObjectMap maintains a mapping between addresses in the program\n and Objects that have been discovered.\n \n AddressObjectMap uses an ObjectPropertySet to track which addresses belong to\n which Objects. If a range [addr1,addr2] is assigned to a Object\n with id ID then -ID will be placed as the property value at\n addr1 and ID will be placed at addr2.\n In other words AddressObjectMap marks the beginning of a range belonging to an\n Object with its id (a positive number) and the end with its\n id (a negative number). A single address \"range\" will just have one entry\n which will contain -objID.\n\n It is important to realize that the current implementation of this cache,\n an address can only belong in one Object.  This could have bad effects\n for BlockModels where code can exist in more than one Object.  If this\n is to be used in that case, one must not just clear an area before adding in\n a range of addresses.  You would need to check if there is anything already\n defined and store a new index in those places that would represent a multi-block\n location.\n\n An AddressObjectMap instance should only be used to map to addresses contained within\n a single program.  The map should be discard if any changes \n are made to that programs address map (e.g., removing or renaming overlay spaces).",
  "javadoc": "\u003cCODE\u003eAddressObjectMap\u003c/CODE\u003e maintains a mapping between addresses in the program\n and Objects that have been discovered.\n \u003cP\u003e\n AddressObjectMap uses an ObjectPropertySet to track which addresses belong to\n which Objects. If a range \u003cCODE\u003e[addr1,addr2]\u003c/CODE\u003e is assigned to a Object\n with id \u003cCODE\u003eID\u003c/CODE\u003e then \u003cCODE\u003e-ID\u003c/CODE\u003e will be placed as the property value at\n \u003cCODE\u003eaddr1\u003c/CODE\u003e and \u003cCODE\u003eID\u003c/CODE\u003e will be placed at \u003cCODE\u003eaddr2\u003c/CODE\u003e.\n In other words AddressObjectMap marks the beginning of a range belonging to an\n Object with its id (a positive number) and the end with its\n id (a negative number). A single address \"range\" will just have one entry\n which will contain \u003cCODE\u003e-objID\u003c/CODE\u003e.\n\n It is important to realize that the current implementation of this cache,\n an address can only belong in one Object.  This could have bad effects\n for BlockModels where code can exist in more than one Object.  If this\n is to be used in that case, one must not just clear an area before adding in\n a range of addresses.  You would need to check if there is anything already\n defined and store a new index in those places that would represent a multi-block\n location.\n\n An AddressObjectMap instance should only be used to map to addresses contained within\n a single program.  The map should be discard if any changes \n are made to that programs address map (e.g., removing or renaming overlay spaces).",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "addrMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressMapImpl",
      "type_short": "AddressMapImpl",
      "constant_value": null
    },
    {
      "name": "objMarkers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.prop.ObjectPropertySet",
      "type_short": "ObjectPropertySet",
      "constant_value": null
    },
    {
      "name": "emptyArray",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.Object[]",
      "type_short": "java.lang.Object[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new AddressObjectMap object.",
      "javadoc": "Creates a new \u003cCODE\u003eAddressObjectMap\u003c/CODE\u003e object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getObjects",
      "comment": "Get the objs associated with the given address.",
      "javadoc": "Get the objs associated with the given address.\n@param addr the address at which to get objects.\n@return an array of objects at the given address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to get objects."
        }
      ],
      "return": {
        "type_long": "java.lang.Object[]",
        "type_short": "java.lang.Object[]",
        "comment": "an array of objects at the given address."
      },
      "throws": []
    },
    {
      "name": "addObject",
      "comment": "Associates the given object with the given set of addresses",
      "javadoc": "Associates the given object with the given set of addresses\n@param obj the object to associate\n@param set the set of address to be associated with the object.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the object to associate"
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the set of address to be associated with the object."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addObject",
      "comment": "Associates the given object with the given range of addresses",
      "javadoc": "Associates the given object with the given range of addresses\n@param obj the object to associate\n@param startAddr the first address in the range\n@param endAddr the last address in the range",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the object to associate"
        },
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address in the range"
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last address in the range"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeObject",
      "comment": "Removes any association with the object and the addresses in the given address set.",
      "javadoc": "Removes any association with the object and the addresses in the given address set.\n@param obj the object to remove\n@param set the set of address from which to remove the object.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the object to remove"
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the set of address from which to remove the object."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeObject",
      "comment": "Removes any association with the given object and the given range of addresses.",
      "javadoc": "Removes any association with the given object and the given range of addresses.\n@param obj the object to remove from associations in the given range.\n@param startAddr the first address in the range.\n@param endAddr the last address in the range.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the object to remove from associations in the given range."
        },
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address in the range."
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last address in the range."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getObj",
      "comment": "Gets the list of objects associated with the given address.",
      "javadoc": "Gets the list of objects associated with the given address.\n@param longAddr the long value of the address.\n@return an array of objects that have been associated with the given address",
      "static": false,
      "params": [
        {
          "name": "longAddr",
          "type_long": "long",
          "type_short": "long",
          "comment": "the long value of the address."
        }
      ],
      "return": {
        "type_long": "java.lang.Object[]",
        "type_short": "java.lang.Object[]",
        "comment": "an array of objects that have been associated with the given address"
      },
      "throws": []
    },
    {
      "name": "getMark",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Mark",
        "type_short": "Mark",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addRange",
      "comment": "Adds a range to a object.\n Assumes that the range has already been cleared.\n ",
      "javadoc": "Adds a range to a object.\n Assumes that the range has already been cleared.\n \u003cP\u003e\n@param range the range being added.\n@param objID the id of the object the range is being\n added to.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markEnd",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doSplit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "next",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doDeleteSplit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "next",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeRange",
      "comment": "Removes a range from a object.\n ",
      "javadoc": "Removes a range from a object.\n \u003cP\u003e\n@param range the range being removed.\n@param objID the id of the object it is being\n removed from.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "coalesceRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "coalesce",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkCoalese",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "first",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "second",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
