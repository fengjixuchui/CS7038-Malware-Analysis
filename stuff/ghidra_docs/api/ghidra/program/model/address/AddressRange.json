{
  "name": "AddressRange",
  "comment": "The AddressRange interface is used by any object\n that represents a contiguous inclusive range of\n addresses from a minimum address to a maximum\n address.  The entire range must fall within a \n single address space.\n ",
  "javadoc": "The AddressRange interface is used by any object\n that represents a contiguous inclusive range of\n addresses from a minimum address to a maximum\n address.  The entire range must fall within a \n single address space.\n \u003cP\u003e\n@see AddressRangeImpl\n@since 2000-02-16",
  "static": false,
  "implements": [
    "java.lang.Comparable",
    "java.lang.Iterable"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getLength",
      "comment": "Returns the number of addresses in the range.",
      "javadoc": "Returns the number of addresses in the range.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBigLength",
      "comment": "Returns the number of addresses as a BigInteger.",
      "javadoc": "Returns the number of addresses as a BigInteger.\n@return the number of addresses as a BigInteger.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": "the number of addresses as a BigInteger."
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Returns true if the given address is contained in the range.",
      "javadoc": "Returns true if the given address is contained in the range.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "intersect",
      "comment": "Computes the intersection of this range with another.",
      "javadoc": "Computes the intersection of this range with another.\n@param range the range to intersect this range with\n@return AddressRange the intersection or null if the ranges\n do not intersect.",
      "static": false,
      "params": [
        {
          "name": "range",
          "type_long": "ghidra.program.model.address.AddressRange",
          "type_short": "AddressRange",
          "comment": "the range to intersect this range with"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": "AddressRange the intersection or null if the ranges\n do not intersect."
      },
      "throws": []
    },
    {
      "name": "intersectRange",
      "comment": "Computes the intersection of this range with another.",
      "javadoc": "Computes the intersection of this range with another.\n@param start of range\n@param end end of range\n@return AddressRange the intersection or null if the ranges\n do not intersect.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "of range"
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "end of range"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": "AddressRange the intersection or null if the ranges\n do not intersect."
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "Returns true if the given range intersects this range.",
      "javadoc": "Returns true if the given range intersects this range.\n@param range the range to test for intersection with.",
      "static": false,
      "params": [
        {
          "name": "range",
          "type_long": "ghidra.program.model.address.AddressRange",
          "type_short": "AddressRange",
          "comment": "the range to test for intersection with."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "Returns true if the given range intersects this range.",
      "javadoc": "Returns true if the given range intersects this range.\n@param start the first address in the range to test for intersection.\n@param end the last address in the range to test for intersection.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address in the range to test for intersection."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last address in the range to test for intersection."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "Compares the given address to this address range.",
      "javadoc": "Compares the given address to this address range.\n@param addr the address to compare.\n@return a negative integer if the address is greater than the maximum range address,\n         zero if the address is in the range, and\n         a positive integer if the address is less than minimum range address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to compare."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "a negative integer if the address is greater than the maximum range address,\n         zero if the address is in the range, and\n         a positive integer if the address is less than minimum range address."
      },
      "throws": []
    },
    {
      "name": "getMaxAddress",
      "comment": "",
      "javadoc": "@return the maximum address in the range.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the maximum address in the range."
      },
      "throws": []
    },
    {
      "name": "getMinAddress",
      "comment": "",
      "javadoc": "@return the minimum address in the range.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the minimum address in the range."
      },
      "throws": []
    },
    {
      "name": "getAddressSpace",
      "comment": "",
      "javadoc": "@return address space this range resides within",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": "address space this range resides within"
      },
      "throws": []
    }
  ]
}
