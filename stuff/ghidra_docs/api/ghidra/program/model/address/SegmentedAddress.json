{
  "name": "SegmentedAddress",
  "comment": "Address class for dealing with (intel) segmented addresses.  The class itself is agnostic\n about the mapping from segmented encoding to flat address offset, it uses the\n SegmentedAddressSpace to perform this mapping. So the same class can be used to represent\n either a real-mode address or a protected-mode address.  The class uses the underlying\n offset field to hold the flat encoding.",
  "javadoc": "Address class for dealing with (intel) segmented addresses.  The class itself is agnostic\n about the mapping from segmented encoding to flat address offset, it uses the\n SegmentedAddressSpace to perform this mapping. So the same class can be used to represent\n either a real-mode address or a protected-mode address.  The class uses the underlying\n offset field to hold the flat encoding.",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.address.GenericAddress",
  "fields": [
    {
      "name": "segment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for SegmentedAddress.\n Offset is not validated against address space.",
      "javadoc": "Constructor for SegmentedAddress.\n Offset is not validated against address space.\n@param addrSpace is the address space for this address\n@param flat is the flat offset into the space",
      "static": false,
      "params": [
        {
          "name": "flat",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the flat offset into the space"
        },
        {
          "name": "addrSpace",
          "type_long": "ghidra.program.model.address.SegmentedAddressSpace",
          "type_short": "SegmentedAddressSpace",
          "comment": "is the address space for this address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for SegmentedAddress.",
      "javadoc": "Constructor for SegmentedAddress.\n@param addrSpace is the address space for this address\n@param segment is the segment number\n@param segmentOffset is the offset into the segment\n@throws AddressOutOfBoundsException if the  address does not fit in the space",
      "static": false,
      "params": [
        {
          "name": "addrSpace",
          "type_long": "ghidra.program.model.address.SegmentedAddressSpace",
          "type_short": "SegmentedAddressSpace",
          "comment": "is the address space for this address"
        },
        {
          "name": "segment",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the segment number"
        },
        {
          "name": "segmentOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the offset into the segment"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOutOfBoundsException",
          "type_short": "AddressOutOfBoundsException",
          "comment": "if the  address does not fit in the space"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for SegmentedAddress.",
      "javadoc": "Constructor for SegmentedAddress.\n@param addrSpace address space for this address\n@param flat is the flat offset into the space\n@throws AddressOutOfBoundsException if the flat address does not fit in the space",
      "static": false,
      "params": [
        {
          "name": "addrSpace",
          "type_long": "ghidra.program.model.address.SegmentedAddressSpace",
          "type_short": "SegmentedAddressSpace",
          "comment": "address space for this address"
        },
        {
          "name": "flat",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the flat offset into the space"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOutOfBoundsException",
          "type_short": "AddressOutOfBoundsException",
          "comment": "if the flat address does not fit in the space"
        }
      ]
    },
    {
      "name": "adjustOffset",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "flat",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "addrSpace",
          "type_long": "ghidra.program.model.address.SegmentedAddressSpace",
          "type_short": "SegmentedAddressSpace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSegment",
      "comment": "Returns the segment value",
      "javadoc": "Returns the segment value\n@return int the segment value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int the segment value"
      },
      "throws": []
    },
    {
      "name": "getSegmentOffset",
      "comment": "Returns the offset within the segment.",
      "javadoc": "Returns the offset within the segment.\n@return the offset value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the offset value"
      },
      "throws": []
    },
    {
      "name": "normalize",
      "comment": "Returns a new address that is equivalent to this address using\n the given segment number.",
      "javadoc": "Returns a new address that is equivalent to this address using\n the given segment number.\n@param seg the seqment value to normalize to.\n@return the new address",
      "static": false,
      "params": [
        {
          "name": "seg",
          "type_long": "int",
          "type_short": "int",
          "comment": "the seqment value to normalize to."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.SegmentedAddress",
        "type_short": "SegmentedAddress",
        "comment": "the new address"
      },
      "throws": []
    },
    {
      "name": "getNewAddress",
      "comment": "Return a new segmented address. An attempt is made to normalize to this addresses segment.",
      "javadoc": "Return a new segmented address. An attempt is made to normalize to this addresses segment.\n@see ghidra.program.model.address.Address#getNewAddress(long)",
      "static": false,
      "params": [
        {
          "name": "byteOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNewAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "isAddressableWordOffset",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOutOfBoundsException",
          "type_short": "AddressOutOfBoundsException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getNewTruncatedAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "isAddressableWordOffset",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOutOfBoundsException",
          "type_short": "AddressOutOfBoundsException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getString",
      "comment": "Returns the String for the given value",
      "javadoc": "Returns the String for the given value\n@param value the value to convert to a string.\n@return String the converted value string.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the value to convert to a string."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String the converted value string."
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "@see ghidra.program.model.address.Address#toString(String)",
      "static": false,
      "params": [
        {
          "name": "prefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPhysicalAddress",
      "comment": "",
      "javadoc": "@see ghidra.program.model.address.Address#getPhysicalAddress()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "showAddressSpace",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "minNumDigits",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
