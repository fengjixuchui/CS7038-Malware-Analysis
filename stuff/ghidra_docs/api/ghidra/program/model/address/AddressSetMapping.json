{
  "name": "AddressSetMapping",
  "comment": "Class that provides random access to Addresses in an AddressSet, based on the index of the address in the set, not the Address#getOffset().\n \n For instance, a AddressSet containing addresses [0,1,2,3,4,90,91,92,93,94], #getAddress(int) will return an Address with an\n offset value of 1, but #getAddress(int) will return an Address instance with an offset value of 90.\n \n This collapses a sparse address space with holes into a contiguous list of addresses.",
  "javadoc": "Class that provides random access to {@link Address}es in an {@link AddressSet}, based on the index of the address in the set, not the {@link Address#getOffset() address offset value}.\u003cp\u003e\n \u003cp\u003e\n For instance, a {@link AddressSet} containing addresses [0,1,2,3,4,90,91,92,93,94], {@link #getAddress(int) getAddress(1)} will return an {@link Address} with an\n offset value of 1, but {@link #getAddress(int) getAddress(5)} will return an {@link Address} instance with an offset value of 90.\n \u003cp\u003e\n This collapses a sparse address space with holes into a contiguous list of addresses.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "set",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSetView",
      "type_short": "AddressSetView",
      "constant_value": null
    },
    {
      "name": "ranges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.address.AddressRange\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "indexes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "currentRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressRange",
      "type_short": "AddressRange",
      "constant_value": null
    },
    {
      "name": "currentRangeStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "currentRangeEnd",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "currentRangeIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "maxIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Returns the Address at the specified position in the AddressSet.",
      "javadoc": "Returns the Address at the specified position in the AddressSet.\n@param index the index into the ordered list of addresses within an AddressSet.\n@return the Address at the specified position.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index into the ordered list of addresses within an AddressSet."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the Address at the specified position."
      },
      "throws": []
    },
    {
      "name": "setCurrentRange",
      "comment": "Sets the current range cache.  This class maintains the concept of a \"current range\",\n which is a index into the range list and the start and end indexes for that range.\n This way if the getAddress call uses an index into the \"current range\", it doesn\u0027t\n have to do a binary search to find the range.",
      "javadoc": "Sets the current range cache.  This class maintains the concept of a \"current range\",\n which is a index into the range list and the start and end indexes for that range.\n This way if the getAddress call uses an index into the \"current range\", it doesn\u0027t\n have to do a binary search to find the range.\n@param index",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "indexInCurrentRange",
      "comment": "Check if the given index in in the \"current range\".",
      "javadoc": "Check if the given index in in the \"current range\".\n@param index the index to check",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Returns an n\u0027th address in an address range.",
      "javadoc": "Returns an n\u0027th address in an address range.\n@param range the range to extract an address\n@param offset the index in the range to get an address.",
      "static": false,
      "params": [
        {
          "name": "range",
          "type_long": "ghidra.program.model.address.AddressRange",
          "type_short": "AddressRange",
          "comment": "the range to extract an address"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index in the range to get an address."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStartIndexesForAllAddressRanges",
      "comment": "Compute the index for each range in the address set.",
      "javadoc": "Compute the index for each range in the address set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressRangesFromAddressSet",
      "comment": "Convert the address range into a list of AddressRanges",
      "javadoc": "Convert the address range into a list of AddressRanges",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.address.AddressRange\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    }
  ]
}
