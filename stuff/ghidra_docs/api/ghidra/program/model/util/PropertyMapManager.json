{
  "name": "PropertyMapManager",
  "comment": "Interface for managing a set of PropertyManagers.",
  "javadoc": "Interface for managing a set of PropertyManagers.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "createIntPropertyMap",
      "comment": "Creates a new IntPropertyMap with the given name.",
      "javadoc": "Creates a new IntPropertyMap with the given name.\n@param propertyName the name for the new property.\n@exception DuplicateNameException thrown if a PropertyMap already\n exists with that name.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name for the new property."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.IntPropertyMap",
        "type_short": "IntPropertyMap",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createLongPropertyMap",
      "comment": "Creates a new LongPropertyMap with the given name.",
      "javadoc": "Creates a new LongPropertyMap with the given name.\n@param propertyName the name for the new property.\n@exception DuplicateNameException thrown if a PropertyMap already\n exists with that name.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name for the new property."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.LongPropertyMap",
        "type_short": "LongPropertyMap",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createStringPropertyMap",
      "comment": "Creates a new StringPropertyMap with the given name.",
      "javadoc": "Creates a new StringPropertyMap with the given name.\n@param propertyName the name for the new property.\n@exception DuplicateNameException thrown if a PropertyMap already\n exists with that name.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name for the new property."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.StringPropertyMap",
        "type_short": "StringPropertyMap",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createObjectPropertyMap",
      "comment": "Creates a new ObjectPropertyMap with the given name.",
      "javadoc": "Creates a new ObjectPropertyMap with the given name.\n@param propertyName the name for the new property.\n@exception DuplicateNameException thrown if a PropertyMap already\n exists with that name.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name for the new property."
        },
        {
          "name": "objectClass",
          "type_long": "java.lang.Class\u003c? extends ghidra.util.Saveable\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.ObjectPropertyMap",
        "type_short": "ObjectPropertyMap",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createVoidPropertyMap",
      "comment": "Creates a new VoidPropertyMap with the given name.",
      "javadoc": "Creates a new VoidPropertyMap with the given name.\n@param propertyName the name for the new property.\n@exception DuplicateNameException thrown if a PropertyMap already\n exists with that name.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name for the new property."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.VoidPropertyMap",
        "type_short": "VoidPropertyMap",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getPropertyMap",
      "comment": "Returns the PropertyMap with the given name or null if no PropertyMap\n exists with that name.",
      "javadoc": "Returns the PropertyMap with the given name or null if no PropertyMap\n exists with that name.\n@param propertyName the name of the property to retrieve.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to retrieve."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.PropertyMap",
        "type_short": "PropertyMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIntPropertyMap",
      "comment": "Returns the IntPropertyMap associated with the given name.",
      "javadoc": "Returns the IntPropertyMap associated with the given name.\n@param propertyName the name of the property to retrieve.\n@throws TypeMismatchException if a propertyMap named propertyName\n exists but is not an IntPropertyMap.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to retrieve."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.IntPropertyMap",
        "type_short": "IntPropertyMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLongPropertyMap",
      "comment": "Returns the LongPropertyMap associated with the given name.",
      "javadoc": "Returns the LongPropertyMap associated with the given name.\n@param propertyName the name of the property to retrieve.\n@throws TypeMismatchException if a propertyMap named propertyName\n exists but is not an LongPropertyMap.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to retrieve."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.LongPropertyMap",
        "type_short": "LongPropertyMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStringPropertyMap",
      "comment": "Returns the StringPropertyMap associated with the given name.",
      "javadoc": "Returns the StringPropertyMap associated with the given name.\n@param propertyName the name of the property to retrieve.\n@throws TypeMismatchException if a propertyMap named propertyName\n exists but is not a StringPropertyMap.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to retrieve."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.StringPropertyMap",
        "type_short": "StringPropertyMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getObjectPropertyMap",
      "comment": "Returns the ObjectPropertyMap associated with the given name.",
      "javadoc": "Returns the ObjectPropertyMap associated with the given name.\n@param propertyName the name of the property to retrieve.\n@throws TypeMismatchException if a propertyMap named propertyName\n exists but is not an ObjectPropertyMap.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to retrieve."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.ObjectPropertyMap",
        "type_short": "ObjectPropertyMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVoidPropertyMap",
      "comment": "Returns the VoidPropertyMap associated with the given name.",
      "javadoc": "Returns the VoidPropertyMap associated with the given name.\n@param propertyName the name of the property to retrieve.\n@throws TypeMismatchException if a propertyMap named propertyName\n exists but is not a VoidPropertyMap.",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to retrieve."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.VoidPropertyMap",
        "type_short": "VoidPropertyMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removePropertyMap",
      "comment": "Removes the PropertyMap with the given name.",
      "javadoc": "Removes the PropertyMap with the given name.\n@param propertyName the name of the property to remove.\n@return true if a PropertyMap with that name was found (and removed)",
      "static": false,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to remove."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a PropertyMap with that name was found (and removed)"
      },
      "throws": []
    },
    {
      "name": "propertyManagers",
      "comment": "Returns an iterator over the names of all existing PropertyMaps.",
      "javadoc": "Returns an iterator over the names of all existing PropertyMaps.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cjava.lang.String\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAll",
      "comment": "Removes any property at the given address from all defined \n PropertyMaps.",
      "javadoc": "Removes any property at the given address from all defined \n PropertyMaps.\n@param addr the address at which to remove all property values.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to remove all property values."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAll",
      "comment": "Removes all properties in the given range from all user \n defined PropertyMaps.",
      "javadoc": "Removes all properties in the given range from all user \n defined PropertyMaps.\n@param startAddr the first address in the range of addresses where \n propertie values are to be removed.\n@param endAddr the last address in the range of addresses where \n propertie values are to be removed.\n@param monitor monitors progress\n@throws CancelledException if the user cancelled the operation.",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address in the range of addresses where \n propertie values are to be removed."
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last address in the range of addresses where \n propertie values are to be removed."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "monitors progress"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancelled the operation."
        }
      ]
    }
  ]
}
