{
  "name": "AcyclicCallGraphBuilder",
  "comment": "Class to build an DependencyGraph base on a acyclic function call graph.  This is useful when\n you want to process functions \"bottom up\".",
  "javadoc": "Class to build an DependencyGraph base on a acyclic function call graph.  This is useful when\n you want to process functions \"bottom up\".",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "functionSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cghidra.program.model.address.Address\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "killThunks",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a DependencyGraph of all functions in a program based on the call graph.",
      "javadoc": "Creates a DependencyGraph of all functions in a program based on the call graph.\n@param program the program to create an acyclic call graph\n@param killThunks true if thunked functions should be eliminated from the graph",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to create an acyclic call graph"
        },
        {
          "name": "killThunks",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if thunked functions should be eliminated from the graph"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a DependencyGraph of all functions in the given addressSet based on the call graph.\n Calls to or from functions outside the given address set are ignored.",
      "javadoc": "Creates a DependencyGraph of all functions in the given addressSet based on the call graph.\n Calls to or from functions outside the given address set are ignored.\n@param program the program to create an acyclic call graph\n@param set the address to restrict the call graph.\n@param killThunks true if thunked functions should be eliminated from the graph",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to create an acyclic call graph"
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address to restrict the call graph."
        },
        {
          "name": "killThunks",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if thunked functions should be eliminated from the graph"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a DependencyGraph of all functions in the given set of functions based on the call graph.\n Calls to or from functions not in the given set are ignored.",
      "javadoc": "Creates a DependencyGraph of all functions in the given set of functions based on the call graph.\n Calls to or from functions not in the given set are ignored.\n@param program the program to create an acyclic call graph\n@param functions the set of functions to include in the call graph.\n@param killThunks true if thunked functions should be eliminated from the graph",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to create an acyclic call graph"
        },
        {
          "name": "functions",
          "type_long": "java.util.Collection\u003cghidra.program.model.listing.Function\u003e",
          "type_short": "Collection",
          "comment": "the set of functions to include in the call graph."
        },
        {
          "name": "killThunks",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if thunked functions should be eliminated from the graph"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDependencyGraph",
      "comment": "Builds the DependencyGraph for the acyclic call graph represented by this object.",
      "javadoc": "Builds the DependencyGraph for the acyclic call graph represented by this object.\n@param monitor the taskMonitor to use for reporting progress or cancelling.\n@return the DependencyGraph for the acyclic call graph represented by this object.\n@throws CancelledException if the monitor was cancelled.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the taskMonitor to use for reporting progress or cancelling."
        }
      ],
      "return": {
        "type_long": "ghidra.util.graph.AbstractDependencyGraph\u003cghidra.program.model.address.Address\u003e",
        "type_short": "AbstractDependencyGraph",
        "comment": "the DependencyGraph for the acyclic call graph represented by this object."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor was cancelled."
        }
      ]
    },
    {
      "name": "getNextStartFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "startPoints",
          "type_long": "java.util.Deque\u003cghidra.program.model.address.Address\u003e",
          "type_short": "Deque",
          "comment": ""
        },
        {
          "name": "unProcessedSet",
          "type_long": "java.util.Set\u003cghidra.program.model.address.Address\u003e",
          "type_short": "Set",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findStartPoints",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Deque\u003cghidra.program.model.address.Address\u003e",
        "type_short": "Deque",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeNode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "node",
          "type_long": "ghidra.program.model.util.AcyclicCallGraphBuilder.StackNode",
          "type_short": "StackNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processForward",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "graph",
          "type_long": "ghidra.util.graph.AbstractDependencyGraph\u003cghidra.program.model.address.Address\u003e",
          "type_short": "AbstractDependencyGraph",
          "comment": ""
        },
        {
          "name": "unprocessed",
          "type_long": "java.util.Set\u003cghidra.program.model.address.Address\u003e",
          "type_short": "Set",
          "comment": ""
        },
        {
          "name": "startFunction",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isStartFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findFunctions",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "killThunks",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.address.Address\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    }
  ]
}
