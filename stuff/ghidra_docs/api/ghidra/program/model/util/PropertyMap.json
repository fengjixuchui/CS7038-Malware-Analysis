{
  "name": "PropertyMap",
  "comment": "Interface to define a map containing properties over a set of addresses.",
  "javadoc": "Interface to define a map containing properties over a set of addresses.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getName",
      "comment": "Get the name for this property map.",
      "javadoc": "Get the name for this property map.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "Given two addresses, indicate whether there is an address in\n that range (inclusive) having the property.",
      "javadoc": "Given two addresses, indicate whether there is an address in\n that range (inclusive) having the property.\u003cp\u003e\n@param start the start of the range.\n@param end the end of the range.\n@return boolean true if at least one address in the range\n has the property, false otherwise.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start of the range."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end of the range."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if at least one address in the range\n has the property, false otherwise."
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "Indicate whether there is an address within\n the set which exists within this map.",
      "javadoc": "Indicate whether there is an address within\n the set which exists within this map.\u003cp\u003e\n@param set set of addresses\n@return boolean true if at least one address in the set\n has the property, false otherwise.",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "set of addresses"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if at least one address in the set\n has the property, false otherwise."
      },
      "throws": []
    },
    {
      "name": "removeRange",
      "comment": "Removes all property values within a given range.",
      "javadoc": "Removes all property values within a given range.\n@param start begin range\n@param end end range, inclusive\n@return true if any property value was removed; return\n \t\tfalse otherwise.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "begin range"
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "end range, inclusive"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if any property value was removed; return\n \t\tfalse otherwise."
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Remove the property value at the given address.",
      "javadoc": "Remove the property value at the given address.\n@return true if the property value was removed, false\n   otherwise.\n@param addr the address where the property should be removed",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address where the property should be removed"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the property value was removed, false\n   otherwise."
      },
      "throws": []
    },
    {
      "name": "hasProperty",
      "comment": "returns whether there is a property value at addr.",
      "javadoc": "returns whether there is a property value at addr.\n@param addr the address in question",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address in question"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getObject",
      "comment": "Returns the property value stored at the specified \n address or null if no property found.",
      "javadoc": "Returns the property value stored at the specified \n address or null if no property found.\n@param addr property address\n@return property value",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "property address"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "property value"
      },
      "throws": []
    },
    {
      "name": "getNextPropertyAddress",
      "comment": "Get the next address where the property value exists.",
      "javadoc": "Get the next address where the property value exists.\n@param addr the address from which to begin the search (exclusive).",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address from which to begin the search (exclusive)."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPreviousPropertyAddress",
      "comment": "Get the previous Address where a property value exists.",
      "javadoc": "Get the previous Address where a property value exists.\n@param addr the address from which\n \t\tto begin the search (exclusive).",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address from which\n \t\tto begin the search (exclusive)."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFirstPropertyAddress",
      "comment": "Get the first Address where a property value exists.",
      "javadoc": "Get the first Address where a property value exists.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLastPropertyAddress",
      "comment": "Get the last Address where a property value exists.",
      "javadoc": "Get the last Address where a property value exists.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "Get the number of properties in the map.",
      "javadoc": "Get the number of properties in the map.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPropertyIterator",
      "comment": "Returns an iterator over the indices having a property\n value.",
      "javadoc": "Returns an iterator over the indices having a property\n value.\n@exception TypeMismatchException thrown if the property does not\n have values of type \u003cCODE\u003eObject\u003c/CODE\u003e.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPropertyIterator",
      "comment": "Returns an iterator over addresses that have a property\n value.",
      "javadoc": "Returns an iterator over addresses that have a property\n value.\n@param forward if true will iterate in increasing address order, otherwise it will start at\n the end and iterate in decreasing address order\n@exception TypeMismatchException thrown if the property does not\n have values of type \u003cCODE\u003eObject\u003c/CODE\u003e.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true will iterate in increasing address order, otherwise it will start at\n the end and iterate in decreasing address order"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPropertyIterator",
      "comment": "Returns an iterator over the addresses that a property\n value.",
      "javadoc": "Returns an iterator over the addresses that a property\n value.\n@exception TypeMismatchException thrown if the property does not\n have values of type \u003cCODE\u003eObject\u003c/CODE\u003e.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPropertyIterator",
      "comment": "Returns an iterator over the addresses that have a property value and\n are in the given address set.",
      "javadoc": "Returns an iterator over the addresses that have a property value and\n are in the given address set.\n@param asv the set of addresses to iterate over.",
      "static": false,
      "params": [
        {
          "name": "asv",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the set of addresses to iterate over."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPropertyIterator",
      "comment": "Returns an iterator over the addresses that have a property value and\n are in the given address set.",
      "javadoc": "Returns an iterator over the addresses that have a property value and\n are in the given address set.\n@param forward if true will iterate in increasing address order, otherwise it will start at\n the end and iterate in decreasing address order",
      "static": false,
      "params": [
        {
          "name": "asv",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true will iterate in increasing address order, otherwise it will start at\n the end and iterate in decreasing address order"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPropertyIterator",
      "comment": "Returns an iterator over the address having a property\n value.",
      "javadoc": "Returns an iterator over the address having a property\n value.\n@param start the starting address\n@param forward if true will iterate in increasing address order, otherwise it will start at\n the end and iterate in decreasing address order\n@exception TypeMismatchException thrown if the property does not\n have values of type \u003cCODE\u003eObject\u003c/CODE\u003e.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the starting address"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true will iterate in increasing address order, otherwise it will start at\n the end and iterate in decreasing address order"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressIterator",
        "type_short": "AddressIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyValue",
      "comment": "Applies a property value at the indicated address without knowing its \n type (String, int, long, etc.) by using the property visitor.",
      "javadoc": "Applies a property value at the indicated address without knowing its \n type (String, int, long, etc.) by using the property visitor.\n@param visitor the property visitor that lets you apply the property\n without knowing its specific type ahead of time.\n@param addr the address where the property is to be applied.",
      "static": false,
      "params": [
        {
          "name": "visitor",
          "type_long": "ghidra.util.prop.PropertyVisitor",
          "type_short": "PropertyVisitor",
          "comment": "the property visitor that lets you apply the property\n without knowing its specific type ahead of time."
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address where the property is to be applied."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveRange",
      "comment": "Moves the properties defined in the range from the start address thru the \n end address to now be located beginning at the newStart address. \n The moved properties will be located at the same relative location to \n the newStart address as they were previously to the start address.",
      "javadoc": "Moves the properties defined in the range from the start address thru the \n end address to now be located beginning at the newStart address. \n The moved properties will be located at the same relative location to \n the newStart address as they were previously to the start address.\n@param start the start of the range to move.\n@param end the end of the range to move.\n@param newStart the new start location of the range of properties \n after the move.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start of the range to move."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end of the range to move."
        },
        {
          "name": "newStart",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the new start location of the range of properties \n after the move."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
