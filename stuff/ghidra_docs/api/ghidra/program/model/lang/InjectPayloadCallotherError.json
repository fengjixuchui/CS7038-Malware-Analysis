{
  "name": "InjectPayloadCallotherError",
  "comment": "A substitute for a callother fixup that did not fully parse",
  "javadoc": "A substitute for a callother fixup that did not fully parse",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.lang.InjectPayloadCallother",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for use if the p-code template did not parse",
      "javadoc": "Constructor for use if the p-code template did not parse\n@param addrFactory is the address factory to use constructing dummy p-code\n@param failedPayload is the object with the failed template",
      "static": false,
      "params": [
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": "is the address factory to use constructing dummy p-code"
        },
        {
          "name": "failedPayload",
          "type_long": "ghidra.program.model.lang.InjectPayloadCallother",
          "type_short": "InjectPayloadCallother",
          "comment": "is the object with the failed template"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        },
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isErrorPlaceholder",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
