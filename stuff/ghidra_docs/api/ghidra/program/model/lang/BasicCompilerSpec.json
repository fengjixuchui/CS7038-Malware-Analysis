{
  "name": "BasicCompilerSpec",
  "comment": "BasicCompilerSpec implements the CompilerSpec interface based on static information\n from a particular .cspec file.  Typically the .cspec file is read in once by a Language\n object whenever a new or opened Program indicates a particular language and compiler.\n The BasicCompilerSpec is owned by the Language and (parts of it) may be reused by\n multiple Programs.",
  "javadoc": "BasicCompilerSpec implements the CompilerSpec interface based on static information\n from a particular .cspec file.  Typically the .cspec file is read in once by a Language\n object whenever a new or opened Program indicates a particular language and compiler.\n The BasicCompilerSpec is owned by the Language and (parts of it) may be reused by\n multiple Programs.",
  "static": false,
  "implements": [
    "ghidra.program.model.lang.CompilerSpec"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "STACK_SPACE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"stack\""
    },
    {
      "name": "JOIN_SPACE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"join\""
    },
    {
      "name": "OTHER_SPACE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"OTHER\""
    },
    {
      "name": "CONSTANT_SPACE_INDEX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "OTHER_SPACE_INDEX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "description",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.CompilerSpecDescription",
      "type_short": "CompilerSpecDescription",
      "constant_value": null
    },
    {
      "name": "sourceName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "language",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.SleighLanguage",
      "type_short": "SleighLanguage",
      "constant_value": null
    },
    {
      "name": "dataOrganization",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataOrganizationImpl",
      "type_short": "DataOrganizationImpl",
      "constant_value": null
    },
    {
      "name": "ctxsetting",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.lang.ContextSetting\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "defaultModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.PrototypeModel",
      "type_short": "PrototypeModel",
      "constant_value": null
    },
    {
      "name": "evalCurrentModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.PrototypeModel",
      "type_short": "PrototypeModel",
      "constant_value": null
    },
    {
      "name": "evalCalledModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.PrototypeModel",
      "type_short": "PrototypeModel",
      "constant_value": null
    },
    {
      "name": "allmodels",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.PrototypeModel[]",
      "type_short": "ghidra.program.model.lang.PrototypeModel[]",
      "constant_value": null
    },
    {
      "name": "models",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.PrototypeModel[]",
      "type_short": "ghidra.program.model.lang.PrototypeModel[]",
      "constant_value": null
    },
    {
      "name": "copiedThisModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "stackPointer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Register",
      "type_short": "Register",
      "constant_value": null
    },
    {
      "name": "stackSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    },
    {
      "name": "stackBaseSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    },
    {
      "name": "joinSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    },
    {
      "name": "stackGrowsNegative",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "reverseJustifyStack",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "spaceBases",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,generic.stl.Pair\u003cghidra.program.model.address.AddressSpace,java.lang.String\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "extraRanges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cgeneric.stl.Pair\u003cjava.lang.String,generic.stl.Pair\u003cjava.lang.Long,java.lang.Long\u003e\u003e\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "pcodeInject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.PcodeInjectLibrary",
      "type_short": "PcodeInjectLibrary",
      "constant_value": null
    },
    {
      "name": "globalSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "properties",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.LinkedHashMap\u003cjava.lang.String,java.lang.String\u003e",
      "type_short": "LinkedHashMap",
      "constant_value": null
    },
    {
      "name": "callingConventionMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.program.model.lang.PrototypeModel\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "aggressiveTrim",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "preferSplit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.pcode.Varnode\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "noHighPtr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "readOnlySet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "returnAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode",
      "type_short": "Varnode",
      "constant_value": null
    },
    {
      "name": "funcPtrAlign",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "deadCodeDelay",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cgeneric.stl.Pair\u003cghidra.program.model.address.AddressSpace,java.lang.Integer\u003e\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "inferPtrBounds",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.address.AddressRange\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct the specification from an XML stream.  This is currently only used for testing.",
      "javadoc": "Construct the specification from an XML stream.  This is currently only used for testing.\n@param description is the .ldefs description matching this specification\n@param language is the language that owns the specification\n@param stream is the XML stream\n@throws XmlParseException for badly formed XML\n@throws SAXException for syntax errors in the XML\n@throws IOException for errors accessing the stream",
      "static": false,
      "params": [
        {
          "name": "description",
          "type_long": "ghidra.program.model.lang.CompilerSpecDescription",
          "type_short": "CompilerSpecDescription",
          "comment": "is the .ldefs description matching this specification"
        },
        {
          "name": "language",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighLanguage",
          "type_short": "SleighLanguage",
          "comment": "is the language that owns the specification"
        },
        {
          "name": "stream",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "is the XML stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": "for badly formed XML"
        },
        {
          "type_long": "org.xml.sax.SAXException",
          "type_short": "SAXException",
          "comment": "for syntax errors in the XML"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for errors accessing the stream"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Read in the specification from an XML file.",
      "javadoc": "Read in the specification from an XML file.\n@param description is the .ldefs description associated with the specification\n@param language is the language owning the specification\n@param cspecFile is the XML file\n@throws CompilerSpecNotFoundException for any form of error preventing the specification from being loaded.",
      "static": false,
      "params": [
        {
          "name": "description",
          "type_long": "ghidra.program.model.lang.CompilerSpecDescription",
          "type_short": "CompilerSpecDescription",
          "comment": "is the .ldefs description associated with the specification"
        },
        {
          "name": "language",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighLanguage",
          "type_short": "SleighLanguage",
          "comment": "is the language owning the specification"
        },
        {
          "name": "cspecFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "is the XML file"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.CompilerSpecNotFoundException",
          "type_short": "CompilerSpecNotFoundException",
          "comment": "for any form of error preventing the specification from being loaded."
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Clone the spec so that program can safely extend it without affecting the base\n spec from Language.",
      "javadoc": "Clone the spec so that program can safely extend it without affecting the base\n spec from Language.\n@param op2 is the spec to clone",
      "static": false,
      "params": [
        {
          "name": "op2",
          "type_long": "ghidra.program.model.lang.BasicCompilerSpec",
          "type_short": "BasicCompilerSpec",
          "comment": "is the spec to clone"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getErrorHandler",
      "comment": "Generate an XML error handler suitable for parsing a specification document.\n   - Warnings are logged.\n   - Errors cause a SAXParseException",
      "javadoc": "Generate an XML error handler suitable for parsing a specification document.\n   - Warnings are logged.\n   - Errors cause a SAXParseException\n@param docTitle is the title of the document\n@return the error handler object",
      "static": true,
      "params": [
        {
          "name": "docTitle",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the title of the document"
        }
      ],
      "return": {
        "type_long": "org.xml.sax.ErrorHandler",
        "type_short": "ErrorHandler",
        "comment": "the error handler object"
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "srcName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "buildInjectLibrary",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addThisCallConventionIfMissing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "modelList",
          "type_long": "java.util.List\u003cghidra.program.model.lang.PrototypeModel\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "defaultName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getXMLString",
      "comment": "Convenience method to marshal this entire object, via saveXml, into a String object.",
      "javadoc": "Convenience method to marshal this entire object, via saveXml, into a String object.\n@return a String containing this entire spec as an XML document.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a String containing this entire spec as an XML document."
      },
      "throws": []
    },
    {
      "name": "applyContextSettings",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "programContext",
          "type_long": "ghidra.program.model.listing.DefaultProgramContext",
          "type_short": "DefaultProgramContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCompilerSpecID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.CompilerSpecID",
        "type_short": "CompilerSpecID",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doesCDataTypeConversions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addContextSetting",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "begad",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "endad",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCallingConventions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel[]",
        "type_short": "ghidra.program.model.lang.PrototypeModel[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCallingConvention",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllModels",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel[]",
        "type_short": "ghidra.program.model.lang.PrototypeModel[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultCallingConvention",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDecompilerOutputLanguage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.DecompilerLanguage",
        "type_short": "DecompilerLanguage",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrototypeEvaluationModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "modelType",
          "type_long": "ghidra.program.model.lang.CompilerSpec.EvaluationModelType",
          "type_short": "EvaluationModelType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStackPointer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isStackRightJustified",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStackSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStackBaseSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "stackGrowsNegative",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isGlobal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLanguage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Language",
        "type_short": "Language",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCompilerSpecDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.CompilerSpecDescription",
        "type_short": "CompilerSpecDescription",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "spaceName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildModelArrays",
      "comment": "Build the model arrays given a complete list of models.\n The array -models- contains all normal PrototypeModel objects\n The array -allmodels- contains all models, including merge models.",
      "javadoc": "Build the model arrays given a complete list of models.\n The array -models- contains all normal PrototypeModel objects\n The array -allmodels- contains all models, including merge models.\n@param modelList is the complete list of models",
      "static": false,
      "params": [
        {
          "name": "modelList",
          "type_long": "java.util.List\u003cghidra.program.model.lang.PrototypeModel\u003e",
          "type_short": "List",
          "comment": "is the complete list of models"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "modelXrefs",
      "comment": "Establish cross referencing to prototype models.\n All xrefs are regenerated from a single complete list of PrototypeModels",
      "javadoc": "Establish cross referencing to prototype models.\n All xrefs are regenerated from a single complete list of PrototypeModels\n@param modelList is the complete list of models\n@param defaultName is the name to use for the default model (or null)\n@param evalCurrent is the name to use for evaluating the current function (or null)\n@param evalCalled is the name to use for evaluating called functions (or null)",
      "static": false,
      "params": [
        {
          "name": "modelList",
          "type_long": "java.util.List\u003cghidra.program.model.lang.PrototypeModel\u003e",
          "type_short": "List",
          "comment": "is the complete list of models"
        },
        {
          "name": "defaultName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the name to use for the default model (or null)"
        },
        {
          "name": "evalCurrent",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the name to use for evaluating the current function (or null)"
        },
        {
          "name": "evalCalled",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the name to use for evaluating called functions (or null)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveXml",
      "comment": "Marshal this entire specification to an XML stream.  An XML document is written with\n root tag \\.",
      "javadoc": "Marshal this entire specification to an XML stream.  An XML document is written with\n root tag \\\u003ccompiler_spec\u003e.\n@param buffer is the XML stream",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the XML stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXml",
      "comment": "Initialize this object from an XML stream.  A single \\ tag is expected.",
      "javadoc": "Initialize this object from an XML stream.  A single \\\u003ccompiler_spec\u003e tag is expected.\n@param parser is the XML stream\n@throws XmlParseException for badly formed XML",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": "for badly formed XML"
        }
      ]
    },
    {
      "name": "saveProperties",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreProperties",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveSpaceBases",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreSpaceBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveReturnAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreReturnAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readExtraRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "el",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": ""
        },
        {
          "name": "spcName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "tagName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveExtraRanges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "tagName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveMemoryTags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "tagName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreMemoryTags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tagName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "restorePreferSplit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "savePreferSplit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreDeadCodeDelay",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveDeadCodeDelay",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreInferPtrBounds",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "saveInferPtrBounds",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStackPointer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBooleanValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "booleanStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPrototypeModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "modelList",
          "type_long": "java.util.List\u003cghidra.program.model.lang.PrototypeModel\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDataOrganization",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataOrganization",
        "type_short": "DataOrganization",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "matchConvention",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "genericCallingConvention",
          "type_long": "ghidra.program.model.data.GenericCallingConvention",
          "type_short": "GenericCallingConvention",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findBestCallingConvention",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "params",
          "type_long": "ghidra.program.model.listing.Parameter[]",
          "type_short": "ghidra.program.model.listing.Parameter[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProperty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPropertyKeys",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cjava.lang.String\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProperty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "defaultString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPropertyAsBoolean",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "defaultBoolean",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPropertyAsInt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "defaultInt",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasProperty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPcodeInjectLibrary",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.PcodeInjectLibrary",
        "type_short": "PcodeInjectLibrary",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeProgramMechanismPayloads",
      "comment": "Remove any call mechanism injections associated with the given list of PrototypeModels",
      "javadoc": "Remove any call mechanism injections associated with the given list of PrototypeModels\n@param modelList is the given list",
      "static": false,
      "params": [
        {
          "name": "modelList",
          "type_long": "java.util.Collection\u003cghidra.program.model.lang.PrototypeModel\u003e",
          "type_short": "Collection",
          "comment": "is the given list"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerProgramInject",
      "comment": "Register Program based InjectPayloads with the p-code library.\n This allows derived classes to extend the library",
      "javadoc": "Register Program based InjectPayloads with the p-code library.\n This allows derived classes to extend the library\n@param injectExtensions is the list of payloads to register",
      "static": false,
      "params": [
        {
          "name": "injectExtensions",
          "type_long": "java.util.List\u003cghidra.program.model.lang.InjectPayloadSleigh\u003e",
          "type_short": "List",
          "comment": "is the list of payloads to register"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markPrototypeAsExtension",
      "comment": "Mark a given PrototypeModel as a Program specific extension",
      "javadoc": "Mark a given PrototypeModel as a Program specific extension\n@param model is the given PrototypeModel",
      "static": true,
      "params": [
        {
          "name": "model",
          "type_long": "ghidra.program.model.lang.PrototypeModel",
          "type_short": "PrototypeModel",
          "comment": "is the given PrototypeModel"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
