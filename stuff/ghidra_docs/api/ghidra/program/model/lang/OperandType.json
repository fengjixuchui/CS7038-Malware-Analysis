{
  "name": "OperandType",
  "comment": "Helper class for testing operand related flags in an integer.",
  "javadoc": "Helper class for testing operand related flags in an integer.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "READ",
      "comment": "Bit set if operand refers to an address being read",
      "javadoc": "Bit set if operand refers to an address being read",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "WRITE",
      "comment": "Bit set if operand refers to an address being written to",
      "javadoc": "Bit set if operand refers to an address being written to",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "INDIRECT",
      "comment": "Bit set if operand is an indirect reference.",
      "javadoc": "Bit set if operand is an indirect reference.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "IMMEDIATE",
      "comment": "Bit set if operand is an immediate value.",
      "javadoc": "Bit set if operand is an immediate value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "RELATIVE",
      "comment": "Bit set if operand depends on the instruction\u0027s address.",
      "javadoc": "Bit set if operand depends on the instruction\u0027s address.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16"
    },
    {
      "name": "IMPLICIT",
      "comment": "Bit set if operand is implicit.",
      "javadoc": "Bit set if operand is implicit.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32"
    },
    {
      "name": "CODE",
      "comment": "Bit set it the address referred to contains code.",
      "javadoc": "Bit set it the address referred to contains code.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "64"
    },
    {
      "name": "DATA",
      "comment": "Bit set if the address referred to contains data.",
      "javadoc": "Bit set if the address referred to contains data.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "128"
    },
    {
      "name": "PORT",
      "comment": "Bit set if the operand is a register.",
      "javadoc": "Bit set if the operand is a register.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "256"
    },
    {
      "name": "REGISTER",
      "comment": "Bit set if the operand is a register.",
      "javadoc": "Bit set if the operand is a register.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "512"
    },
    {
      "name": "LIST",
      "comment": "Bit set if the operand is a register.",
      "javadoc": "Bit set if the operand is a register.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1024"
    },
    {
      "name": "FLAG",
      "comment": "Bit set if the operand is a flag.",
      "javadoc": "Bit set if the operand is a flag.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2048"
    },
    {
      "name": "TEXT",
      "comment": "Bit set if the operand is text.",
      "javadoc": "Bit set if the operand is text.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4096"
    },
    {
      "name": "ADDRESS",
      "comment": "Bit set if the operand is used as an address.\n  If this is not set, assume it is a scalar value.",
      "javadoc": "Bit set if the operand is used as an address.\n  If this is not set, assume it is a scalar value.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8192"
    },
    {
      "name": "SCALAR",
      "comment": "Bit set if the operand is a scalar value",
      "javadoc": "Bit set if the operand is a scalar value",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16384"
    },
    {
      "name": "BIT",
      "comment": "Bit set if the operand is a bit value",
      "javadoc": "Bit set if the operand is a bit value",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32768"
    },
    {
      "name": "BYTE",
      "comment": "Bit set if the operand is a byte value",
      "javadoc": "Bit set if the operand is a byte value",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "65536"
    },
    {
      "name": "WORD",
      "comment": "Bit set if the operand is a 2 byte value",
      "javadoc": "Bit set if the operand is a 2 byte value",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "131072"
    },
    {
      "name": "QUADWORD",
      "comment": "Bit set if the operand is a 8 byte value",
      "javadoc": "Bit set if the operand is a 8 byte value",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "262144"
    },
    {
      "name": "SIGNED",
      "comment": "Bit set if the operand is a signed value",
      "javadoc": "Bit set if the operand is a signed value",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "524288"
    },
    {
      "name": "FLOAT",
      "comment": "Bit set if the operand is a float value",
      "javadoc": "Bit set if the operand is a float value",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1048576"
    },
    {
      "name": "COP",
      "comment": "Bit set if the operand is a co-processor value",
      "javadoc": "Bit set if the operand is a co-processor value",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2097152"
    },
    {
      "name": "DYNAMIC",
      "comment": "Bit set if the operand is dynamically defined given some processorContext.\n If bit is set then the SCALAR or ADDRESS bit must be set.",
      "javadoc": "Bit set if the operand is dynamically defined given some processorContext.\n If bit is set then the SCALAR or ADDRESS bit must be set.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4194304"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doesRead",
      "comment": "check the READ flag.",
      "javadoc": "check the READ flag.\n@param operandType the bit field to examine.\n@return true if the READ flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the READ flag is set."
      },
      "throws": []
    },
    {
      "name": "doesWrite",
      "comment": "check the WRITE flag.",
      "javadoc": "check the WRITE flag.\n@param operandType the bit field to examine.\n@return true if the WRITE flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the WRITE flag is set."
      },
      "throws": []
    },
    {
      "name": "isIndirect",
      "comment": "check the INDIRECT flag.",
      "javadoc": "check the INDIRECT flag.\n@param operandType the bit field to examine.\n@return true if the INDIRECT flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the INDIRECT flag is set."
      },
      "throws": []
    },
    {
      "name": "isImmediate",
      "comment": "check the IMMEDIATE flag.",
      "javadoc": "check the IMMEDIATE flag.\n@param operandType the bit field to examine.\n@return true if the IMMEDIATE flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the IMMEDIATE flag is set."
      },
      "throws": []
    },
    {
      "name": "isRelative",
      "comment": "check the RELATIVE flag.",
      "javadoc": "check the RELATIVE flag.\n@param operandType the bit field to examine.\n@return true if the RELATIVE flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the RELATIVE flag is set."
      },
      "throws": []
    },
    {
      "name": "isImplicit",
      "comment": "check the IMPLICIT flag.",
      "javadoc": "check the IMPLICIT flag.\n@param operandType the bit field to examine.\n@return true if the IMPLICIT flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the IMPLICIT flag is set."
      },
      "throws": []
    },
    {
      "name": "isCodeReference",
      "comment": "check the CODE flag.",
      "javadoc": "check the CODE flag.\n@param operandType the bit field to examine.\n@return true if the CODE flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the CODE flag is set."
      },
      "throws": []
    },
    {
      "name": "isDataReference",
      "comment": "check the DATA flag.",
      "javadoc": "check the DATA flag.\n@param operandType the bit field to examine.\n@return true if the DATA flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the DATA flag is set."
      },
      "throws": []
    },
    {
      "name": "isPort",
      "comment": "check the PORT flag.",
      "javadoc": "check the PORT flag.\n@param operandType the bit field to examine.\n@return true if the PORT flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the PORT flag is set."
      },
      "throws": []
    },
    {
      "name": "isRegister",
      "comment": "check the REGISTER flag.",
      "javadoc": "check the REGISTER flag.\n@param operandType the bit field to examine.\n@return true if the REGISTER flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the REGISTER flag is set."
      },
      "throws": []
    },
    {
      "name": "isList",
      "comment": "check the LIST flag.",
      "javadoc": "check the LIST flag.\n@param operandType the bit field to examine.\n@return true if the LIST flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the LIST flag is set."
      },
      "throws": []
    },
    {
      "name": "isFlag",
      "comment": "check the CONDITION FLAG flag.",
      "javadoc": "check the CONDITION FLAG flag.\n@param operandType the bit field to examine.\n@return true if the CONDITION flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the CONDITION flag is set."
      },
      "throws": []
    },
    {
      "name": "isText",
      "comment": "check the TEXT flag.",
      "javadoc": "check the TEXT flag.\n@param operandType the bit field to examine.\n@return true if the TEXT flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the TEXT flag is set."
      },
      "throws": []
    },
    {
      "name": "isAddress",
      "comment": "check ADDRESS flag.",
      "javadoc": "check ADDRESS flag.\n@param operandType the bit field to examine.\n@return true if the ADDRESS flag is set",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the ADDRESS flag is set"
      },
      "throws": []
    },
    {
      "name": "isScalar",
      "comment": "check SCALAR flag.",
      "javadoc": "check SCALAR flag.\n@param operandType the bit field to examine.\n@return true if the SCALAR flag is set",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the SCALAR flag is set"
      },
      "throws": []
    },
    {
      "name": "isBit",
      "comment": "check the BIT flag.",
      "javadoc": "check the BIT flag.\n@param operandType the bit field to examine.\n@return true if the BIT flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the BIT flag is set."
      },
      "throws": []
    },
    {
      "name": "isByte",
      "comment": "check the BYTE flag.",
      "javadoc": "check the BYTE flag.\n@param operandType the bit field to examine.\n@return true if the BYTE flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the BYTE flag is set."
      },
      "throws": []
    },
    {
      "name": "isWord",
      "comment": "check the WORD flag.",
      "javadoc": "check the WORD flag.\n@param operandType the bit field to examine.\n@return true if the WORD flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the WORD flag is set."
      },
      "throws": []
    },
    {
      "name": "isQuadWord",
      "comment": "check the QUADWORD flag.",
      "javadoc": "check the QUADWORD flag.\n@param operandType the bit field to examine.\n@return true if the QUADWORD flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the QUADWORD flag is set."
      },
      "throws": []
    },
    {
      "name": "isSigned",
      "comment": "check the SIGNED flag.",
      "javadoc": "check the SIGNED flag.\n@param operandType the bit field to examine.\n@return true if the SIGNED flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the SIGNED flag is set."
      },
      "throws": []
    },
    {
      "name": "isFloat",
      "comment": "check the FLOAT flag.",
      "javadoc": "check the FLOAT flag.\n@param operandType the bit field to examine.\n@return true if the FLOAT flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the FLOAT flag is set."
      },
      "throws": []
    },
    {
      "name": "isCoProcessor",
      "comment": "check the COPROCESSOR flag.",
      "javadoc": "check the COPROCESSOR flag.\n@param operandType the bit field to examine.\n@return true if the COPROCESSOR flag is set.",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the COPROCESSOR flag is set."
      },
      "throws": []
    },
    {
      "name": "isScalarAsAddress",
      "comment": "check if both a scalar and an address",
      "javadoc": "check if both a scalar and an address\n@param operandType the bit field to examine.\n@return true if it is both a scalar and an address",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit field to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if it is both a scalar and an address"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "returns a string representation of the given operandType",
      "javadoc": "returns a string representation of the given operandType\n@param operandType the operandType bits\n@return the string rep",
      "static": true,
      "params": [
        {
          "name": "operandType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the operandType bits"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string rep"
      },
      "throws": []
    },
    {
      "name": "append",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuffer",
          "type_short": "StringBuffer",
          "comment": ""
        },
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
