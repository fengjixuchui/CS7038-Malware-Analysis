{
  "name": "PackedBytes",
  "comment": "A class for dynamically collecting a stream of bytes and then later dumping those bytes to a stream\n It allows the bytes to be edited in the middle of collection",
  "javadoc": "A class for dynamically collecting a stream of bytes and then later dumping those bytes to a stream\n It allows the bytes to be edited in the middle of collection",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "out",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "bytecnt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "startlen",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getByte",
      "comment": "Inspect the middle of the byte stream accumulated so far",
      "javadoc": "Inspect the middle of the byte stream accumulated so far\n@param streampos is the index of the byte to inspect\n@return a byte value from the stream",
      "static": false,
      "params": [
        {
          "name": "streampos",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the index of the byte to inspect"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "a byte value from the stream"
      },
      "throws": []
    },
    {
      "name": "insertByte",
      "comment": "Overwrite bytes that have already been written into the stream",
      "javadoc": "Overwrite bytes that have already been written into the stream\n@param streampos is the index of the byte to overwrite\n@param val is the value to overwrite with",
      "static": false,
      "params": [
        {
          "name": "streampos",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the index of the byte to overwrite"
        },
        {
          "name": "val",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the value to overwrite with"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "write",
      "comment": "Dump a single byte to the packed byte stream",
      "javadoc": "Dump a single byte to the packed byte stream\n@param val is the byte to be written",
      "static": false,
      "params": [
        {
          "name": "val",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the byte to be written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "find",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "val",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "writeTo",
      "comment": "Write the accumulated packed byte stream onto the output stream",
      "javadoc": "Write the accumulated packed byte stream onto the output stream\n@param s is the output stream receiving the bytes\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": "is the output stream receiving the bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
