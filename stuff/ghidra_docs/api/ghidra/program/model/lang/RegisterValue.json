{
  "name": "RegisterValue",
  "comment": "Class for representing register values that keep track of which bits are actually set.  \n Values are stored as big-endian: MSB of mask is stored at bytes index 0,\n MSB of value is stored at (bytes.length/2).\n \n Bytes storage example for 4-byte register:\n    Index:  0   1   2   3   4   5   6   7\n          |MSB|   |   |LSB|MSB|   |   |LSB|\n          | ----MASK----- | ----VALUE---- |",
  "javadoc": "Class for representing register values that keep track of which bits are actually set.  \n Values are stored as big-endian: MSB of mask is stored at bytes index 0,\n MSB of value is stored at (bytes.length/2).\n \n Bytes storage example for 4-byte register:\n    Index:  0   1   2   3   4   5   6   7\n          |MSB|   |   |LSB|MSB|   |   |LSB|\n          | ----MASK----- | ----VALUE---- |",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "START_BYTE_MASK",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "END_BYTE_MASK",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "bytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "startBit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "endBit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "register",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Register",
      "type_short": "Register",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new RegisterValue for a register that has no value (all mask bits are 0);",
      "javadoc": "Creates a new RegisterValue for a register that has no value (all mask bits are 0);\n@param register the register associated with this value.",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register associated with this value."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new RegisterValue object for the given register and value.",
      "javadoc": "Constructs a new RegisterValue object for the given register and value.\n@param value the value to set. All mask bits for the given register are set to \"valid\" (on).",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "the value to set. All mask bits for the given register are set to \"valid\" (on)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new RegisterValue using a specified value and mask",
      "javadoc": "Constructs a new RegisterValue using a specified value and mask\n@param register\n@param value value corresponding to specified register\n@param mask value mask identifying which value bits are valid",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "value corresponding to specified register"
        },
        {
          "name": "mask",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "value mask identifying which value bits are valid"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new RegisterValue object for the given register and the mask/value byte array",
      "javadoc": "Constructs a new RegisterValue object for the given register and the mask/value byte array\n@param register the register associated with this value.  The register specifies which bits\n int the total mask/value arrays are used for this register which may be a sub-register of\n some larger register.  The byte[] always is sized for the largest Register that contains\n the given register.\n@param bytes the mask/value array - the first n/2 bytes are the mask and the last n/2 bytes\n are the value bits.",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register associated with this value.  The register specifies which bits\n int the total mask/value arrays are used for this register which may be a sub-register of\n some larger register.  The byte[] always is sized for the largest Register that contains\n the given register."
        },
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the mask/value array - the first n/2 bytes are the mask and the last n/2 bytes\n are the value bits."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyRegisterMask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "baseMask",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustBytes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "baseRegister",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "Returns the register used in this register value object.",
      "javadoc": "Returns the register used in this register value object.\n@return the register used in this register value object",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "the register used in this register value object"
      },
      "throws": []
    },
    {
      "name": "combineValues",
      "comment": "Creates a new RegisterValue. \n The resulting value is a combination of this RegisterValue and the given RegisterValue,\n where the given RegisterValue\u0027s value bits take precedence over this RegisterValue\u0027s value. \n \n Each value bit is determined as follows: \n If the mask bit in otherValue is \"ON\", then otherValue\u0027s value bit is used. Otherwise,\n this value bit used.\n \n The mask bits are OR\u0027d together to form the new mask bits.",
      "javadoc": "Creates a new RegisterValue. \n The resulting value is a combination of this RegisterValue and the given RegisterValue,\n where the given RegisterValue\u0027s value bits take precedence over this RegisterValue\u0027s value. \n \n Each value bit is determined as follows: \n If the mask bit in \u003ccode\u003eotherValue\u003c/code\u003e is \"ON\", then \u003ccode\u003eotherValue\u003c/code\u003e\u0027s value bit is used. Otherwise,\n \u003ccode\u003ethis\u003c/code\u003e value bit used.\n \n The mask bits are OR\u0027d together to form the new mask bits.\n@param otherValue the currently stored mask and value bytes.  The base register must match the base register \n of this register value.\n@return a new RegisterValue object containing the original value bits where the new array \n mask bits are \"OFF\" and the new value bits where the new array mask bits are \"ON\".\n If the registers differ the resulting register value will be relative to the base register.",
      "static": false,
      "params": [
        {
          "name": "otherValue",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": "the currently stored mask and value bytes.  The base register must match the base register \n of this register value."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": "a new RegisterValue object containing the original value bits where the new array \n mask bits are \"OFF\" and the new value bits where the new array mask bits are \"ON\".\n If the registers differ the resulting register value will be relative to the base register."
      },
      "throws": []
    },
    {
      "name": "checkBaseRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBaseRegisterValue",
      "comment": "Returns this register value in terms of the base register",
      "javadoc": "Returns this register value in terms of the base register",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBaseValueMask",
      "comment": "Returns the value mask that indicates which bits relative to the base register have a\n valid value.",
      "javadoc": "Returns the value mask that indicates which bits relative to the base register have a\n valid value.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValueMask",
      "comment": "Returns a value mask which is sized based upon the register",
      "javadoc": "Returns a value mask which is sized based upon the register",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "assign",
      "comment": "Assign the value to a portion of this register value",
      "javadoc": "Assign the value to a portion of this register value\n@param subRegister identifies a piece of this register value to be assigned\n@param value new value\n@return new register value after assignment",
      "static": false,
      "params": [
        {
          "name": "subRegister",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "identifies a piece of this register value to be assigned"
        },
        {
          "name": "value",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": "new value"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": "new register value after assignment"
      },
      "throws": []
    },
    {
      "name": "assign",
      "comment": "Assign the value to a portion of this register value",
      "javadoc": "Assign the value to a portion of this register value\n@param subRegister identifies a piece of this register value to be assigned\n@param value new value\n@return new register value after assignment",
      "static": false,
      "params": [
        {
          "name": "subRegister",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "identifies a piece of this register value to be assigned"
        },
        {
          "name": "value",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "new value"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": "new register value after assignment"
      },
      "throws": []
    },
    {
      "name": "clearBitValues",
      "comment": "Clears the value bits corresponding to the \"ON\" bits in the given mask.",
      "javadoc": "Clears the value bits corresponding to the \"ON\" bits in the given mask.\n@param mask the byte array containing the mask bits to clear.\n@return a new MaskedBytes object containg the original value bits and mask bits cleared \n where the passed in mask bits were \"on\".",
      "static": false,
      "params": [
        {
          "name": "mask",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the byte array containing the mask bits to clear."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": "a new MaskedBytes object containg the original value bits and mask bits cleared \n where the passed in mask bits were \"on\"."
      },
      "throws": []
    },
    {
      "name": "toBytes",
      "comment": "Returns the mask/value bytes for this register value.",
      "javadoc": "Returns the mask/value bytes for this register value.\n@return the mask/value bytes for this register value.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the mask/value bytes for this register value."
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "@see java.lang.Object#equals(java.lang.Object)",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "@see java.lang.Object#toString()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasValue",
      "comment": "Tests if this RegisterValue contains valid value bits for the entire register.  In otherwords\n getSignedValue() or getUnsignedValue will not return null.",
      "javadoc": "Tests if this RegisterValue contains valid value bits for the entire register.  In otherwords\n getSignedValue() or getUnsignedValue will not return null.\n@return true if all mask bits for the associated register are \"ON\".",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if all mask bits for the associated register are \"ON\"."
      },
      "throws": []
    },
    {
      "name": "getUnsignedValue",
      "comment": "Returns the unsigned value for this register if all the appropriate mask bits are \"ON\". Otherwise,\n null is return.",
      "javadoc": "Returns the unsigned value for this register if all the appropriate mask bits are \"ON\". Otherwise,\n null is return.\n@return the value for this register if all the appropriate mask bits are \"ON\". Otherwise,\n returns null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": "the value for this register if all the appropriate mask bits are \"ON\". Otherwise,\n returns null."
      },
      "throws": []
    },
    {
      "name": "getUnsignedValueIgnoreMask",
      "comment": "Returns the unsigned value for this register regardless of the mask bits.  Bits that have \"OFF\" mask\n bits will have the value of 0.",
      "javadoc": "Returns the unsigned value for this register regardless of the mask bits.  Bits that have \"OFF\" mask\n bits will have the value of 0.\n@return the unsigned value for this register regardless of the mask bits.  Bits that have \"OFF\" mask\n bits will have the value of 0.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": "the unsigned value for this register regardless of the mask bits.  Bits that have \"OFF\" mask\n bits will have the value of 0."
      },
      "throws": []
    },
    {
      "name": "getSignedValue",
      "comment": "Returns the signed value for this register if all the appropriate mask bits are \"ON\". Otherwise,\n null is return.",
      "javadoc": "Returns the signed value for this register if all the appropriate mask bits are \"ON\". Otherwise,\n null is return.\n@return the signed value for this register if all the appropriate mask bits are \"ON\". Otherwise,\n returns null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": "the signed value for this register if all the appropriate mask bits are \"ON\". Otherwise,\n returns null."
      },
      "throws": []
    },
    {
      "name": "getSignedValueIgnoreMask",
      "comment": "Returns the signed value for this register regardless of the mask bits.  Bits that have \"OFF\" mask\n bits will have the value of 0.",
      "javadoc": "Returns the signed value for this register regardless of the mask bits.  Bits that have \"OFF\" mask\n bits will have the value of 0.\n@return the signed value for this register regardless of the mask bits.  Bits that have \"OFF\" mask\n bits will have the value of 0.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": "the signed value for this register regardless of the mask bits.  Bits that have \"OFF\" mask\n bits will have the value of 0."
      },
      "throws": []
    },
    {
      "name": "getBit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "bitIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isMaskOn",
      "comment": "Tests if the all the mask bits from startBit (least significant bit) to endBit (most significant bit)\n are on.",
      "javadoc": "Tests if the all the mask bits from startBit (least significant bit) to endBit (most significant bit)\n are on.\n@param startBit the least significant bit position\n@param endBit the most significant bit position\n@return true if all mask bits from startBit to endBit are on.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if all mask bits from startBit to endBit are on."
      },
      "throws": []
    },
    {
      "name": "isMaskAllOn",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasAnyValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegisterValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newRegister",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": ""
      },
      "throws": []
    }
  ]
}
