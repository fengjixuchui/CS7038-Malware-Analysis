{
  "name": "InjectPayloadSleigh",
  "comment": "InjectPayloadSleigh defines an InjectPayload of p-code which is defined via\n a String passed to the sleigh compiler",
  "javadoc": "\u003ccode\u003eInjectPayloadSleigh\u003c/code\u003e defines an InjectPayload of p-code which is defined via\n a String passed to the sleigh compiler",
  "static": false,
  "implements": [
    "ghidra.program.model.lang.InjectPayload"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "pcodeTemplate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.template.ConstructTpl",
      "type_short": "ConstructTpl",
      "constant_value": null
    },
    {
      "name": "paramShift",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "isfallthru",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "incidentalCopy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "inputlist",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.InjectPayload.InjectParameter[]",
      "type_short": "ghidra.program.model.lang.InjectPayload.InjectParameter[]",
      "constant_value": null
    },
    {
      "name": "output",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.InjectPayload.InjectParameter[]",
      "type_short": "ghidra.program.model.lang.InjectPayload.InjectParameter[]",
      "constant_value": null
    },
    {
      "name": "subType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "type",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "source",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "parseString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for partial clone of another payload whose p-code failed to parse",
      "javadoc": "Constructor for partial clone of another payload whose p-code failed to parse\n@param pcode is substitute p-code to replace the failed parse\n@param failedPayload is the failed payload",
      "static": false,
      "params": [
        {
          "name": "pcode",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.ConstructTpl",
          "type_short": "ConstructTpl",
          "comment": "is substitute p-code to replace the failed parse"
        },
        {
          "name": "failedPayload",
          "type_long": "ghidra.program.model.lang.InjectPayloadSleigh",
          "type_short": "InjectPayloadSleigh",
          "comment": "is the failed payload"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for a dummy payload, given just a name",
      "javadoc": "Constructor for a dummy payload, given just a name\n@param pcode is the dummy p-code sequence\n@param tp is the type of injection\n@param nm is the name of the injection",
      "static": false,
      "params": [
        {
          "name": "pcode",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.ConstructTpl",
          "type_short": "ConstructTpl",
          "comment": "is the dummy p-code sequence"
        },
        {
          "name": "tp",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the type of injection"
        },
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the name of the injection"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for use where restoreXml is overridden and provides name and type",
      "javadoc": "Constructor for use where restoreXml is overridden and provides name and type\n@param sourceName is string describing the source of this payload",
      "static": false,
      "params": [
        {
          "name": "sourceName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is string describing the source of this payload"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Provide basic form,  restoreXml fills in the rest",
      "javadoc": "Provide basic form,  restoreXml fills in the rest\n@param nm must provide formal name\n@param tp must provide type\n@param sourceName is a description of the source of this payload",
      "static": false,
      "params": [
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "must provide formal name"
        },
        {
          "name": "tp",
          "type_long": "int",
          "type_short": "int",
          "comment": "must provide type"
        },
        {
          "name": "sourceName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is a description of the source of this payload"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSource",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParamShift",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setInputParameters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "in",
          "type_long": "java.util.List\u003cghidra.program.model.lang.InjectPayload.InjectParameter\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setOutputParameters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.util.List\u003cghidra.program.model.lang.InjectPayload.InjectParameter\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInput",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.InjectPayload.InjectParameter[]",
        "type_short": "ghidra.program.model.lang.InjectPayload.InjectParameter[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOutput",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.InjectPayload.InjectParameter[]",
        "type_short": "ghidra.program.model.lang.InjectPayload.InjectParameter[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isErrorPlaceholder",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "inject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InjectContext",
          "type_short": "InjectContext",
          "comment": ""
        },
        {
          "name": "emit",
          "type_long": "ghidra.app.plugin.processors.sleigh.PcodeEmit",
          "type_short": "PcodeEmit",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPcode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "con",
          "type_long": "ghidra.program.model.lang.InjectContext",
          "type_short": "InjectContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp[]",
        "type_short": "ghidra.program.model.pcode.PcodeOp[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isFallThru",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isIncidentalCopy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "computeFallThru",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "orderParameters",
      "comment": "All input and output parameters must have a unique index.\n Order them so that inputs come first, then outputs",
      "javadoc": "All input and output parameters must have a unique index.\n Order them so that inputs come first, then outputs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "language",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighLanguage",
          "type_short": "SleighLanguage",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "releaseParseString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTemplate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ctl",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.ConstructTpl",
          "type_short": "ConstructTpl",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkParameterRestrictions",
      "comment": "Verify that the storage locations passed -con- match the restrictions for this payload",
      "javadoc": "Verify that the storage locations passed -con- match the restrictions for this payload\n@param con is InjectContext containing parameter storage locations",
      "static": false,
      "params": [
        {
          "name": "con",
          "type_long": "ghidra.program.model.lang.InjectContext",
          "type_short": "InjectContext",
          "comment": "is InjectContext containing parameter storage locations"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setupParameters",
      "comment": "Set-up operands in the parser state so that they pick up storage locations from InjectContext",
      "javadoc": "Set-up operands in the parser state so that they pick up storage locations from InjectContext\n@param con is the InjectContext containing storage locations\n@param walker is the sleigh parser state object\n@throws UnknownInstructionException if there are too many parameters for the parser",
      "static": false,
      "params": [
        {
          "name": "con",
          "type_long": "ghidra.program.model.lang.InjectContext",
          "type_short": "InjectContext",
          "comment": "is the InjectContext containing storage locations"
        },
        {
          "name": "walker",
          "type_long": "ghidra.app.plugin.processors.sleigh.ParserWalker",
          "type_short": "ParserWalker",
          "comment": "is the sleigh parser state object"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.UnknownInstructionException",
          "type_short": "UnknownInstructionException",
          "comment": "if there are too many parameters for the parser"
        }
      ]
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDummyPcode",
      "comment": "Build a dummy p-code sequence to use in place of a normal parsed payload.\n A ConstructTpl is built out of Varnode and PcodeOp templates that can\n be assigned directly to the pcodeTemplate field of the payload.\n The sequence itself is non-empty, consisting of a single operation:\n    tmp \u003d tmp + 0;",
      "javadoc": "Build a dummy p-code sequence to use in place of a normal parsed payload.\n A ConstructTpl is built out of Varnode and PcodeOp templates that can\n be assigned directly to the pcodeTemplate field of the payload.\n The sequence itself is non-empty, consisting of a single operation:\n    tmp \u003d tmp + 0;\n@param addrFactory is used to construct temp and constant Varnodes\n@return the final dummy template",
      "static": true,
      "params": [
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": "is used to construct temp and constant Varnodes"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.processors.sleigh.template.ConstructTpl",
        "type_short": "ConstructTpl",
        "comment": "the final dummy template"
      },
      "throws": []
    }
  ]
}
