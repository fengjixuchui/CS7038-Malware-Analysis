{
  "name": "InstructionSet",
  "comment": "A set of instructions organized as a graph of basic blocks.",
  "javadoc": "A set of instructions organized as a graph of basic blocks.",
  "static": false,
  "implements": [
    "java.lang.Iterable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "blockMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cghidra.program.model.address.Address,ghidra.program.model.lang.InstructionBlock\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "blockRangeMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.register.AddressRangeObjectMap\u003cghidra.program.model.lang.InstructionBlock\u003e",
      "type_short": "AddressRangeObjectMap",
      "constant_value": null
    },
    {
      "name": "startAddresses",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cghidra.program.model.address.Address\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "emptyBlocks",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.lang.InstructionBlock\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "addressSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "instructionCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addBlock",
      "comment": "Add an Instruction block to this Instruction Set. \n If the block is empty it will only be added to the empty-list and will not\n be added to the maps or block iterator",
      "javadoc": "Add an Instruction block to this Instruction Set. \n If the block is empty it will only be added to the empty-list and will not\n be added to the maps or block iterator\n@param block the block to add.",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.lang.InstructionBlock",
          "type_short": "InstructionBlock",
          "comment": "the block to add."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInstructionBlockContaining",
      "comment": "Returns the non-empty InstructionBlock containing the specified address",
      "javadoc": "Returns the non-empty InstructionBlock containing the specified address\n@param address\n@return the InstructionBlock containing the specified address or null if not found",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.InstructionBlock",
        "type_short": "InstructionBlock",
        "comment": "the InstructionBlock containing the specified address or null if not found"
      },
      "throws": []
    },
    {
      "name": "findFirstIntersectingBlock",
      "comment": "Find the first block within this InstructionSet which intersects the specified range.\n This method should be used sparingly since it uses a brute-force search.",
      "javadoc": "Find the first block within this InstructionSet which intersects the specified range.\n This method should be used sparingly since it uses a brute-force search.\n@param min the minimum intersection address\n@param max the maximum intersection address\n@return block within this InstructionSet which intersects the specified range or null\n if not found",
      "static": false,
      "params": [
        {
          "name": "min",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the minimum intersection address"
        },
        {
          "name": "max",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the maximum intersection address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.InstructionBlock",
        "type_short": "InstructionBlock",
        "comment": "block within this InstructionSet which intersects the specified range or null\n if not found"
      },
      "throws": []
    },
    {
      "name": "getInstructionAt",
      "comment": "Returns the instruction at the specified address within this instruction set",
      "javadoc": "Returns the instruction at the specified address within this instruction set\n@param address\n@return instruction at the specified address within this instruction set or null if not found",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": "instruction at the specified address within this instruction set or null if not found"
      },
      "throws": []
    },
    {
      "name": "getMinAddress",
      "comment": "Returns the minimum address for this Instruction set;",
      "javadoc": "Returns the minimum address for this Instruction set;\n@return the minimum address for this Instruction set;",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the minimum address for this Instruction set;"
      },
      "throws": []
    },
    {
      "name": "getAddressSet",
      "comment": "Returns the address set that makes up all the instructions contained in this set.",
      "javadoc": "Returns the address set that makes up all the instructions contained in this set.\n@return the address set that makes up all the instructions contained in this set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "the address set that makes up all the instructions contained in this set."
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInstructionCount",
      "comment": "Returns the number of instructions in this instruction set.",
      "javadoc": "Returns the number of instructions in this instruction set.\n@return the number of instructions in this instruction set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of instructions in this instruction set."
      },
      "throws": []
    },
    {
      "name": "containsBlockAt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "blockAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "Returns true if this instruction set intersects the specified range",
      "javadoc": "Returns true if this instruction set intersects the specified range\n@param minAddress\n@param maxAddress\n@return true if this instruction set intersects the specified range",
      "static": false,
      "params": [
        {
          "name": "minAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "maxAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this instruction set intersects the specified range"
      },
      "throws": []
    },
    {
      "name": "iterator",
      "comment": "Returns an iterator over the blocks in this Instruction set, giving preference to fall\n through flows.  This iterator will not follow any flows from a block that has a conflict.\n If the last block returned from the iterator is marked as a conflict before the next() or\n hasNext() methods are called, then this iterator will respect the conflict.  In other words,\n this iterator follows block flows on the fly and doesn\u0027t pre-compute the blocks to return.  \n Also, if any blocks in this set don\u0027t have a flow to path from the start block, it will\n not be included in this iterator.",
      "javadoc": "Returns an iterator over the blocks in this Instruction set, giving preference to fall\n through flows.  This iterator will not follow any flows from a block that has a conflict.\n If the last block returned from the iterator is marked as a conflict before the next() or\n hasNext() methods are called, then this iterator will respect the conflict.  In other words,\n this iterator follows block flows on the fly and doesn\u0027t pre-compute the blocks to return.  \n Also, if any blocks in this set don\u0027t have a flow to path from the start block, it will\n not be included in this iterator.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.lang.InstructionBlock\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "emptyBlockIterator",
      "comment": "Returns an iterator over all empty blocks which likely contain a conflict error.",
      "javadoc": "Returns an iterator over all empty blocks which likely contain a conflict error.\n@return empty block iterator",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.lang.InstructionBlock\u003e",
        "type_short": "Iterator",
        "comment": "empty block iterator"
      },
      "throws": []
    },
    {
      "name": "getConflicts",
      "comment": "Returns a list of conflicts for this set.  If a block is not reachable from a non-conflicted\n block, it\u0027s conflicts(if any) will not be included.",
      "javadoc": "Returns a list of conflicts for this set.  If a block is not reachable from a non-conflicted\n block, it\u0027s conflicts(if any) will not be included.\n@return the list of conflicts for this set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.InstructionError\u003e",
        "type_short": "List",
        "comment": "the list of conflicts for this set."
      },
      "throws": []
    }
  ]
}
