{
  "name": "DisassemblerContext",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.program.model.lang.ProcessorContext"
  ],
  "fields": [],
  "methods": [
    {
      "name": "setFutureRegisterValue",
      "comment": "Combines value with any previously saved future\n register value at address or any value stored in the program if there is no\n previously saved future value.  Use this method when multiple flows to the same address\n don\u0027t matter or the flowing from address is unknown.\n \n When value has conflicting bits with the previously\n saved value, value will take precedence.\n  \n If the register value is the value for the \n processor context register and a previously saved\n value does not exist, the user saved values in the \n stored context of the program will be used as existing\n value.",
      "javadoc": "Combines \u003ccode\u003evalue\u003c/code\u003e with any previously saved future\n register value at \u003ccode\u003eaddress\u003c/code\u003e or any value stored in the program if there is no\n previously saved future value.  Use this method when multiple flows to the same address\n don\u0027t matter or the flowing from address is unknown.\n \u003cbr\u003e\n When \u003ccode\u003evalue\u003c/code\u003e has conflicting bits with the previously\n saved value, \u003ccode\u003evalue\u003c/code\u003e will take precedence.\n \u003cbr\u003e \n If the register value is the value for the \n processor context register and a previously saved\n value does not exist, the user saved values in the \n stored context of the program will be used as existing\n value.\n@param address the address to store the register value\n@param value the register value to store at the address",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to store the register value"
        },
        {
          "name": "value",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": "the register value to store at the address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFutureRegisterValue",
      "comment": "Combines value with any previously saved future\n register value at fromAddr/toAddr or any value stored in the program if there is no\n previously saved future value.\n \n When value has conflicting bits with the previously\n saved value, value will take precedence.\n  \n If the register value is the value for the \n processor context register and a previously saved\n value does not exist, the user saved values in the \n stored context of the program will be used as existing\n value.",
      "javadoc": "Combines \u003ccode\u003evalue\u003c/code\u003e with any previously saved future\n register value at \u003ccode\u003efromAddr/toAddr\u003c/code\u003e or any value stored in the program if there is no\n previously saved future value.\n \u003cbr\u003e\n When \u003ccode\u003evalue\u003c/code\u003e has conflicting bits with the previously\n saved value, \u003ccode\u003evalue\u003c/code\u003e will take precedence.\n \u003cbr\u003e \n If the register value is the value for the \n processor context register and a previously saved\n value does not exist, the user saved values in the \n stored context of the program will be used as existing\n value.\n@param fromAddr the address this value if flowing from\n@param toAddr the address to store the register value\n@param value the register value to store at the address",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address this value if flowing from"
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to store the register value"
        },
        {
          "name": "value",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": "the register value to store at the address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
