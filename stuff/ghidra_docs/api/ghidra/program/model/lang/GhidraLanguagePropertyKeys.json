{
  "name": "GhidraLanguagePropertyKeys",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "CUSTOM_DISASSEMBLER_CLASS",
      "comment": "CUSTOM_DISASSEMBLER_CLASS is a full class name for a language-specific\n disassembler implementation.  The specified class must extend the generic \n disassembler Disassembler implementation and must implement the same\n set of constructors.",
      "javadoc": "CUSTOM_DISASSEMBLER_CLASS is a full class name for a language-specific\n disassembler implementation.  The specified class must extend the generic \n disassembler {@link Disassembler} implementation and must implement the same\n set of constructors.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"customDisassemblerClass\""
    },
    {
      "name": "ALLOW_OFFCUT_REFERENCES_TO_FUNCTION_STARTS",
      "comment": "ALLOW_OFFCUT_REFERENCES_TO_FUNCTION_STARTS is a boolean property used to\n indicate if function bodies can actually start offcut. This is useful,\n for instance, with the ARM processor in THUMB mode since the least\n significant bit of the address is 0x1 for a THUMB mode function, even\n though outside references to this function will be at one byte less than\n the actual function start. Default is false.",
      "javadoc": "ALLOW_OFFCUT_REFERENCES_TO_FUNCTION_STARTS is a boolean property used to\n indicate if function bodies can actually start offcut. This is useful,\n for instance, with the ARM processor in THUMB mode since the least\n significant bit of the address is 0x1 for a THUMB mode function, even\n though outside references to this function will be at one byte less than\n the actual function start. Default is false.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"allowOffcutReferencesToFunctionStarts\""
    },
    {
      "name": "USE_OPERAND_REFERENCE_ANALYZER_SWITCH_TABLES",
      "comment": "USE_OPERAND_REFERENCE_ANALYZER_SWITCH_TABLES is a boolean property that\n indicates if a language should use the switch table analysis in the\n OperandReferenceAnalyzer. Default is false.",
      "javadoc": "USE_OPERAND_REFERENCE_ANALYZER_SWITCH_TABLES is a boolean property that\n indicates if a language should use the switch table analysis in the\n OperandReferenceAnalyzer. Default is false.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"useOperandReferenceAnalyzerSwitchTables\""
    },
    {
      "name": "IS_TMS320_FAMILY",
      "comment": "IS_TMS320_FAMILY is a boolean property that indicates this language is\n part of the general TMS320 family. Default is false. Used for general\n TMS320 analysis.",
      "javadoc": "IS_TMS320_FAMILY is a boolean property that indicates this language is\n part of the general TMS320 family. Default is false. Used for general\n TMS320 analysis.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"isTMS320Family\""
    },
    {
      "name": "PARALLEL_INSTRUCTION_HELPER_CLASS",
      "comment": "PARALLEL_INSTRUCTION_HELPER_CLASS is a full class name for an implementation\n of the ParallelInstructionLanguageHelper.  Those languages which support parallel\n instruction execution may implement this helper class to facilitate display of\n a || indicator within a listing view.",
      "javadoc": "PARALLEL_INSTRUCTION_HELPER_CLASS is a full class name for an implementation\n of the ParallelInstructionLanguageHelper.  Those languages which support parallel\n instruction execution may implement this helper class to facilitate display of\n a || indicator within a listing view.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"parallelInstructionHelperClass\""
    },
    {
      "name": "ADDRESSES_DO_NOT_APPEAR_DIRECTLY_IN_CODE",
      "comment": "ADDRESSES_DO_NOT_APPEAR_DIRECTLY_IN_CODE is a boolean property that\n indicates if addresses don\u0027t appear directly in code. Supposedly applies\n to all RISC processors, according to ScalarOperandAnalyzer. Default is\n false.",
      "javadoc": "ADDRESSES_DO_NOT_APPEAR_DIRECTLY_IN_CODE is a boolean property that\n indicates if addresses don\u0027t appear directly in code. Supposedly applies\n to all RISC processors, according to ScalarOperandAnalyzer. Default is\n false.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"addressesDoNotAppearDirectlyInCode\""
    },
    {
      "name": "USE_NEW_FUNCTION_STACK_ANALYSIS",
      "comment": "USE_NEW_FUNCTION_STACK_ANALYSIS is a boolean property that indicates if\n the StackVariableAnalyzer should use a NewFunctionStackAnalysisCmd\n instead of the older FunctionStackAnalysisCmd. Default is false.",
      "javadoc": "USE_NEW_FUNCTION_STACK_ANALYSIS is a boolean property that indicates if\n the StackVariableAnalyzer should use a NewFunctionStackAnalysisCmd\n instead of the older FunctionStackAnalysisCmd. Default is false.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"useNewFunctionStackAnalysis\""
    },
    {
      "name": "EMULATE_INSTRUCTION_STATE_MODIFIER_CLASS",
      "comment": "EMULATE_INSTRUCTION_STATE_MODIFIER_CLASS is a string property that indicates the\n classname of a EmulateInstructionStateModifier implementation which should be\n used during emulation to assist with the adjusting the emulator state before and/or after\n each instruction is executed.  This class may also provide language defined behaviors\n for custom pcodeop\u0027s.  Default is null.",
      "javadoc": "EMULATE_INSTRUCTION_STATE_MODIFIER_CLASS is a string property that indicates the\n classname of a EmulateInstructionStateModifier implementation which should be\n used during emulation to assist with the adjusting the emulator state before and/or after\n each instruction is executed.  This class may also provide language defined behaviors\n for custom pcodeop\u0027s.  Default is null.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"emulateInstructionStateModifierClass\""
    },
    {
      "name": "PCODE_INJECT_LIBRARY_CLASS",
      "comment": "PCODE_INJECT_LIBRARY_CLASS indicates the classname of a PcodeInjectLibrary implementation\n that is used to generate p-code injection payloads which can replace either CALLs or CALLOTHERs\n during any form of p-code analysis.  The injections are primarily provided by \n and  tags in the compiler spec, but this provides a hook point for\n providing other means of injection.",
      "javadoc": "PCODE_INJECT_LIBRARY_CLASS indicates the classname of a PcodeInjectLibrary implementation\n that is used to generate p-code injection payloads which can replace either CALLs or CALLOTHERs\n during any form of p-code analysis.  The injections are primarily provided by {@code \u003ccallfixup\u003e}\n and {@code \u003ccallotherfixup\u003e} tags in the compiler spec, but this provides a hook point for\n providing other means of injection.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"pcodeInjectLibraryClass\""
    },
    {
      "name": "ENABLE_SHARED_RETURN_ANALYSIS",
      "comment": "Shared return analysis, where at the end of one function, the code will jump to another, and use\n the jumped to subroutines return.  Shared Return analysis is enabled by default for all processors.\n \n If calls are used as long-jumps this can cause problems, so it is disabled for older arm processors.",
      "javadoc": "Shared return analysis, where at the end of one function, the code will jump to another, and use\n the jumped to subroutines return.  Shared Return analysis is enabled by default for all processors.\n \n If calls are used as long-jumps this can cause problems, so it is disabled for older arm processors.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"enableSharedReturnAnalysis\""
    },
    {
      "name": "ENABLE_NO_RETURN_ANALYSIS",
      "comment": "Non returning function analysis, where a function such as exit() is known to the compiler\n not to return.  The compiler will generate data or code for another function immediately\n following the call.  Non-returning functions can be detected in many cases.",
      "javadoc": "Non returning function analysis, where a function such as exit() is known to the compiler\n not to return.  The compiler will generate data or code for another function immediately\n following the call.  Non-returning functions can be detected in many cases.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"enableNoReturnAnalysis\""
    },
    {
      "name": "RESET_CONTEXT_ON_UPGRADE",
      "comment": "Property to indicate that all stored instruction context should be cleared\n during a language upgrade operation which requires redisassembly.\n NOTE: This is an experimental concept which may be removed in the future",
      "javadoc": "Property to indicate that all stored instruction context should be cleared\n during a language upgrade operation which requires redisassembly.\n NOTE: This is an experimental concept which may be removed in the future",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"resetContextOnUpgrade\""
    },
    {
      "name": "MINIMUM_DATA_IMAGE_BASE",
      "comment": "Property to indicate the minimum recommended base address within the default\n data space for placing relocatable data sections.  This is intended to \n avoid loading into low memory regions where registers may be defined.\n The default value for ELF will be just beyond the last memory register defined\n within the default data space.  This option is only utilized by the\n ELF Loader for Harvard Architecures when loading a relocatable ELF binary\n (i.e., object module) and corresponds to the ELF Loader option: Data Image Base.",
      "javadoc": "Property to indicate the minimum recommended base address within the default\n data space for placing relocatable data sections.  This is intended to \n avoid loading into low memory regions where registers may be defined.\n The default value for ELF will be just beyond the last memory register defined\n within the default data space.  This option is only utilized by the\n ELF Loader for Harvard Architecures when loading a relocatable ELF binary\n (i.e., object module) and corresponds to the ELF Loader option: \u003ccode\u003eData Image Base\u003c/code\u003e.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"minimumDataImageBase\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
