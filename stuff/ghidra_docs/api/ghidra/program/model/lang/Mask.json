{
  "name": "Mask",
  "comment": "The Mask class is used to perform some basic bit tests on an\n array of bits.",
  "javadoc": "The Mask class is used to perform some basic bit tests on an\n array of bits.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "equals",
      "comment": "Test if the given object is equal to this object. Two masks are\n   equal if they have exactly the same values in thier byte arrays.",
      "javadoc": "Test if the given object is equal to this object. Two masks are\n   equal if they have exactly the same values in thier byte arrays.\n@param obj the object to be tested for equals\n@return true if the object is equal to this mask, false otherwise.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the object to be tested for equals"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the object is equal to this mask, false otherwise."
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "Check if the mask represented by the byte array is equal to this one.",
      "javadoc": "Check if the mask represented by the byte array is equal to this one.\n@param mask mask represented as byte array\n@return true if the masks are the same, false otherwise",
      "static": false,
      "params": [
        {
          "name": "mask",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "mask represented as byte array"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the masks are the same, false otherwise"
      },
      "throws": []
    },
    {
      "name": "applyMask",
      "comment": "Apply the mask to a byte array.",
      "javadoc": "Apply the mask to a byte array.\n@param cde the array that contains the values to be masked\n@param results the array to contain the results.\n@return the resulting byte array.\n@exception IncompatibleMaskException thrown if byte\n arrays are not of the correct size",
      "static": false,
      "params": [
        {
          "name": "cde",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the array that contains the values to be masked"
        },
        {
          "name": "results",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the array to contain the results."
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the resulting byte array."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.IncompatibleMaskException",
          "type_short": "IncompatibleMaskException",
          "comment": ""
        }
      ]
    },
    {
      "name": "applyMask",
      "comment": "Apply the mask to a byte array.",
      "javadoc": "Apply the mask to a byte array.\n@param cde the array that contains the values to be masked\n@param cdeOffset the offset into the array that contains the values to be masked\n@param results the array to contain the results.\n@param resultsOffset the offset into the array that contains the results\n@exception IncompatibleMaskException thrown if byte\n arrays are not of the correct size",
      "static": false,
      "params": [
        {
          "name": "cde",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the array that contains the values to be masked"
        },
        {
          "name": "cdeOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset into the array that contains the values to be masked"
        },
        {
          "name": "results",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the array to contain the results."
        },
        {
          "name": "resultsOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset into the array that contains the results"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.IncompatibleMaskException",
          "type_short": "IncompatibleMaskException",
          "comment": ""
        }
      ]
    },
    {
      "name": "applyMask",
      "comment": "Apply the mask to a memory buffer.",
      "javadoc": "Apply the mask to a memory buffer.\n@param buffer the memory buffer that contains the values to be masked\n@return the resulting masked byte array.\n@exception MemoryAccessException thrown if mask exceeds the available data \n within buffer",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "the memory buffer that contains the values to be masked"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the resulting masked byte array."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "equalMaskedValue",
      "comment": "Tests if the results of apply the mask to the given array matches a\n   target array.",
      "javadoc": "Tests if the results of apply the mask to the given array matches a\n   target array.\n@param cde the source bytes.\n@param target the result bytes to be tested.\n@return true if the target array is equal to the source array with\n   the mask applied.\n@exception IncompatibleMaskException thrown if byte\n arrays are not of the correct size",
      "static": false,
      "params": [
        {
          "name": "cde",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the source bytes."
        },
        {
          "name": "target",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the result bytes to be tested."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the target array is equal to the source array with\n   the mask applied."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.IncompatibleMaskException",
          "type_short": "IncompatibleMaskException",
          "comment": ""
        }
      ]
    },
    {
      "name": "complementMask",
      "comment": "applies the complement of the mask to the given byte array.",
      "javadoc": "applies the complement of the mask to the given byte array.\n@param msk the bytes to apply the inverted mask.\n@param results the array for storing the results.\n@return the results array.\n@exception IncompatibleMaskException thrown if byte\n arrays are not of the correct size",
      "static": false,
      "params": [
        {
          "name": "msk",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the bytes to apply the inverted mask."
        },
        {
          "name": "results",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the array for storing the results."
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the results array."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.IncompatibleMaskException",
          "type_short": "IncompatibleMaskException",
          "comment": ""
        }
      ]
    },
    {
      "name": "subMask",
      "comment": "Tests if the given mask matches the this mask for the first n\n   bytes, where n is the size of the given mask.",
      "javadoc": "Tests if the given mask matches the this mask for the first n\n   bytes, where n is the size of the given mask.\n@param msk the bytes to be tested to see if they match the first\n   bytes of this mask.\n@return true if the bytes match up to the length of the passed in\n   byte array.\n@exception IncompatibleMaskException thrown if byte\n arrays are not of the correct size",
      "static": false,
      "params": [
        {
          "name": "msk",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the bytes to be tested to see if they match the first\n   bytes of this mask."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the bytes match up to the length of the passed in\n   byte array."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.IncompatibleMaskException",
          "type_short": "IncompatibleMaskException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBytes",
      "comment": "Returns the bytes that make up this mask.",
      "javadoc": "Returns the bytes that make up this mask.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    }
  ]
}
