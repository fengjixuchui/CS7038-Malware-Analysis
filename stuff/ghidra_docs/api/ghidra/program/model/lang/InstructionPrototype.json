{
  "name": "InstructionPrototype",
  "comment": "InstructionPrototype is designed to describe one machine level instruction.\n A language parser can return the same InstructionProtoype object for the \n same type node. Prototypes for instructions will normally be fixed for a node.",
  "javadoc": "InstructionPrototype is designed to describe one machine level instruction.\n A language parser can return the same InstructionProtoype object for the \n same type node. Prototypes for instructions will normally be fixed for a node.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "INVALID_DEPTH_CHANGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16777216"
    }
  ],
  "methods": [
    {
      "name": "getParserContext",
      "comment": "Get a new instance of a ParserContext.",
      "javadoc": "Get a new instance of a ParserContext.\n@param buf\n@param processorContext\n@return instruction ParserContext\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "processorContext",
          "type_long": "ghidra.program.model.lang.ProcessorContextView",
          "type_short": "ProcessorContextView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.ParserContext",
        "type_short": "ParserContext",
        "comment": "instruction ParserContext"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getPseudoParserContext",
      "comment": "Get a ParserContext by parsing bytes outside of the normal disassembly process",
      "javadoc": "Get a ParserContext by parsing bytes outside of the normal disassembly process\n@param addr where the ParserContext is needed\n@param buffer of actual bytes\n@param processorContext\n@return \n@throws InsufficientBytesException\n@throws UnknownInstructionException\n@throws UnknownContextException\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "where the ParserContext is needed"
        },
        {
          "name": "buffer",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "of actual bytes"
        },
        {
          "name": "processorContext",
          "type_long": "ghidra.program.model.lang.ProcessorContextView",
          "type_short": "ProcessorContextView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.ParserContext",
        "type_short": "ParserContext",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.InsufficientBytesException",
          "type_short": "InsufficientBytesException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.lang.UnknownInstructionException",
          "type_short": "UnknownInstructionException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.lang.UnknownContextException",
          "type_short": "UnknownContextException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "hasDelaySlots",
      "comment": "",
      "javadoc": "@return true if instruction prototype expects one or more delay slotted\n instructions to exist.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if instruction prototype expects one or more delay slotted\n instructions to exist."
      },
      "throws": []
    },
    {
      "name": "hasCrossBuildDependency",
      "comment": "",
      "javadoc": "@return true if instruction semantics have a CrossBuild instruction\n dependency which may require a robust InstructionContext with access\n to preceding instructions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if instruction semantics have a CrossBuild instruction\n dependency which may require a robust InstructionContext with access\n to preceding instructions"
      },
      "throws": []
    },
    {
      "name": "getMnemonic",
      "comment": "Get the mnemonic for this CodeProtype.  Examples: \"MOV\" and\n \"CALL\" for instructions and \"DB\" and \"DA\" for data.",
      "javadoc": "Get the mnemonic for this CodeProtype.  Examples: \"MOV\" and\n \"CALL\" for instructions and \"DB\" and \"DA\" for data.\n@param context the instruction context\n@return the mnemonic for this CodePrototype.",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the mnemonic for this CodePrototype."
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Get the length of this CodeProtoype.",
      "javadoc": "Get the length of this CodeProtoype.\n@return the length of this CodeProtoype.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of this CodeProtoype."
      },
      "throws": []
    },
    {
      "name": "getInstructionMask",
      "comment": "Get a Mask that describe which bits of this instruction determine\n the opcode.",
      "javadoc": "Get a Mask that describe which bits of this instruction determine\n the opcode.\n@return a Mask for the opcode bits or null if unknown.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Mask",
        "type_short": "Mask",
        "comment": "a Mask for the opcode bits or null if unknown."
      },
      "throws": []
    },
    {
      "name": "getOperandValueMask",
      "comment": "Get a Mask that describe which bits of this instruction determine\n the operand value.",
      "javadoc": "Get a Mask that describe which bits of this instruction determine\n the operand value.\n@return a Mask for the operand bits or null if unknown.",
      "static": false,
      "params": [
        {
          "name": "operandIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Mask",
        "type_short": "Mask",
        "comment": "a Mask for the operand bits or null if unknown."
      },
      "throws": []
    },
    {
      "name": "getFlowType",
      "comment": "Get the flow type of this instruction. Used\n for analysis purposes. i.e., how this\n instruction flows to the next instruction.",
      "javadoc": "Get the flow type of this instruction. Used\n for analysis purposes. i.e., how this\n instruction flows to the next instruction.\n@param context the instruction context\n@return flow type.",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.FlowType",
        "type_short": "FlowType",
        "comment": "flow type."
      },
      "throws": []
    },
    {
      "name": "getDelaySlotDepth",
      "comment": "Get the number of delay slot instructions for this\n argument. This should be 0 for instructions which don\u0027t have a\n delay slot.  This is used to support the delay slots found on\n some RISC processors such as SPARC and the PA-RISC. This\n returns an integer instead of a boolean in case some other\n processor executes more than one instruction from a delay slot.",
      "javadoc": "Get the number of delay slot instructions for this\n argument. This should be 0 for instructions which don\u0027t have a\n delay slot.  This is used to support the delay slots found on\n some RISC processors such as SPARC and the PA-RISC. This\n returns an integer instead of a boolean in case some other\n processor executes more than one instruction from a delay slot.\n@param context the instruction context\n@return the number of delay slot instructions for this instruction.",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of delay slot instructions for this instruction."
      },
      "throws": []
    },
    {
      "name": "getDelaySlotByteCount",
      "comment": "",
      "javadoc": "@return the number of delay-slot instruction bytes which correspond\n to this prototype.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of delay-slot instruction bytes which correspond\n to this prototype."
      },
      "throws": []
    },
    {
      "name": "isInDelaySlot",
      "comment": "Return true if this prototype was disassembled in a delay slot.",
      "javadoc": "Return true if this prototype was disassembled in a delay slot.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumOperands",
      "comment": "Return the number of operands in this instruction.",
      "javadoc": "Return the number of operands in this instruction.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOpType",
      "comment": "Get the type of a specific operand.",
      "javadoc": "Get the type of a specific operand.\n@param opIndex the index of the operand. (zero based)\n@param context the instruction context.\n@return the type of the operand.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the operand. (zero based)"
        },
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the type of the operand."
      },
      "throws": []
    },
    {
      "name": "getFallThrough",
      "comment": "Get the Address for default flow after instruction.",
      "javadoc": "Get the Address for default flow after instruction.\n@param context the instruction context\n@return Address of fall through flow or null if flow\n does not fall through this instruction.",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address of fall through flow or null if flow\n does not fall through this instruction."
      },
      "throws": []
    },
    {
      "name": "getFallThroughOffset",
      "comment": "Get the byte offset to the default flow after instruction.\n If this instruction does not have a fall-through due to flow\n behavior, this method will still return an offset which accounts for \n the instruction length including delay slotted instructions if \n applicable.",
      "javadoc": "Get the byte offset to the default flow after instruction.\n If this instruction does not have a fall-through due to flow\n behavior, this method will still return an offset which accounts for \n the instruction length including delay slotted instructions if \n applicable.\n@param context the instruction context\n@return int how much to add to the current address to get\n the fall through address.",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int how much to add to the current address to get\n the fall through address."
      },
      "throws": []
    },
    {
      "name": "getFlows",
      "comment": "Get an array of Address objects for all flows other than\n a fall-through, null if no flows.",
      "javadoc": "Get an array of Address objects for all flows other than\n a fall-through, null if no flows.\n@param context the instruction context.\n@return an array of Address objects for all flows other than\n  a fall-through, null if no flows.",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address[]",
        "type_short": "ghidra.program.model.address.Address[]",
        "comment": "an array of Address objects for all flows other than\n  a fall-through, null if no flows."
      },
      "throws": []
    },
    {
      "name": "getSeparator",
      "comment": "Get the separator strings between an operand.\n \n The separator string for 0 are the characters before the first operand.\n The separator string for numOperands+1 are the characters after the last operand.",
      "javadoc": "Get the separator strings between an operand.\n \n The separator string for 0 are the characters before the first operand.\n The separator string for numOperands+1 are the characters after the last operand.\n@param opIndex valid values are 0 thru numOperands+1\n@param context the instruction context\n@return separator string, or null if there is no string",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "valid values are 0 thru numOperands+1"
        },
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "separator string, or null if there is no string"
      },
      "throws": []
    },
    {
      "name": "getOpRepresentationList",
      "comment": "Get a List of Objects that can be used to render an operands representation.",
      "javadoc": "Get a List of Objects that can be used to render an operands representation.\n@param opIndex operand to get the Representation List\n@param context the instruction context\n@return ArrayList of Register, Address, Scalar, VariableOffset and Character objects\n         of null if the operation isn\u0027t supported",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand to get the Representation List"
        },
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        }
      ],
      "return": {
        "type_long": "java.util.ArrayList\u003cjava.lang.Object\u003e",
        "type_short": "ArrayList",
        "comment": "ArrayList of Register, Address, Scalar, VariableOffset and Character objects\n         of null if the operation isn\u0027t supported"
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "If the indicated operand is an address, this gets the address value for \n that operand",
      "javadoc": "If the indicated operand is an address, this gets the address value for \n that operand\n@param opIndex index of the operand.\n@param context the instruction context.\n@return the address indicated by the operand",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of the operand."
        },
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address indicated by the operand"
      },
      "throws": []
    },
    {
      "name": "getScalar",
      "comment": "If the indicated operand is a scalar, this gets the scalar value for \n that operand",
      "javadoc": "If the indicated operand is a scalar, this gets the scalar value for \n that operand\n@param opIndex index of the operand.\n@param context the instruction context\n@return the scalar for the indicated operand",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of the operand."
        },
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.scalar.Scalar",
        "type_short": "Scalar",
        "comment": "the scalar for the indicated operand"
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "If the indicated operand is a register, this gets the register value \n for that operand",
      "javadoc": "If the indicated operand is a register, this gets the register value \n for that operand\n@param opIndex index of the operand.\n@param context the instruction context\n@return a register description for the indicated operand",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of the operand."
        },
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "a register description for the indicated operand"
      },
      "throws": []
    },
    {
      "name": "getOpObjects",
      "comment": "Get objects used by this operand (Address, Scalar, Register ...)",
      "javadoc": "Get objects used by this operand (Address, Scalar, Register ...)\n@param opIndex the index of the operand. (zero based)\n@param context the instruction context\n@return an array of objects found at this operand.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the operand. (zero based)"
        },
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        }
      ],
      "return": {
        "type_long": "java.lang.Object[]",
        "type_short": "java.lang.Object[]",
        "comment": "an array of objects found at this operand."
      },
      "throws": []
    },
    {
      "name": "getOperandRefType",
      "comment": "Get the suggested operand reference type.",
      "javadoc": "Get the suggested operand reference type.\n@param opIndex the index of the operand. (zero based)\n@param context the instruction context\n@param override if not null, steers local overrides of pcode generation\n@param uniqueFactory must be specified if flowOverride is not null\n@return reference type.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the operand. (zero based)"
        },
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        },
        {
          "name": "override",
          "type_long": "ghidra.program.model.pcode.PcodeOverride",
          "type_short": "PcodeOverride",
          "comment": "if not null, steers local overrides of pcode generation"
        },
        {
          "name": "uniqueFactory",
          "type_long": "ghidra.program.model.address.UniqueAddressFactory",
          "type_short": "UniqueAddressFactory",
          "comment": "must be specified if flowOverride is not null"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.RefType",
        "type_short": "RefType",
        "comment": "reference type."
      },
      "throws": []
    },
    {
      "name": "hasDelimeter",
      "comment": "Return true if the operand at opIndex should have a delimiter following it.",
      "javadoc": "Return true if the operand at opIndex should have a delimiter following it.\n@param opIndex the index of the operand to test for having a delimiter.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the operand to test for having a delimiter."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInputObjects",
      "comment": "Get the Result objects produced/affected by this instruction\n These would probably only be Register or Address",
      "javadoc": "Get the Result objects produced/affected by this instruction\n These would probably only be Register or Address\n@param context the instruction context\n@return an array of objects that are used by this instruction",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        }
      ],
      "return": {
        "type_long": "java.lang.Object[]",
        "type_short": "java.lang.Object[]",
        "comment": "an array of objects that are used by this instruction"
      },
      "throws": []
    },
    {
      "name": "getResultObjects",
      "comment": "Get the Result objects produced/affected by this instruction\n These would probably only be Register or Address",
      "javadoc": "Get the Result objects produced/affected by this instruction\n These would probably only be Register or Address\n@param context the instruction context\n@return an array of objects that are affected by this instruction",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        }
      ],
      "return": {
        "type_long": "java.lang.Object[]",
        "type_short": "java.lang.Object[]",
        "comment": "an array of objects that are affected by this instruction"
      },
      "throws": []
    },
    {
      "name": "getPcode",
      "comment": "Get an array of PCode operations (micro code) that this instruction\n performs.",
      "javadoc": "Get an array of PCode operations (micro code) that this instruction\n performs.\n@param context the instruction context\n@param override if not null, may indicate that different elements of the pcode generation are overridden\n@param uniqueFactory must be specified if flowOverride is not null\n@return array of PCODE,\n         zero length array if language doesn\u0027t support PCODE for this instruction",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        },
        {
          "name": "override",
          "type_long": "ghidra.program.model.pcode.PcodeOverride",
          "type_short": "PcodeOverride",
          "comment": "if not null, may indicate that different elements of the pcode generation are overridden"
        },
        {
          "name": "uniqueFactory",
          "type_long": "ghidra.program.model.address.UniqueAddressFactory",
          "type_short": "UniqueAddressFactory",
          "comment": "must be specified if flowOverride is not null"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp[]",
        "type_short": "ghidra.program.model.pcode.PcodeOp[]",
        "comment": "array of PCODE,\n         zero length array if language doesn\u0027t support PCODE for this instruction"
      },
      "throws": []
    },
    {
      "name": "getPcodePacked",
      "comment": "Same as getPcode but returns the operations in a packed format to optimize transfer to other processes",
      "javadoc": "Same as getPcode but returns the operations in a packed format to optimize transfer to other processes\n@param context the instruction context\n@param override if not null, may indicate that different elements of the pcode generation are overridden\n@param uniqueFactory must be specified if flowOverride is not null\n@return ",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        },
        {
          "name": "override",
          "type_long": "ghidra.program.model.pcode.PcodeOverride",
          "type_short": "PcodeOverride",
          "comment": "if not null, may indicate that different elements of the pcode generation are overridden"
        },
        {
          "name": "uniqueFactory",
          "type_long": "ghidra.program.model.address.UniqueAddressFactory",
          "type_short": "UniqueAddressFactory",
          "comment": "must be specified if flowOverride is not null"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PackedBytes",
        "type_short": "PackedBytes",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPcode",
      "comment": "Get an array of PCode operations (micro code) that a particular operand\n performs to compute its value.",
      "javadoc": "Get an array of PCode operations (micro code) that a particular operand\n performs to compute its value.\n@param context the instruction context\n@param opIndex the index of the operand for which to get PCode.\n@return array of PCODE,\n         zero length array if language doesn\u0027t support PCODE for this instruction",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "the instruction context"
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the operand for which to get PCode."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp[]",
        "type_short": "ghidra.program.model.pcode.PcodeOp[]",
        "comment": "array of PCODE,\n         zero length array if language doesn\u0027t support PCODE for this instruction"
      },
      "throws": []
    },
    {
      "name": "getLanguage",
      "comment": "Get processor language module associated with this prototype.",
      "javadoc": "Get processor language module associated with this prototype.\n@return language module",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Language",
        "type_short": "Language",
        "comment": "language module"
      },
      "throws": []
    }
  ]
}
