{
  "name": "Register",
  "comment": "Class to represent a processor register. To sort of handle bit registers, a special addressing\n convention is used. First the upper bit is set. Second, the next 3 bits are used to specify what\n bit position within a byte that this register bit exists at. Finally, the rest of the address is\n the address of the byte where the register bit lives.",
  "javadoc": "Class to represent a processor register. To sort of handle bit registers, a special addressing\n convention is used. First the upper bit is set. Second, the next 3 bits are used to specify what\n bit position within a byte that this register bit exists at. Finally, the rest of the address is\n the address of the byte where the register bit lives.",
  "static": false,
  "implements": [
    "java.io.Serializable",
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "EMPTY_COLLECTION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.List\u003cjava.lang.String\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "serialVersionUID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "TYPE_NONE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "TYPE_FP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "TYPE_SP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "TYPE_PC",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "TYPE_CONTEXT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "TYPE_ZERO",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16"
    },
    {
      "name": "TYPE_HIDDEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32"
    },
    {
      "name": "TYPE_DOES_NOT_FOLLOW_FLOW",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "64"
    },
    {
      "name": "TYPE_VECTOR",
      "comment": "Register can be used in SIMD operations",
      "javadoc": "Register can be used in SIMD operations",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "128"
    },
    {
      "name": "NO_CONTEXT",
      "comment": "Register used to denote NO defined context for a language",
      "javadoc": "Register used to denote NO defined context for a language",
      "static": true,
      "type_long": "ghidra.program.model.lang.Register",
      "type_short": "Register",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "description",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "address",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "numBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "leastSigBit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "bitLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "typeFlags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "bigEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "childRegisters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "aliases",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cjava.lang.String\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "baseMask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "leastSigBitInBaseRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "parent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Register",
      "type_short": "Register",
      "constant_value": null
    },
    {
      "name": "baseRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Register",
      "type_short": "Register",
      "constant_value": null
    },
    {
      "name": "group",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "laneSizes",
      "comment": "Set of valid lane sizes",
      "javadoc": "Set of valid lane sizes",
      "static": false,
      "type_long": "java.util.TreeSet\u003cjava.lang.Integer\u003e",
      "type_short": "TreeSet",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new Register object.",
      "javadoc": "Constructs a new Register object.\n@param name the name of this Register.\n@param description the description of this Register\n@param address the address in register space of this register\n@param numBytes the size (in bytes) of this register\n@param bigEndian true if the most significant bytes are associated with the lowest register\n            addresses, and false if the least significant bytes are associated with the lowest\n            register addresses.\n@param typeFlags the type(s) of this Register (TYPE_NONE, TYPE_FP, TYPE_SP, TYPE_PC,\n            TYPE_CONTEXT, TYPE_ZERO);)",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of this Register."
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the description of this Register"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address in register space of this register"
        },
        {
          "name": "numBytes",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size (in bytes) of this register"
        },
        {
          "name": "bigEndian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the most significant bytes are associated with the lowest register\n            addresses, and false if the least significant bytes are associated with the lowest\n            register addresses."
        },
        {
          "name": "typeFlags",
          "type_long": "int",
          "type_short": "int",
          "comment": "the type(s) of this Register (TYPE_NONE, TYPE_FP, TYPE_SP, TYPE_PC,\n            TYPE_CONTEXT, TYPE_ZERO);)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "register",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "numBytes",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "leastSignificantBit",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bitLength",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bigEndian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "typeFlags",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addAlias",
      "comment": "Add register alias",
      "javadoc": "Add register alias\n@param aliasReg",
      "static": false,
      "params": [
        {
          "name": "alias",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAlias",
      "comment": "Remove register alias",
      "javadoc": "Remove register alias\n@param alias",
      "static": false,
      "params": [
        {
          "name": "alias",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAliases",
      "comment": "Return register aliases. NOTE: This is generally only supported for context register fields.",
      "javadoc": "Return register aliases. NOTE: This is generally only supported for context register fields.\n@return register aliases or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Iterable\u003cjava.lang.String\u003e",
        "type_short": "Iterable",
        "comment": "register aliases or null"
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Gets the name of this Register.",
      "javadoc": "Gets the name of this Register.\n@return the name of this Register.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of this Register."
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "Get the description of the Register.",
      "javadoc": "Get the description of the Register.\n@return the description of the register",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the description of the register"
      },
      "throws": []
    },
    {
      "name": "isBigEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBitLength",
      "comment": "Gets the total number of bits for this Register.",
      "javadoc": "Gets the total number of bits for this Register.\n@return the total number of bits for this Register.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the total number of bits for this Register."
      },
      "throws": []
    },
    {
      "name": "getMinimumByteSize",
      "comment": "Returns the minimum number of bytes required to store a value for this Register.",
      "javadoc": "Returns the minimum number of bytes required to store a value for this Register.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumBytes",
      "comment": "Returns the number of bytes spanned by this Register.\n \n \n Compare to {#getMinimumByteSize(): Suppose a 5-bit register spans 2 bytes: 1 bit in\n the first byte, and the remaining 4 in the following byte. Its value can still be stored in 1\n byte, which is what #getMinimumByteSize() returns; however, its storage still spans 2\n bytes of the base register, which is what this method returns.",
      "javadoc": "Returns the number of bytes spanned by this Register.\n \n \u003cp\u003e\n Compare to {{@link #getMinimumByteSize()}: Suppose a 5-bit register spans 2 bytes: 1 bit in\n the first byte, and the remaining 4 in the following byte. Its value can still be stored in 1\n byte, which is what {@link #getMinimumByteSize()} returns; however, its storage still spans 2\n bytes of the base register, which is what this method returns.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOffset",
      "comment": "Returns the offset into the register space for this register",
      "javadoc": "Returns the offset into the register space for this register",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLeastSignificantBit",
      "comment": "Returns the bit offset from the register address for this register.",
      "javadoc": "Returns the bit offset from the register address for this register.\n@return the bit offset from the register address for this register.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the bit offset from the register address for this register."
      },
      "throws": []
    },
    {
      "name": "isDefaultFramePointer",
      "comment": "Returns true if this is the default frame pointer register",
      "javadoc": "Returns true if this is the default frame pointer register",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "followsFlow",
      "comment": "Returns true for a register whose context value should follow the disassembly flow.",
      "javadoc": "Returns true for a register whose context value should follow the disassembly flow.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isHidden",
      "comment": "Returns true if this is a hidden register.",
      "javadoc": "Returns true if this is a hidden register.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isProgramCounter",
      "comment": "Returns true if this is the program counter register",
      "javadoc": "Returns true if this is the program counter register",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isProcessorContext",
      "comment": "Returns true if this is a processor state register",
      "javadoc": "Returns true if this is a processor state register",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isZero",
      "comment": "Returns true for a register that is always zero",
      "javadoc": "Returns true for a register that is always zero",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "@see java.lang.Object#toString()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "@see java.lang.Object#equals(java.lang.Object)",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "@see java.lang.Object#hashCode()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressSpace",
      "comment": "Returns the register address space",
      "javadoc": "Returns the register address space",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "@see java.lang.Comparable#compareTo(java.lang.Object)",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Returns the address of the register.",
      "javadoc": "Returns the address of the register.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParentRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getChildRegisters",
      "comment": "Returns list of children registers sorted by lest-significant bit-offset within this\n register.",
      "javadoc": "Returns list of children registers sorted by lest-significant bit-offset within this\n register.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBaseRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLeastSignificatBitInBaseRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setParent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateBaseRegisterInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setChildRegisters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "childRegisters",
          "type_long": "ghidra.program.model.lang.Register[]",
          "type_short": "ghidra.program.model.lang.Register[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTypeFlags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBaseMask",
      "comment": "Returns the mask that indicates which bits in the base register apply to this register.",
      "javadoc": "Returns the mask that indicates which bits in the base register apply to this register.\n@return the mask that indicates which bits in the base register apply to this register",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the mask that indicates which bits in the base register apply to this register"
      },
      "throws": []
    },
    {
      "name": "setBit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "byteMask",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "bit",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFlag",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "flag",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasChildren",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setGroup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "group",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGroup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isBaseRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Determines if reg is contained within this register. Method does not work for bit registers\n (e.g., context-bits)",
      "javadoc": "Determines if reg is contained within this register. Method does not work for bit registers\n (e.g., context-bits)\n@param reg another register\n@return true if reg equals this register or is contained within it.",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "another register"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if reg equals this register or is contained within it."
      },
      "throws": []
    },
    {
      "name": "rename",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isVectorRegister",
      "comment": "Returns true if this is a vector register",
      "javadoc": "Returns true if this is a vector register\n@return true precisely when {@code this} is a full vector register (i.e., a register that can\n         be used as input or output for a SIMD operation).",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true precisely when  is a full vector register (i.e., a register that can\n         be used as input or output for a SIMD operation)."
      },
      "throws": []
    },
    {
      "name": "isValidLaneSize",
      "comment": "Determines whether  is a valid lane size for this register.",
      "javadoc": "Determines whether {@code laneSizeInBytes} is a valid lane size for this register.\n@param laneSizeInBytes lane size to check, measured in bytes\n@return true precisely when {@code this} is a vector register and {@code laneSizeInBytes} is\n         a valid lane size.",
      "static": false,
      "params": [
        {
          "name": "laneSizeInBytes",
          "type_long": "int",
          "type_short": "int",
          "comment": "lane size to check, measured in bytes"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true precisely when  is a vector register and  is\n         a valid lane size."
      },
      "throws": []
    },
    {
      "name": "getLaneSizes",
      "comment": "Returns the sorted array of lane sizes for this register, measured in bytes.",
      "javadoc": "Returns the sorted array of lane sizes for this register, measured in bytes.\n@return array of lane sizes, or {@code null} if {@code this} is not a vector register or no\n         lane sizes have been set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "array of lane sizes, or  if  is not a vector register or no\n         lane sizes have been set."
      },
      "throws": []
    },
    {
      "name": "addLaneSize",
      "comment": "Adds a lane size.",
      "javadoc": "Adds a lane size.\n@param laneSizeInBytes lane size to add\n@throws UnsupportedOperationException if register is unable to support the definition of\n             lanes.\n@throws IllegalArgumentException if {@code laneSizeInBytes} is invalid",
      "static": false,
      "params": [
        {
          "name": "laneSizeInBytes",
          "type_long": "int",
          "type_short": "int",
          "comment": "lane size to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
