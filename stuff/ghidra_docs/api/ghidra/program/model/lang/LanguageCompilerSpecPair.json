{
  "name": "LanguageCompilerSpecPair",
  "comment": "Represents an opinion\u0027s processor language and compiler.",
  "javadoc": "Represents an opinion\u0027s processor language and compiler.\n@see LanguageID\n@see CompilerSpecID",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "languageID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.LanguageID",
      "type_short": "LanguageID",
      "constant_value": null
    },
    {
      "name": "compilerSpecID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.CompilerSpecID",
      "type_short": "CompilerSpecID",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new language and compiler pair.",
      "javadoc": "Creates a new language and compiler pair.\n@param languageID The language ID string (x86:LE:32:default, 8051:BE:16:default, etc).\n@param compilerSpecID The compiler spec ID string (gcc, borlandcpp, etc).\n@throws IllegalArgumentException if the language or compiler ID strings are null or empty.",
      "static": false,
      "params": [
        {
          "name": "languageID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The language ID string (x86:LE:32:default, 8051:BE:16:default, etc)."
        },
        {
          "name": "compilerSpecID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The compiler spec ID string (gcc, borlandcpp, etc)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new language and compiler pair.",
      "javadoc": "Creates a new language and compiler pair.\n@param languageID The language ID.\n@param compilerSpecID The compiler spec ID.\n@throws IllegalArgumentException if the language or compiler ID is null.",
      "static": false,
      "params": [
        {
          "name": "languageID",
          "type_long": "ghidra.program.model.lang.LanguageID",
          "type_short": "LanguageID",
          "comment": "The language ID."
        },
        {
          "name": "compilerSpecID",
          "type_long": "ghidra.program.model.lang.CompilerSpecID",
          "type_short": "CompilerSpecID",
          "comment": "The compiler spec ID."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLanguage",
      "comment": "Gets the Language for this object\u0027s LanguageID.",
      "javadoc": "Gets the {@link Language} for this object\u0027s {@link LanguageID}.\n@return The {@link Language} for this object\u0027s {@link LanguageID}.\n@throws LanguageNotFoundException if no {@link Language} could be found for this\n   object\u0027s {@link LanguageID}.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Language",
        "type_short": "Language",
        "comment": "The Language for this object\u0027s LanguageID."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.LanguageNotFoundException",
          "type_short": "LanguageNotFoundException",
          "comment": "if no Language could be found for this\n   object\u0027s LanguageID."
        }
      ]
    },
    {
      "name": "getCompilerSpec",
      "comment": "Gets the CompilerSpec for this object\u0027s CompilerSpecID.",
      "javadoc": "Gets the {@link CompilerSpec} for this object\u0027s {@link CompilerSpecID}.\n@return The {@link CompilerSpec} for this object\u0027s {@link CompilerSpecID}.\n@throws LanguageNotFoundException if no {@link Language} could be found for this\n   object\u0027s {@link LanguageID}.\n@throws CompilerSpecNotFoundException if no {@link CompilerSpec} could be found for this\n   object\u0027s {@link CompilerSpecID}.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.CompilerSpec",
        "type_short": "CompilerSpec",
        "comment": "The CompilerSpec for this object\u0027s CompilerSpecID."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.CompilerSpecNotFoundException",
          "type_short": "CompilerSpecNotFoundException",
          "comment": "if no CompilerSpec could be found for this\n   object\u0027s CompilerSpecID."
        },
        {
          "type_long": "ghidra.program.model.lang.LanguageNotFoundException",
          "type_short": "LanguageNotFoundException",
          "comment": "if no Language could be found for this\n   object\u0027s LanguageID."
        }
      ]
    },
    {
      "name": "getLanguage",
      "comment": "Gets the Language for this object\u0027s LanguageID, using the given language\n service to do the lookup.",
      "javadoc": "Gets the {@link Language} for this object\u0027s {@link LanguageID}, using the given language\n service to do the lookup.\n@param languageService The language service to use for language lookup.\n@return The {@link Language} for this object\u0027s {@link LanguageID}, using the given language\n   service to do the lookup.\n@throws LanguageNotFoundException if no {@link Language} could be found for this\n   object\u0027s {@link LanguageID} using the given language service.",
      "static": false,
      "params": [
        {
          "name": "languageService",
          "type_long": "ghidra.program.model.lang.LanguageService",
          "type_short": "LanguageService",
          "comment": "The language service to use for language lookup."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Language",
        "type_short": "Language",
        "comment": "The Language for this object\u0027s LanguageID, using the given language\n   service to do the lookup."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.LanguageNotFoundException",
          "type_short": "LanguageNotFoundException",
          "comment": "if no Language could be found for this\n   object\u0027s LanguageID using the given language service."
        }
      ]
    },
    {
      "name": "getCompilerSpec",
      "comment": "Gets the CompilerSpec for this object\u0027s CompilerSpecID, using the given\n language service to do the lookup.",
      "javadoc": "Gets the {@link CompilerSpec} for this object\u0027s {@link CompilerSpecID}, using the given\n language service to do the lookup.\n@param languageService The language service to use for compiler lookup.\n@return The {@link CompilerSpec} for this object\u0027s {@link CompilerSpecID}, using the given \n   language service to do the lookup.\n@throws LanguageNotFoundException if no {@link Language} could be found for this\n   object\u0027s {@link LanguageID} using the given language service.\n@throws CompilerSpecNotFoundException if no {@link CompilerSpec} could be found for this\n   object\u0027s {@link CompilerSpecID} using the given language service.",
      "static": false,
      "params": [
        {
          "name": "languageService",
          "type_long": "ghidra.program.model.lang.LanguageService",
          "type_short": "LanguageService",
          "comment": "The language service to use for compiler lookup."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.CompilerSpec",
        "type_short": "CompilerSpec",
        "comment": "The CompilerSpec for this object\u0027s CompilerSpecID, using the given \n   language service to do the lookup."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.CompilerSpecNotFoundException",
          "type_short": "CompilerSpecNotFoundException",
          "comment": "if no CompilerSpec could be found for this\n   object\u0027s CompilerSpecID using the given language service."
        },
        {
          "type_long": "ghidra.program.model.lang.LanguageNotFoundException",
          "type_short": "LanguageNotFoundException",
          "comment": "if no Language could be found for this\n   object\u0027s LanguageID using the given language service."
        }
      ]
    },
    {
      "name": "getLanguageDescription",
      "comment": "Gets the LanguageDescription for this object\u0027s LanguageID.",
      "javadoc": "Gets the {@link LanguageDescription} for this object\u0027s {@link LanguageID}.\n@return The {@link LanguageDescription} for this object\u0027s {@link LanguageID}.\n@throws LanguageNotFoundException if no {@link LanguageDescription} could be found for this\n   object\u0027s {@link LanguageID}.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.LanguageDescription",
        "type_short": "LanguageDescription",
        "comment": "The LanguageDescription for this object\u0027s LanguageID."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.LanguageNotFoundException",
          "type_short": "LanguageNotFoundException",
          "comment": "if no LanguageDescription could be found for this\n   object\u0027s LanguageID."
        }
      ]
    },
    {
      "name": "getCompilerSpecDescription",
      "comment": "Gets the CompilerSpecDescription for this object\u0027s CompilerSpecID.",
      "javadoc": "Gets the {@link CompilerSpecDescription} for this object\u0027s {@link CompilerSpecID}.\n@return The {@link CompilerSpecDescription} for this object\u0027s {@link CompilerSpecID}.\n@throws LanguageNotFoundException if no {@link LanguageDescription} could be found for this\n   object\u0027s {@link LanguageID}.\n@throws CompilerSpecNotFoundException if no {@link CompilerSpecDescription} could be found \n   for this object\u0027s {@link CompilerSpecID}.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.CompilerSpecDescription",
        "type_short": "CompilerSpecDescription",
        "comment": "The CompilerSpecDescription for this object\u0027s CompilerSpecID."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.LanguageNotFoundException",
          "type_short": "LanguageNotFoundException",
          "comment": "if no LanguageDescription could be found for this\n   object\u0027s LanguageID."
        },
        {
          "type_long": "ghidra.program.model.lang.CompilerSpecNotFoundException",
          "type_short": "CompilerSpecNotFoundException",
          "comment": "if no CompilerSpecDescription could be found \n   for this object\u0027s CompilerSpecID."
        }
      ]
    },
    {
      "name": "getLanguageDescription",
      "comment": "Gets the LanguageDescription for this object\u0027s LanguageID.",
      "javadoc": "Gets the {@link LanguageDescription} for this object\u0027s {@link LanguageID}.\n@param languageService The language service to use for description lookup.\n@return The {@link LanguageDescription} for this object\u0027s {@link LanguageID}.\n@throws LanguageNotFoundException if no {@link LanguageDescription} could be found for this\n   object\u0027s {@link LanguageID} using the given language service.",
      "static": false,
      "params": [
        {
          "name": "languageService",
          "type_long": "ghidra.program.model.lang.LanguageService",
          "type_short": "LanguageService",
          "comment": "The language service to use for description lookup."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.LanguageDescription",
        "type_short": "LanguageDescription",
        "comment": "The LanguageDescription for this object\u0027s LanguageID."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.LanguageNotFoundException",
          "type_short": "LanguageNotFoundException",
          "comment": "if no LanguageDescription could be found for this\n   object\u0027s LanguageID using the given language service."
        }
      ]
    },
    {
      "name": "getCompilerSpecDescription",
      "comment": "Gets the CompilerSpecDescription for this object\u0027s CompilerSpecID.",
      "javadoc": "Gets the {@link CompilerSpecDescription} for this object\u0027s {@link CompilerSpecID}.\n@param languageService The language service to use for description lookup.\n@return The {@link CompilerSpecDescription} for this object\u0027s {@link CompilerSpecID}.\n@throws LanguageNotFoundException if no {@link LanguageDescription} could be found for this\n   object\u0027s {@link LanguageID}.\n@throws CompilerSpecNotFoundException if no {@link CompilerSpecDescription} could be found \n   for this object\u0027s {@link CompilerSpecID} using the given language service.",
      "static": false,
      "params": [
        {
          "name": "languageService",
          "type_long": "ghidra.program.model.lang.LanguageService",
          "type_short": "LanguageService",
          "comment": "The language service to use for description lookup."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.CompilerSpecDescription",
        "type_short": "CompilerSpecDescription",
        "comment": "The CompilerSpecDescription for this object\u0027s CompilerSpecID."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.LanguageNotFoundException",
          "type_short": "LanguageNotFoundException",
          "comment": "if no LanguageDescription could be found for this\n   object\u0027s LanguageID."
        },
        {
          "type_long": "ghidra.program.model.lang.CompilerSpecNotFoundException",
          "type_short": "CompilerSpecNotFoundException",
          "comment": "if no CompilerSpecDescription could be found \n   for this object\u0027s CompilerSpecID using the given language service."
        }
      ]
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "ghidra.program.model.lang.LanguageCompilerSpecPair",
          "type_short": "LanguageCompilerSpecPair",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
