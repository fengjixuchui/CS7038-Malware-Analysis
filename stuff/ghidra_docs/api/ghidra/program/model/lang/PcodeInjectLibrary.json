{
  "name": "PcodeInjectLibrary",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "language",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.SleighLanguage",
      "type_short": "SleighLanguage",
      "constant_value": null
    },
    {
      "name": "uniqueBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "callFixupMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.program.model.lang.InjectPayload\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "callOtherFixupMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.program.model.lang.InjectPayload\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "callOtherOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.InjectPayload[]",
      "type_short": "ghidra.program.model.lang.InjectPayload[]",
      "constant_value": null
    },
    {
      "name": "callMechFixupMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.program.model.lang.InjectPayload\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "exePcodeMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.program.model.lang.InjectPayload\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "programPayload",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.InjectPayloadSleigh[]",
      "type_short": "ghidra.program.model.lang.InjectPayloadSleigh[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighLanguage",
          "type_short": "SleighLanguage",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Clone a library so that a Program can extend the library without\n modifying the base library from Language.  InjectPayloads can be considered\n immutable and don\u0027t need to be cloned.",
      "javadoc": "Clone a library so that a Program can extend the library without\n modifying the base library from Language.  InjectPayloads can be considered\n immutable and don\u0027t need to be cloned.\n@param op2 is the library to clone",
      "static": false,
      "params": [
        {
          "name": "op2",
          "type_long": "ghidra.program.model.lang.PcodeInjectLibrary",
          "type_short": "PcodeInjectLibrary",
          "comment": "is the library to clone"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clone",
      "comment": "",
      "javadoc": "@return A clone of this library",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.PcodeInjectLibrary",
        "type_short": "PcodeInjectLibrary",
        "comment": "A clone of this library"
      },
      "throws": []
    },
    {
      "name": "getProgramPayloads",
      "comment": "",
      "javadoc": "@return an array of all the program specific payloads (or null)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.InjectPayloadSleigh[]",
        "type_short": "ghidra.program.model.lang.InjectPayloadSleigh[]",
        "comment": "an array of all the program specific payloads (or null)"
      },
      "throws": []
    },
    {
      "name": "hasProgramPayload",
      "comment": "Determine if the given payload name and type exists and is an extension\n of the program.",
      "javadoc": "Determine if the given payload name and type exists and is an extension\n of the program.\n@param nm is the payload name\n@param type is the payload type\n@return true if the program extension exists",
      "static": false,
      "params": [
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the payload name"
        },
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the payload type"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the program extension exists"
      },
      "throws": []
    },
    {
      "name": "isOverride",
      "comment": "Check if a specific payload has been overridden by a user extension",
      "javadoc": "Check if a specific payload has been overridden by a user extension\n@param nm is the name of the payload\n@param type is the type of payload\n@return true if the payload is overridden",
      "static": false,
      "params": [
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the name of the payload"
        },
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the type of payload"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the payload is overridden"
      },
      "throws": []
    },
    {
      "name": "getPayload",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.InjectPayload",
        "type_short": "InjectPayload",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseInject",
      "comment": "Convert the XML string representation of the given payload to a ConstructTpl\n The payload should be unattached (not already installed in the library)",
      "javadoc": "Convert the XML string representation of the given payload to a ConstructTpl\n The payload should be unattached (not already installed in the library)\n@param payload is the given payload whose XML should be converted\n@throws SleighException if there is any parsing issue",
      "static": false,
      "params": [
        {
          "name": "payload",
          "type_long": "ghidra.program.model.lang.InjectPayload",
          "type_short": "InjectPayload",
          "comment": "is the given payload whose XML should be converted"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighException",
          "type_short": "SleighException",
          "comment": "if there is any parsing issue"
        }
      ]
    },
    {
      "name": "adjustUniqueBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opTemplates",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.OpTpl[]",
          "type_short": "ghidra.app.plugin.processors.sleigh.template.OpTpl[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustUniqueBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.VarnodeTpl",
          "type_short": "VarnodeTpl",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCallFixupNames",
      "comment": "",
      "javadoc": "@return a list of names for all installed call-fixups",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "a list of names for all installed call-fixups"
      },
      "throws": []
    },
    {
      "name": "getCallotherFixupNames",
      "comment": "",
      "javadoc": "@return a list of names for all installed callother-fixups",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "a list of names for all installed callother-fixups"
      },
      "throws": []
    },
    {
      "name": "buildInjectContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.InjectContext",
        "type_short": "InjectContext",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasUserDefinedOp",
      "comment": "Determine if the language has a given user-defined op.\n In which case, a CALLOTHER_FIXUP can be installed for it.",
      "javadoc": "Determine if the language has a given user-defined op.\n In which case, a CALLOTHER_FIXUP can be installed for it.\n@param name is the putative name of the user-defined op\n@return true if the user-defined op exists",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the putative name of the user-defined op"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the user-defined op exists"
      },
      "throws": []
    },
    {
      "name": "registerInject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "payload",
          "type_long": "ghidra.program.model.lang.InjectPayload",
          "type_short": "InjectPayload",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeMechanismPayload",
      "comment": "Remove a specific call mechanism payload.",
      "javadoc": "Remove a specific call mechanism payload.\n@param nm is the name of the payload\n@return true if a payload was successfully removed",
      "static": false,
      "params": [
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the name of the payload"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a payload was successfully removed"
      },
      "throws": []
    },
    {
      "name": "uninstallProgramPayloads",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setupOverrides",
      "comment": "Look for user callother payloads that override an existing core fixup.\n Move these out of the map into the override list. Don\u0027t install user payload yet.",
      "javadoc": "Look for user callother payloads that override an existing core fixup.\n Move these out of the map into the override list. Don\u0027t install user payload yet.\n@param userPayloads is the list of user payloads",
      "static": false,
      "params": [
        {
          "name": "userPayloads",
          "type_long": "java.util.List\u003cghidra.program.model.lang.InjectPayloadSleigh\u003e",
          "type_short": "List",
          "comment": "is the list of user payloads"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerProgramInject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "userPayloads",
          "type_long": "java.util.List\u003cghidra.program.model.lang.InjectPayloadSleigh\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "allocateInject",
      "comment": "The main InjectPayload factory interface. This can be overloaded by derived libraries\n to produce custom dynamic payloads.",
      "javadoc": "The main InjectPayload factory interface. This can be overloaded by derived libraries\n to produce custom dynamic payloads.\n@param sourceName is a description of the source of the payload\n@param name is the formal name of the payload\n@param tp is the type of payload:  CALLFIXUP_TYPE, CALLOTHERFIXUP_TYPE, etc.\n@return the newly minted InjectPayload",
      "static": false,
      "params": [
        {
          "name": "sourceName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is a description of the source of the payload"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the formal name of the payload"
        },
        {
          "name": "tp",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the type of payload:  CALLFIXUP_TYPE, CALLOTHERFIXUP_TYPE, etc."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.InjectPayload",
        "type_short": "InjectPayload",
        "comment": "the newly minted InjectPayload"
      },
      "throws": []
    },
    {
      "name": "saveCompilerSpecXml",
      "comment": "Save the parts of the inject library that come from the compiler spec\n to the output stream as XML tags",
      "javadoc": "Save the parts of the inject library that come from the compiler spec\n to the output stream as XML tags\n@param buffer is the output stream",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the output stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXmlInject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "source",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "tp",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.InjectPayload",
        "type_short": "InjectPayload",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getConstantPool",
      "comment": "Get the constant pool associated with the given Program",
      "javadoc": "Get the constant pool associated with the given Program\n@param program is the given Program\n@return the ConstantPool associated with the Program\n@throws IOException for issues constructing the object",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "is the given Program"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.ConstantPool",
        "type_short": "ConstantPool",
        "comment": "the ConstantPool associated with the Program"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for issues constructing the object"
        }
      ]
    },
    {
      "name": "getUniqueBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
