{
  "name": "RegisterTree",
  "comment": "The RegisterTree class builds and represents relationships between registers. Any\n register that \"breaks down\" into smaller registers can be represent by a \n RegisterTree.  The largest register will be at the root and the registers that\n make it up will be its children trees.  The children are RegisterTrees as well\n and can have children trees of thier own.  The root of a RegisterTree may not\n have an associated Register which means that its children are unrelated.  This\n way all the registers of a processor can be represented as a single RegisterTree.",
  "javadoc": "The RegisterTree class builds and represents relationships between registers. Any\n register that \"breaks down\" into smaller registers can be represent by a \n RegisterTree.  The largest register will be at the root and the registers that\n make it up will be its children trees.  The children are RegisterTrees as well\n and can have children trees of thier own.  The root of a RegisterTree may not\n have an associated Register which means that its children are unrelated.  This\n way all the registers of a processor can be represented as a single RegisterTree.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "SEPARATOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\".\""
    },
    {
      "name": "register",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Register",
      "type_short": "Register",
      "constant_value": null
    },
    {
      "name": "parent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.RegisterTree",
      "type_short": "RegisterTree",
      "constant_value": null
    },
    {
      "name": "children",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.program.model.lang.RegisterTree\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a RegisterTree with the given name and set of registers",
      "javadoc": "Constructs a RegisterTree with the given name and set of registers\n@param name the name of the tree\n@param regs the array of registers to form into a tree",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the tree"
        },
        {
          "name": "regs",
          "type_long": "ghidra.program.model.lang.Register[]",
          "type_short": "ghidra.program.model.lang.Register[]",
          "comment": "the array of registers to form into a tree"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a RegisterTree with one RegisterTree child",
      "javadoc": "Constructs a RegisterTree with one RegisterTree child\n@param name the name of this tree\n@param tree the child tree.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of this tree"
        },
        {
          "name": "tree",
          "type_long": "ghidra.program.model.lang.RegisterTree",
          "type_short": "RegisterTree",
          "comment": "the child tree."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the name of this register tree.",
      "javadoc": "Returns the name of this register tree.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Adds a Register Tree to this tree.",
      "javadoc": "Adds a Register Tree to this tree.\n@param tree the register tree to add",
      "static": false,
      "params": [
        {
          "name": "tree",
          "type_long": "ghidra.program.model.lang.RegisterTree",
          "type_short": "RegisterTree",
          "comment": "the register tree to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponents",
      "comment": "Get the RegisterTrees that are the children of this RegisterTree",
      "javadoc": "Get the RegisterTrees that are the children of this RegisterTree\n@return a array of RegisterTrees",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterTree[]",
        "type_short": "ghidra.program.model.lang.RegisterTree[]",
        "comment": "a array of RegisterTrees"
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "Returns the Register associated with this tree. This may be null which\n indicates the children RegisterTrees are unrelated to each other.",
      "javadoc": "Returns the Register associated with this tree. This may be null which\n indicates the children RegisterTrees are unrelated to each other.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParent",
      "comment": "Returns the parent RegisterTree.",
      "javadoc": "Returns the parent RegisterTree.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterTree",
        "type_short": "RegisterTree",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParentRegisterPath",
      "comment": "The parent path of this RegisterTree if it exists or null if this tree has no parent or\n no parent with a register.",
      "javadoc": "The parent path of this RegisterTree if it exists or null if this tree has no parent or\n no parent with a register.\n@return The parent path of this RegisterTree.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The parent path of this RegisterTree."
      },
      "throws": []
    },
    {
      "name": "getRegisterPath",
      "comment": "The path of this register, which includes the parent path of this RegisterTree if this\n RegisterTree has a parent.",
      "javadoc": "The path of this register, which includes the parent path of this RegisterTree if this\n RegisterTree has a parent.\n@return the path of this register.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the path of this register."
      },
      "throws": []
    },
    {
      "name": "getRegisterTree",
      "comment": "Returns the RegisterTree for the given register if one exists in this RegisterTree object.",
      "javadoc": "Returns the RegisterTree for the given register if one exists in this RegisterTree object.\n@param register1 The register for which to get a RegisterTree.\n@return The RegisterTree for the given register if one exists in this RegisterTree object.",
      "static": false,
      "params": [
        {
          "name": "register1",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "The register for which to get a RegisterTree."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterTree",
        "type_short": "RegisterTree",
        "comment": "The RegisterTree for the given register if one exists in this RegisterTree object."
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "@see java.lang.Comparable#compareTo(java.lang.Object)",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.program.model.lang.RegisterTree",
          "type_short": "RegisterTree",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Removes the register from the children",
      "javadoc": "Removes the register from the children\n@param reg the register to remove.",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "the register to remove."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "@see java.lang.Object#toString()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
