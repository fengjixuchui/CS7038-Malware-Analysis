{
  "name": "OldLanguageMappingService",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lookupMagicString",
      "comment": "Check for a mapping of an old language-name magicString to a LanguageID/CompilerSpec pair.\n If returnLanguageReplacement is false, the returned LanguageID/CompilerSpec pair may no \n longer exist and may require use of an OldLanguage and translation process.",
      "javadoc": "Check for a mapping of an old language-name magicString to a LanguageID/CompilerSpec pair.\n If returnLanguageReplacement is false, the returned LanguageID/CompilerSpec pair may no \n longer exist and may require use of an OldLanguage and translation process.\n@param magicString old language name magic string\n@param languageReplacementOK if true the LanguageID/CompilerSpec pair corresponding to the\n latest language implementation will be returned if found, otherwise the a deprecated LanguageID/CompilerSpec pair\n may be returned.  This parameter should be false if there is a sensitivity to the language implementation \n (e.g., instruction prototypes, etc.)\n@return LanguageID/CompilerSpec pair or null if entry not found.",
      "static": true,
      "params": [
        {
          "name": "magicString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "old language name magic string"
        },
        {
          "name": "languageReplacementOK",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true the LanguageID/CompilerSpec pair corresponding to the\n latest language implementation will be returned if found, otherwise the a deprecated LanguageID/CompilerSpec pair\n may be returned.  This parameter should be false if there is a sensitivity to the language implementation \n (e.g., instruction prototypes, etc.)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.LanguageCompilerSpecPair",
        "type_short": "LanguageCompilerSpecPair",
        "comment": "LanguageID/CompilerSpec pair or null if entry not found."
      },
      "throws": []
    },
    {
      "name": "doLookupMagicString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "magicString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "languageReplacementOK",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.LanguageCompilerSpecPair",
        "type_short": "LanguageCompilerSpecPair",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "validatePair",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "pair",
          "type_long": "ghidra.program.model.lang.LanguageCompilerSpecPair",
          "type_short": "LanguageCompilerSpecPair",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.LanguageCompilerSpecPair",
        "type_short": "LanguageCompilerSpecPair",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processXmlLanguageString",
      "comment": "Parse the language string from an XML language name into the most appropriate LanguageID/CompilerSpec pair.\n The language name may either be an old name (i.e., magicString) or a new  string.\n If an old language name magic-string is provided, its replacement language will be returned if known.\n The returned pair may or may not be available based upon available language implementations.",
      "javadoc": "Parse the language string from an XML language name into the most appropriate LanguageID/CompilerSpec pair.\n The language name may either be an old name (i.e., magicString) or a new {@code \u003clanguage-id\u003e:\u003ccompiler-spec-id\u003e} string.\n If an old language name magic-string is provided, its replacement language will be returned if known.\n The returned pair may or may not be available based upon available language implementations.\n@param languageString old or new language string\n@return LanguageID/CompilerSpec pair or null if no old name mapping could be found.",
      "static": true,
      "params": [
        {
          "name": "languageString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "old or new language string"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.LanguageCompilerSpecPair",
        "type_short": "LanguageCompilerSpecPair",
        "comment": "LanguageID/CompilerSpec pair or null if no old name mapping could be found."
      },
      "throws": []
    }
  ]
}
