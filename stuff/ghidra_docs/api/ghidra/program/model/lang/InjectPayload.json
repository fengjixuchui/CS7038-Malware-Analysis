{
  "name": "InjectPayload",
  "comment": "InjectPayload encapsulates a semantic (p-code) override which can be injected\n into analyses that work with p-code (Decompiler, SymbolicPropagator)\n The payload typically replaces either a subroutine call or a userop",
  "javadoc": "\u003ccode\u003eInjectPayload\u003c/code\u003e encapsulates a semantic (p-code) override which can be injected\n into analyses that work with p-code (Decompiler, SymbolicPropagator)\n The payload typically replaces either a subroutine call or a userop",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "CALLFIXUP_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "CALLOTHERFIXUP_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "CALLMECHANISM_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "EXECUTABLEPCODE_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    }
  ],
  "methods": [
    {
      "name": "getName",
      "comment": "",
      "javadoc": "@return formal name for this injection",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "formal name for this injection"
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "",
      "javadoc": "@return the type of this injection:  CALLFIXUP_TYPE, CALLMECHANISM_TYPE, etc.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the type of this injection:  CALLFIXUP_TYPE, CALLMECHANISM_TYPE, etc."
      },
      "throws": []
    },
    {
      "name": "getSource",
      "comment": "",
      "javadoc": "@return a String describing the source of this payload",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a String describing the source of this payload"
      },
      "throws": []
    },
    {
      "name": "getParamShift",
      "comment": "",
      "javadoc": "@return number of parameters from the original call which should be truncated",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of parameters from the original call which should be truncated"
      },
      "throws": []
    },
    {
      "name": "getInput",
      "comment": "",
      "javadoc": "@return array of any input parameters for this inject",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.InjectPayload.InjectParameter[]",
        "type_short": "ghidra.program.model.lang.InjectPayload.InjectParameter[]",
        "comment": "array of any input parameters for this inject"
      },
      "throws": []
    },
    {
      "name": "getOutput",
      "comment": "",
      "javadoc": "@return array of any output parameters for this inject",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.InjectPayload.InjectParameter[]",
        "type_short": "ghidra.program.model.lang.InjectPayload.InjectParameter[]",
        "comment": "array of any output parameters for this inject"
      },
      "throws": []
    },
    {
      "name": "isErrorPlaceholder",
      "comment": "If parsing a payload (from XML) fails, a placeholder payload may be substituted and\n this method returns true for the substitute.  In all other cases, this returns false.",
      "javadoc": "If parsing a payload (from XML) fails, a placeholder payload may be substituted and\n this method returns true for the substitute.  In all other cases, this returns false.\n@return true if this is a placeholder for a payload with parse errors.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is a placeholder for a payload with parse errors."
      },
      "throws": []
    },
    {
      "name": "inject",
      "comment": "Given a context, send the p-code payload to the emitter",
      "javadoc": "Given a context, send the p-code payload to the emitter\n@param context is the context for injection\n@param emit is the object accumulating the final p-code",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.InjectContext",
          "type_short": "InjectContext",
          "comment": "is the context for injection"
        },
        {
          "name": "emit",
          "type_long": "ghidra.app.plugin.processors.sleigh.PcodeEmit",
          "type_short": "PcodeEmit",
          "comment": "is the object accumulating the final p-code"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPcode",
      "comment": "A convenience function wrapping the inject method, to produce the final set\n of PcodeOp objects in an array",
      "javadoc": "A convenience function wrapping the inject method, to produce the final set\n of PcodeOp objects in an array\n@param program is the Program for which injection is happening\n@param con is the context for injection\n@return the array of PcodeOps",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "is the Program for which injection is happening"
        },
        {
          "name": "con",
          "type_long": "ghidra.program.model.lang.InjectContext",
          "type_short": "InjectContext",
          "comment": "is the context for injection"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp[]",
        "type_short": "ghidra.program.model.pcode.PcodeOp[]",
        "comment": "the array of PcodeOps"
      },
      "throws": []
    },
    {
      "name": "isFallThru",
      "comment": "",
      "javadoc": "@return true if the injected p-code falls thru",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the injected p-code falls thru"
      },
      "throws": []
    },
    {
      "name": "isIncidentalCopy",
      "comment": "",
      "javadoc": "@return true if this inject\u0027s COPY operations should be treated as incidental",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this inject\u0027s COPY operations should be treated as incidental"
      },
      "throws": []
    },
    {
      "name": "saveXml",
      "comment": "Write out configuration parameters as a \\ XML tag",
      "javadoc": "Write out configuration parameters as a \\\u003cpcode\u003e XML tag\n@param buffer is the stream to write to",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is the stream to write to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXml",
      "comment": "Restore the payload from an XML stream.  The root expected document is\n the \\ tag, which may be wrapped with another tag by the derived class.",
      "javadoc": "Restore the payload from an XML stream.  The root expected document is\n the \\\u003cpcode\u003e tag, which may be wrapped with another tag by the derived class.\n@param parser is the XML stream\n@param language is used to resolve registers and address spaces\n@throws XmlParseException for badly formed XML",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "is the XML stream"
        },
        {
          "name": "language",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighLanguage",
          "type_short": "SleighLanguage",
          "comment": "is used to resolve registers and address spaces"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": "for badly formed XML"
        }
      ]
    }
  ]
}
