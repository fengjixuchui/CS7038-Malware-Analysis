{
  "name": "RegisterManager",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "registers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "registerNameMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.program.model.lang.Register\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "registerNames",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cjava.lang.String\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "contextRegisters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "contextBaseRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Register",
      "type_short": "Register",
      "constant_value": null
    },
    {
      "name": "sizeMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cghidra.program.model.lang.RegisterManager.RegisterSizeKey,ghidra.program.model.lang.Register\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "registerAddressMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cghidra.program.model.address.Address,java.util.List\u003cghidra.program.model.lang.Register\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "sortedVectorRegisters",
      "comment": "List of vector registers, sorted first by size and then by offset",
      "javadoc": "List of vector registers, sorted first by size and then by offset",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "registerSizeComparator",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Comparator\u003cghidra.program.model.lang.Register\u003e",
      "type_short": "Comparator",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct RegisterManager",
      "javadoc": "Construct RegisterManager\n@param registers all defined registers with appropriate parent-child relationships properly\n            established.\n@param registerNameMap a complete name-to-register map including all register aliases and\n            alternate spellings (e.g., case-variations)",
      "static": false,
      "params": [
        {
          "name": "registers",
          "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
          "type_short": "List",
          "comment": "all defined registers with appropriate parent-child relationships properly\n            established."
        },
        {
          "name": "registerNameMap",
          "type_long": "java.util.Map\u003cjava.lang.String,ghidra.program.model.lang.Register\u003e",
          "type_short": "Map",
          "comment": "a complete name-to-register map including all register aliases and\n            alternate spellings (e.g., case-variations)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "populateSizeMapBigEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "populateSizeMapLittleEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContextBaseRegister",
      "comment": "Get context base-register",
      "javadoc": "Get context base-register\n@return context base register or null if one has not been defined by the language.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "context base register or null if one has not been defined by the language."
      },
      "throws": []
    },
    {
      "name": "getContextRegisters",
      "comment": "Get unsorted unmodifiable list of all processor context registers (include base context\n register and children)",
      "javadoc": "Get unsorted unmodifiable list of all processor context registers (include base context\n register and children)\n@return all processor context registers",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
        "type_short": "List",
        "comment": "all processor context registers"
      },
      "throws": []
    },
    {
      "name": "getRegisterNames",
      "comment": "Get an alphabetical sorted unmodifiable list of original register names (including context\n registers). Names correspond to orignal register name and not aliases which may be defined.",
      "javadoc": "Get an alphabetical sorted unmodifiable list of original register names (including context\n registers). Names correspond to orignal register name and not aliases which may be defined.\n@return alphabetical sorted unmodifiable list of original register names.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "alphabetical sorted unmodifiable list of original register names."
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "Returns the largest register located at the specified address",
      "javadoc": "Returns the largest register located at the specified address\n@param addr register address\n@return register or null if not found",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "register address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "register or null if not found"
      },
      "throws": []
    },
    {
      "name": "getRegisters",
      "comment": "Returns all registers located at the specified address",
      "javadoc": "Returns all registers located at the specified address\n@param addr register address\n@return array of registers found (may be empty)",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "register address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register[]",
        "type_short": "ghidra.program.model.lang.Register[]",
        "comment": "array of registers found (may be empty)"
      },
      "throws": []
    },
    {
      "name": "getGlobalAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "Get register by address and size",
      "javadoc": "Get register by address and size\n@param addr register address\n@param size register size\n@return register or null if not found",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "register address"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "register size"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "register or null if not found"
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "Get register by name. A semi-case-insensitive lookup is performed. The specified name must\n match either the case-sensitive name or be entirely lowercase or uppercase.",
      "javadoc": "Get register by name. A semi-case-insensitive lookup is performed. The specified name must\n match either the case-sensitive name or be entirely lowercase or uppercase.\n@param name register name\n@return register or null if not found",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "register name"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "register or null if not found"
      },
      "throws": []
    },
    {
      "name": "getRegisters",
      "comment": "Get all registers as an unsorted unmodifiable list.",
      "javadoc": "Get all registers as an unsorted unmodifiable list.\n@return unmodifiable list of all registers defined",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
        "type_short": "List",
        "comment": "unmodifiable list of all registers defined"
      },
      "throws": []
    },
    {
      "name": "getSortedVectorRegisters",
      "comment": "Get an unmodifiable list of all vector registers indentified by the processor specification\n in sorted order based upon address and size.",
      "javadoc": "Get an unmodifiable list of all vector registers indentified by the processor specification\n in sorted order based upon address and size.\n@return all vector registers as unmodifiable list",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.lang.Register\u003e",
        "type_short": "List",
        "comment": "all vector registers as unmodifiable list"
      },
      "throws": []
    },
    {
      "name": "compareVectorRegisters",
      "comment": "Compares two vector registers, first by size (descending) and then by offset (ascending).",
      "javadoc": "Compares two vector registers, first by size (descending) and then by offset (ascending).\n@param reg1 vector register\n@param reg2 vector register\n@return result of comparison",
      "static": true,
      "params": [
        {
          "name": "reg1",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "vector register"
        },
        {
          "name": "reg2",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "vector register"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "result of comparison"
      },
      "throws": []
    }
  ]
}
