{
  "name": "CompilerSpec",
  "comment": "Interface for requesting specific information about the compiler used to\n build a Program being analyzed.  Major elements that can be queried include:\n   - AddressSpaces from the Language plus compiler specific ones like \"stack\"\n   - DataOrganization describing size and alignment of primitive data-types: int, long, pointers, etc.\n   - PrototypeModels describing calling conventions used by the compiler: __stdcall, __thiscall, etc.\n   - InjectPayloads or p-code that can used for\n      - Call-fixups, substituting p-code for compiler bookkeeping functions during analysis.\n      - Callother-fixups, substituting p-code for user-defined p-code operations.\n   - Memory ranges that the compiler treats as global\n   - Context and register values known to the compiler over specific memory ranges",
  "javadoc": "Interface for requesting specific information about the compiler used to\n build a Program being analyzed.  Major elements that can be queried include:\n   - AddressSpaces from the Language plus compiler specific ones like \"stack\"\n   - DataOrganization describing size and alignment of primitive data-types: int, long, pointers, etc.\n   - PrototypeModels describing calling conventions used by the compiler: __stdcall, __thiscall, etc.\n   - InjectPayloads or p-code that can used for\n      - Call-fixups, substituting p-code for compiler bookkeeping functions during analysis.\n      - Callother-fixups, substituting p-code for user-defined p-code operations.\n   - Memory ranges that the compiler treats as global\n   - Context and register values known to the compiler over specific memory ranges",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "CALLING_CONVENTION_cdecl",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"__cdecl\""
    },
    {
      "name": "CALLING_CONVENTION_pascal",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"__pascal\""
    },
    {
      "name": "CALLING_CONVENTION_thiscall",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"__thiscall\""
    },
    {
      "name": "CALLING_CONVENTION_stdcall",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"__stdcall\""
    },
    {
      "name": "CALLING_CONVENTION_fastcall",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"__fastcall\""
    },
    {
      "name": "CALLING_CONVENTION_vectorcall",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"__vectorcall\""
    }
  ],
  "methods": [
    {
      "name": "getLanguage",
      "comment": "Get the Language this compiler spec is based on.  Note that\n compiler specs may be reused across multiple languages in the\n cspec files on disk, but once loaded in memory are actually\n separate objects.  (M:N on disk, 1:N in memory)",
      "javadoc": "Get the Language this compiler spec is based on.  Note that\n compiler specs may be reused across multiple languages in the\n cspec files on disk, but once loaded in memory are actually\n separate objects.  (M:N on disk, 1:N in memory)\n@return the language this compiler spec is based on",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Language",
        "type_short": "Language",
        "comment": "the language this compiler spec is based on"
      },
      "throws": []
    },
    {
      "name": "getCompilerSpecDescription",
      "comment": "",
      "javadoc": "@return a brief description of the compiler spec",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.CompilerSpecDescription",
        "type_short": "CompilerSpecDescription",
        "comment": "a brief description of the compiler spec"
      },
      "throws": []
    },
    {
      "name": "getCompilerSpecID",
      "comment": "",
      "javadoc": "@return the id string associated with this compiler spec;",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.CompilerSpecID",
        "type_short": "CompilerSpecID",
        "comment": "the id string associated with this compiler spec;"
      },
      "throws": []
    },
    {
      "name": "getStackPointer",
      "comment": "Get the default Stack Pointer register for this language if there is one.",
      "javadoc": "Get the default Stack Pointer register for this language if there is one.\n@return default stack pointer register.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": "default stack pointer register."
      },
      "throws": []
    },
    {
      "name": "isStackRightJustified",
      "comment": "Indicates whether variables are right-justified within the \n stack alignment.",
      "javadoc": "Indicates whether variables are right-justified within the \n stack alignment.\n@return true if right stack justification applies.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if right stack justification applies."
      },
      "throws": []
    },
    {
      "name": "getAddressSpace",
      "comment": "Get an address space by name.  This can be value added over the normal AddressFactory.getAddressSpace\n routine because the compiler spec can refer to special internal spaces like the stack space",
      "javadoc": "Get an address space by name.  This can be value added over the normal AddressFactory.getAddressSpace\n routine because the compiler spec can refer to special internal spaces like the stack space\n@param spaceName is the name of the address space\n@return the corresponding AddressSpace object",
      "static": false,
      "params": [
        {
          "name": "spaceName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the name of the address space"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": "the corresponding AddressSpace object"
      },
      "throws": []
    },
    {
      "name": "getStackSpace",
      "comment": "Get the stack address space defined by this specification",
      "javadoc": "Get the stack address space defined by this specification\n@return stack address space",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": "stack address space"
      },
      "throws": []
    },
    {
      "name": "getStackBaseSpace",
      "comment": "Get the physical space used for stack data storage",
      "javadoc": "Get the physical space used for stack data storage\n@return address space which contains the stack",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": "address space which contains the stack"
      },
      "throws": []
    },
    {
      "name": "stackGrowsNegative",
      "comment": "",
      "javadoc": "@return true if the stack grows with negative offsets",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the stack grows with negative offsets"
      },
      "throws": []
    },
    {
      "name": "applyContextSettings",
      "comment": "Apply context settings to the ProgramContext\n as specified by the configuration",
      "javadoc": "Apply context settings to the ProgramContext\n as specified by the configuration\n@param ctx is the ProgramContext",
      "static": false,
      "params": [
        {
          "name": "ctx",
          "type_long": "ghidra.program.model.listing.DefaultProgramContext",
          "type_short": "DefaultProgramContext",
          "comment": "is the ProgramContext"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCallingConventions",
      "comment": "",
      "javadoc": "@return an array of the prototype models. Each prototype model specifies a calling convention.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel[]",
        "type_short": "ghidra.program.model.lang.PrototypeModel[]",
        "comment": "an array of the prototype models. Each prototype model specifies a calling convention."
      },
      "throws": []
    },
    {
      "name": "getCallingConvention",
      "comment": "Returns the Calling Convention Model with the given name.",
      "javadoc": "Returns the Calling Convention Model with the given name.\n@param name the name of the calling convention to retrieve\n@return the calling convention with the given name or null if there is none with that name.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the calling convention to retrieve"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": "the calling convention with the given name or null if there is none with that name."
      },
      "throws": []
    },
    {
      "name": "getAllModels",
      "comment": "",
      "javadoc": "@return all possible PrototypeModels, including calling conventions and merge models",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel[]",
        "type_short": "ghidra.program.model.lang.PrototypeModel[]",
        "comment": "all possible PrototypeModels, including calling conventions and merge models"
      },
      "throws": []
    },
    {
      "name": "getDefaultCallingConvention",
      "comment": "Returns the prototype model that is the default calling convention or else null.",
      "javadoc": "Returns the prototype model that is the default calling convention or else null.\n@return the default calling convention or null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": "the default calling convention or null."
      },
      "throws": []
    },
    {
      "name": "getDecompilerOutputLanguage",
      "comment": "Get the language that the decompiler produces",
      "javadoc": "Get the language that the decompiler produces\n@return an enum specifying the language",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.DecompilerLanguage",
        "type_short": "DecompilerLanguage",
        "comment": "an enum specifying the language"
      },
      "throws": []
    },
    {
      "name": "getPrototypeEvaluationModel",
      "comment": "Get the evaluation model matching the given type.\n If analysis needs to apply a PrototypeModel to a function but a specific model\n is not known, then this method can be used to select a putative PrototypeModel\n based on the analysis use-case:\n    - EVAL_CURRENT indicates the model to use for the \"current function\" being analyzed\n    - EVAL_CALLED indicates the model to use for a function called by the current function",
      "javadoc": "Get the evaluation model matching the given type.\n If analysis needs to apply a PrototypeModel to a function but a specific model\n is not known, then this method can be used to select a putative PrototypeModel\n based on the analysis use-case:\n    - EVAL_CURRENT indicates the model to use for the \"current function\" being analyzed\n    - EVAL_CALLED indicates the model to use for a function called by the current function\n@param modelType is the type of evaluation model\n@return prototype evaluation model",
      "static": false,
      "params": [
        {
          "name": "modelType",
          "type_long": "ghidra.program.model.lang.CompilerSpec.EvaluationModelType",
          "type_short": "EvaluationModelType",
          "comment": "is the type of evaluation model"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": "prototype evaluation model"
      },
      "throws": []
    },
    {
      "name": "isGlobal",
      "comment": "",
      "javadoc": "@param addr is the (start of the) storage location\n@return true if the specified storage location has been designated \"global\" in scope",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is the (start of the) storage location"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the specified storage location has been designated \"global\" in scope"
      },
      "throws": []
    },
    {
      "name": "getDataOrganization",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataOrganization",
        "type_short": "DataOrganization",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPcodeInjectLibrary",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.PcodeInjectLibrary",
        "type_short": "PcodeInjectLibrary",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "matchConvention",
      "comment": "Get the PrototypeModel corresponding to the given generic calling convention",
      "javadoc": "Get the PrototypeModel corresponding to the given generic calling convention\n@param genericCallingConvention is the given generic calling convention\n@return the matching model or the defaultModel if nothing matches",
      "static": false,
      "params": [
        {
          "name": "genericCallingConvention",
          "type_long": "ghidra.program.model.data.GenericCallingConvention",
          "type_short": "GenericCallingConvention",
          "comment": "is the given generic calling convention"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": "the matching model or the defaultModel if nothing matches"
      },
      "throws": []
    },
    {
      "name": "findBestCallingConvention",
      "comment": "Find the best guess at a calling convention model from this compiler spec\n given an ordered list of (potential) parameters.",
      "javadoc": "Find the best guess at a calling convention model from this compiler spec\n given an ordered list of (potential) parameters.\n@param params is the ordered list of parameters\n@return prototype model corresponding to the specified function signature",
      "static": false,
      "params": [
        {
          "name": "params",
          "type_long": "ghidra.program.model.listing.Parameter[]",
          "type_short": "ghidra.program.model.listing.Parameter[]",
          "comment": "is the ordered list of parameters"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": "prototype model corresponding to the specified function signature"
      },
      "throws": []
    },
    {
      "name": "hasProperty",
      "comment": "Returns whether this language has a property defined.",
      "javadoc": "Returns whether this language has a property defined.\n@param key the property key\n@return if the property is defined",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the property key"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "if the property is defined"
      },
      "throws": []
    },
    {
      "name": "doesCDataTypeConversions",
      "comment": "Return true if function prototypes respect the C-language data-type conversion conventions.\n This amounts to converting array data-types to pointer-to-element data-types.\n In C, arrays are passed by reference (structures are still passed by value)",
      "javadoc": "Return true if function prototypes respect the C-language data-type conversion conventions.\n This amounts to converting array data-types to pointer-to-element data-types.\n In C, arrays are passed by reference (structures are still passed by value)\n@return if the prototype does C-language data-type conversions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "if the prototype does C-language data-type conversions"
      },
      "throws": []
    },
    {
      "name": "getPropertyAsInt",
      "comment": "Gets the value of a property as an int, returning defaultInt if undefined.",
      "javadoc": "Gets the value of a property as an int, returning defaultInt if undefined.\n@param key the property key\n@param defaultInt the default value to return if property is undefined\n@return the property value as an int, or the default value if undefined",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the property key"
        },
        {
          "name": "defaultInt",
          "type_long": "int",
          "type_short": "int",
          "comment": "the default value to return if property is undefined"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the property value as an int, or the default value if undefined"
      },
      "throws": []
    },
    {
      "name": "getPropertyAsBoolean",
      "comment": "Gets the value of a property as a boolean, returning defaultBoolean if undefined.",
      "javadoc": "Gets the value of a property as a boolean, returning defaultBoolean if undefined.\n@param key the property key\n@param defaultBoolean the default value to return if property is undefined\n@return the property value as a boolean, or the default value if undefined",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the property key"
        },
        {
          "name": "defaultBoolean",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "the default value to return if property is undefined"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "the property value as a boolean, or the default value if undefined"
      },
      "throws": []
    },
    {
      "name": "getProperty",
      "comment": "Gets the value of a property as a String, returning defaultString if undefined.",
      "javadoc": "Gets the value of a property as a String, returning defaultString if undefined.\n@param key the property key\n@param defaultString the default value to return if property is undefined\n@return the property value as a String, or the default value if undefined",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the property key"
        },
        {
          "name": "defaultString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the default value to return if property is undefined"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the property value as a String, or the default value if undefined"
      },
      "throws": []
    },
    {
      "name": "getProperty",
      "comment": "Gets a property defined for this language, or null if that property isn\u0027t defined.",
      "javadoc": "Gets a property defined for this language, or null if that property isn\u0027t defined.\n@param key the property key\n@return the property value, or null if not defined",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the property key"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the property value, or null if not defined"
      },
      "throws": []
    },
    {
      "name": "getPropertyKeys",
      "comment": "Returns a read-only set view of the property keys defined on this language.",
      "javadoc": "Returns a read-only set view of the property keys defined on this language.\n@return read-only set of property keys",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cjava.lang.String\u003e",
        "type_short": "Set",
        "comment": "read-only set of property keys"
      },
      "throws": []
    }
  ]
}
