{
  "name": "ParamEntry",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "FORCE_LEFT_JUSTIFY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "REVERSE_STACK",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "SMALLSIZE_ZEXT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "SMALLSIZE_SEXT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "IS_BIG_ENDIAN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16"
    },
    {
      "name": "SMALLSIZE_INTTYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32"
    },
    {
      "name": "SMALLSIZE_FLOAT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "64"
    },
    {
      "name": "IS_GROUPED",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "512"
    },
    {
      "name": "TYPE_UNKNOWN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "TYPE_PTR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "TYPE_FLOAT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "flags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "type",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "group",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "groupsize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "spaceid",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    },
    {
      "name": "addressbase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "minsize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "alignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "numslots",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "joinrec",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.Varnode[]",
      "type_short": "ghidra.program.model.pcode.Varnode[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "grp",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGroup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGroupSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAlign",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isExclusion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isReverseStack",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isGrouped",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isBigEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isFloatExtended",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isLeftJustified",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isNonOverlappingJoin",
      "comment": "",
      "javadoc": "@return true if at least one piece of a join doesn\u0027t overlap with another ParamEntry",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if at least one piece of a join doesn\u0027t overlap with another ParamEntry"
      },
      "throws": []
    },
    {
      "name": "getSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getJoinRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode[]",
        "type_short": "ghidra.program.model.pcode.Varnode[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "op2",
          "type_long": "ghidra.program.model.lang.ParamEntry",
          "type_short": "ParamEntry",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "justifiedContain",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSlot",
      "comment": "Assuming the address is contained in this entry and we -skip- to a certain byte\n return the slot associated with that byte",
      "javadoc": "Assuming the address is contained in this entry and we -skip- to a certain byte\n return the slot associated with that byte\n@param addr is the address to check (which MUST be contained)\n@param skip is the number of bytes to skip\n@return the slot index",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is the address to check (which MUST be contained)"
        },
        {
          "name": "skip",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the number of bytes to skip"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the slot index"
      },
      "throws": []
    },
    {
      "name": "getAddrBySlot",
      "comment": "Return the storage address assigned when allocating something of size -sz- assuming -slotnum- slots\n have already been assigned.  Set res.space to null if the -sz- is too small or if\n there are not enough slots left",
      "javadoc": "Return the storage address assigned when allocating something of size -sz- assuming -slotnum- slots\n have already been assigned.  Set res.space to null if the -sz- is too small or if\n there are not enough slots left\n@param slotnum number of slots already assigned\n@param sz number of bytes to being assigned\n@param res the final storage address\n@return slotnum plus the number of slots used",
      "static": false,
      "params": [
        {
          "name": "slotnum",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of slots already assigned"
        },
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes to being assigned"
        },
        {
          "name": "res",
          "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData",
          "type_short": "VarnodeData",
          "comment": "the final storage address"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "slotnum plus the number of slots used"
      },
      "throws": []
    },
    {
      "name": "findEntryByStorage",
      "comment": "Find the ParamEntry in the list whose storage matches the given Varnode",
      "javadoc": "Find the ParamEntry in the list whose storage matches the given Varnode\n@param curList is the list of ParamEntry\n@param varnode is the given Varnode\n@return the matching entry or null",
      "static": true,
      "params": [
        {
          "name": "curList",
          "type_long": "java.util.List\u003cghidra.program.model.lang.ParamEntry\u003e",
          "type_short": "List",
          "comment": "is the list of ParamEntry"
        },
        {
          "name": "varnode",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "is the given Varnode"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.ParamEntry",
        "type_short": "ParamEntry",
        "comment": "the matching entry or null"
      },
      "throws": []
    },
    {
      "name": "countJoinOverlap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "curList",
          "type_long": "java.util.List\u003cghidra.program.model.lang.ParamEntry\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveJoin",
      "comment": "Adjust the group and groupsize based on the ParamEntrys being overlapped",
      "javadoc": "Adjust the group and groupsize based on the ParamEntrys being overlapped\n@param curList is the current list of ParamEntry\n@throws XmlParseException if no overlap is found",
      "static": false,
      "params": [
        {
          "name": "curList",
          "type_long": "java.util.List\u003cghidra.program.model.lang.ParamEntry\u003e",
          "type_short": "List",
          "comment": "is the current list of ParamEntry"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": "if no overlap is found"
        }
      ]
    },
    {
      "name": "saveXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "cspec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": ""
        },
        {
          "name": "curList",
          "type_long": "java.util.List\u003cghidra.program.model.lang.ParamEntry\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "grouped",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "unsignedCompare",
      "comment": "Unsigned less-than operation",
      "javadoc": "Unsigned less-than operation\n@param a is the first operand\n@param b is the second operand\n@return return true is a is less than b, where a and b are interpreted as unsigned integers",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the first operand"
        },
        {
          "name": "b",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the second operand"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "return true is a is less than b, where a and b are interpreted as unsigned integers"
      },
      "throws": []
    },
    {
      "name": "justifiedContainAddress",
      "comment": "Return -1 if (op2,sz2) is not properly contained in (op1,sz1)\n If it is contained, return the endian aware offset of (op2,sz2)\n I.e. if the least significant byte of the op2 range falls on the least significant\n byte of the op1 range, return 0.  If it intersects the second least significant, return 1, etc.",
      "javadoc": "Return -1 if (op2,sz2) is not properly contained in (op1,sz1)\n If it is contained, return the endian aware offset of (op2,sz2)\n I.e. if the least significant byte of the op2 range falls on the least significant\n byte of the op1 range, return 0.  If it intersects the second least significant, return 1, etc.\n@param spc1 the first address space\n@param offset1 the first offset\n@param sz1 size of first space\n@param spc2 the second address space\n@param offset2 is the second offset\n@param sz2 size of second space\n@param forceleft is true if containment is forced to be on the left even for big endian\n@param isBigEndian true if big endian\n@return the endian aware offset or -1",
      "static": true,
      "params": [
        {
          "name": "spc1",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "the first address space"
        },
        {
          "name": "offset1",
          "type_long": "long",
          "type_short": "long",
          "comment": "the first offset"
        },
        {
          "name": "sz1",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of first space"
        },
        {
          "name": "spc2",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "the second address space"
        },
        {
          "name": "offset2",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the second offset"
        },
        {
          "name": "sz2",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of second space"
        },
        {
          "name": "forceleft",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "is true if containment is forced to be on the left even for big endian"
        },
        {
          "name": "isBigEndian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if big endian"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the endian aware offset or -1"
      },
      "throws": []
    },
    {
      "name": "getMetatype",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tp",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "orderWithinGroup",
      "comment": "ParamEntry within a group must be distinguishable by size or by type",
      "javadoc": "ParamEntry within a group must be distinguishable by size or by type\n@param entry1 is the first being compared\n@param entry2 is the second being compared\n@throws XmlParseException if the pair is not distinguishable",
      "static": true,
      "params": [
        {
          "name": "entry1",
          "type_long": "ghidra.program.model.lang.ParamEntry",
          "type_short": "ParamEntry",
          "comment": "is the first being compared"
        },
        {
          "name": "entry2",
          "type_long": "ghidra.program.model.lang.ParamEntry",
          "type_short": "ParamEntry",
          "comment": "is the second being compared"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.xml.XmlParseException",
          "type_short": "XmlParseException",
          "comment": "if the pair is not distinguishable"
        }
      ]
    }
  ]
}
