{
  "name": "ManagerDB",
  "comment": "Interface that all subsection managers of a program must implement.",
  "javadoc": "Interface that all subsection managers of a program must implement.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "setProgram",
      "comment": "Callback from program used to indicate all manager have been created.\n When this method is invoked, all managers have been instantiated but may not be fully initialized.",
      "javadoc": "Callback from program used to indicate all manager have been created.\n When this method is invoked, all managers have been instantiated but may not be fully initialized.\n@param program the program is set when all the initializations have been completed.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.database.ProgramDB",
          "type_short": "ProgramDB",
          "comment": "the program is set when all the initializations have been completed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "programReady",
      "comment": "Callback from program made to each manager after the program has completed initialization.\n This method may be used by managers to perform additional upgrading which may have been deferred.",
      "javadoc": "Callback from program made to each manager after the program has completed initialization.\n This method may be used by managers to perform additional upgrading which may have been deferred.\n@param openMode the mode that the program is being opened.\n@param currentRevision current program revision.  If openMode is UPGRADE, this value reflects \n the pre-upgrade value.\n@param monitor the task monitor to use in any upgrade operations.\n@throws IOException if a database io error occurs.\n@throws CancelledException if the user cancelled the operation via the task monitor.",
      "static": false,
      "params": [
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": "the mode that the program is being opened."
        },
        {
          "name": "currentRevision",
          "type_long": "int",
          "type_short": "int",
          "comment": "current program revision.  If openMode is UPGRADE, this value reflects \n the pre-upgrade value."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor to use in any upgrade operations."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database io error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancelled the operation via the task monitor."
        }
      ]
    },
    {
      "name": "invalidateCache",
      "comment": "Clears all data caches.",
      "javadoc": "Clears all data caches.\n@param all if false, some managers may not need to update their cache if they can\n tell that its not necessary.  If this flag is true, then all managers should clear\n their cache no matter what.\n@throws IOException if a database io error occurs.",
      "static": false,
      "params": [
        {
          "name": "all",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if false, some managers may not need to update their cache if they can\n tell that its not necessary.  If this flag is true, then all managers should clear\n their cache no matter what."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database io error occurs."
        }
      ]
    },
    {
      "name": "deleteAddressRange",
      "comment": "Delete all objects which have been applied to the address range startAddr to endAddr\n and update the database accordingly.",
      "javadoc": "Delete all objects which have been applied to the address range startAddr to endAddr\n and update the database accordingly.\n@param startAddr the first address in the range.\n@param endAddr the last address in the range.\n@param monitor the task monitor to use in any upgrade operations.\n@throws CancelledException if the user cancelled the operation via the task monitor.",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address in the range."
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last address in the range."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor to use in any upgrade operations."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancelled the operation via the task monitor."
        }
      ]
    },
    {
      "name": "moveAddressRange",
      "comment": "Move all objects within an address range to a new location.",
      "javadoc": "Move all objects within an address range to a new location.\n@param fromAddr the first address of the range to be moved.\n@param toAddr the address where to the range is to be moved.\n@param length the number of addresses to move.\n@param monitor the task monitor to use in any upgrade operations.\n@throws CancelledException if the user cancelled the operation via the task monitor.\n@throws AddressOverflowException if the length is such that a address wrap occurs",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address of the range to be moved."
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address where to the range is to be moved."
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the number of addresses to move."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor to use in any upgrade operations."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if the length is such that a address wrap occurs"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancelled the operation via the task monitor."
        }
      ]
    },
    {
      "name": "dispose",
      "comment": "Callback from the program after being closed to signal this manager to release memory and resources.\n ",
      "javadoc": "Callback from the program after being closed to signal this manager to release memory and resources.\n \u003cp\u003e",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
