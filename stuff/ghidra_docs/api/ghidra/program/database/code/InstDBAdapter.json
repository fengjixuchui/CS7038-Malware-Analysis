{
  "name": "InstDBAdapter",
  "comment": "Adapter that accesses the instruction table.",
  "javadoc": "Adapter that accesses the instruction table.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "INSTRUCTION_TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Instructions\""
    },
    {
      "name": "INSTRUCTION_SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "PROTO_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "FLAGS_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAdapter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dbHandle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.code.InstDBAdapter",
        "type_short": "InstDBAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findReadOnlyAdapter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.code.InstDBAdapter",
        "type_short": "InstDBAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "upgrade",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dbHandle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": ""
        },
        {
          "name": "oldAdapter",
          "type_long": "ghidra.program.database.code.InstDBAdapter",
          "type_short": "InstDBAdapter",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.code.InstDBAdapter",
        "type_short": "InstDBAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createInstruction",
      "comment": "Create a new instruction.",
      "javadoc": "Create a new instruction.\n@param addr address (key for the record)\n@param protoID prototype ID\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "long",
          "type_short": "long",
          "comment": "address (key for the record)"
        },
        {
          "name": "protoID",
          "type_long": "int",
          "type_short": "int",
          "comment": "prototype ID"
        },
        {
          "name": "flags",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "updateFlags",
      "comment": "Sets the flag column in the record at addr to the give flags byte.",
      "javadoc": "Sets the flag column in the record at addr to the give flags byte.\n@param addr key of the record to be changed.\n@param flags the flags byte to be stored in the record.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "long",
          "type_short": "long",
          "comment": "key of the record to be changed."
        },
        {
          "name": "flags",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "the flags byte to be stored in the record."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "deleteRecord",
      "comment": "Remove the instruction.",
      "javadoc": "Remove the instruction.\n@param addr address (key for the record)\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "long",
          "type_short": "long",
          "comment": "address (key for the record)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecordAtOrAfter",
      "comment": "Returns the next record at or after the given address key",
      "javadoc": "Returns the next record at or after the given address key\n@param addr the address to begin the search.\n@return the next record or null.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to begin the search."
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "the next record or null."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecordAfter",
      "comment": "Returns the next record after the given address key",
      "javadoc": "Returns the next record after the given address key\n@param addr the address to begin the search.\n@return the next record or null.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to begin the search."
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "the next record or null."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Returns the record at the given key or null if none exists.",
      "javadoc": "Returns the record at the given key or null if none exists.\n@param addr the key.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "long",
          "type_short": "long",
          "comment": "the key."
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Returns the record at the given address or null if none exists.",
      "javadoc": "Returns the record at the given address or null if none exists.\n@param addr the address to use as the key\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to use as the key"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecordBefore",
      "comment": "Returns the record just before the given address key.",
      "javadoc": "Returns the record just before the given address key.\n@param addr the address to begin the search.\n@return the previous record or null.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to begin the search."
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "the previous record or null."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecords",
      "comment": "Returns a record iterator over all records in the given range.",
      "javadoc": "Returns a record iterator over all records in the given range.\n@param start the start of the range.\n@param end the end of the range.\n@param atStart if true, positions the iterator before start, otherwise after end.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start of the range."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end of the range."
        },
        {
          "name": "atStart",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, positions the iterator before start, otherwise after end."
        }
      ],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecords",
      "comment": "Returns an iterator over all records.",
      "javadoc": "Returns an iterator over all records.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecordCount",
      "comment": "Returns the total number of records in this adapter.",
      "javadoc": "Returns the total number of records in this adapter.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecordAtOrBefore",
      "comment": "Returns the next record at or before the given address key",
      "javadoc": "Returns the next record at or before the given address key\n@param addr the address to begin the search.\n@return the previous record or null.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to begin the search."
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "the previous record or null."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getKeys",
      "comment": "Returns an AddressKeyIterator over the given range.",
      "javadoc": "Returns an AddressKeyIterator over the given range.\n@param start the first address in the range.\n@param end the last address in the range.\n@param atStart if true, positions the iterator before the first address, otherwise after\n the last address.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address in the range."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last address in the range."
        },
        {
          "name": "atStart",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, positions the iterator before the first address, otherwise after\n the last address."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.map.AddressKeyIterator",
        "type_short": "AddressKeyIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "deleteRecords",
      "comment": "Deletes all records in the given range.",
      "javadoc": "Deletes all records in the given range.\n@param start the first address in the range.\n@param end the last address in the range.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address in the range."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last address in the range."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "putRecord",
      "comment": "Adds or updates the given record.",
      "javadoc": "Adds or updates the given record.\n@param record the record to add or update.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "the record to add or update."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecords",
      "comment": "Returns a record iterator starting at the given address.",
      "javadoc": "Returns a record iterator starting at the given address.\n@param addr the address at which to start.\n@param forward if true, positions the iterator before the start address, otherwise after.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to start."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, positions the iterator before the start address, otherwise after."
        }
      ],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getKeys",
      "comment": "Returns an AddressKeyIterator over the given address set.",
      "javadoc": "Returns an AddressKeyIterator over the given address set.\n@param addrSetView the set of address to iterator over.\n@param forward the direction to iterate.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "addrSetView",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the set of address to iterator over."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "the direction to iterate."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.map.AddressKeyIterator",
        "type_short": "AddressKeyIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecords",
      "comment": "Returns a Record interator over the given address set.",
      "javadoc": "Returns a Record interator over the given address set.\n@param set the address set to iterator over.\n@param forward if true positions the iterator before the first address, otherwise after the\n last address.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the address set to iterator over."
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true positions the iterator before the first address, otherwise after the\n last address."
        }
      ],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "moveAddressRange",
      "comment": "Update the addresses in all records to reflect the movement of a memory block.",
      "javadoc": "Update the addresses in all records to reflect the movement of a memory block.\n@param fromAddr minimum address of the original block to be moved\n@param toAddr the new minimum address after the block move\n@param length the number of bytes in the memory block being moved\n@param monitor progress monitor\n@throws CancelledException thrown if the user cancels the operation.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "minimum address of the original block to be moved"
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the new minimum address after the block move"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the number of bytes in the memory block being moved"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "progress monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "thrown if the user cancels the operation."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "deleteAll",
      "comment": "Deletes all records in this table",
      "javadoc": "Deletes all records in this table\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    }
  ]
}
