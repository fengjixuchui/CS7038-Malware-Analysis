{
  "name": "AddressIndexPrimaryKeyIterator",
  "comment": "Long iterator over indexed addresses. The longs are primary keys returned ordered and restrained\n by the address field they contain",
  "javadoc": "Long iterator over indexed addresses. The longs are primary keys returned ordered and restrained\n by the address field they contain",
  "static": false,
  "implements": [
    "db.DBFieldIterator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "table",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.Table",
      "type_short": "Table",
      "constant_value": null
    },
    {
      "name": "keyRangeList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.address.KeyRange\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "it",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.DBFieldIterator",
      "type_short": "DBFieldIterator",
      "constant_value": null
    },
    {
      "name": "keyRangeIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "indexCol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Empty iterator constructor",
      "javadoc": "Empty iterator constructor",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new AddressIndexPrimaryKeyIterator.\n Memory addresses encoded as Absolute are not included.",
      "javadoc": "Constructs a new AddressIndexPrimaryKeyIterator.\n Memory addresses encoded as Absolute are not included.\n@param table the database table containing indexed addresses.\n@param indexCol the column that contains indexed addresses.\n@param addrMap the address map\n@param atStart if true, iterates forward, otherwise iterates backwards.\n@throws IOException if a database io error occurs.",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "the database table containing indexed addresses."
        },
        {
          "name": "indexCol",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column that contains indexed addresses."
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": "the address map"
        },
        {
          "name": "atStart",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, iterates forward, otherwise iterates backwards."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database io error occurs."
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new AddressIndexPrimaryKeyIterator for a range of addresses.\n Memory addresses encoded as Absolute are not included.",
      "javadoc": "Constructs a new AddressIndexPrimaryKeyIterator for a range of addresses.\n Memory addresses encoded as Absolute are not included.\n@param table the database table containing indexed addresses.\n@param indexCol the column that contains indexed addresses.\n@param addrMap the address map\n@param minAddr the first address in the range to iterate over.\n@param maxAddr the last address in the range to iterator over.\n@param atStart if true, iterates forward, otherwise iterates backwards.\n@throws IOException if a database io error occurs.",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "the database table containing indexed addresses."
        },
        {
          "name": "indexCol",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column that contains indexed addresses."
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": "the address map"
        },
        {
          "name": "minAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address in the range to iterate over."
        },
        {
          "name": "maxAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last address in the range to iterator over."
        },
        {
          "name": "atStart",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, iterates forward, otherwise iterates backwards."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database io error occurs."
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new AddressIndexPrimaryKeyIterator for a set of addresses.\n Memory addresses encoded as Absolute are not included.",
      "javadoc": "Constructs a new AddressIndexPrimaryKeyIterator for a set of addresses.\n Memory addresses encoded as Absolute are not included.\n@param table the database table containing indexed addresses.\n@param indexCol the column that contains indexed addresses.\n@param addrMap the address map\n@param set the set of addresses to iterator over.\n@param atStart if true, iterates forward, otherwise iterates backwards.\n@throws IOException if a database io error occurs.",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "the database table containing indexed addresses."
        },
        {
          "name": "indexCol",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column that contains indexed addresses."
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": "the address map"
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the set of addresses to iterator over."
        },
        {
          "name": "atStart",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, iterates forward, otherwise iterates backwards."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database io error occurs."
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new AddressIndexPrimaryKeyIterator for a set of addresses.",
      "javadoc": "Constructs a new AddressIndexPrimaryKeyIterator for a set of addresses.\n@param table the database table containing indexed addresses.\n@param indexCol the column that contains indexed addresses.\n@param addrMap the address map\n@param absolute if true, only absolute memory address encodings are considered, otherwise \n only standard/relocatable address encodings are considered.\n@param set the set of addresses to iterator over or null for all addresses.\n@param atStart if true, iterates forward, otherwise iterates backwards.\n@throws IOException if a database io error occurs.",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "the database table containing indexed addresses."
        },
        {
          "name": "indexCol",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column that contains indexed addresses."
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": "the address map"
        },
        {
          "name": "absolute",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, only absolute memory address encodings are considered, otherwise \n only standard/relocatable address encodings are considered."
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the set of addresses to iterator over or null for all addresses."
        },
        {
          "name": "atStart",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, iterates forward, otherwise iterates backwards."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database io error occurs."
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new AddressIndexPrimaryKeyIterator starting at a given address.\n Memory addresses encoded as Absolute are not included.",
      "javadoc": "Constructs a new AddressIndexPrimaryKeyIterator starting at a given address.\n Memory addresses encoded as Absolute are not included.\n@param table the database table containing indexed addresses.\n@param indexCol the column that contains indexed addresses.\n@param addrMap the address map\n@param start the starting address for the iterator.\n@param before if true, positions the iterator before start, otherwise positions it after start.\n@throws IOException if a database io error occurs.",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "the database table containing indexed addresses."
        },
        {
          "name": "indexCol",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column that contains indexed addresses."
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": "the address map"
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the starting address for the iterator."
        },
        {
          "name": "before",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, positions the iterator before start, otherwise positions it after start."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database io error occurs."
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new AddressIndexPrimaryKeyIterator starting at a given address",
      "javadoc": "Constructs a new AddressIndexPrimaryKeyIterator starting at a given address\n@param table the database table containing indexed addresses.\n@param indexCol the column that contains indexed addresses.\n@param addrMap the address map\n@param absolute if true, only absolute memory address encodings are considered, otherwise \n only standard/relocatable address encodings are considered.\n@param start the starting address for the iterator.\n@param before if true, positions the iterator before start, otherwise positions it after start.\n@throws IOException if a database io error occurs.",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "the database table containing indexed addresses."
        },
        {
          "name": "indexCol",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column that contains indexed addresses."
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": "the address map"
        },
        {
          "name": "absolute",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, only absolute memory address encodings are considered, otherwise \n only standard/relocatable address encodings are considered."
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the starting address for the iterator."
        },
        {
          "name": "before",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, positions the iterator before start, otherwise positions it after start."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database io error occurs."
        }
      ]
    },
    {
      "name": "hasNext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "hasPrevious",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "next",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.Field",
        "type_short": "Field",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "previous",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.Field",
        "type_short": "Field",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "delete",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
