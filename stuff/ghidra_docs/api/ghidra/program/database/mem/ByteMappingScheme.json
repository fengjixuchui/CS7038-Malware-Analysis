{
  "name": "ByteMappingScheme",
  "comment": "ByteMappingScheme facilitate byte mapping/decimation scheme for a mapped sub-block to\n an underlying source memory region.",
  "javadoc": "\u003ccode\u003eByteMappingScheme\u003c/code\u003e facilitate byte mapping/decimation scheme for a mapped sub-block to\n an underlying source memory region.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "mappedByteCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "nonMappedByteCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "mappedSourceByteCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct byte mapping scheme from an encoded mappingScheme value.",
      "javadoc": "Construct byte mapping scheme from an encoded mappingScheme value.\n@param encodedMappingScheme encoded mapping scheme value or 0 for a 1:1 default mapping.\n A zero value is accepted to ensure backward compatibility with pre-existing byte-mapped blocks\n where a 1:1 mapping was employed.\n@throws IllegalArgumentException if packed mapping scheme produces an invalid mapping ratio",
      "static": false,
      "params": [
        {
          "name": "encodedMappingScheme",
          "type_long": "int",
          "type_short": "int",
          "comment": "encoded mapping scheme value or 0 for a 1:1 default mapping.\n A zero value is accepted to ensure backward compatibility with pre-existing byte-mapped blocks\n where a 1:1 mapping was employed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if packed mapping scheme produces an invalid mapping ratio"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct byte mapping scheme specified as a ratio of mapped bytes to source bytes.",
      "javadoc": "Construct byte mapping scheme specified as a ratio of mapped bytes to source bytes.\n@param mappedByteCount number of mapped bytes per mappedSourcebyteCount (1..127).  This \n value must be less-than or equal to schemeSrcByteCount.\n@param mappedSourceByteCount number of source bytes for mapping ratio (1..127)\n@throws IllegalArgumentException if invalid mapping scheme specified",
      "static": false,
      "params": [
        {
          "name": "mappedByteCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of mapped bytes per mappedSourcebyteCount (1..127).  This \n value must be less-than or equal to schemeSrcByteCount."
        },
        {
          "name": "mappedSourceByteCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of source bytes for mapping ratio (1..127)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEncodedMappingScheme",
      "comment": "Get byte mapping scheme as single 14-bit packed value for storage and reconstruction use.",
      "javadoc": "Get byte mapping scheme as single 14-bit packed value for storage and reconstruction use.\n@return mapping scheme as single 14-bit integer value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "mapping scheme as single 14-bit integer value"
      },
      "throws": []
    },
    {
      "name": "isOneToOneMapping",
      "comment": "Determine this scheme corresponds to a 1:1 byte mapping",
      "javadoc": "Determine this scheme corresponds to a 1:1 byte mapping\n@return true if 1:1 mapping else false",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if 1:1 mapping else false"
      },
      "throws": []
    },
    {
      "name": "getMappedByteCount",
      "comment": "Get the mapped-byte-count (left-hand value in mapping ratio)",
      "javadoc": "Get the mapped-byte-count (left-hand value in mapping ratio)\n@return mapped-byte-count",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "mapped-byte-count"
      },
      "throws": []
    },
    {
      "name": "getMappedSourceByteCount",
      "comment": "Get the mapped-source-byte-count (right-hand value in mapping ratio)",
      "javadoc": "Get the mapped-source-byte-count (right-hand value in mapping ratio)\n@return mapped-source-byte-count",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "mapped-source-byte-count"
      },
      "throws": []
    },
    {
      "name": "getMappedSourceAddress",
      "comment": "Calculate the mapped source address for a specified offset with the mapped sub-block.",
      "javadoc": "Calculate the mapped source address for a specified offset with the mapped sub-block.\n@param mappedSourceBaseAddress mapped source base address for sub-block\n@param offsetInSubBlock byte offset within sub-block to be mapped into source\n@return mapped source address\n@throws AddressOverflowException if offset in sub-block produces a wrap condition in\n the mapped source address space.",
      "static": false,
      "params": [
        {
          "name": "mappedSourceBaseAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "mapped source base address for sub-block"
        },
        {
          "name": "offsetInSubBlock",
          "type_long": "long",
          "type_short": "long",
          "comment": "byte offset within sub-block to be mapped into source"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "mapped source address"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if offset in sub-block produces a wrap condition in\n the mapped source address space."
        }
      ]
    },
    {
      "name": "getMappedAddress",
      "comment": "Calculate the address within a mapped block for a specified mapped source offset.\n If the specified mappedSourceOffset corresponds to a non-mapped (i.e., skipped) byte\n the address returned will correspond to the last mapped byte.  Care must be used\n when using this method.",
      "javadoc": "Calculate the address within a mapped block for a specified mapped source offset.\n If the specified mappedSourceOffset corresponds to a non-mapped (i.e., skipped) byte\n the address returned will correspond to the last mapped byte.  Care must be used\n when using this method.\n@param mappedBlock mapped block\n@param mappedSourceOffset byte offset within mapped source relative to mapped base source address.\n@param skipBack controls return address when mappedSourceOffset corresponds to a non-mapped/skipped byte.\n If true the returned address will correspond to the previous mapped address, if false the next mapped\n address will be returned.\n@return mapped address within block or null if skipBack is false and unable to map within block limits\n@throws AddressOverflowException thrown for 1:1 mapping when mappedSourceOffset exceeds length of mappedBlock",
      "static": false,
      "params": [
        {
          "name": "mappedBlock",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": "mapped block"
        },
        {
          "name": "mappedSourceOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "byte offset within mapped source relative to mapped base source address."
        },
        {
          "name": "skipBack",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "controls return address when mappedSourceOffset corresponds to a non-mapped/skipped byte.\n If true the returned address will correspond to the previous mapped address, if false the next mapped\n address will be returned."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "mapped address within block or null if skipBack is false and unable to map within block limits"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "thrown for 1:1 mapping when mappedSourceOffset exceeds length of mappedBlock"
        }
      ]
    },
    {
      "name": "getBytes",
      "comment": "Read bytes into an array from memory utilizing this mapping scheme.",
      "javadoc": "Read bytes into an array from memory utilizing this mapping scheme.\n@param memory program memory\n@param mappedSourceBaseAddress base source memory address for byte-mapped subblock\n@param offsetInSubBlock byte offset from start of subblock where reading should begin\n@param b byte array to be filled\n@param off offset within byte array b where filling should start\n@param len number of bytes to be read\n@return actual number of bytes read\n@throws MemoryAccessException if read of uninitialized or non-existing memory occurs\n@throws AddressOverflowException if address computation error occurs",
      "static": false,
      "params": [
        {
          "name": "memory",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": "program memory"
        },
        {
          "name": "mappedSourceBaseAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "base source memory address for byte-mapped subblock"
        },
        {
          "name": "offsetInSubBlock",
          "type_long": "long",
          "type_short": "long",
          "comment": "byte offset from start of subblock where reading should begin"
        },
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array to be filled"
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset within byte array b where filling should start"
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes to be read"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "actual number of bytes read"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if read of uninitialized or non-existing memory occurs"
        },
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if address computation error occurs"
        }
      ]
    },
    {
      "name": "setBytes",
      "comment": "Write an array of bytes to memory utilizing this mapping scheme.",
      "javadoc": "Write an array of bytes to memory utilizing this mapping scheme.\n@param memory program memory\n@param mappedSourceBaseAddress base source memory address for byte-mapped subblock\n@param offsetInSubBlock byte offset from start of subblock where writing should begin\n@param b an array to get bytes from\n@param off start source index within byte array b where bytes should be read\n@param len number of bytes to be written\n@throws MemoryAccessException if write of uninitialized or non-existing memory occurs\n@throws AddressOverflowException if address computation error occurs",
      "static": false,
      "params": [
        {
          "name": "memory",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": "program memory"
        },
        {
          "name": "mappedSourceBaseAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "base source memory address for byte-mapped subblock"
        },
        {
          "name": "offsetInSubBlock",
          "type_long": "long",
          "type_short": "long",
          "comment": "byte offset from start of subblock where writing should begin"
        },
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "an array to get bytes from"
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": "start source index within byte array b where bytes should be read"
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes to be written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if write of uninitialized or non-existing memory occurs"
        },
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if address computation error occurs"
        }
      ]
    },
    {
      "name": "validateMappingScheme",
      "comment": "Validate mapping scheme.  This scheme is specified as a ratio of mapped bytes to source bytes.",
      "javadoc": "Validate mapping scheme.  This scheme is specified as a ratio of mapped bytes to source bytes.\n@param schemeDestByteCount number of mapped bytes per mappedSourcebyteCount (1..127).  This \n value must be less-than or equal to schemeSrcByteCount.\n@param schemeSrcByteCount number of source bytes for mapping ratio (1..127)\n@throws IllegalArgumentException if invalid mapping scheme specified",
      "static": true,
      "params": [
        {
          "name": "schemeDestByteCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of mapped bytes per mappedSourcebyteCount (1..127).  This \n value must be less-than or equal to schemeSrcByteCount."
        },
        {
          "name": "schemeSrcByteCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of source bytes for mapping ratio (1..127)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEncodedMappingScheme",
      "comment": "Get encoded mapping scheme as a single value for storage purposes.  This scheme value \n identifies the ratio of mapped bytes to source bytes.  Value is encoded as two 7-bit \n values corresponding to the destination and source byte counts.",
      "javadoc": "Get encoded mapping scheme as a single value for storage purposes.  This scheme value \n identifies the ratio of mapped bytes to source bytes.  Value is encoded as two 7-bit \n values corresponding to the destination and source byte counts.\n@param schemeDestByteCount number of mapped bytes per mappedSourcebyteCount (1..127).  This \n value must be less-than or equal to schemeSrcByteCount.\n@param schemeSrcByteCount number of source bytes for mapping ratio (1..127)\n@return mapping scheme value\n@throws IllegalArgumentException if invalid mapping scheme specified",
      "static": true,
      "params": [
        {
          "name": "schemeDestByteCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of mapped bytes per mappedSourcebyteCount (1..127).  This \n value must be less-than or equal to schemeSrcByteCount."
        },
        {
          "name": "schemeSrcByteCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of source bytes for mapping ratio (1..127)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "mapping scheme value"
      },
      "throws": []
    },
    {
      "name": "getMappedByteCount",
      "comment": "Extract the mapping scheme mapped-byte-count from a mappingScheme value.",
      "javadoc": "Extract the mapping scheme mapped-byte-count from a mappingScheme value.\n@param mappingScheme mapping scheme\n@return mapped-byte-count (aka schemeDestByteCount)",
      "static": true,
      "params": [
        {
          "name": "mappingScheme",
          "type_long": "int",
          "type_short": "int",
          "comment": "mapping scheme"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "mapped-byte-count (aka schemeDestByteCount)"
      },
      "throws": []
    },
    {
      "name": "getMappedSourceByteCount",
      "comment": "Extract the mapping ratio mapped-source-byte-count from a mappingScheme value.",
      "javadoc": "Extract the mapping ratio mapped-source-byte-count from a mappingScheme value.\n@param mappingScheme mapping scheme\n@return mapped-source-byte-count (aka schemeSrcByteCount)",
      "static": true,
      "params": [
        {
          "name": "mappingScheme",
          "type_long": "int",
          "type_short": "int",
          "comment": "mapping scheme"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "mapped-source-byte-count (aka schemeSrcByteCount)"
      },
      "throws": []
    }
  ]
}
