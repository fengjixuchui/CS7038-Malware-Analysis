{
  "name": "MemoryMapDBAdapter",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "CURRENT_VERSION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "BLOCK_SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "SUB_BLOCK_SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "NAME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "COMMENTS_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "SOURCE_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "PERMISSIONS_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "START_ADDR_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "LENGTH_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "SEGMENT_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "SUB_PARENT_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "SUB_TYPE_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "SUB_LENGTH_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "SUB_START_OFFSET_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "SUB_INT_DATA1_COL",
      "comment": "Subblock record int data1 usage:\n \n BufferSubMemoryBlock - data buffer ID\n FileBytesSubMemoryBlock - file bytes layered data buffer ID\n ByteMappedSubMemoryBlock - encoded byte mapping scheme\n BitMappedSubMemoryBlock - (not used) 0\n UninitializedSubMemoryBlock - (not used) 0\n ",
      "javadoc": "Subblock record int data1 usage:\n \u003cul\u003e\n \u003cli\u003e{@link BufferSubMemoryBlock} - data buffer ID\u003c/li\u003e\n \u003cli\u003e{@link FileBytesSubMemoryBlock} - file bytes layered data buffer ID\u003c/li\u003e\n \u003cli\u003e{@link ByteMappedSubMemoryBlock} - encoded byte mapping scheme\u003c/li\u003e\n \u003cli\u003e{@link BitMappedSubMemoryBlock} - (not used) 0\u003c/li\u003e\n \u003cli\u003e{@link UninitializedSubMemoryBlock} - (not used) 0\u003c/li\u003e\n \u003c/ul\u003e",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "SUB_LONG_DATA2_COL",
      "comment": "Subblock record long data2 usage:\n \n BufferSubMemoryBlock - (not used) 0\n FileBytesSubMemoryBlock - starting byte offset within file bytes buffer\n ByteMappedSubMemoryBlock - encoded mapped source address\n BitMappedSubMemoryBlock - encoded mapped source address\n UninitializedSubMemoryBlock - (not used) 0\n ",
      "javadoc": "Subblock record long data2 usage:\n \u003cul\u003e\n \u003cli\u003e{@link BufferSubMemoryBlock} - (not used) 0\u003c/li\u003e\n \u003cli\u003e{@link FileBytesSubMemoryBlock} - starting byte offset within file bytes buffer\u003c/li\u003e\n \u003cli\u003e{@link ByteMappedSubMemoryBlock} - encoded mapped source address\u003c/li\u003e\n \u003cli\u003e{@link BitMappedSubMemoryBlock} - encoded mapped source address\u003c/li\u003e\n \u003cli\u003e{@link UninitializedSubMemoryBlock} - (not used) 0\u003c/li\u003e\n \u003c/ul\u003e",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "SUB_TYPE_BIT_MAPPED",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "0"
    },
    {
      "name": "SUB_TYPE_BYTE_MAPPED",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "1"
    },
    {
      "name": "SUB_TYPE_BUFFER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "2"
    },
    {
      "name": "SUB_TYPE_UNITIALIZED",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "3"
    },
    {
      "name": "SUB_TYPE_FILE_BYTES",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "4"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAdapter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "memMap",
          "type_long": "ghidra.program.database.mem.MemoryMapDB",
          "type_short": "MemoryMapDB",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.mem.MemoryMapDBAdapter",
        "type_short": "MemoryMapDBAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findReadOnlyAdapter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "memMap",
          "type_long": "ghidra.program.database.mem.MemoryMapDB",
          "type_short": "MemoryMapDB",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.mem.MemoryMapDBAdapter",
        "type_short": "MemoryMapDBAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "upgrade",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "oldAdapter",
          "type_long": "ghidra.program.database.mem.MemoryMapDBAdapter",
          "type_short": "MemoryMapDBAdapter",
          "comment": ""
        },
        {
          "name": "memMap",
          "type_long": "ghidra.program.database.mem.MemoryMapDB",
          "type_short": "MemoryMapDB",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.mem.MemoryMapDBAdapter",
        "type_short": "MemoryMapDBAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBuffer",
      "comment": "Returns a DBBuffer object for the given database buffer id",
      "javadoc": "Returns a DBBuffer object for the given database buffer id\n@param bufferID the id of the first buffer in the DBBuffer.\n@return the DBBuffer for the given id.\n@throws IOException if a database IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "bufferID",
          "type_long": "int",
          "type_short": "int",
          "comment": "the id of the first buffer in the DBBuffer."
        }
      ],
      "return": {
        "type_long": "db.DBBuffer",
        "type_short": "DBBuffer",
        "comment": "the DBBuffer for the given id."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database IO error occurs."
        }
      ]
    },
    {
      "name": "deleteTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "refreshMemory",
      "comment": "",
      "javadoc": "@throws IOException if a database IO error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database IO error occurs."
        }
      ]
    },
    {
      "name": "getMemoryBlocks",
      "comment": "Returns an array of memory blocks sorted on start Address",
      "javadoc": "Returns an array of memory blocks sorted on start Address\n@return all the memory blocks",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.database.mem.MemoryBlockDB\u003e",
        "type_short": "List",
        "comment": "all the memory blocks"
      },
      "throws": []
    },
    {
      "name": "createInitializedBlock",
      "comment": "Creates a new initialized block object using data provided from an \n input stream.  Once the input stream has been exhausted, the remaining \n block data will be initialized to zero (0x00).",
      "javadoc": "Creates a new initialized block object using data provided from an \n input stream.  Once the input stream has been exhausted, the remaining \n block data will be initialized to zero (0x00).\n@param name the name of the block\n@param startAddr the start address of the block.\n@param is data source or null for zero initialization\n@param length size of block\n@param permissions the new block permissions\n@return new memory block\n@throws IOException\n@throws AddressOverflowException if block length is too large for the underlying space",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the block"
        },
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the block."
        },
        {
          "name": "is",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "data source or null for zero initialization"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "size of block"
        },
        {
          "name": "permissions",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new block permissions"
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.mem.MemoryBlockDB",
        "type_short": "MemoryBlockDB",
        "comment": "new memory block"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if block length is too large for the underlying space"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createInitializedBlock",
      "comment": "Creates a new initialized block object",
      "javadoc": "Creates a new initialized block object\n@param name the name of the block\n@param startAddr the start address of the block.\n@param buf the DBBuffer used to hold the bytes for the block.\n@param permissions the new block permissions\n@return new memory block\n@throws IOException if a database IO error occurs.\n@throws AddressOverflowException if block length is too large for the underlying space",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the block"
        },
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the block."
        },
        {
          "name": "buf",
          "type_long": "db.DBBuffer",
          "type_short": "DBBuffer",
          "comment": "the DBBuffer used to hold the bytes for the block."
        },
        {
          "name": "permissions",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new block permissions"
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.mem.MemoryBlockDB",
        "type_short": "MemoryBlockDB",
        "comment": "new memory block"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if block length is too large for the underlying space"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database IO error occurs."
        }
      ]
    },
    {
      "name": "createBlock",
      "comment": "Creates a new memory block that doesn\u0027t have associated bytes.",
      "javadoc": "Creates a new memory block that doesn\u0027t have associated bytes.\n@param blockType the type of block to create.\n@param name the name of the block.\n@param startAddr the start address of the block\n@param length the size of the block\n@param mappedAddress the starting byte source address at which to map \n the block. (used for bit/byte-mapped blocks only)\n@param initializeBytes if true, creates a database buffer for storing the \n bytes in the block (applies to initialized default blocks only)\n@param permissions the new block permissions\n@param encodedMappingScheme byte mapping scheme (used by byte-mapped blocks only)\n@return new memory block\n@throws IOException if a database IO error occurs.\n@throws AddressOverflowException if block length is too large for the underlying space",
      "static": false,
      "params": [
        {
          "name": "blockType",
          "type_long": "ghidra.program.model.mem.MemoryBlockType",
          "type_short": "MemoryBlockType",
          "comment": "the type of block to create."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the block."
        },
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the block"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the size of the block"
        },
        {
          "name": "mappedAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the starting byte source address at which to map \n the block. (used for bit/byte-mapped blocks only)"
        },
        {
          "name": "initializeBytes",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, creates a database buffer for storing the \n bytes in the block (applies to initialized default blocks only)"
        },
        {
          "name": "permissions",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new block permissions"
        },
        {
          "name": "encodedMappingScheme",
          "type_long": "int",
          "type_short": "int",
          "comment": "byte mapping scheme (used by byte-mapped blocks only)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.mem.MemoryBlockDB",
        "type_short": "MemoryBlockDB",
        "comment": "new memory block"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if block length is too large for the underlying space"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database IO error occurs."
        }
      ]
    },
    {
      "name": "deleteMemoryBlock",
      "comment": "Deletes the given memory block.",
      "javadoc": "Deletes the given memory block.\n@param key the key for the memory block record\n@throws IOException if a database IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": "the key for the memory block record"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database IO error occurs."
        }
      ]
    },
    {
      "name": "updateBlockRecord",
      "comment": "Updates the memory block record.",
      "javadoc": "Updates the memory block record.\n@param record the record to update.\n@throws IOException if a database IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "the record to update."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database IO error occurs."
        }
      ]
    },
    {
      "name": "createBuffer",
      "comment": "Creates a new DBuffer object with the given length and initial value.",
      "javadoc": "Creates a new DBuffer object with the given length and initial value.\n@param length block/chunk buffer length (length limited by ChainedBuffer implementation)\n@param initialValue fill value\n@return a new DBuffer object with the given length and initial value.\n@throws IOException if a database IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "block/chunk buffer length (length limited by ChainedBuffer implementation)"
        },
        {
          "name": "initialValue",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "fill value"
        }
      ],
      "return": {
        "type_long": "db.DBBuffer",
        "type_short": "DBBuffer",
        "comment": "a new DBuffer object with the given length and initial value."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database IO error occurs."
        }
      ]
    },
    {
      "name": "getMemoryMap",
      "comment": "Returns the MemoryMap that owns this adapter.",
      "javadoc": "Returns the MemoryMap that owns this adapter.\n@return the MemoryMap that owns this adapter.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.database.mem.MemoryMapDB",
        "type_short": "MemoryMapDB",
        "comment": "the MemoryMap that owns this adapter."
      },
      "throws": []
    },
    {
      "name": "deleteSubBlock",
      "comment": "Deletes the sub block record for the given key.",
      "javadoc": "Deletes the sub block record for the given key.\n@param key the record id of the sub block record to delete.\n@throws IOException if a database error occurs.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": "the record id of the sub block record to delete."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database error occurs."
        }
      ]
    },
    {
      "name": "updateSubBlockRecord",
      "comment": "Updates the sub memory block record.",
      "javadoc": "Updates the sub memory block record.\n@param record the record to update.\n@throws IOException if a database IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "the record to update."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database IO error occurs."
        }
      ]
    },
    {
      "name": "createSubBlockRecord",
      "comment": "Creates a record for a new created sub block",
      "javadoc": "Creates a record for a new created sub block\n@param memBlockId the id of the memory block that contains this sub block\n@param startingOffset the starting offset relative to the containing memory block where this\n sub block starts\n@param length the length of this sub block\n@param subType the type of the subBlock\n@param data1 subblock implementation specific integer data\n@param data2 subblock implementation specific long data\n@return the newly created record.\n@throws IOException if a database error occurs",
      "static": false,
      "params": [
        {
          "name": "memBlockId",
          "type_long": "long",
          "type_short": "long",
          "comment": "the id of the memory block that contains this sub block"
        },
        {
          "name": "startingOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "the starting offset relative to the containing memory block where this\n sub block starts"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the length of this sub block"
        },
        {
          "name": "subType",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "the type of the subBlock"
        },
        {
          "name": "data1",
          "type_long": "int",
          "type_short": "int",
          "comment": "subblock implementation specific integer data"
        },
        {
          "name": "data2",
          "type_long": "long",
          "type_short": "long",
          "comment": "subblock implementation specific long data"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "the newly created record."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database error occurs"
        }
      ]
    },
    {
      "name": "createBlock",
      "comment": "Creates a new memory block.",
      "javadoc": "Creates a new memory block.\n@param name the name of the block\n@param startAddress the start address of the block\n@param length the length of the block\n@param permissions the permissions for the block\n@param splitBlocks the list of subBlock objects that make up this block\n@return the new MemoryBlock\n@throws IOException if a database error occurs",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the block"
        },
        {
          "name": "startAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the block"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the length of the block"
        },
        {
          "name": "permissions",
          "type_long": "int",
          "type_short": "int",
          "comment": "the permissions for the block"
        },
        {
          "name": "splitBlocks",
          "type_long": "java.util.List\u003cghidra.program.database.mem.SubMemoryBlock\u003e",
          "type_short": "List",
          "comment": "the list of subBlock objects that make up this block"
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.mem.MemoryBlockDB",
        "type_short": "MemoryBlockDB",
        "comment": "the new MemoryBlock"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database error occurs"
        }
      ]
    },
    {
      "name": "createFileBytesBlock",
      "comment": "Creates a new memory block using a FileBytes",
      "javadoc": "Creates a new memory block using a FileBytes\n@param name the name of the block\n@param startAddress the start address of the block\n@param length the length of the block\n@param fileBytes the {@link FileBytes} object that provides the bytes for this block\n@param offset the offset into the {@link FileBytes} object\n@param permissions the permissions for the block\n@return the new MemoryBlock\n@throws IOException if a database error occurs\n@throws AddressOverflowException if block length is too large for the underlying space",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the block"
        },
        {
          "name": "startAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the block"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the length of the block"
        },
        {
          "name": "fileBytes",
          "type_long": "ghidra.program.database.mem.FileBytes",
          "type_short": "FileBytes",
          "comment": "the FileBytes object that provides the bytes for this block"
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "the offset into the FileBytes object"
        },
        {
          "name": "permissions",
          "type_long": "int",
          "type_short": "int",
          "comment": "the permissions for the block"
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.mem.MemoryBlockDB",
        "type_short": "MemoryBlockDB",
        "comment": "the new MemoryBlock"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database error occurs"
        },
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if block length is too large for the underlying space"
        }
      ]
    }
  ]
}
