{
  "name": "TreeManager",
  "comment": "Manage the set of trees in the program.",
  "javadoc": "Manage the set of trees in the program.",
  "static": false,
  "implements": [
    "ghidra.program.database.ManagerDB"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DEFAULT_TREE_NAME",
      "comment": "The name of the default tree that is created when a program is created.",
      "javadoc": "The name of the default tree that is created when a program is created.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Program Tree\""
    },
    {
      "name": "addrMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.map.AddressMap",
      "type_short": "AddressMap",
      "constant_value": null
    },
    {
      "name": "treeMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.program.database.module.ModuleManager\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "adapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.module.TreeDBAdapter",
      "type_short": "TreeDBAdapter",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.ProgramDB",
      "type_short": "ProgramDB",
      "constant_value": null
    },
    {
      "name": "handle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.DBHandle",
      "type_short": "DBHandle",
      "constant_value": null
    },
    {
      "name": "errHandler",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.util.ErrorHandler",
      "type_short": "ErrorHandler",
      "constant_value": null
    },
    {
      "name": "openMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "lock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.Lock",
      "type_short": "Lock",
      "constant_value": null
    },
    {
      "name": "TREE_TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Trees\""
    },
    {
      "name": "TREE_NAME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "MODIFICATION_NUM_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "MODULE_TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Module Table\""
    },
    {
      "name": "MODULE_NAME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "MODULE_COMMENTS_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "FRAGMENT_TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Fragment Table\""
    },
    {
      "name": "FRAGMENT_NAME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "FRAGMENT_COMMENTS_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "PARENT_CHILD_TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Parent/Child Relationships\""
    },
    {
      "name": "PARENT_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "CHILD_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "ORDER_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "FRAGMENT_ADDRESS_TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Fragment Addresses\""
    },
    {
      "name": "TREE_SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "MODULE_SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "FRAGMENT_SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "PARENT_CHILD_SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createTreeSchema",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "db.Schema",
        "type_short": "Schema",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createModuleSchema",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "db.Schema",
        "type_short": "Schema",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createFragmentSchema",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "db.Schema",
        "type_short": "Schema",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createParentChildSchema",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "db.Schema",
        "type_short": "Schema",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new TreeManager.",
      "javadoc": "Construct a new TreeManager.\n@param handle database handle\n@param errHandler error handler\n@param addrMap map to convert addresses to longs and longs to addresses\n@param openMode the open mode for the program.\n@param lock the program synchronization lock\n@param monitor Task monitor for upgrading\n@throws IOException if a database io error occurs.\n@throws VersionException if the database version is different from the expected version",
      "static": false,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "database handle"
        },
        {
          "name": "errHandler",
          "type_long": "db.util.ErrorHandler",
          "type_short": "ErrorHandler",
          "comment": "error handler"
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": "map to convert addresses to longs and longs to addresses"
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": "the open mode for the program."
        },
        {
          "name": "lock",
          "type_long": "ghidra.util.Lock",
          "type_short": "Lock",
          "comment": "the program synchronization lock"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "Task monitor for upgrading"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a database io error occurs."
        },
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if the database version is different from the expected version"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setProgram",
      "comment": "Set the program.",
      "javadoc": "Set the program.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.database.ProgramDB",
          "type_short": "ProgramDB",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "programReady",
      "comment": "",
      "javadoc": "@see ghidra.program.database.ManagerDB#programReady(int, int, ghidra.util.task.TaskMonitor)",
      "static": false,
      "params": [
        {
          "name": "openMode1",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "currentRevision",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addressUpgrade",
      "comment": "Upgrade the address maps associated with each program tree.",
      "javadoc": "Upgrade the address maps associated with each program tree.\n@param monitor\n@throws CancelledException\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "imageBaseChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "commit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createRootModule",
      "comment": "Create a new tree with given name.",
      "javadoc": "Create a new tree with given name.\n@param treeName name of the tree (not the root module)\n@return root module for the new tree\n@throws DuplicateNameException if there is already tree named\n treeName",
      "static": false,
      "params": [
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the tree (not the root module)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramModule",
        "type_short": "ProgramModule",
        "comment": "root module for the new tree"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if there is already tree named\n treeName"
        }
      ]
    },
    {
      "name": "getRootModule",
      "comment": "Get the root module of the tree with the given name.",
      "javadoc": "Get the root module of the tree with the given name.\n@return root module, or null if there is no tree with the\n given name",
      "static": false,
      "params": [
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramModule",
        "type_short": "ProgramModule",
        "comment": "root module, or null if there is no tree with the\n given name"
      },
      "throws": []
    },
    {
      "name": "getDefaultRootModule",
      "comment": "Returns the root module for the default program tree. The default tree is the oldest tree.",
      "javadoc": "Returns the root module for the default program tree. The default tree is the oldest tree.\n@return the root module for the default program tree. The default tree is the oldest tree.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramModule",
        "type_short": "ProgramModule",
        "comment": "the root module for the default program tree. The default tree is the oldest tree."
      },
      "throws": []
    },
    {
      "name": "getTreeNames",
      "comment": "Get the names of all the trees in the program.",
      "javadoc": "Get the names of all the trees in the program.\n@return sorted array of tree names",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "sorted array of tree names"
      },
      "throws": []
    },
    {
      "name": "renameTree",
      "comment": "Rename the tree to the new name. This method has no effect on the\n name of the root module.",
      "javadoc": "Rename the tree to the new name. This method has no effect on the\n name of the root module.\n@param oldName old name of root module\n@param newName new name for root module\n@throws DuplicateNameException if newName exists as the name\n for another root",
      "static": false,
      "params": [
        {
          "name": "oldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "old name of root module"
        },
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new name for root module"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if newName exists as the name\n for another root"
        }
      ]
    },
    {
      "name": "removeTree",
      "comment": "Remove the tree with the given name.",
      "javadoc": "Remove the tree with the given name.\n@return true if the tree was removed",
      "static": false,
      "params": [
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the tree was removed"
      },
      "throws": []
    },
    {
      "name": "getModule",
      "comment": "Get the module with the given name that is in the tree identified\n by the treeName.",
      "javadoc": "Get the module with the given name that is in the tree identified\n by the treeName.\n@param treeName name of the tree\n@param name module name to look for\n@return null if there is no module with the given name in the tree",
      "static": false,
      "params": [
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the tree"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "module name to look for"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramModule",
        "type_short": "ProgramModule",
        "comment": "null if there is no module with the given name in the tree"
      },
      "throws": []
    },
    {
      "name": "getFragment",
      "comment": "Get the fragment with the given name that is in the tree identified\n by the treeName.",
      "javadoc": "Get the fragment with the given name that is in the tree identified\n by the treeName.\n@param treeName name of the tree\n@param name name of fragment to look for\n@return null if there is no fragment with the given name in the tree",
      "static": false,
      "params": [
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the tree"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of fragment to look for"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramFragment",
        "type_short": "ProgramFragment",
        "comment": "null if there is no fragment with the given name in the tree"
      },
      "throws": []
    },
    {
      "name": "getFragment",
      "comment": "Get the fragment that contains the given address within the tree\n identified by the treeName.",
      "javadoc": "Get the fragment that contains the given address within the tree\n identified by the treeName.\n@param treeName name of the tree\n@param addr address contained within some fragment\n@return fragment containing addr, or null if addr does not\n exist in memory",
      "static": false,
      "params": [
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the tree"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address contained within some fragment"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramFragment",
        "type_short": "ProgramFragment",
        "comment": "fragment containing addr, or null if addr does not\n exist in memory"
      },
      "throws": []
    },
    {
      "name": "addMemoryBlock",
      "comment": "Add a memory block with the given range.",
      "javadoc": "Add a memory block with the given range.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "range",
          "type_long": "ghidra.program.model.address.AddressRange",
          "type_short": "AddressRange",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteAddressRange",
      "comment": "Remove a memory block with the given range",
      "javadoc": "Remove a memory block with the given range\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "moveAddressRange",
      "comment": "Move a memory block to new place.",
      "javadoc": "Move a memory block to new place.\n@param fromAddr old place\n@param toAddr new place\n@param length the length of the address range to move\n@param monitor the current task monitor\n@throws AddressOverflowException if an address overflow occurs.\n@throws CancelledException if the task is cancelled.",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "old place"
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "new place"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the length of the address range to move"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the current task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if an address overflow occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the task is cancelled."
        }
      ]
    },
    {
      "name": "getAddressMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.database.map.AddressMap",
        "type_short": "AddressMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDatabaseHandle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.DBHandle",
        "type_short": "DBHandle",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTreeName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "treeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getErrorHandler",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.util.ErrorHandler",
        "type_short": "ErrorHandler",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getModuleTableName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "treeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFragmentTableName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "treeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParentChildTableName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "treeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFragAddressTableName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "treeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addMemoryBlocks",
      "comment": "Method addMemoryBlocks; called when a new module manager is\n being created.",
      "javadoc": "Method addMemoryBlocks; called when a new module manager is\n being created.",
      "static": false,
      "params": [
        {
          "name": "mgr",
          "type_long": "ghidra.program.database.module.ModuleManager",
          "type_short": "ModuleManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "populateTreeMap",
      "comment": "Populate the map with existing tree views.",
      "javadoc": "Populate the map with existing tree views.",
      "static": false,
      "params": [
        {
          "name": "ignoreModificationNumber",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findAdapters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dbHandle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createDBTables",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dbHandle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "invalidateCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "all",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setProgramName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "oldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateTreeRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateTreeRecord",
      "comment": "Update the record in the database.",
      "javadoc": "Update the record in the database.\n@param record record to update in the database\n@param updateModificationNumber true means to update the\n modification number",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "record to update in the database"
        },
        {
          "name": "updateModificationNumber",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to update the\n modification number"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTreeRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "treeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createDefaultTree",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRootModule",
      "comment": "Get the root module for the tree that has the given ID.",
      "javadoc": "Get the root module for the tree that has the given ID.\n@param treeID ID of the tree\n@return root module",
      "static": false,
      "params": [
        {
          "name": "treeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "ID of the tree"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramModule",
        "type_short": "ProgramModule",
        "comment": "root module"
      },
      "throws": []
    },
    {
      "name": "getLock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.Lock",
        "type_short": "Lock",
        "comment": ""
      },
      "throws": []
    }
  ]
}
