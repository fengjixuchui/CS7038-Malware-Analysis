{
  "name": "GroupDBAdapter",
  "comment": "Adapter to access the module, fragment, and parent/child database tables.",
  "javadoc": "Adapter to access the module, fragment, and parent/child database tables.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "createRootModule",
      "comment": "Create the root module for a tree; the module ID for the root is 0.",
      "javadoc": "Create the root module for a tree; the module ID for the root is 0.\n@param name the name of the program.\n@return record for the root module; should never be null\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the program."
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "record for the root module; should never be null"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "createModule",
      "comment": "Create a new module.",
      "javadoc": "Create a new module.\n@param parentModuleID ID of parent module\n@param name module name\n@return record for the module\n@throws IOException if there was a problem accessing the database\n@throws DuplicateNameException if a module or fragment already exists\n having the given name",
      "static": false,
      "params": [
        {
          "name": "parentModuleID",
          "type_long": "long",
          "type_short": "long",
          "comment": "ID of parent module"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "module name"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "record for the module"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if a module or fragment already exists\n having the given name"
        }
      ]
    },
    {
      "name": "getModuleRecord",
      "comment": "Get the record for the module with the given key.",
      "javadoc": "Get the record for the module with the given key.\n@param module ID\n@return record for the module; null if the record was not found\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "moduleID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "record for the module; null if the record was not found"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getModuleRecord",
      "comment": "Get the module record with the given name.",
      "javadoc": "Get the module record with the given name.\n@param name module name\n@return module record; null if no module exists with the given name\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "module name"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "module record; null if no module exists with the given name"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "updateModuleRecord",
      "comment": "Update the module table with the given record.",
      "javadoc": "Update the module table with the given record.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "createFragment",
      "comment": "Create a new fragment",
      "javadoc": "Create a new fragment\n@param parentModuleID ID of parent module\n@param name fragment name\n@return record for the fragment\n@throws IOException if there was a problem accessing the database\n@throws DuplicateNameException if a module or fragment already exists\n having the given name",
      "static": false,
      "params": [
        {
          "name": "parentModuleID",
          "type_long": "long",
          "type_short": "long",
          "comment": "ID of parent module"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "fragment name"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "record for the fragment"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if a module or fragment already exists\n having the given name"
        }
      ]
    },
    {
      "name": "getFragmentRecord",
      "comment": "Get the record for the fragment with the given key.",
      "javadoc": "Get the record for the fragment with the given key.\n@param fragID\n@return \n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "fragID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getFragmentRecord",
      "comment": "Get the fragment record with the given name.",
      "javadoc": "Get the fragment record with the given name.\n@param name fragment name\n@return fragment record; null if no fragment exists with the given\n name\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "fragment name"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "fragment record; null if no fragment exists with the given\n name"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "updateFragmentRecord",
      "comment": "Update the fragment table with the given record.",
      "javadoc": "Update the fragment table with the given record.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getParentChildRecord",
      "comment": "Get the record in the Parent/Child table.",
      "javadoc": "Get the record in the Parent/Child table.\n@param parentID module ID of the parent\n@param childID childID\n@return record; null if the record was not found\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "parentID",
          "type_long": "long",
          "type_short": "long",
          "comment": "module ID of the parent"
        },
        {
          "name": "childID",
          "type_long": "long",
          "type_short": "long",
          "comment": "childID"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "record; null if the record was not found"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getParentChildKeys",
      "comment": "Get the keys in the Parent/Child table that are indexed on the given\n indexed column and have the value of ID.",
      "javadoc": "Get the keys in the Parent/Child table that are indexed on the given\n indexed column and have the value of ID.\n@param ID value of indexed column\n@param indexedCol column that is indexed in the table to do the lookup\n@return zero-length array if no records were found\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "ID",
          "type_long": "long",
          "type_short": "long",
          "comment": "value of indexed column"
        },
        {
          "name": "indexedCol",
          "type_long": "int",
          "type_short": "int",
          "comment": "column that is indexed in the table to do the lookup"
        }
      ],
      "return": {
        "type_long": "db.Field[]",
        "type_short": "db.Field[]",
        "comment": "zero-length array if no records were found"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getParentChildRecord",
      "comment": "Get the Parent/Child record with the given key.",
      "javadoc": "Get the Parent/Child record with the given key.\n@return record or null if the record does not exist\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "record or null if the record does not exist"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "addParentChildRecord",
      "comment": "Create a new Parent/Child record.",
      "javadoc": "Create a new Parent/Child record.\n@param parentID module ID of the parent\n@param childID ID for the child\n@return record or nul if the record does not exist\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "parentID",
          "type_long": "long",
          "type_short": "long",
          "comment": "module ID of the parent"
        },
        {
          "name": "childID",
          "type_long": "long",
          "type_short": "long",
          "comment": "ID for the child"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "record or nul if the record does not exist"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "removeParentChildRecord",
      "comment": "Remove the record with the given key in the Parent/Child table.",
      "javadoc": "Remove the record with the given key in the Parent/Child table.\n@return true if the record was deleted\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the record was deleted"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "updateParentChildRecord",
      "comment": "Update the Parent/Child table with the given record.",
      "javadoc": "Update the Parent/Child table with the given record.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "removeFragmentRecord",
      "comment": "Remove the fragment record.",
      "javadoc": "Remove the fragment record.\n@param childID\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "childID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "removeModuleRecord",
      "comment": "Remove the module record.",
      "javadoc": "Remove the module record.\n@param childID\n@return true if the record was removed\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "childID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the record was removed"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    }
  ]
}
