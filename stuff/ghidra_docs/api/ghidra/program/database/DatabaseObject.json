{
  "name": "DatabaseObject",
  "comment": "Base class for an cached object in the database. Database objects have keys. They are marked as\n invalid when a database cache is cleared and can be revived on a refresh as long as they haven\u0027t\n been deleted. Instantiating an object will cause it to be added immediately to the associated\n cache.",
  "javadoc": "Base class for an cached object in the database. Database objects have keys. They are marked as\n invalid when a database cache is cleared and can be revived on a refresh as long as they haven\u0027t\n been deleted. Instantiating an object will cause it to be added immediately to the associated\n cache.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "key",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "deleted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "cache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.DBObjectCache",
      "type_short": "DBObjectCache",
      "constant_value": null
    },
    {
      "name": "invalidateCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new DatabaseObject and adds it to the specified cache.",
      "javadoc": "Constructs a new DatabaseObject and adds it to the specified cache.\n@param cache to be used for this object or null if object will not be cached\n@param key database key to uniquely identify this object",
      "static": false,
      "params": [
        {
          "name": "cache",
          "type_long": "ghidra.program.database.DBObjectCache",
          "type_short": "DBObjectCache",
          "comment": "to be used for this object or null if object will not be cached"
        },
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": "database key to uniquely identify this object"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKey",
      "comment": "Get the database key for this object.",
      "javadoc": "Get the database key for this object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDeleted",
      "comment": "Marks the object as deleted.",
      "javadoc": "Marks the object as deleted.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setInvalid",
      "comment": "Invalidate this object. This does not necessarily mean that this object can never be used\n again. If the object can refresh itself, it may still be useable.",
      "javadoc": "Invalidate this object. This does not necessarily mean that this object can never be used\n again. If the object can refresh itself, it may still be useable.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setValid",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCurrentValidationCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "keyChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newKey",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInvalid",
      "comment": "Returns true if object is currently invalid and must be validated prior to further use. \n An invalid object may result from a cache invalidation which corresponds to wide-spread \n record changes.  A common situation where this can occur is an undo/redo operation\n against the underlying database.  The methods #checkIsValid(), #checkDeleted(),\n #validate(Lock) and #isDeleted(Lock) are methods which will force\n a re-validation if required.",
      "javadoc": "Returns true if object is currently invalid and must be validated prior to further use. \n An invalid object may result from a cache invalidation which corresponds to wide-spread \n record changes.  A common situation where this can occur is an undo/redo operation\n against the underlying database.  The methods {@link #checkIsValid()}, {@link #checkDeleted()},\n {@link #validate(Lock)} and {@link #isDeleted(Lock)} are methods which will force\n a re-validation if required.\n@return true if this object is invalid and must be re-validated, else false if object state\n is currently valid which may include a deleted state.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this object is invalid and must be re-validated, else false if object state\n is currently valid which may include a deleted state."
      },
      "throws": []
    },
    {
      "name": "checkDeleted",
      "comment": "Checks if this object has been deleted, in which case any use of the object is not allowed.\n This method should be invoked before any modifications to the object are performed to \n ensure it still exists and is in a valid state.",
      "javadoc": "Checks if this object has been deleted, in which case any use of the object is not allowed.\n This method should be invoked before any modifications to the object are performed to \n ensure it still exists and is in a valid state.\n@throws ConcurrentModificationException if the object has been deleted from the database.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkIsValid",
      "comment": "Check whether this object is still valid. If the object is invalid, the object will attempt\n to refresh itself. If the refresh fails, the object will be marked as deleted.",
      "javadoc": "Check whether this object is still valid. If the object is invalid, the object will attempt\n to refresh itself. If the refresh fails, the object will be marked as deleted.\n@return true if the object is valid, else false if deleted",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the object is valid, else false if deleted"
      },
      "throws": []
    },
    {
      "name": "checkIsValid",
      "comment": "Check whether this object is still valid. If the object is invalid, the object will attempt\n to refresh itself using the specified record. If the refresh fails, the object will be marked\n as deleted and removed from cache. If this object is already marked as deleted, the record\n can not be used to refresh the object.",
      "javadoc": "Check whether this object is still valid. If the object is invalid, the object will attempt\n to refresh itself using the specified record. If the refresh fails, the object will be marked\n as deleted and removed from cache. If this object is already marked as deleted, the record\n can not be used to refresh the object.\n@param record optional record which may be used to refresh invalid object\n@return true if the object is valid.",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "optional record which may be used to refresh invalid object"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the object is valid."
      },
      "throws": []
    },
    {
      "name": "validate",
      "comment": "This method provides a cheap (lock free) way to test if an object is valid. If this object is\n invalid, then the lock will be used to refresh as needed.",
      "javadoc": "This method provides a cheap (lock free) way to test if an object is valid. If this object is\n invalid, then the lock will be used to refresh as needed.\n@param lock the lock that will be used if the object needs to be refreshed.\n@return true if object is valid, else false if deleted",
      "static": false,
      "params": [
        {
          "name": "lock",
          "type_long": "ghidra.util.Lock",
          "type_short": "Lock",
          "comment": "the lock that will be used if the object needs to be refreshed."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if object is valid, else false if deleted"
      },
      "throws": []
    },
    {
      "name": "isDeleted",
      "comment": "Returns true if this object has been deleted. Note: once an object has been deleted, it will\n never be \"refreshed\". For example, if an object is ever deleted and is resurrected via an\n \"undo\", you will have get a fresh instance of the object.",
      "javadoc": "Returns true if this object has been deleted. Note: once an object has been deleted, it will\n never be \"refreshed\". For example, if an object is ever deleted and is resurrected via an\n \"undo\", you will have get a fresh instance of the object.\n@param lock object cache lock object\n@return true if this object has been deleted.",
      "static": false,
      "params": [
        {
          "name": "lock",
          "type_long": "ghidra.util.Lock",
          "type_short": "Lock",
          "comment": "object cache lock object"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this object has been deleted."
      },
      "throws": []
    },
    {
      "name": "refresh",
      "comment": "Tells the object to refresh its state from the database.",
      "javadoc": "Tells the object to refresh its state from the database.\n@return true if the object was able to refresh itself. Return false if the object was\n         deleted. Objects that extend this class must implement a refresh method. If an object\n         can never refresh itself, then it should always return false.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the object was able to refresh itself. Return false if the object was\n         deleted. Objects that extend this class must implement a refresh method. If an object\n         can never refresh itself, then it should always return false."
      },
      "throws": []
    },
    {
      "name": "refresh",
      "comment": "Tells the object to refresh its state from the database using the specified record if not\n null. NOTE: The default implementation ignores the record and invokes refresh().\n Implementations of this method must take care if multiple database tables are used since the\n record supplied could correspond to another object. In some cases it may be best not to\n override this method or ignore the record provided.",
      "javadoc": "Tells the object to refresh its state from the database using the specified record if not\n null. NOTE: The default implementation ignores the record and invokes refresh().\n Implementations of this method must take care if multiple database tables are used since the\n record supplied could correspond to another object. In some cases it may be best not to\n override this method or ignore the record provided.\n@param record valid record associated with object\u0027s key (optional, may be null to force\n            record lookup or other refresh technique)\n@return true if the object was able to refresh itself. Return false if record is null and\n         object was deleted. Objects that extend this class must implement a refresh method.\n         If an object can never refresh itself, then it should always return false.",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "valid record associated with object\u0027s key (optional, may be null to force\n            record lookup or other refresh technique)"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the object was able to refresh itself. Return false if record is null and\n         object was deleted. Objects that extend this class must implement a refresh method.\n         If an object can never refresh itself, then it should always return false."
      },
      "throws": []
    }
  ]
}
