{
  "name": "QueryRecordIterator",
  "comment": "Iterator that only returns records from another iterator that match the given query.",
  "javadoc": "Iterator that only returns records from another iterator that match the given query.",
  "static": false,
  "implements": [
    "db.RecordIterator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "iter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.RecordIterator",
      "type_short": "RecordIterator",
      "constant_value": null
    },
    {
      "name": "query",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.util.Query",
      "type_short": "Query",
      "constant_value": null
    },
    {
      "name": "record",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.DBRecord",
      "type_short": "DBRecord",
      "constant_value": null
    },
    {
      "name": "forward",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new QueryRecordIterator that filters the given record iterator with\n the given Query.",
      "javadoc": "Constructs a new QueryRecordIterator that filters the given record iterator with\n the given Query.\n@param iter the record iterator to filter.\n@param query the query used to filter.",
      "static": false,
      "params": [
        {
          "name": "iter",
          "type_long": "db.RecordIterator",
          "type_short": "RecordIterator",
          "comment": "the record iterator to filter."
        },
        {
          "name": "query",
          "type_long": "ghidra.program.database.util.Query",
          "type_short": "Query",
          "comment": "the query used to filter."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param iter record iterator\n@param query query needed to match the record\n@param forward true means iterate in the forward direction",
      "static": false,
      "params": [
        {
          "name": "iter",
          "type_long": "db.RecordIterator",
          "type_short": "RecordIterator",
          "comment": "record iterator"
        },
        {
          "name": "query",
          "type_long": "ghidra.program.database.util.Query",
          "type_short": "Query",
          "comment": "query needed to match the record"
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means iterate in the forward direction"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasNext",
      "comment": "",
      "javadoc": "@see db.RecordIterator#hasNext()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "next",
      "comment": "",
      "javadoc": "@see db.RecordIterator#next()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "hasPrevious",
      "comment": "",
      "javadoc": "@see db.RecordIterator#hasPrevious()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "previous",
      "comment": "",
      "javadoc": "@see db.RecordIterator#previous()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "delete",
      "comment": "",
      "javadoc": "@see db.RecordIterator#delete()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findNext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findPrevious",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
