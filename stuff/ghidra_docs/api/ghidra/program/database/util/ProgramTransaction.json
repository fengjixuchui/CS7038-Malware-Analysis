{
  "name": "ProgramTransaction",
  "comment": "A convenience context for transaction IDs on a Ghidra program database\n \n \n This is meant to be used as an idiom in a try-with-resources block:\n \n \n try (ProgramTransaction t \u003d ProgramTransaction.open(program, \"Demo\")) {\n     program.getMemory().....\n     t.commit();\n }\n \n \n \n This idiom is very useful if there is complex logic in your transaction, it\u0027s very easy to forget\n to close the transaction, especially if an error occurs, leaving the database in an open\n transaction indefinitely. The try-with-resources block will ensure that the transaction is closed\n in all circumstances. Note, however, that in order for the transaction to be committed, you must\n call #commit().\n \n \n Any exceptions within the block will cause  to be skipped, thus aborting the\n transaction.",
  "javadoc": "A convenience context for transaction IDs on a Ghidra program database\n \n \u003cp\u003e\n This is meant to be used as an idiom in a try-with-resources block:\n \n \u003cpre\u003e\n try (ProgramTransaction t \u003d ProgramTransaction.open(program, \"Demo\")) {\n     program.getMemory().....\n     t.commit();\n }\n \u003c/pre\u003e\n \n \u003cp\u003e\n This idiom is very useful if there is complex logic in your transaction, it\u0027s very easy to forget\n to close the transaction, especially if an error occurs, leaving the database in an open\n transaction indefinitely. The try-with-resources block will ensure that the transaction is closed\n in all circumstances. Note, however, that in order for the transaction to be committed, you must\n call {@link #commit()}.\n \n \u003cp\u003e\n Any exceptions within the block will cause {@code t.commit()} to be skipped, thus aborting the\n transaction.",
  "static": false,
  "implements": [
    "java.lang.AutoCloseable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "tid",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "commit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "open",
      "comment": "Start a transaction on the given program with the given description",
      "javadoc": "Start a transaction on the given program with the given description\n@param program the program to modify\n@param description a description of the transaction",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to modify"
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a description of the transaction"
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.util.ProgramTransaction",
        "type_short": "ProgramTransaction",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "tid",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "Finish the transaction\n \n \n If this is called before #commit(), then the transaction is aborted. This is called\n automatically at the close of a try-with-resources block.",
      "javadoc": "Finish the transaction\n \n \u003cp\u003e\n If this is called before {@link #commit()}, then the transaction is aborted. This is called\n automatically at the close of a try-with-resources block.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "commit",
      "comment": "Finish the transaction, and commit\n \n \n This MUST be called in order to commit the transaction. The transaction is not committed\n until the close of the try-with-resources block.",
      "javadoc": "Finish the transaction, and commit\n \n \u003cp\u003e\n This MUST be called in order to commit the transaction. The transaction is not committed\n until the close of the try-with-resources block.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
