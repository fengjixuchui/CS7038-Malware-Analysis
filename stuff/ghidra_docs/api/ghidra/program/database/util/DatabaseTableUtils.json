{
  "name": "DatabaseTableUtils",
  "comment": "Collection of static functions for upgrading various database tables.",
  "javadoc": "Collection of static functions for upgrading various database tables.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateIndexedAddressField",
      "comment": "Updates an indexed address field for when a block is moved.",
      "javadoc": "Updates an indexed address field for when a block is moved.\n@param table the database table\n@param addrCol the address column in the table\n@param addrMap the address map\n@param fromAddr the from address of the block being moved\n@param toAddr the address to where the block is being moved.\n@param length the size of the block being moved.\n@param monitor the task monitor\n@throws IOException thrown if a database io error occurs.\n@throws CancelledException thrown if the user cancels the move operation.",
      "static": true,
      "params": [
        {
          "name": "table",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "the database table"
        },
        {
          "name": "addrCol",
          "type_long": "int",
          "type_short": "int",
          "comment": "the address column in the table"
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": "the address map"
        },
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the from address of the block being moved"
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to where the block is being moved."
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the size of the block being moved."
        },
        {
          "name": "filter",
          "type_long": "ghidra.program.database.util.RecordFilter",
          "type_short": "RecordFilter",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if a database io error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "thrown if the user cancels the move operation."
        }
      ]
    },
    {
      "name": "updateAddressKey",
      "comment": "Handles redoing a table whose key is address based when a ranges of addresses is moved.",
      "javadoc": "Handles redoing a table whose key is address based when a ranges of addresses is moved.\n@param table the database table.\n@param addrMap the address map.\n@param fromAddr the from address of the block being moved.\n@param toAddr the destination address of the block being moved.\n@param length the size of the block being moved.\n@param monitor the taskmonitor\n@throws IOException thrown if a database io error occurs.\n@throws CancelledException thrown if the user cancels the move operation.",
      "static": true,
      "params": [
        {
          "name": "table",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "the database table."
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": "the address map."
        },
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the from address of the block being moved."
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the destination address of the block being moved."
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the size of the block being moved."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the taskmonitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if a database io error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "thrown if the user cancels the move operation."
        }
      ]
    },
    {
      "name": "updateAddressKey",
      "comment": "Handles redoing a table whose key is address based when a ranges of addresses is moved.",
      "javadoc": "Handles redoing a table whose key is address based when a ranges of addresses is moved.\n@param table the database table.\n@param addrMap the address map.\n@param fromAddr the first address of the block being moved.\n@param endAddr the last address of the block being moved.\n@param toAddr the destination address of the block being moved.\n@param monitor the task monitor\n@throws IOException thrown if a database io error occurs.\n@throws CancelledException thrown if the user cancels the move operation.",
      "static": true,
      "params": [
        {
          "name": "table",
          "type_long": "db.Table",
          "type_short": "Table",
          "comment": "the database table."
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": "the address map."
        },
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address of the block being moved."
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last address of the block being moved."
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the destination address of the block being moved."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if a database io error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "thrown if the user cancels the move operation."
        }
      ]
    }
  ]
}
