{
  "name": "SharedRangeMapDB",
  "comment": "SharedRangeMapDB provides a long value range map backed by a database table.\n This map allows values to share a given range with other values.",
  "javadoc": "\u003ccode\u003eSharedRangeMapDB\u003c/code\u003e provides a long value range map backed by a database table.\n This map allows values to share a given range with other values.\n@deprecated This map class should not be used except by the OldFunctionMapDB class",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "dbHandle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.DBHandle",
      "type_short": "DBHandle",
      "constant_value": null
    },
    {
      "name": "errHandler",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.util.ErrorHandler",
      "type_short": "ErrorHandler",
      "constant_value": null
    },
    {
      "name": "rangeTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.Table",
      "type_short": "Table",
      "constant_value": null
    },
    {
      "name": "mapTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.Table",
      "type_short": "Table",
      "constant_value": null
    },
    {
      "name": "RANGES_TABLE_NAME_PREFIX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Shared Ranges - \""
    },
    {
      "name": "MAP_TABLE_NAME_PREFIX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Shared Map - \""
    },
    {
      "name": "RANGES_SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "MAP_SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "RANGE_TO_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "MAP_VALUE_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "MAP_RANGE_KEY_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "MAP_INDEXED_COLS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createRangesSchema",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "db.Schema",
        "type_short": "Schema",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createMapSchema",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "db.Schema",
        "type_short": "Schema",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a shared range map.",
      "javadoc": "Construct a shared range map.\n@param dbHandle database handle.\n@param name map name used in naming the underlying database table.  \n This name must be unqiue across all shared range maps.\n@param errHandler database error handler.\n@param create if true the underlying database tables will be created.",
      "static": false,
      "params": [
        {
          "name": "dbHandle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "database handle."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "map name used in naming the underlying database table.  \n This name must be unqiue across all shared range maps."
        },
        {
          "name": "errHandler",
          "type_long": "db.util.ErrorHandler",
          "type_short": "ErrorHandler",
          "comment": "database error handler."
        },
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true the underlying database tables will be created."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "Frees resources used by this map.",
      "javadoc": "Frees resources used by this map.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Add a value to this map over the specified range.",
      "javadoc": "Add a value to this map over the specified range.\n@param start the start of the range.\n@param end the end of the range.\n@param value the value to associate with the range.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": "the start of the range."
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": "the end of the range."
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the value to associate with the range."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insertMapEntry",
      "comment": "Insert a new Map entry.",
      "javadoc": "Insert a new Map entry.\n@param rangeKey\n@param value",
      "static": false,
      "params": [
        {
          "name": "rangeKey",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "insertRangeEntry",
      "comment": "Insert a new Range entry.",
      "javadoc": "Insert a new Range entry.\n@param start\n@param end",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "splitRange",
      "comment": "Split a Range record and all related Map entries at a newEnd index.\n A new Range record is created at newEnd+1 to the end of the original \n range.  New Map entries are created for this new range.",
      "javadoc": "Split a Range record and all related Map entries at a newEnd index.\n A new Range record is created at newEnd+1 to the end of the original \n range.  New Map entries are created for this new range.\n@param rangeRecord\n@param newEnd\n@return Record\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "rangeRecord",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        },
        {
          "name": "newEnd",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "Record"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getMapValues",
      "comment": "Get a sorted array of map values for a given set of map keys.",
      "javadoc": "Get a sorted array of map values for a given set of map keys.\n@param mapKeys\n@return long[]\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "mapKeys",
          "type_long": "db.Field[]",
          "type_short": "db.Field[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.Field[]",
        "type_short": "db.Field[]",
        "comment": "long[]"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "consolidateRange",
      "comment": "If other values are mapped to a specified range, perform a consolidation\n on that range if possible.  If no reference exists, delete the range.",
      "javadoc": "If other values are mapped to a specified range, perform a consolidation\n on that range if possible.  If no reference exists, delete the range.\n@param rangeKey\n@param end end of range (must agree with record).",
      "static": false,
      "params": [
        {
          "name": "rangeKey",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": "end of range (must agree with record)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "remove",
      "comment": "Remove a value from this map.",
      "javadoc": "Remove a value from this map.\n@param value the value to remove.",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the value to remove."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValueIterator",
      "comment": "Get a LongField value iterator over the specified range.\n List is pre-calculated such that any changes made to the map\n after invoking this method will not be reflected by the iterator\n and invalid function keys may be returned.\n The implementation assumes a small set of values exist over the \n range.",
      "javadoc": "Get a LongField value iterator over the specified range.\n List is pre-calculated such that any changes made to the map\n after invoking this method will not be reflected by the iterator\n and invalid function keys may be returned.\n The implementation assumes a small set of values exist over the \n range.\n@param start\n@param end\n@return Iterator of unique LongField values occuring within the\n specified range.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cdb.Field\u003e",
        "type_short": "Iterator",
        "comment": "Iterator of unique LongField values occuring within the\n specified range."
      },
      "throws": []
    },
    {
      "name": "getValueRangeIterator",
      "comment": "Get an index range iterator for a specified value.",
      "javadoc": "Get an index range iterator for a specified value.\n@param value the value for which to iterator indexes over.\n@return IndexRangeIterator",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the value for which to iterator indexes over."
        }
      ],
      "return": {
        "type_long": "ghidra.util.datastruct.IndexRangeIterator",
        "type_short": "IndexRangeIterator",
        "comment": "IndexRangeIterator"
      },
      "throws": []
    }
  ]
}
