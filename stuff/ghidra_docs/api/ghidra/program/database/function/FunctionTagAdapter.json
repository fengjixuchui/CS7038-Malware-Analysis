{
  "name": "FunctionTagAdapter",
  "comment": "This represents a table that stores all possible function tags available for use.\n The table consists of two columns: one for the tag name, and one indicating\n whether this tag is modifiable.\n \n Non-modifiable tags cannot be deleted or edited by any user. These are typically\n tags that have been pre-loaded via some external mechanism and need to be \n preserved as originally defined.",
  "javadoc": "This represents a table that stores all possible function tags available for use.\n The table consists of two columns: one for the tag name, and one indicating\n whether this tag is modifiable.\n \n Non-modifiable tags cannot be deleted or edited by any user. These are typically\n tags that have been pre-loaded via some external mechanism and need to be \n preserved as originally defined.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Function Tags\""
    },
    {
      "name": "CURRENT_VERSION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "NAME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "COMMENT_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAdapter",
      "comment": "",
      "javadoc": "@param handle database handle\n@param openMode CREATE, UPDATE, UPGRADE\n@param monitor task monitor\n@return \n@throws VersionException\n@throws CancelledException\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "database handle"
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": "CREATE, UPDATE, UPGRADE"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.function.FunctionTagAdapter",
        "type_short": "FunctionTagAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findReadOnlyAdapter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.function.FunctionTagAdapter",
        "type_short": "FunctionTagAdapter",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "upgrade",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "oldAdapter",
          "type_long": "ghidra.program.database.function.FunctionTagAdapter",
          "type_short": "FunctionTagAdapter",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.function.FunctionTagAdapter",
        "type_short": "FunctionTagAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecords",
      "comment": "Returns all tag records in the database.",
      "javadoc": "Returns all tag records in the database.\n@return list of tags\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": "list of tags"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Returns a record matching the given tag name, or null if not found.",
      "javadoc": "Returns a record matching the given tag name, or null if not found.\n@param tag the tag name\n@return Record, or null if not found\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "tag",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the tag name"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "Record, or null if not found"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Returns the tag record with the given id.",
      "javadoc": "Returns the tag record with the given id.\n@param id the tag index\n@return Record, or null if not found\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "the tag index"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "Record, or null if not found"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createTagRecord",
      "comment": "Creates a DBRecord with the given tag name.",
      "javadoc": "Creates a {@link DBRecord} with the given tag name.\n@param tag the tag name to create\n@param comment tag comment\n@return \n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "tag",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the tag name to create"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "tag comment"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "updateRecord",
      "comment": "Updates the database record for a tag.",
      "javadoc": "Updates the database record for a tag.\n@param record tag record\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "tag record"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "removeTagRecord",
      "comment": "Removes the tag with the given name from the database.",
      "javadoc": "Removes the tag with the given name from the database.\n@param id tag id\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "tag id"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getNumTags",
      "comment": "Returns the total number of tags in the database.",
      "javadoc": "Returns the total number of tags in the database.\n@return the number of tags",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of tags"
      },
      "throws": []
    }
  ]
}
