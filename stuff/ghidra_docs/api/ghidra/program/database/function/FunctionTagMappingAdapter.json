{
  "name": "FunctionTagMappingAdapter",
  "comment": "Database adapter that maps function tags to individual functions. This table \n consists of two columns, each of which is an index into the FunctionTagAdapter\n and SymbolTable respectively.",
  "javadoc": "Database adapter that maps function tags to individual functions. This table \n consists of two columns, each of which is an index into the {@link FunctionTagAdapter}\n and {@link SymbolTable} respectively.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Function Tag Map\""
    },
    {
      "name": "CURRENT_VERSION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "FUNCTION_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "TAG_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAdapter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.function.FunctionTagMappingAdapter",
        "type_short": "FunctionTagMappingAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findReadOnlyAdapter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.function.FunctionTagMappingAdapter",
        "type_short": "FunctionTagMappingAdapter",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "upgrade",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "oldAdapter",
          "type_long": "ghidra.program.database.function.FunctionTagMappingAdapter",
          "type_short": "FunctionTagMappingAdapter",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.function.FunctionTagMappingAdapter",
        "type_short": "FunctionTagMappingAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecordsByFunctionID",
      "comment": "Returns all table entries associated with the given function ID. This \n effectively gives a list of all the tags for a function.",
      "javadoc": "Returns all table entries associated with the given function ID. This \n effectively gives a list of all the tags for a function.\n@param functionID index into the {@link SymbolTable} table\n@return iterator of database records\n@throws IOException if database error occurs",
      "static": false,
      "params": [
        {
          "name": "functionID",
          "type_long": "long",
          "type_short": "long",
          "comment": "index into the SymbolTable table"
        }
      ],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": "iterator of database records"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if database error occurs"
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Searches this table for any entry matching the given function and tag ID.",
      "javadoc": "Searches this table for any entry matching the given function and tag ID.\n@param functionID index into the {@link SymbolTable} table\n@param tagID index into the {@link FunctionTagAdapter} table\n@return null if not found\n@throws IOException if database error occurs",
      "static": false,
      "params": [
        {
          "name": "functionID",
          "type_long": "long",
          "type_short": "long",
          "comment": "index into the SymbolTable table"
        },
        {
          "name": "tagID",
          "type_long": "long",
          "type_short": "long",
          "comment": "index into the FunctionTagAdapter table"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "null if not found"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if database error occurs"
        }
      ]
    },
    {
      "name": "createFunctionTagRecord",
      "comment": "Creates a new record with the given function and tag ID\u0027s.",
      "javadoc": "Creates a new record with the given function and tag ID\u0027s.\n@param functionID the function\u0027s database id\n@param tagID the FunctionTags database id\n@return newly-created database record\n@throws IOException if database error occurs",
      "static": false,
      "params": [
        {
          "name": "functionID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the function\u0027s database id"
        },
        {
          "name": "tagID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the FunctionTags database id"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "newly-created database record"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if database error occurs"
        }
      ]
    },
    {
      "name": "removeFunctionTagRecord",
      "comment": "Removes the record with the given function and tag IDs. There should be at most\n one of these.",
      "javadoc": "Removes the record with the given function and tag IDs. There should be at most\n one of these.\n@param functionID index into the {@link SymbolTable} table\n@param tagID index into the {@link FunctionTagAdapter} table\n@return true if the remove was performed\n@throws IOException if database error occurs",
      "static": false,
      "params": [
        {
          "name": "functionID",
          "type_long": "long",
          "type_short": "long",
          "comment": "index into the SymbolTable table"
        },
        {
          "name": "tagID",
          "type_long": "long",
          "type_short": "long",
          "comment": "index into the FunctionTagAdapter table"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the remove was performed"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if database error occurs"
        }
      ]
    },
    {
      "name": "removeFunctionTagRecord",
      "comment": "Removes all records containing the given tag ID. This should be called\n whenever a tag is being deleted from the system.",
      "javadoc": "Removes all records containing the given tag ID. This should be called\n whenever a tag is being deleted from the system.\n@param tagID index into the {@link FunctionTagAdapter} table\n@throws IOException if database error occurs",
      "static": false,
      "params": [
        {
          "name": "tagID",
          "type_long": "long",
          "type_short": "long",
          "comment": "index into the FunctionTagAdapter table"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if database error occurs"
        }
      ]
    },
    {
      "name": "isTagAssigned",
      "comment": "Determine if the specified tag ID has been applied to a function",
      "javadoc": "Determine if the specified tag ID has been applied to a function\n@param id tag ID\n@return true if tag applied to one or more functions\n@throws IOException if database error occurs",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "tag ID"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if tag applied to one or more functions"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if database error occurs"
        }
      ]
    },
    {
      "name": "getRecords",
      "comment": "Returns a RecordIterator over all the records in this table",
      "javadoc": "Returns a RecordIterator over all the records in this table\n@return a RecordIterator over all the records in this table\n@throws IOException if database error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": "a RecordIterator over all the records in this table"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if database error occurs"
        }
      ]
    }
  ]
}
