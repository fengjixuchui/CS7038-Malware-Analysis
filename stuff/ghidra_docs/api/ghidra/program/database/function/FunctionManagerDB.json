{
  "name": "FunctionManagerDB",
  "comment": "Class that manages all functions within the program; there are some\n convenience methods on Listing to create and access functions, but\n all function related calls are routed to this class.",
  "javadoc": "Class that manages all functions within the program; there are some\n convenience methods on Listing to create and access functions, but\n all function related calls are routed to this class.",
  "static": false,
  "implements": [
    "ghidra.program.model.listing.FunctionManager"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "CALLFIXUP_MAP",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"CallFixup\""
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.ProgramDB",
      "type_short": "ProgramDB",
      "constant_value": null
    },
    {
      "name": "dbHandle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.DBHandle",
      "type_short": "DBHandle",
      "constant_value": null
    },
    {
      "name": "addrMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.map.AddressMap",
      "type_short": "AddressMap",
      "constant_value": null
    },
    {
      "name": "cache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.DBObjectCache\u003cghidra.program.database.function.FunctionDB\u003e",
      "type_short": "DBObjectCache",
      "constant_value": null
    },
    {
      "name": "adapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.function.FunctionAdapter",
      "type_short": "FunctionAdapter",
      "constant_value": null
    },
    {
      "name": "thunkAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.function.ThunkFunctionAdapter",
      "type_short": "ThunkFunctionAdapter",
      "constant_value": null
    },
    {
      "name": "callingConventionAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.function.CallingConventionDBAdapter",
      "type_short": "CallingConventionDBAdapter",
      "constant_value": null
    },
    {
      "name": "callingConventionNameToIDMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Byte\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "callingConventionIDToNameMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Byte,java.lang.String\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "namespaceMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.symbol.NamespaceManager",
      "type_short": "NamespaceManager",
      "constant_value": null
    },
    {
      "name": "symbolMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.symbol.SymbolManager",
      "type_short": "SymbolManager",
      "constant_value": null
    },
    {
      "name": "codeMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.code.CodeManager",
      "type_short": "CodeManager",
      "constant_value": null
    },
    {
      "name": "functionTagManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.function.FunctionTagManagerDB",
      "type_short": "FunctionTagManagerDB",
      "constant_value": null
    },
    {
      "name": "globalNamespace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.symbol.Namespace",
      "type_short": "Namespace",
      "constant_value": null
    },
    {
      "name": "functionFilter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.function.Predicate\u003cghidra.program.model.listing.Function\u003e",
      "type_short": "Predicate",
      "constant_value": null
    },
    {
      "name": "callFixupMap",
      "comment": "TODO: use of StringPropertyMap for callFixupMap lacks the ability to listen for changes\n which may be made to the map directly (e.g., diff/merge)",
      "javadoc": "TODO: use of StringPropertyMap for callFixupMap lacks the ability to listen for changes\n which may be made to the map directly (e.g., diff/merge)",
      "static": false,
      "type_long": "ghidra.program.model.util.StringPropertyMap",
      "type_short": "StringPropertyMap",
      "constant_value": null
    },
    {
      "name": "lastFuncID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "lock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.Lock",
      "type_short": "Lock",
      "constant_value": null
    },
    {
      "name": "oldAdapterVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new FunctionManager",
      "javadoc": "Construct a new FunctionManager\n@param dbHandle data base handle\n@param addrMap address map for the program\n@param openMode CREATE, UPDATE, READ_ONLY, or UPGRADE defined in\n db.DBConstants\n@param lock the program synchronization lock\n@param monitor\n@throws VersionException if function manager\u0027s version does not match\n its expected version\n@throws CancelledException if the function table is being upgraded\n and the user canceled the upgrade process\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "dbHandle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "data base handle"
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": "address map for the program"
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": "CREATE, UPDATE, READ_ONLY, or UPGRADE defined in\n db.DBConstants"
        },
        {
          "name": "lock",
          "type_long": "ghidra.util.Lock",
          "type_short": "Lock",
          "comment": "the program synchronization lock"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if function manager\u0027s version does not match\n its expected version"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the function table is being upgraded\n and the user canceled the upgrade process"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "initializeAdapters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.database.ProgramDB",
        "type_short": "ProgramDB",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.database.function.FunctionAdapter",
        "type_short": "FunctionAdapter",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCallingConventionName",
      "comment": "Get calling convention name corresponding to existing ID.  If id is no longer valid,\n null will be returned.",
      "javadoc": "Get calling convention name corresponding to existing ID.  If id is no longer valid,\n null will be returned.\n@param id\n@return ",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCallingConventionID",
      "comment": "Get (and assign if needed) the ID associated with the specified calling convention name.",
      "javadoc": "Get (and assign if needed) the ID associated with the specified calling convention name.\n@param name calling convention name\n@return calling convention ID\n@throws IOException\n@throws InvalidInputException",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "calling convention name"
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "calling convention ID"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getCallingConventionNames",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultCallingConvention",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCallingConvention",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCallingConventions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel[]",
        "type_short": "ghidra.program.model.lang.PrototypeModel[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createExternalFunction",
      "comment": "Transform an existing external symbol into an external function.\n This method should only be invoked by an ExternalSymbol",
      "javadoc": "Transform an existing external symbol into an external function.\n This method should only be invoked by an ExternalSymbol\n@param extSpaceAddr the external space address to use when creating this external.  Any \n other symbol using this address must first be deleted.  Results are unpredictable if this is \n not done.\n@param name the external function name\n@param nameSpace the external function namespace\n@param extData the external data string to store additional info (see {@link ExternalLocationDB})\n@param source the source of this external.\n@return external function\n@throws InvalidInputException if the name is invalid",
      "static": false,
      "params": [
        {
          "name": "extSpaceAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the external space address to use when creating this external.  Any \n other symbol using this address must first be deleted.  Results are unpredictable if this is \n not done."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the external function name"
        },
        {
          "name": "nameSpace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the external function namespace"
        },
        {
          "name": "extData",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the external data string to store additional info (see ExternalLocationDB)"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this external."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "external function"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if the name is invalid"
        }
      ]
    },
    {
      "name": "createFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "body",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "nameSpace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        },
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "body",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createThunkFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "nameSpace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        },
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "body",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "thunkedFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "nameSpace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        },
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "body",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "thunkedFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setThunkedFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.database.function.FunctionDB",
          "type_short": "FunctionDB",
          "comment": ""
        },
        {
          "name": "referencedFunction",
          "type_long": "ghidra.program.database.function.FunctionDB",
          "type_short": "FunctionDB",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getCodeManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.database.code.CodeManager",
        "type_short": "CodeManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "functionTagsChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "functionNamespaceChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doRemoveFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunction",
      "comment": "Get the function with the given key.",
      "javadoc": "Get the function with the given key.\n@param key ID of the function; ID is obtained by calling\n Function.getID()\n@return null if there is no function with the given key",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": "ID of the function; ID is obtained by calling\n Function.getID()"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "null if there is no function with the given key"
      },
      "throws": []
    },
    {
      "name": "getReferencedFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionAt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionContaining",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "foward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "asv",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionsNoStubs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionsNoStubs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "foward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionsNoStubs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "asv",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExternalFunctions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionIterator",
        "type_short": "FunctionIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveAddressRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "deleteAddressRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.database.ProgramDB",
          "type_short": "ProgramDB",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "programReady",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "currentRevision",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "checkDynamicStorageConversion",
      "comment": "Determine if dynamic storage will work during the upgrade of a pre-dynamic storage\n function.",
      "javadoc": "Determine if dynamic storage will work during the upgrade of a pre-dynamic storage\n function.\n@param returnDataType\n@param currentParams\n@param paramOffset offset within currentParams for first parameter\n@return return variable storage if dynamic storage does not match current custom storage -\n this is done so that this storage can be assigned if currently \u003cUNASSIGNED\u003e.  If dynamic\n storage matches null will be returned.",
      "static": false,
      "params": [
        {
          "name": "returnDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "currentParams",
          "type_long": "ghidra.program.model.listing.Parameter[]",
          "type_short": "ghidra.program.model.listing.Parameter[]",
          "comment": ""
        },
        {
          "name": "paramOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset within currentParams for first parameter"
        },
        {
          "name": "callingConvention",
          "type_long": "ghidra.program.model.lang.PrototypeModel",
          "type_short": "PrototypeModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.VariableStorage",
        "type_short": "VariableStorage",
        "comment": "return variable storage if dynamic storage does not match current custom storage -\n this is done so that this storage can be assigned if currently .  If dynamic\n storage matches null will be returned."
      },
      "throws": []
    },
    {
      "name": "initSignatureSource",
      "comment": "Initialize function signature source when it was first introduced and attempt to\n disable custom storage if possible.\n NOTE: This method intended to be called by ProgramDB only during appropriate upgrade.",
      "javadoc": "Initialize function signature source when it was first introduced and attempt to\n disable custom storage if possible.\n NOTE: This method intended to be called by ProgramDB only during appropriate upgrade.\n@param monitor\n@throws CancelledException\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isLikelyThisParam",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "param",
          "type_long": "ghidra.program.model.listing.Parameter",
          "type_short": "Parameter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeExplicitThisParameters",
      "comment": "Remove parameter symbols which correspond to the \u0027this\u0027 parameter for all\n __thiscall functions using dynamic storage.\n NOTE: This method intended to be called by ProgramDB only during appropriate upgrade.",
      "javadoc": "Remove parameter symbols which correspond to the \u0027this\u0027 parameter for all\n __thiscall functions using dynamic storage.\n NOTE: This method intended to be called by ProgramDB only during appropriate upgrade.\n@param monitor\n@throws CancelledException\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "removeExplicitThisParameters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.database.function.FunctionDB",
          "type_short": "FunctionDB",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "invalidateCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "all",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCallFixupMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.util.StringPropertyMap",
        "type_short": "StringPropertyMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "functionChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.database.function.FunctionDB",
          "type_short": "FunctionDB",
          "comment": ""
        },
        {
          "name": "subEventType",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dbError",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionsOverlapping",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.listing.Function\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFunctionBody",
      "comment": "Set the new body for the function.",
      "javadoc": "Set the new body for the function.",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.database.function.FunctionDB",
          "type_short": "FunctionDB",
          "comment": ""
        },
        {
          "name": "newBody",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "removeFunctionSymbols",
      "comment": "Remove symbols in the given address set and whose parent symbol is the\n symbol for the given function.",
      "javadoc": "Remove symbols in the given address set and whose parent symbol is the\n symbol for the given function.",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.database.function.FunctionDB",
          "type_short": "FunctionDB",
          "comment": ""
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeVariableRefs",
      "comment": "Remove variable references in the given address set.",
      "javadoc": "Remove variable references in the given address set.",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "view",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "upgradeAllDotDotDots",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "upgradeDotDotDotToVarArgs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "decompilerPropertyMap",
          "type_long": "ghidra.program.model.util.StringPropertyMap",
          "type_short": "StringPropertyMap",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOldAdapterPreVarArgs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferencedVariable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instrAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "storageAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "isRead",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable",
        "type_short": "Variable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "replaceDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "oldDataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "newDataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isThunk",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getThunkedFunctionId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "functionId",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getThunkFunctionIds",
      "comment": "Returns list of thunk function keys which reference the specified referencedFunctionKey",
      "javadoc": "Returns list of thunk function keys which reference the specified referencedFunctionKey\n@param referencedFunctionId\n@return list of thunk function IDs or null",
      "static": false,
      "params": [
        {
          "name": "referencedFunctionId",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.Long\u003e",
        "type_short": "List",
        "comment": "list of thunk function IDs or null"
      },
      "throws": []
    },
    {
      "name": "getThunkedFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.database.function.FunctionDB",
          "type_short": "FunctionDB",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.function.FunctionDB",
        "type_short": "FunctionDB",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLanguage",
      "comment": "Perform language translation.\n Update function return storage specifications to reflect address space and register mappings",
      "javadoc": "Perform language translation.\n Update function return storage specifications to reflect address space and register mappings\n@param translator\n@param monitor\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "translator",
          "type_long": "ghidra.program.util.LanguageTranslator",
          "type_short": "LanguageTranslator",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFunctionTagManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.FunctionTagManager",
        "type_short": "FunctionTagManager",
        "comment": ""
      },
      "throws": []
    }
  ]
}
