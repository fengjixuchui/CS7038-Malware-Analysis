{
  "name": "OldStackFrameDB",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.program.model.listing.StackFrame"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "localSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "paramStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "returnStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "variables",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.listing.Variable\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "function",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.oldfunction.OldFunctionDataDB",
      "type_short": "OldFunctionDataDB",
      "constant_value": null
    },
    {
      "name": "functionManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.oldfunction.OldFunctionManager",
      "type_short": "OldFunctionManager",
      "constant_value": null
    },
    {
      "name": "adapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.oldfunction.OldStackVariableDBAdapter",
      "type_short": "OldStackVariableDBAdapter",
      "constant_value": null
    },
    {
      "name": "emptyArray",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.listing.Variable[]",
      "type_short": "ghidra.program.model.listing.Variable[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a function stack frame.",
      "javadoc": "Construct a function stack frame.\n@param function\n@param variables",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.database.oldfunction.OldFunctionDataDB",
          "type_short": "OldFunctionDataDB",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "refresh",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.database.oldfunction.OldFunctionManager",
        "type_short": "OldFunctionManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.database.oldfunction.OldFunctionDataDB",
        "type_short": "OldFunctionDataDB",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunction",
      "comment": "Get the function that this stack belongs to.",
      "javadoc": "Get the function that this stack belongs to.\n@return the function",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "the function"
      },
      "throws": []
    },
    {
      "name": "loadStackVariables",
      "comment": "Load the stack variables for this frame.",
      "javadoc": "Load the stack variables for this frame.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStackVariable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable",
        "type_short": "Variable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createVariable",
      "comment": "",
      "javadoc": "@see ghidra.program.model.listing.StackFrame#createVariable(java.lang.String, int, ghidra.program.model.data.DataType, ghidra.program.model.symbol.SourceType)",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable",
        "type_short": "Variable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStackVariables",
      "comment": "",
      "javadoc": "@see ghidra.program.model.listing.StackFrame#getStackVariables()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLocals",
      "comment": "Get all defined local variables.",
      "javadoc": "Get all defined local variables.\n@return an array of all local variables",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": "an array of all local variables"
      },
      "throws": []
    },
    {
      "name": "getParameters",
      "comment": "Get all defined parameters.",
      "javadoc": "Get all defined parameters.\n@return an array of parameters.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": "an array of parameters."
      },
      "throws": []
    },
    {
      "name": "getFrameSize",
      "comment": "Get the size of this stack frame in bytes.",
      "javadoc": "Get the size of this stack frame in bytes.\n@return stack frame size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "stack frame size"
      },
      "throws": []
    },
    {
      "name": "getLocalSize",
      "comment": "Get the local portion of the stack frame in bytes.",
      "javadoc": "Get the local portion of the stack frame in bytes.\n@return local frame size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "local frame size"
      },
      "throws": []
    },
    {
      "name": "growsNegative",
      "comment": "A stack that grows negative has local references negative and\n parameter references positive.  A positive growing stack has\n positive locals and negative parameters.",
      "javadoc": "A stack that grows negative has local references negative and\n parameter references positive.  A positive growing stack has\n positive locals and negative parameters.\n@return true if the stack grows in a negative direction.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the stack grows in a negative direction."
      },
      "throws": []
    },
    {
      "name": "setLocalSize",
      "comment": "Set the size of the local stack in bytes.",
      "javadoc": "Set the size of the local stack in bytes.\n@param size size of local stack",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of local stack"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParameterSize",
      "comment": "Get the parameter portion of the stack frame in bytes.",
      "javadoc": "Get the parameter portion of the stack frame in bytes.\n@return parameter frame size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "parameter frame size"
      },
      "throws": []
    },
    {
      "name": "getParameterCount",
      "comment": "",
      "javadoc": "@return the number of parameters on the stack",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of parameters on the stack"
      },
      "throws": []
    },
    {
      "name": "clearVariable",
      "comment": "Clear the stack variable defined at offset",
      "javadoc": "Clear the stack variable defined at offset\n@param offset Offset onto the stack to be cleared.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "Offset onto the stack to be cleared."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParameterOffset",
      "comment": "Get the offset to the start of the parameters.",
      "javadoc": "Get the offset to the start of the parameters.\n@return offset",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "offset"
      },
      "throws": []
    },
    {
      "name": "getReturnAddressOffset",
      "comment": "Get the stack variable containing offset.  This may fall in\n the middle of a defined variable.",
      "javadoc": "Get the stack variable containing offset.  This may fall in\n the middle of a defined variable.\n@param offset offset of on stack to get variable.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setReturnAddressOffset",
      "comment": "Set the return address stack size.",
      "javadoc": "Set the return address stack size.\n@param offset offset of return address.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset of return address."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVariableContaining",
      "comment": "Get the stack variable containing offset.  This may fall in\n the middle of a defined variable.",
      "javadoc": "Get the stack variable containing offset.  This may fall in\n the middle of a defined variable.\n@param offset offset of on stack to get variable.",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset of on stack to get variable."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable",
        "type_short": "Variable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNegativeSize",
      "comment": "Get the size of the negative portion of the stack",
      "javadoc": "Get the size of the negative portion of the stack\n@return the negative portion size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the negative portion size"
      },
      "throws": []
    },
    {
      "name": "getPositiveSize",
      "comment": "Get the size of the positive portion of the stack (including 0)",
      "javadoc": "Get the size of the positive portion of the stack (including 0)\n@return the positive portion size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the positive portion size"
      },
      "throws": []
    },
    {
      "name": "getNegativeVariables",
      "comment": "Get all the stack variables in the negative portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.",
      "javadoc": "Get all the stack variables in the negative portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.\n@return an array of variables defined on the negative portion of the frame.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": "an array of variables defined on the negative portion of the frame."
      },
      "throws": []
    },
    {
      "name": "getPositiveVariables",
      "comment": "Get all the stack variables in the postive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.",
      "javadoc": "Get all the stack variables in the postive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.\n@return an array of variables defined on the positive portion of the frame.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Variable[]",
        "type_short": "ghidra.program.model.listing.Variable[]",
        "comment": "an array of variables defined on the positive portion of the frame."
      },
      "throws": []
    },
    {
      "name": "getNegativeCount",
      "comment": "Get a count of all the stack variables in the negative portion of the frame.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.",
      "javadoc": "Get a count of all the stack variables in the negative portion of the frame.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPositiveCount",
      "comment": "Get all the stack variables in the postive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.",
      "javadoc": "Get all the stack variables in the postive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.\n@return an array of variables defined on the positive portion of the frame.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "an array of variables defined on the positive portion of the frame."
      },
      "throws": []
    },
    {
      "name": "isParameterOffset",
      "comment": "",
      "javadoc": "@param offset\n@return boolean",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean"
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "Returns whether some other stack frame is \"equivalent to\" this one.\n The stack frame is considered equal to another even if they are each\n part of a different function.",
      "javadoc": "Returns whether some other stack frame is \"equivalent to\" this one.\n The stack frame is considered equal to another even if they are each\n part of a different function.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
