{
  "name": "BookmarkDBAdapter",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "ADDRESS_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "CATEGORY_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "COMMENT_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "BOOKMARK_TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Bookmarks\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAdapter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dbHandle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "typeIds",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.bookmark.BookmarkDBAdapter",
        "type_short": "BookmarkDBAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findReadOnlyAdapter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dbHandle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": ""
        },
        {
          "name": "typeIds",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.bookmark.BookmarkDBAdapter",
        "type_short": "BookmarkDBAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "upgrade",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dbHandle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "oldAdapter",
          "type_long": "ghidra.program.database.bookmark.BookmarkDBAdapter",
          "type_short": "BookmarkDBAdapter",
          "comment": ""
        },
        {
          "name": "typeIds",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.bookmark.BookmarkDBAdapter",
        "type_short": "BookmarkDBAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getTypeId",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "rec",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mangleTypeCategory",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "typeId",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "demangleTypeCategory",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "typeCategory",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createBookmark",
      "comment": "Create a new bookmark record",
      "javadoc": "Create a new bookmark record\n@param typeId\n@param category\n@param index\n@param comment\n@return \n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "typeId",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "updateRecord",
      "comment": "Update the database with the specified bookmark record",
      "javadoc": "Update the database with the specified bookmark record\n@param rec modified bookmark record\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "rec",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "modified bookmark record"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "deleteRecord",
      "comment": "Delete a specific bookmark",
      "javadoc": "Delete a specific bookmark\n@param id bookmark ID / key\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "bookmark ID / key"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Get the bookmark record corresponding to the specified bookmark ID.",
      "javadoc": "Get the bookmark record corresponding to the specified bookmark ID.\n@param id bookmark ID\n@return bookmark record or null if not found.",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "bookmark ID"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "bookmark record or null if not found."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecordsByTypeAtAddress",
      "comment": "Get all bookmark records associated with a specific type and address.",
      "javadoc": "Get all bookmark records associated with a specific type and address.\n@param index address index\n@return record iterator",
      "static": false,
      "params": [
        {
          "name": "typeId",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": "record iterator"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecordsByTypeStartingAtAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "typeID",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "startAddress",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecordsByTypeForAddressRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "typeId",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "startAddr",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "endAddr",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecordsByTypeAndCategory",
      "comment": "Get all bookmark records with a specific type ID and category.",
      "javadoc": "Get all bookmark records with a specific type ID and category.\n@param typeId bookmark type ID (required)\n@param category type category or null for all categories\n@return record iterator",
      "static": false,
      "params": [
        {
          "name": "typeId",
          "type_long": "int",
          "type_short": "int",
          "comment": "bookmark type ID (required)"
        },
        {
          "name": "category",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "type category or null for all categories"
        }
      ],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": "record iterator"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecordsByType",
      "comment": "Returns iterator over all bookmark records.",
      "javadoc": "Returns iterator over all bookmark records.",
      "static": false,
      "params": [
        {
          "name": "typeId",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getCategories",
      "comment": "Get list of all known categories for the specified bookmark type.\n Categories are sorted in ascending order.",
      "javadoc": "Get list of all known categories for the specified bookmark type.\n Categories are sorted in ascending order.\n@param typeId bookmark type ID\n@return list of category strings",
      "static": false,
      "params": [
        {
          "name": "typeId",
          "type_long": "int",
          "type_short": "int",
          "comment": "bookmark type ID"
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "list of category strings"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBookmarkAddresses",
      "comment": "Get set of addresses where bookmarks of the specified type and category\n exist.",
      "javadoc": "Get set of addresses where bookmarks of the specified type and category\n exist.\n@param typeId bookmark type ID (required)\n@param addrMap address map\n@return address set",
      "static": false,
      "params": [
        {
          "name": "typeId",
          "type_long": "int",
          "type_short": "int",
          "comment": "bookmark type ID (required)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "address set"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBookmarkCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "typeId",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBookmarkCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addType",
      "comment": "Creates a new bookmark type.",
      "javadoc": "Creates a new bookmark type.\n@param typeID The new ID of the bookmark type\n@throws IOException if there is a problem creating the new table.",
      "static": false,
      "params": [
        {
          "name": "typeID",
          "type_long": "int",
          "type_short": "int",
          "comment": "The new ID of the bookmark type"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem creating the new table."
        }
      ]
    },
    {
      "name": "deleteType",
      "comment": "Deletes the table associated with the given bookmark type.",
      "javadoc": "Deletes the table associated with the given bookmark type.\n@param typeID The ID of the existing bookmark type\n@throws IOException if there is a problem deleting the existing table.",
      "static": false,
      "params": [
        {
          "name": "typeID",
          "type_long": "int",
          "type_short": "int",
          "comment": "The ID of the existing bookmark type"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem deleting the existing table."
        }
      ]
    },
    {
      "name": "hasTable",
      "comment": "Returns true if a table exists for the given bookmark type ID.",
      "javadoc": "Returns true if a table exists for the given bookmark type ID.\n@param typeID The bookmark type ID of the table in question.\n@return true if a table exists for the given bookmark type ID.",
      "static": false,
      "params": [
        {
          "name": "typeID",
          "type_long": "int",
          "type_short": "int",
          "comment": "The bookmark type ID of the table in question."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a table exists for the given bookmark type ID."
      },
      "throws": []
    },
    {
      "name": "getTable",
      "comment": "Returns the table for the given bookmark type ID",
      "javadoc": "Returns the table for the given bookmark type ID\n@param typeID the bookmark type ID for which to get a table\n@return the table for the given bookmark type ID",
      "static": false,
      "params": [
        {
          "name": "typeID",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bookmark type ID for which to get a table"
        }
      ],
      "return": {
        "type_long": "db.Table",
        "type_short": "Table",
        "comment": "the table for the given bookmark type ID"
      },
      "throws": []
    },
    {
      "name": "reloadTables",
      "comment": "Reloads the tables from the database.",
      "javadoc": "Reloads the tables from the database.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
