{
  "name": "CompositeDB",
  "comment": "Database implementation for a structure or union.",
  "javadoc": "Database implementation for a structure or union.",
  "static": false,
  "implements": [
    "ghidra.program.model.data.CompositeInternal"
  ],
  "extends": "ghidra.program.database.data.DataTypeDB",
  "fields": [
    {
      "name": "compositeAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.CompositeDBAdapter",
      "type_short": "CompositeDBAdapter",
      "constant_value": null
    },
    {
      "name": "componentAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.ComponentDBAdapter",
      "type_short": "ComponentDBAdapter",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for a composite data type (structure or union).",
      "javadoc": "Constructor for a composite data type (structure or union).\n@param dataMgr the data type manager containing this data type.\n@param cache DataTypeDB object cache\n@param compositeAdapter the database adapter for this data type.\n@param componentAdapter the database adapter for the components of this data\n                         type.\n@param record the database record for this data type.",
      "static": false,
      "params": [
        {
          "name": "dataMgr",
          "type_long": "ghidra.program.database.data.DataTypeManagerDB",
          "type_short": "DataTypeManagerDB",
          "comment": "the data type manager containing this data type."
        },
        {
          "name": "cache",
          "type_long": "ghidra.program.database.DBObjectCache\u003cghidra.program.database.data.DataTypeDB\u003e",
          "type_short": "DBObjectCache",
          "comment": "DataTypeDB object cache"
        },
        {
          "name": "compositeAdapter",
          "type_long": "ghidra.program.database.data.CompositeDBAdapter",
          "type_short": "CompositeDBAdapter",
          "comment": "the database adapter for this data type."
        },
        {
          "name": "componentAdapter",
          "type_long": "ghidra.program.database.data.ComponentDBAdapter",
          "type_short": "ComponentDBAdapter",
          "comment": "the database adapter for the components of this data\n                         type."
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "the database record for this data type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "Perform initialization of instance fields during instantiation or instance\n refresh",
      "javadoc": "Perform initialization of instance fields during instantiation or instance\n refresh",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPreferredComponentLength",
      "comment": "Get the preferred length for a new component. For Unions and internally\n aligned structures the preferred component length for a fixed-length dataType\n will be the length of that dataType. Otherwise the length returned will be no\n larger than the specified length.",
      "javadoc": "Get the preferred length for a new component. For Unions and internally\n aligned structures the preferred component length for a fixed-length dataType\n will be the length of that dataType. Otherwise the length returned will be no\n larger than the specified length.\n@param dataType new component datatype\n@param length constrained length or -1 to force use of dataType size.\n                 Dynamic types such as string must have a positive length\n                 specified.\n@return preferred component length",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "new component datatype"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "constrained length or -1 to force use of dataType size.\n                 Dynamic types such as string must have a positive length\n                 specified."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "preferred component length"
      },
      "throws": []
    },
    {
      "name": "doGetName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doGetCategoryID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateBitFieldDataType",
      "comment": "Handle replacement of datatype which may impact bitfield datatype.",
      "javadoc": "Handle replacement of datatype which may impact bitfield datatype.\n@param bitfieldComponent bitfield component\n@param oldDt affected datatype which has been removed or replaced\n@param newDt replacement datatype\n@return true if bitfield component was modified\n@throws InvalidDataTypeException if bitfield was based upon oldDt but new\n                                  datatype is invalid for a bitfield",
      "static": false,
      "params": [
        {
          "name": "bitfieldComponent",
          "type_long": "ghidra.program.database.data.DataTypeComponentDB",
          "type_short": "DataTypeComponentDB",
          "comment": "bitfield component"
        },
        {
          "name": "oldDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "affected datatype which has been removed or replaced"
        },
        {
          "name": "newDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "replacement datatype"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if bitfield component was modified"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": "if bitfield was based upon oldDt but new\n                                  datatype is invalid for a bitfield"
        }
      ]
    },
    {
      "name": "refresh",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "desc",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasLanguageDependantLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isNotYetDefined",
      "comment": "Determine if this composite should be treated as undefined.\n \n A composite is considered undefined with a zero-length when it has \n no components and packing is disabled.  A DataTypeComponent defined by an\n an datatype which is not-yet-defined (i.e., DataType#isNotYetDefined() is true) \n will always have a size of 1.  If an empty composite should be treated as \n fully specified, packing on the composite should be enabled to ensure that \n a zero-length component is used should the occassion arise (e.g., empty structure \n placed within union as a component).",
      "javadoc": "Determine if this composite should be treated as undefined.\n \u003cp\u003e\n A composite is considered undefined with a zero-length when it has \n no components and packing is disabled.  A {@link DataTypeComponent} defined by an\n an datatype which is not-yet-defined (i.e., {@link DataType#isNotYetDefined()} is true) \n will always have a size of 1.  If an empty composite should be treated as \n fully specified, packing on the composite should be enabled to ensure that \n a zero-length component is used should the occassion arise (e.g., empty structure \n placed within union as a component).",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "fieldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insert",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insert",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeComponent",
        "type_short": "DataTypeComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMnemonic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doSetCategoryPathRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "categoryID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isPartOf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeOfInterest",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkAncestry",
      "comment": "This method throws an exception if the indicated data type is an ancestor of\n this data type. In other words, the specified data type has a component or\n sub-component containing this data type.",
      "javadoc": "This method throws an exception if the indicated data type is an ancestor of\n this data type. In other words, the specified data type has a component or\n sub-component containing this data type.\n@param dataType the data type\n@throws DataTypeDependencyException if the data type is an ancestor of this\n                                     data type.",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeDependencyException",
          "type_short": "DataTypeDependencyException",
          "comment": "if the data type is an ancestor of this\n                                     data type."
        }
      ]
    },
    {
      "name": "doCheckedResolve",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeDependencyException",
          "type_short": "DataTypeDependencyException",
          "comment": ""
        }
      ]
    },
    {
      "name": "doSetNameRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "validateDataType",
      "comment": "This method throws an exception if the indicated data type is not a valid\n data type for a component of this composite data type.  If the DEFAULT \n datatype is specified when unsupported an Undefined1 will be returned \n in its place (e.g., packing enabled, Union).",
      "javadoc": "This method throws an exception if the indicated data type is not a valid\n data type for a component of this composite data type.  If the DEFAULT \n datatype is specified when unsupported an Undefined1 will be returned \n in its place (e.g., packing enabled, Union).\n@param dataType the data type to be checked.\n@return datatype to be used for insert/add\n@throws IllegalArgumentException if the data type is invalid.",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type to be checked."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "datatype to be used for insert/add"
      },
      "throws": []
    },
    {
      "name": "getLastChangeTimeInSourceArchive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLastChangeTime",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLastChangeTime",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "lastChangeTime",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLastChangeTimeInSourceArchive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "lastChangeTime",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUniversalID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.UniversalID",
        "type_short": "UniversalID",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setUniversalID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSourceArchiveID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.UniversalID",
        "type_short": "UniversalID",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSourceArchiveID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNonPackedAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComputedAlignment",
      "comment": "Get computed alignment and optionally update record.  May only be invoked with\n lock acquired.",
      "javadoc": "Get computed alignment and optionally update record.  May only be invoked with\n lock acquired.\n@param updateRecord if true record should be updated without timestamp change\n@return computed alignment",
      "static": false,
      "params": [
        {
          "name": "updateRecord",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true record should be updated without timestamp change"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "computed alignment"
      },
      "throws": []
    },
    {
      "name": "getAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "repack",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "repack",
      "comment": "Repack components within this composite based on the current packing, alignment \n and DataOrganization settings.  Non-packed Structures: change detection\n is limited to component count and length is assumed to already be correct.\n May only be invoked with lock acquired.\n \n NOTE: If modifications to stored length are made prior to invoking this method, \n detection of a size change may not be possible.  \n \n NOTE: Currently a change in calculated alignment can not be provided since\n this value is not stored.",
      "javadoc": "Repack components within this composite based on the current packing, alignment \n and {@link DataOrganization} settings.  Non-packed Structures: change detection\n is limited to component count and length is assumed to already be correct.\n May only be invoked with lock acquired.\n \u003cp\u003e\n NOTE: If modifications to stored length are made prior to invoking this method, \n detection of a size change may not be possible.  \n \u003cp\u003e\n NOTE: Currently a change in calculated alignment can not be provided since\n this value is not stored.\n@param isAutoChange true if changes are in response to another another datatype\u0027s change.\n@param notify if true notification will be sent to parents if a size change\n or component placement change is detected.\n@return true if a layout change was detected.",
      "static": false,
      "params": [
        {
          "name": "isAutoChange",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if changes are in response to another another datatype\u0027s change."
        },
        {
          "name": "notify",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true notification will be sent to parents if a size change\n or component placement change is detected."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a layout change was detected."
      },
      "throws": []
    },
    {
      "name": "getStoredPackingValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPackingType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.PackingType",
        "type_short": "PackingType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExplicitPackingValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setExplicitPackingValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "packingValue",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToDefaultPacking",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStoredPackingValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "packingValue",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAlignmentType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.AlignmentType",
        "type_short": "AlignmentType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToDefaultAligned",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToMachineAligned",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExplicitMinimumAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStoredMinimumAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setExplicitMinimumAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "minimumAlignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStoredMinimumAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "minimumAlignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefinedComponents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.database.data.DataTypeComponentDB[]",
        "type_short": "ghidra.program.database.data.DataTypeComponentDB[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "postPointerResolve",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "definitionDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPackingEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doSetPackingAndAlignment",
      "comment": "Copy packing and alignment settings from specified composite without\n repacking or notification.",
      "javadoc": "Copy packing and alignment settings from specified composite without\n repacking or notification.\n@param composite instance whose packing and alignment are to be copied\n@throws IOException if database IO error occured",
      "static": false,
      "params": [
        {
          "name": "composite",
          "type_long": "ghidra.program.model.data.CompositeInternal",
          "type_short": "CompositeInternal",
          "comment": "instance whose packing and alignment are to be copied"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if database IO error occured"
        }
      ]
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixupComponents",
      "comment": "Perform any neccessary component adjustments based on\n sizes and alignment of components differing from their \n specification which may be influenced by the data organization.\n If this composite changes parents will not be\n notified - handling this is the caller\u0027s responsibility.\n It is assumed that this method is invoked on composites\n in dependency order.",
      "javadoc": "Perform any neccessary component adjustments based on\n sizes and alignment of components differing from their \n specification which may be influenced by the data organization.\n If this composite changes parents will not be\n notified - handling this is the caller\u0027s responsibility.\n It is assumed that this method is invoked on composites\n in dependency order.\n@throws IOException if database IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if database IO error occurs"
        }
      ]
    }
  ]
}
