{
  "name": "SourceArchiveAdapterNoTable",
  "comment": "Adapter needed for a read-only version of data type manager that is not going\n to be upgraded, and there is no Data Type Archive ID table in the data type manager.",
  "javadoc": "Adapter needed for a read-only version of data type manager that is not going\n to be upgraded, and there is no Data Type Archive ID table in the data type manager.",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.database.data.SourceArchiveAdapter",
  "fields": [
    {
      "name": "LOCAL_RECORD",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.DBRecord",
      "type_short": "DBRecord",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Gets a pre-table version of the adapter for the data type archive ID database table.",
      "javadoc": "Gets a pre-table version of the adapter for the data type archive ID database table.\n@param handle handle to the database which doesn\u0027t contain the table.\n@throws VersionException if the the table\u0027s version does not match the expected version\n for this adapter.",
      "static": false,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "handle to the database which doesn\u0027t contain the table."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "deleteTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecords",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cdb.DBRecord\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "updateRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "deleteRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceArchiveID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
