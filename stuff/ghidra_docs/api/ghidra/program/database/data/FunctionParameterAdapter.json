{
  "name": "FunctionParameterAdapter",
  "comment": "Adapter to access the Function Signature Definition Parameters database table.",
  "javadoc": "Adapter to access the Function Signature Definition Parameters database table.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "PARAMETER_TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Function Parameters\""
    },
    {
      "name": "PARAMETER_SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "PARAMETER_PARENT_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "PARAMETER_DT_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "PARAMETER_NAME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "PARAMETER_COMMENT_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "PARAMETER_ORDINAL_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "PARAMETER_DT_LENGTH_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAdapter",
      "comment": "Gets an adapter for working with the function definition parameters database table. The adapter is based \n on the version of the database associated with the specified database handle and the openMode.",
      "javadoc": "Gets an adapter for working with the function definition parameters database table. The adapter is based \n on the version of the database associated with the specified database handle and the openMode.\n@param handle handle to the database to be accessed.\n@param openMode the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE).\n@param monitor the monitor to use for displaying status or for canceling.\n@return the adapter for accessing the table of function definition parameters.\n@throws VersionException if the database handle\u0027s version doesn\u0027t match the expected version.\n@throws IOException if there is trouble accessing the database.",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "handle to the database to be accessed."
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": "the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE)."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor to use for displaying status or for canceling."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.FunctionParameterAdapter",
        "type_short": "FunctionParameterAdapter",
        "comment": "the adapter for accessing the table of function definition parameters."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if the database handle\u0027s version doesn\u0027t match the expected version."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is trouble accessing the database."
        }
      ]
    },
    {
      "name": "findReadOnlyAdapter",
      "comment": "Tries to get a read only adapter for the database whose handle is passed to this method.",
      "javadoc": "Tries to get a read only adapter for the database whose handle is passed to this method.\n@param handle handle to prior version of the database.\n@return the read only Function Definition Parameters table adapter\n@throws VersionException if a read only adapter can\u0027t be obtained for the database handle\u0027s version.",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "handle to prior version of the database."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.FunctionParameterAdapter",
        "type_short": "FunctionParameterAdapter",
        "comment": "the read only Function Definition Parameters table adapter"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if a read only adapter can\u0027t be obtained for the database handle\u0027s version."
        }
      ]
    },
    {
      "name": "upgrade",
      "comment": "Upgrades the Function Definition Parameters table from the oldAdapter\u0027s version to the \n current version.",
      "javadoc": "Upgrades the Function Definition Parameters table from the oldAdapter\u0027s version to the \n current version.\n@param handle handle to the database whose table is to be upgraded to a newer version.\n@param oldAdapter the adapter for the existing table to be upgraded.\n@return the adapter for the new upgraded version of the table.\n@throws VersionException if the the table\u0027s version does not match the expected version\n for this adapter.\n@throws IOException if the database can\u0027t be read or written.",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "handle to the database whose table is to be upgraded to a newer version."
        },
        {
          "name": "oldAdapter",
          "type_long": "ghidra.program.database.data.FunctionParameterAdapter",
          "type_short": "FunctionParameterAdapter",
          "comment": "the adapter for the existing table to be upgraded."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.FunctionParameterAdapter",
        "type_short": "FunctionParameterAdapter",
        "comment": "the adapter for the new upgraded version of the table."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if the the table\u0027s version does not match the expected version\n for this adapter."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be read or written."
        }
      ]
    },
    {
      "name": "getRecords",
      "comment": "Gets an iterator over all function definition parameter data type records.",
      "javadoc": "Gets an iterator over all function definition parameter data type records.\n@return the parameter data type record iterator.\n@throws IOException if the database can\u0027t be accessed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": "the parameter data type record iterator."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be accessed."
        }
      ]
    },
    {
      "name": "deleteTable",
      "comment": "Delete underlying database table",
      "javadoc": "Delete underlying database table\n@param handle database handle\n@throws IOException if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "database handle"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    },
    {
      "name": "createRecord",
      "comment": "Create new parameter definition record",
      "javadoc": "Create new parameter definition record\n@param dataTypeID parameter datatype ID\n@param parentID parent function definition ID\n@param ordinal parameter ordinal\n@param name parameter name\n@param comment parameter comment\n@param dtLength datatype length if required, else -1\n@return new record\n@throws IOException if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "parameter datatype ID"
        },
        {
          "name": "parentID",
          "type_long": "long",
          "type_short": "long",
          "comment": "parent function definition ID"
        },
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": "parameter ordinal"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parameter name"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parameter comment"
        },
        {
          "name": "dtLength",
          "type_long": "int",
          "type_short": "int",
          "comment": "datatype length if required, else -1"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "new record"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Get parameter definition record",
      "javadoc": "Get parameter definition record\n@param parameterID parameter record ID\n@return parameter definition record or null\n@throws IOException if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "parameterID",
          "type_long": "long",
          "type_short": "long",
          "comment": "parameter record ID"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "parameter definition record or null"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    },
    {
      "name": "updateRecord",
      "comment": "Updates the function definition parameter data type table with the provided record.",
      "javadoc": "Updates the function definition parameter data type table with the provided record.\n@param record the new record\n@throws IOException if the database can\u0027t be accessed.",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "the new record"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be accessed."
        }
      ]
    },
    {
      "name": "removeRecord",
      "comment": "Removes the function definition parameter data type record with the specified ID.",
      "javadoc": "Removes the function definition parameter data type record with the specified ID.\n@param parameterID the ID of the data type.\n@return true if the record is removed.\n@throws IOException if the database can\u0027t be accessed.",
      "static": false,
      "params": [
        {
          "name": "parameterID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID of the data type."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the record is removed."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be accessed."
        }
      ]
    },
    {
      "name": "getParameterIdsInFunctionDef",
      "comment": "Get parameter definition IDs for specified function definition",
      "javadoc": "Get parameter definition IDs for specified function definition\n@param functionDefID function definition ID\n@return parameter definition IDs as LongField values within Field array\n@throws IOException if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "functionDefID",
          "type_long": "long",
          "type_short": "long",
          "comment": "function definition ID"
        }
      ],
      "return": {
        "type_long": "db.Field[]",
        "type_short": "db.Field[]",
        "comment": "parameter definition IDs as LongField values within Field array"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    }
  ]
}
