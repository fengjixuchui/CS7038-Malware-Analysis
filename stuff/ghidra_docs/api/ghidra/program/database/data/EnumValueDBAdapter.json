{
  "name": "EnumValueDBAdapter",
  "comment": "Adapter to access the Enumeration data type values tables.",
  "javadoc": "Adapter to access the Enumeration data type values tables.",
  "static": false,
  "implements": [
    "db.RecordTranslator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "ENUM_VALUE_TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Enumeration Values\""
    },
    {
      "name": "ENUM_VALUE_SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "ENUMVAL_NAME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "ENUMVAL_VALUE_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "ENUMVAL_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "ENUMVAL_COMMENT_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAdapter",
      "comment": "Gets an adapter for working with the enumeration data type values database table. The adapter is based\n on the version of the database associated with the specified database handle and the openMode.",
      "javadoc": "Gets an adapter for working with the enumeration data type values database table. The adapter is based\n on the version of the database associated with the specified database handle and the openMode.\n@param handle handle to the database to be accessed.\n@param openMode the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE).\n@param monitor the monitor to use for displaying status or for canceling.\n@return the adapter for accessing the table of enumeration data type values.\n@throws VersionException if the database handle\u0027s version doesn\u0027t match the expected version.\n@throws IOException if there is trouble accessing the database.",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "handle to the database to be accessed."
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": "the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE)."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor to use for displaying status or for canceling."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.EnumValueDBAdapter",
        "type_short": "EnumValueDBAdapter",
        "comment": "the adapter for accessing the table of enumeration data type values."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if the database handle\u0027s version doesn\u0027t match the expected version."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is trouble accessing the database."
        }
      ]
    },
    {
      "name": "findReadOnlyAdapter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.EnumValueDBAdapter",
        "type_short": "EnumValueDBAdapter",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "upgrade",
      "comment": "Upgrades the Enumeration Data Type Values table from the oldAdapter\u0027s version to the current\n version.",
      "javadoc": "Upgrades the Enumeration Data Type Values table from the oldAdapter\u0027s version to the current\n version.\n@param handle handle to the database whose table is to be upgraded to a newer version.\n@param oldAdapter the adapter for the existing table to be upgraded.\n@return the adapter for the new upgraded version of the table.\n@throws VersionException if the the table\u0027s version does not match the expected version\n for this adapter.\n@throws IOException if the database can\u0027t be read or written.",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "handle to the database whose table is to be upgraded to a newer version."
        },
        {
          "name": "oldAdapter",
          "type_long": "ghidra.program.database.data.EnumValueDBAdapter",
          "type_short": "EnumValueDBAdapter",
          "comment": "the adapter for the existing table to be upgraded."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.EnumValueDBAdapter",
        "type_short": "EnumValueDBAdapter",
        "comment": "the adapter for the new upgraded version of the table."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if the the table\u0027s version does not match the expected version\n for this adapter."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be read or written."
        }
      ]
    },
    {
      "name": "createRecord",
      "comment": "Create new enum value record corresponding to specified enum datatype ID",
      "javadoc": "Create new enum value record corresponding to specified enum datatype ID\n@param enumID enum datatype ID\n@param name value name\n@param value numeric value\n@param comment the field comment\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "enumID",
          "type_long": "long",
          "type_short": "long",
          "comment": "enum datatype ID"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "value name"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "numeric value"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the field comment"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Get enum value record which corresponds to specified value record ID",
      "javadoc": "Get enum value record which corresponds to specified value record ID\n@param valueID value record ID\n@return value record or null\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "valueID",
          "type_long": "long",
          "type_short": "long",
          "comment": "value record ID"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "value record or null"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecords",
      "comment": "Returns an iterator over the value records inside of this Enum",
      "javadoc": "Returns an iterator over the value records inside of this Enum\n@return the iterator\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": "the iterator"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "deleteTable",
      "comment": "Deletes the table; used when upgrading",
      "javadoc": "Deletes the table; used when upgrading\n@param handle the handle used to delete the table\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "the handle used to delete the table"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "removeRecord",
      "comment": "Remove the record for the given enum Value ID.",
      "javadoc": "Remove the record for the given enum Value ID.\n@param valueID ID of the value record to delete\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "valueID",
          "type_long": "long",
          "type_short": "long",
          "comment": "ID of the value record to delete"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "updateRecord",
      "comment": "Updates the enum data type values table with the provided record.",
      "javadoc": "Updates the enum data type values table with the provided record.\n@param record the new record\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "the new record"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getValueIdsInEnum",
      "comment": "Get enum value record IDs which correspond to specified enum datatype ID",
      "javadoc": "Get enum value record IDs which correspond to specified enum datatype ID\n@param enumID enum datatype ID\n@return enum value record IDs as LongField values within Field array\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "enumID",
          "type_long": "long",
          "type_short": "long",
          "comment": "enum datatype ID"
        }
      ],
      "return": {
        "type_long": "db.Field[]",
        "type_short": "db.Field[]",
        "comment": "enum value record IDs as LongField values within Field array"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    }
  ]
}
