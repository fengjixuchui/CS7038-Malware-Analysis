{
  "name": "ComponentDBAdapter",
  "comment": "Adapter to access the Component database table.",
  "javadoc": "Adapter to access the Component database table.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "COMPONENT_TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Component Data Types\""
    },
    {
      "name": "COMPONENT_SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "COMPONENT_PARENT_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "COMPONENT_OFFSET_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "COMPONENT_DT_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "COMPONENT_FIELD_NAME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "COMPONENT_COMMENT_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "COMPONENT_SIZE_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "COMPONENT_ORDINAL_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAdapter",
      "comment": "Gets an adapter for working with the component data type database table. Components are \n used to specify the individual elements of a composite data type. The adapter is based \n on the version of the database associated with the specified database handle and the openMode.",
      "javadoc": "Gets an adapter for working with the component data type database table. Components are \n used to specify the individual elements of a composite data type. The adapter is based \n on the version of the database associated with the specified database handle and the openMode.\n@param handle handle to the database to be accessed.\n@param openMode the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE).\n@param monitor the monitor to use for displaying status or for canceling.\n@return the adapter for accessing the table of component data types.\n@throws VersionException if the database handle\u0027s version doesn\u0027t match the expected version.\n@throws IOException if there is a problem accessing the database.",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "handle to the database to be accessed."
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": "the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE)."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor to use for displaying status or for canceling."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.ComponentDBAdapter",
        "type_short": "ComponentDBAdapter",
        "comment": "the adapter for accessing the table of component data types."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if the database handle\u0027s version doesn\u0027t match the expected version."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem accessing the database."
        }
      ]
    },
    {
      "name": "createRecord",
      "comment": "Creates a database record for a component data type (an individual member of a composite data type).",
      "javadoc": "Creates a database record for a component data type (an individual member of a composite data type).\n@param dataTypeID the ID of the data type for this component.\n@param parentID the ID of the data type that this component is a part of.\n@param length the total length of this component.\n@param ordinal the component\u0027s ordinal.\n@param offset the component\u0027s offset.\n@param name the component\u0027s name.\n@param comment a comment about this component\n@return the component data type record.\n@throws IOException if there is a problem accessing the database.",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID of the data type for this component."
        },
        {
          "name": "parentID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID of the data type that this component is a part of."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the total length of this component."
        },
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": "the component\u0027s ordinal."
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the component\u0027s offset."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the component\u0027s name."
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a comment about this component"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "the component data type record."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem accessing the database."
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Gets the record for the indicated component data type.",
      "javadoc": "Gets the record for the indicated component data type.\n@param componentID the ID of the component data type to retrieve.\n@return the component record\n@throws IOException if there is a problem accessing the database.",
      "static": false,
      "params": [
        {
          "name": "componentID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID of the component data type to retrieve."
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "the component record"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem accessing the database."
        }
      ]
    },
    {
      "name": "removeRecord",
      "comment": "Removes the component data type record with the specified ID.",
      "javadoc": "Removes the component data type record with the specified ID.\n@param componentID the ID of the component data type.\n@return true if the record is removed.\n@throws IOException if there is a problem accessing the database.",
      "static": false,
      "params": [
        {
          "name": "componentID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID of the component data type."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the record is removed."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem accessing the database."
        }
      ]
    },
    {
      "name": "updateRecord",
      "comment": "Updates the component data type table with the provided record.",
      "javadoc": "Updates the component data type table with the provided record.\n@param record the new record\n@throws IOException if there is a problem accessing the database.",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "the new record"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem accessing the database."
        }
      ]
    },
    {
      "name": "getComponentIdsInComposite",
      "comment": "Gets an array with all of the IDs of the defined components within the composite data type indicated.",
      "javadoc": "Gets an array with all of the IDs of the defined components within the composite data type indicated.\n@param compositeID the ID of the composite data type whose components are desired.\n@return an array of the defined component IDs as LongField values within Field array.\n@throws IOException if there is a problem accessing the database.",
      "static": false,
      "params": [
        {
          "name": "compositeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID of the composite data type whose components are desired."
        }
      ],
      "return": {
        "type_long": "db.Field[]",
        "type_short": "db.Field[]",
        "comment": "an array of the defined component IDs as LongField values within Field array."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem accessing the database."
        }
      ]
    }
  ]
}
