{
  "name": "BuiltinDBAdapter",
  "comment": "Database adapter for managing built-in data types.",
  "javadoc": "Database adapter for managing built-in data types.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "BUILT_IN_NAME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "BUILT_IN_CLASSNAME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "BUILT_IN_CAT_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAdapter",
      "comment": "Gets an adapter for working with the built-in data type database table. The adapter is based \n on the version of the database associated with the specified database handle and the openMode.",
      "javadoc": "Gets an adapter for working with the built-in data type database table. The adapter is based \n on the version of the database associated with the specified database handle and the openMode.\n@param handle handle to the database to be accessed.\n@param openMode the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE).\n@param monitor the monitor to use for displaying status or for canceling.\n@return the adapter for accessing the table of built-in data types.\n@throws VersionException if the database handle\u0027s version doesn\u0027t match the expected version.\n@throws IOException if there was a problem accessing the database",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "handle to the database to be accessed."
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": "the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE)."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor to use for displaying status or for canceling."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.BuiltinDBAdapter",
        "type_short": "BuiltinDBAdapter",
        "comment": "the adapter for accessing the table of built-in data types."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if the database handle\u0027s version doesn\u0027t match the expected version."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "createRecord",
      "comment": "Create a new built in types record.",
      "javadoc": "Create a new built in types record.\n@param name data type name\n@param className class name for data type\n@param categoryID ID of the parent category\n@return new record\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "data type name"
        },
        {
          "name": "className",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "class name for data type"
        },
        {
          "name": "categoryID",
          "type_long": "long",
          "type_short": "long",
          "comment": "ID of the parent category"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "new record"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Gets the Built-in data type record with the indicated ID.",
      "javadoc": "Gets the Built-in data type record with the indicated ID.\n@param dataTypeID the data type\u0027s ID.\n@return the record for the Built-in data type.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the data type\u0027s ID."
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "the record for the Built-in data type."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecordIdsInCategory",
      "comment": "Returns an array containing the data type IDs for the given category ID",
      "javadoc": "Returns an array containing the data type IDs for the given category ID\n@param categoryID category ID\n@return an array of the data type IDs as LongFields within Field array; \n empty array if no built-in data types found.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "categoryID",
          "type_long": "long",
          "type_short": "long",
          "comment": "category ID"
        }
      ],
      "return": {
        "type_long": "db.Field[]",
        "type_short": "db.Field[]",
        "comment": "an array of the data type IDs as LongFields within Field array; \n empty array if no built-in data types found."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "updateRecord",
      "comment": "Update the built-ins table with the given record.",
      "javadoc": "Update the built-ins table with the given record.\n@param record the new record\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "the new record"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "removeRecord",
      "comment": "Remove the record with the given dataID.",
      "javadoc": "Remove the record with the given dataID.\n@param dataID key\n@return true if record was deleted successfully.\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "dataID",
          "type_long": "long",
          "type_short": "long",
          "comment": "key"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if record was deleted successfully."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecords",
      "comment": "Returns an iterator over all records for built-in data types.",
      "javadoc": "Returns an iterator over all records for built-in data types.\n@return record iterator\n@throws IOException if IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": "record iterator"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    }
  ]
}
