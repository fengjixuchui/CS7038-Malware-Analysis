{
  "name": "SettingsDBAdapter",
  "comment": "Adapter to access the default settings and instance settings database tables.",
  "javadoc": "Adapter to access the default settings and instance settings database tables.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "SETTINGS_TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Default Settings\""
    },
    {
      "name": "SETTINGS_SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "SETTINGS_DT_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "SETTINGS_NAME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "SETTINGS_LONG_VALUE_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "SETTINGS_STRING_VALUE_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "SETTINGS_BYTE_VALUE_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAdapter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.SettingsDBAdapter",
        "type_short": "SettingsDBAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRecordCount",
      "comment": "Returns number of settings records",
      "javadoc": "Returns number of settings records\n@return total settings record count",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "total settings record count"
      },
      "throws": []
    },
    {
      "name": "createSettingsRecord",
      "comment": "Create a default settings record.",
      "javadoc": "Create a default settings record.\n@param dataTypeID data type ID associated with the setting\n@param name name of the setting\n@param strValue string value; null if setting is not String\n@param longValue long value; -1 if setting is not a long\n@param byteValue byte array value; null if setting is not a byte array\n@return new record\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "data type ID associated with the setting"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the setting"
        },
        {
          "name": "strValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string value; null if setting is not String"
        },
        {
          "name": "longValue",
          "type_long": "long",
          "type_short": "long",
          "comment": "long value; -1 if setting is not a long"
        },
        {
          "name": "byteValue",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array value; null if setting is not a byte array"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "new record"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getSettingsKeys",
      "comment": "Get settings record keys for the default settings corresponding to the \n specified data type ID.",
      "javadoc": "Get settings record keys for the default settings corresponding to the \n specified data type ID.\n@param dataTypeID datatype ID\n@return settings record keys returned as LongFields within Field array\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "datatype ID"
        }
      ],
      "return": {
        "type_long": "db.Field[]",
        "type_short": "db.Field[]",
        "comment": "settings record keys returned as LongFields within Field array"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "removeSettingsRecord",
      "comment": "Remove the default settings record.",
      "javadoc": "Remove the default settings record.\n@param settingsID key for the record\n@return true if the record was deleted\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "settingsID",
          "type_long": "long",
          "type_short": "long",
          "comment": "key for the record"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the record was deleted"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getSettingsRecord",
      "comment": "Get the default settings record.",
      "javadoc": "Get the default settings record.\n@param settingsID key for the record\n@return record corresponding to settingsID or null\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "settingsID",
          "type_long": "long",
          "type_short": "long",
          "comment": "key for the record"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "record corresponding to settingsID or null"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "updateSettingsRecord",
      "comment": "Update the default settings record in the table.",
      "javadoc": "Update the default settings record in the table.\n@param record the new record\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "the new record"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    }
  ]
}
