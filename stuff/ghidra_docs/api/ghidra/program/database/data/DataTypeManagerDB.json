{
  "name": "DataTypeManagerDB",
  "comment": "Base class for DB-backed data type managers. \n Important Notes:\n \n When invoking DataType#isEquivalent(DataType) involving\n DataTypeDB objects it is important to invoke the method on DataTypeDB. This\n will ensure that the internal optimization mechanisms are used.\n It is important that the use of DataType#clone(DataTypeManager)\n and DataType#copy(DataTypeManager) be avoided when possible to ensure\n full benefit of the #equivalenceCache and #resolveCache.\n ",
  "javadoc": "Base class for DB-backed data type managers. \u003cbr\u003e\n Important Notes:\n \u003cul\u003e\n \u003cli\u003eWhen invoking {@link DataType#isEquivalent(DataType)} involving\n DataTypeDB objects it is important to invoke the method on DataTypeDB. This\n will ensure that the internal optimization mechanisms are used.\u003c/li\u003e\n \u003cli\u003eIt is important that the use of {@link DataType#clone(DataTypeManager)}\n and {@link DataType#copy(DataTypeManager)} be avoided when possible to ensure\n full benefit of the {@link #equivalenceCache} and {@link #resolveCache}.\u003c/li\u003e\n \u003c/ul\u003e",
  "static": false,
  "implements": [
    "ghidra.program.model.data.DataTypeManager"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "ROOT_CATEGORY_ID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "BUILT_IN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "COMPOSITE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "COMPONENT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "ARRAY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "POINTER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "TYPEDEF",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "FUNCTION_DEF",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "PARAMETER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "7"
    },
    {
      "name": "ENUM",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "BITFIELD",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "9"
    },
    {
      "name": "DATA_TYPE_KIND_SHIFT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "56"
    },
    {
      "name": "builtinAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.BuiltinDBAdapter",
      "type_short": "BuiltinDBAdapter",
      "constant_value": null
    },
    {
      "name": "componentAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.ComponentDBAdapter",
      "type_short": "ComponentDBAdapter",
      "constant_value": null
    },
    {
      "name": "compositeAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.CompositeDBAdapter",
      "type_short": "CompositeDBAdapter",
      "constant_value": null
    },
    {
      "name": "arrayAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.ArrayDBAdapter",
      "type_short": "ArrayDBAdapter",
      "constant_value": null
    },
    {
      "name": "pointerAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.PointerDBAdapter",
      "type_short": "PointerDBAdapter",
      "constant_value": null
    },
    {
      "name": "typedefAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.TypedefDBAdapter",
      "type_short": "TypedefDBAdapter",
      "constant_value": null
    },
    {
      "name": "settingsAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.SettingsDBAdapter",
      "type_short": "SettingsDBAdapter",
      "constant_value": null
    },
    {
      "name": "instanceSettingsAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.InstanceSettingsDBAdapter",
      "type_short": "InstanceSettingsDBAdapter",
      "constant_value": null
    },
    {
      "name": "categoryAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.CategoryDBAdapter",
      "type_short": "CategoryDBAdapter",
      "constant_value": null
    },
    {
      "name": "functionDefAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.FunctionDefinitionDBAdapter",
      "type_short": "FunctionDefinitionDBAdapter",
      "constant_value": null
    },
    {
      "name": "paramAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.FunctionParameterAdapter",
      "type_short": "FunctionParameterAdapter",
      "constant_value": null
    },
    {
      "name": "enumAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.EnumDBAdapter",
      "type_short": "EnumDBAdapter",
      "constant_value": null
    },
    {
      "name": "enumValueAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.EnumValueDBAdapter",
      "type_short": "EnumValueDBAdapter",
      "constant_value": null
    },
    {
      "name": "parentChildAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.ParentChildAdapter",
      "type_short": "ParentChildAdapter",
      "constant_value": null
    },
    {
      "name": "sourceArchiveAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.SourceArchiveAdapter",
      "type_short": "SourceArchiveAdapter",
      "constant_value": null
    },
    {
      "name": "dbHandle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.DBHandle",
      "type_short": "DBHandle",
      "constant_value": null
    },
    {
      "name": "addrMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.map.AddressMap",
      "type_short": "AddressMap",
      "constant_value": null
    },
    {
      "name": "errHandler",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "db.util.ErrorHandler",
      "type_short": "ErrorHandler",
      "constant_value": null
    },
    {
      "name": "currentHandler",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
      "type_short": "DataTypeConflictHandler",
      "constant_value": null
    },
    {
      "name": "root",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.CategoryDB",
      "type_short": "CategoryDB",
      "constant_value": null
    },
    {
      "name": "dtCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.DBObjectCache\u003cghidra.program.database.data.DataTypeDB\u003e",
      "type_short": "DBObjectCache",
      "constant_value": null
    },
    {
      "name": "sourceArchiveDBCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.DBObjectCache\u003cghidra.program.database.data.SourceArchiveDB\u003e",
      "type_short": "DBObjectCache",
      "constant_value": null
    },
    {
      "name": "builtInMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "builtIn2IdMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cghidra.program.model.data.DataType,java.lang.Long\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "catCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.DBObjectCache\u003cghidra.program.database.data.CategoryDB\u003e",
      "type_short": "DBObjectCache",
      "constant_value": null
    },
    {
      "name": "settingsCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.SettingsCache",
      "type_short": "SettingsCache",
      "constant_value": null
    },
    {
      "name": "sortedDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "enumValueMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Long,java.util.Set\u003cjava.lang.String\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "invalidatedListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.data.InvalidatedListener\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "defaultListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataTypeManagerChangeListenerHandler",
      "type_short": "DataTypeManagerChangeListenerHandler",
      "constant_value": null
    },
    {
      "name": "nameComparator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.DataTypeManagerDB.NameComparator",
      "type_short": "NameComparator",
      "constant_value": null
    },
    {
      "name": "creatingDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "universalID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.UniversalID",
      "type_short": "UniversalID",
      "constant_value": null
    },
    {
      "name": "sourceArchiveMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cghidra.util.UniversalID,ghidra.program.model.data.SourceArchive\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "idsToDelete",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.LinkedList\u003cjava.lang.Long\u003e",
      "type_short": "LinkedList",
      "constant_value": null
    },
    {
      "name": "favoritesList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "idsToDataTypeMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.data.DataTypeManagerDB.IdsToDataTypeMap",
      "type_short": "IdsToDataTypeMap",
      "constant_value": null
    },
    {
      "name": "equivalenceCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.ThreadLocal\u003cghidra.program.database.data.DataTypeManagerDB.EquivalenceCache\u003e",
      "type_short": "ThreadLocal",
      "constant_value": null
    },
    {
      "name": "resolveCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.IdentityHashMap\u003cghidra.program.model.data.DataType,ghidra.program.model.data.DataType\u003e",
      "type_short": "IdentityHashMap",
      "constant_value": null
    },
    {
      "name": "resolveQueue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.TreeSet\u003cghidra.program.database.data.DataTypeManagerDB.ResolvePair\u003e",
      "type_short": "TreeSet",
      "constant_value": null
    },
    {
      "name": "isBulkRemoving",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "lock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.Lock",
      "type_short": "Lock",
      "constant_value": null
    },
    {
      "name": "dataOrganization",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataOrganization",
      "type_short": "DataOrganization",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new temporary data-type manager. Note that this manager does not\n support the save or saveAs operation.",
      "javadoc": "Construct a new temporary data-type manager. Note that this manager does not\n support the save or saveAs operation.\n@param dataOrganization applicable data organization",
      "static": false,
      "params": [
        {
          "name": "dataOrganization",
          "type_long": "ghidra.program.model.data.DataOrganization",
          "type_short": "DataOrganization",
          "comment": "applicable data organization"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for a data-type manager backed by a packed database file. When\n opening for UPDATE an automatic upgrade will be performed if required.\n NOTE: default DataOrganization will be used.",
      "javadoc": "Constructor for a data-type manager backed by a packed database file. When\n opening for UPDATE an automatic upgrade will be performed if required.\n NOTE: default DataOrganization will be used.\n@param packedDBfile packed datatype archive file (i.e., *.gdt resource).\n@param openMode open mode CREATE, READ_ONLY or UPDATE (see\n                     {@link DBConstants})\n@throws IOException a low-level IO error. This exception may also be thrown\n                     when a version error occurs (cause is VersionException).",
      "static": false,
      "params": [
        {
          "name": "packedDBfile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "packed datatype archive file (i.e., *.gdt resource)."
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": "open mode CREATE, READ_ONLY or UPDATE (see\n                     DBConstants)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "a low-level IO error. This exception may also be thrown\n                     when a version error occurs (cause is VersionException)."
        }
      ]
    },
    {
      "name": "initPackedDatabase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "packedDBfile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": ""
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param handle database handle\n@param addrMap map to convert addresses to longs and longs to addresses\n@param openMode mode to open the DataTypeManager in\n@param errHandler the error handler\n@param lock database lock\n@param monitor the current task monitor\n@throws CancelledException if an upgrade is cancelled\n@throws IOException if there is a problem reading the database\n@throws VersionException if any database handle\u0027s version doesn\u0027t match the expected version",
      "static": false,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "database handle"
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": "map to convert addresses to longs and longs to addresses"
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": "mode to open the DataTypeManager in"
        },
        {
          "name": "errHandler",
          "type_long": "db.util.ErrorHandler",
          "type_short": "ErrorHandler",
          "comment": "the error handler"
        },
        {
          "name": "lock",
          "type_long": "ghidra.util.Lock",
          "type_short": "Lock",
          "comment": "database lock"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the current task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if an upgrade is cancelled"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem reading the database"
        },
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if any database handle\u0027s version doesn\u0027t match the expected version"
        }
      ]
    },
    {
      "name": "init",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "initializeAdapters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "initializedParentChildTable",
      "comment": "Build Parent/Child table for tracking dataType usage by other dataTypes\n (e.g., arrays, pointers, etc.). Only used to populate the ParentChildAdapter\n table following an upgrade because it did not previously exist. This could\n not be accomplished by the adapter during instantiation because we must be\n able to instantiate all dataTypes to accomplish this.",
      "javadoc": "Build Parent/Child table for tracking dataType usage by other dataTypes\n (e.g., arrays, pointers, etc.). Only used to populate the ParentChildAdapter\n table following an upgrade because it did not previously exist. This could\n not be accomplished by the adapter during instantiation because we must be\n able to instantiate all dataTypes to accomplish this.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isTransactionActive",
      "comment": "Determine if transaction is active.  With proper lock established\n this method may be useful for determining if a lazy record update\n may be performed.",
      "javadoc": "Determine if transaction is active.  With proper lock established\n this method may be useful for determining if a lazy record update\n may be performed.\n@return true if database transaction if active, else false",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if database transaction if active, else false"
      },
      "throws": []
    },
    {
      "name": "getDomainFileID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildSortedDataTypeList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildEnumValueMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeDataTypeFromSortedList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypePath",
          "type_long": "ghidra.program.model.data.DataTypePath",
          "type_short": "DataTypePath",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insertDataTypeIntoSortedList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "popuplateDataTypeList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "populateEnumValueMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "map",
          "type_long": "java.util.Map\u003cjava.lang.Long,java.util.Set\u003cjava.lang.String\u003e\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUniversalID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.UniversalID",
        "type_short": "UniversalID",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFavorites",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isFavorite",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFavorite",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "isFavorite",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveConflict",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        },
        {
          "name": "addedDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "existingDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeConflictHandler.ConflictResult",
        "type_short": "ConflictResult",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUniqueName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": ""
        },
        {
          "name": "baseName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUniqueName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "path1",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": ""
        },
        {
          "name": "path2",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": ""
        },
        {
          "name": "baseName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCategory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCategoryDB",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.CategoryDB",
        "type_short": "CategoryDB",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createCategoryDB",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "ghidra.program.database.data.CategoryDB",
          "type_short": "CategoryDB",
          "comment": ""
        },
        {
          "name": "categoryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.CategoryDB",
        "type_short": "CategoryDB",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getCategory",
      "comment": "Get the category for the given ID.",
      "javadoc": "Get the category for the given ID.\n@return null if no category exists with the given ID.",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": "null if no category exists with the given ID."
      },
      "throws": []
    },
    {
      "name": "resolve",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveBuiltIn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveBitFieldDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "bitFieldDataType",
          "type_long": "ghidra.program.model.data.BitFieldDataType",
          "type_short": "BitFieldDataType",
          "comment": ""
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveNoSourceDataType",
      "comment": "Either finds an equivalent dataType with the same categoryPath and name (or\n conflict name) to the given dataType. Otherwise, it creates a new dataType in\n this archive equivalent to the given dataType. If a dataType exists with same\n path and name but is not equivalent, the handler will resolve the problem in\n one of 3 ways. 1) A new dataType will be created, but with a .conflict name\n 2) The existing dataType will be replaced by a resolved copy of the given\n dataType. 3) The existing dataType will be returned instead of a resolved\n version of the given dataType.",
      "javadoc": "Either finds an equivalent dataType with the same categoryPath and name (or\n conflict name) to the given dataType. Otherwise, it creates a new dataType in\n this archive equivalent to the given dataType. If a dataType exists with same\n path and name but is not equivalent, the handler will resolve the problem in\n one of 3 ways. 1) A new dataType will be created, but with a .conflict name\n 2) The existing dataType will be replaced by a resolved copy of the given\n dataType. 3) The existing dataType will be returned instead of a resolved\n version of the given dataType.\n@param dataType the dataType for which to return an equivalent dataType in\n                 this manager\n@param handler Used to handle collisions with dataTypes with same path and\n                 name that is\n@return resolved datatype",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the dataType for which to return an equivalent dataType in\n                 this manager"
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": "Used to handle collisions with dataTypes with same path and\n                 name that is"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "resolved datatype"
      },
      "throws": []
    },
    {
      "name": "renameToUnusedConflictName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateExistingDataType",
      "comment": "When performing a replacement during conflict resolution, this method handles\n an update approach for structure and union replacement.",
      "javadoc": "When performing a replacement during conflict resolution, this method handles\n an update approach for structure and union replacement.\n@param existingDataType existing datatype\n@param dataType new datatype\n@return true if replacement approach was successful, else false\n@throws DataTypeDependencyException if datatype contains dependency issues\n                                     during resolve process",
      "static": false,
      "params": [
        {
          "name": "existingDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "existing datatype"
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "new datatype"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if replacement approach was successful, else false"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeDependencyException",
          "type_short": "DataTypeDependencyException",
          "comment": "if datatype contains dependency issues\n                                     during resolve process"
        }
      ]
    },
    {
      "name": "getUnusedConflictName",
      "comment": "This method gets a \".conflict\" name that is not currently used by any data\n types in the indicated category of the data type manager.",
      "javadoc": "This method gets a \".conflict\" name that is not currently used by any data\n types in the indicated category of the data type manager.\n@param path the category path of the category where the new data type live in\n             the data type manager.\n@param name The name of the data type. This name may or may not contain\n             \".conflict\" as part of it. If the name contains \".conflict\", only\n             the part of the name that comes prior to the \".conflict\" will be\n             used to determine a new unused conflict name.\n@return the unused conflict name",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the category path of the category where the new data type live in\n             the data type manager."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the data type. This name may or may not contain\n             \".conflict\" as part of it. If the name contains \".conflict\", only\n             the part of the name that comes prior to the \".conflict\" will be\n             used to determine a new unused conflict name."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the unused conflict name"
      },
      "throws": []
    },
    {
      "name": "isEquivalentDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addedDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "existingDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findEquivalentDataTypeSameLocation",
      "comment": "Finds an datatype in this manager that is equivalent and has the same\n categoryPath and has either the same name or a conflict variation of that\n name.",
      "javadoc": "Finds an datatype in this manager that is equivalent and has the same\n categoryPath and has either the same name or a conflict variation of that\n name.\n@param dataType the dataType for which to find an equivalent existing\n                 dataType",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the dataType for which to find an equivalent existing\n                 dataType"
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveDataTypeWithSource",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "replaceEquivalentLocalWithSourceDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        },
        {
          "name": "existingDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isLocalSource",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "originalDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypes",
          "type_long": "java.util.Collection\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "Collection",
          "comment": ""
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "resolveSourceArchive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.SourceArchive",
        "type_short": "SourceArchive",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeSourceArchive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disassociateAllDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceArchiveID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "replaceDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "existingDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "replacementDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "updateCategoryPath",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeDependencyException",
          "type_short": "DataTypeDependencyException",
          "comment": ""
        }
      ]
    },
    {
      "name": "replace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "existingDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "replacementDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.DataTypeDependencyException",
          "type_short": "DataTypeDependencyException",
          "comment": ""
        }
      ]
    },
    {
      "name": "replaceUsesInOtherDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "existingDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "newDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "replaceDataTypeIDs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "oldID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "newID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "replaceSourceArchive",
      "comment": "Replace one source archive (oldDTM) with another (newDTM). Any data types\n whose source was the oldDTM will be changed to have a source that is the\n newDTM. The oldDTM will no longer be referenced as a source by this data type\n manager.",
      "javadoc": "Replace one source archive (oldDTM) with another (newDTM). Any data types\n whose source was the oldDTM will be changed to have a source that is the\n newDTM. The oldDTM will no longer be referenced as a source by this data type\n manager.\n@param oldSourceArchive data type manager for the old source archive\n@param newSourceArchive data type manager for the new source archive\n@throws IllegalArgumentException if the oldDTM isn\u0027t currently a source\n                                  archive for this data type manager or if the\n                                  old and new source archives already have the\n                                  same unique ID.",
      "static": false,
      "params": [
        {
          "name": "oldSourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": "data type manager for the old source archive"
        },
        {
          "name": "newSourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": "data type manager for the new source archive"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "list",
          "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "list",
          "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "caseSensitive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypePath",
          "type_long": "ghidra.program.model.data.DataTypePath",
          "type_short": "DataTypePath",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findEnumValueNames",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "enumValueNames",
          "type_long": "java.util.Set\u003cjava.lang.String\u003e",
          "type_short": "Set",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getResolvedID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDependencyConflictHandler",
      "comment": "Get the datatype conflict handler to be used when resolving\n datatype dependencies",
      "javadoc": "Get the datatype conflict handler to be used when resolving\n datatype dependencies\n@return dependency datatype conflict handler",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
        "type_short": "DataTypeConflictHandler",
        "comment": "dependency datatype conflict handler"
      },
      "throws": []
    },
    {
      "name": "getID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addInvalidatedListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.program.model.data.InvalidatedListener",
          "type_short": "InvalidatedListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeInvalidatedListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.program.model.data.InvalidatedListener",
          "type_short": "InvalidatedListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fireInvalidated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeInternal",
      "comment": "Remove the given datatype from this manager (assumes the lock has already been acquired).",
      "javadoc": "Remove the given datatype from this manager (assumes the lock has already been acquired).\n@param dataType the dataType to be removed\n@param monitor the task monitor",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the dataType to be removed"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeUseOfDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "associateDataTypeWithArchive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "datatype",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "archive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disassociate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "filterOutNonSourceSettableDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "datatypes",
          "type_long": "java.util.Collection\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "Collection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.program.model.data.DataType\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSourceSettable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDataTypeToDelete",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteDataTypeIDs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "deletedIds",
          "type_long": "java.util.LinkedList\u003cjava.lang.Long\u003e",
          "type_short": "LinkedList",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "notifyDeleted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteDataTypeRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeParameters",
      "comment": "Remove all function signature parameters from the data base that have the\n indicated parent.",
      "javadoc": "Remove all function signature parameters from the data base that have the\n indicated parent.\n@param parentID the parentData type\u0027s ID",
      "static": false,
      "params": [
        {
          "name": "parentID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the parentData type\u0027s ID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "removeComponents",
      "comment": "Remove all components from the data base that have the indicated parent.",
      "javadoc": "Remove all components from the data base that have the indicated parent.\n@param parentID the parentData type\u0027s ID",
      "static": false,
      "params": [
        {
          "name": "parentID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the parentData type\u0027s ID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "contains",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "containsCategory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createCategory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRootCategory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.Category",
        "type_short": "Category",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTypes",
      "comment": "Gets the datatypes in the given category path",
      "javadoc": "Gets the datatypes in the given category path\n@param path the category path in which to look for datatypes\n@return array of datatypes contained with specified category",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the category path in which to look for datatypes"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType[]",
        "type_short": "ghidra.program.model.data.DataType[]",
        "comment": "array of datatypes contained with specified category"
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTypesInCategory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "categoryID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCategoryCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTypeCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "includePointersAndArrays",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ids",
          "type_long": "db.Field[]",
          "type_short": "db.Field[]",
          "comment": ""
        },
        {
          "name": "list",
          "type_long": "java.util.ArrayList\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "ArrayList",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dataID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBuiltInDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEnumDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Enum",
        "type_short": "Enum",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCompositeDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Composite",
        "type_short": "Composite",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTypedefDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.TypeDef",
        "type_short": "TypeDef",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getArrayDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Array",
        "type_short": "Array",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPointerDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Pointer",
        "type_short": "Pointer",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionDefDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.FunctionDefinition",
        "type_short": "FunctionDefinition",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createStructure",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "struct",
          "type_long": "ghidra.program.model.data.StructureInternal",
          "type_short": "StructureInternal",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "ghidra.program.database.data.CategoryDB",
          "type_short": "CategoryDB",
          "comment": ""
        },
        {
          "name": "sourceArchiveIdValue",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "universalIdValue",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Structure",
        "type_short": "Structure",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createTypeDef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "typedef",
          "type_long": "ghidra.program.model.data.TypeDef",
          "type_short": "TypeDef",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "cat",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        },
        {
          "name": "sourceArchiveIdValue",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "universalIdValue",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.TypeDef",
        "type_short": "TypeDef",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createUnion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "union",
          "type_long": "ghidra.program.model.data.UnionInternal",
          "type_short": "UnionInternal",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "ghidra.program.database.data.CategoryDB",
          "type_short": "CategoryDB",
          "comment": ""
        },
        {
          "name": "sourceArchiveIdValue",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "universalIdValue",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Union",
        "type_short": "Union",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createEnum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "enumm",
          "type_long": "ghidra.program.model.data.Enum",
          "type_short": "Enum",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "cat",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        },
        {
          "name": "sourceArchiveIdValue",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "universalIdValue",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Enum",
        "type_short": "Enum",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createPointer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "cat",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Pointer",
        "type_short": "Pointer",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createArray",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "numElements",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "elementLength",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "cat",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        },
        {
          "name": "handler",
          "type_long": "ghidra.program.model.data.DataTypeConflictHandler",
          "type_short": "DataTypeConflictHandler",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Array",
        "type_short": "Array",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "updateLastChangeTime",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDirtyFlag",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSourceArchives",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.data.SourceArchive\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOtherAndNotBuiltIn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSourceArchive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fileID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.SourceArchive",
        "type_short": "SourceArchive",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSourceArchive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.SourceArchive",
        "type_short": "SourceArchive",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLocalSourceArchive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.SourceArchive",
        "type_short": "SourceArchive",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSourceArchiveFromCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.SourceArchive",
        "type_short": "SourceArchive",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "invalidateSourceArchiveCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSourceArchivesFromCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.program.model.data.SourceArchive\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "populateSourceArchiveCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSourceArchiveDB",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.SourceArchiveDB",
        "type_short": "SourceArchiveDB",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateSourceArchiveName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "archiveFileID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateSourceArchiveName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createMissingBuiltIn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.MissingBuiltInDataType",
          "type_short": "MissingBuiltInDataType",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createBuiltIn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.BuiltInDataType",
          "type_short": "BuiltInDataType",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFunctionDefinition",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "funDef",
          "type_long": "ghidra.program.model.data.FunctionDefinition",
          "type_short": "FunctionDefinition",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "cat",
          "type_long": "ghidra.program.database.data.CategoryDB",
          "type_short": "CategoryDB",
          "comment": ""
        },
        {
          "name": "sourceArchiveIdValue",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "universalIdValue",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.FunctionDefinition",
        "type_short": "FunctionDefinition",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "dbError",
      "comment": "Handles IOExceptions",
      "javadoc": "Handles IOExceptions\n@param e the exception to handle",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "the exception to handle"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSettingsAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.database.data.SettingsDBAdapter",
        "type_short": "SettingsDBAdapter",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeCategoryPathChanged",
      "comment": "Notifies the category path changed",
      "javadoc": "Notifies the category path changed\n@param dt the datatype whose path changed\n@param oldPath the old category\n@param oldCatId the old category\u0027s record id",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.database.data.DataTypeDB",
          "type_short": "DataTypeDB",
          "comment": "the datatype whose path changed"
        },
        {
          "name": "oldPath",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the old category"
        },
        {
          "name": "oldCatId",
          "type_long": "long",
          "type_short": "long",
          "comment": "the old category\u0027s record id"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.data.DataType\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllStructures",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.data.Structure\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllComposites",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.program.model.data.Composite\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "invalidateCache",
      "comment": "Invalidates the cache.",
      "javadoc": "Invalidates the cache.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateFavorites",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLongSettingsValue",
      "comment": "Set the long value for instance settings.",
      "javadoc": "Set the long value for instance settings.\n@param dataAddr min address of data\n@param name settings name\n@param value value of setting\n@return true if the settings actually changed",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "min address of data"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "settings name"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "value of setting"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the settings actually changed"
      },
      "throws": []
    },
    {
      "name": "setStringSettingsValue",
      "comment": "Set the string value for instance settings.",
      "javadoc": "Set the string value for instance settings.\n@param dataAddr min address of data\n@param name settings name\n@param value value of setting\n@return true if the settings actually changed",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "min address of data"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "settings name"
        },
        {
          "name": "value",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "value of setting"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the settings actually changed"
      },
      "throws": []
    },
    {
      "name": "setByteSettingsValue",
      "comment": "Set the byte array value for instance settings.",
      "javadoc": "Set the byte array value for instance settings.\n@param dataAddr min address of data ata\n@param name settings name\n@param byteValue byte array value of setting\n@return true if the settings actually changed",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "min address of data ata"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "settings name"
        },
        {
          "name": "byteValue",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array value of setting"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the settings actually changed"
      },
      "throws": []
    },
    {
      "name": "setSettings",
      "comment": "Set the Object settings.",
      "javadoc": "Set the Object settings.\n@param dataAddr min address of data\n@param name the name of the settings\n@param value the value for the settings, must be either a String, byte[]\n                 or Long\n@return true if the settings were updated",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "min address of data"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the settings"
        },
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the value for the settings, must be either a String, byte[]\n                 or Long"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the settings were updated"
      },
      "throws": []
    },
    {
      "name": "isAllowedNumberType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLongSettingsValue",
      "comment": "Get the long value for an instance setting.",
      "javadoc": "Get the long value for an instance setting.\n@param dataAddr min address of data\n@param name settings name\n@return null if the named setting was not found",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "min address of data"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "settings name"
        }
      ],
      "return": {
        "type_long": "java.lang.Long",
        "type_short": "Long",
        "comment": "null if the named setting was not found"
      },
      "throws": []
    },
    {
      "name": "getStringSettingsValue",
      "comment": "Get the String value for an instance setting.",
      "javadoc": "Get the String value for an instance setting.\n@param dataAddr min address of data\n@param name settings name\n@return null if the named setting was not found",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "min address of data"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "settings name"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "null if the named setting was not found"
      },
      "throws": []
    },
    {
      "name": "getByteSettingsValue",
      "comment": "Get the byte array value for an instance setting.",
      "javadoc": "Get the byte array value for an instance setting.\n@param dataAddr min address of data\n@param name settings name\n@return null if the named setting was not found",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "min address of data"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "settings name"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "null if the named setting was not found"
      },
      "throws": []
    },
    {
      "name": "getSettings",
      "comment": "Gets the value of a settings as an object (either String, byte[], or Long).",
      "javadoc": "Gets the value of a settings as an object (either String, byte[], or Long).\n@param dataAddr the address of the data for this settings\n@param name the name of settings.\n@return the settings object",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the data for this settings"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of settings."
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "the settings object"
      },
      "throws": []
    },
    {
      "name": "clearSetting",
      "comment": "Clear the setting",
      "javadoc": "Clear the setting\n@param dataAddr min address of data\n@param name settings name\n@return true if the settings were cleared",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "min address of data"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "settings name"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the settings were cleared"
      },
      "throws": []
    },
    {
      "name": "clearAllSettings",
      "comment": "Clear all settings at the given address.",
      "javadoc": "Clear all settings at the given address.\n@param dataAddr the address for this settings.",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address for this settings."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearSettings",
      "comment": "Clears all settings in the given address range.",
      "javadoc": "Clears all settings in the given address range.\n@param start the first address of the range to clear\n@param end the last address of the range to clear.\n@param monitor the progress monitor for this operation.\n@throws CancelledException if the user cancels the operation.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address of the range to clear"
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last address of the range to clear."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the progress monitor for this operation."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels the operation."
        }
      ]
    },
    {
      "name": "moveAddressRange",
      "comment": "Move the settings in the range to the new start address",
      "javadoc": "Move the settings in the range to the new start address\n@param fromAddr start address from where to move\n@param toAddr new Address to move to\n@param length number of addresses to move\n@param monitor progress monitor\n@throws CancelledException if the operation was cancelled",
      "static": false,
      "params": [
        {
          "name": "fromAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "start address from where to move"
        },
        {
          "name": "toAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "new Address to move to"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "number of addresses to move"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "progress monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the operation was cancelled"
        }
      ]
    },
    {
      "name": "isUpdatable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNames",
      "comment": "Returns all the Settings names for the given address",
      "javadoc": "Returns all the Settings names for the given address\n@param dataAddr the address\n@return the names",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address"
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "the names"
      },
      "throws": []
    },
    {
      "name": "isEmptySetting",
      "comment": "Returns true if no settings are set for the given address",
      "javadoc": "Returns true if no settings are set for the given address\n@param dataAddr the address to test\n@return true if not settings",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to test"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if not settings"
      },
      "throws": []
    },
    {
      "name": "updateInstanceSettings",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "strValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "longValue",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "byteValue",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInstanceSettingsDB",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.InstanceSettingsDB",
        "type_short": "InstanceSettingsDB",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInstanceRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createKey",
      "comment": "Create a key from the table ID and the key obtained from the database table;\n the upper 8 bits indicates which data type table should be accessed.",
      "javadoc": "Create a key from the table ID and the key obtained from the database table;\n the upper 8 bits indicates which data type table should be accessed.\n@param tableID table ID\n@param tableKey key obtained from the table\n@return long that has the upper 8 bits as the table ID, the rest of the bits\n         are from the tableKey.",
      "static": true,
      "params": [
        {
          "name": "tableID",
          "type_long": "int",
          "type_short": "int",
          "comment": "table ID"
        },
        {
          "name": "tableKey",
          "type_long": "long",
          "type_short": "long",
          "comment": "key obtained from the table"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "long that has the upper 8 bits as the table ID, the rest of the bits\n         are from the tableKey."
      },
      "throws": []
    },
    {
      "name": "addParentChildRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parentID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "childID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAllParentChildRecordsForChild",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "childID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeParentChildRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parentID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "childID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParentDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "childID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.data.DataType\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "attemptRecordRemovalForParent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parentKey",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDataTypesContaining",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.data.DataType\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPointer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Pointer",
        "type_short": "Pointer",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPointer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Pointer",
        "type_short": "Pointer",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteAddressRange",
      "comment": "Removes all settings in the range",
      "javadoc": "Removes all settings in the range\n@param startAddr the first address in the range.\n@param endAddr the last address in the range.\n@param monitor the progress monitor\n@throws CancelledException if the user cancelled the operation.",
      "static": false,
      "params": [
        {
          "name": "startAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the first address in the range."
        },
        {
          "name": "endAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the last address in the range."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the progress monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancelled the operation."
        }
      ]
    },
    {
      "name": "addDataTypeManagerListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.program.model.data.DataTypeManagerChangeListener",
          "type_short": "DataTypeManagerChangeListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeDataTypeManagerListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.program.model.data.DataTypeManagerChangeListener",
          "type_short": "DataTypeManagerChangeListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCreatingDataType",
      "comment": "",
      "javadoc": "@return true if manager is in the process of adding/creating a new type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if manager is in the process of adding/creating a new type"
      },
      "throws": []
    },
    {
      "name": "dataTypeChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "isAutoChange",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeAdded",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "originalDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeReplaced",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "existingDtID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "replacedDataTypePath",
          "type_long": "ghidra.program.model.data.DataTypePath",
          "type_short": "DataTypePath",
          "comment": ""
        },
        {
          "name": "replacementDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeDeleted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "deletedID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "deletedDataTypePath",
          "type_long": "ghidra.program.model.data.DataTypePath",
          "type_short": "DataTypePath",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeMoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "oldDataTypePath",
          "type_long": "ghidra.program.model.data.DataTypePath",
          "type_short": "DataTypePath",
          "comment": ""
        },
        {
          "name": "newDataTypePath",
          "type_long": "ghidra.program.model.data.DataTypePath",
          "type_short": "DataTypePath",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeNameChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "oldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "categoryCreated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "cat",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "categoryRenamed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "oldPath",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "categoryRemoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "categoryID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "categoryMoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "oldPath",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "favoritesChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "isFavorite",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sourceArchiveChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceArchiveID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sourceArchiveAdded",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceArchiveID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCategoryDBAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.database.data.CategoryDBAdapter",
        "type_short": "CategoryDBAdapter",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLastChangeTimeForMyManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        },
        {
          "name": "datatypeID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findDataTypeForID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "datatypeID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findDataTypeForIDs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        },
        {
          "name": "datatypeID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataOrganization",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataOrganization",
        "type_short": "DataOrganization",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkForSourceArchiveUpdatesNeeded",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "migrateOldFlexArrayComponentsIfRequired",
      "comment": "During any UPGRADE instantiation this method should be invoked with an open transaction \n once the associated DomainObject is ready.  This late stage upgrade is required since\n it may entail resolving new array datatypes which requires this manager to be in a\n fully functional state.",
      "javadoc": "During any UPGRADE instantiation this method should be invoked with an open transaction \n once the associated DomainObject is ready.  This late stage upgrade is required since\n it may entail resolving new array datatypes which requires this manager to be in a\n fully functional state.\n@param monitor task monitor\n@throws IOException if an IO error occurs on database\n@throws CancelledException if monitor is cancelled",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs on database"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if monitor is cancelled"
        }
      ]
    },
    {
      "name": "doSourceArchiveUpdates",
      "comment": "This method is only invoked during an upgrade.",
      "javadoc": "This method is only invoked during an upgrade.\n@param compilerSpec compiler spec\n@param monitor task monitor\n@throws CancelledException if task cancelled",
      "static": false,
      "params": [
        {
          "name": "compilerSpec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": "compiler spec"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if task cancelled"
        }
      ]
    },
    {
      "name": "fixupComposites",
      "comment": "Fixup all composites and thier components which may be affected by a data organization\n change include primitive type size changes and alignment changes.  It is highly recommended\n that this program be open with exclusive access before invoking this method to avoid \n excessive merge conflicts with other users.",
      "javadoc": "Fixup all composites and thier components which may be affected by a data organization\n change include primitive type size changes and alignment changes.  It is highly recommended\n that this program be open with exclusive access before invoking this method to avoid \n excessive merge conflicts with other users.\n@param monitor task monitor\n@throws CancelledException if operation is cancelled",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if operation is cancelled"
        }
      ]
    },
    {
      "name": "getCompositeBaseType",
      "comment": "Get composite base type which corresponds to a specified datatype.\n Pointers to composites are ignored.  This method is intended to be\n used by the #getAllCompositesInPostDependencyOrder method only.",
      "javadoc": "Get composite base type which corresponds to a specified datatype.\n Pointers to composites are ignored.  This method is intended to be\n used by the {@link #getAllCompositesInPostDependencyOrder} method only.\n@param dt datatype\n@return base datatype if dt corresponds to a composite or array of composites, \n otherwise null is returned",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "datatype"
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.CompositeDB",
        "type_short": "CompositeDB",
        "comment": "base datatype if dt corresponds to a composite or array of composites, \n otherwise null is returned"
      },
      "throws": []
    },
    {
      "name": "getAllCompositesInPostDependencyOrder",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.database.data.CompositeDB\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "activateResolveCache",
      "comment": "Activate resolveCache and associated resolveQueue if not already active. If\n this method returns true caller is responsible for flushing resolveQueue and\n invoking #flushResolveQueue(boolean) when resolve complete. \n For each completed resolve #cacheResolvedDataType(DataType, DataType) \n should be invoked.",
      "javadoc": "Activate resolveCache and associated resolveQueue if not already active. If\n this method returns true caller is responsible for flushing resolveQueue and\n invoking {@link #flushResolveQueue(boolean)} when resolve complete. \n For each completed resolve {@link #cacheResolvedDataType(DataType, DataType)} \n should be invoked.\n@return true if resolveCache activated else false if already active.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if resolveCache activated else false if already active."
      },
      "throws": []
    },
    {
      "name": "queuePostResolve",
      "comment": "Queue partially resolved datatype for delayed pointer resolution",
      "javadoc": "Queue partially resolved datatype for delayed pointer resolution\n@param resolvedDt partially resolved datatype\n@param definitionDt original definition datatype",
      "static": false,
      "params": [
        {
          "name": "resolvedDt",
          "type_long": "ghidra.program.database.data.DataTypeDB",
          "type_short": "DataTypeDB",
          "comment": "partially resolved datatype"
        },
        {
          "name": "definitionDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "original definition datatype"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "flushResolveQueue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "deactivateCache",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCachedResolve",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cacheResolvedDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "resolvedDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCachedEquivalence",
      "comment": "Check for cached equivalence of a type contained within this datatype manager\n against another datatype. Every call to this method when  is\n returned must be following by an invocation of\n #putCachedEquivalence(DataTypeDB, DataType, boolean) once an\n equivalence determination has been made. The number of outstanding calls to\n this method will be tracked. When the outstanding call count returns to zero\n the cache will be cleared. \n A repeated call for the same datatype pair, while the equivalence is unknown,\n will return a simplified equivalence check based upon\n DataType#getUniversalID() or path alone.",
      "javadoc": "Check for cached equivalence of a type contained within this datatype manager\n against another datatype. Every call to this method when {@code null} is\n returned must be following by an invocation of\n {@link #putCachedEquivalence(DataTypeDB, DataType, boolean)} once an\n equivalence determination has been made. The number of outstanding calls to\n this method will be tracked. When the outstanding call count returns to zero\n the cache will be cleared. \u003cbr\u003e\n A repeated call for the same datatype pair, while the equivalence is unknown,\n will return a simplified equivalence check based upon\n {@link DataType#getUniversalID()} or path alone.\n@param dataTypeDB datatype associated with this datatype manager\n@param dataType other datatype instance\n@return true, false or {@code null} if unknown. A {@code null} value mandates\n         that the caller make a determination and put the result into the\n         cache when known (see\n         {@link #putCachedEquivalence(DataTypeDB, DataType, boolean)}.",
      "static": false,
      "params": [
        {
          "name": "dataTypeDB",
          "type_long": "ghidra.program.database.data.DataTypeDB",
          "type_short": "DataTypeDB",
          "comment": "datatype associated with this datatype manager"
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "other datatype instance"
        }
      ],
      "return": {
        "type_long": "java.lang.Boolean",
        "type_short": "Boolean",
        "comment": "true, false or  if unknown. A  value mandates\n         that the caller make a determination and put the result into the\n         cache when known (see\n         #putCachedEquivalence(DataTypeDB, DataType, boolean)."
      },
      "throws": []
    },
    {
      "name": "setCachedEquivalence",
      "comment": "Set two datatypes as equivalent within the EquivalenceCache following a\n datatype resolution.",
      "javadoc": "Set two datatypes as equivalent within the EquivalenceCache following a\n datatype resolution.\n@param dataTypeDB datatype associated with this datatype manager\n@param dataType other datatype instance",
      "static": false,
      "params": [
        {
          "name": "dataTypeDB",
          "type_long": "ghidra.program.database.data.DataTypeDB",
          "type_short": "DataTypeDB",
          "comment": "datatype associated with this datatype manager"
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "other datatype instance"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putCachedEquivalence",
      "comment": "Cache the result of DataTypeDB#isEquivalent(DataType) for select\n implementations (e.g., StructureDB, UnionDB, and\n FunctionDefinitionDB). The call to this method must be properly\n matched up with a preceding invocation of\n #getCachedEquivalence(DataTypeDB, DataType) which returned\n .",
      "javadoc": "Cache the result of {@link DataTypeDB#isEquivalent(DataType)} for select\n implementations (e.g., {@link StructureDB}, {@link UnionDB}, and\n {@link FunctionDefinitionDB}). The call to this method must be properly\n matched up with a preceding invocation of\n {@link #getCachedEquivalence(DataTypeDB, DataType)} which returned\n {@code null}.\n@param dataTypeDB datatype associated with this datatype manager\n@param dataType other datatype instance\n@param isEquivalent true or false result from\n                     {@link DataTypeDB#isEquivalent(DataType)}.",
      "static": false,
      "params": [
        {
          "name": "dataTypeDB",
          "type_long": "ghidra.program.database.data.DataTypeDB",
          "type_short": "DataTypeDB",
          "comment": "datatype associated with this datatype manager"
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "other datatype instance"
        },
        {
          "name": "isEquivalent",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true or false result from\n                     DataTypeDB#isEquivalent(DataType)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "activateEquivalenceCache",
      "comment": "Perform forced activation of equivalence cache if not already active. If true\n is returned, cache will remain active until #clearEquivalenceCache()\n is invoked.",
      "javadoc": "Perform forced activation of equivalence cache if not already active. If true\n is returned, cache will remain active until {@link #clearEquivalenceCache()}\n is invoked.\n@return true if successful, false if already active",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if successful, false if already active"
      },
      "throws": []
    },
    {
      "name": "clearEquivalenceCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEquivalenceKey",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dataTypeDB",
          "type_long": "ghidra.program.database.data.DataTypeDB",
          "type_short": "DataTypeDB",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    }
  ]
}
