{
  "name": "PointerDBAdapter",
  "comment": "Adapter to access the Pointer database table for Pointer data types.",
  "javadoc": "Adapter to access the Pointer database table for Pointer data types.",
  "static": false,
  "implements": [
    "db.RecordTranslator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "POINTER_TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Pointers\""
    },
    {
      "name": "SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "PTR_DT_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "PTR_CATEGORY_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "PTR_LENGTH_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAdapter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "addrMap",
          "type_long": "ghidra.program.database.map.AddressMap",
          "type_short": "AddressMap",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.PointerDBAdapter",
        "type_short": "PointerDBAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findReadOnlyAdapter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.PointerDBAdapter",
        "type_short": "PointerDBAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "upgrade",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        },
        {
          "name": "oldAdapter",
          "type_long": "ghidra.program.database.data.PointerDBAdapter",
          "type_short": "PointerDBAdapter",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.PointerDBAdapter",
        "type_short": "PointerDBAdapter",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "deleteTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createRecord",
      "comment": "Create a pointer record.",
      "javadoc": "Create a pointer record.\n@param dataTypeID data type ID of the date type being pointed to\n@param categoryID the category ID of the datatype\n@param length pointer size in bytes\n@return the record\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "data type ID of the date type being pointed to"
        },
        {
          "name": "categoryID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the category ID of the datatype"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "pointer size in bytes"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "the record"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Get the record with the given pointerID.",
      "javadoc": "Get the record with the given pointerID.\n@param pointerID database key\n@return requested pointer record or null if not found\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "pointerID",
          "type_long": "long",
          "type_short": "long",
          "comment": "database key"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "requested pointer record or null if not found"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecords",
      "comment": "An iterator over the records of this adapter",
      "javadoc": "An iterator over the records of this adapter\n@return the iterator\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": "the iterator"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "removeRecord",
      "comment": "Delete the record.",
      "javadoc": "Delete the record.\n@param pointerID database key\n@return true if the record was deleted\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "pointerID",
          "type_long": "long",
          "type_short": "long",
          "comment": "database key"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the record was deleted"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "updateRecord",
      "comment": "Update the record in the table.",
      "javadoc": "Update the record in the table.\n@param record pointer record to be updated\n@throws IOException if there was a problem accessing the database",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "pointer record to be updated"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem accessing the database"
        }
      ]
    },
    {
      "name": "getRecordIdsInCategory",
      "comment": "Gets all the pointer data types that are contained in the category that\n have the indicated ID.",
      "javadoc": "Gets all the pointer data types that are contained in the category that\n have the indicated ID.\n@param categoryID the category whose pointer data types are wanted.\n@return an array of IDs for the pointer data types in the category.\n@throws IOException if the database can\u0027t be accessed.",
      "static": false,
      "params": [
        {
          "name": "categoryID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the category whose pointer data types are wanted."
        }
      ],
      "return": {
        "type_long": "db.Field[]",
        "type_short": "db.Field[]",
        "comment": "an array of IDs for the pointer data types in the category."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be accessed."
        }
      ]
    }
  ]
}
