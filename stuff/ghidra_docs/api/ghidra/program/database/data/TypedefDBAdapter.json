{
  "name": "TypedefDBAdapter",
  "comment": "Adapter to access the database table for typedef data types.",
  "javadoc": "Adapter to access the database table for typedef data types.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "TYPEDEF_TABLE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Typedefs\""
    },
    {
      "name": "SCHEMA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "db.Schema",
      "type_short": "Schema",
      "constant_value": null
    },
    {
      "name": "TYPEDEF_DT_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "TYPEDEF_NAME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "TYPEDEF_CAT_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "TYPEDEF_SOURCE_ARCHIVE_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "TYPEDEF_UNIVERSAL_DT_ID_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "TYPEDEF_SOURCE_SYNC_TIME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "TYPEDEF_LAST_CHANGE_TIME_COL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAdapter",
      "comment": "Gets an adapter for working with the Typedef data type database table. The adapter is based\n on the version of the database associated with the specified database handle and the openMode.",
      "javadoc": "Gets an adapter for working with the Typedef data type database table. The adapter is based\n on the version of the database associated with the specified database handle and the openMode.\n@param handle handle to the database to be accessed.\n@param openMode the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE).\n@param monitor the monitor to use for displaying status or for canceling.\n@return the adapter for accessing the table of Typedef data types.\n@throws VersionException if the database handle\u0027s version doesn\u0027t match the expected version.\n@throws IOException if there is trouble accessing the database.",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "handle to the database to be accessed."
        },
        {
          "name": "openMode",
          "type_long": "int",
          "type_short": "int",
          "comment": "the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE)."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor to use for displaying status or for canceling."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.TypedefDBAdapter",
        "type_short": "TypedefDBAdapter",
        "comment": "the adapter for accessing the table of Typedef data types."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if the database handle\u0027s version doesn\u0027t match the expected version."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is trouble accessing the database."
        }
      ]
    },
    {
      "name": "findReadOnlyAdapter",
      "comment": "Tries to get a read only adapter for the database whose handle is passed to this method.",
      "javadoc": "Tries to get a read only adapter for the database whose handle is passed to this method.\n@param handle handle to prior version of the database.\n@return the read only Typedef table adapter\n@throws VersionException if a read only adapter can\u0027t be obtained for the database handle\u0027s version.",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "handle to prior version of the database."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.TypedefDBAdapter",
        "type_short": "TypedefDBAdapter",
        "comment": "the read only Typedef table adapter"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if a read only adapter can\u0027t be obtained for the database handle\u0027s version."
        }
      ]
    },
    {
      "name": "upgrade",
      "comment": "Upgrades the Typedef data type table from the oldAdapter\u0027s version to the current version.",
      "javadoc": "Upgrades the Typedef data type table from the oldAdapter\u0027s version to the current version.\n@param handle handle to the database whose table is to be upgraded to a newer version.\n@param oldAdapter the adapter for the existing table to be upgraded.\n@return the adapter for the new upgraded version of the table.\n@throws VersionException if the the table\u0027s version does not match the expected version\n for this adapter.\n@throws IOException if the database can\u0027t be read or written.",
      "static": true,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "handle to the database whose table is to be upgraded to a newer version."
        },
        {
          "name": "oldAdapter",
          "type_long": "ghidra.program.database.data.TypedefDBAdapter",
          "type_short": "TypedefDBAdapter",
          "comment": "the adapter for the existing table to be upgraded."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.data.TypedefDBAdapter",
        "type_short": "TypedefDBAdapter",
        "comment": "the adapter for the new upgraded version of the table."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if the the table\u0027s version does not match the expected version\n for this adapter."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be read or written."
        }
      ]
    },
    {
      "name": "createRecord",
      "comment": "Creates a database record for a type definition data type.",
      "javadoc": "Creates a database record for a type definition data type.\n@param dataTypeID the ID of the data type that is referred to by this type definition.\n@param name the unique name for this data type\n@param categoryID the ID for the category that contains this data type.\n@param sourceArchiveID the ID for the source archive where this data type originated.\n@param sourceDataTypeID the ID of the associated data type in the source archive.\n@param lastChangeTime the time this data type was last changed.\n@return the database record for this data type.\n@throws IOException if the database can\u0027t be accessed.",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID of the data type that is referred to by this type definition."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the unique name for this data type"
        },
        {
          "name": "categoryID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID for the category that contains this data type."
        },
        {
          "name": "sourceArchiveID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID for the source archive where this data type originated."
        },
        {
          "name": "sourceDataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID of the associated data type in the source archive."
        },
        {
          "name": "lastChangeTime",
          "type_long": "long",
          "type_short": "long",
          "comment": "the time this data type was last changed."
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "the database record for this data type."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be accessed."
        }
      ]
    },
    {
      "name": "getRecord",
      "comment": "Gets a type definition data type record from the database based on its ID.",
      "javadoc": "Gets a type definition data type record from the database based on its ID.\n@param typedefID the data type\u0027s ID.\n@return the record for the type definition data type.\n@throws IOException if the database can\u0027t be accessed.",
      "static": false,
      "params": [
        {
          "name": "typedefID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the data type\u0027s ID."
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "the record for the type definition data type."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be accessed."
        }
      ]
    },
    {
      "name": "getRecords",
      "comment": "Gets an iterator over all type definition data type records.",
      "javadoc": "Gets an iterator over all type definition data type records.\n@return the type definition data type record iterator.\n@throws IOException if the database can\u0027t be accessed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.RecordIterator",
        "type_short": "RecordIterator",
        "comment": "the type definition data type record iterator."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be accessed."
        }
      ]
    },
    {
      "name": "removeRecord",
      "comment": "Removes the type definition data type record with the specified ID.",
      "javadoc": "Removes the type definition data type record with the specified ID.\n@param dataID the ID of the data type.\n@return true if the record is removed.\n@throws IOException if the database can\u0027t be accessed.",
      "static": false,
      "params": [
        {
          "name": "dataID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID of the data type."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the record is removed."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be accessed."
        }
      ]
    },
    {
      "name": "updateRecord",
      "comment": "Updates the type definition data type table with the provided record.",
      "javadoc": "Updates the type definition data type table with the provided record.\n@param record the new record\n@param setLastChangeTime true means change the last change time in the record to the\n current time before putting the record in the database.\n@throws IOException if the database can\u0027t be accessed.",
      "static": false,
      "params": [
        {
          "name": "record",
          "type_long": "db.DBRecord",
          "type_short": "DBRecord",
          "comment": "the new record"
        },
        {
          "name": "setLastChangeTime",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means change the last change time in the record to the\n current time before putting the record in the database."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be accessed."
        }
      ]
    },
    {
      "name": "deleteTable",
      "comment": "Deletes the type definition data type table from the database with the specified database handle.",
      "javadoc": "Deletes the type definition data type table from the database with the specified database handle.\n@param handle handle to the database where the table should get deleted.\n@throws IOException if the database can\u0027t be accessed.",
      "static": false,
      "params": [
        {
          "name": "handle",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "handle to the database where the table should get deleted."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be accessed."
        }
      ]
    },
    {
      "name": "getRecordIdsInCategory",
      "comment": "Gets all the type definition data types that are contained in the category that has the indicated ID.",
      "javadoc": "Gets all the type definition data types that are contained in the category that has the indicated ID.\n@param categoryID the category whose type definition data types are wanted.\n@return an array of IDs for the type definition data types in the category.\n@throws IOException if the database can\u0027t be accessed.",
      "static": false,
      "params": [
        {
          "name": "categoryID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the category whose type definition data types are wanted."
        }
      ],
      "return": {
        "type_long": "db.Field[]",
        "type_short": "db.Field[]",
        "comment": "an array of IDs for the type definition data types in the category."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be accessed."
        }
      ]
    },
    {
      "name": "getRecordIdsForSourceArchive",
      "comment": "Gets an array with the IDs of all data types in the type definition table that were derived\n from the source data type archive indicated by the source archive ID.",
      "javadoc": "Gets an array with the IDs of all data types in the type definition table that were derived\n from the source data type archive indicated by the source archive ID.\n@param archiveID the ID of the source archive whose data types we want.\n@return the array data type IDs.\n@throws IOException if the database can\u0027t be accessed.",
      "static": false,
      "params": [
        {
          "name": "archiveID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID of the source archive whose data types we want."
        }
      ],
      "return": {
        "type_long": "db.Field[]",
        "type_short": "db.Field[]",
        "comment": "the array data type IDs."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database can\u0027t be accessed."
        }
      ]
    },
    {
      "name": "getRecordWithIDs",
      "comment": "Get typedef record whose sourceID and datatypeID match the specified Universal IDs.",
      "javadoc": "Get typedef record whose sourceID and datatypeID match the specified Universal IDs.\n@param sourceID universal source archive ID\n@param datatypeID universal datatype ID\n@return typedef record found or null\n@throws IOException if IO error occurs",
      "static": false,
      "params": [
        {
          "name": "sourceID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": "universal source archive ID"
        },
        {
          "name": "datatypeID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": "universal datatype ID"
        }
      ],
      "return": {
        "type_long": "db.DBRecord",
        "type_short": "DBRecord",
        "comment": "typedef record found or null"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs"
        }
      ]
    }
  ]
}
