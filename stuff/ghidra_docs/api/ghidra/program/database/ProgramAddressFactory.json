{
  "name": "ProgramAddressFactory",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.address.DefaultAddressFactory",
  "fields": [
    {
      "name": "originalFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressFactory",
      "type_short": "AddressFactory",
      "constant_value": null
    },
    {
      "name": "stackSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        },
        {
          "name": "compilerSpec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initOtherSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initExternalSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initStackSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        },
        {
          "name": "compilerSpec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initHashSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initJoinSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStackSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOriginalAddressFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressFactory",
        "type_short": "AddressFactory",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addOverlayAddressSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ovSpace",
          "type_long": "ghidra.program.model.address.OverlayAddressSpace",
          "type_short": "OverlayAddressSpace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addOverlayAddressSpace",
      "comment": "Create a new OverlayAddressSpace based upon the given overlay blockName and base AddressSpace",
      "javadoc": "Create a new OverlayAddressSpace based upon the given overlay blockName and base AddressSpace\n@param name the preferred name of the overlay address space to be created. This name may be\n            modified if preserveName is false to produce a valid overlay space name and avoid\n            duplication.\n@param preserveName if true specified name will be preserved, if false an unique acceptable\n            overlay space name will be generated from the specified name.\n@param originalSpace the base AddressSpace to overlay\n@param minOffset the min offset of the space\n@param maxOffset the max offset of the space\n@return the new overlay space\n@throws IllegalArgumentException if originalSpace is not permitted or preserveName is true\n             and a space with specified name already exists.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the preferred name of the overlay address space to be created. This name may be\n            modified if preserveName is false to produce a valid overlay space name and avoid\n            duplication."
        },
        {
          "name": "preserveName",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true specified name will be preserved, if false an unique acceptable\n            overlay space name will be generated from the specified name."
        },
        {
          "name": "originalSpace",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "the base AddressSpace to overlay"
        },
        {
          "name": "minOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "the min offset of the space"
        },
        {
          "name": "maxOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "the max offset of the space"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.OverlayAddressSpace",
        "type_short": "OverlayAddressSpace",
        "comment": "the new overlay space"
      },
      "throws": []
    },
    {
      "name": "getUniqueOverlayName",
      "comment": "Get a unique address space name based on the specified baseOverlayName",
      "javadoc": "Get a unique address space name based on the specified baseOverlayName\n@param baseOverlayName base overlay address space name\n@return unique overlay space name",
      "static": false,
      "params": [
        {
          "name": "baseOverlayName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "base overlay address space name"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "unique overlay space name"
      },
      "throws": []
    },
    {
      "name": "getBaseOverlayName",
      "comment": "Get base overlay name removing any numeric suffix which may have been added to avoid\n duplication. This method is intended to be used during rename only.",
      "javadoc": "Get base overlay name removing any numeric suffix which may have been added to avoid\n duplication. This method is intended to be used during rename only.\n@param overlayName existing overlay space name\n@return base overlay name with any trailing index removed which may have been added to avoid\n         duplication.",
      "static": false,
      "params": [
        {
          "name": "overlayName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "existing overlay space name"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "base overlay name with any trailing index removed which may have been added to avoid\n         duplication."
      },
      "throws": []
    },
    {
      "name": "fixupOverlaySpaceName",
      "comment": "Generate an allowed address space name from a block name. Use of unsupported characters will\n be converted to underscore (includes colon and all whitespace chars). double-underscore to\n ensure uniqueness.",
      "javadoc": "Generate an allowed address space name from a block name. Use of unsupported characters will\n be converted to underscore (includes colon and all whitespace chars). double-underscore to\n ensure uniqueness.\n@param blockName corresponding memory block name\n@return overlay space name",
      "static": false,
      "params": [
        {
          "name": "blockName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "corresponding memory block name"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "overlay space name"
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "spaceID",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeOverlaySpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "renameOverlaySpace",
      "comment": "Rename overlay with preferred newName. Actual name used will be returned and may differ from\n specified newName to ensure validity and avoid duplication.",
      "javadoc": "Rename overlay with preferred newName. Actual name used will be returned and may differ from\n specified newName to ensure validity and avoid duplication.\n@param oldOverlaySpaceName the existing overlay address space name\n@param newName the preferred new name of the overlay address space. This name may be modified\n            to produce a valid overlay space name to avoid duplication.\n@return new name applied to existing overlay space",
      "static": false,
      "params": [
        {
          "name": "oldOverlaySpaceName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the existing overlay address space name"
        },
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the preferred new name of the overlay address space. This name may be modified\n            to produce a valid overlay space name to avoid duplication."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "new name applied to existing overlay space"
      },
      "throws": []
    },
    {
      "name": "getNextUniqueID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
