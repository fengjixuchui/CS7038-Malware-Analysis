{
  "name": "ProgramCompilerSpec",
  "comment": "A Program-specific version of the CompilerSpec.\n \n Every Program owns a specific . It is based on a\n CompilerSpec returned by the Language assigned to the Program, but it may\n include extensions. Extensions are currently either a new form of:\n \n \n PrototypeModel or\n InjectPayload\n \n \n Extensions can be installed or removed from a ProgramDB via the Options mechanism\n (See SpecExtension) using\n SpecExtension#addReplaceCompilerSpecExtension(String, TaskMonitor) or\n SpecExtension#removeCompilerSpecExtension(String, TaskMonitor).\n \n  allows the static evaluation models, described by the underlying\n BasicCompilerSpec and returned by\n #getPrototypeEvaluationModel(EvaluationModelType), to be overridden by Program-specific\n options.\n \n #getDecompilerOutputLanguage() queries the Program-specific language the decompiler\n should use as output.\n \n #installExtensions() is the main entry point for integrating the Program Options with the\n Language\u0027s base CompilerSpec and producing a complete in-memory CompilerSpec for the Program.",
  "javadoc": "A Program-specific version of the {@link CompilerSpec}.\n \n Every {@link Program} owns a specific {@code ProgramCompilerSpec}. It is based on a\n {@link CompilerSpec} returned by the {@link Language} assigned to the {@link Program}, but it may\n include extensions. Extensions are currently either a new form of:\n \n \u003cul\u003e\n \u003cli\u003e{@link PrototypeModel} or\u003c/li\u003e\n \u003cli\u003e{@link InjectPayload}\u003c/li\u003e\n \u003c/ul\u003e\n \n Extensions can be installed or removed from a {@link ProgramDB} via the {@link Options} mechanism\n (See {@link SpecExtension}) using\n {@link SpecExtension#addReplaceCompilerSpecExtension(String, TaskMonitor)} or\n {@link SpecExtension#removeCompilerSpecExtension(String, TaskMonitor)}.\n \n {@code ProgramCompilerSpec} allows the static evaluation models, described by the underlying\n {@link BasicCompilerSpec} and returned by\n {@link #getPrototypeEvaluationModel(EvaluationModelType)}, to be overridden by Program-specific\n options.\n \n {@link #getDecompilerOutputLanguage()} queries the Program-specific language the decompiler\n should use as output.\n \n {@link #installExtensions()} is the main entry point for integrating the Program Options with the\n Language\u0027s base CompilerSpec and producing a complete in-memory CompilerSpec for the Program.",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.lang.BasicCompilerSpec",
  "fields": [
    {
      "name": "DECOMPILER_PROPERTY_LIST_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Decompiler\""
    },
    {
      "name": "DECOMPILER_OUTPUT_LANGUAGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Output Language\""
    },
    {
      "name": "DECOMPILER_OUTPUT_DEF",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.lang.DecompilerLanguage",
      "type_short": "DecompilerLanguage",
      "constant_value": null
    },
    {
      "name": "DECOMPILER_OUTPUT_DESC",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Select the source language output by the decompiler.\""
    },
    {
      "name": "EVALUATION_MODEL_PROPERTY_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Prototype Evaluation\""
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "usermodels",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.program.model.lang.PrototypeModel\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "versionCounter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct the CompilerSpec for a Program based on a Language CompilerSpec",
      "javadoc": "Construct the CompilerSpec for a Program based on a Language CompilerSpec\n@param program is the Program\n@param langSpec is the CompilerSpec from Language to base this on",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "is the Program"
        },
        {
          "name": "langSpec",
          "type_long": "ghidra.program.model.lang.BasicCompilerSpec",
          "type_short": "BasicCompilerSpec",
          "comment": "is the CompilerSpec from Language to base this on"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "enableJavaLanguageDecompilation",
      "comment": "Adds and enables an option to have the decompiler display java.",
      "javadoc": "Adds and enables an option to have the decompiler display java.\n@param program to be enabled",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "to be enabled"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDecompilerOutputLanguage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.DecompilerLanguage",
        "type_short": "DecompilerLanguage",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "installPrototypeExtensions",
      "comment": "Install a new set of user-defined (extension) prototype models. All the models from the\n compiler spec are preserved. Any old user-defined models are removed or replaced.",
      "javadoc": "Install a new set of user-defined (extension) prototype models. All the models from the\n compiler spec are preserved. Any old user-defined models are removed or replaced.\n@param extensions is the list of new user-defined models",
      "static": false,
      "params": [
        {
          "name": "extensions",
          "type_long": "java.util.List\u003cghidra.program.model.lang.PrototypeModel\u003e",
          "type_short": "List",
          "comment": "is the list of new user-defined models"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPrototypeError",
      "comment": "Add a new PrototypeModel to the list of extensions with errors",
      "javadoc": "Add a new PrototypeModel to the list of extensions with errors\n@param errList is the list of errors\n@param model is the PrototypeModel with errors\n@return the updated list",
      "static": true,
      "params": [
        {
          "name": "errList",
          "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
          "type_short": "ArrayList",
          "comment": "is the list of errors"
        },
        {
          "name": "model",
          "type_long": "ghidra.program.model.lang.PrototypeModel",
          "type_short": "PrototypeModel",
          "comment": "is the PrototypeModel with errors"
        }
      ],
      "return": {
        "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
        "type_short": "ArrayList",
        "comment": "the updated list"
      },
      "throws": []
    },
    {
      "name": "addPayloadError",
      "comment": "Add a new InjectPayload to the list of extensions with errors",
      "javadoc": "Add a new InjectPayload to the list of extensions with errors\n@param errList is the list of errors\n@param payload is the InjectPayload with errors\n@return the updated list",
      "static": true,
      "params": [
        {
          "name": "errList",
          "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
          "type_short": "ArrayList",
          "comment": "is the list of errors"
        },
        {
          "name": "payload",
          "type_long": "ghidra.program.model.lang.InjectPayload",
          "type_short": "InjectPayload",
          "comment": "is the InjectPayload with errors"
        }
      ],
      "return": {
        "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
        "type_short": "ArrayList",
        "comment": "the updated list"
      },
      "throws": []
    },
    {
      "name": "updateModelChoices",
      "comment": "Update the choices presented for evaluation model program option.",
      "javadoc": "Update the choices presented for evaluation model program option.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "reportExtensionErrors",
      "comment": "Report any extensions that have parse errors",
      "javadoc": "Report any extensions that have parse errors\n@param errorList is the list of extensions (or null)",
      "static": false,
      "params": [
        {
          "name": "errorList",
          "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
          "type_short": "ArrayList",
          "comment": "is the list of extensions (or null)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "installExtensions",
      "comment": "Update this object with any program specific compiler specification extensions.",
      "javadoc": "Update this object with any program specific compiler specification extensions.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "establishEvaluationModelChoices",
      "comment": "Build up the choice strings for all the evaluation methods",
      "javadoc": "Build up the choice strings for all the evaluation methods",
      "static": false,
      "params": [
        {
          "name": "defaultEval",
          "type_long": "ghidra.program.model.lang.PrototypeModel",
          "type_short": "PrototypeModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrototypeEvaluationModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "modelType",
          "type_long": "ghidra.program.model.lang.CompilerSpec.EvaluationModelType",
          "type_short": "EvaluationModelType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PrototypeModel",
        "type_short": "PrototypeModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerProgramOptions",
      "comment": "Register program-specific compiler-spec options",
      "javadoc": "Register program-specific compiler-spec options",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgramCompilerSpec",
      "comment": "Transition specified compiler specification langSpec into a program-specific one which\n supports extensions. If the specified langSpec is not a BasicCompilerSpec instance,\n the langSpec argument will be returned unmodified.",
      "javadoc": "Transition specified compiler specification langSpec into a program-specific one which\n supports extensions. If the specified langSpec is not a {@link BasicCompilerSpec} instance,\n the langSpec argument will be returned unmodified.\n@param program program to which langSpec applies\n@param langSpec initial compiler specification which does not support extensions.\n@return compiler specification to be used with program",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program to which langSpec applies"
        },
        {
          "name": "langSpec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": "initial compiler specification which does not support extensions."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.CompilerSpec",
        "type_short": "CompilerSpec",
        "comment": "compiler specification to be used with program"
      },
      "throws": []
    }
  ]
}
