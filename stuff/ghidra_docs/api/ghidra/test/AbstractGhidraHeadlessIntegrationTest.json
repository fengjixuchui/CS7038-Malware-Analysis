{
  "name": "AbstractGhidraHeadlessIntegrationTest",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "docking.test.AbstractDockingTest",
  "fields": [
    {
      "name": "PROJECT_NAME_SUFFIX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "PROJECT_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "SLEIGH_X86_64_LANGUAGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.lang.Language",
      "type_short": "Language",
      "constant_value": null
    },
    {
      "name": "SLEIGH_X86_LANGUAGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.lang.Language",
      "type_short": "Language",
      "constant_value": null
    },
    {
      "name": "SLEIGH_8051_LANGUAGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.lang.Language",
      "type_short": "Language",
      "constant_value": null
    },
    {
      "name": "Z80_LANGUAGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.lang.Language",
      "type_short": "Language",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createProjectName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createApplicationLayout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "utility.application.ApplicationLayout",
        "type_short": "ApplicationLayout",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createApplicationConfiguration",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.ApplicationConfiguration",
        "type_short": "ApplicationConfiguration",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeSystemProperties",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteProject",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "directory",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLanguageCompilerSpecPair",
      "comment": "Get the language and compiler spec associated with an old language name string.\n If the language no longer exists, and suitable replacement language will be returned\n if found.  If no language is found, an exception will be thrown.",
      "javadoc": "Get the language and compiler spec associated with an old language name string.\n If the language no longer exists, and suitable replacement language will be returned\n if found.  If no language is found, an exception will be thrown.\n@param oldLanguageName old language name string\n@return the language compiler and spec\n@throws LanguageNotFoundException if the language is not found",
      "static": true,
      "params": [
        {
          "name": "oldLanguageName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "old language name string"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.LanguageCompilerSpecPair",
        "type_short": "LanguageCompilerSpecPair",
        "comment": "the language compiler and spec"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.LanguageNotFoundException",
          "type_short": "LanguageNotFoundException",
          "comment": "if the language is not found"
        }
      ]
    },
    {
      "name": "createDefaultProgram",
      "comment": "Creates an in-memory program with the given language",
      "javadoc": "Creates an in-memory program with the given language\n@param name the program name\n@param languageString a language string of the format \u003ccode\u003ex86:LE:32:default\u003c/code\u003e\n@param consumer a consumer for the program\n@return a new program\n@throws Exception if there is any issue creating the language",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the program name"
        },
        {
          "name": "languageString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a language string of the format x86:LE:32:default"
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "a consumer for the program"
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.ProgramDB",
        "type_short": "ProgramDB",
        "comment": "a new program"
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if there is any issue creating the language"
        }
      ]
    },
    {
      "name": "createDefaultProgram",
      "comment": "Creates an in-memory program with the given language",
      "javadoc": "Creates an in-memory program with the given language\n@param name the program name\n@param languageString a language string of the format \u003ccode\u003ex86:LE:32:default\u003c/code\u003e\n@param compilerSpecID the ID\n@param consumer a consumer for the program\n@return a new program\n@throws Exception if there is any issue creating the language",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the program name"
        },
        {
          "name": "languageString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a language string of the format x86:LE:32:default"
        },
        {
          "name": "compilerSpecID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the ID"
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "a consumer for the program"
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.ProgramDB",
        "type_short": "ProgramDB",
        "comment": "a new program"
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if there is any issue creating the language"
        }
      ]
    },
    {
      "name": "applyCmd",
      "comment": "Run a command against the specified program within a transaction.\n The transaction will be committed unless the command throws a RollbackException.",
      "javadoc": "Run a command against the specified program within a transaction.\n The transaction will be committed unless the command throws a RollbackException.\n@param program the program\n@param cmd the command to apply\n@return result of command applyTo method\n@throws RollbackException thrown if thrown by command applyTo method",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "cmd",
          "type_long": "ghidra.framework.cmd.Command",
          "type_short": "Command",
          "comment": "the command to apply"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "result of command applyTo method"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.RollbackException",
          "type_short": "RollbackException",
          "comment": "thrown if thrown by command applyTo method"
        }
      ]
    },
    {
      "name": "tx",
      "comment": "Provides a convenient method for modifying the current program, handling the transaction\n logic.",
      "javadoc": "Provides a convenient method for modifying the current program, handling the transaction\n logic.\n@param p the program\n@param c the code to execute",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "c",
          "type_long": "utility.function.ExceptionalCallback\u003cE\u003e",
          "type_short": "ExceptionalCallback",
          "comment": "the code to execute"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "modifyProgram",
      "comment": "Provides a convenient method for modifying the current program, handling the transaction\n logic.   This method is calls #tx(Program, ExceptionalCallback), but helps with\n semantics.",
      "javadoc": "Provides a convenient method for modifying the current program, handling the transaction\n logic.   This method is calls {@link #tx(Program, ExceptionalCallback)}, but helps with\n semantics.\n@param p the program\n@param c the code to execute",
      "static": true,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "c",
          "type_long": "utility.function.ExceptionalCallback\u003cE\u003e",
          "type_short": "ExceptionalCallback",
          "comment": "the code to execute"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "modifyProgram",
      "comment": "Provides a convenient method for modifying the current program, handling the transaction\n logic and returning a new item as a result",
      "javadoc": "Provides a convenient method for modifying the current program, handling the transaction\n logic and returning a new item as a result\n@param program the program\n@param f the function for modifying the program and creating the desired result\n@return the result",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "f",
          "type_long": "utility.function.ExceptionalFunction\u003cghidra.program.model.listing.Program,R,E\u003e",
          "type_short": "ExceptionalFunction",
          "comment": "the function for modifying the program and creating the desired result"
        }
      ],
      "return": {
        "type_long": "R",
        "type_short": "R",
        "comment": "the result"
      },
      "throws": []
    },
    {
      "name": "undo",
      "comment": "Undo the last transaction on the domain object and wait for all events to be flushed.",
      "javadoc": "Undo the last transaction on the domain object and wait for all events to be flushed.\n@param dobj The domain object upon which to perform the undo.\n@param wait if true, wait for undo to fully complete in Swing thread.\n If a modal dialog may result from this undo, wait should be set false.",
      "static": true,
      "params": [
        {
          "name": "dobj",
          "type_long": "ghidra.framework.model.UndoableDomainObject",
          "type_short": "UndoableDomainObject",
          "comment": "The domain object upon which to perform the undo."
        },
        {
          "name": "wait",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, wait for undo to fully complete in Swing thread.\n If a modal dialog may result from this undo, wait should be set false."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "redo",
      "comment": "Redo the last undone transaction on the domain object and wait for all\n events to be flushed.",
      "javadoc": "Redo the last undone transaction on the domain object and wait for all\n events to be flushed.\n@param dobj The domain object upon which to perform the redo.\n@param wait if true, wait for redo to fully complete in Swing thread.\n If a modal dialog may result from this redo, wait should be set false.",
      "static": true,
      "params": [
        {
          "name": "dobj",
          "type_long": "ghidra.framework.model.UndoableDomainObject",
          "type_short": "UndoableDomainObject",
          "comment": "The domain object upon which to perform the redo."
        },
        {
          "name": "wait",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, wait for redo to fully complete in Swing thread.\n If a modal dialog may result from this redo, wait should be set false."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "undo",
      "comment": "Undo the last transaction on the domain object and wait for all\n events to be flushed.",
      "javadoc": "Undo the last transaction on the domain object and wait for all\n events to be flushed.\n@param dobj The domain object upon which to perform the undo.",
      "static": true,
      "params": [
        {
          "name": "dobj",
          "type_long": "ghidra.framework.model.UndoableDomainObject",
          "type_short": "UndoableDomainObject",
          "comment": "The domain object upon which to perform the undo."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "redo",
      "comment": "Redo the last undone transaction on domain object and wait for all\n events to be flushed.",
      "javadoc": "Redo the last undone transaction on domain object and wait for all\n events to be flushed.\n@param dobj The domain object upon which to perform the redo.",
      "static": true,
      "params": [
        {
          "name": "dobj",
          "type_long": "ghidra.framework.model.UndoableDomainObject",
          "type_short": "UndoableDomainObject",
          "comment": "The domain object upon which to perform the redo."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "undo",
      "comment": "Undo the last \u0027count\u0027 transactions on the domain object and wait for all\n events to be flushed.",
      "javadoc": "Undo the last \u0027count\u0027 transactions on the domain object and wait for all\n events to be flushed.\n@param dobj The domain object upon which to perform the undo.\n@param count number of transactions to undo",
      "static": true,
      "params": [
        {
          "name": "dobj",
          "type_long": "ghidra.framework.model.UndoableDomainObject",
          "type_short": "UndoableDomainObject",
          "comment": "The domain object upon which to perform the undo."
        },
        {
          "name": "count",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of transactions to undo"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "redo",
      "comment": "Redo the last \u0027count\u0027 undone transactions on the domain object and wait for all\n events to be flushed.",
      "javadoc": "Redo the last \u0027count\u0027 undone transactions on the domain object and wait for all\n events to be flushed.\n@param dobj The domain object upon which to perform the redo.\n@param count number of transactions to redo",
      "static": true,
      "params": [
        {
          "name": "dobj",
          "type_long": "ghidra.framework.model.UndoableDomainObject",
          "type_short": "UndoableDomainObject",
          "comment": "The domain object upon which to perform the redo."
        },
        {
          "name": "count",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of transactions to redo"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPlugin",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "c",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toAddressSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrs",
          "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toAddressSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toAddressSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ranges",
          "type_long": "ghidra.program.model.address.AddressRange[]",
          "type_short": "ghidra.program.model.address.AddressRange[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "goTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "goTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addrString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeSelection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addrs",
          "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeSelection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "from",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "to",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeSelection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addrs",
          "type_long": "ghidra.program.model.address.Address[]",
          "type_short": "ghidra.program.model.address.Address[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeSelection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "ranges",
          "type_long": "ghidra.program.model.address.AddressRange[]",
          "type_short": "ghidra.program.model.address.AddressRange[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeSelection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addresses",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUniqueSymbol",
      "comment": "Returns the global symbol with the given name if and only if it is the only\n global symbol with that name.",
      "javadoc": "Returns the global symbol with the given name if and only if it is the only\n global symbol with that name.\n@param program the program to search.\n@param name the name of the global symbol to find.\n@return the global symbol with the given name if and only if it is the only one.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to search."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the global symbol to find."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": "the global symbol with the given name if and only if it is the only one."
      },
      "throws": []
    },
    {
      "name": "getUniqueSymbol",
      "comment": "Returns the symbol in the given namespace with the given name if and only if it is the only\n symbol in that namespace with that name.",
      "javadoc": "Returns the symbol in the given namespace with the given name if and only if it is the only\n symbol in that namespace with that name.\n@param program the program to search.\n@param name the name of the symbol to find.\n@param namespace the parent namespace; may be null\n@return the symbol with the given name if and only if it is the only one in that namespace",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to search."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the symbol to find."
        },
        {
          "name": "namespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "the parent namespace; may be null"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": "the symbol with the given name if and only if it is the only one in that namespace"
      },
      "throws": []
    },
    {
      "name": "debugProgramInTool",
      "comment": "A convenience method that allows you to open the given program in a default tool, \n navigating to the given address. \n \n Note: this is a blocking operation.  Your test will not proceed while this method is\n sleeping. \n \n Do not leave this call in your test when committing changes.",
      "javadoc": "A convenience method that allows you to open the given program in a default tool, \n navigating to the given address. \n \n \u003cP\u003eNote: this is a blocking operation.  Your test will not proceed while this method is\n sleeping. \n \n \u003cP\u003e\u003cB\u003eDo not leave this call in your test when committing changes.\u003c/B\u003e\n@param p the program\n@param address the address\n@throws Exception if there is an issue create a {@link TestEnv}",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "address",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if there is an issue create a TestEnv"
        }
      ]
    },
    {
      "name": "waitForScriptCompletion",
      "comment": "Waits for a launched script to complete by using the given listener.",
      "javadoc": "Waits for a launched script to complete by using the given listener.\n@param listener the listener used to track script progress\n@param timeoutMS the max time to wait; failing if exceeded",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.test.ScriptTaskListener",
          "type_short": "ScriptTaskListener",
          "comment": "the listener used to track script progress"
        },
        {
          "name": "timeoutMS",
          "type_long": "long",
          "type_short": "long",
          "comment": "the max time to wait; failing if exceeded"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "replaceService",
      "comment": "Replaces the given implementations of the provided service class with the given class.",
      "javadoc": "Replaces the given implementations of the provided service class with the given class.\n@param tool the tool whose services to update (optional)\n@param service the service to override\n@param replacement the new version of the service\n@param \u003cT\u003e the service type",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "the tool whose services to update (optional)"
        },
        {
          "name": "service",
          "type_long": "java.lang.Class\u003c? extends T\u003e",
          "type_short": "Class",
          "comment": "the service to override"
        },
        {
          "name": "replacement",
          "type_long": "T",
          "type_short": "T",
          "comment": "the new version of the service"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLanguageService",
      "comment": "Get language service used for testing.",
      "javadoc": "Get language service used for testing.\n@return language service.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.LanguageService",
        "type_short": "LanguageService",
        "comment": "language service."
      },
      "throws": []
    },
    {
      "name": "getSLEIGH_X86_LANGUAGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Language",
        "type_short": "Language",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSLEIGH_X86_64_LANGUAGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Language",
        "type_short": "Language",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSLEIGH_8051_LANGUAGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Language",
        "type_short": "Language",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getZ80_LANGUAGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.Language",
        "type_short": "Language",
        "comment": ""
      },
      "throws": []
    }
  ]
}
