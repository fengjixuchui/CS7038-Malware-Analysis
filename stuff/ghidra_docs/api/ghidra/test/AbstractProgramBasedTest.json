{
  "name": "AbstractProgramBasedTest",
  "comment": "A convenience base class for creating tests that use the default tool and open a program.\n This class will create for you a tool, a TestEnv and will open the program \n specified by #getProgramName().\n \n To use this class, you must call #initialize() from your test or setUp \n method.\n \n Note: if you are loading a pre-existing program, then simply override \n #getProgramName().  Alternatively, if you are building a program, then override\n #getProgram() and return it there.",
  "javadoc": "A convenience base class for creating tests that use the default tool and open a program.\n This class will create for you a tool, a {@link TestEnv} and will open the program \n specified by {@link #getProgramName()}.\n \n \u003cP\u003eTo use this class, you must call {@link #initialize()} from your test or \u003ccode\u003esetUp\u003c/code\u003e \n method.\n \n \u003cP\u003eNote: if you are loading a pre-existing program, then simply override \n {@link #getProgramName()}.  Alternatively, if you are building a program, then override\n {@link #getProgram()} and return it there.",
  "static": false,
  "implements": [],
  "extends": "ghidra.test.AbstractGhidraHeadedIntegrationTest",
  "fields": [
    {
      "name": "env",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.test.TestEnv",
      "type_short": "TestEnv",
      "constant_value": null
    },
    {
      "name": "tool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.PluginTool",
      "type_short": "PluginTool",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "codeBrowser",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.core.codebrowser.CodeBrowserPlugin",
      "type_short": "CodeBrowserPlugin",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgramName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "getProgram",
      "comment": "Override this method if you need to build your own program.",
      "javadoc": "Override this method if you need to build your own program.\n@return the program to use for this test.\n@throws Exception if an exception is thrown opening the program",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the program to use for this test."
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if an exception is thrown opening the program"
        }
      ]
    },
    {
      "name": "tearDown",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "assertCurrentAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "expected",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "goTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "goTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "range",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "from",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "to",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "function",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addrs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offsets",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toAddressSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offsets",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addrs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrs",
          "type_long": "ghidra.program.model.address.Address[]",
          "type_short": "ghidra.program.model.address.Address[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "goTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "modifyProgram",
      "comment": "Provides a convenient method for modifying the current program, handling the transaction\n logic.",
      "javadoc": "Provides a convenient method for modifying the current program, handling the transaction\n logic.\n@param callback the code to execute",
      "static": false,
      "params": [
        {
          "name": "callback",
          "type_long": "utility.function.ExceptionalConsumer\u003cghidra.program.model.listing.Program,E\u003e",
          "type_short": "ExceptionalConsumer",
          "comment": "the code to execute"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createInProgram",
      "comment": "Provides a convenient method for modifying the current program, handling the transaction\n logic and returning a new item as a result.",
      "javadoc": "Provides a convenient method for modifying the current program, handling the transaction\n logic and returning a new item as a result.\n@param f the function for modifying the program and creating the desired result\n@return the result",
      "static": false,
      "params": [
        {
          "name": "f",
          "type_long": "utility.function.ExceptionalFunction\u003cghidra.program.model.listing.Program,R,E\u003e",
          "type_short": "ExceptionalFunction",
          "comment": "the function for modifying the program and creating the desired result"
        }
      ],
      "return": {
        "type_long": "R",
        "type_short": "R",
        "comment": "the result"
      },
      "throws": []
    }
  ]
}
