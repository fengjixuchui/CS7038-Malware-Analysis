{
  "name": "ProjectTestUtils",
  "comment": "Ghidra framework and program test utilities",
  "javadoc": "Ghidra framework and program test utilities",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "ignoredDeleteNames",
      "comment": "Names that can be ignored when deleting files during cleanup",
      "javadoc": "Names that can be ignored when deleting files during cleanup",
      "static": true,
      "type_long": "java.util.Set\u003cjava.lang.String\u003e",
      "type_short": "Set",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProject",
      "comment": "Open the project for the given directory and name.\n If the project does not exist, create one. \n Only once instance of a given project may be open at any given\n point in time.  Be sure to close the project if you will be\n re-opening.",
      "javadoc": "Open the project for the given directory and name.\n If the project does not exist, create one. \n Only once instance of a given project may be open at any given\n point in time.  Be sure to close the project if you will be\n re-opening.\n@param directory directory for the project\n@param name name of the project\n@return the project\n@throws IOException if there was a problem creating the project\n@throws LockException if the project is already open\n@throws IllegalArgumentException if the name has illegal characters such that a URL could\n not be created",
      "static": true,
      "params": [
        {
          "name": "directory",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "directory for the project"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the project"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.Project",
        "type_short": "Project",
        "comment": "the project"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem creating the project"
        },
        {
          "type_long": "ghidra.framework.store.LockException",
          "type_short": "LockException",
          "comment": "if the project is already open"
        }
      ]
    },
    {
      "name": "deleteProject",
      "comment": "Remove entire project.  Note: this will not remove the parent directory of\n the project.",
      "javadoc": "Remove entire project.  Note: this will not remove the parent \u003ccode\u003edirectory\u003c/code\u003e of\n the project.\n@param directory directory of the project.\n@param name The name of the project to delete\n@return True if the project was deleted.",
      "static": true,
      "params": [
        {
          "name": "directory",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "directory of the project."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the project to delete"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if the project was deleted."
      },
      "throws": []
    },
    {
      "name": "deleteLockFile",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "lockFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteDir",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createProgramFile",
      "comment": "Create an empty program file within the specified project folder.",
      "javadoc": "Create an empty program file within the specified project folder.\n@param proj active project.\n@param progName name of program and domain file to be created.\n@param language a specified language, or 0 if it does not matter.\n@param compilerSpec the compiler spec\n@param folder domain folder within the specified project which the\n user has permission to write.  If null, the root data folder will be used.\n@return new domain file.\n@throws InvalidNameException if the filename is invalid\n@throws CancelledException if the opening is cancelled\n@throws LanguageNotFoundException if the language cannot be found\n@throws IOException if there is an exception creating the program or domain file",
      "static": true,
      "params": [
        {
          "name": "proj",
          "type_long": "ghidra.framework.model.Project",
          "type_short": "Project",
          "comment": "active project."
        },
        {
          "name": "progName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of program and domain file to be created."
        },
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "a specified language, or 0 if it does not matter."
        },
        {
          "name": "compilerSpec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": "the compiler spec"
        },
        {
          "name": "folder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "domain folder within the specified project which the\n user has permission to write.  If null, the root data folder will be used."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "new domain file."
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the filename is invalid"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the opening is cancelled"
        },
        {
          "type_long": "ghidra.program.model.lang.LanguageNotFoundException",
          "type_short": "LanguageNotFoundException",
          "comment": "if the language cannot be found"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception creating the program or domain file"
        }
      ]
    },
    {
      "name": "getTool",
      "comment": "Launch a tool.",
      "javadoc": "Launch a tool.\n@param project the project to which the tool belongs\n@param toolName name of the tool to get from the active workspace.\n If null, launch a new empty tool in the active workspace.\n@return the tool",
      "static": true,
      "params": [
        {
          "name": "project",
          "type_long": "ghidra.framework.model.Project",
          "type_short": "Project",
          "comment": "the project to which the tool belongs"
        },
        {
          "name": "toolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the tool to get from the active workspace.\n If null, launch a new empty tool in the active workspace."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the tool"
      },
      "throws": []
    },
    {
      "name": "saveTool",
      "comment": "Save a tool to the project tool chest.",
      "javadoc": "Save a tool to the project tool chest.\n@param project The project which with the tool is associated.\n@param tool The tool to be saved\n@return The tool template for the given tool.",
      "static": true,
      "params": [
        {
          "name": "project",
          "type_long": "ghidra.framework.model.Project",
          "type_short": "Project",
          "comment": "The project which with the tool is associated."
        },
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "The tool to be saved"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.ToolTemplate",
        "type_short": "ToolTemplate",
        "comment": "The tool template for the given tool."
      },
      "throws": []
    },
    {
      "name": "deleteTool",
      "comment": "Remove the specified tool if it exists.",
      "javadoc": "Remove the specified tool if it exists.\n@param project the project\n@param toolName the tool name\n@return true if it existed and was removed from the local tool chest.",
      "static": true,
      "params": [
        {
          "name": "project",
          "type_long": "ghidra.framework.model.Project",
          "type_short": "Project",
          "comment": "the project"
        },
        {
          "name": "toolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the tool name"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if it existed and was removed from the local tool chest."
      },
      "throws": []
    }
  ]
}
