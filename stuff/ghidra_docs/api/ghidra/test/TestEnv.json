{
  "name": "TestEnv",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "FIVE_MINUTES",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "toolID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "instances",
      "comment": "Used to perform emergency cleanup.  Tests are expected to call #dispose() in\n their tearDown method.  This is here to catch the case where the is some fatal\n error that prevents that from taking place.",
      "javadoc": "Used to perform emergency cleanup.  Tests are expected to call {@link #dispose()} in\n their \u003ccode\u003etearDown\u003c/code\u003e method.  This is here to catch the case where the is some fatal\n error that prevents that from taking place.",
      "static": true,
      "type_long": "java.util.Set\u003cghidra.test.TestEnv\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "frontEndTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.FrontEndTool",
      "type_short": "FrontEndTool",
      "constant_value": null
    },
    {
      "name": "tool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.PluginTool",
      "type_short": "PluginTool",
      "constant_value": null
    },
    {
      "name": "programManager",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.test.TestProgramManager",
      "type_short": "TestProgramManager",
      "constant_value": null
    },
    {
      "name": "gp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.base.project.GhidraProject",
      "type_short": "GhidraProject",
      "constant_value": null
    },
    {
      "name": "extraTools",
      "comment": "A list of tools that have been created by instances of this class that will be\n disposed of at cleanup time.",
      "javadoc": "A list of tools that have been created by instances of this class that will be\n disposed of at cleanup time.",
      "static": false,
      "type_long": "java.util.List\u003cghidra.framework.plugintool.PluginTool\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for Ghidra\n A new test project is established.\n If it already exists it will first be deleted.",
      "javadoc": "Constructor for Ghidra\n A new test project is established.\n If it already exists it will first be deleted.\n@throws IOException if there is an issue creating a test project",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an issue creating a test project"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for Ghidra\n A new test project is established using the specified projectName.\n If it already exists it will first be deleted.\n If the test environment is not disposed within 1 minute the tests iwll be aborted",
      "javadoc": "Constructor for Ghidra\n A new test project is established using the specified projectName.\n If it already exists it will first be deleted.\n If the test environment is not disposed within 1 minute the tests iwll be aborted\n@param projectName the name of the project\n@throws IOException if there is an issue creating a test project",
      "static": false,
      "params": [
        {
          "name": "projectName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the project"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an issue creating a test project"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for Ghidra\n A new test project is established using the specified projectName.\n If it already exists it will first be deleted.",
      "javadoc": "Constructor for Ghidra\n A new test project is established using the specified projectName.\n If it already exists it will first be deleted.\n@param abortTimeout number of minutes within which this test environment must be\n \t\t  disposed.  If not disposed in a timely manner, System.exit will be invoked.\n@param projectName the name of the project\n@throws IOException if there is an issue creating a test project",
      "static": false,
      "params": [
        {
          "name": "abortTimeout",
          "type_long": "long",
          "type_short": "long",
          "comment": "number of minutes within which this test environment must be\n \t\t  disposed.  If not disposed in a timely manner, System.exit will be invoked."
        },
        {
          "name": "projectName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the project"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an issue creating a test project"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "This constructor allows clients to manage their own projects.  Also, this constructor\n will not enforce having only a single env instance running, which allows for multi-project\n testing.  All other constructors will enforce that a single instance of TestEnv can\n be running at one time, closing any previously opened instances before finishing\n construction.\n\n Note: this constructor is meant for subclasses.",
      "javadoc": "This constructor allows clients to manage their own projects.  Also, this constructor\n will not enforce having only a single env instance running, which allows for multi-project\n testing.  All other constructors will enforce that a single instance of TestEnv can\n be running at one time, closing any previously opened instances before finishing\n construction.\n\n \u003cP\u003eNote: this constructor is meant for subclasses.\n@param project the initialized project",
      "static": false,
      "params": [
        {
          "name": "project",
          "type_long": "ghidra.base.project.GhidraProject",
          "type_short": "GhidraProject",
          "comment": "the initialized project"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cleanupOldInstances",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTool",
      "comment": "Get the tool associated with this test environment.",
      "javadoc": "Get the tool associated with this test environment.\n@return the default test tool for this environment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the default test tool for this environment"
      },
      "throws": []
    },
    {
      "name": "closeTool",
      "comment": "Closes the TestEnv\u0027s default tool.  This method is asynchronous, so you\n must wait for the Swing thread to perform the work yourself.\n Watch out for modal dialogs.",
      "javadoc": "Closes the TestEnv\u0027s default tool.  This method is asynchronous, so you\n must wait for the Swing thread to perform the work yourself.\n Watch out for modal dialogs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "closeAllProgramsFor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "theTool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOpenProgamsFor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "theTool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.listing.Program\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "closeTool",
      "comment": "Closes the given tool.  This method is asynchronous, so you must wait for the Swing thread\n to perform the work yourself.  Watch out for modal dialogs.",
      "javadoc": "Closes the given tool.  This method is asynchronous, so you must wait for the Swing thread\n to perform the work yourself.  Watch out for modal dialogs.\n@param toolToClose The tool to close.",
      "static": false,
      "params": [
        {
          "name": "toolToClose",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "The tool to close."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "closeTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "toolToClose",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "ignoreChanges",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disposeFrontEndTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dipsoseTestTools",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disposeSingleTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pluginTool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveRestoreToolState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPlugin",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPlugin",
      "comment": "Adds and returns the plugin to this env\u0027s tool for the given class.   \n \n If you have not created a tool using this env, then the default \n tool from #lazyTool() is used.  If you have launched a tool, then that tool\n is used.   In the following example, the given plugin is added to the default tool:\n \n \t\tTestEnv env \u003d new TestEnv();\n \t\tenv.launchDefaultTool();\n \t\tFooPlugin foo \u003d env.addPlugin(FooPlugin.class);\n ",
      "javadoc": "Adds and returns the plugin to this env\u0027s tool for the given class.   \n \n \u003cP\u003eIf you have not created a tool using this env, then the default \n tool from {@link #lazyTool()} is used.  If you have launched a tool, then that tool\n is used.   In the following example, the given plugin is added to the default tool:\n \u003cpre\u003e\n \t\tTestEnv env \u003d new TestEnv();\n \t\tenv.launchDefaultTool();\n \t\tFooPlugin foo \u003d env.addPlugin(FooPlugin.class);\n \u003c/pre\u003e\n@param c the plugin class\n@return the plugin instance\n@throws PluginException if there is an exception adding the given tool",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the plugin class"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the plugin instance"
      },
      "throws": [
        {
          "type_long": "ghidra.framework.plugintool.util.PluginException",
          "type_short": "PluginException",
          "comment": "if there is an exception adding the given tool"
        }
      ]
    },
    {
      "name": "showTool",
      "comment": "Shows any previously created tool, creating a simple empty tool if not tool has yet \n been created.  \n \n This method is considered sub-standard and users should prefer instead \n #launchDefaultTool() or #launchDefaultTool(Program).",
      "javadoc": "Shows any previously created tool, creating a simple empty tool if not tool has yet \n been created.  \n \n \u003cP\u003eThis method is considered sub-standard and users should prefer instead \n {@link #launchDefaultTool()} or {@link #launchDefaultTool(Program)}.\n@return the newly shown tool",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the newly shown tool"
      },
      "throws": []
    },
    {
      "name": "showTool",
      "comment": "Shows any previously created tool, creating a simple empty tool if not tool has yet \n been created.  The given program will be opened in the tool.\n \n This method is considered sub-standard and users should prefer instead \n #launchDefaultTool() or #launchDefaultTool(Program).",
      "javadoc": "Shows any previously created tool, creating a simple empty tool if not tool has yet \n been created.  The given program will be opened in the tool.\n \n \u003cP\u003eThis method is considered sub-standard and users should prefer instead \n {@link #launchDefaultTool()} or {@link #launchDefaultTool(Program)}.\n@param p the program\n@return the newly shown tool",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the newly shown tool"
      },
      "throws": []
    },
    {
      "name": "removeAllConsumersExceptTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "t",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForWindow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "timeoutMS",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForDialogComponent",
      "comment": "Waits for the first window of the given class.  This method is the same as\n #waitForDialogComponent(Class, int) with the exception that the parent\n window is assumed to be this instance\u0027s tool frame.",
      "javadoc": "Waits for the first window of the given class.  This method is the same as\n {@link #waitForDialogComponent(Class, int)} with the exception that the parent\n window is assumed to be this instance\u0027s tool frame.\n@param ghidraClass The class of the dialog the user desires\n@param maxTimeMS The max amount of time in milliseconds to wait for the requested dialog\n        to appear.\n@return The first occurrence of a dialog that extends the given \u003ccode\u003eghirdraClass\u003c/code\u003e\n@deprecated use instead {@link AbstractDockingTest#waitForDialogComponent(Class)}",
      "static": false,
      "params": [
        {
          "name": "ghidraClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "The class of the dialog the user desires"
        },
        {
          "name": "maxTimeMS",
          "type_long": "int",
          "type_short": "int",
          "comment": "The max amount of time in milliseconds to wait for the requested dialog\n        to appear."
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "The first occurrence of a dialog that extends the given ghirdraClass"
      },
      "throws": []
    },
    {
      "name": "createGhidraTestProject",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "projectName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.base.project.GhidraProject",
        "type_short": "GhidraProject",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "deleteOldTestTools",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteSavedFrontEndTool",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "installDefaultTool",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "gp",
          "type_long": "ghidra.base.project.GhidraProject",
          "type_short": "GhidraProject",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeSimpleTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lazyTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFrontEndTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.main.FrontEndTool",
        "type_short": "FrontEndTool",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFrontEndProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.ComponentProvider",
        "type_short": "ComponentProvider",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeFrontEndFromSystem",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showFrontEndTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.main.FrontEndTool",
        "type_short": "FrontEndTool",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createDefaultTool",
      "comment": "This method differs from #launchDefaultTool() in that this method does not set the\n tool variable in of this TestEnv instance.",
      "javadoc": "This method differs from {@link #launchDefaultTool()} in that this method does not set the\n \u003ccode\u003etool\u003c/code\u003e variable in of this \u003ccode\u003eTestEnv\u003c/code\u003e instance.\n@return the tool",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the tool"
      },
      "throws": []
    },
    {
      "name": "launchDefaultTool",
      "comment": "Launches the default tool of the test system (\"CodeBrowser\").\n This method will load the tool from resources and not from the\n user\u0027s Ghidra settings.\n \n Note: Calling this method also changes the tool that this\n instance of the TestEnv is using, which is the reason for the existence\n of this method.",
      "javadoc": "Launches the default tool of the test system (\"CodeBrowser\").\n This method will load the tool from resources and \u003cb\u003enot from the\n user\u0027s Ghidra settings\u003c/b\u003e.\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e Calling this method also changes the tool that this\n instance of the TestEnv is using, which is the reason for the existence\n of this method.\n@return the tool that is launched",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the tool that is launched"
      },
      "throws": []
    },
    {
      "name": "launchDefaultToolByName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "toolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToolTemplate",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "toolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.ToolTemplate",
        "type_short": "ToolTemplate",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "runScript",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "scriptFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.test.ScriptTaskListener",
        "type_short": "ScriptTaskListener",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.framework.plugintool.util.PluginException",
          "type_short": "PluginException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getGhidraProject",
      "comment": "Returns GhidraProject associated with this environment",
      "javadoc": "Returns GhidraProject associated with this environment\n@return the project",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.base.project.GhidraProject",
        "type_short": "GhidraProject",
        "comment": "the project"
      },
      "throws": []
    },
    {
      "name": "closeAndReopenProject",
      "comment": "A convenience method to close and then reopen the default project created by this TestEnv\n instance.  This will not delete the project between opening and closing and will restore\n the project to its previous state.",
      "javadoc": "A convenience method to close and then reopen the default project created by this TestEnv\n instance.  This will not delete the project between opening and closing and will restore\n the project to its previous state.\n@throws IOException if any exception occurs while saving and reopening",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if any exception occurs while saving and reopening"
        }
      ]
    },
    {
      "name": "getProjectManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ProjectManager",
        "type_short": "ProjectManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.Project",
        "type_short": "Project",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restartTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "launchAnotherDefaultTool",
      "comment": "Launches another default tool, not overwriting this env\u0027s current tool.",
      "javadoc": "Launches another default tool, not overwriting this env\u0027s current tool.\n@return the new tool",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the new tool"
      },
      "throws": []
    },
    {
      "name": "getGhidraCreatedTools",
      "comment": "Returns an array of tools spawned by the Ghidra environment.\n NOTE: This array will not contain any of the TestTools!",
      "javadoc": "Returns an array of tools spawned by the Ghidra environment.\n NOTE: This array will not contain any of the TestTools!\n@return an array of tools spawned by the Ghidra environment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool[]",
        "type_short": "ghidra.framework.plugintool.PluginTool[]",
        "comment": "an array of tools spawned by the Ghidra environment"
      },
      "throws": []
    },
    {
      "name": "connectTools",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "producer",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "consumer",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.ToolConnection",
        "type_short": "ToolConnection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disconnectTools",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "producer",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "consumer",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreProgram",
      "comment": "Copies the specified program zip file to the JUnit test project\u0027s root folder. This\n means that the program will appear in the FrontEndTool as part of the project.  That is\n the only reason to use this method vice openProgram().",
      "javadoc": "Copies the specified program zip file to the JUnit test project\u0027s root folder. \u003cb\u003eThis\n means that the program will appear in the FrontEndTool as part of the project.\u003c/b\u003e  That is\n the only reason to use this method vice openProgram().\n@param programName the name of the program zip file without the \".gzf\" extension.\n@return the restored domain file\n@throws FileNotFoundException if the program file cannot be found",
      "static": false,
      "params": [
        {
          "name": "programName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the program zip file without the \".gzf\" extension."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "the restored domain file"
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the program file cannot be found"
        }
      ]
    },
    {
      "name": "findProvidedDataTypeArchive",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "relativePathName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreDataTypeArchive",
      "comment": "Creates a project data type archive in the indicated test project folder from the \".gdt\"\n file indicated by the relative pathname.",
      "javadoc": "Creates a project data type archive in the indicated test project folder from the \".gdt\"\n file indicated by the relative pathname.\n@param relativePathName This should be a pathname relative to the \"test_resources/testdata\"\n \t\t  director or relative to the \"typeinfo\" directory. The name should\n        include the \".gdt\" suffix.\n@param domainFolder the folder in the test project where the archive should be created\n@return the domain file  that was created in the project\n@throws Exception if an exception occurs",
      "static": false,
      "params": [
        {
          "name": "relativePathName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "This should be a pathname relative to the \"test_resources/testdata\"\n \t\t  director or relative to the \"typeinfo\" directory. The name should\n        include the \".gdt\" suffix."
        },
        {
          "name": "domainFolder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "the folder in the test project where the archive should be created"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "the domain file  that was created in the project"
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if an exception occurs"
        }
      ]
    },
    {
      "name": "saveToCache",
      "comment": "Save a program to the cached program store.  A SaveAs will be performed on the\n program to its cached storage location.",
      "javadoc": "Save a program to the cached program store.  A SaveAs will be performed on the\n program to its cached storage location.\n@param progName program name\n@param program program object\n@param replace if true any existing cached database with the same name will be replaced\n@param monitor task monitor\n@throws Exception if already cached",
      "static": false,
      "params": [
        {
          "name": "progName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "program name"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.database.ProgramDB",
          "type_short": "ProgramDB",
          "comment": "program object"
        },
        {
          "name": "replace",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true any existing cached database with the same name will be replaced"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if already cached"
        }
      ]
    },
    {
      "name": "isProgramCached",
      "comment": "Determine if specified program already exists with the program cache",
      "javadoc": "Determine if specified program already exists with the program cache\n@param programName the name\n@return true if specified program already exists with the program cache",
      "static": false,
      "params": [
        {
          "name": "programName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if specified program already exists with the program cache"
      },
      "throws": []
    },
    {
      "name": "removeFromProgramCache",
      "comment": "Remove specified program from cache",
      "javadoc": "Remove specified program from cache\n@param programName the name",
      "static": false,
      "params": [
        {
          "name": "programName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadAnalyzedNotepad",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.database.ProgramDB",
        "type_short": "ProgramDB",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "Open a read-only test program from the test data directory.\n This program must be released prior to disposing this test environment.\n NOTE: Some tests rely on this method returning null when file does\n not yet exist within the resource area (e.g., test binaries for P-Code Tests)",
      "javadoc": "Open a read-only test program from the test data directory.\n This program must be released prior to disposing this test environment.\n NOTE: Some tests rely on this method returning null when file does\n not yet exist within the resource area (e.g., test binaries for P-Code Tests)\n@param programName name of program database within the test data directory.\n@return program or null if program file not found",
      "static": false,
      "params": [
        {
          "name": "programName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of program database within the test data directory."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.ProgramDB",
        "type_short": "ProgramDB",
        "comment": "program or null if program file not found"
      },
      "throws": []
    },
    {
      "name": "launchDefaultTool",
      "comment": "Launches the default tool of the test system (\"CodeBrowser\") using the\n given program.   This method will load the tool from resources and not from the\n user\u0027s Ghidra settings.\n \n Note: Calling this method also changes the tool that this\n instance of the TestEnv is using, which is the reason for the existence\n of this method.",
      "javadoc": "Launches the default tool of the test system (\"CodeBrowser\") using the\n given program.   This method will load the tool from resources and \u003cb\u003enot from the\n user\u0027s Ghidra settings\u003c/b\u003e.\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e Calling this method also changes the tool that this\n instance of the TestEnv is using, which is the reason for the existence\n of this method.\n@param program The program to load into the default tool; may be null\n@return the tool that is launched",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program to load into the default tool; may be null"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the tool that is launched"
      },
      "throws": []
    },
    {
      "name": "launchTool",
      "comment": "Launches a tool of the given name using the given domain file.\n \n Note: the tool returned will have auto save disabled by default.",
      "javadoc": "Launches a tool of the given name using the given domain file.\n \u003cp\u003e\n Note: the tool returned will have auto save disabled by default.\n@param toolName the tool\u0027s name\n@return the tool that is launched",
      "static": false,
      "params": [
        {
          "name": "toolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the tool\u0027s name"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the tool that is launched"
      },
      "throws": []
    },
    {
      "name": "launchTool",
      "comment": "Launches a tool of the given name using the given domain file.\n \n Note: the tool returned will have auto save disabled by default.",
      "javadoc": "Launches a tool of the given name using the given domain file.\n \u003cp\u003e\n Note: the tool returned will have auto save disabled by default.\n@param toolName the name of the tool to launch\n@param domainFile The domain file used to launch the tool; may be null\n@return the tool that is launched",
      "static": false,
      "params": [
        {
          "name": "toolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the tool to launch"
        },
        {
          "name": "domainFile",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": "The domain file used to launch the tool; may be null"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the tool that is launched"
      },
      "throws": []
    },
    {
      "name": "setAutoSaveEnabled",
      "comment": "Sets the auto-save feature for all tool instances running under the FrontEndTool\n created by this TestEnv instance.  Auto-save is off by default when testing.",
      "javadoc": "Sets the auto-save feature for all tool instances running under the {@link FrontEndTool}\n created by this TestEnv instance.  Auto-save is off by default when testing.\n@param enabled true enables auto-save",
      "static": false,
      "params": [
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true enables auto-save"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setAutoSaveEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "frontEndToolInstance",
          "type_long": "ghidra.framework.main.FrontEndTool",
          "type_short": "FrontEndTool",
          "comment": ""
        },
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadResourceProgramAsBinary",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "programName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        },
        {
          "name": "compilerSpec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.LanguageNotFoundException",
          "type_short": "LanguageNotFoundException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "loadResourceProgramAsBinary",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "programName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "processor",
          "type_long": "ghidra.program.model.lang.Processor",
          "type_short": "Processor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "release",
      "comment": "Release a program which was obtained from this test environment.",
      "javadoc": "Release a program which was obtained from this test environment.\n@param program the program",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cleanupAutoAnalysisManagers",
      "comment": "Special code to make sure that the tool used by an AutoAnalysis manager instance is\n removed.  This prevents the accidental re-use of the wrong tool between test runs.\n (Why?  Well, the AA manager has a static map of tools and it sometimes picks tools to\n use based upon which GUI window is active, which when the current window is not active,\n can cause the wrong tool to be used for a test, which means that a disposed tool can\n be used, which prevents AA from running).\n \n This code is our use of inside knowledge to cleanup testing artifacts.\n \n Note: if each test fired a \u0027program closed\u0027 event, then this wouldn\u0027t be an issue, but\n they don\u0027t.  Further, doing that here has ramifications with threading and timely\n closing of the test environment.  So, rather than fire an event here, we will just\n do our magic.",
      "javadoc": "Special code to make sure that the tool used by an AutoAnalysis manager instance is\n removed.  This prevents the accidental re-use of the wrong tool between test runs.\n (Why?  Well, the AA manager has a static map of tools and it sometimes picks tools to\n use based upon which GUI window is active, which when the current window is not active,\n can cause the wrong tool to be used for a test, which means that a disposed tool can\n be used, which prevents AA from running).\n \u003cp\u003e\n This code is our use of inside knowledge to cleanup testing artifacts.\n \u003cp\u003e\n Note: if each test fired a \u0027program closed\u0027 event, then this wouldn\u0027t be an issue, but\n they don\u0027t.  Further, doing that here has ramifications with threading and timely\n closing of the test environment.  So, rather than fire an event here, we will just\n do our magic.",
      "static": false,
      "params": [
        {
          "name": "t",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "open",
      "comment": "Opens the given program in the test tool.",
      "javadoc": "Opens the given program in the test tool.\n@param program the program to open",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to open"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "Closes the given program, ignoring all changes, for each tool known to this TestEnv.",
      "javadoc": "Closes the given program, ignoring all changes, for each tool known to this TestEnv.\n@param p the program to close",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to close"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteTestProject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "projectName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disposeAllTasks",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "printOpenModalDialogs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disposeTestTools",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "privateWaitForSwingRunnables",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disposeAllSwingUpdateManagers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markAllProgramsAsUnchanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disconnectConnectedTools",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "printProgramConsumers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resetDefaultTools",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
