{
  "name": "TestProgramManager",
  "comment": "A class to handle locating, opening and caching (within a JVM) programs in the test\n environment.  (This code was formerly inside of TestEnv.)",
  "javadoc": "A class to handle locating, opening and caching (within a JVM) programs in the test\n environment.  (This code was formerly inside of TestEnv.)",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "testPrograms",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.framework.store.db.PrivateDatabase\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "openTestPrograms",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cghidra.program.model.listing.Program\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "DB_DIR_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"db\""
    },
    {
      "name": "dbTestDir",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.io.File",
      "type_short": "File",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "Open a read-only test program from the test data directory.\n This program must be released prior to disposing this test environment.\n NOTE: Some tests rely on this method returning null when file does\n not yet exist within the resource area (e.g., test binaries for P-Code Tests)",
      "javadoc": "Open a read-only test program from the test data directory.\n This program must be released prior to disposing this test environment.\n NOTE: Some tests rely on this method returning null when file does\n not yet exist within the resource area (e.g., test binaries for P-Code Tests)\n@param progName name of program database within the test data directory.\n@return program or null if program file not found",
      "static": false,
      "params": [
        {
          "name": "progName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of program database within the test data directory."
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.ProgramDB",
        "type_short": "ProgramDB",
        "comment": "program or null if program file not found"
      },
      "throws": []
    },
    {
      "name": "getOpenPrograms",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.listing.Program\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addOpenProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "release",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveToCache",
      "comment": "Save a program to the cached program store.  A SaveAs will be performed on the\n program to its cached storage location.",
      "javadoc": "Save a program to the cached program store.  A SaveAs will be performed on the\n program to its cached storage location.\n@param progName program name\n@param program program object\n@param replace if true any existing cached database with the same name will be replaced\n@param monitor task monitor\n@throws IOException if the database cannot be created\n@throws DuplicateNameException if already cached\n@throws CancelledException if the save operation is cancelled",
      "static": false,
      "params": [
        {
          "name": "progName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "program name"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.database.ProgramDB",
          "type_short": "ProgramDB",
          "comment": "program object"
        },
        {
          "name": "replace",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true any existing cached database with the same name will be replaced"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the database cannot be created"
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if already cached"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the save operation is cancelled"
        }
      ]
    },
    {
      "name": "isProgramCached",
      "comment": "Determine if the specified program already exists with the program cache",
      "javadoc": "Determine if the specified program already exists with the program cache\n@param name the program name\n@return true if the specified program already exists with the program cache",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the program name"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the specified program already exists with the program cache"
      },
      "throws": []
    },
    {
      "name": "removeFromProgramCache",
      "comment": "Remove specified program from cache",
      "javadoc": "Remove specified program from cache\n@param name the program name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the program name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disposeOpenPrograms",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markAllProgramsAsUnchanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAllConsumersExcept",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addProgramToProject",
      "comment": "Copies the specified program zip file to the JUnit test project\u0027s root folder. This\n means that the program will appear in the FrontEndTool as part of the project.  That is\n the only reason to use this method vice openProgram().",
      "javadoc": "Copies the specified program zip file to the JUnit test project\u0027s root folder. \u003cb\u003eThis\n means that the program will appear in the FrontEndTool as part of the project.\u003c/b\u003e  That is\n the only reason to use this method vice openProgram().\n@param project the project into which the file will be restored\n@param programName the name of the program zip file without the \".gzf\" extension\n@return the file\n@throws FileNotFoundException if the file cannot be found",
      "static": false,
      "params": [
        {
          "name": "project",
          "type_long": "ghidra.framework.model.Project",
          "type_short": "Project",
          "comment": "the project into which the file will be restored"
        },
        {
          "name": "programName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the program zip file without the \".gzf\" extension"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "the file"
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the file cannot be found"
        }
      ]
    },
    {
      "name": "addProgramToProject",
      "comment": "Copies the specified program zip file to the JUnit test project\u0027s folder. This\n means that the program will appear in the FrontEndTool as part of the project.  That is\n the only reason to use this method vice openProgram().",
      "javadoc": "Copies the specified program zip file to the JUnit test project\u0027s folder. \u003cb\u003eThis\n means that the program will appear in the FrontEndTool as part of the project.\u003c/b\u003e  That is\n the only reason to use this method vice openProgram().\n@param folder the folder into which the domain file will be inserted\n@param programName the name of the program zip file without the \".gzf\" extension.\n@return the file\n@throws FileNotFoundException if the file cannot be found",
      "static": false,
      "params": [
        {
          "name": "folder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "the folder into which the domain file will be inserted"
        },
        {
          "name": "programName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the program zip file without the \".gzf\" extension."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "the file"
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the file cannot be found"
        }
      ]
    },
    {
      "name": "openProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "progName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "db",
          "type_long": "ghidra.framework.store.db.PrivateDatabase",
          "type_short": "PrivateDatabase",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.database.ProgramDB",
        "type_short": "ProgramDB",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "createNewDB",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "programName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "db",
          "type_long": "ghidra.framework.store.db.PrivateDatabase",
          "type_short": "PrivateDatabase",
          "comment": ""
        },
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.db.PrivateDatabase",
        "type_short": "PrivateDatabase",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDbDir",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "progName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDbTestDir",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "newDbTestDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDbTestDir",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTestDBDirectory",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadDBFromDirectory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "db",
          "type_long": "ghidra.framework.store.db.PrivateDatabase",
          "type_short": "PrivateDatabase",
          "comment": ""
        },
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.db.PrivateDatabase",
        "type_short": "PrivateDatabase",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "upgradeDatabase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "db",
          "type_long": "ghidra.framework.store.db.PrivateDatabase",
          "type_short": "PrivateDatabase",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    }
  ]
}
