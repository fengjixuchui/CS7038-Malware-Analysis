{
  "name": "AbstractGhidraHeadedIntegrationTest",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.test.AbstractGhidraHeadlessIntegrationTest",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createApplicationLayout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "utility.application.ApplicationLayout",
        "type_short": "ApplicationLayout",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createApplicationConfiguration",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.ApplicationConfiguration",
        "type_short": "ApplicationConfiguration",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForProgram",
      "comment": "Flushes the given program\u0027s events before waiting for the swing update manager",
      "javadoc": "Flushes the given program\u0027s events before waiting for the swing update manager\n@param program The program whose events will be flushed; may be null",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program whose events will be flushed; may be null"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPlugin",
      "comment": "Adds the given plugin to the tool and then returns the instance of the plugin that was\n added",
      "javadoc": "Adds the given plugin to the tool and then returns the instance of the plugin that was\n added\n@param tool the tool\n@param c the class of the plugin to add\n@return the newly added plugin\n@throws PluginException if the plugin could not be constructed, or there was problem \n \t\t   executing its init() method, or if a plugin of this class already exists in the tool",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "the tool"
        },
        {
          "name": "c",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the class of the plugin to add"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the newly added plugin"
      },
      "throws": [
        {
          "type_long": "ghidra.framework.plugintool.util.PluginException",
          "type_short": "PluginException",
          "comment": "if the plugin could not be constructed, or there was problem \n \t\t   executing its init() method, or if a plugin of this class already exists in the tool"
        }
      ]
    },
    {
      "name": "getPluginByName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "pluginName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.plugintool.Plugin",
        "type_short": "Plugin",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showTool",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showDialogWithoutBlocking",
      "comment": "Shows the given DialogComponentProvider using the given tool\u0027s \n PluginTool#showDialog(DialogComponentProvider) method.",
      "javadoc": "Shows the given DialogComponentProvider using the given tool\u0027s \n {@link PluginTool#showDialog(DialogComponentProvider)} method.\n@param tool The tool used to show the given provider.\n@param provider The DialogComponentProvider to show.\n@return The provider once it has been shown, or null if the provider is not shown within\n         the given maximum wait time.",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "The tool used to show the given provider."
        },
        {
          "name": "provider",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": "The DialogComponentProvider to show."
        }
      ],
      "return": {
        "type_long": "docking.DialogComponentProvider",
        "type_short": "DialogComponentProvider",
        "comment": "The provider once it has been shown, or null if the provider is not shown within\n         the given maximum wait time."
      },
      "throws": []
    },
    {
      "name": "waitForBusyTool",
      "comment": "Waits for the tool to finish executing commands and tasks",
      "javadoc": "Waits for the tool to finish executing commands and tasks\n@param tool the tool\n@throws AssertionFailedError if the tool does not finish work within a reasonable limit",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "the tool"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAction",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "plugin",
          "type_long": "ghidra.framework.plugintool.Plugin",
          "type_short": "Plugin",
          "comment": ""
        },
        {
          "name": "actionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "docking.action.DockingActionIf",
        "type_short": "DockingActionIf",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveTool",
      "comment": "Save the given tool to the project tool chest.  If the tool already exists, then it will\n be overwritten with the given tool.",
      "javadoc": "Save the given tool to the project tool chest.  If the tool already exists, then it will\n be overwritten with the given tool.\n@param project The project which with the tool is associated.\n@param tool The tool to be saved\n@return the new tool",
      "static": true,
      "params": [
        {
          "name": "project",
          "type_long": "ghidra.framework.model.Project",
          "type_short": "Project",
          "comment": "The project which with the tool is associated."
        },
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "The tool to be saved"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the new tool"
      },
      "throws": []
    },
    {
      "name": "click",
      "comment": "Triggers a browser click at the current cursor location.  Thus, this method should be \n called only after the browser location is set the the desired field.",
      "javadoc": "Triggers a browser click at the current cursor location.  Thus, this method should be \n called only after the browser location is set the the desired field.\n@param codeBrowser the CodeBrowserPlugin\n@param clickCount the click count",
      "static": false,
      "params": [
        {
          "name": "codeBrowser",
          "type_long": "ghidra.app.plugin.core.codebrowser.CodeBrowserPlugin",
          "type_short": "CodeBrowserPlugin",
          "comment": "the CodeBrowserPlugin"
        },
        {
          "name": "clickCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "the click count"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "click",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "codeBrowser",
          "type_long": "ghidra.app.plugin.core.codebrowser.CodeBrowserPlugin",
          "type_short": "CodeBrowserPlugin",
          "comment": ""
        },
        {
          "name": "clickCount",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "wait",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "click",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fp",
          "type_long": "docking.widgets.fieldpanel.FieldPanel",
          "type_short": "FieldPanel",
          "comment": ""
        },
        {
          "name": "clickCount",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "wait",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "click",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fp",
          "type_long": "docking.widgets.fieldpanel.FieldPanel",
          "type_short": "FieldPanel",
          "comment": ""
        },
        {
          "name": "p",
          "type_long": "java.awt.Point",
          "type_short": "Point",
          "comment": ""
        },
        {
          "name": "clickCount",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "wait",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
