{
  "name": "ClassicSampleX86ProgramBuilder",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.database.ProgramBuilder",
  "fields": [
    {
      "name": "disableAnalysis",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct sample program builder using the x86 language and default compiler spec.\n A set of predefined memory bytes, code units and functions will be added.\n This builder object will be the program consumer and must be disposed to properly\n release the program.",
      "javadoc": "Construct sample program builder using the x86 language and default compiler spec.\n A set of predefined memory bytes, code units and functions will be added.\n This builder object will be the program consumer and must be disposed to properly\n release the program.\n@throws Exception if an unexpected exception happens",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if an unexpected exception happens"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct sample program builder using the x86 language and default compiler spec.\n A set of predefined memory bytes, code units and functions will be added.\n This builder object will be the program consumer and must be disposed to properly\n release the program.",
      "javadoc": "Construct sample program builder using the x86 language and default compiler spec.\n A set of predefined memory bytes, code units and functions will be added.\n This builder object will be the program consumer and must be disposed to properly\n release the program.\n@param disableAnalysis if true, the analysis manager will be disabled\n@throws Exception if an unexpected exception happens",
      "static": false,
      "params": [
        {
          "name": "disableAnalysis",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the analysis manager will be disabled"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if an unexpected exception happens"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct sample program builder using the x86 language and default compiler spec.\n A set of predefined memory bytes, code units and functions will be added.\n This builder object will be the program consumer and must be disposed to properly\n release the program.",
      "javadoc": "Construct sample program builder using the x86 language and default compiler spec.\n A set of predefined memory bytes, code units and functions will be added.\n This builder object will be the program consumer and must be disposed to properly\n release the program.\n@param name program name\n@param disableAnalysis if true, the analysis manager will be disabled\n@throws Exception if an unexpected exception happens",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "program name"
        },
        {
          "name": "disableAnalysis",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the analysis manager will be disabled"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if an unexpected exception happens"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct sample program builder using the x86 language and default compiler spec.\n A set of predefined memory bytes, code units and functions will be added.",
      "javadoc": "Construct sample program builder using the x86 language and default compiler spec.\n A set of predefined memory bytes, code units and functions will be added.\n@param name program name\n@param disableAnalysis if true, the analysis manager will be disabled\n@param consumer program consumer (if null this builder will be used as consumer and must be disposed to release program)\n@throws Exception",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "program name"
        },
        {
          "name": "disableAnalysis",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the analysis manager will be disabled"
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "program consumer (if null this builder will be used as consumer and must be disposed to release program)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "setupSampleProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "disableAnalysis",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFunction_30d2",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFunction_59a3",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFunction_2239",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFunction_entry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        },
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFunction_248f",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFunction_2cf5",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFunction_48a3",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFunction_sscanf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.database.function.OverlappingFunctionException",
          "type_short": "OverlappingFunctionException",
          "comment": ""
        }
      ]
    }
  ]
}
