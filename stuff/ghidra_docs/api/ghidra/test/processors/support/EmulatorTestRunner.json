{
  "name": "EmulatorTestRunner",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "testGroup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.test.processors.support.PCodeTestGroup",
      "type_short": "PCodeTestGroup",
      "constant_value": null
    },
    {
      "name": "emuHelper",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.emulator.EmulatorHelper",
      "type_short": "EmulatorHelper",
      "constant_value": null
    },
    {
      "name": "emu",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.emulator.Emulator",
      "type_short": "Emulator",
      "constant_value": null
    },
    {
      "name": "executionListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.test.processors.support.ExecutionListener",
      "type_short": "ExecutionListener",
      "constant_value": null
    },
    {
      "name": "haltedOnTimer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "lastError",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "callOtherErrors",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "callOtherCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "unimplementedSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.TreeSet\u003cjava.lang.String\u003e",
      "type_short": "TreeSet",
      "constant_value": null
    },
    {
      "name": "dumpPointMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cghidra.program.model.address.Address,java.util.List\u003cghidra.test.processors.support.EmulatorTestRunner.DumpPoint\u003e\u003e",
      "type_short": "HashMap",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "testGroup",
          "type_long": "ghidra.test.processors.support.PCodeTestGroup",
          "type_short": "PCodeTestGroup",
          "comment": ""
        },
        {
          "name": "executionListener",
          "type_long": "ghidra.test.processors.support.ExecutionListener",
          "type_short": "ExecutionListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUnimplementedPcodeops",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cjava.lang.String\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTestGroup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.test.processors.support.PCodeTestGroup",
        "type_short": "PCodeTestGroup",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEmulatorHelper",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.emulator.EmulatorHelper",
        "type_short": "EmulatorHelper",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setContextRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ctxRegValue",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCurrentAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCurrentInstruction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "flipBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegisterValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.RegisterValue",
        "type_short": "RegisterValue",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegisterValueString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "regName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "regName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDumpPoint",
      "comment": "Add memory dump point",
      "javadoc": "Add memory dump point\n@param breakAddr instruction address at which execution should pause (before it is executed)\n so that the specified memory may be dumped to the log during trace execution mode.\n@param dumpAddr memory address which should be dumped\n@param dumpSize number elements which should be dumped\n@param elementSize size of each element in bytes (be reasonable!)\n@param elementFormat HEX, DECIMAL or FLOAT\n@param comment dump comment",
      "static": false,
      "params": [
        {
          "name": "breakAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "instruction address at which execution should pause (before it is executed)\n so that the specified memory may be dumped to the log during trace execution mode."
        },
        {
          "name": "dumpAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "memory address which should be dumped"
        },
        {
          "name": "dumpSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "number elements which should be dumped"
        },
        {
          "name": "elementSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of each element in bytes (be reasonable!)"
        },
        {
          "name": "elementFormat",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner.DumpFormat",
          "type_short": "DumpFormat",
          "comment": "HEX, DECIMAL or FLOAT"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "dump comment"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDumpPoint",
      "comment": "Add memory dump point",
      "javadoc": "Add memory dump point\n@param breakAddr instruction address at which execution should pause (before it is executed)\n so that the specified memory may be dumped to the log during trace execution mode.\n@param dumpAddrReg register containing the memory address offset which should be dumped\n@param relativeOffset dump register relative offset\n@param dumpAddrSpace address space to which memory offset should be applied\n@param dumpSize number elements which should be dumped\n@param elementSize size of each element in bytes (be reasonable!)\n@param elementFormat HEX, DECIMAL or FLOAT\n@param comment dump comment",
      "static": false,
      "params": [
        {
          "name": "breakAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "instruction address at which execution should pause (before it is executed)\n so that the specified memory may be dumped to the log during trace execution mode."
        },
        {
          "name": "dumpAddrReg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": "register containing the memory address offset which should be dumped"
        },
        {
          "name": "relativeOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "dump register relative offset"
        },
        {
          "name": "dumpAddrSpace",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "address space to which memory offset should be applied"
        },
        {
          "name": "dumpSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "number elements which should be dumped"
        },
        {
          "name": "elementSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "size of each element in bytes (be reasonable!)"
        },
        {
          "name": "elementFormat",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner.DumpFormat",
          "type_short": "DumpFormat",
          "comment": "HEX, DECIMAL or FLOAT"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "dump comment"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dump",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dumpList",
          "type_long": "java.util.List\u003cghidra.test.processors.support.EmulatorTestRunner.DumpPoint\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLastFunctionName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "testGroup",
          "type_long": "ghidra.test.processors.support.PCodeTestGroup",
          "type_short": "PCodeTestGroup",
          "comment": ""
        },
        {
          "name": "logError",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEmuError",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCallOtherErrors",
      "comment": "Get number of CALLOTHER errors detected when a test pass was registered.\n This number should be subtracted from the pass count and possibly added\n to the failure count.  Number does not reflect total number of CALLOTHER \n pcodeops encountered but only the number of passed tests affected.\n See log for all CALLOTHER executions detected.",
      "javadoc": "Get number of CALLOTHER errors detected when a test pass was registered.\n This number should be subtracted from the pass count and possibly added\n to the failure count.  Number does not reflect total number of CALLOTHER \n pcodeops encountered but only the number of passed tests affected.\n See log for all CALLOTHER executions detected.\n@return number of CALLOTHER errors",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of CALLOTHER errors"
      },
      "throws": []
    },
    {
      "name": "execute",
      "comment": "Execute test group without instruction stepping/tracing",
      "javadoc": "Execute test group without instruction stepping/tracing\n@param timeLimitMS\n@param monitor\n@return \n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "timeLimitMS",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "executeSingleStep",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "stepLimit",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "alignAddressOffset",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "alignAddress",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPrintfReturn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "executeAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "printfCallAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
