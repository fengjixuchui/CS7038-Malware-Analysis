{
  "name": "ExecutionListener",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.test.processors.support.TestLogger"
  ],
  "fields": [],
  "methods": [
    {
      "name": "stepCompleted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "testRunner",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner",
          "type_short": "EmulatorTestRunner",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "logWrite",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "testRunner",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner",
          "type_short": "EmulatorTestRunner",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "values",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "logRead",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "testRunner",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner",
          "type_short": "EmulatorTestRunner",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "values",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
