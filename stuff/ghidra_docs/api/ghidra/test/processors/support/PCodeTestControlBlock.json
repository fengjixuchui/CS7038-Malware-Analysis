{
  "name": "PCodeTestControlBlock",
  "comment": "PCodeTestControlBlock data is read from each binary test file and\n identified by the MAIN_CONTROL_BLOCK_MAGIC 64-bit character field value at the start of the \n data structure.  Only one instance of this should exist within the binary.",
  "javadoc": "\u003ccode\u003ePCodeTestControlBlock\u003c/code\u003e data is read from each binary test file and\n identified by the MAIN_CONTROL_BLOCK_MAGIC 64-bit character field value at the start of the \n data structure.  Only one instance of this should exist within the binary.",
  "static": false,
  "implements": [],
  "extends": "ghidra.test.processors.support.PCodeTestAbstractControlBlock",
  "fields": [
    {
      "name": "INITIAL_FUNCTION_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cNONE\u003e\""
    },
    {
      "name": "UNKNOWN_FUNCTION_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cUNKNOWN\u003e\""
    },
    {
      "name": "MAIN_CONTROL_BLOCK_MAGIC",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"AbCdEFgH\""
    },
    {
      "name": "testInfoStruct",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.Structure",
      "type_short": "Structure",
      "constant_value": null
    },
    {
      "name": "groupInfoStruct",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.Structure",
      "type_short": "Structure",
      "constant_value": null
    },
    {
      "name": "restrictedSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSetView",
      "type_short": "AddressSetView",
      "constant_value": null
    },
    {
      "name": "testFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.test.processors.support.PCodeTestFile",
      "type_short": "PCodeTestFile",
      "constant_value": null
    },
    {
      "name": "cachedProgramPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "testGroups",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.test.processors.support.PCodeTestGroup\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "onPassFunctionAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "onErrorFunctionAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "onDoneFunctionAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "sprintfFunctionAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "sprintfBufferAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "numPassOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "numFailOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "lastTestPosOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "lastErrorLineOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "lastErrorFileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "lastFuncOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "sprintfEnableOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "testResults",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.test.processors.support.PCodeTestResults",
      "type_short": "PCodeTestResults",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct test control block instance for the specified\n program.  Create TestInfo structure data within program if requested.",
      "javadoc": "Construct test control block instance for the specified\n program.  Create TestInfo structure data within program if requested.\n@param program program containing control block structure\n@param restrictedSet the restricted memory area which should be searched \n for control structures\n@param testInfoStructAddr address of Main TestInfo structure\n@param testFile original binary test file\n@param cachedProgramPath program path within program file cache\n@param applyStruct create structure Data within program if true\n@throws InvalidControlBlockException\n@throws CodeUnitInsertionException if applyStruct failed",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program containing control block structure"
        },
        {
          "name": "restrictedSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the restricted memory area which should be searched \n for control structures"
        },
        {
          "name": "testInfoStructAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of Main TestInfo structure"
        },
        {
          "name": "testFile",
          "type_long": "ghidra.test.processors.support.PCodeTestFile",
          "type_short": "PCodeTestFile",
          "comment": "original binary test file"
        },
        {
          "name": "cachedProgramPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "program path within program file cache"
        },
        {
          "name": "applyStruct",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "create structure Data within program if true"
        },
        {
          "name": "testResults",
          "type_long": "ghidra.test.processors.support.PCodeTestResults",
          "type_short": "PCodeTestResults",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.test.processors.support.PCodeTestAbstractControlBlock.InvalidControlBlockException",
          "type_short": "InvalidControlBlockException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": "if applyStruct failed"
        }
      ]
    },
    {
      "name": "getMainControlBlock",
      "comment": "Find Main TestInfo structure within memory and return instance of PCodeTestControlBlock",
      "javadoc": "Find Main TestInfo structure within memory and return instance of PCodeTestControlBlock\n@param program\n@param testFile original binary test file\n@param restrictedSet a restricted set to be searched for control structures\n@param cachedProgramPath program path within program file cache\n@param testInfoStruct TestInfo structure definition\n@param groupInfoStruct GroupInfo structure definition\n@param applyStruct create structure Data within program if true\n@param testResults test results storage object\n@return instance of PCodeTestControlBlock\n@throws InvalidControlBlockException\n@throws CodeUnitInsertionException",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "testFile",
          "type_long": "ghidra.test.processors.support.PCodeTestFile",
          "type_short": "PCodeTestFile",
          "comment": "original binary test file"
        },
        {
          "name": "restrictedSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "a restricted set to be searched for control structures"
        },
        {
          "name": "cachedProgramPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "program path within program file cache"
        },
        {
          "name": "testInfoStruct",
          "type_long": "ghidra.program.model.data.Structure",
          "type_short": "Structure",
          "comment": "TestInfo structure definition"
        },
        {
          "name": "groupInfoStruct",
          "type_long": "ghidra.program.model.data.Structure",
          "type_short": "Structure",
          "comment": "GroupInfo structure definition"
        },
        {
          "name": "applyStruct",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "create structure Data within program if true"
        },
        {
          "name": "testResults",
          "type_long": "ghidra.test.processors.support.PCodeTestResults",
          "type_short": "PCodeTestResults",
          "comment": "test results storage object"
        }
      ],
      "return": {
        "type_long": "ghidra.test.processors.support.PCodeTestControlBlock",
        "type_short": "PCodeTestControlBlock",
        "comment": "instance of PCodeTestControlBlock"
      },
      "throws": [
        {
          "type_long": "ghidra.test.processors.support.PCodeTestAbstractControlBlock.InvalidControlBlockException",
          "type_short": "InvalidControlBlockException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTestGroups",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.test.processors.support.PCodeTestGroup\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBreakOnDoneAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBreakOnPassAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBreakOnErrorAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSprintf5Address",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrintfBufferAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTestResults",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.test.processors.support.PCodeTestResults",
        "type_short": "PCodeTestResults",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readControlBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "applyStruct",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.test.processors.support.PCodeTestAbstractControlBlock.InvalidControlBlockException",
          "type_short": "InvalidControlBlockException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findTestGroups",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "applyStruct",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.test.processors.support.PCodeTestAbstractControlBlock.InvalidControlBlockException",
          "type_short": "InvalidControlBlockException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setSprintfEnabled",
      "comment": "Enable/Diable sprintf use within P-Code test emulation.",
      "javadoc": "Enable/Diable sprintf use within P-Code test emulation.\n@param emuTestRunner emulator test runner\n@param enable sprintf enablement",
      "static": false,
      "params": [
        {
          "name": "emuTestRunner",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner",
          "type_short": "EmulatorTestRunner",
          "comment": "emulator test runner"
        },
        {
          "name": "enable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "sprintf enablement"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumberPassed",
      "comment": "Get \u0027numpass\u0027 field value from emulation memory state",
      "javadoc": "Get \u0027numpass\u0027 field value from emulation memory state\n@param emuTestRunner emulator test runner\n@return \u0027numpass\u0027 field value",
      "static": false,
      "params": [
        {
          "name": "emuTestRunner",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner",
          "type_short": "EmulatorTestRunner",
          "comment": "emulator test runner"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "\u0027numpass\u0027 field value"
      },
      "throws": []
    },
    {
      "name": "setNumberPassed",
      "comment": "Set \u0027numpass\u0027 field value within emulation memory state",
      "javadoc": "Set \u0027numpass\u0027 field value within emulation memory state\n@param emuTestRunner emulator test runner\n@param value field value",
      "static": false,
      "params": [
        {
          "name": "emuTestRunner",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner",
          "type_short": "EmulatorTestRunner",
          "comment": "emulator test runner"
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "field value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumberFailed",
      "comment": "Get \u0027numfail\u0027 field value from emulation memory state",
      "javadoc": "Get \u0027numfail\u0027 field value from emulation memory state\n@param emuTestRunner emulator test runner\n@return \u0027numfail\u0027 field value",
      "static": false,
      "params": [
        {
          "name": "emuTestRunner",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner",
          "type_short": "EmulatorTestRunner",
          "comment": "emulator test runner"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "\u0027numfail\u0027 field value"
      },
      "throws": []
    },
    {
      "name": "setNumberFailed",
      "comment": "Set \u0027numfail\u0027 field value within emulation memory state",
      "javadoc": "Set \u0027numfail\u0027 field value within emulation memory state\n@param emuTestRunner emulator test runner\n@param value field value",
      "static": false,
      "params": [
        {
          "name": "emuTestRunner",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner",
          "type_short": "EmulatorTestRunner",
          "comment": "emulator test runner"
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "field value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLastTestIndex",
      "comment": "Get \u0027lastTestPos\u0027 field value from emulation memory state",
      "javadoc": "Get \u0027lastTestPos\u0027 field value from emulation memory state\n@param emuTestRunner emulator test runner\n@return \u0027lastTestPos\u0027 field value",
      "static": false,
      "params": [
        {
          "name": "emuTestRunner",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner",
          "type_short": "EmulatorTestRunner",
          "comment": "emulator test runner"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "\u0027lastTestPos\u0027 field value"
      },
      "throws": []
    },
    {
      "name": "getLastErrorLine",
      "comment": "Get \u0027lastErrorLine\u0027 field value from emulation memory state",
      "javadoc": "Get \u0027lastErrorLine\u0027 field value from emulation memory state\n@param emuTestRunner emulator test runner\n@return \u0027lastErrorLine\u0027 field value",
      "static": false,
      "params": [
        {
          "name": "emuTestRunner",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner",
          "type_short": "EmulatorTestRunner",
          "comment": "emulator test runner"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "\u0027lastErrorLine\u0027 field value"
      },
      "throws": []
    },
    {
      "name": "getLastErrorFile",
      "comment": "Get \u0027lastErrorFile\u0027 string value from emulation memory state.  Must follow string\n pointer contained within lastErrorFile field.",
      "javadoc": "Get \u0027lastErrorFile\u0027 string value from emulation memory state.  Must follow string\n pointer contained within lastErrorFile field.\n@param emuTestRunner emulator test runner\n@return \u0027lastErrorLine\u0027 field value",
      "static": false,
      "params": [
        {
          "name": "emuTestRunner",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner",
          "type_short": "EmulatorTestRunner",
          "comment": "emulator test runner"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "\u0027lastErrorLine\u0027 field value"
      },
      "throws": []
    },
    {
      "name": "getLastFunctionName",
      "comment": "Get the name of the last test function to be run",
      "javadoc": "Get the name of the last test function to be run\n@param emuTestRunner\n@return last test function name",
      "static": false,
      "params": [
        {
          "name": "emuTestRunner",
          "type_long": "ghidra.test.processors.support.EmulatorTestRunner",
          "type_short": "EmulatorTestRunner",
          "comment": ""
        },
        {
          "name": "logger",
          "type_long": "ghidra.test.processors.support.TestLogger",
          "type_short": "TestLogger",
          "comment": ""
        },
        {
          "name": "activeGroup",
          "type_long": "ghidra.test.processors.support.PCodeTestGroup",
          "type_short": "PCodeTestGroup",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "last test function name"
      },
      "throws": []
    }
  ]
}
