{
  "name": "ToyProgramBuilder",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.database.ProgramBuilder",
  "fields": [
    {
      "name": "TOY_LANGUAGE_ID_BE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Toy:BE:32:builder\""
    },
    {
      "name": "TOY_LANGUAGE_ID_LE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Toy:LE:32:builder\""
    },
    {
      "name": "TOY_LANGUAGE_ID_BE_ALIGN2",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Toy:BE:32:builder.align2\""
    },
    {
      "name": "TOY_LANGUAGE_ID_LE_ALIGN2",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Toy:LE:32:builder.align2\""
    },
    {
      "name": "addrFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressFactory",
      "type_short": "AddressFactory",
      "constant_value": null
    },
    {
      "name": "defaultSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    },
    {
      "name": "definedInstrAddresses",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct toy program builder using specified toy language",
      "javadoc": "Construct toy program builder using specified toy language\n@param name program name\n@param languageName toy language ID (note: only builder variant supports all instructions)\n@param consumer program consumer (if null this builder will be used as consumer and must be disposed to release program)\n@throws Exception",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "program name"
        },
        {
          "name": "languageName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "toy language ID (note: only builder variant supports all instructions)"
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "program consumer (if null this builder will be used as consumer and must be disposed to release program)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct toy program builder using toy language \"builder\" variant.\n This builder will be the program consumer and must be disposed",
      "javadoc": "Construct toy program builder using toy language \"builder\" variant.\n This builder will be the program consumer and must be disposed\n@param name program name\n@param bigEndian language endianess\n@throws Exception",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "program name"
        },
        {
          "name": "bigEndian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "language endianess"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct toy program builder using toy language \"builder\" variant.\n This builder will be the program consumer and must be disposed",
      "javadoc": "Construct toy program builder using toy language \"builder\" variant.\n This builder will be the program consumer and must be disposed\n@param name program name\n@param bigEndian language endianess\n@param consumer program consumer (if null this builder will be used as consumer and must be disposed to release program)\n@throws Exception",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "program name"
        },
        {
          "name": "bigEndian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "language endianess"
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "program consumer (if null this builder will be used as consumer and must be disposed to release program)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct toy program builder using toy language \"builder\" variant.\n This builder will be the program consumer and must be disposed",
      "javadoc": "Construct toy program builder using toy language \"builder\" variant.\n This builder will be the program consumer and must be disposed\n@param name program name\n@param bigEndian language endianess\n@param consumer program consumer (if null this builder will be used as consumer and must be disposed to release program)\n@throws Exception",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "program name"
        },
        {
          "name": "bigEndian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "language endianess"
        },
        {
          "name": "wordAligned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "program consumer (if null this builder will be used as consumer and must be disposed to release program)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "getToyLanguageId",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "bigEndian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "wordAligned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkLanguageName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "languageName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Get address in default ram space",
      "javadoc": "Get address in default ram space\n@param offset address offset\n@return the address",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "address offset"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address"
      },
      "throws": []
    },
    {
      "name": "addInstructionBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "instrBytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addInstructionWords",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "instrWords",
          "type_long": "short[]",
          "type_short": "short[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getByteRelativeOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "dest",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getShortRelativeOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "dest",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toHex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefinedInstructionAddress",
      "comment": "Get locations where instruction bytes have been added",
      "javadoc": "Get locations where instruction bytes have been added\n@return instruction start locations",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
        "type_short": "List",
        "comment": "instruction start locations"
      },
      "throws": []
    },
    {
      "name": "resetDefinedInstructionAddresses",
      "comment": "Reset/clear the list of defined instruction addresses",
      "javadoc": "Reset/clear the list of defined instruction addresses",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addBytesNOP",
      "comment": "Add NOP instruction bytes of specified byte length",
      "javadoc": "Add NOP instruction bytes of specified byte length\n@param offset instruction address offset\n@param length length of NOP instruction in bytes\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction address offset"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "length of NOP instruction in bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesNOP",
      "comment": "Add NOP instruction bytes of specified byte length",
      "javadoc": "Add NOP instruction bytes of specified byte length\n@param addr instruction address\n@param length length of NOP instruction in bytes\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "length of NOP instruction in bytes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesFallthrough",
      "comment": "Add simple fall-through (consumes 2-bytes)",
      "javadoc": "Add simple fall-through (consumes 2-bytes)\n@param offset instruction address offset\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction address offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesFallthrough",
      "comment": "Add simple fall-through (consumes 2-bytes)",
      "javadoc": "Add simple fall-through (consumes 2-bytes)\n@param addr instruction address\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesStore",
      "comment": "Add store indirect (consumes 2-bytes)",
      "javadoc": "Add store indirect (consumes 2-bytes)\n@param offset instruction address offset\n@param srcRegIndex source register index (0..15)\n@param destRegIndex destination register index (contained indirect memory address)  (0..15)\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction address offset"
        },
        {
          "name": "srcRegIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "source register index (0..15)"
        },
        {
          "name": "destRegIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "destination register index (contained indirect memory address)  (0..15)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesStore",
      "comment": "Add store indirect (consumes 2-bytes)",
      "javadoc": "Add store indirect (consumes 2-bytes)\n@param addr instruction address\n@param srcRegIndex source register index (0..15)\n@param destRegIndex destination register index (contained indirect memory address)  (0..15)\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        },
        {
          "name": "srcRegIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "source register index (0..15)"
        },
        {
          "name": "destRegIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "destination register index (contained indirect memory address)  (0..15)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesLoad",
      "comment": "Add load indirect (consumes 2-bytes)",
      "javadoc": "Add load indirect (consumes 2-bytes)\n@param offset instruction address offset\n@param srcRegIndex source register index (contained indirect memory address) (0..15)\n@param destRegIndex destination register index (0..15)\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction address offset"
        },
        {
          "name": "srcRegIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "source register index (contained indirect memory address) (0..15)"
        },
        {
          "name": "destRegIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "destination register index (0..15)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesLoad",
      "comment": "Add load indirect (consumes 2-bytes)",
      "javadoc": "Add load indirect (consumes 2-bytes)\n@param addr instruction address\n@param srcRegIndex source register index (contained indirect memory address) (0..15)\n@param destRegIndex destination register index (0..15)\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        },
        {
          "name": "srcRegIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "source register index (contained indirect memory address) (0..15)"
        },
        {
          "name": "destRegIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "destination register index (0..15)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesMoveImmediate",
      "comment": "Add move immediate instruction (consumes 2-bytes)",
      "javadoc": "Add move immediate instruction (consumes 2-bytes)\n@param offset instruction offset\n@param imm immediate byte value\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction offset"
        },
        {
          "name": "imm",
          "type_long": "short",
          "type_short": "short",
          "comment": "immediate byte value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesMoveImmediate",
      "comment": "Add move immediate instruction (consumes 2-bytes)",
      "javadoc": "Add move immediate instruction (consumes 2-bytes)\n@param addr instruction address\n@param imm immediate byte value\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        },
        {
          "name": "imm",
          "type_long": "short",
          "type_short": "short",
          "comment": "immediate byte value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesFallthroughSetNoFlowContext",
      "comment": "Add simple fall-through which sets noflow context value on next instruction (consumes 2-bytes)",
      "javadoc": "Add simple fall-through which sets noflow context value on next instruction (consumes 2-bytes)\n@param offset instruction address offset\n@param ctxVal context value (0-15)\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction address offset"
        },
        {
          "name": "ctxVal",
          "type_long": "int",
          "type_short": "int",
          "comment": "context value (0-15)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesFallthroughSetNoFlowContext",
      "comment": "Add simple fall-through which sets noflow context value on next instruction (consumes 2-bytes)",
      "javadoc": "Add simple fall-through which sets noflow context value on next instruction (consumes 2-bytes)\n@param addr instruction address\n@param ctxVal context value (0-15)\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        },
        {
          "name": "ctxVal",
          "type_long": "int",
          "type_short": "int",
          "comment": "context value (0-15)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesFallthroughSetNoFlowContext",
      "comment": "Add simple fall-through which sets noflow context value on target address (consumes 2-bytes)",
      "javadoc": "Add simple fall-through which sets noflow context value on target address (consumes 2-bytes)\n@param offset instruction address offset\n@param ctxVal context value (0-15)\n@param target context target address offset\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction address offset"
        },
        {
          "name": "ctxVal",
          "type_long": "int",
          "type_short": "int",
          "comment": "context value (0-15)"
        },
        {
          "name": "target",
          "type_long": "long",
          "type_short": "long",
          "comment": "context target address offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesFallthroughSetNoFlowContext",
      "comment": "Add simple fall-through which sets noflow context value on target address (consumes 2-bytes)",
      "javadoc": "Add simple fall-through which sets noflow context value on target address (consumes 2-bytes)\n@param addr instruction address\n@param ctxVal context value (0-15)\n@param targetAddr context target address\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        },
        {
          "name": "ctxVal",
          "type_long": "int",
          "type_short": "int",
          "comment": "context value (0-15)"
        },
        {
          "name": "targetAddr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "context target address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesFallthroughSetFlowContext",
      "comment": "Add simple fall-through which sets flowing context value on next instruction (consumes 2-bytes)",
      "javadoc": "Add simple fall-through which sets flowing context value on next instruction (consumes 2-bytes)\n@param offset instruction address offset\n@param ctxVal context value (0-15)\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction address offset"
        },
        {
          "name": "ctxVal",
          "type_long": "int",
          "type_short": "int",
          "comment": "context value (0-15)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesFallthroughSetFlowContext",
      "comment": "Add simple fall-through which sets flowing context value on next instruction (consumes 2-bytes)",
      "javadoc": "Add simple fall-through which sets flowing context value on next instruction (consumes 2-bytes)\n@param addr instruction address\n@param ctxVal context value (0-15)\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        },
        {
          "name": "ctxVal",
          "type_long": "int",
          "type_short": "int",
          "comment": "context value (0-15)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesCall",
      "comment": "Add call (consumes 2-bytes)",
      "javadoc": "Add call (consumes 2-bytes)\n@param offset instruction address offset\n@param dest call destination offset\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction address offset"
        },
        {
          "name": "dest",
          "type_long": "long",
          "type_short": "long",
          "comment": "call destination offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesCall",
      "comment": "Add call (consumes 2-bytes)",
      "javadoc": "Add call (consumes 2-bytes)\n@param addr instruction address\n@param destAddr call destination address\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        },
        {
          "name": "destAddr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "call destination address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesCallWithDelaySlot",
      "comment": "Add call w/ delayslot (consumes 4-bytes)",
      "javadoc": "Add call w/ delayslot (consumes 4-bytes)\n@param offset instruction address offset\n@param dest call destination offset\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction address offset"
        },
        {
          "name": "dest",
          "type_long": "long",
          "type_short": "long",
          "comment": "call destination offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesCallWithDelaySlot",
      "comment": "Add call w/ delayslot (consumes 4-bytes)",
      "javadoc": "Add call w/ delayslot (consumes 4-bytes)\n@param addr instruction address\n@param destAddr call destination address\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        },
        {
          "name": "destAddr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "call destination address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesReturn",
      "comment": "Add terminal/return (consumes 2-bytes)",
      "javadoc": "Add terminal/return (consumes 2-bytes)\n@param offset instruction address offset\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction address offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesReturn",
      "comment": "Add terminal/return (consumes 2-bytes)",
      "javadoc": "Add terminal/return (consumes 2-bytes)\n@param addr instruction address\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesBranch",
      "comment": "Add branch (consumes 2-bytes)",
      "javadoc": "Add branch (consumes 2-bytes)\n@param offset address offset\n@param dest call destination offset\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "address offset"
        },
        {
          "name": "dest",
          "type_long": "long",
          "type_short": "long",
          "comment": "call destination offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesBranch",
      "comment": "Add branch (consumes 2-bytes)",
      "javadoc": "Add branch (consumes 2-bytes)\n@param addr instruction address offset\n@param destAddr call destination address\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address offset"
        },
        {
          "name": "destAddr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "call destination address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesBranchConditional",
      "comment": "Add branch (consumes 2-bytes)",
      "javadoc": "Add branch (consumes 2-bytes)\n@param offset instruction address offset\n@param dest call destination offset\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction address offset"
        },
        {
          "name": "dest",
          "type_long": "long",
          "type_short": "long",
          "comment": "call destination offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesBranchConditional",
      "comment": "Add branch (consumes 2-bytes)",
      "javadoc": "Add branch (consumes 2-bytes)\n@param addr instruction address\n@param destAddr call destination address\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        },
        {
          "name": "destAddr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "call destination address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesBranchWithDelaySlot",
      "comment": "Add branch w/ delay slot (consumes 4-bytes)",
      "javadoc": "Add branch w/ delay slot (consumes 4-bytes)\n@param offset instruction address offset\n@param dest call destination offset\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction address offset"
        },
        {
          "name": "dest",
          "type_long": "long",
          "type_short": "long",
          "comment": "call destination offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesBranchWithDelaySlot",
      "comment": "Add branch w/ delay slot (consumes 4-bytes)",
      "javadoc": "Add branch w/ delay slot (consumes 4-bytes)\n@param addr instruction address\n@param destAddr call destination address\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        },
        {
          "name": "destAddr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "call destination address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesCopInstruction",
      "comment": "Add COP instruction for exercising nfctx context (consumes 2-bytes).  Location will not be added to\n defined instruction address list.",
      "javadoc": "Add COP instruction for exercising nfctx context (consumes 2-bytes).  Location will not be added to\n defined instruction address list.\n@param offset instruction address offset\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "instruction address offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesCopInstruction",
      "comment": "Add COP instruction for exercising nfctx context (consumes 2-bytes).  Location will not be added to\n defined instruction address list.",
      "javadoc": "Add COP instruction for exercising nfctx context (consumes 2-bytes).  Location will not be added to\n defined instruction address list.\n@param addr instruction address\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "instruction address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesBadInstruction",
      "comment": "Add BAD instruction (consumes 2-bytes).  Location will not be added to\n defined instruction address list.",
      "javadoc": "Add BAD instruction (consumes 2-bytes).  Location will not be added to\n defined instruction address list.\n@param offset bad instruction address offset\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "bad instruction address offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addBytesBadInstruction",
      "comment": "Add BAD instruction (consumes 2-bytes).  Location will not be added to\n defined instruction address list.",
      "javadoc": "Add BAD instruction (consumes 2-bytes).  Location will not be added to\n defined instruction address list.\n@param addr bad instruction address\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "bad instruction address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createNOPInstruction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "createCallInstruction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "callAddress",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "createReturnInstruction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "createJmpInstruction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "destAddress",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "createConditionalJmpInstruction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "destAddress",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "createJmpWithDelaySlot",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "destAddress",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    }
  ]
}
