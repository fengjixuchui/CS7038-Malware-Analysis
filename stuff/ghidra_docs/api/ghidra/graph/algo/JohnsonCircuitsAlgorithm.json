{
  "name": "JohnsonCircuitsAlgorithm",
  "comment": "Finds all circuits (loops) in the given graph.\n \n Warning: This is a recursive algorithm.  As such, it is limited in how deep \n it can recurse.   Any path that exceeds the #JAVA_STACK_DEPTH_LIMIT will not be found.",
  "javadoc": "Finds all circuits (loops) in the given graph.\n \n \u003cP\u003e\u003cB\u003e\u003cU\u003eWarning:\u003c/U\u003e\u003c/B\u003e This is a recursive algorithm.  As such, it is limited in how deep \n it can recurse.   Any path that exceeds the {@link #JAVA_STACK_DEPTH_LIMIT} will not be found.\n@param \u003cV\u003e the vertex type\n@param \u003cE\u003e the edge type",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "JAVA_STACK_DEPTH_LIMIT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2700"
    },
    {
      "name": "g",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.GDirectedGraph\u003cV,E\u003e",
      "type_short": "GDirectedGraph",
      "constant_value": null
    },
    {
      "name": "subGraph",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.GDirectedGraph\u003cV,E\u003e",
      "type_short": "GDirectedGraph",
      "constant_value": null
    },
    {
      "name": "stack",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Stack\u003cV\u003e",
      "type_short": "Stack",
      "constant_value": null
    },
    {
      "name": "startVertex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "V",
      "type_short": "V",
      "constant_value": null
    },
    {
      "name": "blockedSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cV\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "blockedBackEdgesMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cV,java.util.Set\u003cV\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "accumulator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.Accumulator\u003cjava.util.List\u003cV\u003e\u003e",
      "type_short": "Accumulator",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "g",
          "type_long": "ghidra.graph.GDirectedGraph\u003cV,E\u003e",
          "type_short": "GDirectedGraph",
          "comment": ""
        },
        {
          "name": "accumulator",
          "type_long": "ghidra.util.datastruct.Accumulator\u003cjava.util.List\u003cV\u003e\u003e",
          "type_short": "Accumulator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compute",
      "comment": "Finds the circuits in the graph passed at construction time.",
      "javadoc": "Finds the circuits in the graph passed at construction time.\n@param uniqueCircuits true signals to return only unique circuits, where no two \n        circuits will contain the same vertex\n@param monitor the task monitor\n@throws CancelledException if the monitor is cancelled",
      "static": false,
      "params": [
        {
          "name": "uniqueCircuits",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true signals to return only unique circuits, where no two \n        circuits will contain the same vertex"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor is cancelled"
        }
      ]
    },
    {
      "name": "circuit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "depth",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "unblock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addBackEdge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "u",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "outputCircuit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
