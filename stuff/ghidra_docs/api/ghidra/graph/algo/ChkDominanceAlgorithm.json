{
  "name": "ChkDominanceAlgorithm",
  "comment": "This algorithm is an implementation of the Cooper, Harvey, Kennedy algorithm.  \n \n The algorithm processes the graph in reverse post-order.  The runtime of \n this algorithm is approximately O(V+E*D) per iteration of the loop, where \n D is the size of the largest dominator set.  The number of iterations is \n bound at d(G) + 3, where d(G) is the \"loop \n connectedness\" of the graph.",
  "javadoc": "This algorithm is an implementation of the Cooper, Harvey, Kennedy algorithm.  \n \n \u003cP\u003eThe algorithm processes the graph in reverse post-order.  The runtime of \n this algorithm is approximately \u003ccode\u003eO(V+E*D)\u003c/code\u003e per iteration of the loop, where \n D is the size of the largest dominator set.  The number of iterations is \n bound at \u003ccode\u003ed(G) + 3\u003c/code\u003e, where d(G) is the \"loop \n connectedness\" of the graph.\n@param \u003cV\u003e the vertex type\n@param \u003cE\u003e the edge type",
  "static": false,
  "implements": [],
  "extends": "ghidra.graph.algo.AbstractDominanceAlgorithm",
  "fields": [
    {
      "name": "sourceGraph",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.GDirectedGraph\u003cV,E\u003e",
      "type_short": "GDirectedGraph",
      "constant_value": null
    },
    {
      "name": "mutableGraph",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.MutableGDirectedGraphWrapper\u003cV,E\u003e",
      "type_short": "MutableGDirectedGraphWrapper",
      "constant_value": null
    },
    {
      "name": "root",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "V",
      "type_short": "V",
      "constant_value": null
    },
    {
      "name": "dominatorMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cV,V\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "dominatedMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cV,java.util.List\u003cV\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "navigator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.algo.GraphNavigator\u003cV,E\u003e",
      "type_short": "GraphNavigator",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor.",
      "javadoc": "Constructor.\n@param g the graph\n@param monitor the monitor\n@throws CancelledException if the algorithm is cancelled\n@throws IllegalArgumentException if there are no source vertices in the graph",
      "static": false,
      "params": [
        {
          "name": "g",
          "type_long": "ghidra.graph.GDirectedGraph\u003cV,E\u003e",
          "type_short": "GDirectedGraph",
          "comment": "the graph"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the algorithm is cancelled"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "g",
          "type_long": "ghidra.graph.GDirectedGraph\u003cV,E\u003e",
          "type_short": "GDirectedGraph",
          "comment": ""
        },
        {
          "name": "navigator",
          "type_long": "ghidra.graph.algo.GraphNavigator\u003cV,E\u003e",
          "type_short": "GraphNavigator",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findRoot",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "computeDominance",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "intersect",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v1",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "v2",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "map",
          "type_long": "java.util.Map\u003cV,java.lang.Integer\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDominated",
      "comment": "Returns all nodes dominated by the given vertex.  A node \u0027a\u0027 dominates node \u0027b\u0027 if \n all paths from start to \u0027b\u0027 contain \u0027a\u0027.",
      "javadoc": "Returns all nodes dominated by the given vertex.  A node \u0027a\u0027 dominates node \u0027b\u0027 if \n all paths from start to \u0027b\u0027 contain \u0027a\u0027.\n@param a the vertex\n@return the dominated vertices",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "V",
          "type_short": "V",
          "comment": "the vertex"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cV\u003e",
        "type_short": "Set",
        "comment": "the dominated vertices"
      },
      "throws": []
    },
    {
      "name": "doGetDominated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "results",
          "type_long": "java.util.Set\u003cV\u003e",
          "type_short": "Set",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDominators",
      "comment": "Returns all nodes that dominate the given vertex.  A node \u0027a\u0027 dominates node \u0027b\u0027 if \n all paths from start to \u0027b\u0027 contain \u0027a\u0027.",
      "javadoc": "Returns all nodes that dominate the given vertex.  A node \u0027a\u0027 dominates node \u0027b\u0027 if \n all paths from start to \u0027b\u0027 contain \u0027a\u0027.\n@param a the vertex\n@return the dominating vertices",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "V",
          "type_short": "V",
          "comment": "the vertex"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cV\u003e",
        "type_short": "Set",
        "comment": "the dominating vertices"
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "set",
          "type_long": "java.util.Collection\u003cV\u003e",
          "type_short": "Collection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isDummy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDominanceTree",
      "comment": "Returns the dominance tree for the given graph, which is tree where each \n node\u0027s children are those nodes it *immediately* dominates (a idom b).",
      "javadoc": "Returns the dominance tree for the given graph, which is tree where each \n node\u0027s children are those nodes it *immediately* dominates (a idom b).\n@return the dominance tree",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.GDirectedGraph\u003cV,ghidra.graph.GEdge\u003cV\u003e\u003e",
        "type_short": "GDirectedGraph",
        "comment": "the dominance tree"
      },
      "throws": []
    },
    {
      "name": "getImmediateDominator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Releases cached values used by internal data structures",
      "javadoc": "Releases cached values used by internal data structures",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
