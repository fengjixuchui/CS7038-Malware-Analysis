{
  "name": "DijkstraShortestPathsAlgorithm",
  "comment": "Dijkstra\u0027s shortest-path algorithm\n \n \n This implementation computes the shortest paths between two vertices using Dijkstra\u0027s\n single-source shortest path finding algorithm. Any time a new source is given, it explores all\n destinations in the graph up to a maximum distance from the source. Thus, this implementation is\n best applied when many queries are anticipated from relatively few sources.",
  "javadoc": "Dijkstra\u0027s shortest-path algorithm\n \n \u003cp\u003e\n This implementation computes the shortest paths between two vertices using Dijkstra\u0027s\n single-source shortest path finding algorithm. Any time a new source is given, it explores all\n destinations in the graph up to a maximum distance from the source. Thus, this implementation is\n best applied when many queries are anticipated from relatively few sources.\n@param \u003cV\u003e the type of vertices\n@param \u003cE\u003e the type of edges",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "sources",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cV,ghidra.graph.algo.DijkstraShortestPathsAlgorithm\u003cV,E\u003e.OneSourceToAll\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "graph",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.GImplicitDirectedGraph\u003cV,E\u003e",
      "type_short": "GImplicitDirectedGraph",
      "constant_value": null
    },
    {
      "name": "maxDistance",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "double",
      "type_short": "double",
      "constant_value": null
    },
    {
      "name": "metric",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.GEdgeWeightMetric\u003cE\u003e",
      "type_short": "GEdgeWeightMetric",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Use Dijkstra\u0027s algorithm on the given graph\n \n \n This constructor assumes the graph\u0027s edges are GWeightedEdges. If not, you will\n likely encounter a ClassCastException.",
      "javadoc": "Use Dijkstra\u0027s algorithm on the given graph\n \n \u003cp\u003e\n This constructor assumes the graph\u0027s edges are {@link GWeightedEdge}s. If not, you will\n likely encounter a {@link ClassCastException}.\n@param graph the graph",
      "static": false,
      "params": [
        {
          "name": "graph",
          "type_long": "ghidra.graph.GImplicitDirectedGraph\u003cV,E\u003e",
          "type_short": "GImplicitDirectedGraph",
          "comment": "the graph"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Use Dijkstra\u0027s algorithm on the given graph with the given maximum distance\n \n \n This constructor assumes the graph\u0027s edges are GWeightedEdges. If not, you will\n likely encounter a ClassCastException.",
      "javadoc": "Use Dijkstra\u0027s algorithm on the given graph with the given maximum distance\n \n \u003cp\u003e\n This constructor assumes the graph\u0027s edges are {@link GWeightedEdge}s. If not, you will\n likely encounter a {@link ClassCastException}.\n@param graph the graph\n@param maxDistance the maximum distance, or null for no maximum",
      "static": false,
      "params": [
        {
          "name": "graph",
          "type_long": "ghidra.graph.GImplicitDirectedGraph\u003cV,E\u003e",
          "type_short": "GImplicitDirectedGraph",
          "comment": "the graph"
        },
        {
          "name": "maxDistance",
          "type_long": "double",
          "type_short": "double",
          "comment": "the maximum distance, or null for no maximum"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Use Dijstra\u0027s algorithm on the given graph with a custom edge weight metric",
      "javadoc": "Use Dijstra\u0027s algorithm on the given graph with a custom edge weight metric\n@param graph the graph\n@param metric the function to compute the weight of an edge",
      "static": false,
      "params": [
        {
          "name": "graph",
          "type_long": "ghidra.graph.GImplicitDirectedGraph\u003cV,E\u003e",
          "type_short": "GImplicitDirectedGraph",
          "comment": "the graph"
        },
        {
          "name": "metric",
          "type_long": "ghidra.graph.GEdgeWeightMetric\u003cE\u003e",
          "type_short": "GEdgeWeightMetric",
          "comment": "the function to compute the weight of an edge"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Use Dijstra\u0027s algorithm on the given graph with the given maximum distance and a custom edge\n weight metric",
      "javadoc": "Use Dijstra\u0027s algorithm on the given graph with the given maximum distance and a custom edge\n weight metric\n@param graph the graph\n@param maxDistance the maximum distance, or null for no maximum\n@param metric the function to compute the weight of an edge",
      "static": false,
      "params": [
        {
          "name": "graph",
          "type_long": "ghidra.graph.GImplicitDirectedGraph\u003cV,E\u003e",
          "type_short": "GImplicitDirectedGraph",
          "comment": "the graph"
        },
        {
          "name": "maxDistance",
          "type_long": "double",
          "type_short": "double",
          "comment": "the maximum distance, or null for no maximum"
        },
        {
          "name": "metric",
          "type_long": "ghidra.graph.GEdgeWeightMetric\u003cE\u003e",
          "type_short": "GEdgeWeightMetric",
          "comment": "the function to compute the weight of an edge"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDistancesFromSource",
      "comment": "Compute the shortest distance to all reachable vertices from the given source",
      "javadoc": "Compute the shortest distance to all reachable vertices from the given source\n@param v the source vertex\n@return a map of destinations to distances from the given source",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": "the source vertex"
        }
      ],
      "return": {
        "type_long": "java.util.Map\u003cV,java.lang.Double\u003e",
        "type_short": "Map",
        "comment": "a map of destinations to distances from the given source"
      },
      "throws": []
    },
    {
      "name": "computeOptimalPaths",
      "comment": "Compute the shortest paths from the given source to the given destination\n \n \n This implementation differs from typical implementations in that paths tied for the shortest\n distance are all returned. Others tend to choose one arbitrarily.",
      "javadoc": "Compute the shortest paths from the given source to the given destination\n \n \u003cp\u003e\n This implementation differs from typical implementations in that paths tied for the shortest\n distance are all returned. Others tend to choose one arbitrarily.\n@param src the source\n@param dst the destination\n@return a collection of paths of shortest distance from source to destination",
      "static": false,
      "params": [
        {
          "name": "src",
          "type_long": "V",
          "type_short": "V",
          "comment": "the source"
        },
        {
          "name": "dst",
          "type_long": "V",
          "type_short": "V",
          "comment": "the destination"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cjava.util.Deque\u003cE\u003e\u003e",
        "type_short": "Collection",
        "comment": "a collection of paths of shortest distance from source to destination"
      },
      "throws": []
    }
  ]
}
