{
  "name": "AbstractDominanceAlgorithm",
  "comment": "A general base class for sharing code between graph algorithm implementations.",
  "javadoc": "A general base class for sharing code between graph algorithm implementations.\n@param \u003cV\u003e the vertex type\n@param \u003cE\u003e the edge type",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DUMMY_ROOT_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Dummy Root Vertex\""
    },
    {
      "name": "DUMMY_SINK_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Dummy Sink Vertex\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "unifySources",
      "comment": "Converts multiple source/root nodes in a graph into a single source of which those become\n children.",
      "javadoc": "Converts multiple source/root nodes in a graph into a single source of which those become\n children.\n@param graph the graph\n@param graphNavigator the navigator to determine graph direction\n@return the new single source\n@throws IllegalArgumentException if there is not at least one source node in the graph",
      "static": true,
      "params": [
        {
          "name": "graph",
          "type_long": "ghidra.graph.MutableGDirectedGraphWrapper\u003cV,E\u003e",
          "type_short": "MutableGDirectedGraphWrapper",
          "comment": "the graph"
        },
        {
          "name": "graphNavigator",
          "type_long": "ghidra.graph.algo.GraphNavigator\u003cV,E\u003e",
          "type_short": "GraphNavigator",
          "comment": "the navigator to determine graph direction"
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": "the new single source"
      },
      "throws": []
    },
    {
      "name": "unifySinks",
      "comment": "Converts multiple sink/exit nodes in a graph into a single sink of which those become\n parents.",
      "javadoc": "Converts multiple sink/exit nodes in a graph into a single sink of which those become\n parents.\n@param graph the graph\n@param graphNavigator the navigator to determine graph direction\n@return the new single sink\n@throws IllegalArgumentException if there is not at least one sink node in the graph",
      "static": true,
      "params": [
        {
          "name": "graph",
          "type_long": "ghidra.graph.MutableGDirectedGraphWrapper\u003cV,E\u003e",
          "type_short": "MutableGDirectedGraphWrapper",
          "comment": "the graph"
        },
        {
          "name": "graphNavigator",
          "type_long": "ghidra.graph.algo.GraphNavigator\u003cV,E\u003e",
          "type_short": "GraphNavigator",
          "comment": "the navigator to determine graph direction"
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": "the new single sink"
      },
      "throws": []
    }
  ]
}
