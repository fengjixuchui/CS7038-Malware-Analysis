{
  "name": "OneSourceToAll",
  "comment": "A class representing all optimal paths from a given source to every other (reachable) vertex\n in the graph\n \n \n This is the workhorse of path computation, and implements Dijkstra\u0027s Shortest Path algorithm\n from one source to all destinations. We considered using JUNG to store the graph and compute\n the paths, but we could not, because we would like to find all paths having the optimal\n distance. If there are ties, JUNG\u0027s implementation chooses one arbitrarily; we would like all\n tied paths.",
  "javadoc": "A class representing all optimal paths from a given source to every other (reachable) vertex\n in the graph\n \n \u003cp\u003e\n This is the workhorse of path computation, and implements Dijkstra\u0027s Shortest Path algorithm\n from one source to all destinations. We considered using JUNG to store the graph and compute\n the paths, but we could not, because we would like to find all paths having the optimal\n distance. If there are ties, JUNG\u0027s implementation chooses one arbitrarily; we would like all\n tied paths.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "queueByDistance",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.ValueSortedMap\u003cV,java.lang.Double\u003e",
      "type_short": "ValueSortedMap",
      "constant_value": null
    },
    {
      "name": "visitedDistance",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cV,java.lang.Double\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "bestIns",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cV,java.util.Set\u003cE\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "source",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "V",
      "type_short": "V",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Compute the shortest paths from a given vertex to all other reachable vertices in the\n graph",
      "javadoc": "Compute the shortest paths from a given vertex to all other reachable vertices in the\n graph\n@param src the source (seed) vertex",
      "static": false,
      "params": [
        {
          "name": "src",
          "type_long": "V",
          "type_short": "V",
          "comment": "the source (seed) vertex"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "computeOptimalPathsTo",
      "comment": "Recover the shortest paths from the source to the given destination, if it is reachable",
      "javadoc": "Recover the shortest paths from the source to the given destination, if it is reachable\n@param dst the destination\n@return a collection of the shortest paths from source to destination, or the empty set",
      "static": false,
      "params": [
        {
          "name": "dst",
          "type_long": "V",
          "type_short": "V",
          "comment": "the destination"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cjava.util.Deque\u003cE\u003e\u003e",
        "type_short": "Collection",
        "comment": "a collection of the shortest paths from source to destination, or the empty set"
      },
      "throws": []
    },
    {
      "name": "addPathsTo",
      "comment": "Add the shortest paths from the source to the given destination into the given collection\n \n \n This is used internally to recover the shortest paths",
      "javadoc": "Add the shortest paths from the source to the given destination into the given collection\n \n \u003cp\u003e\n This is used internally to recover the shortest paths\n@param paths a place to store the recovered paths\n@param dst the destination",
      "static": false,
      "params": [
        {
          "name": "paths",
          "type_long": "java.util.Collection\u003cjava.util.Deque\u003cE\u003e\u003e",
          "type_short": "Collection",
          "comment": "a place to store the recovered paths"
        },
        {
          "name": "dst",
          "type_long": "V",
          "type_short": "V",
          "comment": "the destination"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPathsTo",
      "comment": "Add the shortest paths from source to a given intermediate, continuing along a given path\n to the final destination, into the given collection\n \n \n This is a recursive method for constructing the shortest paths overall. Assuming the\n given path from intermediate to final destination is the shortest, we can show by\n induction, the computed paths from source to destination are the shortest.",
      "javadoc": "Add the shortest paths from source to a given intermediate, continuing along a given path\n to the final destination, into the given collection\n \n \u003cp\u003e\n This is a recursive method for constructing the shortest paths overall. Assuming the\n given path from intermediate to final destination is the shortest, we can show by\n induction, the computed paths from source to destination are the shortest.\n@param paths a place to store the recovered paths\n@param prev the intermediate destination\n@param soFar a (shortest) path from intermediate to final destination",
      "static": false,
      "params": [
        {
          "name": "paths",
          "type_long": "java.util.Collection\u003cjava.util.Deque\u003cE\u003e\u003e",
          "type_short": "Collection",
          "comment": "a place to store the recovered paths"
        },
        {
          "name": "prev",
          "type_long": "V",
          "type_short": "V",
          "comment": "the intermediate destination"
        },
        {
          "name": "soFar",
          "type_long": "java.util.Deque\u003cE\u003e",
          "type_short": "Deque",
          "comment": "a (shortest) path from intermediate to final destination"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addOrUpdate",
      "comment": "Update the record for the given destination with a new offer of shortest distance\n \n \n If either the record doesn\u0027t exist yet, or the new offer beats the current best, then a\n new record is created and replaces the current record. If present, the list of best\n inbound edges is cleared -- because they all correspond to a distance that has just been\n beat. The node is also added and/or moved forward in the queue of unvisited vertices.\n \n \n If the record exists, and the new offer ties the current offer, nothing happens, but the\n method still returns true, since the corresponding inbound edge could be optimal.\n \n \n If the record\u0027s current best beats the offer, nothing happens, and the method returns\n false, indicating the inbound edge is definitely not optimal.",
      "javadoc": "Update the record for the given destination with a new offer of shortest distance\n \n \u003cp\u003e\n If either the record doesn\u0027t exist yet, or the new offer beats the current best, then a\n new record is created and replaces the current record. If present, the list of best\n inbound edges is cleared -- because they all correspond to a distance that has just been\n beat. The node is also added and/or moved forward in the queue of unvisited vertices.\n \n \u003cp\u003e\n If the record exists, and the new offer ties the current offer, nothing happens, but the\n method still returns true, since the corresponding inbound edge could be optimal.\n \n \u003cp\u003e\n If the record\u0027s current best beats the offer, nothing happens, and the method returns\n false, indicating the inbound edge is definitely not optimal.\n@param dest the destination whose record to update\n@param newDist the distance offer\n@return true iff the offer is equal to or better than the record\u0027s current best",
      "static": false,
      "params": [
        {
          "name": "dest",
          "type_long": "V",
          "type_short": "V",
          "comment": "the destination whose record to update"
        },
        {
          "name": "newDist",
          "type_long": "double",
          "type_short": "double",
          "comment": "the distance offer"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true iff the offer is equal to or better than the record\u0027s current best"
      },
      "throws": []
    },
    {
      "name": "fill",
      "comment": "Compute paths, building out the graph until all reachable vertices have been visited",
      "javadoc": "Compute paths, building out the graph until all reachable vertices have been visited",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fillStep",
      "comment": "Perform one iteration of Dijskstra\u0027s path finding algorithm",
      "javadoc": "Perform one iteration of Dijskstra\u0027s path finding algorithm\n@param from the vertex to visit for this iteration",
      "static": false,
      "params": [
        {
          "name": "from",
          "type_long": "V",
          "type_short": "V",
          "comment": "the vertex to visit for this iteration"
        },
        {
          "name": "dist",
          "type_long": "double",
          "type_short": "double",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
