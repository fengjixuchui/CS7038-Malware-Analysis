{
  "name": "AbstractGraphTransitionJob",
  "comment": "A job to transition vertices in a graph for location and visibility.  The parent class \n handled the opacity callback.  The progress of the job is used by this class to move \n vertices from the the start location to the final destination, where the progress is the\n percentage of the total move to display.",
  "javadoc": "A job to transition vertices in a graph for location and visibility.  The parent class \n handled the opacity callback.  The progress of the job is used by this class to move \n vertices from the the start location to the final destination, where the progress is the\n percentage of the total move to display.\n@param \u003cV\u003e the vertex type\n@param \u003cE\u003e the edge type",
  "static": false,
  "implements": [],
  "extends": "ghidra.graph.job.AbstractGraphVisibilityTransitionJob",
  "fields": [
    {
      "name": "graphLayout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.layout.VisualGraphLayout\u003cV,E\u003e",
      "type_short": "VisualGraphLayout",
      "constant_value": null
    },
    {
      "name": "vertexLocations",
      "comment": "A start and end point for each vertex",
      "javadoc": "A start and end point for each vertex",
      "static": false,
      "type_long": "java.util.Map\u003cV,ghidra.graph.job.AbstractGraphTransitionJob\u003cV,E\u003e.TransitionPoints\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "edgeArticulationLocations",
      "comment": "A start and end point for each edge articulation",
      "javadoc": "A start and end point for each edge articulation",
      "static": false,
      "type_long": "java.util.Map\u003cE,java.util.List\u003cghidra.graph.job.AbstractGraphTransitionJob\u003cV,E\u003e.ArticulationTransitionPoints\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "finalEdgeArticulations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cE,java.util.List\u003cjava.awt.geom.Point2D\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "viewer",
          "type_long": "ghidra.graph.viewer.GraphViewer\u003cV,E\u003e",
          "type_short": "GraphViewer",
          "comment": ""
        },
        {
          "name": "useAnimation",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeVertexLocations",
      "comment": "Create the vertex locations that will be transitioned over the life of this animator. \n The locations are in layout space.   This method is expected to update\n #vertexLocations (and optionally #edgeArticulationLocations).",
      "javadoc": "Create the vertex locations that will be transitioned over the life of this animator. \n The locations are in \u003ccode\u003elayout space\u003c/code\u003e.   This method is expected to update\n {@link #vertexLocations} (and optionally {@link #edgeArticulationLocations}).",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "canShortcut",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "shortcut",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createAnimator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "org.jdesktop.animation.timing.Animator",
        "type_short": "Animator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "finished",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPercentComplete",
      "comment": "Callback from our animator.",
      "javadoc": "Callback from our animator.",
      "static": false,
      "params": [
        {
          "name": "percentComplete",
          "type_long": "double",
          "type_short": "double",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updatePointFromPercentComplete",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "transitionPoints",
          "type_long": "ghidra.graph.job.AbstractGraphTransitionJob\u003cV,E\u003e.TransitionPoints",
          "type_short": "TransitionPoints",
          "comment": ""
        },
        {
          "name": "percentComplete",
          "type_long": "double",
          "type_short": "double",
          "comment": ""
        },
        {
          "name": "updatePoint",
          "type_long": "java.awt.geom.Point2D",
          "type_short": "Point2D",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "installFinalEdgeArticulations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateNewVertexPositions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "percentComplete",
          "type_long": "double",
          "type_short": "double",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "calculateDefaultLayoutLocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.LayoutPositions\u003cV,E\u003e",
        "type_short": "LayoutPositions",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCurrentLayoutLocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.LayoutPositions\u003cV,E\u003e",
        "type_short": "LayoutPositions",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.geom.Point2D",
        "type_short": "Point2D",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearLocationCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "calculateDefaultLayoutLocations",
      "comment": "Calculates default vertex locations for the current graph by using the current layout, \n excluding those vertices in the given ignore set.  The graph, \n layout and vertices will be unaltered.",
      "javadoc": "Calculates default vertex locations for the current graph by using the current layout, \n excluding those vertices in the given \u003ci\u003eignore\u003c/i\u003e set.  The graph, \n layout and vertices will be unaltered.\n@param verticesToIgnore The set of vertices which should be excluded from the layout process\n@return The mapping of all arranged vertices to their respective locations",
      "static": false,
      "params": [
        {
          "name": "verticesToIgnore",
          "type_long": "java.util.Set\u003cV\u003e",
          "type_short": "Set",
          "comment": "The set of vertices which should be excluded from the layout process"
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.LayoutPositions\u003cV,E\u003e",
        "type_short": "LayoutPositions",
        "comment": "The mapping of all arranged vertices to their respective locations"
      },
      "throws": []
    },
    {
      "name": "ensureVerticesComponentsCreated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "g",
          "type_long": "ghidra.graph.VisualGraph\u003cV,E\u003e",
          "type_short": "VisualGraph",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
