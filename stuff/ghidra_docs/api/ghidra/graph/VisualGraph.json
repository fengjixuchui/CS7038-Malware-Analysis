{
  "name": "VisualGraph",
  "comment": "The primary interface for graphs that are to be rendered.  This class defines methods \n commonly used in the GUI while extending the primary non-visual graph interface.\n \n The Visual Graph API will typically provide services for taking a Visual Graph and \n creating a UI that handles basic user interaction elements (similar to how complex Java\n widgets handle user interaction for the developer).  The Visual Graph is the model of the\n UI components.  A typical Visual Graph UI will render developer-defined components, \n handling mouse event translations for the developer. \n  \n Some features found in Visual Graphs:\n \n \tMouse event translation - the JComponent being rendered in the graph will be handed \n      mouse events that are relative to its coordinate space, not that of the graph.\n \t\n  Hover and Selection - vertex hover and selection events are handled by the API\n  \n  Zooming - zoom level and related events (when zoomed too far, mouse events are \n      not passed-through to the component) and handled by the API\n  \n ",
  "javadoc": "The primary interface for graphs that are to be rendered.  This class defines methods \n commonly used in the GUI while extending the primary non-visual graph interface.\n \n \u003cP\u003eThe Visual Graph API will typically provide services for taking a Visual Graph and \n creating a UI that handles basic user interaction elements (similar to how complex Java\n widgets handle user interaction for the developer).  The Visual Graph is the model of the\n UI components.  A typical Visual Graph UI will render developer-defined components, \n handling mouse event translations for the developer. \n  \n \u003cP\u003eSome features found in Visual Graphs:\n \u003cUL\u003e\n \t\u003cLI\u003eMouse event translation - the JComponent being rendered in the graph will be handed \n      mouse events that are relative to its coordinate space, not that of the graph.\n \t\u003c/LI\u003e\n  \u003cLI\u003eHover and Selection - vertex hover and selection events are handled by the API\n  \u003c/LI\u003e\n  \u003cLI\u003eZooming - zoom level and related events (when zoomed too far, mouse events are \n      not passed-through to the component) and handled by the API\n  \u003c/LI\u003e\n \u003c/UL\u003e\n@param \u003cV\u003e the vertex type\n@param \u003cE\u003e the edge type",
  "static": false,
  "implements": [
    "ghidra.graph.GDirectedGraph"
  ],
  "fields": [],
  "methods": [
    {
      "name": "vertexLocationChanged",
      "comment": "A callback notifying this graph that the given vertex\u0027s location has changed",
      "javadoc": "A callback notifying this graph that the given vertex\u0027s location has changed\n@param v the vertex\n@param point the new location\n@param changeType the type of change",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": "the vertex"
        },
        {
          "name": "point",
          "type_long": "java.awt.Point",
          "type_short": "Point",
          "comment": "the new location"
        },
        {
          "name": "changeType",
          "type_long": "ghidra.graph.viewer.layout.LayoutListener.ChangeType",
          "type_short": "ChangeType",
          "comment": "the type of change"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFocusedVertex",
      "comment": "Returns the focused vertex; null if no vertex has focus.  Focus is equivalent to \n being selected, but further distinguishes the vertex as being the only selected \n vertex.  This is useful for key event processing.",
      "javadoc": "Returns the focused vertex; null if no vertex has focus.  Focus is equivalent to \n being selected, but further distinguishes the vertex as being the only selected \n vertex.  This is useful for key event processing.\n@return the focused vertex",
      "static": false,
      "params": [],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": "the focused vertex"
      },
      "throws": []
    },
    {
      "name": "setVertexFocused",
      "comment": "Sets the given vertex to be focused or not\n \n Note: this method is called by other APIs to ensure that the graph\u0027s notion of the \n focused vertex matches what is happening externally (e.g., from the user clicking the\n screen).  If you wish to programmatically focus a vertex, then you should not be calling\n this API directly, but you should instead be using the GPickedState or one\n of the APIs that uses that, such as the GraphComponent.",
      "javadoc": "Sets the given vertex to be focused or not\n \n \u003cP\u003eNote: this method is called by other APIs to ensure that the graph\u0027s notion of the \n focused vertex matches what is happening externally (e.g., from the user clicking the\n screen).  If you wish to programmatically focus a vertex, then you should not be calling\n this API directly, but you should instead be using the {@link GPickedState} or one\n of the APIs that uses that, such as the {@link GraphComponent}.\n@param v the focused vertex\n@param b true for focused; false for not focused",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": "the focused vertex"
        },
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true for focused; false for not focused"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearSelectedVertices",
      "comment": "Clears any selected vertices as well as the focused vertex",
      "javadoc": "Clears any selected vertices as well as the focused vertex",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSelectedVertices",
      "comment": "Selects the given vertices\n \n Note: this method is called by other APIs to ensure that the graph\u0027s notion of the \n focused vertex matches what is happening externally (e.g., from the user clicking the\n screen).  If you wish to programmatically select a vertex, then you should not be calling\n this API directly, but you should instead be using the GPickedState or one\n of the APIs that uses that, such as the GraphComponent.",
      "javadoc": "Selects the given vertices\n \n \u003cP\u003eNote: this method is called by other APIs to ensure that the graph\u0027s notion of the \n focused vertex matches what is happening externally (e.g., from the user clicking the\n screen).  If you wish to programmatically select a vertex, then you should not be calling\n this API directly, but you should instead be using the {@link GPickedState} or one\n of the APIs that uses that, such as the {@link GraphComponent}.\n@param vertices the vertices",
      "static": false,
      "params": [
        {
          "name": "vertices",
          "type_long": "java.util.Set\u003cV\u003e",
          "type_short": "Set",
          "comment": "the vertices"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSelectedVertices",
      "comment": "Returns the selected vertices.",
      "javadoc": "Returns the selected vertices.\n@return the selected vertices",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cV\u003e",
        "type_short": "Set",
        "comment": "the selected vertices"
      },
      "throws": []
    },
    {
      "name": "addGraphChangeListener",
      "comment": "Adds the given listener to this graph",
      "javadoc": "Adds the given listener to this graph\n@param l the listener",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.graph.event.VisualGraphChangeListener\u003cV,E\u003e",
          "type_short": "VisualGraphChangeListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeGraphChangeListener",
      "comment": "Removes the given listener from this graph",
      "javadoc": "Removes the given listener from this graph\n@param l the listener",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.graph.event.VisualGraphChangeListener\u003cV,E\u003e",
          "type_short": "VisualGraphChangeListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLayout",
      "comment": "Returns the layout that has been applied to the graph.  The graph does not need its \n layout to function, but rather it is convenient for the visual graph system to be able\n to get the layout from the graph, rather than passing the layout everywhere it is \n needed.",
      "javadoc": "Returns the layout that has been applied to the graph.  The graph does not need its \n layout to function, but rather it is convenient for the visual graph system to be able\n to get the layout from the graph, rather than passing the layout everywhere it is \n needed.\n@return the layout applied to the graph",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.VisualGraphLayout\u003cV,E\u003e",
        "type_short": "VisualGraphLayout",
        "comment": "the layout applied to the graph"
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.VisualGraph\u003cV,E\u003e",
        "type_short": "VisualGraph",
        "comment": ""
      },
      "throws": []
    }
  ]
}
