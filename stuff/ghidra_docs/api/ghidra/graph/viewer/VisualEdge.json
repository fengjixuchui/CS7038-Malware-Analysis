{
  "name": "VisualEdge",
  "comment": "An edge that contains properties and state related to a user interface.\n \n An edge can be selected, which means that it has been clicked by the user.  Also, an \n edge can be part of an active path.  This allows the UI to paint the edge differently if it\n is in the active path.   The active path concept applies to both hovered and focused vertices\n separately.  A hovered vertex is one that the user moves the mouse over; a focused vertex is\n one that is selected.\n \n \n Articulations - The start and end points are always part of the\n edge.  Any additional points on the edge are considered articulation points.  Thus, an edge\n without articulations will be drawn as a straight line.  An edge with articulations will\n be drawn as a series of straight lines from point-to-point, allowing the layout algorithm\n to add points to the edge to avoid line crossings; these points are used to make the \n drawing of the edge cleaner.\n\n equals() and hashCode() - The graph API allows for cloning of layouts.  For this \n to correctly copy layout locations, each edge must override equals and\n hashCode in order to properly find edges across graphs.",
  "javadoc": "An edge that contains properties and state related to a user interface.\n \n \u003cP\u003eAn edge can be selected, which means that it has been clicked by the user.  Also, an \n edge can be part of an active path.  This allows the UI to paint the edge differently if it\n is in the active path.   The active path concept applies to both hovered and focused vertices\n separately.  A hovered vertex is one that the user moves the mouse over; a focused vertex is\n one that is selected.\n \n \u003ca id\u003d\"articulations\"\u003e\u003c/A\u003e\n \u003cP\u003e\u003cU\u003eArticulations\u003c/U\u003e - The start and end points are always part of the\n edge.  Any additional points on the edge are considered articulation points.  Thus, an edge\n without articulations will be drawn as a straight line.  An edge with articulations will\n be drawn as a series of straight lines from point-to-point, allowing the layout algorithm\n to add points to the edge to avoid line crossings; these points are used to make the \n drawing of the edge cleaner.\n\n \u003cP\u003e\u003cU\u003eequals() and hashCode()\u003c/U\u003e - The graph API allows for cloning of layouts.  For this \n to correctly copy layout locations, each edge must override \u003ccode\u003eequals\u003c/code\u003e and\n \u003ccode\u003ehashCode\u003c/code\u003e in order to properly find edges across graphs.\n@param \u003cV\u003e the vertex type",
  "static": false,
  "implements": [
    "ghidra.graph.GEdge"
  ],
  "fields": [],
  "methods": [
    {
      "name": "setSelected",
      "comment": "Sets this edge selected.  This is usually in response to the user selecting the edge.",
      "javadoc": "Sets this edge selected.  This is usually in response to the user selecting the edge.\n@param selected true to select this edge; false to de-select this vertex",
      "static": false,
      "params": [
        {
          "name": "selected",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to select this edge; false to de-select this vertex"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSelected",
      "comment": "Returns true if this edge is selected",
      "javadoc": "Returns true if this edge is selected\n@return true if this edge is selected",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this edge is selected"
      },
      "throws": []
    },
    {
      "name": "setInHoveredVertexPath",
      "comment": "Sets this edge to be marked as in the active path of a currently hovered vertex",
      "javadoc": "Sets this edge to be marked as in the active path of a currently hovered vertex\n@param inPath true to be marked as in the active path; false to be marked as not \n        in the active path",
      "static": false,
      "params": [
        {
          "name": "inPath",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to be marked as in the active path; false to be marked as not \n        in the active path"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInHoveredVertexPath",
      "comment": "Returns true if this edge is part of an active path for a currently hovered \n vertex (this allows the edge to be differently rendered)",
      "javadoc": "Returns true if this edge is part of an active path for a currently hovered \n vertex (this allows the edge to be differently rendered)\n@return true if this edge is part of the active path",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this edge is part of the active path"
      },
      "throws": []
    },
    {
      "name": "setInFocusedVertexPath",
      "comment": "Sets this edge to be marked as in the active path of a currently focused/selected vertex",
      "javadoc": "Sets this edge to be marked as in the active path of a currently focused/selected vertex\n@param inPath true to be marked as in the active path; false to be marked as not \n        in the active path",
      "static": false,
      "params": [
        {
          "name": "inPath",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to be marked as in the active path; false to be marked as not \n        in the active path"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInFocusedVertexPath",
      "comment": "Returns true if this edge is part of an active path for a currently focused/selected \n vertex (this allows the edge to be differently rendered)",
      "javadoc": "Returns true if this edge is part of an active path for a currently focused/selected \n vertex (this allows the edge to be differently rendered)\n@return true if this edge is part of the active path",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this edge is part of the active path"
      },
      "throws": []
    },
    {
      "name": "getArticulationPoints",
      "comment": "Returns the points (in GraphViewerUtils View Space) of the articulation\n \n What are articulations?",
      "javadoc": "Returns the points (in {@link GraphViewerUtils} View Space) of the articulation\n \n \u003cP\u003e\u003cA HREF\u003d\"#articulations\"\u003eWhat are articulations?\u003c/A\u003e\n@return the points (in View Space space) of the articulation.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.awt.geom.Point2D\u003e",
        "type_short": "List",
        "comment": "the points (in View Space space) of the articulation."
      },
      "throws": []
    },
    {
      "name": "setArticulationPoints",
      "comment": "Sets the articulation points for the given edge\n \n What are articulations?",
      "javadoc": "Sets the articulation points for the given edge\n \n \u003cP\u003e\u003cA HREF\u003d\"#articulations\"\u003eWhat are articulations?\u003c/A\u003e\n@param points the points",
      "static": false,
      "params": [
        {
          "name": "points",
          "type_long": "java.util.List\u003cjava.awt.geom.Point2D\u003e",
          "type_short": "List",
          "comment": "the points"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cloneEdge",
      "comment": "Creates a new edge of this type using the given vertices.\n \n Implementation Note: the odd type \u0027E\u0027 below is there so that subclasses can return\n the type of their implementation.   Basically, the decision was made to have each subclass\n suppress the warning that appears, since they know the type is safe.  Alternatively, \n each client would have to cast the return type, which seems less desirable.",
      "javadoc": "Creates a new edge of this type using the given vertices.\n \n \u003cP\u003eImplementation Note: the odd type \u0027E\u0027 below is there so that subclasses can return\n the type of their implementation.   Basically, the decision was made to have each subclass\n suppress the warning that appears, since they know the type is safe.  Alternatively, \n each client would have to cast the return type, which seems less desirable.\n@param start the start vertex\n@param end the end vertex\n@return the new edge",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "V",
          "type_short": "V",
          "comment": "the start vertex"
        },
        {
          "name": "end",
          "type_long": "V",
          "type_short": "V",
          "comment": "the end vertex"
        }
      ],
      "return": {
        "type_long": "E",
        "type_short": "E",
        "comment": "the new edge"
      },
      "throws": []
    },
    {
      "name": "setEmphasis",
      "comment": "Sets the emphasis value for this edge.  A value of 0 indicates no emphasis.",
      "javadoc": "Sets the emphasis value for this edge.  A value of 0 indicates no emphasis.\n@param emphasisLevel the emphasis",
      "static": false,
      "params": [
        {
          "name": "emphasisLevel",
          "type_long": "double",
          "type_short": "double",
          "comment": "the emphasis"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEmphasis",
      "comment": "Returns the emphasis value of this edge.  0 if not emphasized.",
      "javadoc": "Returns the emphasis value of this edge.  0 if not emphasized.\n@return the emphasis value of this edge.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": "the emphasis value of this edge."
      },
      "throws": []
    },
    {
      "name": "setAlpha",
      "comment": "Set the alpha, which determines how much of the edge is visible/see through.  0 is \n completely transparent.  This attribute allows transitional for animations.",
      "javadoc": "Set the alpha, which determines how much of the edge is visible/see through.  0 is \n completely transparent.  This attribute allows transitional for animations.\n@param alpha the alpha value",
      "static": false,
      "params": [
        {
          "name": "alpha",
          "type_long": "double",
          "type_short": "double",
          "comment": "the alpha value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAlpha",
      "comment": "Get the alpha, which determines how much of the edge is visible/see through.  0 is \n completely transparent.  This attribute allows transitional for animations.",
      "javadoc": "Get the alpha, which determines how much of the edge is visible/see through.  0 is \n completely transparent.  This attribute allows transitional for animations.\n@return the alpha value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": "the alpha value"
      },
      "throws": []
    }
  ]
}
