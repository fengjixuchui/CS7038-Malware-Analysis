{
  "name": "VisualGraphView",
  "comment": "A view object, where \u0027view\u0027 is used in the sense of the Model-View-Controller (MVC) pattern.\n This class will contain all UI widgets need to display and interact with a graph.\n\n Implementation Note: \n \n \tThe graph of this component can be null, changing to non-null values over the \n lifetime of this view.  This allows this view to be installed in a UI component, with the \n contents changing as needed. \n \t\n  \n \tWhen the graph is #setGraph(VisualGraph), the view portion of the class is\n \trecreated.\n  \n  \n  At any given point in time there may not be a #graphComponent.  This means that \n  this class must maintain settings state that it will apply when the component is created.\n  This state is atypical and makes this class a bit harder to understand.\n  \n ",
  "javadoc": "A view object, where \u0027view\u0027 is used in the sense of the Model-View-Controller (MVC) pattern.\n This class will contain all UI widgets need to display and interact with a graph.\n\n \u003cp\u003e\u003cb\u003e\u003cu\u003eImplementation Note:\u003c/u\u003e\u003c/b\u003e \n \u003col\u003e\n \t\u003cli\u003eThe graph of this component can be null, changing to non-null values over the \n lifetime of this view.  This allows this view to be installed in a UI component, with the \n contents changing as needed. \n \t\u003c/li\u003e\n  \u003cli\u003e\n \tWhen the graph is {@link #setGraph(VisualGraph) set}, the view portion of the class is\n \trecreated.\n  \u003c/li\u003e\n  \u003cli\u003e\n  At any given point in time there may not be a {@link #graphComponent}.  This means that \n  this class must maintain settings state that it will apply when the component is created.\n  This state is atypical and makes this class a bit harder to understand.\n  \u003c/li\u003e\n \u003c/ol\u003e\n@param \u003cV\u003e the vertex type\n@param \u003cE\u003e the edge type\n@param \u003cG\u003e the graph type",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "ZOOM_OUT_AMOUNT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "float",
      "type_short": "float",
      "constant_value": "0.9"
    },
    {
      "name": "ZOOM_IN_AMOUNT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "float",
      "type_short": "float",
      "constant_value": "1.1"
    },
    {
      "name": "viewPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JPanel",
      "type_short": "JPanel",
      "constant_value": null
    },
    {
      "name": "viewContentPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JPanel",
      "type_short": "JPanel",
      "constant_value": null
    },
    {
      "name": "undockedSatelliteContentPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JPanel",
      "type_short": "JPanel",
      "constant_value": null
    },
    {
      "name": "graph",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "G",
      "type_short": "G",
      "constant_value": null
    },
    {
      "name": "graphComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.GraphComponent\u003cV,E,G\u003e",
      "type_short": "GraphComponent",
      "constant_value": null
    },
    {
      "name": "clientFocusListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Optional\u003cghidra.graph.viewer.vertex.VertexFocusListener\u003cV\u003e\u003e",
      "type_short": "Optional",
      "constant_value": null
    },
    {
      "name": "internalFocusListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.vertex.VertexFocusListener\u003cV\u003e",
      "type_short": "VertexFocusListener",
      "constant_value": null
    },
    {
      "name": "clientVertexClickListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Optional\u003cghidra.graph.viewer.vertex.VertexClickListener\u003cV,E\u003e\u003e",
      "type_short": "Optional",
      "constant_value": null
    },
    {
      "name": "internalVertexClickListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.vertex.VertexClickListener\u003cV,E\u003e",
      "type_short": "VertexClickListener",
      "constant_value": null
    },
    {
      "name": "clientSatelliteListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Optional\u003cghidra.graph.viewer.GraphSatelliteListener\u003e",
      "type_short": "Optional",
      "constant_value": null
    },
    {
      "name": "internalSatelliteListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.GraphSatelliteListener",
      "type_short": "GraphSatelliteListener",
      "constant_value": null
    },
    {
      "name": "satelliteDocked",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "showSatellite",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "showPopups",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "tooltipProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.event.mouse.VertexTooltipProvider\u003cV,E\u003e",
      "type_short": "VertexTooltipProvider",
      "constant_value": null
    },
    {
      "name": "graphInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.GraphPerspectiveInfo\u003cV,E\u003e",
      "type_short": "GraphPerspectiveInfo",
      "constant_value": null
    },
    {
      "name": "vertexHoverHighlightMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.PathHighlightMode",
      "type_short": "PathHighlightMode",
      "constant_value": null
    },
    {
      "name": "vertexFocusHighlightMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.PathHighlightMode",
      "type_short": "PathHighlightMode",
      "constant_value": null
    },
    {
      "name": "layoutProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.layout.LayoutProvider\u003cV,E,G\u003e",
      "type_short": "LayoutProvider",
      "constant_value": null
    },
    {
      "name": "scaler",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "edu.uci.ics.jung.visualization.control.ScalingControl",
      "type_short": "ScalingControl",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "build",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getViewComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JComponent",
        "type_short": "JComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSouthComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "component",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeSatellite",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "optionsChanged",
      "comment": "Called when the options used by this graph view have changed",
      "javadoc": "Called when the options used by this graph view have changed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLayoutProvider",
      "comment": "Sets the given layout provider, but does not actually perform a layout.",
      "javadoc": "Sets the given layout provider, \u003cb\u003ebut does not actually perform a layout\u003c/b\u003e.\n@param newLayoutProvider the new provider",
      "static": false,
      "params": [
        {
          "name": "newLayoutProvider",
          "type_long": "ghidra.graph.viewer.layout.LayoutProvider\u003cV,E,G\u003e",
          "type_short": "LayoutProvider",
          "comment": "the new provider"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setGraph",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "graph",
          "type_long": "G",
          "type_short": "G",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSatelliteListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.graph.viewer.GraphSatelliteListener",
          "type_short": "GraphSatelliteListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVertexFocusListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.graph.viewer.vertex.VertexFocusListener\u003cV\u003e",
          "type_short": "VertexFocusListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVertexClickListener",
      "comment": "Sets a listener that allows clients to be notified of vertex double-clicks.  Normal \n mouse processing is handled by the VisualGraphMousePlugin class.  This is a\n convenience method so that clients do not have to deal with the mouse plugin.",
      "javadoc": "Sets a listener that allows clients to be notified of vertex double-clicks.  Normal \n mouse processing is handled by the {@link VisualGraphMousePlugin} class.  This is a\n convenience method so that clients do not have to deal with the mouse plugin.\n@param l the listener",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.graph.viewer.vertex.VertexClickListener\u003cV,E\u003e",
          "type_short": "VertexClickListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "stopAllAnimation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "installGraphViewer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setGraphComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newComponent",
          "type_long": "ghidra.graph.viewer.GraphComponent\u003cV,E,G\u003e",
          "type_short": "GraphComponent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setContent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWithBusyCursor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "java.util.function.Supplier\u003cT\u003e",
          "type_short": "Supplier",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVisualGraph",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "G",
        "type_short": "G",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrimaryGraphViewer",
      "comment": "Returns the primary viewer of the graph (as opposed to the satellite viewer).   The \n viewer returned is responsible for maintaining view information for a given graph.",
      "javadoc": "Returns the primary viewer of the graph (as opposed to the satellite viewer).   The \n viewer returned is responsible for maintaining view information for a given graph.\n@return the primary viewer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.GraphViewer\u003cV,E\u003e",
        "type_short": "GraphViewer",
        "comment": "the primary viewer"
      },
      "throws": []
    },
    {
      "name": "getSatelliteViewer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.SatelliteGraphViewer\u003cV,E\u003e",
        "type_short": "SatelliteGraphViewer",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setGraphPerspective",
      "comment": "Sets the perspective for this view",
      "javadoc": "Sets the perspective for this view\n@param newPerspective the new perspective",
      "static": false,
      "params": [
        {
          "name": "newPerspective",
          "type_long": "ghidra.graph.viewer.GraphPerspectiveInfo\u003cV,E\u003e",
          "type_short": "GraphPerspectiveInfo",
          "comment": "the new perspective"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generateGraphPerspective",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.GraphPerspectiveInfo\u003cV,E\u003e",
        "type_short": "GraphPerspectiveInfo",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getZoom",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showErrorView",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "errorMessage",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStatusMessage",
      "comment": "Sets a message to be painted on the viewer.  This is useful to show a text message to the\n user.  Passing null will clear the message.",
      "javadoc": "Sets a message to be painted on the viewer.  This is useful to show a text message to the\n user.  Passing null will clear the message.\n@param message the status message",
      "static": false,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the status message"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGraphComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.GraphComponent\u003cV,E,G\u003e",
        "type_short": "GraphComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSatelliteVisible",
      "comment": "Returns whether the satellite intended to be visible.  If this component is built, then\n a result of true means that the satellite is showing.  If the component is not yet \n built, then a result of true means that the satellite will be made visible when the \n component is built.",
      "javadoc": "Returns whether the satellite intended to be visible.  If this component is built, then\n a result of true means that the satellite is showing.  If the component is not yet \n built, then a result of true means that the satellite will be made visible when the \n component is built.\n@return true if visible",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if visible"
      },
      "throws": []
    },
    {
      "name": "setSatelliteVisible",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "visible",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSatelliteDocked",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "docked",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSatelliteDocked",
      "comment": "Returns whether the satellite intended to be docked.  If this component is built, then\n a result of true means that the satellite is docked.  If the component is not yet \n built, then a result of true means that the satellite will be made docked when the \n component is built.",
      "javadoc": "Returns whether the satellite intended to be docked.  If this component is built, then\n a result of true means that the satellite is docked.  If the component is not yet \n built, then a result of true means that the satellite will be made docked when the \n component is built.\n@return true if visible",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if visible"
      },
      "throws": []
    },
    {
      "name": "setPopupsVisible",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "visible",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "arePopupsEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUndockedSatelliteComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JComponent",
        "type_short": "JComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSatelliteComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVertexHoverPathHighlightMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "mode",
          "type_long": "ghidra.graph.viewer.PathHighlightMode",
          "type_short": "PathHighlightMode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVertexFocusPathHighlightMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "mode",
          "type_long": "ghidra.graph.viewer.PathHighlightMode",
          "type_short": "PathHighlightMode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVertexFocusPathHighlightMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.PathHighlightMode",
        "type_short": "PathHighlightMode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVertexHoverPathHighlightMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.PathHighlightMode",
        "type_short": "PathHighlightMode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTooltipProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.graph.viewer.event.mouse.VertexTooltipProvider\u003cV,E\u003e",
          "type_short": "VertexTooltipProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "zoomOutGraph",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "zoomInGraph",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "zoomToVertex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "zoomToWindow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getViewUpdater",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.VisualGraphViewUpdater\u003cV,E\u003e",
        "type_short": "VisualGraphViewUpdater",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVertexPointInViewSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Point",
        "type_short": "Point",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "translatePointFromVertexToViewSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "p",
          "type_long": "java.awt.Point",
          "type_short": "Point",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Point",
        "type_short": "Point",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "translateRectangleFromVertexToViewSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "r",
          "type_long": "java.awt.Rectangle",
          "type_short": "Rectangle",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Rectangle",
        "type_short": "Rectangle",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "translateMouseEventFromVertexToViewSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.event.MouseEvent",
        "type_short": "MouseEvent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isScaledPastInteractionThreshold",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "maybeTwinkleVertex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "twinkleVertex",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "doTwinkle",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "requestFocus",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "repaint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFocusedVertex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSelectedVertices",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cV\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLayoutProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.LayoutProvider\u003cV,E,G\u003e",
        "type_short": "LayoutProvider",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cleanup",
      "comment": "Effectively clears this display.  This method is not called dispose, as that implies \n the end of an object\u0027s lifecycle.  This object can be re-used after this method is\n called.",
      "javadoc": "Effectively clears this display.  This method is not called dispose, as that implies \n the end of an object\u0027s lifecycle.  This object can be re-used after this method is\n called.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disposeViewer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
