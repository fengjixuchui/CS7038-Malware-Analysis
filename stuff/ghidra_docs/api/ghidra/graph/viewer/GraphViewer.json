{
  "name": "GraphViewer",
  "comment": "The base viewer for the Graph module.   This viewer provides methods for manipulating\n the graph using the mouse.\n \n The viewer is currently an extension of the VisualizationViewer and as such it \n is accessed by much of the event handling subsystem, such as the mouse plugins, as well as \n the rendering system.\n \n Also, tooltips/popups for edges and vertices are handled by this class.\n \n This class creates a VisualGraphViewUpdater that perform graph transformations, \n such as panning the graph, with and without animation, as requested.",
  "javadoc": "The base viewer for the Graph module.   This viewer provides methods for manipulating\n the graph using the mouse.\n \n \u003cP\u003eThe viewer is currently an extension of the {@link VisualizationViewer} and as such it \n is accessed by much of the event handling subsystem, such as the mouse plugins, as well as \n the rendering system.\n \n \u003cP\u003eAlso, tooltips/popups for edges and vertices are handled by this class.\n \n \u003cP\u003eThis class creates a {@link VisualGraphViewUpdater} that perform graph transformations, \n such as panning the graph, with and without animation, as requested.\n@param \u003cV\u003e the vertex type\n@param \u003cE\u003e the edge type",
  "static": false,
  "implements": [],
  "extends": "edu.uci.ics.jung.visualization.VisualizationViewer",
  "fields": [
    {
      "name": "gPickedState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.event.picking.GPickedState\u003cV\u003e",
      "type_short": "GPickedState",
      "constant_value": null
    },
    {
      "name": "initializedListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.function.Consumer\u003cghidra.graph.viewer.GraphViewer\u003cV,E\u003e\u003e",
      "type_short": "Consumer",
      "constant_value": null
    },
    {
      "name": "popupRegulator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.popup.PopupRegulator\u003cV,E\u003e",
      "type_short": "PopupRegulator",
      "constant_value": null
    },
    {
      "name": "vertexTooltipProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.event.mouse.VertexTooltipProvider\u003cV,E\u003e",
      "type_short": "VertexTooltipProvider",
      "constant_value": null
    },
    {
      "name": "vgOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.options.VisualGraphOptions",
      "type_short": "VisualGraphOptions",
      "constant_value": null
    },
    {
      "name": "viewUpdater",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.VisualGraphViewUpdater\u003cV,E\u003e",
      "type_short": "VisualGraphViewUpdater",
      "constant_value": null
    },
    {
      "name": "pathHighlighter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.edge.VisualGraphPathHighlighter\u003cV,E\u003e",
      "type_short": "VisualGraphPathHighlighter",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "layout",
          "type_long": "ghidra.graph.viewer.layout.VisualGraphLayout\u003cV,E\u003e",
          "type_short": "VisualGraphLayout",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "java.awt.Dimension",
          "type_short": "Dimension",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildUpdater",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createPathHighlighter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.graph.viewer.edge.PathHighlightListener",
          "type_short": "PathHighlightListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.edge.VisualGraphPathHighlighter\u003cV,E\u003e",
        "type_short": "VisualGraphPathHighlighter",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createViewUpdater",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.VisualGraphViewUpdater\u003cV,E\u003e",
        "type_short": "VisualGraphViewUpdater",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVisualGraphLayout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.VisualGraphLayout\u003cV,E\u003e",
        "type_short": "VisualGraphLayout",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setGraphLayout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "layout",
          "type_long": "edu.uci.ics.jung.algorithms.layout.Layout\u003cV,E\u003e",
          "type_short": "Layout",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVisualGraph",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.VisualGraph\u003cV,E\u003e",
        "type_short": "VisualGraph",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGraphMouse",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.event.mouse.VisualGraphPluggableGraphMouse\u003cV,E\u003e",
        "type_short": "VisualGraphPluggableGraphMouse",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setGraphMouse",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "graphMouse",
          "type_long": "edu.uci.ics.jung.visualization.VisualizationViewer.GraphMouse",
          "type_short": "GraphMouse",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setGraphOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.graph.viewer.options.VisualGraphOptions",
          "type_short": "VisualGraphOptions",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "optionsChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.options.VisualGraphOptions",
        "type_short": "VisualGraphOptions",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVertexHoverPathHighlightMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "hoverMode",
          "type_long": "ghidra.graph.viewer.PathHighlightMode",
          "type_short": "PathHighlightMode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVertexFocusPathHighlightMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "focusMode",
          "type_long": "ghidra.graph.viewer.PathHighlightMode",
          "type_short": "PathHighlightMode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVertexHoverPathHighlightMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.PathHighlightMode",
        "type_short": "PathHighlightMode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVertexFocusPathHighlightMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.PathHighlightMode",
        "type_short": "PathHighlightMode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setViewerInitializedListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "java.util.function.Consumer\u003cghidra.graph.viewer.GraphViewer\u003cV,E\u003e\u003e",
          "type_short": "Consumer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPathHighlighter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.edge.VisualGraphPathHighlighter\u003cV,E\u003e",
        "type_short": "VisualGraphPathHighlighter",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getViewUpdater",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.VisualGraphViewUpdater\u003cV,E\u003e",
        "type_short": "VisualGraphViewUpdater",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGPickedVertexState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.event.picking.GPickedState\u003cV\u003e",
        "type_short": "GPickedState",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVertexTooltipProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vertexTooltipProvider",
          "type_long": "ghidra.graph.viewer.event.mouse.VertexTooltipProvider\u003cV,E\u003e",
          "type_short": "VertexTooltipProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "useMouseRelativeZoom",
      "comment": "When true (the default), the zoom will center wherever the mouse is positioned.  False \n will zoom at the center of the view.",
      "javadoc": "When true (the default), the zoom will center wherever the mouse is positioned.  False \n will zoom at the center of the view.\n@return true if using mouse-relative zoom",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if using mouse-relative zoom"
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "!!Super Hacky Override!!\n The code we are overriding blindly calls add(), without first checking to see if it has\n already been added.  Java 6 added a method, removeNotify(), that is called when components\n are removed.  When add is called in the overridden method, it triggers a call to remove, \n which triggers removeNotify().  This call is made during the painting process.  The problem\n therein is that out buttons borders get reset (see AbstractButton.removeNotify()) when\n we repaint, which means that mouse hovers do not work correctly (SCR 6819).",
      "javadoc": "!!Super Hacky Override!!\n The code we are overriding blindly calls add(), without first checking to see if it has\n already been added.  Java 6 added a method, removeNotify(), that is called when components\n are removed.  When add is called in the overridden method, it triggers a call to remove, \n which triggers removeNotify().  This call is made during the painting process.  The problem\n therein is that out buttons borders get reset (see AbstractButton.removeNotify()) when\n we repaint, which means that mouse hovers do not work correctly (SCR 6819).",
      "static": false,
      "params": [
        {
          "name": "comp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "paintComponent",
      "comment": "!!Super Hacky Override!!\n This is done to make sure that we center the view when we are fully laid-out.  If\n you know of a better way to do this, then, get rid of this overridden method and do\n the good thing.",
      "javadoc": "!!Super Hacky Override!!\n This is done to make sure that we center the view when we are fully laid-out.  If\n you know of a better way to do this, then, get rid of this overridden method and do\n the good thing.",
      "static": false,
      "params": [
        {
          "name": "g",
          "type_long": "java.awt.Graphics",
          "type_short": "Graphics",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCenter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.geom.Point2D",
        "type_short": "Point2D",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isScaledPastInteractionThreshold",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPopupDelay",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "delayMs",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPopupsVisible",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "visible",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPopupShowing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToolTipText",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToolTipInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.popup.ToolTipInfo\u003c?\u003e",
        "type_short": "ToolTipInfo",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createVertexMouseInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        },
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "vertexBasedClickPoint",
          "type_long": "java.awt.geom.Point2D",
          "type_short": "Point2D",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.event.mouse.VertexMouseInfo\u003cV,E\u003e",
        "type_short": "VertexMouseInfo",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "viewer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.GraphViewer\u003cV,E\u003e",
        "type_short": "GraphViewer",
        "comment": ""
      },
      "throws": []
    }
  ]
}
