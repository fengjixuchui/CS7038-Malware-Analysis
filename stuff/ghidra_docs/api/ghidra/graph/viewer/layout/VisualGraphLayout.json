{
  "name": "VisualGraphLayout",
  "comment": "The interface for defining functions provided that are additional to that of Layout.",
  "javadoc": "The interface for defining functions provided that are additional to that of {@link Layout}.\n@param \u003cV\u003e the vertex type\n@param \u003cE\u003e the edge type",
  "static": false,
  "implements": [
    "edu.uci.ics.jung.algorithms.layout.Layout"
  ],
  "fields": [],
  "methods": [
    {
      "name": "addLayoutListener",
      "comment": "Adds a layout listener",
      "javadoc": "Adds a layout listener\n@param listener the listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.graph.viewer.layout.LayoutListener\u003cV,E\u003e",
          "type_short": "LayoutListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeLayoutListener",
      "comment": "Removes a layout listener",
      "javadoc": "Removes a layout listener\n@param listener the listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.graph.viewer.layout.LayoutListener\u003cV,E\u003e",
          "type_short": "LayoutListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "usesEdgeArticulations",
      "comment": "Returns true if this layout uses articulated edges.  All VisualEdges have the\n ability to articulate.  This method servers as a shortcut for algorithms so that they \n need not loop over all edges to determine if they have articulations.  (Looping over\n large graphs is time intensive.)\n \n What are articulations?",
      "javadoc": "Returns true if this layout uses articulated edges.  All {@link VisualEdge}s have the\n ability to articulate.  This method servers as a shortcut for algorithms so that they \n need not loop over all edges to determine if they have articulations.  (Looping over\n large graphs is time intensive.)\n \n \u003cP\u003e\u003cA HREF\u003d\"../VisualEdge.html#articulations\"\u003eWhat are articulations?\u003c/A\u003e\n@return true if this layout uses articulated edges.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this layout uses articulated edges."
      },
      "throws": []
    },
    {
      "name": "calculateLocations",
      "comment": "Signals to again layout the current graph.  The locations generated by the layout will\n be returned, but not actually applied to the graph.  This allows clients to generate new\n locations and then apply them in a delayed fashion, like for animation.",
      "javadoc": "Signals to again layout the current graph.  The locations generated by the layout will\n be returned, but not actually applied to the graph.  This allows clients to generate new\n locations and then apply them in a delayed fashion, like for animation.\n@param graph the graph that contains the vertices to layout\n@param monitor the task monitor used to report progress or to cancel",
      "static": false,
      "params": [
        {
          "name": "graph",
          "type_long": "ghidra.graph.VisualGraph\u003cV,E\u003e",
          "type_short": "VisualGraph",
          "comment": "the graph that contains the vertices to layout"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor used to report progress or to cancel"
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.LayoutPositions\u003cV,E\u003e",
        "type_short": "LayoutPositions",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cloneLayout",
      "comment": "Creates a new version of this layout using the given graph.  Also, the new layout will\n have the same state as this layout (i.e., vertex positions (and edge articulations, \n if applicable)).",
      "javadoc": "Creates a new version of this layout using the given graph.  Also, the new layout will\n have the same state as this layout (i.e., vertex positions (and edge articulations, \n if applicable)).\n@param newGraph the new graph for the new layout\n@return the new layout",
      "static": false,
      "params": [
        {
          "name": "newGraph",
          "type_long": "ghidra.graph.VisualGraph\u003cV,E\u003e",
          "type_short": "VisualGraph",
          "comment": "the new graph for the new layout"
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.VisualGraphLayout\u003cV,E\u003e",
        "type_short": "VisualGraphLayout",
        "comment": "the new layout"
      },
      "throws": []
    },
    {
      "name": "setLocation",
      "comment": "Allows the client to change the location while specifying the type of change",
      "javadoc": "Allows the client to change the location while specifying the type of change\n@param v the vertex\n@param location the new location\n@param changeType the type of change",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": "the vertex"
        },
        {
          "name": "location",
          "type_long": "java.awt.geom.Point2D",
          "type_short": "Point2D",
          "comment": "the new location"
        },
        {
          "name": "changeType",
          "type_long": "ghidra.graph.viewer.layout.LayoutListener.ChangeType",
          "type_short": "ChangeType",
          "comment": "the type of change"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVisualGraph",
      "comment": "Returns the graph of this layout",
      "javadoc": "Returns the graph of this layout\n@return the graph of this layout",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.VisualGraph\u003cV,E\u003e",
        "type_short": "VisualGraph",
        "comment": "the graph of this layout"
      },
      "throws": []
    },
    {
      "name": "getEdgeRenderer",
      "comment": "Returns an optional edge renderer.  This is used to render each edge.",
      "javadoc": "Returns an optional edge renderer.  This is used to render each edge.\n@return an optional edge renderer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "edu.uci.ics.jung.visualization.renderers.BasicEdgeRenderer\u003cV,E\u003e",
        "type_short": "BasicEdgeRenderer",
        "comment": "an optional edge renderer"
      },
      "throws": []
    },
    {
      "name": "getEdgeShapeTransformer",
      "comment": "Returns an optional edge shape transformer.  This is used to create shapes for each edge.",
      "javadoc": "Returns an optional edge shape transformer.  This is used to create shapes for each edge.\n@return an optional edge shape transformer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "com.google.common.base.Function\u003cE,java.awt.Shape\u003e",
        "type_short": "Function",
        "comment": "an optional edge shape transformer"
      },
      "throws": []
    },
    {
      "name": "getEdgeLabelRenderer",
      "comment": "Returns an optional custom edge label renderer.  This is used to add labels to the edges.",
      "javadoc": "Returns an optional custom edge label renderer.  This is used to add labels to the edges.\n@return an optional renderer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "edu.uci.ics.jung.visualization.renderers.Renderer.EdgeLabel\u003cV,E\u003e",
        "type_short": "EdgeLabel",
        "comment": "an optional renderer"
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "Cleanup any resource being managed by this layout.",
      "javadoc": "Cleanup any resource being managed by this layout.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
