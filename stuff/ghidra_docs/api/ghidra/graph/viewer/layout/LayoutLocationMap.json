{
  "name": "LayoutLocationMap",
  "comment": "A class that holds row and column data for each vertex and edge.  \n \n  This class will take in a GridLocationMap, which is comprised of grid index \n values, not layout space points.  Then, the grid values will be used to calculate \n offsets and size for each row and column. Each row has a y location and a height; each \n column has an x location and a width. The height and width are uniform in size across \n all rows and columns, based upon the tallest and widest vertex in the graph.",
  "javadoc": "A class that holds row and column data for each vertex and edge.  \n \n \u003cP\u003e This class will take in a {@link GridLocationMap}, which is comprised of grid index \n values, not layout space points.  Then, the grid values will be used to calculate \n offsets and size for each row and column. Each row has a y location and a height; each \n column has an x location and a width. The height and width are uniform in size across \n all rows and columns, based upon the tallest and widest vertex in the graph.\n@param \u003cV\u003e the vertex type\n@param \u003cE\u003e the edge type",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "numRows",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "numColumns",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "rowsByIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.TreeMap\u003cjava.lang.Integer,ghidra.graph.viewer.layout.Row\u003cV\u003e\u003e",
      "type_short": "TreeMap",
      "constant_value": null
    },
    {
      "name": "columnsByIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.TreeMap\u003cjava.lang.Integer,ghidra.graph.viewer.layout.Column\u003e",
      "type_short": "TreeMap",
      "constant_value": null
    },
    {
      "name": "isCondensed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "gridLocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.graph.viewer.layout.GridLocationMap\u003cV,E\u003e",
      "type_short": "GridLocationMap",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "gridLocations",
          "type_long": "ghidra.graph.viewer.layout.GridLocationMap\u003cV,E\u003e",
          "type_short": "GridLocationMap",
          "comment": ""
        },
        {
          "name": "transformer",
          "type_long": "com.google.common.base.Function\u003cV,java.awt.Shape\u003e",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "isCondensed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.LayoutLocationMap\u003cV,E\u003e",
        "type_short": "LayoutLocationMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRowCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColumnCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "col",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.Column",
        "type_short": "Column",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "col",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "gridX",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.Column",
        "type_short": "Column",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColumnContaining",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.Column",
        "type_short": "Column",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doGetColumn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.Column",
        "type_short": "Column",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "columns",
      "comment": "Returns the columns in this location map, sorted from lowest index to highest",
      "javadoc": "Returns the columns in this location map, sorted from lowest index to highest\n@return the columns in this location map, sorted from lowest index to highest",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.graph.viewer.layout.Column\u003e",
        "type_short": "Collection",
        "comment": "the columns in this location map, sorted from lowest index to highest"
      },
      "throws": []
    },
    {
      "name": "rows",
      "comment": "Returns the rows in this location map, sorted from lowest index to highest",
      "javadoc": "Returns the rows in this location map, sorted from lowest index to highest\n@return the rows in this location map, sorted from lowest index to highest",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.graph.viewer.layout.Row\u003cV\u003e\u003e",
        "type_short": "Collection",
        "comment": "the rows in this location map, sorted from lowest index to highest"
      },
      "throws": []
    },
    {
      "name": "lastColumn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.Column",
        "type_short": "Column",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "nextColumn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "column",
          "type_long": "ghidra.graph.viewer.layout.Column",
          "type_short": "Column",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.Column",
        "type_short": "Column",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "articulations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "E",
          "type_short": "E",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.awt.Point\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "row",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.Row\u003cV\u003e",
        "type_short": "Row",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lastRow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.Row\u003cV\u003e",
        "type_short": "Row",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "row",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "gridY",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.Row\u003cV\u003e",
        "type_short": "Row",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doGetRow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.Row\u003cV\u003e",
        "type_short": "Row",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "gridX",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "col",
          "type_long": "ghidra.graph.viewer.layout.Column",
          "type_short": "Column",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "gridY",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "ghidra.graph.viewer.layout.Row\u003cV\u003e",
          "type_short": "Row",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRowOffsets",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.Integer\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColOffsets",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.Integer\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCondensed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinMaxRowColumnValues",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vertices",
          "type_long": "java.util.Collection\u003cV\u003e",
          "type_short": "Collection",
          "comment": ""
        },
        {
          "name": "edges",
          "type_long": "java.util.Collection\u003cE\u003e",
          "type_short": "Collection",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.layout.MinMaxRowColumn",
        "type_short": "MinMaxRowColumn",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "initializeLayoutLocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "transformer",
          "type_long": "com.google.common.base.Function\u003cV,java.awt.Shape\u003e",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "vertices",
          "type_long": "java.util.Collection\u003cV\u003e",
          "type_short": "Collection",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    }
  ]
}
