{
  "name": "Row",
  "comment": "A row in a grid.   This class stores its row index, its y offset and its height.   The\n y value is the layout space y value of a Point2D object.   That is, unlike the\n GridLocationMap, the y value of this object is in layout space and not indexes \n of a grid.\n \n This class maintains a collection of vertices on this row, organized by column index.  You\n can get the column of a vertex from #getColumn(Object).",
  "javadoc": "A row in a grid.   This class stores its row index, its y offset and its height.   The\n y value is the layout space y value of a {@link Point2D} object.   That is, unlike the\n {@link GridLocationMap}, the y value of this object is in layout space and not indexes \n of a grid.\n \n \u003cp\u003eThis class maintains a collection of vertices on this row, organized by column index.  You\n can get the column of a vertex from {@link #getColumn(Object) getColumn(V)}.\n@param \u003cV\u003e the vertex type",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "y",
      "comment": "The layout y coordinate of the column",
      "javadoc": "The \u003cb\u003elayout\u003c/b\u003e y coordinate of the column",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "height",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "index",
      "comment": "The grid index of this row (0, 1...n) for the number of rows",
      "javadoc": "The grid index of this row (0, 1...n) for the number of rows",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "verticesByColumn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.TreeMap\u003cjava.lang.Integer,V\u003e",
      "type_short": "TreeMap",
      "constant_value": null
    },
    {
      "name": "columnsByVertex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cV,java.lang.Integer\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setColumn",
      "comment": "Sets the column index in this row for the given vertex",
      "javadoc": "Sets the column index in this row for the given vertex\n@param v the vertex\n@param col the column index",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": "the vertex"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column index"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColumn",
      "comment": "Returns the column index for the given vertex",
      "javadoc": "Returns the column index for the given vertex\n@param v the vertex\n@return the column index for the given vertex",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": "the vertex"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the column index for the given vertex"
      },
      "throws": []
    },
    {
      "name": "getVertex",
      "comment": "Returns the vertex at the given column index or null if there is no vertex at that column",
      "javadoc": "Returns the vertex at the given column index or null if there is no vertex at that column\n@param column the column index\n@return the vertex",
      "static": false,
      "params": [
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column index"
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": "the vertex"
      },
      "throws": []
    },
    {
      "name": "getColumnCount",
      "comment": "Represents the range of columns in this row.  For this given row in a grid:\n \n \t0 1 2 3 4 5 6\n \t- - v - v - - \n \n the column count is 3--where the column range is 2-4, inclusive.   \n \n Note: this differs from then number of vertices in this row, as the column count\n includes columns that have no vertex.",
      "javadoc": "Represents the range of columns in this row.  For this given row in a grid:\n \u003cpre\u003e\n \t0 1 2 3 4 5 6\n \t- - v - v - - \n \u003c/pre\u003e\n the column count is 3--where the column range is 2-4, inclusive.   \n \n \u003cp\u003eNote: this differs from then number of vertices in this row, as the column count\n includes columns that have no vertex.\n@return the number of columns in this row, including empty columns between start and end",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of columns in this row, including empty columns between start and end"
      },
      "throws": []
    },
    {
      "name": "getStartColumn",
      "comment": "Returns the smallest column index in this row",
      "javadoc": "Returns the smallest column index in this row\n@return the smallest column index in this row",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Integer",
        "type_short": "Integer",
        "comment": "the smallest column index in this row"
      },
      "throws": []
    },
    {
      "name": "getEndColumn",
      "comment": "Returns the largest column index in this row",
      "javadoc": "Returns the largest column index in this row\n@return the largest column index in this row",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the largest column index in this row"
      },
      "throws": []
    },
    {
      "name": "getVertices",
      "comment": "Returns all vertices in this row, sorted by column index (min to max).   \n \n Note: the index of a vertex in the list does not match the column index.  To get the\n column index for a vertex, call #getColumn(Object).",
      "javadoc": "Returns all vertices in this row, sorted by column index (min to max).   \n \n \u003cp\u003eNote: the index of a vertex in the list does not match the column index.  To get the\n column index for a vertex, call {@link #getColumn(Object) getColumn(V)}.\n@return all vertices in this row",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cV\u003e",
        "type_short": "List",
        "comment": "all vertices in this row"
      },
      "throws": []
    },
    {
      "name": "getPaddedHeight",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "isCondensed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInitialized",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
