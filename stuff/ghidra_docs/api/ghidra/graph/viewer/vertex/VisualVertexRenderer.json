{
  "name": "VisualVertexRenderer",
  "comment": "A renderer for the VisualGraph system.\n \n Rendering in the graph system is a bit different than other Java rendering systems.  For\n example, when a JTable renders itself, it uses a single renderer to stamp the data.  The \n table\u0027s renderer has no state and is updated for each cell\u0027s data that is to be rendered.\n The graph renderer system is different due to the possibility of complex vertex UIs.  Some\n vertices have sophisticated UI elements that have state.  For these vertices, it makes sense\n for the vertex to build and maintain that state; having that state repeatedly built by the\n renderer would be extremely inefficient and difficult to implement.  Considering that we \n expect the vertex to build and maintain its UI, this renderer is really just a tool to:\n \n  Determine if the vertex needs to be painted (by clipping or filtering)\n  \n  Setup the geometry for the vertex (convert the model\u0027s location to the view location,\n      accounting for panning and zooming)\n  \n  Paint any added effects (such as drop-shadows or highlighting)\n  \n ",
  "javadoc": "A renderer for the {@link VisualGraph} system.\n \n \u003cp\u003eRendering in the graph system is a bit different than other Java rendering systems.  For\n example, when a JTable renders itself, it uses a single renderer to stamp the data.  The \n table\u0027s renderer has no state and is updated for each cell\u0027s data that is to be rendered.\n The graph renderer system is different due to the possibility of complex vertex UIs.  Some\n vertices have sophisticated UI elements that have state.  For these vertices, it makes sense\n for the vertex to build and maintain that state; having that state repeatedly built by the\n renderer would be extremely inefficient and difficult to implement.  Considering that we \n expect the vertex to build and maintain its UI, this renderer is really just a tool to:\n \u003col\u003e\n  \u003cli\u003eDetermine if the vertex needs to be painted (by clipping or filtering)\n  \u003c/li\u003e\n  \u003cli\u003eSetup the geometry for the vertex (convert the model\u0027s location to the view location,\n      accounting for panning and zooming)\n  \u003c/li\u003e\n  \u003cli\u003ePaint any added effects (such as drop-shadows or highlighting)\n  \u003c/li\u003e\n \u003c/ol\u003e\n@param \u003cV\u003e the vertex type\n@param \u003cE\u003e the edge type",
  "static": false,
  "implements": [],
  "extends": "ghidra.graph.viewer.vertex.AbstractVisualVertexRenderer",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "paintVertex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rc",
          "type_long": "edu.uci.ics.jung.visualization.RenderContext\u003cV,E\u003e",
          "type_short": "RenderContext",
          "comment": ""
        },
        {
          "name": "layout",
          "type_long": "edu.uci.ics.jung.algorithms.layout.Layout\u003cV,E\u003e",
          "type_short": "Layout",
          "comment": ""
        },
        {
          "name": "vertex",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "paintDropShadow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rc",
          "type_long": "edu.uci.ics.jung.visualization.RenderContext\u003cV,E\u003e",
          "type_short": "RenderContext",
          "comment": ""
        },
        {
          "name": "g",
          "type_long": "edu.uci.ics.jung.visualization.transform.shape.GraphicsDecorator",
          "type_short": "GraphicsDecorator",
          "comment": ""
        },
        {
          "name": "shape",
          "type_long": "java.awt.Shape",
          "type_short": "Shape",
          "comment": ""
        },
        {
          "name": "vertex",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "paintVertexOrVertexShape",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rc",
          "type_long": "edu.uci.ics.jung.visualization.RenderContext\u003cV,E\u003e",
          "type_short": "RenderContext",
          "comment": ""
        },
        {
          "name": "g",
          "type_long": "edu.uci.ics.jung.visualization.transform.shape.GraphicsDecorator",
          "type_short": "GraphicsDecorator",
          "comment": ""
        },
        {
          "name": "layout",
          "type_long": "edu.uci.ics.jung.algorithms.layout.Layout\u003cV,E\u003e",
          "type_short": "Layout",
          "comment": ""
        },
        {
          "name": "vertex",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "compactShape",
          "type_long": "java.awt.Shape",
          "type_short": "Shape",
          "comment": ""
        },
        {
          "name": "fullShape",
          "type_long": "java.awt.Shape",
          "type_short": "Shape",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "paintVertex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rc",
          "type_long": "edu.uci.ics.jung.visualization.RenderContext\u003cV,E\u003e",
          "type_short": "RenderContext",
          "comment": ""
        },
        {
          "name": "g",
          "type_long": "edu.uci.ics.jung.visualization.transform.shape.GraphicsDecorator",
          "type_short": "GraphicsDecorator",
          "comment": ""
        },
        {
          "name": "vertex",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "bounds",
          "type_long": "java.awt.Rectangle",
          "type_short": "Rectangle",
          "comment": ""
        },
        {
          "name": "layout",
          "type_long": "edu.uci.ics.jung.algorithms.layout.Layout\u003cV,E\u003e",
          "type_short": "Layout",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isScaledPastVertexPaintingThreshold",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rc",
          "type_long": "edu.uci.ics.jung.visualization.RenderContext\u003cV,E\u003e",
          "type_short": "RenderContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "paintScaledVertex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rc",
          "type_long": "edu.uci.ics.jung.visualization.RenderContext\u003cV,E\u003e",
          "type_short": "RenderContext",
          "comment": ""
        },
        {
          "name": "vertex",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "g",
          "type_long": "edu.uci.ics.jung.visualization.transform.shape.GraphicsDecorator",
          "type_short": "GraphicsDecorator",
          "comment": ""
        },
        {
          "name": "shape",
          "type_long": "java.awt.Shape",
          "type_short": "Shape",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
