{
  "name": "ArticulatedEdgeRouter",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.graph.viewer.edge.routing.BasicEdgeRouter",
  "fields": [
    {
      "name": "spaceBetweenEndPointsShape",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Shape",
      "type_short": "Shape",
      "constant_value": null
    },
    {
      "name": "cachedVertexBoundsMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cV,java.awt.Rectangle\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "debugCounter",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.concurrent.atomic.AtomicInteger",
      "type_short": "AtomicInteger",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "viewer",
          "type_long": "edu.uci.ics.jung.visualization.VisualizationServer\u003cV,E\u003e",
          "type_short": "VisualizationServer",
          "comment": ""
        },
        {
          "name": "edges",
          "type_long": "java.util.Collection\u003cE\u003e",
          "type_short": "Collection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "route",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "constrictToVerticesInsideShape",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "boundingShape",
          "type_long": "java.awt.Shape",
          "type_short": "Shape",
          "comment": ""
        },
        {
          "name": "start",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Shape",
        "type_short": "Shape",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createRectangle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "startPoint",
          "type_long": "java.awt.geom.Point2D",
          "type_short": "Point2D",
          "comment": ""
        },
        {
          "name": "endPoint",
          "type_long": "java.awt.geom.Point2D",
          "type_short": "Point2D",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Rectangle",
        "type_short": "Rectangle",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveArticulationsAroundVertices",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vertices",
          "type_long": "java.util.Set\u003cV\u003e",
          "type_short": "Set",
          "comment": ""
        },
        {
          "name": "edge",
          "type_long": "E",
          "type_short": "E",
          "comment": ""
        },
        {
          "name": "goLeft",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createRoutedTwoPointShape",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "edge",
          "type_long": "E",
          "type_short": "E",
          "comment": ""
        },
        {
          "name": "goLeft",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Shape",
        "type_short": "Shape",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOccludedEdges",
      "comment": "Returns a mapping edges to vertices that touch them.",
      "javadoc": "Returns a mapping edges to vertices that touch them.\n@param viewer the viewer containing the graph\n@param edgeCollection the edges to check for occlusion\n@return a mapping of occluded edges (a subset of the provided edges) to those vertices that\n         occlude them.",
      "static": false,
      "params": [
        {
          "name": "edgeCollection",
          "type_long": "java.util.Collection\u003cE\u003e",
          "type_short": "Collection",
          "comment": "the edges to check for occlusion"
        }
      ],
      "return": {
        "type_long": "java.util.Map\u003cE,java.util.Set\u003cV\u003e\u003e",
        "type_short": "Map",
        "comment": "a mapping of occluded edges (a subset of the provided edges) to those vertices that\n         occlude them."
      },
      "throws": []
    },
    {
      "name": "getVertexBounds",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Map\u003cV,java.awt.Rectangle\u003e",
        "type_short": "Map",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getArticulations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "shape",
          "type_long": "java.awt.Shape",
          "type_short": "Shape",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.awt.geom.Point2D\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createLineEdge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "edge",
          "type_long": "E",
          "type_short": "E",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Shape",
        "type_short": "Shape",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRoutingBoxColor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "edge",
          "type_long": "E",
          "type_short": "E",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPhantomEdgeColor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "edge",
          "type_long": "E",
          "type_short": "E",
          "comment": ""
        },
        {
          "name": "isLeft",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isTrueEdge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "edge",
          "type_long": "E",
          "type_short": "E",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
