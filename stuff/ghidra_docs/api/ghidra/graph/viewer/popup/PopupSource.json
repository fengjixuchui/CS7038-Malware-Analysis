{
  "name": "PopupSource",
  "comment": "An interface that provides graph and component information to the PopupRegulator",
  "javadoc": "An interface that provides graph and component information to the {@link PopupRegulator}\n@param \u003cV\u003e the vertex type\n@param \u003cE\u003e the edge type",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getToolTipInfo",
      "comment": "Returns the tool tip info object for the given mouse event.  Implementations will use the\n event to determine whether a popup should be created for a vertex, edge, the graph or \n not at all.",
      "javadoc": "Returns the tool tip info object for the given mouse event.  Implementations will use the\n event to determine whether a popup should be created for a vertex, edge, the graph or \n not at all.\n@param event the event\n@return the info; null for no popup",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": "the event"
        }
      ],
      "return": {
        "type_long": "ghidra.graph.viewer.popup.ToolTipInfo\u003c?\u003e",
        "type_short": "ToolTipInfo",
        "comment": "the info; null for no popup"
      },
      "throws": []
    },
    {
      "name": "getVertex",
      "comment": "Returns a vertex for the given event",
      "javadoc": "Returns a vertex for the given event\n@param event the event\n@return the vertex or null",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": "the event"
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": "the vertex or null"
      },
      "throws": []
    },
    {
      "name": "getEdge",
      "comment": "Returns an edge for the given event",
      "javadoc": "Returns an edge for the given event\n@param event the event\n@return the edge or null",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": "the event"
        }
      ],
      "return": {
        "type_long": "E",
        "type_short": "E",
        "comment": "the edge or null"
      },
      "throws": []
    },
    {
      "name": "addMouseMotionListener",
      "comment": "Adds the given mouse motion listener to the graph component.  This allows the popup \n regulator to decided when to show and hide popups.",
      "javadoc": "Adds the given mouse motion listener to the graph component.  This allows the popup \n regulator to decided when to show and hide popups.\n@param l the listener",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "java.awt.event.MouseMotionListener",
          "type_short": "MouseMotionListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "repaint",
      "comment": "Signals that the graph needs to repaint",
      "javadoc": "Signals that the graph needs to repaint",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPopupParent",
      "comment": "Returns a suitable window parent for the popup window",
      "javadoc": "Returns a suitable window parent for the popup window\n@return the window parent",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": "the window parent"
      },
      "throws": []
    }
  ]
}
