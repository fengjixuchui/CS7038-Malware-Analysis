{
  "name": "DefaultVisualGraph",
  "comment": "A default VisualGraph that implements basic setup for things like event processing.\n \n Notes:\n \n \tSelected Vertices and the Focused Vertex - \n \t\tthere can be multiple selected vertices, but only a single focused vertex.  \n      #getSelectedVertices() will return both \n      the selected vertices or\tthe focused vertex if there are no vertices selected.\n  \n  Clicking a single vertex will focus it.  Control-clicking multiple vertices will\n  \t\tcause them all to be selected, with no focused vertex.\n \t\n  Rendering Edges - edges are rendered with or without articulations if \n         they have them.  This is built-in to the default graphing edge renderer.  \n         Some layouts require custom edge rendering and will provide their own \n         renderer as needed.\n  \n ",
  "javadoc": "A default {@link VisualGraph} that implements basic setup for things like event processing.\n \n \u003cP\u003eNotes:\n \u003cUL\u003e\n \t\u003cLI\u003e\u003cU\u003eSelected Vertices and the Focused Vertex\u003c/U\u003e - \n \t\tthere can be multiple selected vertices, but only a single focused vertex.  \n      \u003cB\u003e{@link #getSelectedVertices()} will return both \n      the selected vertices or\tthe focused vertex if there are no vertices selected.\u003c/B\u003e\n  \u003c/LI\u003e\n  \u003cLI\u003eClicking a single vertex will focus it.  Control-clicking multiple vertices will\n  \t\tcause them all to be selected, with no focused vertex.\n \t\u003c/LI\u003e\n  \u003cLI\u003e\u003cU\u003eRendering Edges\u003c/U\u003e - edges are rendered with or without articulations if \n         they have them.  This is built-in to the default graphing edge renderer.  \n         Some layouts require custom edge rendering and will provide their own \n         renderer as needed.\n  \u003c/LI\u003e\n \u003c/UL\u003e\n@param \u003cV\u003e the vertex type\n@param \u003cE\u003e the edge type",
  "static": false,
  "implements": [],
  "extends": "ghidra.graph.graphs.JungDirectedVisualGraph",
  "fields": [
    {
      "name": "focusedVertex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "V",
      "type_short": "V",
      "constant_value": null
    },
    {
      "name": "selectedVertices",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cV\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "changeListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.WeakSet\u003cghidra.graph.event.VisualGraphChangeListener\u003cV,E\u003e\u003e",
      "type_short": "WeakSet",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.graphs.DefaultVisualGraph\u003cV,E\u003e",
        "type_short": "DefaultVisualGraph",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSelectedVertices",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "selectedVertices",
          "type_long": "java.util.Set\u003cV\u003e",
          "type_short": "Set",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVerticesSelected",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vertices",
          "type_long": "java.util.Set\u003cV\u003e",
          "type_short": "Set",
          "comment": ""
        },
        {
          "name": "selected",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVertexFocused",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vertex",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "focused",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFocusedVertex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearFocusedVertex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearSelectedVertices",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSelectedVertices",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cV\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "vertexLocationChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "point",
          "type_long": "java.awt.Point",
          "type_short": "Point",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "ghidra.graph.viewer.layout.LayoutListener.ChangeType",
          "type_short": "ChangeType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllEdges",
      "comment": "A convenience method to combine retrieval of in and out edges for the given vertex",
      "javadoc": "A convenience method to combine retrieval of in and out edges for the given vertex\n@param v the vertex\n@return the edges",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": "the vertex"
        }
      ],
      "return": {
        "type_long": "java.lang.Iterable\u003cE\u003e",
        "type_short": "Iterable",
        "comment": "the edges"
      },
      "throws": []
    },
    {
      "name": "getEdges",
      "comment": "Returns all edges shared between the two given vertices",
      "javadoc": "Returns all edges shared between the two given vertices\n@param start the start vertex\n@param end the end vertex\n@return the edges",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "V",
          "type_short": "V",
          "comment": "the start vertex"
        },
        {
          "name": "end",
          "type_long": "V",
          "type_short": "V",
          "comment": "the end vertex"
        }
      ],
      "return": {
        "type_long": "java.lang.Iterable\u003cE\u003e",
        "type_short": "Iterable",
        "comment": "the edges"
      },
      "throws": []
    },
    {
      "name": "addVertex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addEdge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "edge",
          "type_long": "E",
          "type_short": "E",
          "comment": ""
        },
        {
          "name": "endpoints",
          "type_long": "edu.uci.ics.jung.graph.util.Pair\u003c? extends V\u003e",
          "type_short": "Pair",
          "comment": ""
        },
        {
          "name": "edgeType",
          "type_long": "edu.uci.ics.jung.graph.util.EdgeType",
          "type_short": "EdgeType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeVertex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeVertices",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "toRemove",
          "type_long": "java.lang.Iterable\u003cV\u003e",
          "type_short": "Iterable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeEdge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "edge",
          "type_long": "E",
          "type_short": "E",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "verticesAdded",
      "comment": "Called after one or more vertices have been added.  The callback will happen after\n all additions have taken place.  This is an extension point for subclasses.",
      "javadoc": "Called after one or more vertices have been added.  The callback will happen after\n all additions have taken place.  This is an extension point for subclasses.\n@param added the added vertices",
      "static": false,
      "params": [
        {
          "name": "added",
          "type_long": "java.util.Collection\u003cV\u003e",
          "type_short": "Collection",
          "comment": "the added vertices"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "verticesRemoved",
      "comment": "Called after one or more vertices have been removed.  The callback will happen after\n all removals have taken place.  This is an extension point for subclasses.",
      "javadoc": "Called after one or more vertices have been removed.  The callback will happen after\n all removals have taken place.  This is an extension point for subclasses.\n@param removed the removed vertices",
      "static": false,
      "params": [
        {
          "name": "removed",
          "type_long": "java.util.Collection\u003cV\u003e",
          "type_short": "Collection",
          "comment": "the removed vertices"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fireVerticesRemoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "removed",
          "type_long": "java.util.Collection\u003cV\u003e",
          "type_short": "Collection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fireVerticesAdded",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "added",
          "type_long": "java.util.Collection\u003cV\u003e",
          "type_short": "Collection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fireEdgesRemoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "removed",
          "type_long": "java.lang.Iterable\u003cE\u003e",
          "type_short": "Iterable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fireEdgesAdded",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "added",
          "type_long": "java.lang.Iterable\u003cE\u003e",
          "type_short": "Iterable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addGraphChangeListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.graph.event.VisualGraphChangeListener\u003cV,E\u003e",
          "type_short": "VisualGraphChangeListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeGraphChangeListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.graph.event.VisualGraphChangeListener\u003cV,E\u003e",
          "type_short": "VisualGraphChangeListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
