{
  "name": "GImplicitDirectedGraph",
  "comment": "A directed graph that need not be constructed explicitly\n \n Instead, the graph is constructed (and usually cached) as it is explored. For instance, if\n a path searching algorithm is being applied, incident edges and neighboring nodes need not\n be computed if they\u0027re never visited. This allows conceptually large (even infinite) graphs to\n be represented. A graph algorithm can be applied so long as it supports this interface, and\n does not attempt to exhaust an infinite graph.",
  "javadoc": "A directed graph that need not be constructed explicitly\n \n \u003cP\u003eInstead, the graph is constructed (and usually cached) as it is explored. For instance, if\n a path searching algorithm is being applied, incident edges and neighboring nodes need not\n be computed if they\u0027re never visited. This allows conceptually large (even infinite) graphs to\n be represented. A graph algorithm can be applied so long as it supports this interface, and\n does not attempt to exhaust an infinite graph.\n@param \u003cV\u003e the type of vertices\n@param \u003cE\u003e the type of edges",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getInEdges",
      "comment": "Compute the incident edges that end at the given vertex\n \n (Optional operation)\n \n NOTE: This method ought to return cached results if available\n NOTE: As part of computing in-edges, this method will also provide predecessors",
      "javadoc": "Compute the incident edges that end at the given vertex\n \n (Optional operation)\n \n NOTE: This method ought to return cached results if available\n NOTE: As part of computing in-edges, this method will also provide predecessors\n@param v the destination vertex\n@return the in-edges to the given vertex",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": "the destination vertex"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cE\u003e",
        "type_short": "Collection",
        "comment": "the in-edges to the given vertex"
      },
      "throws": []
    },
    {
      "name": "getOutEdges",
      "comment": "Compute the incident edges that start at the given vertex\n \n NOTE: This method ought to return cached results if available\n NOTE: As part of computing out-edges, this method will also provide successors",
      "javadoc": "Compute the incident edges that start at the given vertex\n \n NOTE: This method ought to return cached results if available\n NOTE: As part of computing out-edges, this method will also provide successors\n@param v the source vertex\n@return the out-edges from the given vertex",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": "the source vertex"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cE\u003e",
        "type_short": "Collection",
        "comment": "the out-edges from the given vertex"
      },
      "throws": []
    },
    {
      "name": "getPredecessors",
      "comment": "Compute a vertex\u0027s predecessors\n \n The default implementation computes this from the in-edges\n \n NOTE: If a non-default implementation is provided, it ought to return cached results if\n available",
      "javadoc": "Compute a vertex\u0027s predecessors\n \n The default implementation computes this from the in-edges\n \n NOTE: If a non-default implementation is provided, it ought to return cached results if\n available\n@param v the destination vertex\n@return the predecessors",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": "the destination vertex"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cV\u003e",
        "type_short": "Collection",
        "comment": "the predecessors"
      },
      "throws": []
    },
    {
      "name": "getSuccessors",
      "comment": "Compute a vertex\u0027s successors\n \n The default implementation compute this from the out-edges\n \n NOTE: If a non-default implementation is provided, it ought to return cached results if\n available",
      "javadoc": "Compute a vertex\u0027s successors\n \n The default implementation compute this from the out-edges\n \n NOTE: If a non-default implementation is provided, it ought to return cached results if\n available\n@param v the source vertex\n@return the successors",
      "static": false,
      "params": [
        {
          "name": "v",
          "type_long": "V",
          "type_short": "V",
          "comment": "the source vertex"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cV\u003e",
        "type_short": "Collection",
        "comment": "the successors"
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "Copy some portion of the implicit graph to an explicit graph\n \n Usually, this returns the cached (explored) portion of the graph",
      "javadoc": "Copy some portion of the implicit graph to an explicit graph\n \n Usually, this returns the cached (explored) portion of the graph\n@return a \"copy\" of this implicit graph",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.graph.GDirectedGraph\u003cV,E\u003e",
        "type_short": "GDirectedGraph",
        "comment": "a \"copy\" of this implicit graph"
      },
      "throws": []
    }
  ]
}
