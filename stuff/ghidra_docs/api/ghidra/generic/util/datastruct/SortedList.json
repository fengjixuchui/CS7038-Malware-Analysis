{
  "name": "SortedList",
  "comment": "An interface for sorted lists\n\n \n This might be better described as a NavigableMultiset; however, I wish for the elements to be\n retrievable by index, though insertion and mutation is not permitted by index. This implies that\n though unordered, the underlying implementation has sorted the elements in some way and wishes to\n expose that ordering to its clients.",
  "javadoc": "An interface for sorted lists\n\n \u003cp\u003e\n This might be better described as a NavigableMultiset; however, I wish for the elements to be\n retrievable by index, though insertion and mutation is not permitted by index. This implies that\n though unordered, the underlying implementation has sorted the elements in some way and wishes to\n expose that ordering to its clients.\n@param \u003cE\u003e the type of elements in this list",
  "static": false,
  "implements": [
    "java.util.List"
  ],
  "fields": [],
  "methods": [
    {
      "name": "lowerIndex",
      "comment": "Returns the greatest index in this list whose element is strictly less than the specified\n element",
      "javadoc": "Returns the greatest index in this list whose element is strictly less than the specified\n element\n@param element the element to search for\n@return the index of the found element, or -1",
      "static": false,
      "params": [
        {
          "name": "element",
          "type_long": "E",
          "type_short": "E",
          "comment": "the element to search for"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index of the found element, or -1"
      },
      "throws": []
    },
    {
      "name": "floorIndex",
      "comment": "Returns the greatest index in this list whose element is less than or equal to the specified\n element\n \n \n If multiples of the specified element exist, this returns the least index of that element.",
      "javadoc": "Returns the greatest index in this list whose element is less than or equal to the specified\n element\n \n \u003cp\u003e\n If multiples of the specified element exist, this returns the least index of that element.\n@param element the element to search for\n@return the index of the found element, or -1",
      "static": false,
      "params": [
        {
          "name": "element",
          "type_long": "E",
          "type_short": "E",
          "comment": "the element to search for"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index of the found element, or -1"
      },
      "throws": []
    },
    {
      "name": "ceilingIndex",
      "comment": "Returns the least index in this list whose element is greater than or equal to the specified\n element\n \n \n If multiples of the specified element exist, this returns the greatest index of that element.",
      "javadoc": "Returns the least index in this list whose element is greater than or equal to the specified\n element\n \n \u003cp\u003e\n If multiples of the specified element exist, this returns the greatest index of that element.\n@param element the element to search for\n@return the index of the found element, or -1",
      "static": false,
      "params": [
        {
          "name": "element",
          "type_long": "E",
          "type_short": "E",
          "comment": "the element to search for"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index of the found element, or -1"
      },
      "throws": []
    },
    {
      "name": "higherIndex",
      "comment": "Returns the least index in this list whose element is strictly greater the specified element",
      "javadoc": "Returns the least index in this list whose element is strictly greater the specified element\n@param element the element to search for\n@return the index of the found element, or -1",
      "static": false,
      "params": [
        {
          "name": "element",
          "type_long": "E",
          "type_short": "E",
          "comment": "the element to search for"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index of the found element, or -1"
      },
      "throws": []
    }
  ]
}
