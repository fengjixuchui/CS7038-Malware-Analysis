{
  "name": "TreeValueSortedMap",
  "comment": "A tree-based implementation of a value-sorted map\n\n The underlying implementation is currently an unbalanced binary tree whose nodes also comprise a\n doubly-linked list. Currently, it is not thread safe.\n\n Note this implementation isn\u0027t terribly smart, as it makes no efforts to balance the tree. It is\n also not thread safe.",
  "javadoc": "A tree-based implementation of a value-sorted map\n\n The underlying implementation is currently an unbalanced binary tree whose nodes also comprise a\n doubly-linked list. Currently, it is not thread safe.\n\n Note this implementation isn\u0027t terribly smart, as it makes no efforts to balance the tree. It is\n also not thread safe.\n@param \u003cK\u003e the type of the keys\n@param \u003cV\u003e the type of the values",
  "static": false,
  "implements": [
    "ghidra.generic.util.datastruct.ValueSortedMap"
  ],
  "extends": "java.util.AbstractMap",
  "fields": [
    {
      "name": "comparator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Comparator\u003cV\u003e",
      "type_short": "Comparator",
      "constant_value": null
    },
    {
      "name": "nodeMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cK,ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "entrySet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.ValueSortedTreeMapEntrySet",
      "type_short": "ValueSortedTreeMapEntrySet",
      "constant_value": null
    },
    {
      "name": "keySet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.ValueSortedTreeMapKeySet",
      "type_short": "ValueSortedTreeMapKeySet",
      "constant_value": null
    },
    {
      "name": "values",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.ValueSortedTreeMapValues",
      "type_short": "ValueSortedTreeMapValues",
      "constant_value": null
    },
    {
      "name": "root",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
      "type_short": "Node",
      "constant_value": null
    },
    {
      "name": "head",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
      "type_short": "Node",
      "constant_value": null
    },
    {
      "name": "tail",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
      "type_short": "Node",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createWithNaturalOrder",
      "comment": "Create a tree using the values\u0027 natural ordering",
      "javadoc": "Create a tree using the values\u0027 natural ordering",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e",
        "type_short": "TreeValueSortedMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createWithComparator",
      "comment": "Create a tree using a custom comparator to order the values",
      "javadoc": "Create a tree using a custom comparator to order the values\n@param comparator the comparator, providing a total ordering of the values",
      "static": true,
      "params": [
        {
          "name": "comparator",
          "type_long": "java.util.Comparator\u003cV\u003e",
          "type_short": "Comparator",
          "comment": "the comparator, providing a total ordering of the values"
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e",
        "type_short": "TreeValueSortedMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "comparator",
          "type_long": "java.util.Comparator\u003cV\u003e",
          "type_short": "Comparator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createEntrySet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.ValueSortedTreeMapEntrySet",
        "type_short": "ValueSortedTreeMapEntrySet",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createKeySet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.ValueSortedTreeMapKeySet",
        "type_short": "ValueSortedTreeMapKeySet",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createValues",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.ValueSortedTreeMapValues",
        "type_short": "ValueSortedTreeMapValues",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createNode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
        "type_short": "Node",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "searchValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "mode",
          "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap.SearchMode",
          "type_short": "SearchMode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
        "type_short": "Node",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "containsKey",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "containsValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "entrySet",
      "comment": "",
      "javadoc": "{@inheritDoc}\n@see ValueSortedTreeMapEntrySet",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.ValueSortedTreeMapEntrySet",
        "type_short": "ValueSortedTreeMapEntrySet",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lowerEntryByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Map.Entry\u003cK,V\u003e",
        "type_short": "Entry",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "floorEntryByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Map.Entry\u003cK,V\u003e",
        "type_short": "Entry",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "ceilingEntryByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Map.Entry\u003cK,V\u003e",
        "type_short": "Entry",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "higherEntryByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Map.Entry\u003cK,V\u003e",
        "type_short": "Entry",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOrdered",
      "comment": "Check if a node is correctly positioned relative to its immediate neighbors",
      "javadoc": "Check if a node is correctly positioned relative to its immediate neighbors\n@param n the node\n@return true if the node need not be moved",
      "static": false,
      "params": [
        {
          "name": "n",
          "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
          "type_short": "Node",
          "comment": "the node"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the node need not be moved"
      },
      "throws": []
    },
    {
      "name": "keySet",
      "comment": "",
      "javadoc": "{@inheritDoc}\n@see ValueSortedTreeMapKeySet",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.ValueSortedTreeMapKeySet",
        "type_short": "ValueSortedTreeMapKeySet",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "put",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putAll",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "m",
          "type_long": "java.util.Map\u003c? extends K,? extends V\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "update",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateNode",
      "comment": "Update a node\u0027s position\n \n This ought to be called any time the value of a node is modified, whether internall or\n externally. The only way we know of external changes is if the user calls\n #update(Object).",
      "javadoc": "Update a node\u0027s position\n \n This ought to be called any time the value of a node is modified, whether internall or\n externally. The only way we know of external changes is if the user calls\n {@link #update(Object)}.\n@param n the node whose position to check and update\n@return true if the node\u0027s position changed",
      "static": false,
      "params": [
        {
          "name": "n",
          "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
          "type_short": "Node",
          "comment": "the node whose position to check and update"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the node\u0027s position changed"
      },
      "throws": []
    },
    {
      "name": "values",
      "comment": "",
      "javadoc": "{@inheritDoc}\n@see ValueSortedTreeMapValues",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.ValueSortedTreeMapValues",
        "type_short": "ValueSortedTreeMapValues",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "subMapByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fromValue",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "fromInclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "toValue",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "toInclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.ValueSortedMap\u003cK,V\u003e",
        "type_short": "ValueSortedMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "headMapByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "toValue",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "inclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.ValueSortedMap\u003cK,V\u003e",
        "type_short": "ValueSortedMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "tailMapByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fromValue",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "inclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.ValueSortedMap\u003cK,V\u003e",
        "type_short": "ValueSortedMap",
        "comment": ""
      },
      "throws": []
    }
  ]
}
