{
  "name": "Node",
  "comment": "An entry in the map.\n \n Nodes are elements of a binary tree and a doubly-linked list.",
  "javadoc": "An entry in the map.\n \n Nodes are elements of a binary tree and a doubly-linked list.",
  "static": false,
  "implements": [
    "java.util.Map.Entry"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "key",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "K",
      "type_short": "K",
      "constant_value": null
    },
    {
      "name": "val",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "V",
      "type_short": "V",
      "constant_value": null
    },
    {
      "name": "parent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
      "type_short": "Node",
      "constant_value": null
    },
    {
      "name": "lChild",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
      "type_short": "Node",
      "constant_value": null
    },
    {
      "name": "rChild",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
      "type_short": "Node",
      "constant_value": null
    },
    {
      "name": "sizeLeft",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "next",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
      "type_short": "Node",
      "constant_value": null
    },
    {
      "name": "prev",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
      "type_short": "Node",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new node",
      "javadoc": "Construct a new node\n@param key the key\n@param val the data",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": "the key"
        },
        {
          "name": "val",
          "type_long": "V",
          "type_short": "V",
          "comment": "the data"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "computeIndex",
      "comment": "Compute this node\u0027s index.\n \n This uses the #sizeLeft field to compute the index in O(log n) on average.",
      "javadoc": "Compute this node\u0027s index.\n \n This uses the {@link #sizeLeft} field to compute the index in O(log n) on average.\n@return the index",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index"
      },
      "throws": []
    },
    {
      "name": "getByIndex",
      "comment": "Retrieve the node at a given index in this subtree\n \n This really only makes sense at the root",
      "javadoc": "Retrieve the node at a given index in this subtree\n \n This really only makes sense at the root\n@param index the index\n@return the node at the given index",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index"
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
        "type_short": "Node",
        "comment": "the node at the given index"
      },
      "throws": []
    },
    {
      "name": "getKey",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "K",
        "type_short": "K",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insert",
      "comment": "Insert a node into this subtree and the linked list",
      "javadoc": "Insert a node into this subtree and the linked list\n@param item the node to insert",
      "static": false,
      "params": [
        {
          "name": "item",
          "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
          "type_short": "Node",
          "comment": "the node to insert"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insertAfter",
      "comment": "Insert a node as a successor to this node in the linked list\n \n NOTE: Called only after the node is inserted into the tree",
      "javadoc": "Insert a node as a successor to this node in the linked list\n \n NOTE: Called only after the node is inserted into the tree",
      "static": false,
      "params": [
        {
          "name": "item",
          "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
          "type_short": "Node",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "insertBefore",
      "comment": "Insert a node as a predecessor to this node in the linked list\n \n NOTE: Called only after the node is inserted into the tree",
      "javadoc": "Insert a node as a predecessor to this node in the linked list\n \n NOTE: Called only after the node is inserted into the tree",
      "static": false,
      "params": [
        {
          "name": "item",
          "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
          "type_short": "Node",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Remove this node from the tree and linked list",
      "javadoc": "Remove this node from the tree and linked list",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "searchValue",
      "comment": "Find the given value in this subtree",
      "javadoc": "Find the given value in this subtree\n@param value the value to find\n@param mode when the value occurs multiple times, identifies which instance to find\n@return the node containing the given value, or null if not found",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": "the value to find"
        },
        {
          "name": "mode",
          "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap.SearchMode",
          "type_short": "SearchMode",
          "comment": "when the value occurs multiple times, identifies which instance to find"
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
        "type_short": "Node",
        "comment": "the node containing the given value, or null if not found"
      },
      "throws": []
    },
    {
      "name": "setValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    }
  ]
}
