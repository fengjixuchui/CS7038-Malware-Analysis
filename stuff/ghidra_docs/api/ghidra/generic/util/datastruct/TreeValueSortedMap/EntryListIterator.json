{
  "name": "EntryListIterator",
  "comment": "An iterator of the entries",
  "javadoc": "An iterator of the entries",
  "static": false,
  "implements": [
    "java.util.ListIterator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "atEnd",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "next",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
      "type_short": "Node",
      "constant_value": null
    },
    {
      "name": "cur",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
      "type_short": "Node",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a list iterator over the entries\n \n A start of null implies one past the end of the list, i.e., ",
      "javadoc": "Construct a list iterator over the entries\n \n A start of null implies one past the end of the list, i.e., {@code tail.next}\n@param start the starting node",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
          "type_short": "Node",
          "comment": "the starting node"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.util.Map.Entry\u003cK,V\u003e",
          "type_short": "Entry",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasNext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasPrevious",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "next",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
        "type_short": "Node",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "nextIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "previous",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.TreeValueSortedMap\u003cK,V\u003e.Node",
        "type_short": "Node",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "previousIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "set",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.util.Map.Entry\u003cK,V\u003e",
          "type_short": "Entry",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
