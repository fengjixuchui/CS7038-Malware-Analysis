{
  "name": "RestrictedValueSortedMap",
  "comment": "A view of the value-sorted map for implementing\n #subMapByValue(Object, boolean, Object, boolean), etc.",
  "javadoc": "A view of the value-sorted map for implementing\n {@link #subMapByValue(Object, boolean, Object, boolean)}, etc.\n@param \u003cK\u003e the type of keys\n@param \u003cV\u003e the type of values",
  "static": false,
  "implements": [
    "ghidra.generic.util.datastruct.ValueSortedMap"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "wrapped",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.generic.util.datastruct.ValueSortedMap\u003cK,V\u003e",
      "type_short": "ValueSortedMap",
      "constant_value": null
    },
    {
      "name": "comparator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Comparator\u003cV\u003e",
      "type_short": "Comparator",
      "constant_value": null
    },
    {
      "name": "hasFrom",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "fromValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "V",
      "type_short": "V",
      "constant_value": null
    },
    {
      "name": "fromInclusive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "hasTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "toValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "V",
      "type_short": "V",
      "constant_value": null
    },
    {
      "name": "toInclusive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a restricted view of a value-sorted map",
      "javadoc": "Construct a restricted view of a value-sorted map\n@param wrapped the value-sorted map to restrict\n@param comparator the value comparator\n@param hasFrom true if there exists a lower bound\n@param fromValue the lower bound, if present\n@param fromInclusive true to include the lower bound\n@param hasTo true if there exists an upper bound\n@param toValue the upper bound, if present\n@param toInclusive true to include the upper bound",
      "static": false,
      "params": [
        {
          "name": "wrapped",
          "type_long": "ghidra.generic.util.datastruct.ValueSortedMap\u003cK,V\u003e",
          "type_short": "ValueSortedMap",
          "comment": "the value-sorted map to restrict"
        },
        {
          "name": "comparator",
          "type_long": "java.util.Comparator\u003cV\u003e",
          "type_short": "Comparator",
          "comment": "the value comparator"
        },
        {
          "name": "hasFrom",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if there exists a lower bound"
        },
        {
          "name": "fromValue",
          "type_long": "V",
          "type_short": "V",
          "comment": "the lower bound, if present"
        },
        {
          "name": "fromInclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to include the lower bound"
        },
        {
          "name": "hasTo",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if there exists an upper bound"
        },
        {
          "name": "toValue",
          "type_long": "V",
          "type_short": "V",
          "comment": "the upper bound, if present"
        },
        {
          "name": "toInclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to include the upper bound"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLowestIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHighestIndexPlusOne",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "inBoundsOrNeg1",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restrictedSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restrictedIsEmpty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "inBounds",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "val",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "inBoundsOrNull",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "val",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "inBoundsOrNull",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ent",
          "type_long": "java.util.Map.Entry\u003cK,V\u003e",
          "type_short": "Entry",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Map.Entry\u003cK,V\u003e",
        "type_short": "Entry",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "containsKey",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "containsValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "put",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "V",
        "type_short": "V",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putAll",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "m",
          "type_long": "java.util.Map\u003c? extends K,? extends V\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "entrySet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.ValueSortedMap.ValueSortedMapEntryList\u003cK,V\u003e",
        "type_short": "ValueSortedMapEntryList",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lowerEntryByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Map.Entry\u003cK,V\u003e",
        "type_short": "Entry",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "floorEntryByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Map.Entry\u003cK,V\u003e",
        "type_short": "Entry",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "ceilingEntryByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Map.Entry\u003cK,V\u003e",
        "type_short": "Entry",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "higherEntryByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Map.Entry\u003cK,V\u003e",
        "type_short": "Entry",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "subMapByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fromValue",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "fromInclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "toValue",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "toInclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.ValueSortedMap\u003cK,V\u003e",
        "type_short": "ValueSortedMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "headMapByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "toValue",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "inclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.ValueSortedMap\u003cK,V\u003e",
        "type_short": "ValueSortedMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "tailMapByValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fromValue",
          "type_long": "V",
          "type_short": "V",
          "comment": ""
        },
        {
          "name": "inclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.ValueSortedMap\u003cK,V\u003e",
        "type_short": "ValueSortedMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "keySet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.ValueSortedMap.ValueSortedMapKeyList\u003cK\u003e",
        "type_short": "ValueSortedMapKeyList",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "update",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "values",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.SortedList\u003cV\u003e",
        "type_short": "SortedList",
        "comment": ""
      },
      "throws": []
    }
  ]
}
