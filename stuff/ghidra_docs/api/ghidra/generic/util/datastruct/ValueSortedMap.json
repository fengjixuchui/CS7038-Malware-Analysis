{
  "name": "ValueSortedMap",
  "comment": "A map that is sorted by value.\n \n \n This is an extension of Map where entries are sorted by value, rather than by key. Such a\n map may be useful as a priority queue where the cost of an entry may change over time. As such,\n the collections returned by #entrySet(), #keySet(), and #values() all\n extend Deque. The order of the entries will be updated on any call to Map#put(Object, Object), \n or a call to Collection#add(Object) on the entry set. Additionally, if the\n values are mutable objects, whose order may change, there is an #update(Object) method,\n which notifies the map that the given key may need to be repositioned. The associated collections\n also extend the List interface, providing fairly efficient implementations of\n List#get(int) and List#indexOf(Object). Sequential access is best performed via\n Collection#iterator(), since this will use a linked list.",
  "javadoc": "A map that is sorted by value.\n \n \u003cp\u003e\n This is an extension of {@link Map} where entries are sorted by value, rather than by key. Such a\n map may be useful as a priority queue where the cost of an entry may change over time. As such,\n the collections returned by {@link #entrySet()}, {@link #keySet()}, and {@link #values()} all\n extend {@link Deque}. The order of the entries will be updated on any call to {@link Map#put(Object, Object)}, \n or a call to {@link Collection#add(Object)} on the entry set. Additionally, if the\n values are mutable objects, whose order may change, there is an {@link #update(Object)} method,\n which notifies the map that the given key may need to be repositioned. The associated collections\n also extend the {@link List} interface, providing fairly efficient implementations of\n {@link List#get(int)} and {@link List#indexOf(Object)}. Sequential access is best performed via\n {@link Collection#iterator()}, since this will use a linked list.\n@param \u003cK\u003e the type of the keys\n@param \u003cV\u003e the type of the values",
  "static": false,
  "implements": [
    "java.util.Map"
  ],
  "fields": [],
  "methods": [
    {
      "name": "entrySet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.ValueSortedMap.ValueSortedMapEntryList\u003cK,V\u003e",
        "type_short": "ValueSortedMapEntryList",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lowerEntryByValue",
      "comment": "Returns a key-value mapping associated with the greatest value strictly less than the given\n value, or  if there is no such value.",
      "javadoc": "Returns a key-value mapping associated with the greatest value strictly less than the given\n value, or {@code null} if there is no such value.\n@param value the value\n@return the found entry, or {@code null}",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": "the value"
        }
      ],
      "return": {
        "type_long": "java.util.Map.Entry\u003cK,V\u003e",
        "type_short": "Entry",
        "comment": "the found entry, or "
      },
      "throws": []
    },
    {
      "name": "floorEntryByValue",
      "comment": "Returns a key-value mapping associated with the greatest value less than or equal to the\n given value, or  if there is no such value.",
      "javadoc": "Returns a key-value mapping associated with the greatest value less than or equal to the\n given value, or {@code null} if there is no such value.\n@param value the value\n@return the found entry, or {@code null}",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": "the value"
        }
      ],
      "return": {
        "type_long": "java.util.Map.Entry\u003cK,V\u003e",
        "type_short": "Entry",
        "comment": "the found entry, or "
      },
      "throws": []
    },
    {
      "name": "ceilingEntryByValue",
      "comment": "Returns a key-value mapping associated with the least value greater than or equal to the\n given value, or  if there is no such value.",
      "javadoc": "Returns a key-value mapping associated with the least value greater than or equal to the\n given value, or {@code null} if there is no such value.\n@param value the value\n@return the found entry, or {@code null}",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": "the value"
        }
      ],
      "return": {
        "type_long": "java.util.Map.Entry\u003cK,V\u003e",
        "type_short": "Entry",
        "comment": "the found entry, or "
      },
      "throws": []
    },
    {
      "name": "higherEntryByValue",
      "comment": "Returns a key-value mapping associated with the least value strictly greater than the given\n value, or  if there is no such value.",
      "javadoc": "Returns a key-value mapping associated with the least value strictly greater than the given\n value, or {@code null} if there is no such value.\n@param value the value\n@return the found entry, or {@code null}",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "V",
          "type_short": "V",
          "comment": "the value"
        }
      ],
      "return": {
        "type_long": "java.util.Map.Entry\u003cK,V\u003e",
        "type_short": "Entry",
        "comment": "the found entry, or "
      },
      "throws": []
    },
    {
      "name": "subMapByValue",
      "comment": "Returns a view of the portion of this map whose values range from  to\n . The returned map is an unmodifiable view.",
      "javadoc": "Returns a view of the portion of this map whose values range from {@code fromValue} to\n {@code toValue}. The returned map is an unmodifiable view.\n@param fromValue low endpoint of the values in the returned map\n@param fromInclusive {@code true} if the low endpoint is to be included in the returned view\n@param toValue high endpoint of the values in the returned map\n@param toInclusive {@code true} if the high endpoint is to be included in the returned view\n@return the view",
      "static": false,
      "params": [
        {
          "name": "fromValue",
          "type_long": "V",
          "type_short": "V",
          "comment": "low endpoint of the values in the returned map"
        },
        {
          "name": "fromInclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": " if the low endpoint is to be included in the returned view"
        },
        {
          "name": "toValue",
          "type_long": "V",
          "type_short": "V",
          "comment": "high endpoint of the values in the returned map"
        },
        {
          "name": "toInclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": " if the high endpoint is to be included in the returned view"
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.ValueSortedMap\u003cK,V\u003e",
        "type_short": "ValueSortedMap",
        "comment": "the view"
      },
      "throws": []
    },
    {
      "name": "headMapByValue",
      "comment": "Returns a view of the portion of this map whose values are less than (or equal to, if\n  is true) . The returned map is an unmodifiable view.",
      "javadoc": "Returns a view of the portion of this map whose values are less than (or equal to, if\n {@code inclusive} is true) {@code toValue}. The returned map is an unmodifiable view.\n@param toValue high endpoint of the values in the returned map\n@param inclusive {@code true} if the high endpoint is to be included in the returned view\n@return the view",
      "static": false,
      "params": [
        {
          "name": "toValue",
          "type_long": "V",
          "type_short": "V",
          "comment": "high endpoint of the values in the returned map"
        },
        {
          "name": "inclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": " if the high endpoint is to be included in the returned view"
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.ValueSortedMap\u003cK,V\u003e",
        "type_short": "ValueSortedMap",
        "comment": "the view"
      },
      "throws": []
    },
    {
      "name": "tailMapByValue",
      "comment": "Returns a view of the portion of this map whose values are greater than (or equal to, if\n  is true) . The returned map is an unmodifiable view.",
      "javadoc": "Returns a view of the portion of this map whose values are greater than (or equal to, if\n {@code inclusive} is true) {@code toValue}. The returned map is an unmodifiable view.\n@param fromValue low endpoint of the values in the returned map\n@param inclusive {@code true} if the low endpoint is to be included in the returned view\n@return the view",
      "static": false,
      "params": [
        {
          "name": "fromValue",
          "type_long": "V",
          "type_short": "V",
          "comment": "low endpoint of the values in the returned map"
        },
        {
          "name": "inclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": " if the low endpoint is to be included in the returned view"
        }
      ],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.ValueSortedMap\u003cK,V\u003e",
        "type_short": "ValueSortedMap",
        "comment": "the view"
      },
      "throws": []
    },
    {
      "name": "keySet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.ValueSortedMap.ValueSortedMapKeyList\u003cK\u003e",
        "type_short": "ValueSortedMapKeyList",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "update",
      "comment": "Notify the map of an external change to the cost of a key\u0027s associated value\n \n \n This is meant to update the entry\u0027s position after a change in cost. The position may not\n necessarily change, however, if the cost did not change significantly.",
      "javadoc": "Notify the map of an external change to the cost of a key\u0027s associated value\n \n \u003cp\u003e\n This is meant to update the entry\u0027s position after a change in cost. The position may not\n necessarily change, however, if the cost did not change significantly.\n@param key the key whose associated value has changed in cost\n@return true if the entry\u0027s position changed",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "K",
          "type_short": "K",
          "comment": "the key whose associated value has changed in cost"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the entry\u0027s position changed"
      },
      "throws": []
    },
    {
      "name": "values",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.generic.util.datastruct.SortedList\u003cV\u003e",
        "type_short": "SortedList",
        "comment": ""
      },
      "throws": []
    }
  ]
}
