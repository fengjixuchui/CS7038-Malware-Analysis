{
  "name": "ImportBatchTask",
  "comment": "Performs a batch import using the data provided in the BatchInfo object which\n specifies what files and the import language that should be used.\n \n If there are just a few files to import, they will be opened using the ProgramManager,\n otherwise the programManager parameter will be unused.",
  "javadoc": "Performs a batch import using the data provided in the {@link BatchInfo} object which\n specifies what files and the import language that should be used.\n \u003cp\u003e\n If there are just a few files to import, they will be opened using the ProgramManager,\n otherwise the programManager parameter will be unused.",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.task.Task",
  "fields": [
    {
      "name": "MAX_PROGRAMS_TO_OPEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "50"
    },
    {
      "name": "batchInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.plugins.importer.batch.BatchInfo",
      "type_short": "BatchInfo",
      "constant_value": null
    },
    {
      "name": "destFolder",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.model.DomainFolder",
      "type_short": "DomainFolder",
      "constant_value": null
    },
    {
      "name": "stripLeadingPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "stripAllContainerPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "programManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.services.ProgramManager",
      "type_short": "ProgramManager",
      "constant_value": null
    },
    {
      "name": "totalObjsImported",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "totalAppsImported",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "totalEnabledApps",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Start a Batch Import session with an already populated BatchInfo\n instance.\n ",
      "javadoc": "Start a Batch Import session with an already populated {@link BatchInfo}\n instance.\n \u003cp\u003e\n@param batchInfo {@link BatchInfo} state object\n@param destFolder {@link DomainFolder} where to place imported files\n@param programManager {@link ProgramManager} to use when opening newly imported files, null ok\n@param stripLeading boolean true if each import source\u0027s leading path should be omitted\n when creating the destination project folder path.\n@param stripAllContainerPath boolean true if each imported file\u0027s parent container\n source path should be completely omitted when creating the destination project folder path.\n (the imported file\u0027s path within its container is still used)",
      "static": false,
      "params": [
        {
          "name": "batchInfo",
          "type_long": "ghidra.plugins.importer.batch.BatchInfo",
          "type_short": "BatchInfo",
          "comment": "BatchInfo state object"
        },
        {
          "name": "destFolder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "DomainFolder where to place imported files"
        },
        {
          "name": "programManager",
          "type_long": "ghidra.app.services.ProgramManager",
          "type_short": "ProgramManager",
          "comment": "ProgramManager to use when opening newly imported files, null ok"
        },
        {
          "name": "stripLeading",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean true if each import source\u0027s leading path should be omitted\n when creating the destination project folder path."
        },
        {
          "name": "stripAllContainerPath",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean true if each imported file\u0027s parent container\n source path should be completely omitted when creating the destination project folder path.\n (the imported file\u0027s path within its container is still used)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "run",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doBatchImport",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "doImportBatchGroup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "batchGroup",
          "type_long": "ghidra.plugins.importer.batch.BatchGroup",
          "type_short": "BatchGroup",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "doImportApp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "batchLoadConfig",
          "type_long": "ghidra.plugins.importer.batch.BatchGroup.BatchLoadConfig",
          "type_short": "BatchLoadConfig",
          "comment": ""
        },
        {
          "name": "selectedBatchGroupLoadSpec",
          "type_long": "ghidra.plugins.importer.batch.BatchGroupLoadSpec",
          "type_short": "BatchGroupLoadSpec",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "fixupProjectFilename",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "filename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "releaseAll",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "importedObjects",
          "type_long": "java.util.List\u003cghidra.framework.model.DomainObject\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processImportResults",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "importedObjects",
          "type_long": "java.util.List\u003cghidra.framework.model.DomainObject\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "appInfo",
          "type_long": "ghidra.plugins.importer.batch.BatchGroup.BatchLoadConfig",
          "type_short": "BatchLoadConfig",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "fsrlToPath",
      "comment": "Convert a imported file\u0027s FSRL into a target project path, using the import options\n #stripAllContainerPath and #stripLeadingPath.\n \n Not private so it can be accessed by unit tests.",
      "javadoc": "Convert a imported file\u0027s FSRL into a target project path, using the import options\n {@link #stripAllContainerPath} and {@link #stripLeadingPath}.\n \u003cp\u003e\n Not private so it can be accessed by unit tests.\n@param fsrl {@link FSRL} to convert to a path\n@param userSrc {@link FSRL} of the container file that is the parent of the FSRL being\n converted.\n@param stripLeadingPath boolean option that causes the path to the file the user\n picked to be truncated or left intact.\n@param stripInteriorContainerPath boolean option that causes the interior paths (ie.\n anything inside the user-added source directory or container file) to be stripped.\n@return String path (with \u0027/\u0027 separators) created according to the user\u0027s options\n {@link #stripAllContainerPath} and {@link #stripLeadingPath}.",
      "static": true,
      "params": [
        {
          "name": "fsrl",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "FSRL to convert to a path"
        },
        {
          "name": "userSrc",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "FSRL of the container file that is the parent of the FSRL being\n converted."
        },
        {
          "name": "stripLeadingPath",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean option that causes the path to the file the user\n picked to be truncated or left intact."
        },
        {
          "name": "stripInteriorContainerPath",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean option that causes the interior paths (ie.\n anything inside the user-added source directory or container file) to be stripped."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String path (with \u0027/\u0027 separators) created according to the user\u0027s options\n #stripAllContainerPath and #stripLeadingPath."
      },
      "throws": []
    },
    {
      "name": "getDestinationInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "batchLoadConfig",
          "type_long": "ghidra.plugins.importer.batch.BatchGroup.BatchLoadConfig",
          "type_short": "BatchLoadConfig",
          "comment": ""
        },
        {
          "name": "rootDestinationFolder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.stl.Pair\u003cghidra.framework.model.DomainFolder,java.lang.String\u003e",
        "type_short": "Pair",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOptionsFor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "batchLoadConfig",
          "type_long": "ghidra.plugins.importer.batch.BatchGroup.BatchLoadConfig",
          "type_short": "BatchLoadConfig",
          "comment": ""
        },
        {
          "name": "loadSpec",
          "type_long": "ghidra.app.util.opinion.LoadSpec",
          "type_short": "LoadSpec",
          "comment": ""
        },
        {
          "name": "byteProvider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    }
  ]
}
