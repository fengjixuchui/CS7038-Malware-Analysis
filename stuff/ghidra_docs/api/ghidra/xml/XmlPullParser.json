{
  "name": "XmlPullParser",
  "comment": "An interface describing the API for the XML pull parsing system. This is\n similar to XmlParser, except that it has slightly different methods and IS\n case sensitive, conforming to the XML spec.",
  "javadoc": "An interface describing the API for the XML pull parsing system. This is\n similar to XmlParser, except that it has slightly different methods and IS\n case sensitive, conforming to the XML spec.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getName",
      "comment": "Returns the name of this parser.",
      "javadoc": "Returns the name of this parser.\n@return the name of this parser",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of this parser"
      },
      "throws": []
    },
    {
      "name": "getProcessingInstruction",
      "comment": "Returns the value of the attribute of the processing instruction.\n For example, ?program_dtd version\u003d\"1\"?",
      "javadoc": "Returns the value of the attribute of the processing instruction.\n For example, \u003ccode\u003e\u0026lt;?program_dtd version\u003d\"1\"?\u0026gt;\u003c/code\u003e\n@param name the name of the processing instruction\n@param attribute the name of the attribute\n@return the value of the attribute of the processing instruction",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the processing instruction"
        },
        {
          "name": "attribute",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the attribute"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the value of the attribute of the processing instruction"
      },
      "throws": []
    },
    {
      "name": "getLineNumber",
      "comment": "Returns the current line number where the parser is (note that this may\n actually be ahead of where you think it is because of look-ahead and\n caching).",
      "javadoc": "Returns the current line number where the parser is (note that this may\n actually be ahead of where you think it is because of look-ahead and\n caching).\n@return the current line number",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the current line number"
      },
      "throws": []
    },
    {
      "name": "getColumnNumber",
      "comment": "Returns the current column number where the parser is (note that this may\n actually be ahead of where you think it is because of look-ahead and\n caching).",
      "javadoc": "Returns the current column number where the parser is (note that this may\n actually be ahead of where you think it is because of look-ahead and\n caching).\n@return the current column number",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the current column number"
      },
      "throws": []
    },
    {
      "name": "isPullingContent",
      "comment": "Returns whether the parser will return content elements as well as start\n and end elements (they\u0027re always accumulated and provided in the\n appropriate end element).",
      "javadoc": "Returns whether the parser will return content elements as well as start\n and end elements (they\u0027re always accumulated and provided in the\n appropriate end element).\n@return whether the parser will return content elements",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "whether the parser will return content elements"
      },
      "throws": []
    },
    {
      "name": "setPullingContent",
      "comment": "Set whether the parser will return content elements. Note that this\n method may throw an exception if the parser cannot comply with the\n setting (usually when setting to true).",
      "javadoc": "Set whether the parser will return content elements. Note that this\n method may throw an exception if the parser cannot comply with the\n setting (usually when setting to true).\n@param pullingContent whether the parser will return content elements",
      "static": false,
      "params": [
        {
          "name": "pullingContent",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "whether the parser will return content elements"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCurrentLevel",
      "comment": "The current element level, as if the XML document was a tree. The root\n element is at level 0. Each child is at a level one higher than its\n parent.\n \n Note that this is the same as peek().getLevel().",
      "javadoc": "The current element level, as if the XML document was a tree. The root\n element is at level 0. Each child is at a level one higher than its\n parent.\n \n Note that this is the same as peek().getLevel().\n@return the current element level",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the current element level"
      },
      "throws": []
    },
    {
      "name": "hasNext",
      "comment": "Returns whether there is a next element.",
      "javadoc": "Returns whether there is a next element.\n@return whether there is a next element",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "whether there is a next element"
      },
      "throws": []
    },
    {
      "name": "peek",
      "comment": "Returns the next element, without removing it from the queue (assuming\n there is such a next element). This is very useful for examining the next\n item to decide who should handle the subtree, and then delegating to a\n subordinate with the parser state intact.",
      "javadoc": "Returns the next element, without removing it from the queue (assuming\n there is such a next element). This is very useful for examining the next\n item to decide who should handle the subtree, and then delegating to a\n subordinate with the parser state intact.\n@return the next element, without removing it",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.xml.XmlElement",
        "type_short": "XmlElement",
        "comment": "the next element, without removing it"
      },
      "throws": []
    },
    {
      "name": "next",
      "comment": "Returns the next element, removing it from the queue (assuming there is\n such a next element). This method should be used RARELY. Typically, when\n you\u0027re reading XML, you almost always at least know that you\u0027re either\n starting or ending a subtree, so start() or end() should be used instead.\n The only time you really might need to use this is if you don\u0027t really\n know where you are and you need to pop elements off until you synchronize\n back into a sane state.",
      "javadoc": "Returns the next element, removing it from the queue (assuming there is\n such a next element). This method should be used RARELY. Typically, when\n you\u0027re reading XML, you almost always at least know that you\u0027re either\n starting or ending a subtree, so start() or end() should be used instead.\n The only time you really might need to use this is if you don\u0027t really\n know where you are and you need to pop elements off until you synchronize\n back into a sane state.\n@return the next element, removing it",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.xml.XmlElement",
        "type_short": "XmlElement",
        "comment": "the next element, removing it"
      },
      "throws": []
    },
    {
      "name": "start",
      "comment": "Returns the next element, which must be a start element, and must be one\n of the supplied names (if provided). This method is very useful for\n starting a subtree, and throws an XmlException if the next element does\n not conform to your specification.",
      "javadoc": "Returns the next element, which must be a start element, and must be one\n of the supplied names (if provided). This method is very useful for\n starting a subtree, and throws an XmlException if the next element does\n not conform to your specification.\n@param names optional vararg Strings which start element name must be one\n            of\n@return the next element (which is a start element)",
      "static": false,
      "params": [
        {
          "name": "names",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "optional vararg Strings which start element name must be one\n            of"
        }
      ],
      "return": {
        "type_long": "ghidra.xml.XmlElement",
        "type_short": "XmlElement",
        "comment": "the next element (which is a start element)"
      },
      "throws": []
    },
    {
      "name": "end",
      "comment": "Returns the next element, which must be an end element. The name doesn\u0027t\n matter. This method throws an XmlException if the next element is not an\n end element. Use this method when you really know you\u0027re matching the\n right end and want to avoid extra constraint checks.",
      "javadoc": "Returns the next element, which must be an end element. The name doesn\u0027t\n matter. This method throws an XmlException if the next element is not an\n end element. Use this method when you really know you\u0027re matching the\n right end and want to avoid extra constraint checks.\n@return the next element (which is an end element)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.xml.XmlElement",
        "type_short": "XmlElement",
        "comment": "the next element (which is an end element)"
      },
      "throws": []
    },
    {
      "name": "end",
      "comment": "Returns the next element, which must be an end element, and must match\n the supplied XmlElement\u0027s name (presumably the start element of the\n subtree). This method throws an XmlException if the next element is not\n an end element, or if the name doesn\u0027t match.",
      "javadoc": "Returns the next element, which must be an end element, and must match\n the supplied XmlElement\u0027s name (presumably the start element of the\n subtree). This method throws an XmlException if the next element is not\n an end element, or if the name doesn\u0027t match.\n@param element the presumed start element to match names\n@return the next element (which is an end element)",
      "static": false,
      "params": [
        {
          "name": "element",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": "the presumed start element to match names"
        }
      ],
      "return": {
        "type_long": "ghidra.xml.XmlElement",
        "type_short": "XmlElement",
        "comment": "the next element (which is an end element)"
      },
      "throws": []
    },
    {
      "name": "softStart",
      "comment": "Returns the next element, which must be a start element, and must be one\n of the supplied names (if provided). This method is very useful for\n starting a subtree, but differs from start(...) in that failures are\n soft. This means that if the next element isn\u0027t a start element, or\n doesn\u0027t match one of the optional provided names, null is returned\n (instead of raising an XmlException).",
      "javadoc": "Returns the next element, which must be a start element, and must be one\n of the supplied names (if provided). This method is very useful for\n starting a subtree, but differs from start(...) in that failures are\n soft. This means that if the next element isn\u0027t a start element, or\n doesn\u0027t match one of the optional provided names, null is returned\n (instead of raising an XmlException).\n@param names optional vararg Strings which start element name must be one\n            of\n@return the next element (which is a start element) or null",
      "static": false,
      "params": [
        {
          "name": "names",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "optional vararg Strings which start element name must be one\n            of"
        }
      ],
      "return": {
        "type_long": "ghidra.xml.XmlElement",
        "type_short": "XmlElement",
        "comment": "the next element (which is a start element) or null"
      },
      "throws": []
    },
    {
      "name": "discardSubTree",
      "comment": "Discards the current subtree. If the current element (peek()) is a\n content or end element, then just that element is discarded. If it\u0027s a\n start element, then the entire subtree starting with the start element is\n discarded (i.e. next() is called until the current element is now the\n element after the subtree\u0027s end element).",
      "javadoc": "Discards the current subtree. If the current element (peek()) is a\n content or end element, then just that element is discarded. If it\u0027s a\n start element, then the entire subtree starting with the start element is\n discarded (i.e. next() is called until the current element is now the\n element after the subtree\u0027s end element).\n@return the number of elements discarded",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of elements discarded"
      },
      "throws": []
    },
    {
      "name": "discardSubTree",
      "comment": "Discards the current subtree. The current element must be a start\n element, and must be named name, otherwise an XmlException is thrown.",
      "javadoc": "Discards the current subtree. The current element must be a start\n element, and must be named name, otherwise an XmlException is thrown.\n@param name what the current start element must be named\n@return the number of elements discarded",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "what the current start element must be named"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of elements discarded"
      },
      "throws": []
    },
    {
      "name": "discardSubTree",
      "comment": "Discards a subtree. The element provided is used as the \"start\" of the\n subtree (although it doesn\u0027t actually have to be a start element; only\n its name and level are used). The queue of elements is discarded such\n that the last element discarded is an end element, has the same name as\n the provided element, and is the same level as the provided element. If\n the provided element\u0027s level is higher than the current level, then\n nothing is discarded.",
      "javadoc": "Discards a subtree. The element provided is used as the \"start\" of the\n subtree (although it doesn\u0027t actually have to be a start element; only\n its name and level are used). The queue of elements is discarded such\n that the last element discarded is an end element, has the same name as\n the provided element, and is the same level as the provided element. If\n the provided element\u0027s level is higher than the current level, then\n nothing is discarded.\n@param element the element provided as the \"start\" element\n@return the number of elements discarded",
      "static": false,
      "params": [
        {
          "name": "element",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": "the element provided as the \"start\" element"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of elements discarded"
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "Disposes all resources of the parser. It\u0027s important that this is called\n when a client is finished with the parser, because this allows files to\n be closed, threads to be stopped, etc.",
      "javadoc": "Disposes all resources of the parser. It\u0027s important that this is called\n when a client is finished with the parser, because this allows files to\n be closed, threads to be stopped, etc.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
