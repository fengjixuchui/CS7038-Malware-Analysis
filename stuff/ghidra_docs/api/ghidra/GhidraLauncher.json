{
  "name": "GhidraLauncher",
  "comment": "Class used to prepare Ghidra for launching\n \n A #main(String[]) method is provided which redirects execution to a \n GhidraLaunchable class passed in as a command line argument",
  "javadoc": "Class used to prepare Ghidra for launching\n \u003cp\u003e\n A {@link #main(String[])} method is provided which redirects execution to a \n {@link GhidraLaunchable} class passed in as a command line argument",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "launch",
      "comment": "Launches the given GhidraLaunchable specified in the first command line argument",
      "javadoc": "Launches the given {@link GhidraLaunchable} specified in the first command line argument\n@param args The first argument is the name of the {@link GhidraLaunchable} to launch.\n   The remaining args get passed through to the class\u0027s {@link GhidraLaunchable#launch} \n   method.\n@throws Exception If there was a problem launching.  See the exception\u0027s message for more\n     details on what went wrong.",
      "static": true,
      "params": [
        {
          "name": "args",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "The first argument is the name of the GhidraLaunchable to launch.\n   The remaining args get passed through to the class\u0027s GhidraLaunchable#launch \n   method."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "If there was a problem launching.  See the exception\u0027s message for more\n     details on what went wrong."
        }
      ]
    },
    {
      "name": "main",
      "comment": "Launches the given GhidraLaunchable specified in the first command line argument",
      "javadoc": "Launches the given {@link GhidraLaunchable} specified in the first command line argument\n@param args The first argument is the name of the {@link GhidraLaunchable} to launch.\n   The remaining args get passed through to the class\u0027s {@link GhidraLaunchable#launch} \n   method.\n@throws Exception If there was a problem launching.  See the exception\u0027s message for more\n     details on what went wrong.\n@deprecated Use {@link Ghidra#main(String[])} instead",
      "static": true,
      "params": [
        {
          "name": "args",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "The first argument is the name of the GhidraLaunchable to launch.\n   The remaining args get passed through to the class\u0027s GhidraLaunchable#launch \n   method."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "If there was a problem launching.  See the exception\u0027s message for more\n     details on what went wrong."
        }
      ]
    },
    {
      "name": "initializeGhidraEnvironment",
      "comment": "Initializes the Ghidra environment by discovering its GhidraApplicationLayout\n and adding all relevant modules and libraries to the classpath\n \n NOTE: This method expects that the GhidraClassLoader is the active classloader",
      "javadoc": "Initializes the Ghidra environment by discovering its {@link GhidraApplicationLayout layout}\n and adding all relevant modules and libraries to the classpath\n \u003cp\u003e\n NOTE: This method expects that the {@link GhidraClassLoader} is the active classloader\n@return Ghidra\u0027s {@link GhidraApplicationLayout layout}\n@throws IOException if there was an issue getting the {@link GhidraApplicationLayout layout}\n@throws ClassNotFoundException if the {@link GhidraClassLoader} is not the active classloader",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.GhidraApplicationLayout",
        "type_short": "GhidraApplicationLayout",
        "comment": "Ghidra\u0027s GhidraApplicationLayout"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was an issue getting the GhidraApplicationLayout"
        },
        {
          "type_long": "java.lang.ClassNotFoundException",
          "type_short": "ClassNotFoundException",
          "comment": "if the GhidraClassLoader is not the active classloader"
        }
      ]
    },
    {
      "name": "buildClasspath",
      "comment": "Builds and returns a classpath from the given GhidraApplicationLayout\n \n NOTE: This method does NOT add the built classpath to a classloader...it just returns it",
      "javadoc": "Builds and returns a classpath from the given {@link GhidraApplicationLayout layout}\n \u003cp\u003e\n NOTE: This method does NOT add the built classpath to a classloader...it just returns it\n@param layout Ghidra\u0027s {@link GhidraApplicationLayout layout}\n@return A {@link List} of classpath entries\n@throws IOException if there was an IO-related issue with building the classpath",
      "static": true,
      "params": [
        {
          "name": "layout",
          "type_long": "ghidra.GhidraApplicationLayout",
          "type_short": "GhidraApplicationLayout",
          "comment": "Ghidra\u0027s GhidraApplicationLayout"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "A List of classpath entries"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was an IO-related issue with building the classpath"
        }
      ]
    },
    {
      "name": "addPatchPaths",
      "comment": "Add patch jars to the given path list.  This should be done first so they take precedence in \n the classpath.",
      "javadoc": "Add patch jars to the given path list.  This should be done first so they take precedence in \n the classpath.\n@param pathList The list of paths to add to\n@param patchDir The application installation directory; may be null",
      "static": true,
      "params": [
        {
          "name": "pathList",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": "The list of paths to add to"
        },
        {
          "name": "patchDir",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "The application installation directory; may be null"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addModuleBinPaths",
      "comment": "Add module bin directories to the given path list.",
      "javadoc": "Add module bin directories to the given path list.\n@param pathList The list of paths to add to.\n@param modules The modules to get the bin directories of.",
      "static": true,
      "params": [
        {
          "name": "pathList",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": "The list of paths to add to."
        },
        {
          "name": "modules",
          "type_long": "java.util.Map\u003cjava.lang.String,ghidra.framework.GModule\u003e",
          "type_short": "Map",
          "comment": "The modules to get the bin directories of."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addModuleJarPaths",
      "comment": "Add module lib jars to the given path list.",
      "javadoc": "Add module lib jars to the given path list.\n@param pathList The list of paths to add to.\n@param modules The modules to get the jars of.",
      "static": true,
      "params": [
        {
          "name": "pathList",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": "The list of paths to add to."
        },
        {
          "name": "modules",
          "type_long": "java.util.Map\u003cjava.lang.String,ghidra.framework.GModule\u003e",
          "type_short": "Map",
          "comment": "The modules to get the jars of."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addExternalJarPaths",
      "comment": "Add external runtime lib jars to the given path list.  The external jars are discovered by\n parsing the build/libraryDependencies.txt file that results from a prepDev.",
      "javadoc": "Add external runtime lib jars to the given path list.  The external jars are discovered by\n parsing the build/libraryDependencies.txt file that results from a prepDev.\n@param pathList The list of paths to add to.\n@param appRootDirs The application root directories to search.\n@throws IOException if a required file or directory was not found.",
      "static": true,
      "params": [
        {
          "name": "pathList",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": "The list of paths to add to."
        },
        {
          "name": "appRootDirs",
          "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
          "type_short": "Collection",
          "comment": "The application root directories to search."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a required file or directory was not found."
        }
      ]
    },
    {
      "name": "findJarsInDir",
      "comment": "Searches the given directory (non-recursively) for jars and returns their paths in a list.\n The paths will be sorted by jar file name.",
      "javadoc": "Searches the given directory (non-recursively) for jars and returns their paths in a list.\n The paths will be sorted by jar file name.\n@param dir The directory to search for jars in\n@return A list of discovered jar paths, sorted by jar file name",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "The directory to search for jars in"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "A list of discovered jar paths, sorted by jar file name"
      },
      "throws": []
    },
    {
      "name": "getOrderedModules",
      "comment": "Gets the modules ordered by \"class-loader priority\".  This ensures that core modules (things \n in Framework/Features/Processors, etc) come before user modules (Extensions).  It also\n guarantees a consistent module order from run to run.",
      "javadoc": "Gets the modules ordered by \"class-loader priority\".  This ensures that core modules (things \n in Framework/Features/Processors, etc) come before user modules (Extensions).  It also\n guarantees a consistent module order from run to run.\n@param layout The layout\n@return the modules mapped by name, ordered by priority",
      "static": true,
      "params": [
        {
          "name": "layout",
          "type_long": "utility.application.ApplicationLayout",
          "type_short": "ApplicationLayout",
          "comment": "The layout"
        }
      ],
      "return": {
        "type_long": "java.util.Map\u003cjava.lang.String,ghidra.framework.GModule\u003e",
        "type_short": "Map",
        "comment": "the modules mapped by name, ordered by priority"
      },
      "throws": []
    },
    {
      "name": "orderClasspath",
      "comment": "Updates the list of paths to make sure the order is correct for any class-loading dependencies.",
      "javadoc": "Updates the list of paths to make sure the order is correct for any class-loading dependencies.\n@param pathList The list of paths to order.\n@param modules The modules on the classpath.\n@return A new list with the elements of the original list re-ordered as needed.",
      "static": true,
      "params": [
        {
          "name": "pathList",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": "The list of paths to order."
        },
        {
          "name": "modules",
          "type_long": "java.util.Map\u003cjava.lang.String,ghidra.framework.GModule\u003e",
          "type_short": "Map",
          "comment": "The modules on the classpath."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "A new list with the elements of the original list re-ordered as needed."
      },
      "throws": []
    }
  ]
}
