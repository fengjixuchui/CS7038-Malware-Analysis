{
  "name": "GhidraPythonInterpreter",
  "comment": "A python interpreter meant for Ghidra\u0027s use.  Each interpreter you get will have its own\n variable space so they should not interfere with each other.\n \n There is no longer a way to reset an interpreter...it was too complicated to get right.\n Instead, you should #cleanup() your old interpreter and make a new one.",
  "javadoc": "A python interpreter meant for Ghidra\u0027s use.  Each interpreter you get will have its own\n variable space so they should not interfere with each other.\n \u003cp\u003e\n There is no longer a way to reset an interpreter...it was too complicated to get right.\n Instead, you should {@link #cleanup()} your old interpreter and make a new one.",
  "static": false,
  "implements": [],
  "extends": "org.python.util.InteractiveInterpreter",
  "fields": [
    {
      "name": "pythonInitialized",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "defaultPythonPath",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.List\u003corg.python.core.PyString\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "interruptTraceFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "org.python.core.TraceFunction",
      "type_short": "TraceFunction",
      "constant_value": null
    },
    {
      "name": "introspectModule",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "org.python.core.PyModule",
      "type_short": "PyModule",
      "constant_value": null
    },
    {
      "name": "builtinModule",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "org.python.core.PyModule",
      "type_short": "PyModule",
      "constant_value": null
    },
    {
      "name": "interrupt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "org.python.core.PyObject",
      "type_short": "PyObject",
      "constant_value": null
    },
    {
      "name": "scriptMethodsInjected",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "cleanedUp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "get",
      "comment": "Gets a new GhidraPythonInterpreter instance.",
      "javadoc": "Gets a new GhidraPythonInterpreter instance.\n@return A new GhidraPythonInterpreter. Could be null if it failed to be created.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.python.GhidraPythonInterpreter",
        "type_short": "GhidraPythonInterpreter",
        "comment": "A new GhidraPythonInterpreter. Could be null if it failed to be created."
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new Ghidra python interpreter object.",
      "javadoc": "Creates a new Ghidra python interpreter object.\n@param state The initial system state of the interpreter.",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "org.python.core.PySystemState",
          "type_short": "PySystemState",
          "comment": "The initial system state of the interpreter."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializePythonPath",
      "comment": "Initializes/resets the python path to include all known Ghidra script paths.",
      "javadoc": "Initializes/resets the python path to include all known Ghidra script paths.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "push",
      "comment": "Pushes (executes) a line of Python to the interpreter.",
      "javadoc": "Pushes (executes) a line of Python to the interpreter.\n@param line the line of Python to push to the interpreter\n@param script a PythonScript from which we load state (or null)\n@return true if more input is needed before execution can occur\n@throws PyException if an unhandled exception occurred while executing the line of python\n@throws IllegalStateException if this interpreter has been cleaned up.",
      "static": false,
      "params": [
        {
          "name": "line",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the line of Python to push to the interpreter"
        },
        {
          "name": "script",
          "type_long": "ghidra.python.PythonScript",
          "type_short": "PythonScript",
          "comment": "a PythonScript from which we load state (or null)"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if more input is needed before execution can occur"
      },
      "throws": [
        {
          "type_long": "org.python.core.PyException",
          "type_short": "PyException",
          "comment": "if an unhandled exception occurred while executing the line of python"
        },
        {
          "type_long": "java.lang.IllegalStateException",
          "type_short": "IllegalStateException",
          "comment": "if this interpreter has been cleaned up."
        }
      ]
    },
    {
      "name": "execFile",
      "comment": "Execute a python file using this interpreter.",
      "javadoc": "Execute a python file using this interpreter.\n@param file The python file to execute.\n@param script A PythonScript from which we load state (or null).\n@throws IllegalStateException if this interpreter has been cleaned up.",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "The python file to execute."
        },
        {
          "name": "script",
          "type_long": "ghidra.python.PythonScript",
          "type_short": "PythonScript",
          "comment": "A PythonScript from which we load state (or null)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalStateException",
          "type_short": "IllegalStateException",
          "comment": "if this interpreter has been cleaned up."
        }
      ]
    },
    {
      "name": "cleanup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "printErr",
      "comment": "Prints the given string to the interpreter\u0027s error stream with a newline\n appended.",
      "javadoc": "Prints the given string to the interpreter\u0027s error stream with a newline\n appended.\n@param str The string to print.",
      "static": false,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The string to print."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrimaryPrompt",
      "comment": "Gets the interpreter\u0027s primary prompt.",
      "javadoc": "Gets the interpreter\u0027s primary prompt.\n@return The interpreter\u0027s primary prompt.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The interpreter\u0027s primary prompt."
      },
      "throws": []
    },
    {
      "name": "getSecondaryPrompt",
      "comment": "Gets the interprester\u0027s secondary prompt.",
      "javadoc": "Gets the interprester\u0027s secondary prompt.\n@return The interpreter\u0027s secondary prompt.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The interpreter\u0027s secondary prompt."
      },
      "throws": []
    },
    {
      "name": "interrupt",
      "comment": "Handle a KeyboardInterrupt.\n \n This will attempt to interrupt the interpreter if it is running. There are\n two types of things this interrupt will work on:\n \n 1: A batched series of python commands (such as a loop).  This works by setting\n our interrupt flag that is checked by our InterruptTraceFunction when\n various trace events happen.\n \n 2: A sleeping or otherwise interruptible python command.  Since jython is all\n java under the hood, a sleep is really just a Thread#sleep, which we can\n kick with a Thread#interrupt().\n \n If another type of thing is taking a really long time, this interrupt will fail.",
      "javadoc": "Handle a KeyboardInterrupt.\n \u003cp\u003e\n This will attempt to interrupt the interpreter if it is running. There are\n two types of things this interrupt will work on:\n \u003cp\u003e\n 1: A batched series of python commands (such as a loop).  This works by setting\n our interrupt flag that is checked by our {@link InterruptTraceFunction} when\n various trace events happen.\n \u003cp\u003e\n 2: A sleeping or otherwise interruptible python command.  Since jython is all\n java under the hood, a sleep is really just a {@link Thread#sleep}, which we can\n kick with a {@link Thread#interrupt()}.\n \u003cp\u003e\n If another type of thing is taking a really long time, this interrupt will fail.\n@param pythonThread The Python Thread we need to interrupt.",
      "static": false,
      "params": [
        {
          "name": "pythonThread",
          "type_long": "java.lang.Thread",
          "type_short": "Thread",
          "comment": "The Python Thread we need to interrupt."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "injectScriptHierarchy",
      "comment": "Injects all of the accessible fields and methods found in the PythonScript class hierarchy into\n the given interpreter\u0027s Python address space.",
      "javadoc": "Injects all of the accessible fields and methods found in the PythonScript class hierarchy into\n the given interpreter\u0027s Python address space.\n@param script The script whose class hierarchy is to be used for injection.",
      "static": false,
      "params": [
        {
          "name": "script",
          "type_long": "ghidra.python.PythonScript",
          "type_short": "PythonScript",
          "comment": "The script whose class hierarchy is to be used for injection."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVariable",
      "comment": "Safely sets a variable in the interpreter\u0027s namespace. This first checks to\n make sure that we are not overriding a builtin Python symbol.",
      "javadoc": "Safely sets a variable in the interpreter\u0027s namespace. This first checks to\n make sure that we are not overriding a builtin Python symbol.\n@param varName The name of variable.\n@param obj The value of the variable.\n@return True if the variable was set; false if it already existed and wasn\u0027t set.",
      "static": false,
      "params": [
        {
          "name": "varName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of variable."
        },
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The value of the variable."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if the variable was set; false if it already existed and wasn\u0027t set."
      },
      "throws": []
    },
    {
      "name": "setMethod",
      "comment": "Sets a bound (callback/function pointer) method as a local variable in the interpreter.",
      "javadoc": "Sets a bound (callback/function pointer) method as a local variable in the interpreter.\n@param obj A Java object that contains the method to bind.\n@param method The method from the object to bind.\n@return True if the method was set; false if it already existed and wasn\u0027t set.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "A Java object that contains the method to bind."
        },
        {
          "name": "method",
          "type_long": "java.lang.reflect.Method",
          "type_short": "Method",
          "comment": "The method from the object to bind."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if the method was set; false if it already existed and wasn\u0027t set."
      },
      "throws": []
    },
    {
      "name": "getCommandCompletions",
      "comment": "Returns the possible command completions for a command.",
      "javadoc": "Returns the possible command completions for a command.\n@param cmd The command line.\n@param includeBuiltins True if we should include python built-ins; otherwise, false.\n@return A list of possible command completions.  Could be empty if there aren\u0027t any.\n@see PythonPlugin#getCompletions",
      "static": false,
      "params": [
        {
          "name": "cmd",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The command line."
        },
        {
          "name": "includeBuiltins",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if we should include python built-ins; otherwise, false."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.plugin.core.console.CodeCompletion\u003e",
        "type_short": "List",
        "comment": "A list of possible command completions.  Could be empty if there aren\u0027t any."
      },
      "throws": []
    },
    {
      "name": "getMethodCommandCompletions",
      "comment": "Returns method documentation for the current command.",
      "javadoc": "Returns method documentation for the current command.\n@param cmd the current command\n@return method documentation for the current command",
      "static": false,
      "params": [
        {
          "name": "cmd",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the current command"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.plugin.core.console.CodeCompletion\u003e",
        "type_short": "List",
        "comment": "method documentation for the current command"
      },
      "throws": []
    },
    {
      "name": "getPropertyCommandCompletions",
      "comment": "Returns a Map of property-string_substitution pairs.",
      "javadoc": "Returns a Map of property-\u0026gt;string_substitution pairs.\n@param cmd current command\n@param includeBuiltins True if we should include python built-ins; otherwise, false.\n@return A list of possible command completions.  Could be empty if there aren\u0027t any.",
      "static": false,
      "params": [
        {
          "name": "cmd",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "current command"
        },
        {
          "name": "includeBuiltins",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if we should include python built-ins; otherwise, false."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.plugin.core.console.CodeCompletion\u003e",
        "type_short": "List",
        "comment": "A list of possible command completions.  Could be empty if there aren\u0027t any."
      },
      "throws": []
    }
  ]
}
