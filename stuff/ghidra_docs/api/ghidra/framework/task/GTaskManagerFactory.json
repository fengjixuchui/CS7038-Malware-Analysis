{
  "name": "GTaskManagerFactory",
  "comment": "Factory class managing a single GTaskManager for an UndoableDomainObject.",
  "javadoc": "Factory class managing a single GTaskManager for an UndoableDomainObject.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "map",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Map\u003cghidra.framework.model.UndoableDomainObject,ghidra.framework.task.GTaskManager\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTaskManager",
      "comment": "Returns the one GTaskManager for the domainObject. A new GTaskManager will be created if\n one does not already exist for the domainObject.",
      "javadoc": "Returns the one GTaskManager for the domainObject. A new GTaskManager will be created if\n one does not already exist for the domainObject.\n@param domainObject the domainObject for which to get a GTaskManager.\n@return the GTaskManager for the given domainObject.",
      "static": true,
      "params": [
        {
          "name": "domainObject",
          "type_long": "ghidra.framework.model.UndoableDomainObject",
          "type_short": "UndoableDomainObject",
          "comment": "the domainObject for which to get a GTaskManager."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.task.GTaskManager",
        "type_short": "GTaskManager",
        "comment": "the GTaskManager for the given domainObject."
      },
      "throws": []
    },
    {
      "name": "domainObjectClosed",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "domainObject",
          "type_long": "ghidra.framework.model.UndoableDomainObject",
          "type_short": "UndoableDomainObject",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
