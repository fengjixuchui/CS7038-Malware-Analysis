{
  "name": "Options",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "DELIMITER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "char",
      "type_short": "char",
      "constant_value": "."
    },
    {
      "name": "DELIMITER_STRING",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "ILLEGAL_DELIMITER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getName",
      "comment": "Get the name of this options object.",
      "javadoc": "Get the name of this options object.\n@return String",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String"
      },
      "throws": []
    },
    {
      "name": "getID",
      "comment": "Returns a unique id for option in this options with the given name.  This will be the full\n path name to the root options object.",
      "javadoc": "Returns a unique id for option in this options with the given name.  This will be the full\n path name to the root options object.\n@param optionName the name of the option for which to get an ID;\n@return the unique ID for the given option.",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the option for which to get an ID;"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the unique ID for the given option."
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "Returns the OptionType of the given option.",
      "javadoc": "Returns the OptionType of the given option.\n@param optionName the name of the option for which to get the type.\n@return the OptionType of option with the given name.",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the option for which to get the type."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.options.OptionType",
        "type_short": "OptionType",
        "comment": "the OptionType of option with the given name."
      },
      "throws": []
    },
    {
      "name": "getPropertyEditor",
      "comment": "Get the property editor for the option with the given name. Note: This method must be called\n from the swing thread.",
      "javadoc": "Get the property editor for the option with the given name. Note: This method must be called\n from the swing thread.\n@param optionName the option name\n@return either the PropertyEditor that was registered for this option or a default editor\n for the property type if one can be found; otherwise null.\n@throws IllegalStateException if not called from the swing thread.",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the option name"
        }
      ],
      "return": {
        "type_long": "java.beans.PropertyEditor",
        "type_short": "PropertyEditor",
        "comment": "either the PropertyEditor that was registered for this option or a default editor\n for the property type if one can be found; otherwise null."
      },
      "throws": []
    },
    {
      "name": "getRegisteredPropertyEditor",
      "comment": "Get the property editor that was registered for the specific option with the given name.  Unlike\n the getPropertyEditor() method, this method does not have to be called from the swing thread",
      "javadoc": "Get the property editor that was registered for the specific option with the given name.  Unlike\n the getPropertyEditor() method, this method does not have to be called from the swing thread\n@param optionName the option name\n@return the PropertyEditor that was registered for this option.",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the option name"
        }
      ],
      "return": {
        "type_long": "java.beans.PropertyEditor",
        "type_short": "PropertyEditor",
        "comment": "the PropertyEditor that was registered for this option."
      },
      "throws": []
    },
    {
      "name": "getChildOptions",
      "comment": "Returns a list of Options objects that are nested one level down from this Options object.",
      "javadoc": "Returns a list of Options objects that are nested one level down from this Options object.\n@return a list of Options objects that are nested one level down from this Options object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.framework.options.Options\u003e",
        "type_short": "List",
        "comment": "a list of Options objects that are nested one level down from this Options object."
      },
      "throws": []
    },
    {
      "name": "getLeafOptionNames",
      "comment": "Returns a list of option names that immediately fall under this options.  For example, if this options\n object had the following options named (\"a\", \"b\", \"c.d\"), only \"a\" and \"b\" would be returned.  The\n \"c.d\" leaf option name could be returned by getOptions(\"c\").getLeafOptionNames()",
      "javadoc": "Returns a list of option names that immediately fall under this options.  For example, if this options\n object had the following options named (\"a\", \"b\", \"c.d\"), only \"a\" and \"b\" would be returned.  The\n \"c.d\" leaf option name could be returned by getOptions(\"c\").getLeafOptionNames()\n@return the list of the names of the options that are immediate children of this options object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "the list of the names of the options that are immediate children of this options object."
      },
      "throws": []
    },
    {
      "name": "setOptionsHelpLocation",
      "comment": "Set the location for where help can be found for this entire options object.",
      "javadoc": "Set the location for where help can be found for this entire options object.\n@param helpLocation location for help on the option",
      "static": false,
      "params": [
        {
          "name": "helpLocation",
          "type_long": "ghidra.util.HelpLocation",
          "type_short": "HelpLocation",
          "comment": "location for help on the option"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOptionsHelpLocation",
      "comment": "Returns the HelpLocation for this entire Options object.",
      "javadoc": "Returns the HelpLocation for this entire Options object.\n@return the HelpLocation for this entire Options object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.HelpLocation",
        "type_short": "HelpLocation",
        "comment": "the HelpLocation for this entire Options object."
      },
      "throws": []
    },
    {
      "name": "getHelpLocation",
      "comment": "Get the location for where help can be found for the option with\n the given name.",
      "javadoc": "Get the location for where help can be found for the option with\n the given name.\n@param optionName name of the option\n@return null if the help location was not set on the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        }
      ],
      "return": {
        "type_long": "ghidra.util.HelpLocation",
        "type_short": "HelpLocation",
        "comment": "null if the help location was not set on the option"
      },
      "throws": []
    },
    {
      "name": "registerOption",
      "comment": "Registers an option with a description, help location, and a default value without specifying\n the option type.  This form requires that the default value not be null so that the option\n type can be inferred from the default value.",
      "javadoc": "Registers an option with a description, help location, and a default value without specifying\n the option type.  This form requires that the default value not be null so that the option\n type can be inferred from the default value.\n@param optionName the name of the option being registered.\n@param defaultValue the defaultValue for the option. The default value must not be\n null so that the OptionType can be determined.  If the default value should be null, use\n {@link #registerOption(String, OptionType, Object, HelpLocation, String)}\n@param help the HelpLocation for this option.\n@param description a description of the option.\n@throws IllegalArgumentException if the defaultValue is null",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the option being registered."
        },
        {
          "name": "defaultValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the defaultValue for the option. The default value must not be\n null so that the OptionType can be determined.  If the default value should be null, use\n #registerOption(String, OptionType, Object, HelpLocation, String)"
        },
        {
          "name": "help",
          "type_long": "ghidra.util.HelpLocation",
          "type_short": "HelpLocation",
          "comment": "the HelpLocation for this option."
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a description of the option."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerOption",
      "comment": "Registers an option with a description, help location, and a optional default value.  With an optional\n default value, an OptionType must be passed as it is otherwise derived from the default value.",
      "javadoc": "Registers an option with a description, help location, and a optional default value.  With an optional\n default value, an OptionType must be passed as it is otherwise derived from the default value.\n@param optionName the name of the option being registered.\n@param type the OptionType for this options.\n@param defaultValue the defaultValue for the option. In this version of the method, the default\n value may be null.\n@param help the HelpLocation for this option.\n@param description a description of the option.",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the option being registered."
        },
        {
          "name": "type",
          "type_long": "ghidra.framework.options.OptionType",
          "type_short": "OptionType",
          "comment": "the OptionType for this options."
        },
        {
          "name": "defaultValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the defaultValue for the option. In this version of the method, the default\n value may be null."
        },
        {
          "name": "help",
          "type_long": "ghidra.util.HelpLocation",
          "type_short": "HelpLocation",
          "comment": "the HelpLocation for this option."
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a description of the option."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerOption",
      "comment": "Registers an option with a description, help location, and a optional default value.  With an optional\n default value, an OptionType must be passed as it is otherwise derived from the default value.",
      "javadoc": "Registers an option with a description, help location, and a optional default value.  With an optional\n default value, an OptionType must be passed as it is otherwise derived from the default value.\n@param optionName the name of the option being registered.\n@param type the OptionType for this options.\n@param defaultValue the defaultValue for the option. In this version of the method, the default\n value may be null.\n@param help the HelpLocation for this option.\n@param description a description of the option.\n@param editor an optional custom editor for this property. Note if the option is a custom option,\n then the property editor can\u0027t be null;\n@throws IllegalStateException if the options is a custom option and the editor is null.",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the option being registered."
        },
        {
          "name": "type",
          "type_long": "ghidra.framework.options.OptionType",
          "type_short": "OptionType",
          "comment": "the OptionType for this options."
        },
        {
          "name": "defaultValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the defaultValue for the option. In this version of the method, the default\n value may be null."
        },
        {
          "name": "help",
          "type_long": "ghidra.util.HelpLocation",
          "type_short": "HelpLocation",
          "comment": "the HelpLocation for this option."
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a description of the option."
        },
        {
          "name": "editor",
          "type_long": "java.beans.PropertyEditor",
          "type_short": "PropertyEditor",
          "comment": "an optional custom editor for this property. Note if the option is a custom option,\n then the property editor can\u0027t be null;"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerOptionsEditor",
      "comment": "Register the options editor that will handle the editing for all the options or a sub group of options.",
      "javadoc": "Register the options editor that will handle the editing for all the options or a sub group of options.\n@param editor the custom editor panel to be used to edit the options or sub group of options.",
      "static": false,
      "params": [
        {
          "name": "editor",
          "type_long": "ghidra.framework.options.OptionsEditor",
          "type_short": "OptionsEditor",
          "comment": "the custom editor panel to be used to edit the options or sub group of options."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOptionsEditor",
      "comment": "Get the editor that will handle editing all the values in this options or sub group of options.",
      "javadoc": "Get the editor that will handle editing all the values in this options or sub group of options.\n@return null if no options editor was registered",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.options.OptionsEditor",
        "type_short": "OptionsEditor",
        "comment": "null if no options editor was registered"
      },
      "throws": []
    },
    {
      "name": "putObject",
      "comment": "Put the object value.  If the option exists, the type must match the type of the existing\n object.",
      "javadoc": "Put the object value.  If the option exists, the type must match the type of the existing\n object.\n@param optionName the option name\n@param obj the option value\n@throws IllegalStateException if the object does not match the existing type of the option.\n@throws IllegalArgumentException if the object is null or not a supported type.",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the option name"
        },
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the option value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getObject",
      "comment": "Get the object value; called when the options dialog is being\n populated.",
      "javadoc": "Get the object value; called when the options dialog is being\n populated.\n@param optionName option name\n@param defaultValue default value\n@return object with the given option name; if no option was found,\n return default value (this value is not stored in the option maps)",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        },
        {
          "name": "defaultValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "default value"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "object with the given option name; if no option was found,\n return default value (this value is not stored in the option maps)"
      },
      "throws": []
    },
    {
      "name": "getBoolean",
      "comment": "Get the boolean value for the given option name.",
      "javadoc": "Get the boolean value for the given option name.\n@param optionName option name\n@param defaultValue value that is stored and returned if there\n is no option with the given name.\n@return boolean option value",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        },
        {
          "name": "defaultValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "value that is stored and returned if there\n is no option with the given name."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean option value"
      },
      "throws": []
    },
    {
      "name": "getByteArray",
      "comment": "Get the byte array for the given option name.",
      "javadoc": "Get the byte array for the given option name.\n@param optionName option name\n@param defaultValue value that is stored and returned if there\n is no option with the given name\n@return byte[] byte array value",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        },
        {
          "name": "defaultValue",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "value that is stored and returned if there\n is no option with the given name"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "byte[] byte array value"
      },
      "throws": []
    },
    {
      "name": "getInt",
      "comment": "Get the int value for the given option name.",
      "javadoc": "Get the int value for the given option name.\n@param optionName option name\n@param defaultValue value that is stored and returned if there\n is no option with the given name\n@return int option value",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        },
        {
          "name": "defaultValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "value that is stored and returned if there\n is no option with the given name"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int option value"
      },
      "throws": []
    },
    {
      "name": "getDouble",
      "comment": "Get the double value for the given option name.",
      "javadoc": "Get the double value for the given option name.\n@param optionName option name\n@param defaultValue value that is stored and returned if there\n is no option with the given name\n@return double value for the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        },
        {
          "name": "defaultValue",
          "type_long": "double",
          "type_short": "double",
          "comment": "value that is stored and returned if there\n is no option with the given name"
        }
      ],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": "double value for the option"
      },
      "throws": []
    },
    {
      "name": "getFloat",
      "comment": "Get the float value for the given option name.",
      "javadoc": "Get the float value for the given option name.\n@param optionName option name\n@param defaultValue value that is stored and returned if there\n is no option with the given name\n@return float value for the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        },
        {
          "name": "defaultValue",
          "type_long": "float",
          "type_short": "float",
          "comment": "value that is stored and returned if there\n is no option with the given name"
        }
      ],
      "return": {
        "type_long": "float",
        "type_short": "float",
        "comment": "float value for the option"
      },
      "throws": []
    },
    {
      "name": "getLong",
      "comment": "Get the long value for the given option name.",
      "javadoc": "Get the long value for the given option name.\n@param optionName option name\n@param defaultValue value that is stored and returned if there\n is no option with the given name\n@return long value for the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        },
        {
          "name": "defaultValue",
          "type_long": "long",
          "type_short": "long",
          "comment": "value that is stored and returned if there\n is no option with the given name"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "long value for the option"
      },
      "throws": []
    },
    {
      "name": "getCustomOption",
      "comment": "Get the custom option value for the given option name.",
      "javadoc": "Get the custom option value for the given option name.\n@param optionName option name\n@param defaultValue value that is stored and returned if there\n is no option with the given name\n@return WrappedOption value for the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        },
        {
          "name": "defaultValue",
          "type_long": "ghidra.framework.options.CustomOption",
          "type_short": "CustomOption",
          "comment": "value that is stored and returned if there\n is no option with the given name"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.options.CustomOption",
        "type_short": "CustomOption",
        "comment": "WrappedOption value for the option"
      },
      "throws": []
    },
    {
      "name": "getColor",
      "comment": "Get the Color for the given option name.",
      "javadoc": "Get the Color for the given option name.\n@param optionName option name\n@param defaultValue value that is stored and returned if there is no\n option with the given name\n@return Color option\n@throws IllegalArgumentException is a option exists with the given\n name but it is not a Color",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        },
        {
          "name": "defaultValue",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "value that is stored and returned if there is no\n option with the given name"
        }
      ],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "Color option"
      },
      "throws": []
    },
    {
      "name": "getFile",
      "comment": "Get the File for the given option name.",
      "javadoc": "Get the File for the given option name.\n@param optionName option name\n@param defaultValue value that is stored and returned if there is no\n option with the given name\n@return File option\n@throws IllegalArgumentException is a option exists with the given\n name but it is not a File options",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        },
        {
          "name": "defaultValue",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "value that is stored and returned if there is no\n option with the given name"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "File option"
      },
      "throws": []
    },
    {
      "name": "getDate",
      "comment": "Get the Date for the given option name.",
      "javadoc": "Get the Date for the given option name.\n@param pName the property name\n@param date the default date that is stored and returned if there is no\n option with the given name\n@return the Date for the option\n@throws IllegalArgumentException is a option exists with the given\n name but it is not a Date options",
      "static": false,
      "params": [
        {
          "name": "pName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the property name"
        },
        {
          "name": "date",
          "type_long": "java.util.Date",
          "type_short": "Date",
          "comment": "the default date that is stored and returned if there is no\n option with the given name"
        }
      ],
      "return": {
        "type_long": "java.util.Date",
        "type_short": "Date",
        "comment": "the Date for the option"
      },
      "throws": []
    },
    {
      "name": "getFont",
      "comment": "Get the Font for the given option name.",
      "javadoc": "Get the Font for the given option name.\n@param optionName option name\n@param defaultValue value that is stored and returned if there is no\n option with the given name\n@return Font option\n@throws IllegalArgumentException is a option exists with the given\n name but it is not a Font",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        },
        {
          "name": "defaultValue",
          "type_long": "java.awt.Font",
          "type_short": "Font",
          "comment": "value that is stored and returned if there is no\n option with the given name"
        }
      ],
      "return": {
        "type_long": "java.awt.Font",
        "type_short": "Font",
        "comment": "Font option"
      },
      "throws": []
    },
    {
      "name": "getKeyStroke",
      "comment": "Get the KeyStrokg for the given action name.",
      "javadoc": "Get the KeyStrokg for the given action name.\n@param optionName the option name\n@param defaultValue value that is stored and returned if there is no\n option with the given name\n@return KeyStroke option\n@throws IllegalArgumentException is a option exists with the given\n name but it is not a KeyStroke",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the option name"
        },
        {
          "name": "defaultValue",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": "value that is stored and returned if there is no\n option with the given name"
        }
      ],
      "return": {
        "type_long": "javax.swing.KeyStroke",
        "type_short": "KeyStroke",
        "comment": "KeyStroke option"
      },
      "throws": []
    },
    {
      "name": "getString",
      "comment": "Get the string value for the given option name.",
      "javadoc": "Get the string value for the given option name.\n@param optionName option name\n@param defaultValue value that is stored and returned if there is no\n option with the given name\n@return String value for the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        },
        {
          "name": "defaultValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "value that is stored and returned if there is no\n option with the given name"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String value for the option"
      },
      "throws": []
    },
    {
      "name": "getEnum",
      "comment": "Get the Enum value for the given option name.",
      "javadoc": "Get the Enum value for the given option name.\n@param optionName option name\n@param defaultValue default value that is stored and returned if there is\n no option with the given name\n@return Enum value for the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        },
        {
          "name": "defaultValue",
          "type_long": "T",
          "type_short": "T",
          "comment": "default value that is stored and returned if there is\n no option with the given name"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "Enum value for the option"
      },
      "throws": []
    },
    {
      "name": "setLong",
      "comment": "Sets the long value for the option.",
      "javadoc": "Sets the long value for the option.\n@param optionName name of the option\n@param value value of the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "value of the option"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setBoolean",
      "comment": "Sets the boolean value for the option.",
      "javadoc": "Sets the boolean value for the option.\n@param optionName name of the option\n@param value value of the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        },
        {
          "name": "value",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "value of the option"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setInt",
      "comment": "Sets the int value for the option.",
      "javadoc": "Sets the int value for the option.\n@param optionName name of the option\n@param value value of the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "value of the option"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDouble",
      "comment": "Sets the double value for the option.",
      "javadoc": "Sets the double value for the option.\n@param optionName name of the option\n@param value value of the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        },
        {
          "name": "value",
          "type_long": "double",
          "type_short": "double",
          "comment": "value of the option"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFloat",
      "comment": "Sets the float value for the option.",
      "javadoc": "Sets the float value for the option.\n@param optionName name of the option\n@param value value of the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        },
        {
          "name": "value",
          "type_long": "float",
          "type_short": "float",
          "comment": "value of the option"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCustomOption",
      "comment": "Sets the Custom option value for the option.",
      "javadoc": "Sets the Custom option value for the option.\n@param optionName name of the option\n@param value the value",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        },
        {
          "name": "value",
          "type_long": "ghidra.framework.options.CustomOption",
          "type_short": "CustomOption",
          "comment": "the value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setByteArray",
      "comment": "Sets the byte[] value for the given option name.",
      "javadoc": "Sets the byte[] value for the given option name.\n@param optionName the name of the option on which to save bytes.\n@param value the value",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the option on which to save bytes."
        },
        {
          "name": "value",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFile",
      "comment": "Sets the File value for the option.",
      "javadoc": "Sets the File value for the option.\n@param optionName name of the option\n@param value the value",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        },
        {
          "name": "value",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDate",
      "comment": "Sets the Date value for the option.",
      "javadoc": "Sets the Date value for the option.\n@param optionName name of the option\n@param newSetting the Date to set",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        },
        {
          "name": "newSetting",
          "type_long": "java.util.Date",
          "type_short": "Date",
          "comment": "the Date to set"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setColor",
      "comment": "Sets the Color value for the option",
      "javadoc": "Sets the Color value for the option\n@param optionName name of the option\n@param value Color to set\n@throws IllegalArgumentException if a option with the given\n name already exists, but it is not a Color",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        },
        {
          "name": "value",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "Color to set"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFont",
      "comment": "Sets the Font value for the option",
      "javadoc": "Sets the Font value for the option\n@param optionName name of the option\n@param value Font to set\n@throws IllegalArgumentException if a option with the given\n name already exists, but it is not a Font",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        },
        {
          "name": "value",
          "type_long": "java.awt.Font",
          "type_short": "Font",
          "comment": "Font to set"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setKeyStroke",
      "comment": "Sets the KeyStroke value for the option",
      "javadoc": "Sets the KeyStroke value for the option\n@param optionName name of the option\n@param value KeyStroke to set\n@throws IllegalArgumentException if a option with the given\n name already exists, but it is not a KeyStroke",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        },
        {
          "name": "value",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": "KeyStroke to set"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setString",
      "comment": "Set the String value for the option.",
      "javadoc": "Set the String value for the option.\n@param optionName name of the option\n@param value value of the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        },
        {
          "name": "value",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "value of the option"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setEnum",
      "comment": "Set the Enum value for the option.",
      "javadoc": "Set the Enum value for the option.\n@param optionName name of the option\n@param value Enum value of the option",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        },
        {
          "name": "value",
          "type_long": "T",
          "type_short": "T",
          "comment": "Enum value of the option"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeOption",
      "comment": "Remove the option name.",
      "javadoc": "Remove the option name.\n@param optionName name of option to remove",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of option to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOptionNames",
      "comment": "Get the list of option names. This method will return the names (paths) of all options contained\n in this options object or below.  For example, if the options has (\"aaa\", \"bbb\", \"ccc.ddd\"),\n all three will be returned.  the Options#getLeafOptionNames() method will return only\n the \"aaa\" and \"bbb\" names.",
      "javadoc": "Get the list of option names. This method will return the names (paths) of all options contained\n in this options object or below.  For example, if the options has (\"aaa\", \"bbb\", \"ccc.ddd\"),\n all three will be returned.  the {@link Options#getLeafOptionNames()} method will return only\n the \"aaa\" and \"bbb\" names.\n@return the list of all option names(paths) under this options.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "the list of all option names(paths) under this options."
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Return true if a option exists with the given name.",
      "javadoc": "Return true if a option exists with the given name.\n@param optionName option name\n@return true if there exists an option with the given name",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "option name"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there exists an option with the given name"
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "Get the description for the given option name.",
      "javadoc": "Get the description for the given option name.\n@param optionName name of the option\n@return null if the description or option name does not exist",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the option"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "null if the description or option name does not exist"
      },
      "throws": []
    },
    {
      "name": "isRegistered",
      "comment": "Returns true if the specified option has been registered.  Only registered names\n are saved.",
      "javadoc": "Returns true if the specified option has been registered.  Only registered names\n are saved.\n@param optionName the option name\n@return true if registered",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the option name"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if registered"
      },
      "throws": []
    },
    {
      "name": "isDefaultValue",
      "comment": "Returns true if the option with the given name\u0027s current value is the default value.",
      "javadoc": "Returns true if the option with the given name\u0027s current value is the default value.\n@param optionName the name of the option.\n@return true if the options has its current value equal to its default value.",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the option."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the options has its current value equal to its default value."
      },
      "throws": []
    },
    {
      "name": "restoreDefaultValues",
      "comment": "Restores all options contained herein to their default values.",
      "javadoc": "Restores \u003cb\u003eall\u003c/b\u003e options contained herein to their default values.\n@see #restoreDefaultValue(String)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreDefaultValue",
      "comment": "Restores the option denoted by the given name to its default value.",
      "javadoc": "Restores the option denoted by the given name to its default value.\n@param optionName The name of the option to restore\n@see #restoreDefaultValues()",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the option to restore"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOptions",
      "comment": "Returns a Options object that is a sub-options of this options.\n \n Note: the option path can have Options#DELIMITER characters which will be\n used to create a hierarchy with each element in the path resulting in sub-option of the\n previous path element.",
      "javadoc": "Returns a Options object that is a sub-options of this options.\n \n \u003cp\u003eNote: the option path can have {@link Options#DELIMITER} characters which will be\n used to create a hierarchy with each element in the path resulting in sub-option of the\n previous path element.\n@param path the path for the sub-options object\n@return an Options object that is a sub-options of this options",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path for the sub-options object"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.options.Options",
        "type_short": "Options",
        "comment": "an Options object that is a sub-options of this options"
      },
      "throws": []
    },
    {
      "name": "createAlias",
      "comment": "Create an alias in this options for an existing option in some other options object.",
      "javadoc": "Create an alias in this options for an existing option in some other options object.\n@param aliasName the name within this options object that will actually refer to some other\n options object.\n@param options the options object that has the actual option.\n@param optionsName the name within the given options object of the actual option.",
      "static": false,
      "params": [
        {
          "name": "aliasName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name within this options object that will actually refer to some other\n options object."
        },
        {
          "name": "options",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": "the options object that has the actual option."
        },
        {
          "name": "optionsName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name within the given options object of the actual option."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isAlias",
      "comment": "Returns",
      "javadoc": "Returns\n@param aliasName the name of the alias.\n@return a Options object that is a sub-options of this options.",
      "static": false,
      "params": [
        {
          "name": "aliasName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the alias."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "a Options object that is a sub-options of this options."
      },
      "throws": []
    },
    {
      "name": "getDefaultValue",
      "comment": "Returns the default value for the given option.",
      "javadoc": "Returns the default value for the given option.\n@param optionName the name of the option for which to retrieve the default value.\n@return the default value for the given option.",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the option for which to retrieve the default value."
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "the default value for the given option."
      },
      "throws": []
    },
    {
      "name": "getValueAsString",
      "comment": "Returns the value as a string for the given option.",
      "javadoc": "Returns the value as a string for the given option.\n@param name the name of the option for which to retrieve the value as a string\n@return the value as a string for the given option.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the option for which to retrieve the value as a string"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the value as a string for the given option."
      },
      "throws": []
    },
    {
      "name": "getDefaultValueAsString",
      "comment": "Returns the default value as a string for the given option.",
      "javadoc": "Returns the default value as a string for the given option.\n@param optionName the name of the option for which to retrieve the default value as a string\n@return the default value as a string for the given option.",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the option for which to retrieve the default value as a string"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the default value as a string for the given option."
      },
      "throws": []
    },
    {
      "name": "hasSameOptionsAndValues",
      "comment": "Returns true if the two options objects have the same set of options and values",
      "javadoc": "Returns true if the two options objects have the same set of options and values\n@param options1 the first options object to test\n@param options2 the second options object to test\n@return true if the two options objects have the same set of options and values",
      "static": true,
      "params": [
        {
          "name": "options1",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": "the first options object to test"
        },
        {
          "name": "options2",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": "the second options object to test"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the two options objects have the same set of options and values"
      },
      "throws": []
    }
  ]
}
