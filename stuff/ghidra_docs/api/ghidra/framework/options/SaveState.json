{
  "name": "SaveState",
  "comment": "Class for saving name/value pairs as XML or Json.  Classes that want to be\n able to save their state can do so using the SaveState object.\n The idea is that each state variable in the class\n is first saved into a SaveState object via a String key.  Then the SaveState\n object is written out as XML or Json.  When the save state object is\n restored, the SaveState object is constructed with an XML Element or JsonObject\n that contains all of the name/value pairs. Since the \"get\" methods require\n a default value, the object that is recovering its state variables\n will be successfully initialized even if\n the given key,value pair is not found in the SaveState object.\n  Note: Names for options are assumed to be unique. When a putXXX()\n method is called, if a value already exists for a name, it will\n be overwritten.\n \n The SaveState supports the following types:\n \n      java primitives\n      arrays of java primitives\n      String\n      Color\n      Font\n      KeyStroke\n      File\n      Date\n      Enum\n      SaveState (values can be nested SaveStates)\n  ",
  "javadoc": "Class for saving name/value pairs as XML or Json.  Classes that want to be\n able to save their state can do so using the SaveState object.\n The idea is that each state variable in the class\n is first saved into a SaveState object via a String key.  Then the SaveState\n object is written out as XML or Json.  When the save state object is\n restored, the SaveState object is constructed with an XML Element or JsonObject\n that contains all of the name/value pairs. Since the \"get\" methods require\n a default value, the object that is recovering its state variables\n will be successfully initialized even if\n the given key,value pair is not found in the SaveState object.\n \u003cp\u003e \u003ci\u003eNote: Names for options are assumed to be unique. When a putXXX()\n method is called, if a value already exists for a name, it will\n be overwritten.\u003c/i\u003e\n \u003cP\u003e\n The SaveState supports the following types:\n \u003cpre\u003e\n      java primitives\n      arrays of java primitives\n      String\n      Color\n      Font\n      KeyStroke\n      File\n      Date\n      Enum\n      SaveState (values can be nested SaveStates)\n  \u003c/pre\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "STATE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"STATE\""
    },
    {
      "name": "TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"TYPE\""
    },
    {
      "name": "NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"NAME\""
    },
    {
      "name": "VALUE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"VALUE\""
    },
    {
      "name": "SAVE_STATE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"SAVE_STATE\""
    },
    {
      "name": "DATE_FORMAT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.text.DateFormat",
      "type_short": "DateFormat",
      "constant_value": null
    },
    {
      "name": "ARRAY_ELEMENT_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"A\""
    },
    {
      "name": "map",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cjava.lang.String,java.lang.Object\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "saveStateName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "readJsonFile",
      "comment": "Creates a SaveState object and populates its values from the given file. The file must \n conform to the format that is created with #saveToJson()",
      "javadoc": "Creates a SaveState object and populates its values from the given file. The file must \n conform to the format that is created with {@link #saveToJson()}\n@param file the file to load values from\n@return a new SaveState object loaded with values from the given file.\n@throws IOException if an error occurs reading the given file.",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to load values from"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.options.SaveState",
        "type_short": "SaveState",
        "comment": "a new SaveState object loaded with values from the given file."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an error occurs reading the given file."
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new SaveState object with a non-default name.  The name serves no real purpose\n other than as a hint as to what the SaveState represents",
      "javadoc": "Creates a new SaveState object with a non-default name.  The name serves no real purpose\n other than as a hint as to what the SaveState represents\n@param name of the state",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "of the state"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Default Constructor for SaveState; uses \"SAVE_STATE\" as the\n name of the state.",
      "javadoc": "Default Constructor for SaveState; uses \"SAVE_STATE\" as the\n name of the state.\n@see java.lang.Object#Object()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a SaveState from a file containing XML from a previously saved SaveState.",
      "javadoc": "Construct a SaveState from a file containing XML from a previously saved SaveState.\n@param file the file containing the XML to read.\n@throws IOException if the file can\u0027t be read or is not formatted properly for a SaveState",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file containing the XML to read."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the file can\u0027t be read or is not formatted properly for a SaveState"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new SaveState object using the given XML element.",
      "javadoc": "Construct a new SaveState object using the given XML element.\n@param root XML contents of the save state",
      "static": false,
      "params": [
        {
          "name": "root",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "XML contents of the save state"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "root",
          "type_long": "com.google.gson.JsonObject",
          "type_short": "JsonObject",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getObjectFromJson",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "com.google.gson.JsonElement",
          "type_short": "JsonElement",
          "comment": ""
        },
        {
          "name": "enumClass",
          "type_long": "com.google.gson.JsonElement",
          "type_short": "JsonElement",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseDate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dateString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Date",
        "type_short": "Date",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEnumValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "enumClassName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Enum\u003c?\u003e",
        "type_short": "Enum",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getXmlElementFromFile",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "org.jdom.Element",
        "type_short": "Element",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "saveToFile",
      "comment": "Write the saveState to a file as XML",
      "javadoc": "Write the saveState to a file as XML\n@param file the file to write to.\n@throws FileNotFoundException if the file does not represent a valid file path.\n@throws IOException if the file could not be written",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to write to."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the file does not represent a valid file path."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if the file could not be written"
        }
      ]
    },
    {
      "name": "saveToJsonFile",
      "comment": "Outputs this SaveState to a file using Json\n \n For example, a SaveState that is created with:\n \n  ss \u003d new SaveState(\"foo\")\n\tss.putString(\"Name\", \"Bob\");\n\tss.putBoolean(\"Retired\", true);\n\tss.putInt(\"Age\", 65);\n\tss.putEnum(\"Endian\", Endian.BIG);\n\n  would produce a Json file with the following text\n\n {\n  \"SAVE STATE NAME\": \"foo\",\n  \"VALUES\": {\n    \"Name\": \"Bob\"\n    \"Retired\": true,\n    \"Age\": 65,\n    \"Endian\": \"BIG\",\n  },\n  \"TYPES\": {\n    \"Name\": \"String\"\n    \"Retired\": \"boolean\",\n    \"Age\": \"int\",\n    \"Endian\": \"enum\",\n  },\t\n  \"ENUM CLASSES\": {\n    \"Endian\": \"ghidra.program.model.lang.Endian\"\n  }\n}\n ",
      "javadoc": "Outputs this SaveState to a file using Json\n \u003cP\u003e\n For example, a SaveState that is created with:\n \u003cpre\u003e\n  ss \u003d new SaveState(\"foo\")\n\tss.putString(\"Name\", \"Bob\");\n\tss.putBoolean(\"Retired\", true);\n\tss.putInt(\"Age\", 65);\n\tss.putEnum(\"Endian\", Endian.BIG);\n\n  would produce a Json file with the following text\n\n {\n  \"SAVE STATE NAME\": \"foo\",\n  \"VALUES\": {\n    \"Name\": \"Bob\"\n    \"Retired\": true,\n    \"Age\": 65,\n    \"Endian\": \"BIG\",\n  },\n  \"TYPES\": {\n    \"Name\": \"String\"\n    \"Retired\": \"boolean\",\n    \"Age\": \"int\",\n    \"Endian\": \"enum\",\n  },\t\n  \"ENUM CLASSES\": {\n    \"Endian\": \"ghidra.program.model.lang.Endian\"\n  }\n}\n \u003c/pre\u003e\n@param file the file to save to\n@throws IOException if an error occurs writing to the given file",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to save to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an error occurs writing to the given file"
        }
      ]
    },
    {
      "name": "saveToXml",
      "comment": "Save this object to an XML element.",
      "javadoc": "Save this object to an XML element.\n@return Element XML element containing the state",
      "static": false,
      "params": [],
      "return": {
        "type_long": "org.jdom.Element",
        "type_short": "Element",
        "comment": "Element XML element containing the state"
      },
      "throws": []
    },
    {
      "name": "setArrayAttributes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "values",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "org.jdom.Element",
        "type_short": "Element",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setAttributes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "org.jdom.Element",
        "type_short": "Element",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveToJson",
      "comment": "Save this object to an JsonObject",
      "javadoc": "Save this object to an JsonObject\n@return JsonObject containing the state",
      "static": false,
      "params": [],
      "return": {
        "type_long": "com.google.gson.JsonObject",
        "type_short": "JsonObject",
        "comment": "JsonObject containing the state"
      },
      "throws": []
    },
    {
      "name": "createElementFromElement",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "internalKey",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "internalElement",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "org.jdom.Element",
        "type_short": "Element",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "Returns true if this list contains no elements",
      "javadoc": "Returns true if this list contains no elements\n@return true if there are no properties in this save  state",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there are no properties in this save  state"
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Remove the object identified by the given name",
      "javadoc": "Remove the object identified by the given name\n@param name the name of the property to remove",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Clear all objects from the save state.",
      "javadoc": "Clear all objects from the save state.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "Return the number of properties in the save state",
      "javadoc": "Return the number of properties in the save state\n@return The number of properties in the save state",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The number of properties in the save state"
      },
      "throws": []
    },
    {
      "name": "getNames",
      "comment": "Return the names of the objects saved in the state.",
      "javadoc": "Return the names of the objects saved in the state.\n@return String[] array will be zero length if the save state\n is empty",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "String[] array will be zero length if the save state\n is empty"
      },
      "throws": []
    },
    {
      "name": "putObject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getObject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putInt",
      "comment": "Associates an integer value with the given name.",
      "javadoc": "Associates an integer value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putByte",
      "comment": "Associates a byte value with the given name.",
      "javadoc": "Associates a byte value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putShort",
      "comment": "Associates a short value with the given name.",
      "javadoc": "Associates a short value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "short",
          "type_short": "short",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putLong",
      "comment": "Associates a long value with the given name.",
      "javadoc": "Associates a long value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putString",
      "comment": "Associates a String value with the given name.",
      "javadoc": "Associates a String value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putColor",
      "comment": "Associates a Color value with the given name.",
      "javadoc": "Associates a Color value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putDate",
      "comment": "Associates a Date value with the given name.",
      "javadoc": "Associates a Date value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "java.util.Date",
          "type_short": "Date",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putFile",
      "comment": "Associates a File value with the given name.",
      "javadoc": "Associates a File value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putKeyStroke",
      "comment": "Associates a KeyStroke value with the given name.",
      "javadoc": "Associates a KeyStroke value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putFont",
      "comment": "Associates a Font value with the given name.",
      "javadoc": "Associates a Font value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "java.awt.Font",
          "type_short": "Font",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putBoolean",
      "comment": "Associates a boolean value with the given name.",
      "javadoc": "Associates a boolean value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putFloat",
      "comment": "Associates a float value with the given name.",
      "javadoc": "Associates a float value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "float",
          "type_short": "float",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putDouble",
      "comment": "Associates a double value with the given name.",
      "javadoc": "Associates a double value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "double",
          "type_short": "double",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putSaveState",
      "comment": "Associates a sub SaveState value with the given name.",
      "javadoc": "Associates a sub SaveState value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "ghidra.framework.options.SaveState",
          "type_short": "SaveState",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInt",
      "comment": "Gets the int value for the given name.",
      "javadoc": "Gets the int value for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the int value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the int value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getByte",
      "comment": "Gets the byte value for the given name.",
      "javadoc": "Gets the byte value for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the byte value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the byte value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getShort",
      "comment": "Gets the short value for the given name.",
      "javadoc": "Gets the short value for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the short value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "short",
          "type_short": "short",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the short value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getLong",
      "comment": "Gets the long value for the given name.",
      "javadoc": "Gets the long value for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the long value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "long",
          "type_short": "long",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the long value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getBoolean",
      "comment": "Gets the boolean value for the given name.",
      "javadoc": "Gets the boolean value for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the boolean value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "the boolean value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getString",
      "comment": "Gets the String value for the given name.",
      "javadoc": "Gets the String value for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the String value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the String value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getColor",
      "comment": "Gets the Color value for the given name.",
      "javadoc": "Gets the Color value for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the Color value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "the Color value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getDate",
      "comment": "Gets the Date value for the given name.",
      "javadoc": "Gets the Date value for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the Date value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "java.util.Date",
          "type_short": "Date",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "java.util.Date",
        "type_short": "Date",
        "comment": "the Date value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getFile",
      "comment": "Gets the File value for the given name.",
      "javadoc": "Gets the File value for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the File value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the File value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getKeyStroke",
      "comment": "Gets the KeyStroke value for the given name.",
      "javadoc": "Gets the KeyStroke value for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the KeyStroke value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "javax.swing.KeyStroke",
          "type_short": "KeyStroke",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "javax.swing.KeyStroke",
        "type_short": "KeyStroke",
        "comment": "the KeyStroke value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getFont",
      "comment": "Gets the Font value for the given name.",
      "javadoc": "Gets the Font value for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the Font value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "java.awt.Font",
          "type_short": "Font",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "java.awt.Font",
        "type_short": "Font",
        "comment": "the Font value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getFloat",
      "comment": "Gets the float value for the given name.",
      "javadoc": "Gets the float value for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the float value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "float",
          "type_short": "float",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "float",
        "type_short": "float",
        "comment": "the float value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getDouble",
      "comment": "Gets the double value for the given name.",
      "javadoc": "Gets the double value for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the double value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "double",
          "type_short": "double",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": "the double value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "putInts",
      "comment": "Associates an integer array with the given name.",
      "javadoc": "Associates an integer array with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putBytes",
      "comment": "Associates a byte array with the given name.",
      "javadoc": "Associates a byte array with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putShorts",
      "comment": "Associates a short array with the given name.",
      "javadoc": "Associates a short array with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "short[]",
          "type_short": "short[]",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putLongs",
      "comment": "Associates a long array with the given name.",
      "javadoc": "Associates a long array with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putStrings",
      "comment": "Associates a String array with the given name.",
      "javadoc": "Associates a String array with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putEnum",
      "comment": "Associates an Enum with the given name.",
      "javadoc": "Associates an Enum with the given name.\n@param name The name in the name,value pair.\n@param value The Enum value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "java.lang.Enum\u003c?\u003e",
          "type_short": "Enum",
          "comment": "The Enum value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putBooleans",
      "comment": "Associates a boolean array with the given name.",
      "javadoc": "Associates a boolean array with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "boolean[]",
          "type_short": "boolean[]",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putFloats",
      "comment": "Associates a float array with the given name.",
      "javadoc": "Associates a float array with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "float[]",
          "type_short": "float[]",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putDoubles",
      "comment": "Associates a double value with the given name.",
      "javadoc": "Associates a double value with the given name.\n@param name The name in the name,value pair.\n@param value The value in the name,value pair.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name in the name,value pair."
        },
        {
          "name": "value",
          "type_long": "double[]",
          "type_short": "double[]",
          "comment": "The value in the name,value pair."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInts",
      "comment": "Gets the int array for the given name.",
      "javadoc": "Gets the int array for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the int array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "the int array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Gets the byte array for the given name.",
      "javadoc": "Gets the byte array for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the byte array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the byte array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getShorts",
      "comment": "Gets the short array for the given name.",
      "javadoc": "Gets the short array for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the short array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "short[]",
          "type_short": "short[]",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "short[]",
        "type_short": "short[]",
        "comment": "the short array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getLongs",
      "comment": "Gets the long array for the given name.",
      "javadoc": "Gets the long array for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the long array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "long[]",
        "type_short": "long[]",
        "comment": "the long array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getBooleans",
      "comment": "Gets the boolean array for the given name.",
      "javadoc": "Gets the boolean array for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the boolean array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "boolean[]",
          "type_short": "boolean[]",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "boolean[]",
        "type_short": "boolean[]",
        "comment": "the boolean array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getStrings",
      "comment": "Gets the String array for the given name.",
      "javadoc": "Gets the String array for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the String array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "the String array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getEnum",
      "comment": "Gets the Enum value for the given name.",
      "javadoc": "Gets the Enum value for the given name.\n@param name the name of the pair.\n@param defaultValue the default Enum value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the Enum value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "T",
          "type_short": "T",
          "comment": "the default Enum value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the Enum value associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getFloats",
      "comment": "Gets the float array for the given name.",
      "javadoc": "Gets the float array for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the float array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "float[]",
          "type_short": "float[]",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "float[]",
        "type_short": "float[]",
        "comment": "the float array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "getDoubles",
      "comment": "Gets the double array for the given name.",
      "javadoc": "Gets the double array for the given name.\n@param name the name of the pair.\n@param defaultValue the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type.\n@return the double array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the pair."
        },
        {
          "name": "defaultValue",
          "type_long": "double[]",
          "type_short": "double[]",
          "comment": "the default value to be returned if the name does\n not exist in the map, or it does not contain the proper object type."
        }
      ],
      "return": {
        "type_long": "double[]",
        "type_short": "double[]",
        "comment": "the double array associated with the given name or the defaultValue\n passed in if the name doesn\u0027t exist or is the wrong type."
      },
      "throws": []
    },
    {
      "name": "hasValue",
      "comment": "Returns true if there is a value for the given name",
      "javadoc": "Returns true if there is a value for the given name\n@param name true the name of the property to check for a value\n@return true if the SaveState object has a value for the given name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "true the name of the property to check for a value"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the SaveState object has a value for the given name"
      },
      "throws": []
    },
    {
      "name": "putXmlElement",
      "comment": "Adds an XML element to the\n saved state object. Used by plugins that have more\n complicated state information that needs to be saved.",
      "javadoc": "Adds an XML element to the\n saved state object. Used by plugins that have more\n complicated state information that needs to be saved.\n@param name the name to associate with the element\n@param element XML element which is the root of an\n XML sub-tree.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name to associate with the element"
        },
        {
          "name": "element",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "XML element which is the root of an\n XML sub-tree."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getXmlElement",
      "comment": "Returns the root of an XML sub-tree associated with the\n given name.",
      "javadoc": "Returns the root of an XML sub-tree associated with the\n given name.\n@param name The name associated with the desired Element.\n@return The root of an XML sub-tree associated with the\n given name.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name associated with the desired Element."
        }
      ],
      "return": {
        "type_long": "org.jdom.Element",
        "type_short": "Element",
        "comment": "The root of an XML sub-tree associated with the\n given name."
      },
      "throws": []
    },
    {
      "name": "getSaveState",
      "comment": "Returns the sub SaveState associated with the\n given name.",
      "javadoc": "Returns the sub SaveState associated with the\n given name.\n@param name The name associated with the desired Element.\n@return The SaveState object associated with the\n given name.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name associated with the desired Element."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.options.SaveState",
        "type_short": "SaveState",
        "comment": "The SaveState object associated with the\n given name."
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAsType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "defaultValue",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        },
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isExpectedType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "expectedType",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
