{
  "name": "GhidraProtocolConnector",
  "comment": "GhidraProtocolConnector provides an abtract implementation to access Ghidra \n repositories using various underlying communication protocols.  The common requirement \n for all implementations is the ability to derive a repository URL from any folder or file\n URL.",
  "javadoc": "\u003ccode\u003eGhidraProtocolConnector\u003c/code\u003e provides an abtract implementation to access Ghidra \n repositories using various underlying communication protocols.  The common requirement \n for all implementations is the ability to derive a repository URL from any folder or file\n URL.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "url",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.net.URL",
      "type_short": "URL",
      "constant_value": null
    },
    {
      "name": "repositoryName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "itemPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "folderPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "folderItemName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "responseCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "repositoryAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.client.RepositoryAdapter",
      "type_short": "RepositoryAdapter",
      "constant_value": null
    },
    {
      "name": "repositoryServerAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.client.RepositoryServerAdapter",
      "type_short": "RepositoryServerAdapter",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Abstract GhidraProtocolConnector constructor.",
      "javadoc": "Abstract \u003ccode\u003eGhidraProtocolConnector\u003c/code\u003e constructor.\n@param url a repository resource URL appropriate for the specific protocol implementation\n@throws MalformedURLException if URL is invalid",
      "static": false,
      "params": [
        {
          "name": "url",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": "a repository resource URL appropriate for the specific protocol implementation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.net.MalformedURLException",
          "type_short": "MalformedURLException",
          "comment": "if URL is invalid"
        }
      ]
    },
    {
      "name": "getRepositoryRootGhidraURL",
      "comment": "Get the URL associated with the repository/project root folder.\n This will be used as a key to its corresponding transient project data.",
      "javadoc": "Get the URL associated with the repository/project root folder.\n This will be used as a key to its corresponding transient project data.\n@return root folder URL",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.net.URL",
        "type_short": "URL",
        "comment": "root folder URL"
      },
      "throws": []
    },
    {
      "name": "checkProtocol",
      "comment": "Perform URL verification checks to ensure that it satisfies this \n connector implementation requirements",
      "javadoc": "Perform URL verification checks to ensure that it satisfies this \n connector implementation requirements\n@throws MalformedURLException if URL is invalid",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.net.MalformedURLException",
          "type_short": "MalformedURLException",
          "comment": "if URL is invalid"
        }
      ]
    },
    {
      "name": "checkUserInfo",
      "comment": "If connector supports user information within URL it will be verified",
      "javadoc": "If connector supports user information within URL it will be verified\n@throws MalformedURLException if URL contains user information \n and it is either invalid or unsupported",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.net.MalformedURLException",
          "type_short": "MalformedURLException",
          "comment": "if URL contains user information \n and it is either invalid or unsupported"
        }
      ]
    },
    {
      "name": "checkHostInfo",
      "comment": "Presence of a host specification within URL will be verified",
      "javadoc": "Presence of a host specification within URL will be verified\n@throws MalformedURLException if URL is missing proper host specification",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.net.MalformedURLException",
          "type_short": "MalformedURLException",
          "comment": "if URL is missing proper host specification"
        }
      ]
    },
    {
      "name": "parseRepositoryName",
      "comment": "Parse repository name from URL",
      "javadoc": "Parse repository name from URL\n@return repository name or null if not specified\n@throws MalformedURLException if URL is invalid",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "repository name or null if not specified"
      },
      "throws": [
        {
          "type_long": "java.net.MalformedURLException",
          "type_short": "MalformedURLException",
          "comment": "if URL is invalid"
        }
      ]
    },
    {
      "name": "parseItemPath",
      "comment": "Parse item path name from URL and establish initial values for folderPath and\n folderItemName.",
      "javadoc": "Parse item path name from URL and establish initial values for folderPath and\n folderItemName.\n@return original item path from URL or null if not specified\n@throws MalformedURLException if URL is invalid",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "original item path from URL or null if not specified"
      },
      "throws": [
        {
          "type_long": "java.net.MalformedURLException",
          "type_short": "MalformedURLException",
          "comment": "if URL is invalid"
        }
      ]
    },
    {
      "name": "getResponseCode",
      "comment": "Gets the status code from a Ghidra URL connect response.",
      "javadoc": "Gets the status code from a Ghidra URL connect response.\n@return the Ghidra Status-Code, or -1 if not yet connected\n@see #connect(boolean)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the Ghidra Status-Code, or -1 if not yet connected"
      },
      "throws": []
    },
    {
      "name": "getRepositoryName",
      "comment": "Gets the repository name associated with the URL.",
      "javadoc": "Gets the repository name associated with the URL.\n@return the repository name or null if URL does not identify a specific repository",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the repository name or null if URL does not identify a specific repository"
      },
      "throws": []
    },
    {
      "name": "getRepositoryAdapter",
      "comment": "Get the RepositoryAdapter associated with a URL which specifies a repository.",
      "javadoc": "Get the RepositoryAdapter associated with a URL which specifies a repository.\n@return repository adapter or null if a project locator is supplied instead",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.client.RepositoryAdapter",
        "type_short": "RepositoryAdapter",
        "comment": "repository adapter or null if a project locator is supplied instead"
      },
      "throws": []
    },
    {
      "name": "getRepositoryServerAdapter",
      "comment": "Get the RepositoryServerAdapter associated with a URL which specifies a repository or\n repository server.",
      "javadoc": "Get the RepositoryServerAdapter associated with a URL which specifies a repository or\n repository server.\n@return repository server adapter or null if a project locator is supplied instead",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.client.RepositoryServerAdapter",
        "type_short": "RepositoryServerAdapter",
        "comment": "repository server adapter or null if a project locator is supplied instead"
      },
      "throws": []
    },
    {
      "name": "getFolderPath",
      "comment": "Gets the repository folder path associated with the URL.\n If an ambiguous path has been specified, the folder path may change\n after a connection is established (e.g., folder item name will be appended \n to folder path and item name will become null if item turns out to\n be a folder).",
      "javadoc": "Gets the repository folder path associated with the URL.\n If an ambiguous path has been specified, the folder path may change\n after a connection is established (e.g., folder item name will be appended \n to folder path and item name will become null if item turns out to\n be a folder).\n@return repository folder path or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "repository folder path or null"
      },
      "throws": []
    },
    {
      "name": "getFolderItemName",
      "comment": "Gets the repository folder item name associated with the URL.\n If an ambiguous path has been specified, the folder item name may become null\n after a connection is established (e.g., folder item name will be appended \n to folder path and item name will become null if item turns out to\n be a folder).",
      "javadoc": "Gets the repository folder item name associated with the URL.\n If an ambiguous path has been specified, the folder item name may become null\n after a connection is established (e.g., folder item name will be appended \n to folder path and item name will become null if item turns out to\n be a folder).\n@return folder item name or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "folder item name or null"
      },
      "throws": []
    },
    {
      "name": "appendSubfolderName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "folder",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "subfolderName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveItemPath",
      "comment": "Fully resolve folder/item reference once connected to the associated\n repository due to possible ambiguity",
      "javadoc": "Fully resolve folder/item reference once connected to the associated\n repository due to possible ambiguity\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "connect",
      "comment": "Utilized a cached connection via the specified repository adapter.\n This method may only be invoked if not yet connected and the associated\n URL corresponds to a repository (getRepositoryName() !\u003d null).  The connection \n response code should be established based upon the availability of the \n URL referenced repository resource (i.e., folder or file).",
      "javadoc": "Utilized a cached connection via the specified repository adapter.\n This method may only be invoked if not yet connected and the associated\n URL corresponds to a repository (getRepositoryName() !\u003d null).  The connection \n response code should be established based upon the availability of the \n URL referenced repository resource (i.e., folder or file).\n@param repository existing connected repository adapter\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "repository",
          "type_long": "ghidra.framework.client.RepositoryAdapter",
          "type_short": "RepositoryAdapter",
          "comment": "existing connected repository adapter"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "connect",
      "comment": "Connect to the resource specified by the associated URL.  This method should only be invoked\n once, a second attempt may result in an IOException.",
      "javadoc": "Connect to the resource specified by the associated URL.  This method should only be invoked\n once, a second attempt may result in an IOException.\n@param readOnly if resource should be requested for write access.\n@return connection response code @see {@link GhidraURLConnection}\n@throws IOException if a connection error occurs",
      "static": false,
      "params": [
        {
          "name": "readOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if resource should be requested for write access."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "connection response code @see GhidraURLConnection"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a connection error occurs"
        }
      ]
    },
    {
      "name": "isReadOnly",
      "comment": "Determines the read-only nature of a connected resource",
      "javadoc": "Determines the read-only nature of a connected resource\n@return true if read-only, false if write access allowed\n@throws NotConnectedException if connect has not yet been performed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if read-only, false if write access allowed"
      },
      "throws": [
        {
          "type_long": "ghidra.framework.client.NotConnectedException",
          "type_short": "NotConnectedException",
          "comment": "if connect has not yet been performed"
        }
      ]
    }
  ]
}
