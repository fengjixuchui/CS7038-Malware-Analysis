{
  "name": "GhidraURL",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "PROTOCOL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"ghidra\""
    },
    {
      "name": "IS_LOCAL_URL_PATTERN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.regex.Pattern",
      "type_short": "Pattern",
      "constant_value": null
    },
    {
      "name": "MARKER_FILE_EXTENSION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\".gpr\""
    },
    {
      "name": "PROJECT_DIRECTORY_EXTENSION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\".rep\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "localProjectExists",
      "comment": "Determine if the specified URL refers to a local project and\n it exists.",
      "javadoc": "Determine if the specified URL refers to a local project and\n it exists.\n@param url\n@return true if specified URL refers to a local project and\n it exists.",
      "static": true,
      "params": [
        {
          "name": "url",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if specified URL refers to a local project and\n it exists."
      },
      "throws": []
    },
    {
      "name": "isLocalProjectURL",
      "comment": "Determine if the specified URL is a local project URL.\n No checking is performed as to the existence of the project.",
      "javadoc": "Determine if the specified URL is a local project URL.\n No checking is performed as to the existence of the project.\n@param url\n@return true if specified URL refers to a local \n project (ghidra:/path/projectName...)",
      "static": true,
      "params": [
        {
          "name": "url",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if specified URL refers to a local \n project (ghidra:/path/projectName...)"
      },
      "throws": []
    },
    {
      "name": "getProjectName",
      "comment": "Get the project name which corresponds to the specified \n local project URL.",
      "javadoc": "Get the project name which corresponds to the specified \n local project URL.\n@param localProjectURL local Ghidra project URL\n@return project name\n@throws IllegalArgumentException URL is not a valid local project URL",
      "static": true,
      "params": [
        {
          "name": "localProjectURL",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": "local Ghidra project URL"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "project name"
      },
      "throws": []
    },
    {
      "name": "getProjectLocation",
      "comment": "Get the project location path which corresponds to the specified \n local project URL.",
      "javadoc": "Get the project location path which corresponds to the specified \n local project URL.\n@param localProjectURL local Ghidra project URL\n@return project location path\n@throws IllegalArgumentException URL is not a valid local project URL",
      "static": true,
      "params": [
        {
          "name": "localProjectURL",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": "local Ghidra project URL"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "project location path"
      },
      "throws": []
    },
    {
      "name": "getProjectStorageLocator",
      "comment": "Get the project locator which corresponds to the specified \n local project URL.",
      "javadoc": "Get the project locator which corresponds to the specified \n local project URL.\n@param localProjectURL local Ghidra project URL\n@return project locator\n@throws IllegalArgumentException URL is not a valid local project URL",
      "static": true,
      "params": [
        {
          "name": "localProjectURL",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": "local Ghidra project URL"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.ProjectLocator",
        "type_short": "ProjectLocator",
        "comment": "project locator"
      },
      "throws": []
    },
    {
      "name": "isServerRepositoryURL",
      "comment": "Determine if the specified URL is any type of server \"repository\" URL.\n No checking is performed as to the existence of the server or repository.",
      "javadoc": "Determine if the specified URL is any type of server \"repository\" URL.\n No checking is performed as to the existence of the server or repository.\n@param url\n@return true if specified URL refers to a Ghidra server \n repository (ghidra://host/repositoryNAME/path...)",
      "static": true,
      "params": [
        {
          "name": "url",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if specified URL refers to a Ghidra server \n repository (ghidra://host/repositoryNAME/path...)"
      },
      "throws": []
    },
    {
      "name": "isServerURL",
      "comment": "Determine if the specified URL is any type of server URL.\n No checking is performed as to the existence of the server or repository.",
      "javadoc": "Determine if the specified URL is any type of server URL.\n No checking is performed as to the existence of the server or repository.\n@param url\n@return true if specified URL refers to a Ghidra server \n repository (ghidra://host/repositoryNAME/path...)",
      "static": true,
      "params": [
        {
          "name": "url",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if specified URL refers to a Ghidra server \n repository (ghidra://host/repositoryNAME/path...)"
      },
      "throws": []
    },
    {
      "name": "checkAbsolutePath",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toURL",
      "comment": "Create a Ghidra URL from a string form of Ghidra URL or local project path.\n This method can consume strings produced by the getDisplayString method.",
      "javadoc": "Create a Ghidra URL from a string form of Ghidra URL or local project path.\n This method can consume strings produced by the getDisplayString method.\n@param projectPathOrURL {@literal project path (\u003cabsolute-directory\u003e/\u003cproject-name\u003e)}\n@return local Ghidra project URL\n@see #getDisplayString(URL)\n@throws IllegalArgumentException invalid path or URL specified",
      "static": true,
      "params": [
        {
          "name": "projectPathOrURL",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.net.URL",
        "type_short": "URL",
        "comment": "local Ghidra project URL"
      },
      "throws": []
    },
    {
      "name": "getNormalizedURL",
      "comment": "Get a normalized URL which eliminates use of host names and additional URL refs\n which may prevent direct comparison.",
      "javadoc": "Get a normalized URL which eliminates use of host names and additional URL refs\n which may prevent direct comparison.\n@param url\n@return normalized url",
      "static": true,
      "params": [
        {
          "name": "url",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.net.URL",
        "type_short": "URL",
        "comment": "normalized url"
      },
      "throws": []
    },
    {
      "name": "getDisplayString",
      "comment": "Generate preferred display string for Ghidra URLs.\n Form can be parsed by the toURL method.",
      "javadoc": "Generate preferred display string for Ghidra URLs.\n Form can be parsed by the toURL method.\n@param url\n@return \n@see #toURL(String)",
      "static": true,
      "params": [
        {
          "name": "url",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeURL",
      "comment": "Create a local project URL for a specified project marker file.",
      "javadoc": "Create a local project URL for a specified project marker file.\n@param projectMarkerFile project marker file\n@return local project URL",
      "static": true,
      "params": [
        {
          "name": "projectMarkerFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "project marker file"
        }
      ],
      "return": {
        "type_long": "java.net.URL",
        "type_short": "URL",
        "comment": "local project URL"
      },
      "throws": []
    },
    {
      "name": "makeURL",
      "comment": "Create a URL which refers to a local Ghidra project",
      "javadoc": "Create a URL which refers to a local Ghidra project\n@param dirPath absolute path of project location directory\n@param projectName name of project\n@return local Ghidra project URL",
      "static": true,
      "params": [
        {
          "name": "dirPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "absolute path of project location directory"
        },
        {
          "name": "projectName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of project"
        }
      ],
      "return": {
        "type_long": "java.net.URL",
        "type_short": "URL",
        "comment": "local Ghidra project URL"
      },
      "throws": []
    },
    {
      "name": "makeURL",
      "comment": "Create a URL which refers to Ghidra Server repository content.  Path may correspond \n to either a file or folder.",
      "javadoc": "Create a URL which refers to Ghidra Server repository content.  Path may correspond \n to either a file or folder.\n@param host server host name/address\n@param port optional server port (a value \u0026lt;\u003d 0 refers to the default port)\n@param repositoryName repository name\n@param repositoryPath absolute folder or file path within repository.  \n Folder paths should end with a \u0027/\u0027 character.\n@return Ghidra Server repository content URL",
      "static": true,
      "params": [
        {
          "name": "host",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "server host name/address"
        },
        {
          "name": "port",
          "type_long": "int",
          "type_short": "int",
          "comment": "optional server port (a value \u003d 0 refers to the default port)"
        },
        {
          "name": "repositoryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "repository name"
        },
        {
          "name": "repositoryPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "absolute folder or file path within repository.  \n Folder paths should end with a \u0027/\u0027 character."
        }
      ],
      "return": {
        "type_long": "java.net.URL",
        "type_short": "URL",
        "comment": "Ghidra Server repository content URL"
      },
      "throws": []
    },
    {
      "name": "makeURL",
      "comment": "Create a URL which refers to Ghidra Server repository content.  Path may correspond \n to either a file or folder.",
      "javadoc": "Create a URL which refers to Ghidra Server repository content.  Path may correspond \n to either a file or folder.\n@param host server host name/address\n@param port optional server port (a value \u0026lt;\u003d 0 refers to the default port)\n@param repositoryName repository name\n@param repositoryPath absolute folder path within repository.\n@param fileName name of a file contained within the specified repository/path\n@param ref optional URL ref or null\n Folder paths should end with a \u0027/\u0027 character.\n@return Ghidra Server repository content URL",
      "static": true,
      "params": [
        {
          "name": "host",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "server host name/address"
        },
        {
          "name": "port",
          "type_long": "int",
          "type_short": "int",
          "comment": "optional server port (a value \u003d 0 refers to the default port)"
        },
        {
          "name": "repositoryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "repository name"
        },
        {
          "name": "repositoryPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "absolute folder path within repository."
        },
        {
          "name": "fileName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of a file contained within the specified repository/path"
        },
        {
          "name": "ref",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "optional URL ref or null\n Folder paths should end with a \u0027/\u0027 character."
        }
      ],
      "return": {
        "type_long": "java.net.URL",
        "type_short": "URL",
        "comment": "Ghidra Server repository content URL"
      },
      "throws": []
    },
    {
      "name": "makeURL",
      "comment": "Create a URL which refers to Ghidra Server repository and its root folder",
      "javadoc": "Create a URL which refers to Ghidra Server repository and its root folder\n@param host server host name/address\n@param port optional server port (a value \u0026lt;\u003d 0 refers to the default port)\n@param repositoryName repository name\n@return Ghidra Server repository URL",
      "static": true,
      "params": [
        {
          "name": "host",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "server host name/address"
        },
        {
          "name": "port",
          "type_long": "int",
          "type_short": "int",
          "comment": "optional server port (a value \u003d 0 refers to the default port)"
        },
        {
          "name": "repositoryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "repository name"
        }
      ],
      "return": {
        "type_long": "java.net.URL",
        "type_short": "URL",
        "comment": "Ghidra Server repository URL"
      },
      "throws": []
    }
  ]
}
