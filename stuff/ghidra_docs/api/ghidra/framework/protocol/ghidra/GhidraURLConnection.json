{
  "name": "GhidraURLConnection",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.net.URLConnection",
  "fields": [
    {
      "name": "GHIDRA_OK",
      "comment": "Ghidra Status-Code 200: OK.",
      "javadoc": "Ghidra Status-Code 200: OK.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "200"
    },
    {
      "name": "GHIDRA_UNAUTHORIZED",
      "comment": "Ghidra Status-Code 401: Unauthorized.\n This response code includes a variety of connection errors\n which are reported/logged by the Ghidra Server support code.",
      "javadoc": "Ghidra Status-Code 401: Unauthorized.\n This response code includes a variety of connection errors\n which are reported/logged by the Ghidra Server support code.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "401"
    },
    {
      "name": "GHIDRA_NOT_FOUND",
      "comment": "Ghidra Status-Code 404: Not Found.",
      "javadoc": "Ghidra Status-Code 404: Not Found.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "404"
    },
    {
      "name": "GHIDRA_WRAPPED_CONTENT",
      "comment": "Ghidra content type - domain folder/file wrapped within GhidraURLWrappedContent object.",
      "javadoc": "Ghidra content type - domain folder/file wrapped within GhidraURLWrappedContent object.\n@see GhidraURLWrappedContent",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"GhidraWrappedContent\""
    },
    {
      "name": "REPOSITORY_SERVER_CONTENT",
      "comment": "Ghidra content type - repository server in the form of a RepositoryAdapter",
      "javadoc": "Ghidra content type - repository server in the form of a RepositoryAdapter\n@see RepositoryAdapter",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"RepositoryServer\""
    },
    {
      "name": "responseCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "protocolConnector",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.protocol.ghidra.GhidraProtocolConnector",
      "type_short": "GhidraProtocolConnector",
      "constant_value": null
    },
    {
      "name": "projectData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.data.ProjectFileManager",
      "type_short": "ProjectFileManager",
      "constant_value": null
    },
    {
      "name": "refObject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Object",
      "type_short": "Object",
      "constant_value": null
    },
    {
      "name": "readOnly",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a Ghidra URL connection which uses the default handler without\n any extension protocol.",
      "javadoc": "Construct a Ghidra URL connection which uses the default handler without\n any extension protocol.\n@param ghidraUrl ghidra protocol URL (e.g., {@literal ghidra://server/repo})\n@throws MalformedURLException if URL is invalid",
      "static": false,
      "params": [
        {
          "name": "ghidraUrl",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": "ghidra protocol URL (e.g., )"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.net.MalformedURLException",
          "type_short": "MalformedURLException",
          "comment": "if URL is invalid"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a Ghidra URL connection which requires an Ghidra protocol extension",
      "javadoc": "Construct a Ghidra URL connection which requires an Ghidra protocol extension\n@param url extension URL without the ghidra protocol prefix (e.g., {@literal http://server/repo})\n@param protocolHandler Ghidra protocol extension handler\n@throws MalformedURLException if URL is invalid",
      "static": false,
      "params": [
        {
          "name": "url",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": "extension URL without the ghidra protocol prefix (e.g., )"
        },
        {
          "name": "protocolHandler",
          "type_long": "ghidra.framework.protocol.ghidra.GhidraProtocolHandler",
          "type_short": "GhidraProtocolHandler",
          "comment": "Ghidra protocol extension handler"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.net.MalformedURLException",
          "type_short": "MalformedURLException",
          "comment": "if URL is invalid"
        }
      ]
    },
    {
      "name": "isReadOnly",
      "comment": "Connection was opened as read-only",
      "javadoc": "Connection was opened as read-only\n@return true if read-only connection",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if read-only connection"
      },
      "throws": []
    },
    {
      "name": "setReadOnly",
      "comment": "Set the read-only state of the content.\n Extreme care must be taken when setting the state to false for local projects\n without the use of a ProjectLock.  This setting is currently ignored\n for server repositories which are always read-only in Headed mode and \n read-write in Headless mode.",
      "javadoc": "Set the read-only state of the content.\n Extreme care must be taken when setting the state to false for local projects\n without the use of a ProjectLock.  This setting is currently ignored\n for server repositories which are always read-only in Headed mode and \n read-write in Headless mode.\n@param state read-only if true, otherwise read-write",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "read-only if true, otherwise read-write"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepositoryName",
      "comment": "Gets the repository name associated with this GhidraURLConnection.",
      "javadoc": "Gets the repository name associated with this \u003ccode\u003eGhidraURLConnection\u003c/code\u003e.\n@return the repository name or null if URL does not identify a specific repository",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the repository name or null if URL does not identify a specific repository"
      },
      "throws": []
    },
    {
      "name": "getFolderPath",
      "comment": "Gets the repository folder path associated with this connection.\n If an ambiguous path has been specified, the folder path may change\n after a connection is established (e.g., folder item name will be appended \n to folder path and item name will become null if item turns out to\n be a folder).",
      "javadoc": "Gets the repository folder path associated with this connection.\n If an ambiguous path has been specified, the folder path may change\n after a connection is established (e.g., folder item name will be appended \n to folder path and item name will become null if item turns out to\n be a folder).\n@return repository folder path or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "repository folder path or null"
      },
      "throws": []
    },
    {
      "name": "getFolderItemName",
      "comment": "Gets the repository folder item name associated with this connection.\n If an ambiguous path has been specified, the folder item name may become null\n after a connection is established (e.g., folder item name will be appended \n to folder path and item name will become null if item turns out to\n be a folder).",
      "javadoc": "Gets the repository folder item name associated with this connection.\n If an ambiguous path has been specified, the folder item name may become null\n after a connection is established (e.g., folder item name will be appended \n to folder path and item name will become null if item turns out to\n be a folder).\n@return folder item name or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "folder item name or null"
      },
      "throws": []
    },
    {
      "name": "getResponseCode",
      "comment": "Gets the status code from a Ghidra URL response.",
      "javadoc": "Gets the status code from a Ghidra URL response.\n@throws IOException if an error occurred connecting to the server.\n@return the Ghidra Status-Code, or -1",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the Ghidra Status-Code, or -1"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an error occurred connecting to the server."
        }
      ]
    },
    {
      "name": "getContentType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContent",
      "comment": "Get content associated with the URL",
      "javadoc": "Get content associated with the URL\n@return URL content generally in the form of GhidraURLWrappedContent, although other\n special cases may result in different content (Example: a server-only URL could result in\n content class of RepositoryServerAdapter).\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "URL content generally in the form of GhidraURLWrappedContent, although other\n special cases may result in different content (Example: a server-only URL could result in\n content class of RepositoryServerAdapter)."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getProjectData",
      "comment": "If URL connects and corresponds to a valid repository, this method\n may be used to obtain the associated ProjectData object.  The caller is\n responsible for closing the returned project data when no longer in-use,\n failure to do so may prevent release of repository handle to server.\n Only a single call to this method is permitted.",
      "javadoc": "If URL connects and corresponds to a valid repository, this method\n may be used to obtain the associated ProjectData object.  The caller is\n responsible for closing the returned project data when no longer in-use,\n failure to do so may prevent release of repository handle to server.\n Only a single call to this method is permitted.\n@return transient project data or null if unavailable\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ProjectData",
        "type_short": "ProjectData",
        "comment": "transient project data or null if unavailable"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "localConnect",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "localProjectLocator",
          "type_long": "ghidra.framework.model.ProjectLocator",
          "type_short": "ProjectLocator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "connect",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getInputStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getOutputStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.OutputStream",
        "type_short": "OutputStream",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
