{
  "name": "ContentHandler",
  "comment": "NOTE:  ALL ContentHandler CLASSES MUST END IN \"ContentHandler\".  If not,\n the ClassSearcher will not find them.\n \n ContentHandler defines an application interface for converting \n between a specific domain object implementation and folder item storage. \n This interface also defines a method which provides an appropriate icon \n corresponding to the content.",
  "javadoc": "NOTE:  ALL ContentHandler CLASSES MUST END IN \"ContentHandler\".  If not,\n the ClassSearcher will not find them.\n \n \u003ccode\u003eContentHandler\u003c/code\u003e defines an application interface for converting \n between a specific domain object implementation and folder item storage. \n This interface also defines a method which provides an appropriate icon \n corresponding to the content.",
  "static": false,
  "implements": [
    "ghidra.util.classfinder.ExtensionPoint"
  ],
  "fields": [
    {
      "name": "UNKNOWN_CONTENT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Unknown-File\""
    },
    {
      "name": "MISSING_CONTENT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Missing-File\""
    }
  ],
  "methods": [
    {
      "name": "createFile",
      "comment": "Creates a new folder item within a specified file-system.\n If fs is versioned, the resulting item is marked as checked-out\n within the versioned file-system.  The specified domainObj\n will become associated with the newly created database.",
      "javadoc": "Creates a new folder item within a specified file-system.\n If fs is versioned, the resulting item is marked as checked-out\n within the versioned file-system.  The specified domainObj\n will become associated with the newly created database.\n@param fs the file system in which to create the folder item\n@param userfs file system which contains associated user data\n@param path the path of the folder item\n@param name the name of the new folder item\n@param domainObject the domain object to store in the newly created folder item\n@param monitor the monitor that allows the user to cancel\n@return checkout ID for new item\n@throws IOException if an i/o error occurs\n@throws InvalidNameException if the specified name contains invalid characters\n@throws CancelledException if the user cancels",
      "static": false,
      "params": [
        {
          "name": "fs",
          "type_long": "ghidra.framework.store.FileSystem",
          "type_short": "FileSystem",
          "comment": "the file system in which to create the folder item"
        },
        {
          "name": "userfs",
          "type_long": "ghidra.framework.store.FileSystem",
          "type_short": "FileSystem",
          "comment": "file system which contains associated user data"
        },
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path of the folder item"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the new folder item"
        },
        {
          "name": "domainObject",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": "the domain object to store in the newly created folder item"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor that allows the user to cancel"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "checkout ID for new item"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an i/o error occurs"
        },
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the specified name contains invalid characters"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels"
        }
      ]
    },
    {
      "name": "getImmutableObject",
      "comment": "Open a folder item for immutable use.  If any changes are attempted on the\n returned object, an IllegalStateException state exception may be thrown.",
      "javadoc": "Open a folder item for immutable use.  If any changes are attempted on the\n returned object, an IllegalStateException state exception may be thrown.\n@param item stored folder item\n@param consumer consumer of the returned object\n@param version version of the stored folder item to be opened.\n DomainFile.DEFAULT_VERSION (-1) should be specified when not opening a specific\n file version.\n@param minChangeVersion the minimum version which should be included in the \n change set for the returned object. A value of -1 indicates the default change\n set.\n@param monitor the monitor that allows the user to cancel\n@return immutable domain object\n@throws IOException if a folder item access error occurs\n@throws CancelledException if operation is cancelled by user\n@throws VersionException if unable to handle file content due to version \n difference which could not be handled.",
      "static": false,
      "params": [
        {
          "name": "item",
          "type_long": "ghidra.framework.store.FolderItem",
          "type_short": "FolderItem",
          "comment": "stored folder item"
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "consumer of the returned object"
        },
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "version of the stored folder item to be opened.\n DomainFile.DEFAULT_VERSION (-1) should be specified when not opening a specific\n file version."
        },
        {
          "name": "minChangeVersion",
          "type_long": "int",
          "type_short": "int",
          "comment": "the minimum version which should be included in the \n change set for the returned object. A value of -1 indicates the default change\n set."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor that allows the user to cancel"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.data.DomainObjectAdapter",
        "type_short": "DomainObjectAdapter",
        "comment": "immutable domain object"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a folder item access error occurs"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if operation is cancelled by user"
        },
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if unable to handle file content due to version \n difference which could not be handled."
        }
      ]
    },
    {
      "name": "getReadOnlyObject",
      "comment": "Open a folder item for read-only use.  While changes are permitted on the\n returned object, the original folder item may not be overwritten / updated.",
      "javadoc": "Open a folder item for read-only use.  While changes are permitted on the\n returned object, the original folder item may not be overwritten / updated.\n@param item stored folder item\n@param version version of the stored folder item to be opened.\n DomainFile.DEFAULT_VERSION should be specified when not opening a specific\n file version.\n@param okToUpgrade if true a version upgrade to the content will be done\n if necessary.\n@param consumer consumer of the returned object\n@param monitor the monitor that allows the user to cancel\n@return read-only domain object\n@throws IOException if a folder item access error occurs\n@throws CancelledException if operation is cancelled by user\n@throws VersionException if unable to handle file content due to version \n difference which could not be handled.",
      "static": false,
      "params": [
        {
          "name": "item",
          "type_long": "ghidra.framework.store.FolderItem",
          "type_short": "FolderItem",
          "comment": "stored folder item"
        },
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "version of the stored folder item to be opened.\n DomainFile.DEFAULT_VERSION should be specified when not opening a specific\n file version."
        },
        {
          "name": "okToUpgrade",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true a version upgrade to the content will be done\n if necessary."
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "consumer of the returned object"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor that allows the user to cancel"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.data.DomainObjectAdapter",
        "type_short": "DomainObjectAdapter",
        "comment": "read-only domain object"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a folder item access error occurs"
        },
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if unable to handle file content due to version \n difference which could not be handled."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if operation is cancelled by user"
        }
      ]
    },
    {
      "name": "getDomainObject",
      "comment": "Open a folder item for update.  Changes made to the returned object may be\n saved to the original folder item.",
      "javadoc": "Open a folder item for update.  Changes made to the returned object may be\n saved to the original folder item.\n@param item stored folder item\n@param userfs file system which contains associated user data\n@param checkoutId an appropriate checout ID required to update the specified \n folder item.\n@param okToUpgrade if true a version upgrade to the content will be done\n if necessary.\n@param okToRecover if true an attempt to recover any unsaved changes resulting from\n a crash will be attempted.\n@param consumer consumer of the returned object\n@param monitor cancelable task monitor\n@return updateable domain object\n@throws IOException if a folder item access error occurs\n@throws CancelledException if operation is cancelled by user\n@throws VersionException if unable to handle file content due to version \n difference which could not be handled.",
      "static": false,
      "params": [
        {
          "name": "item",
          "type_long": "ghidra.framework.store.FolderItem",
          "type_short": "FolderItem",
          "comment": "stored folder item"
        },
        {
          "name": "userfs",
          "type_long": "ghidra.framework.store.FileSystem",
          "type_short": "FileSystem",
          "comment": "file system which contains associated user data"
        },
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "an appropriate checout ID required to update the specified \n folder item."
        },
        {
          "name": "okToUpgrade",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true a version upgrade to the content will be done\n if necessary."
        },
        {
          "name": "okToRecover",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true an attempt to recover any unsaved changes resulting from\n a crash will be attempted."
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "consumer of the returned object"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "cancelable task monitor"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.data.DomainObjectAdapter",
        "type_short": "DomainObjectAdapter",
        "comment": "updateable domain object"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a folder item access error occurs"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if operation is cancelled by user"
        },
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if unable to handle file content due to version \n difference which could not be handled."
        }
      ]
    },
    {
      "name": "getChangeSet",
      "comment": "Returns the object change data which includes changes made to the specified\n olderVersion through to the specified newerVersion.",
      "javadoc": "Returns the object change data which includes changes made to the specified\n olderVersion through to the specified newerVersion.\n@param versionedFolderItem versioned folder item\n@param olderVersion the older version number\n@param newerVersion the newer version number\n@return the set of changes that were made\n@throws VersionException if a database version change prevents reading of data.\n@throws IOException if a folder item access error occurs or change set was \n produced by newer version of software and can not be read",
      "static": false,
      "params": [
        {
          "name": "versionedFolderItem",
          "type_long": "ghidra.framework.store.FolderItem",
          "type_short": "FolderItem",
          "comment": "versioned folder item"
        },
        {
          "name": "olderVersion",
          "type_long": "int",
          "type_short": "int",
          "comment": "the older version number"
        },
        {
          "name": "newerVersion",
          "type_long": "int",
          "type_short": "int",
          "comment": "the newer version number"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.ChangeSet",
        "type_short": "ChangeSet",
        "comment": "the set of changes that were made"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if a database version change prevents reading of data."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a folder item access error occurs or change set was \n produced by newer version of software and can not be read"
        }
      ]
    },
    {
      "name": "getMergeManager",
      "comment": "Get an instance of a suitable merge manager to be used during the merge of a Versioned \n object which has been modified by another user since it was last merged\n or checked-out.",
      "javadoc": "Get an instance of a suitable merge manager to be used during the merge of a Versioned \n object which has been modified by another user since it was last merged\n or checked-out.\n@param resultsObj object to which merge results should be written\n@param sourceObj object which contains user\u0027s changes to be merged\n@param originalObj object which corresponds to checked-out version state\n@param latestObj object which corresponds to latest version with which\n the sourceObj must be merged.\n@return merge manager",
      "static": false,
      "params": [
        {
          "name": "resultsObj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": "object to which merge results should be written"
        },
        {
          "name": "sourceObj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": "object which contains user\u0027s changes to be merged"
        },
        {
          "name": "originalObj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": "object which corresponds to checked-out version state"
        },
        {
          "name": "latestObj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": "object which corresponds to latest version with which\n the sourceObj must be merged."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.data.DomainObjectMergeManager",
        "type_short": "DomainObjectMergeManager",
        "comment": "merge manager"
      },
      "throws": []
    },
    {
      "name": "isPrivateContentType",
      "comment": "Returns true if the content type is always private \n (i.e., can not be added to the versioned filesystem).",
      "javadoc": "Returns true if the content type is always private \n (i.e., can not be added to the versioned filesystem).",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContentType",
      "comment": "Returns list of unique content-types supported.\n A minimum of one content-type will be returned. If more than one\n is returned, these are considered equivalent aliases.",
      "javadoc": "Returns list of unique content-types supported.\n A minimum of one content-type will be returned. If more than one\n is returned, these are considered equivalent aliases.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContentTypeDisplayString",
      "comment": "A string that is meant to be presented to the user.",
      "javadoc": "A string that is meant to be presented to the user.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIcon",
      "comment": "Returns the Icon associated with this handlers content type.",
      "javadoc": "Returns the Icon associated with this handlers content type.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.Icon",
        "type_short": "Icon",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultToolName",
      "comment": "Returns the name of the default tool that should be used to open this content type",
      "javadoc": "Returns the name of the default tool that should be used to open this content type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDomainObjectClass",
      "comment": "Returns domain object implementation class supported.",
      "javadoc": "Returns domain object implementation class supported.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003c? extends ghidra.framework.model.DomainObject\u003e",
        "type_short": "Class",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveUserDataFile",
      "comment": "Create user data file associated with existing content.\n This facilitates the lazy creation of the user data file.",
      "javadoc": "Create user data file associated with existing content.\n This facilitates the lazy creation of the user data file.\n@param associatedDomainObj associated domain object corresponding to this content handler\n@param userDbh user data handle\n@param userfs private user data filesystem\n@param monitor task monitor\n@throws IOException if an access error occurs\n@throws CancelledException if operation is cancelled by user",
      "static": false,
      "params": [
        {
          "name": "associatedDomainObj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": "associated domain object corresponding to this content handler"
        },
        {
          "name": "userDbh",
          "type_long": "db.DBHandle",
          "type_short": "DBHandle",
          "comment": "user data handle"
        },
        {
          "name": "userfs",
          "type_long": "ghidra.framework.store.FileSystem",
          "type_short": "FileSystem",
          "comment": "private user data filesystem"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if operation is cancelled by user"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an access error occurs"
        }
      ]
    },
    {
      "name": "removeUserDataFile",
      "comment": "Remove user data file associated with an existing folder item.",
      "javadoc": "Remove user data file associated with an existing folder item.\n@param item folder item\n@param userFilesystem\n@throws IOException if an access error occurs",
      "static": false,
      "params": [
        {
          "name": "item",
          "type_long": "ghidra.framework.store.FolderItem",
          "type_short": "FolderItem",
          "comment": "folder item"
        },
        {
          "name": "userFilesystem",
          "type_long": "ghidra.framework.store.FileSystem",
          "type_short": "FileSystem",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an access error occurs"
        }
      ]
    }
  ]
}
