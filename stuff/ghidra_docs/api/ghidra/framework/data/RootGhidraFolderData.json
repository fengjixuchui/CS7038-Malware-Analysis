{
  "name": "RootGhidraFolderData",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.framework.data.GhidraFolderData",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fileManager",
          "type_long": "ghidra.framework.data.ProjectFileManager",
          "type_short": "ProjectFileManager",
          "comment": ""
        },
        {
          "name": "listener",
          "type_long": "ghidra.framework.model.DomainFolderChangeListener",
          "type_short": "DomainFolderChangeListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDomainFolder",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.data.GhidraFolder",
        "type_short": "GhidraFolder",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVersionedFileSystem",
      "comment": "Provided for testing use only",
      "javadoc": "Provided for testing use only\n@param fs",
      "static": false,
      "params": [
        {
          "name": "fs",
          "type_long": "ghidra.framework.store.FileSystem",
          "type_short": "FileSystem",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "privateExists",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sharedExists",
      "comment": "used for testing",
      "javadoc": "used for testing",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
