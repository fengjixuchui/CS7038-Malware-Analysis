{
  "name": "ClientUtil",
  "comment": "ClientUtil allows a user to connect to a Repository Server and obtain its handle.",
  "javadoc": "\u003ccode\u003eClientUtil\u003c/code\u003e allows a user to connect to a Repository Server and obtain its handle.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "clientAuthenticator",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.framework.client.ClientAuthenticator",
      "type_short": "ClientAuthenticator",
      "constant_value": null
    },
    {
      "name": "serverHandles",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Hashtable\u003cghidra.framework.model.ServerInfo,ghidra.framework.client.RepositoryServerAdapter\u003e",
      "type_short": "Hashtable",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setClientAuthenticator",
      "comment": "Set client authenticator",
      "javadoc": "Set client authenticator\n@param authenticator",
      "static": true,
      "params": [
        {
          "name": "authenticator",
          "type_long": "ghidra.framework.client.ClientAuthenticator",
          "type_short": "ClientAuthenticator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getClientAuthenticator",
      "comment": "Get the currently installed client authenticator.  If one has not been\n installed, this will trigger the installation of a default instance.",
      "javadoc": "Get the currently installed client authenticator.  If one has not been\n installed, this will trigger the installation of a default instance.\n@return current client authenticator",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.client.ClientAuthenticator",
        "type_short": "ClientAuthenticator",
        "comment": "current client authenticator"
      },
      "throws": []
    },
    {
      "name": "getRepositoryServer",
      "comment": "Connect to a Repository Server and obtain a handle to it.\n Based upon the server authentication requirements, the user may be\n prompted for a password via a Swing dialog.  If a previous connection\n attempt to this server failed, the adapter may be returned in a\n disconnected state.",
      "javadoc": "Connect to a Repository Server and obtain a handle to it.\n Based upon the server authentication requirements, the user may be\n prompted for a password via a Swing dialog.  If a previous connection\n attempt to this server failed, the adapter may be returned in a\n disconnected state.\n@param host server name or address\n@param port server port, 0 indicates that default port should be used.\n@return repository server adapter",
      "static": true,
      "params": [
        {
          "name": "host",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "server name or address"
        },
        {
          "name": "port",
          "type_long": "int",
          "type_short": "int",
          "comment": "server port, 0 indicates that default port should be used."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.client.RepositoryServerAdapter",
        "type_short": "RepositoryServerAdapter",
        "comment": "repository server adapter"
      },
      "throws": []
    },
    {
      "name": "getRepositoryServer",
      "comment": "Connect to a Repository Server and obtain a handle to it.\n Based upon the server authentication requirements, the user may be\n prompted for a password via a Swing dialog.",
      "javadoc": "Connect to a Repository Server and obtain a handle to it.\n Based upon the server authentication requirements, the user may be\n prompted for a password via a Swing dialog.\n@param host server name or address\n@param port server port, 0 indicates that default port should be used.\n@param forceConnect if true and the server adapter is disconnected, an\n attempt will be made to reconnect.\n@return repository server handle",
      "static": true,
      "params": [
        {
          "name": "host",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "server name or address"
        },
        {
          "name": "port",
          "type_long": "int",
          "type_short": "int",
          "comment": "server port, 0 indicates that default port should be used."
        },
        {
          "name": "forceConnect",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true and the server adapter is disconnected, an\n attempt will be made to reconnect."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.client.RepositoryServerAdapter",
        "type_short": "RepositoryServerAdapter",
        "comment": "repository server handle"
      },
      "throws": []
    },
    {
      "name": "clearRepositoryAdapter",
      "comment": "Eliminate the specified repository server from the connection cache",
      "javadoc": "Eliminate the specified repository server from the connection cache\n@param host host name or IP address\n@param port port (0: use default port)\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "host",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "host name or IP address"
        },
        {
          "name": "port",
          "type_long": "int",
          "type_short": "int",
          "comment": "port (0: use default port)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getUserName",
      "comment": "Returns default user login name.  Actual user name used by repository\n should be obtained from RepositoryServerAdapter.getUser",
      "javadoc": "Returns default user login name.  Actual user name used by repository\n should be obtained from RepositoryServerAdapter.getUser",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleException",
      "comment": "Displays an error dialog appropriate for the given exception. If the exception is a\n ConnectException or NotConnectedException, a prompt to reconnect to the Ghidra Server\n is displayed.",
      "javadoc": "Displays an error dialog appropriate for the given exception. If the exception is a\n ConnectException or NotConnectedException, a prompt to reconnect to the Ghidra Server\n is displayed.\n@param repository may be null if the exception is not a RemoteException\n@param exc exception that occurred\n@param operation operation that was being done when the exception occurred; this string\n is be used in the message for the error dialog if one should be displayed\n@param mustRetry true if the message should state that the user should retry the operation\n because it may not have succeeded (if the exception was because a RemoteException); there\n may be cases where the operation succeeded; as a result of the operation, a bad connection\n to the server was detected (e.g., save a file). Note: this parameter is ignored if the\n exception is not a ConnectException or NotConnectedException.\n@param parent parent of the error dialog",
      "static": true,
      "params": [
        {
          "name": "repository",
          "type_long": "ghidra.framework.client.RepositoryAdapter",
          "type_short": "RepositoryAdapter",
          "comment": "may be null if the exception is not a RemoteException"
        },
        {
          "name": "exc",
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "exception that occurred"
        },
        {
          "name": "operation",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "operation that was being done when the exception occurred; this string\n is be used in the message for the error dialog if one should be displayed"
        },
        {
          "name": "mustRetry",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the message should state that the user should retry the operation\n because it may not have succeeded (if the exception was because a RemoteException); there\n may be cases where the operation succeeded; as a result of the operation, a bad connection\n to the server was detected (e.g., save a file). Note: this parameter is ignored if the\n exception is not a ConnectException or NotConnectedException."
        },
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "parent of the error dialog"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleException",
      "comment": "Displays an error dialog appropriate for the given exception. If the exception is a\n ConnectException or NotConnectedException, a prompt to reconnect to the Ghidra Server\n is displayed. The message states that the operation may have to be retried due to the\n failed connection.",
      "javadoc": "Displays an error dialog appropriate for the given exception. If the exception is a\n ConnectException or NotConnectedException, a prompt to reconnect to the Ghidra Server\n is displayed. The message states that the operation may have to be retried due to the\n failed connection.\n@param repository may be null if the exception is not a RemoteException\n@param exc exception that occurred\n@param operation operation that was being done when the exception occurred; this string\n is be used in the message for the error dialog if one should be displayed\n@param parent parent of the error dialog",
      "static": true,
      "params": [
        {
          "name": "repository",
          "type_long": "ghidra.framework.client.RepositoryAdapter",
          "type_short": "RepositoryAdapter",
          "comment": "may be null if the exception is not a RemoteException"
        },
        {
          "name": "exc",
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "exception that occurred"
        },
        {
          "name": "operation",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "operation that was being done when the exception occurred; this string\n is be used in the message for the error dialog if one should be displayed"
        },
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "parent of the error dialog"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "promptForReconnect",
      "comment": "Prompt the user to reconnect to the Ghidra Server.",
      "javadoc": "Prompt the user to reconnect to the Ghidra Server.\n@param repository repository to connect to\n@param parent parent of the dialog",
      "static": true,
      "params": [
        {
          "name": "repository",
          "type_long": "ghidra.framework.client.RepositoryAdapter",
          "type_short": "RepositoryAdapter",
          "comment": "repository to connect to"
        },
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "parent of the dialog"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "promptForReconnect",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "rep",
          "type_long": "ghidra.framework.client.RepositoryAdapter",
          "type_short": "RepositoryAdapter",
          "comment": ""
        },
        {
          "name": "operation",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "mustRetry",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkGhidraServer",
      "comment": "Connect to a Ghidra Server and verify compatibility.  This method can be used\n to affectively \"ping\" the Ghidra Server to verify the ability to connect.\n NOTE: Use of this method when PKI authentication is enabled is not supported.",
      "javadoc": "Connect to a Ghidra Server and verify compatibility.  This method can be used\n to affectively \"ping\" the Ghidra Server to verify the ability to connect.\n NOTE: Use of this method when PKI authentication is enabled is not supported.\n@param host server hostname\n@param port first Ghidra Server port (0\u003duse default)\n@throws IOException thrown if an IO Error occurs (e.g., server not found).\n@throws RemoteException if server interface is incompatible or another server-side\n error occurs.",
      "static": true,
      "params": [
        {
          "name": "host",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "server hostname"
        },
        {
          "name": "port",
          "type_long": "int",
          "type_short": "int",
          "comment": "first Ghidra Server port (0\u003duse default)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO Error occurs (e.g., server not found)."
        }
      ]
    },
    {
      "name": "connect",
      "comment": "Connect to a Repository Server and obtain a handle to it.\n Based upon the server authentication requirements, the user may be\n prompted for a name/password via a Swing dialog.  If null\n is returned, this indicates that the user cancelled the connect\n operation.",
      "javadoc": "Connect to a Repository Server and obtain a handle to it.\n Based upon the server authentication requirements, the user may be\n prompted for a name/password via a Swing dialog.  If null\n is returned, this indicates that the user cancelled the connect\n operation.\n@param server server address and port\n@return repository server handle\n@throws LoginException thrown if server fails to authenticate user or\n general access is denied.\n@throws GeneralSecurityException if server authentication fails due to\n credential access error (e.g., PKI cert failure)\n@throws IOException thrown if an IO Error occurs.",
      "static": true,
      "params": [
        {
          "name": "server",
          "type_long": "ghidra.framework.model.ServerInfo",
          "type_short": "ServerInfo",
          "comment": "server address and port"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.remote.RemoteRepositoryServerHandle",
        "type_short": "RemoteRepositoryServerHandle",
        "comment": "repository server handle"
      },
      "throws": [
        {
          "type_long": "javax.security.auth.login.LoginException",
          "type_short": "LoginException",
          "comment": "thrown if server fails to authenticate user or\n general access is denied."
        },
        {
          "type_long": "java.security.GeneralSecurityException",
          "type_short": "GeneralSecurityException",
          "comment": "if server authentication fails due to\n credential access error (e.g., PKI cert failure)"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO Error occurs."
        }
      ]
    },
    {
      "name": "changePassword",
      "comment": "Prompt user and change password on server (not initiated by user).",
      "javadoc": "Prompt user and change password on server (not initiated by user).\n@param parent dialog parent\n@param handle server handle\n@param serverInfo server information\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "dialog parent"
        },
        {
          "name": "handle",
          "type_long": "ghidra.framework.remote.RepositoryServerHandle",
          "type_short": "RepositoryServerHandle",
          "comment": "server handle"
        },
        {
          "name": "serverInfo",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "server information"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processPasswordCallbacks",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "callbacks",
          "type_long": "javax.security.auth.callback.Callback[]",
          "type_short": "javax.security.auth.callback.Callback[]",
          "comment": ""
        },
        {
          "name": "serverName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "defaultUserID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "loginError",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processSignatureCallback",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "serverName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "sigCb",
          "type_long": "ghidra.framework.remote.SignatureCallback",
          "type_short": "SignatureCallback",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processSSHSignatureCallback",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "callbacks",
          "type_long": "javax.security.auth.callback.Callback[]",
          "type_short": "javax.security.auth.callback.Callback[]",
          "comment": ""
        },
        {
          "name": "serverName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "defaultUserID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSSHKeyAvailable",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
