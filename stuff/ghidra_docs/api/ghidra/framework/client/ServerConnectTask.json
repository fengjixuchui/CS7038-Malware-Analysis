{
  "name": "ServerConnectTask",
  "comment": "Task for connecting to server with Swing thread.",
  "javadoc": "Task for connecting to server with Swing thread.",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.task.Task",
  "fields": [
    {
      "name": "server",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.model.ServerInfo",
      "type_short": "ServerInfo",
      "constant_value": null
    },
    {
      "name": "allowLoginRetry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "hdl",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.remote.RemoteRepositoryServerHandle",
      "type_short": "RemoteRepositoryServerHandle",
      "constant_value": null
    },
    {
      "name": "exc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Exception",
      "type_short": "Exception",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Server Connect Task constructor",
      "javadoc": "Server Connect Task constructor\n@param server server information\n@param allowLoginRetry true if login retry allowed during authentication",
      "static": false,
      "params": [
        {
          "name": "server",
          "type_long": "ghidra.framework.model.ServerInfo",
          "type_short": "ServerInfo",
          "comment": "server information"
        },
        {
          "name": "allowLoginRetry",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if login retry allowed during authentication"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "run",
      "comment": "Completes and necessary authentication and obtains a repository handle.\n If a connection error occurs, an exception will be stored (#getException().",
      "javadoc": "Completes and necessary authentication and obtains a repository handle.\n If a connection error occurs, an exception will be stored ({@link #getException()}.\n@see ghidra.util.task.Task#run(ghidra.util.task.TaskMonitor)",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getException",
      "comment": "Returns an IOException, LoginException or RuntimeException\n if handle is null after running task.  If both the exception\n and handle are null, it implies the connection attempt was cancelled\n by the user.",
      "javadoc": "Returns an IOException, LoginException or RuntimeException\n if handle is null after running task.  If both the exception\n and handle are null, it implies the connection attempt was cancelled\n by the user.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Exception",
        "type_short": "Exception",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepositoryServerHandle",
      "comment": "After running the task, this method will return the server handle\n if the connection was successful.  If null, a connection error\n may have occurred (#getException(), or the task was cancelled\n by the user if both the exception and handle are null.",
      "javadoc": "After running the task, this method will return the server handle\n if the connection was successful.  If null, a connection error\n may have occurred ({@link #getException()}, or the task was cancelled\n by the user if both the exception and handle are null.\n@return server handle or null if connection attempt failed or was cancelled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.remote.RemoteRepositoryServerHandle",
        "type_short": "RemoteRepositoryServerHandle",
        "comment": "server handle or null if connection attempt failed or was cancelled"
      },
      "throws": []
    },
    {
      "name": "getLocalUserSubject",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "javax.security.auth.Subject",
        "type_short": "Subject",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPreferredHostname",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSSLHandshakeCancelled",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "e",
          "type_long": "javax.net.ssl.SSLHandshakeException",
          "type_short": "SSLHandshakeException",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getGhidraServerHandle",
      "comment": "Obtain a remote instance of the Ghidra Server Handle object",
      "javadoc": "Obtain a remote instance of the Ghidra Server Handle object\n@param server server information\n@return Ghidra Server Handle object\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "server",
          "type_long": "ghidra.framework.model.ServerInfo",
          "type_short": "ServerInfo",
          "comment": "server information"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.remote.GhidraServerHandle",
        "type_short": "GhidraServerHandle",
        "comment": "Ghidra Server Handle object"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRepositoryServerHandle",
      "comment": "Attempts server connection and completes any necessary authentication.",
      "javadoc": "Attempts server connection and completes any necessary authentication.\n@param defaultUserID\n@return server handle or null if authentication was cancelled by user\n@throws IOException\n@throws LoginException",
      "static": false,
      "params": [
        {
          "name": "defaultUserID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.remote.RemoteRepositoryServerHandle",
        "type_short": "RemoteRepositoryServerHandle",
        "comment": "server handle or null if authentication was cancelled by user"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "javax.security.auth.login.LoginException",
          "type_short": "LoginException",
          "comment": ""
        }
      ]
    },
    {
      "name": "testServerSSLConnection",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "server",
          "type_long": "ghidra.framework.model.ServerInfo",
          "type_short": "ServerInfo",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "checkServerBindNames",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reg",
          "type_long": "java.rmi.registry.Registry",
          "type_short": "Registry",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.rmi.RemoteException",
          "type_short": "RemoteException",
          "comment": ""
        }
      ]
    }
  ]
}
