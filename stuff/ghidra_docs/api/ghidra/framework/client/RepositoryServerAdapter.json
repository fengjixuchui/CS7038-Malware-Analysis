{
  "name": "RepositoryServerAdapter",
  "comment": "RepositoryServerAdapter provides a persistent wrapper for a \n RepositoryServerHandle which may become invalid if the \n remote connection were to fail.",
  "javadoc": "\u003ccode\u003eRepositoryServerAdapter\u003c/code\u003e provides a persistent wrapper for a \n \u003ccode\u003eRepositoryServerHandle\u003c/code\u003e which may become invalid if the \n remote connection were to fail.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "HOUR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3600000"
    },
    {
      "name": "server",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.model.ServerInfo",
      "type_short": "ServerInfo",
      "constant_value": null
    },
    {
      "name": "serverInfoStr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "currentUser",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "serverHandle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.remote.RepositoryServerHandle",
      "type_short": "RepositoryServerHandle",
      "constant_value": null
    },
    {
      "name": "unexpectedDisconnect",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "connectCancelled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "listenerList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.WeakSet\u003cghidra.framework.client.RemoteAdapterListener\u003e",
      "type_short": "WeakSet",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a repository server interface adapter.",
      "javadoc": "Construct a repository server interface adapter.\n@param server provides server connection data",
      "static": false,
      "params": [
        {
          "name": "server",
          "type_long": "ghidra.framework.model.ServerInfo",
          "type_short": "ServerInfo",
          "comment": "provides server connection data"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a repository server interface adapter.",
      "javadoc": "Construct a repository server interface adapter.\n@param serverHandle associated server handle (reconnect not supported)",
      "static": false,
      "params": [
        {
          "name": "serverHandle",
          "type_long": "ghidra.framework.remote.RepositoryServerHandle",
          "type_short": "RepositoryServerHandle",
          "comment": "associated server handle (reconnect not supported)"
        },
        {
          "name": "serverInfoString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addListener",
      "comment": "Add a listener to this remote adapter",
      "javadoc": "Add a listener to this remote adapter\n@param listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.client.RemoteAdapterListener",
          "type_short": "RemoteAdapterListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeListener",
      "comment": "Remove a listener from this remote adapter",
      "javadoc": "Remove a listener from this remote adapter\n@param listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.client.RemoteAdapterListener",
          "type_short": "RemoteAdapterListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCancelled",
      "comment": "Returns true if the connection was cancelled by the user.",
      "javadoc": "Returns true if the connection was cancelled by the user.\n@return try if cancelled by user",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "try if cancelled by user"
      },
      "throws": []
    },
    {
      "name": "fireStateChanged",
      "comment": "Notify listeners of a connection state change.",
      "javadoc": "Notify listeners of a connection state change.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isConnected",
      "comment": "Returns true if connected.",
      "javadoc": "Returns true if connected.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "connect",
      "comment": "Attempt to connect or re-connect to the server.",
      "javadoc": "Attempt to connect or re-connect to the server.\n@return true if connect successful, false if cancelled by user\n@throws NotConnectedException if connect failed (error will be displayed to user)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if connect successful, false if cancelled by user"
      },
      "throws": [
        {
          "type_long": "ghidra.framework.client.NotConnectedException",
          "type_short": "NotConnectedException",
          "comment": "if connect failed (error will be displayed to user)"
        }
      ]
    },
    {
      "name": "checkPasswordExpiration",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "verifyConnection",
      "comment": "Returns true if the server handle is already connected\n and functioning properly.  A simple remote call is made \n to the handle\u0027s connected() method to verify the connection.",
      "javadoc": "Returns true if the server handle is already connected\n and functioning properly.  A simple remote call is made \n to the handle\u0027s connected() method to verify the connection.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "recoverConnection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createRepository",
      "comment": "Create a new repository on the server.",
      "javadoc": "Create a new repository on the server.\n@param name repository name.\n@return handle to new repository.\n@throws DuplicateNameException\n@throws UserAccessException\n@throws IOException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#createRepository(String)",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "repository name."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.client.RepositoryAdapter",
        "type_short": "RepositoryAdapter",
        "comment": "handle to new repository."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.UserAccessException",
          "type_short": "UserAccessException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.framework.client.NotConnectedException",
          "type_short": "NotConnectedException",
          "comment": "if server connection is down (user already informed)"
        }
      ]
    },
    {
      "name": "getRepository",
      "comment": "Get a handle to an existing repository.  The repository adapter is\n initially disconnected - the connect() method or another repository \n action method must be invoked to establish a repository connection.",
      "javadoc": "Get a handle to an existing repository.  The repository adapter is\n initially disconnected - the connect() method or another repository \n action method must be invoked to establish a repository connection.\n@param name repository name.\n@return repository handle or null if repository not found.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "repository name."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.client.RepositoryAdapter",
        "type_short": "RepositoryAdapter",
        "comment": "repository handle or null if repository not found."
      },
      "throws": []
    },
    {
      "name": "getRepositoryHandle",
      "comment": "Get a handle to an existing repository.",
      "javadoc": "Get a handle to an existing repository.\n@param name repository name.\n@return repository handle or null if repository not found.\n@throws UserAccessException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#getRepository(java.lang.String)",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "repository name."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.remote.RepositoryHandle",
        "type_short": "RepositoryHandle",
        "comment": "repository handle or null if repository not found."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.framework.client.NotConnectedException",
          "type_short": "NotConnectedException",
          "comment": "if server connection is down (user already informed)"
        }
      ]
    },
    {
      "name": "deleteRepository",
      "comment": "Delete a repository.",
      "javadoc": "Delete a repository.\n@param name repository name.\n@throws UserAccessException\n@throws IOException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#deleteRepository(java.lang.String)",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "repository name."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.UserAccessException",
          "type_short": "UserAccessException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.framework.client.NotConnectedException",
          "type_short": "NotConnectedException",
          "comment": "if server connection is down (user already informed)"
        }
      ]
    },
    {
      "name": "getRepositoryNames",
      "comment": "Returns a list of all repository names defined to the server.",
      "javadoc": "Returns a list of all repository names defined to the server.\n@throws IOException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#getRepositoryNames()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.framework.client.NotConnectedException",
          "type_short": "NotConnectedException",
          "comment": "if server connection is down (user already informed)"
        }
      ]
    },
    {
      "name": "anonymousAccessAllowed",
      "comment": "",
      "javadoc": "@return true if server allows anonymous access.\n Individual repositories must grant anonymous access separately.\n@throws IOException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#anonymousAccessAllowed()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if server allows anonymous access.\n Individual repositories must grant anonymous access separately."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.framework.client.NotConnectedException",
          "type_short": "NotConnectedException",
          "comment": "if server connection is down (user already informed)"
        }
      ]
    },
    {
      "name": "isReadOnly",
      "comment": "",
      "javadoc": "@return true if user has restricted read-only access to server (e.g., anonymous user)\n@throws IOException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#isReadOnly()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if user has restricted read-only access to server (e.g., anonymous user)"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.framework.client.NotConnectedException",
          "type_short": "NotConnectedException",
          "comment": "if server connection is down (user already informed)"
        }
      ]
    },
    {
      "name": "getUser",
      "comment": "Returns user\u0027s server login identity",
      "javadoc": "Returns user\u0027s server login identity",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllUsers",
      "comment": "Returns a list of all known users.",
      "javadoc": "Returns a list of all known users.\n@throws IOException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#getAllUsers()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.framework.client.NotConnectedException",
          "type_short": "NotConnectedException",
          "comment": "if server connection is down (user already informed)"
        }
      ]
    },
    {
      "name": "setPassword",
      "comment": "Set the simple password for the user.",
      "javadoc": "Set the simple password for the user.\n@param saltedSHA256PasswordHash hex character representation of salted SHA256 hash of the password\n@return true if password changed\n@throws IOException if user data can\u0027t be written to file\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#setPassword(char[])\n@see ghidra.util.HashUtilities#getSaltedHash(String, char[]) HashUtilities.getSaltedHash(\"SHA-256\", char[])",
      "static": false,
      "params": [
        {
          "name": "saltedSHA256PasswordHash",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": "hex character representation of salted SHA256 hash of the password"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if password changed"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if user data can\u0027t be written to file"
        },
        {
          "type_long": "ghidra.framework.client.NotConnectedException",
          "type_short": "NotConnectedException",
          "comment": "if server connection is down (user already informed)"
        }
      ]
    },
    {
      "name": "canSetPassword",
      "comment": "Returns true if this server allows the user to change their password.",
      "javadoc": "Returns true if this server allows the user to change their password.\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#canSetPassword()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getServerInfo",
      "comment": "Returns server information.  May be null if using fixed RepositoryServerHandle.",
      "javadoc": "Returns server information.  May be null if using fixed RepositoryServerHandle.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ServerInfo",
        "type_short": "ServerInfo",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkServerHandle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.framework.client.NotConnectedException",
          "type_short": "NotConnectedException",
          "comment": ""
        }
      ]
    },
    {
      "name": "hadUnexpectedDisconnect",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disconnect",
      "comment": "Force disconnect with server",
      "javadoc": "Force disconnect with server",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disconnect",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "unexpected",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
