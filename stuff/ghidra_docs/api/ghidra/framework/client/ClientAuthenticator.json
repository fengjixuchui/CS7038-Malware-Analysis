{
  "name": "ClientAuthenticator",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.security.KeyStorePasswordProvider"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getAuthenticator",
      "comment": "Get a standard Java authenticator for HTTP and other standard network connections",
      "javadoc": "Get a standard Java authenticator for HTTP and other standard network connections\n@return authenticator object",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.net.Authenticator",
        "type_short": "Authenticator",
        "comment": "authenticator object"
      },
      "throws": []
    },
    {
      "name": "processPasswordCallbacks",
      "comment": "Process Ghidra Server password authentication callbacks.",
      "javadoc": "Process Ghidra Server password authentication callbacks.\n@param title password prompt title if GUI is used\n@param serverType type of server (label associated with serverName)\n@param serverName name of server\n@param nameCb provides storage for user login name.  A null indicates\n that the default user name will be used, @see ClientUtil#getUserName()\n@param passCb provides storage for user password, @see PasswordCallback#setPassword(char[])\n@param choiceCb specifies choice between NT Domain authentication (index\u003d0) and local password\n file authentication (index\u003d1).  Set selected index to specify authenticator to be used,\n@param anonymousCb may be used to request anonymous read-only access to \n the server.  A null is specified if anonymous access has not been enabed on the server.\n@param loginError previous login error message or null for first attempt\n@see ChoiceCallback#setSelectedIndex(int) A null is specified if no choice is available (password authenticator determined by server configuration).\n@see AnonymousCallback#setAnonymousAccessRequested(boolean)\n@return ",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "password prompt title if GUI is used"
        },
        {
          "name": "serverType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "type of server (label associated with serverName)"
        },
        {
          "name": "serverName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of server"
        },
        {
          "name": "nameCb",
          "type_long": "javax.security.auth.callback.NameCallback",
          "type_short": "NameCallback",
          "comment": "provides storage for user login name.  A null indicates\n that the default user name will be used, @see ClientUtil#getUserName()"
        },
        {
          "name": "passCb",
          "type_long": "javax.security.auth.callback.PasswordCallback",
          "type_short": "PasswordCallback",
          "comment": "provides storage for user password, @see PasswordCallback#setPassword(char[])"
        },
        {
          "name": "choiceCb",
          "type_long": "javax.security.auth.callback.ChoiceCallback",
          "type_short": "ChoiceCallback",
          "comment": "specifies choice between NT Domain authentication (index\u003d0) and local password\n file authentication (index\u003d1).  Set selected index to specify authenticator to be used,"
        },
        {
          "name": "anonymousCb",
          "type_long": "ghidra.framework.remote.AnonymousCallback",
          "type_short": "AnonymousCallback",
          "comment": "may be used to request anonymous read-only access to \n the server.  A null is specified if anonymous access has not been enabed on the server."
        },
        {
          "name": "loginError",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "previous login error message or null for first attempt"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "promptForReconnect",
      "comment": "Prompt user for reconnect",
      "javadoc": "Prompt user for reconnect\n@param parent dialog parent component or null if not applicable\n@param message\n@return return true if reconnect should be attempted",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "dialog parent component or null if not applicable"
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "return true if reconnect should be attempted"
      },
      "throws": []
    },
    {
      "name": "getNewPassword",
      "comment": "Get new user password",
      "javadoc": "Get new user password\n@param parent dialog parent component or null if not applicable\n@param serverInfo server host info\n@param username\n@return new password or null if password should not be changed, \n if not null array will be cleared by caller",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "dialog parent component or null if not applicable"
        },
        {
          "name": "serverInfo",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "server host info"
        },
        {
          "name": "username",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "char[]",
        "type_short": "char[]",
        "comment": "new password or null if password should not be changed, \n if not null array will be cleared by caller"
      },
      "throws": []
    },
    {
      "name": "isSSHKeyAvailable",
      "comment": "",
      "javadoc": "@return true if SSH private key is available for authentication",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if SSH private key is available for authentication"
      },
      "throws": []
    },
    {
      "name": "processSSHSignatureCallbacks",
      "comment": "Process Ghidra Server SSH authentication callbacks.",
      "javadoc": "Process Ghidra Server SSH authentication callbacks.\n@param serverName name of server\n@param nameCb provides storage for user login name.  A null indicates\n that the default user name will be used, @see ClientUtil#getUserName().\n@param sshCb provides authentication token to be signed with private key, @see SSHAuthenticationCallback#sign(SSHPrivateKey)\n@return ",
      "static": false,
      "params": [
        {
          "name": "serverName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of server"
        },
        {
          "name": "nameCb",
          "type_long": "javax.security.auth.callback.NameCallback",
          "type_short": "NameCallback",
          "comment": "provides storage for user login name.  A null indicates\n that the default user name will be used, @see ClientUtil#getUserName()."
        },
        {
          "name": "sshCb",
          "type_long": "ghidra.framework.remote.SSHSignatureCallback",
          "type_short": "SSHSignatureCallback",
          "comment": "provides authentication token to be signed with private key, @see SSHAuthenticationCallback#sign(SSHPrivateKey)"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
