{
  "name": "ApplicationVersion",
  "comment": "Class to represent an application\u0027s version information.\n \n The version format is \\d\\.\\d(\\.\\d)?(\\-.+)?\n \n Note: this class has a natural ordering that is inconsistent with equals (the tag\n part of the version is disregarded in the #compareTo(ApplicationVersion) method).\n \n Examples:\n \n 7.4\n 7.4.1\n 7.4.1-BETA\n ",
  "javadoc": "Class to represent an application\u0027s version information.\n \u003cp\u003e\n The version format is \\d\\.\\d(\\.\\d)?(\\-.+)?\n \u003cp\u003e\n Note: this class has a natural ordering that is inconsistent with equals (the \u003ccode\u003etag\u003c/code\u003e\n part of the version is disregarded in the {@link #compareTo(ApplicationVersion)} method).\n \u003cp\u003e\n Examples:\n \u003cul\u003e\n \u003cli\u003e7.4\n \u003cli\u003e7.4.1\n \u003cli\u003e7.4.1-BETA\n \u003c/ul\u003e",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "major",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "minor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "patch",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "tag",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new ApplicationVersion object from the given version string.",
      "javadoc": "Creates a new {@link ApplicationVersion} object from the given version string.\n@param version A version string.\n@throws IllegalArgumentException if the version string failed to parse.  The \n   exception\u0027s message has more detailed information about why it failed.",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "A version string."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if the version string failed to parse.  The \n   exception\u0027s message has more detailed information about why it failed."
        }
      ]
    },
    {
      "name": "getMajor",
      "comment": "Gets the major version.",
      "javadoc": "Gets the major version.\n@return The major version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The major version."
      },
      "throws": []
    },
    {
      "name": "getMinor",
      "comment": "Gets the minor version.",
      "javadoc": "Gets the minor version.\n@return The minor version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The minor version."
      },
      "throws": []
    },
    {
      "name": "getPatch",
      "comment": "Gets the patch version.",
      "javadoc": "Gets the patch version.\n@return The patch version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The patch version."
      },
      "throws": []
    },
    {
      "name": "getTag",
      "comment": "Gets the tag.",
      "javadoc": "Gets the tag.\n@return The tag.  Could be the empty string.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The tag.  Could be the empty string."
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.framework.ApplicationVersion",
          "type_short": "ApplicationVersion",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parse",
      "comment": "Parses the major, minor, patch, and tag components out of the given version string.",
      "javadoc": "Parses the major, minor, patch, and tag components out of the given version string.\n@param version A version string.\n@throws IllegalArgumentException if the version string failed to parse.  The \n   exception\u0027s message has more detailed information about why it failed.",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "A version string."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if the version string failed to parse.  The \n   exception\u0027s message has more detailed information about why it failed."
        }
      ]
    },
    {
      "name": "parse",
      "comment": "Parses a version part string to an integer.",
      "javadoc": "Parses a version part string to an integer.\n@param versionPart A version part string.\n@param versionPartName The version part name (for error reporting).\n@return The version part string as an integer.\n@throws IllegalArgumentException if the version part string failed to parse to a valid\n   version part integer.",
      "static": false,
      "params": [
        {
          "name": "versionPart",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "A version part string."
        },
        {
          "name": "versionPartName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The version part name (for error reporting)."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The version part string as an integer."
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if the version part string failed to parse to a valid\n   version part integer."
        }
      ]
    }
  ]
}
