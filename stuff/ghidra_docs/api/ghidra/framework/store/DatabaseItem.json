{
  "name": "DatabaseItem",
  "comment": "DatabaseItem corresponds to a private or versioned \n database within a FileSystem.  Methods are provided for opening\n the underlying database as a BufferFile.",
  "javadoc": "\u003ccode\u003eDatabaseItem\u003c/code\u003e corresponds to a private or versioned \n database within a FileSystem.  Methods are provided for opening\n the underlying database as a BufferFile.",
  "static": false,
  "implements": [
    "ghidra.framework.store.FolderItem"
  ],
  "fields": [],
  "methods": [
    {
      "name": "open",
      "comment": "Open a specific version of the stored database for non-update use.\n Historical change data from minChangeDataVer through version is available.\n The returned BufferFile does not support the BufferMgr\u0027s Save operation.",
      "javadoc": "Open a specific version of the stored database for non-update use.\n Historical change data from minChangeDataVer through version is available.\n The returned BufferFile does not support the BufferMgr\u0027s Save operation.\n@param version database version\n@param minChangeDataVer indicates the oldest change data version to be\n included in change set.  A -1 indicates only the last change data buffer file is applicable.\n@return buffer file\n@throws FileInUseException thrown if unable to obtain the required database lock(s).\n@throws IOException thrown if IO error occurs.\n@see ManagedBufferFile#getNextChangeDataFile(boolean)",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "database version"
        },
        {
          "name": "minChangeDataVer",
          "type_long": "int",
          "type_short": "int",
          "comment": "indicates the oldest change data version to be\n included in change set.  A -1 indicates only the last change data buffer file is applicable."
        }
      ],
      "return": {
        "type_long": "db.buffers.ManagedBufferFile",
        "type_short": "ManagedBufferFile",
        "comment": "buffer file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs."
        }
      ]
    },
    {
      "name": "open",
      "comment": "Open a specific version of the stored database for non-update use.\n Change data will not be available.\n The returned BufferFile does not support the BufferMgr\u0027s Save operation.",
      "javadoc": "Open a specific version of the stored database for non-update use.\n Change data will not be available.\n The returned BufferFile does not support the BufferMgr\u0027s Save operation.\n@param version database version\n@return buffer file\n@throws FileInUseException thrown if unable to obtain the required database lock(s).\n@throws IOException thrown if IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "database version"
        }
      ],
      "return": {
        "type_long": "db.buffers.ManagedBufferFile",
        "type_short": "ManagedBufferFile",
        "comment": "buffer file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs."
        }
      ]
    },
    {
      "name": "open",
      "comment": "Open the current version of the stored database for non-update use.\n Change data will not be available.\n The returned BufferFile does not support the BufferMgr\u0027s Save operation.",
      "javadoc": "Open the current version of the stored database for non-update use.\n Change data will not be available.\n The returned BufferFile does not support the BufferMgr\u0027s Save operation.\n@throws IOException thrown if IO error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.buffers.ManagedBufferFile",
        "type_short": "ManagedBufferFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs."
        }
      ]
    },
    {
      "name": "openForUpdate",
      "comment": "Open the current version of the stored database for update use.\n The returned BufferFile supports the Save operation.\n If this item is on a shared file-system, this method initiates an\n item checkin.  If a changeSet is specified, it will be filled with \n all change data since the check-out version.  Change data will be \n read into the change set starting oldest to newest.",
      "javadoc": "Open the current version of the stored database for update use.\n The returned BufferFile supports the Save operation.\n If this item is on a shared file-system, this method initiates an\n item checkin.  If a changeSet is specified, it will be filled with \n all change data since the check-out version.  Change data will be \n read into the change set starting oldest to newest.\n@param checkoutId the associated checkoutId if this item is stored\n on a versioned file-system, otherwise DEFAULT_CHECKOUT_ID can be \n specified.\n@return buffer file\n@throws FileInUseException thrown if unable to obtain the required database lock(s).\n@throws IOException thrown if IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "the associated checkoutId if this item is stored\n on a versioned file-system, otherwise DEFAULT_CHECKOUT_ID can be \n specified."
        }
      ],
      "return": {
        "type_long": "db.buffers.ManagedBufferFile",
        "type_short": "ManagedBufferFile",
        "comment": "buffer file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs."
        }
      ]
    }
  ]
}
