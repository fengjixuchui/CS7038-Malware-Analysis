{
  "name": "FileSystemEventManager",
  "comment": "FileSystemListenerList maintains a list of FileSystemListener\u0027s.\n This class, acting as a FileSystemListener, simply relays each callback to\n all FileSystemListener\u0027s within its list.  Employs either a synchronous \n and asynchronous notification mechanism.",
  "javadoc": "\u003ccode\u003eFileSystemListenerList\u003c/code\u003e maintains a list of FileSystemListener\u0027s.\n This class, acting as a FileSystemListener, simply relays each callback to\n all FileSystemListener\u0027s within its list.  Employs either a synchronous \n and asynchronous notification mechanism.",
  "static": false,
  "implements": [
    "ghidra.framework.store.FileSystemListener"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "listeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.framework.store.FileSystemListener\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "eventQueue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.concurrent.BlockingQueue\u003cghidra.framework.store.FileSystemEventManager.FileSystemEvent\u003e",
      "type_short": "BlockingQueue",
      "constant_value": null
    },
    {
      "name": "disposed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "thread",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Thread",
      "type_short": "Thread",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param enableAsynchronousDispatching if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed.",
      "static": false,
      "params": [
        {
          "name": "enableAsynchronousDispatching",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Add a listener to this list.",
      "javadoc": "Add a listener to this list.\n@param listener the listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.store.FileSystemListener",
          "type_short": "FileSystemListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Remove a listener from this list.",
      "javadoc": "Remove a listener from this list.\n@param listener the listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.store.FileSystemListener",
          "type_short": "FileSystemListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "itemMoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "newParentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "itemRenamed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "itemDeleted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "folderRenamed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "folderName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "newFolderName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "folderMoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "folderName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "newParentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "folderDeleted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "folderName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "itemCreated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "folderCreated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "folderName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "itemChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "syncronize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isAsynchronous",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ev",
          "type_long": "ghidra.framework.store.FileSystemEventManager.FileSystemEvent",
          "type_short": "FileSystemEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleEvent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "ghidra.framework.store.FileSystemEventManager.FileSystemEvent",
          "type_short": "FileSystemEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "flushEvents",
      "comment": "Blocks until all current events have been processed.\n \n Note: clients should only use this method when #isAsynchronous() returns true, since\n this class cannot track when non-threaded events have finished broadcasting to listeners.\n In a synchronous use case, any test that needs to know when client events have been processed\n must use some other mechanism to know when event processing is finished.",
      "javadoc": "Blocks until all current events have been processed.\n \u003cp\u003e\n Note: clients should only use this method when {@link #isAsynchronous()} returns true, since\n this class cannot track when non-threaded events have finished broadcasting to listeners.\n In a synchronous use case, any test that needs to know when client events have been processed\n must use some other mechanism to know when event processing is finished.\n@param timeout the maximum time to wait\n@param unit the time unit of the {@code time} argument\n@return true if the events were processed in the given timeout\n@throws InterruptedException if this waiting thread is interrupted",
      "static": false,
      "params": [
        {
          "name": "timeout",
          "type_long": "long",
          "type_short": "long",
          "comment": "the maximum time to wait"
        },
        {
          "name": "unit",
          "type_long": "java.util.concurrent.TimeUnit",
          "type_short": "TimeUnit",
          "comment": "the time unit of the  argument"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the events were processed in the given timeout"
      },
      "throws": [
        {
          "type_long": "java.lang.InterruptedException",
          "type_short": "InterruptedException",
          "comment": "if this waiting thread is interrupted"
        }
      ]
    }
  ]
}
