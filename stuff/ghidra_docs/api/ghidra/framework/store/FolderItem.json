{
  "name": "FolderItem",
  "comment": "FolderItem represents an individual file\n contained within a FileSystem and is uniquely identified \n by a path string.",
  "javadoc": "\u003ccode\u003eFolderItem\u003c/code\u003e represents an individual file\n contained within a FileSystem and is uniquely identified \n by a path string.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "UNKNOWN_FILE_TYPE",
      "comment": "Underlying file is an unknown/unsupported type.",
      "javadoc": "Underlying file is an unknown/unsupported type.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "DATABASE_FILE_TYPE",
      "comment": "Underlying file is a Database",
      "javadoc": "Underlying file is a Database",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "DATAFILE_FILE_TYPE",
      "comment": "Underlying file is serialized data file",
      "javadoc": "Underlying file is serialized data file",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "DEFAULT_CHECKOUT_ID",
      "comment": "Default checkout ID used when a checkout is not applicable.",
      "javadoc": "Default checkout ID used when a checkout is not applicable.",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "-1"
    },
    {
      "name": "LATEST_VERSION",
      "comment": "Default file version number used to indicate the latest/current version.",
      "javadoc": "Default file version number used to indicate the latest/current version.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    }
  ],
  "methods": [
    {
      "name": "getName",
      "comment": "Return The display name for this item.",
      "javadoc": "Return The display name for this item.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFileID",
      "comment": "Return the file ID if one has been established or null",
      "javadoc": "Return the file ID if one has been established or null\n@throws IOException thrown if IO or access error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO or access error occurs"
        }
      ]
    },
    {
      "name": "resetFileID",
      "comment": "Assign a new file-ID to this local non-versioned file.\n NOTE: This method is only valid for a local non-versioned file-system.",
      "javadoc": "Assign a new file-ID to this local non-versioned file.\n NOTE: This method is only valid for a local non-versioned file-system.\n@return new file-ID\n@throws IOException thrown if IO or access error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "new file-ID"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO or access error occurs"
        }
      ]
    },
    {
      "name": "length",
      "comment": "Returns the length of this domain file.  This size is the minimum disk space\n used for storing this file, but does not account for additional storage space\n used to tracks changes, etc.",
      "javadoc": "Returns the length of this domain file.  This size is the minimum disk space\n used for storing this file, but does not account for additional storage space\n used to tracks changes, etc.\n@return file length\n@throws IOException thrown if IO or access error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "file length"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO or access error occurs"
        }
      ]
    },
    {
      "name": "getContentType",
      "comment": "Return The content type name for this item.",
      "javadoc": "Return The content type name for this item.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getParentPath",
      "comment": "Returns the path of the parent folder.",
      "javadoc": "Returns the path of the parent folder.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPathName",
      "comment": "Return The concatenation of the pathname and the basename\n which can be used to uniquely identify a folder item.",
      "javadoc": "Return The concatenation of the pathname and the basename\n which can be used to uniquely identify a folder item.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isReadOnly",
      "comment": "Returns true if item can be overwritten/deleted.",
      "javadoc": "Returns true if item can be overwritten/deleted.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setReadOnly",
      "comment": "Set the state of the read-only indicator for this non-shared item.",
      "javadoc": "Set the state of the read-only indicator for this non-shared item.\n@param state read-only state\n@throws IOException if an IO error occurs or item is \n stored on a shared file-system",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "read-only state"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs or item is \n stored on a shared file-system"
        }
      ]
    },
    {
      "name": "getContentTypeVersion",
      "comment": "Returns the version of content type.  Note this is the version of the structure/storage\n for the content type, Not the users version of their data.",
      "javadoc": "Returns the version of content type.  Note this is the version of the structure/storage\n for the content type, Not the users version of their data.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setContentTypeVersion",
      "comment": "Sets the version for the content type. This will change whenever the domain objects\n are upgraded.",
      "javadoc": "Sets the version for the content type. This will change whenever the domain objects\n are upgraded.\n@param version the new version for the content type.\n@throws IOException if an IO error occurs or item is \n stored on a shared file-system",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new version for the content type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs or item is \n stored on a shared file-system"
        }
      ]
    },
    {
      "name": "lastModified",
      "comment": "Return The time that this item was last modified.",
      "javadoc": "Return The time that this item was last modified.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCurrentVersion",
      "comment": "Return the latest/current version.",
      "javadoc": "Return the latest/current version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCheckedOut",
      "comment": "Returns true if this item is a checked-out copy from a versioned file system.",
      "javadoc": "Returns true if this item is a checked-out copy from a versioned file system.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCheckedOutExclusive",
      "comment": "Returns true if this item is a checked-out copy with exclusive access from a versioned file system.",
      "javadoc": "Returns true if this item is a checked-out copy with exclusive access from a versioned file system.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isVersioned",
      "comment": "Return true if this is a versioned item, else false",
      "javadoc": "Return true if this is a versioned item, else false\n@throws IOException thrown if an IO error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs."
        }
      ]
    },
    {
      "name": "getCheckoutId",
      "comment": "Returns the checkoutId for this file.  A value of -1 indicates \n a private item.\n NOTE: This method is only valid for a local non-versioned file-system.",
      "javadoc": "Returns the checkoutId for this file.  A value of -1 indicates \n a private item.\n NOTE: This method is only valid for a local non-versioned file-system.\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getCheckoutVersion",
      "comment": "Returns the item version which was checked-out.  A value of -1 indicates \n a private item. \n NOTE: This method is only valid for a local non-versioned file-system.",
      "javadoc": "Returns the item version which was checked-out.  A value of -1 indicates \n a private item. \n NOTE: This method is only valid for a local non-versioned file-system.\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getLocalCheckoutVersion",
      "comment": "Returns the local item version at the time the checkout was\n completed.  A value of -1 indicates a private item.  \n NOTE: This method is only valid for a local non-versioned file-system.",
      "javadoc": "Returns the local item version at the time the checkout was\n completed.  A value of -1 indicates a private item.  \n NOTE: This method is only valid for a local non-versioned file-system.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCheckout",
      "comment": "Set the checkout data associated with this non-shared file.\n NOTE: This method is only valid for a local non-versioned file-system.",
      "javadoc": "Set the checkout data associated with this non-shared file.\n NOTE: This method is only valid for a local non-versioned file-system.\n@param checkoutId checkout ID (provided by ItemCheckoutStatus).\n@param exclusive true if checkout is exclusive\n@param checkoutVersion the item version which was checked-out (provided\n by ItemCheckoutStatus).\n@param localVersion the local item version at the time the checkout was\n completed.\n@throws IOException if an IO error occurs or item is \n stored on a shared file-system",
      "static": false,
      "params": [
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "checkout ID (provided by ItemCheckoutStatus)."
        },
        {
          "name": "exclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if checkout is exclusive"
        },
        {
          "name": "checkoutVersion",
          "type_long": "int",
          "type_short": "int",
          "comment": "the item version which was checked-out (provided\n by ItemCheckoutStatus)."
        },
        {
          "name": "localVersion",
          "type_long": "int",
          "type_short": "int",
          "comment": "the local item version at the time the checkout was\n completed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs or item is \n stored on a shared file-system"
        }
      ]
    },
    {
      "name": "clearCheckout",
      "comment": "Clears the checkout data associated with this non-shared file.\n NOTE: This method is only valid for a local non-versioned file-system.",
      "javadoc": "Clears the checkout data associated with this non-shared file.\n NOTE: This method is only valid for a local non-versioned file-system.\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "delete",
      "comment": "Deletes the item or a specific version.  If a specific version \n is specified, it must either be the oldest or latest (i.e., current).",
      "javadoc": "Deletes the item or a specific version.  If a specific version \n is specified, it must either be the oldest or latest (i.e., current).\n@param version specific version to be deleted, or -1 to remove\n all versions.\n@param user user name\n@throws IOException if an IO error occurs, including the inability \n to delete a version because this item is checked-out, the user does\n not have permission, or the specified version is not the oldest or\n latest.",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "specific version to be deleted, or -1 to remove\n all versions."
        },
        {
          "name": "user",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "user name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs, including the inability \n to delete a version because this item is checked-out, the user does\n not have permission, or the specified version is not the oldest or\n latest."
        }
      ]
    },
    {
      "name": "getVersions",
      "comment": "Returns list of all available versions or null\n if item is not versioned.",
      "javadoc": "Returns list of all available versions or null\n if item is not versioned.\n@throws IOException thrown if an IO error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.store.Version[]",
        "type_short": "ghidra.framework.store.Version[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs."
        }
      ]
    },
    {
      "name": "checkout",
      "comment": "Checkout this folder item.",
      "javadoc": "Checkout this folder item.\n@param checkoutType type of checkout\n@param user user requesting checkout\n@param projectPath path of project where checkout was made\n@return checkout status or null if exclusive checkout request failed\n@throws IOException if an IO error occurs or this item is not versioned",
      "static": false,
      "params": [
        {
          "name": "checkoutType",
          "type_long": "ghidra.framework.store.CheckoutType",
          "type_short": "CheckoutType",
          "comment": "type of checkout"
        },
        {
          "name": "user",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "user requesting checkout"
        },
        {
          "name": "projectPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path of project where checkout was made"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.ItemCheckoutStatus",
        "type_short": "ItemCheckoutStatus",
        "comment": "checkout status or null if exclusive checkout request failed"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs or this item is not versioned"
        }
      ]
    },
    {
      "name": "terminateCheckout",
      "comment": "Terminates a checkout.  The checkout ID becomes invalid, therefore the \n associated checkout copy should either be removed or converted to a\n private file.",
      "javadoc": "Terminates a checkout.  The checkout ID becomes invalid, therefore the \n associated checkout copy should either be removed or converted to a\n private file.\n@param checkoutId checkout ID\n@param notify if true item change notification will be sent\n@throws IOException if an IO error occurs or this item is not versioned",
      "static": false,
      "params": [
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "checkout ID"
        },
        {
          "name": "notify",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true item change notification will be sent"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs or this item is not versioned"
        }
      ]
    },
    {
      "name": "hasCheckouts",
      "comment": "Returns true if this item is versioned and has one or more checkouts.",
      "javadoc": "Returns true if this item is versioned and has one or more checkouts.\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "canRecover",
      "comment": "Returns true if unsaved file changes can be recovered.",
      "javadoc": "Returns true if unsaved file changes can be recovered.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCheckout",
      "comment": "Get the checkout status which corresponds to the specified checkout ID.",
      "javadoc": "Get the checkout status which corresponds to the specified checkout ID.\n@param checkoutId checkout ID\n@return checkout status or null if checkout ID not found.\n@throws IOException if an IO error occurs or this item is not versioned",
      "static": false,
      "params": [
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "checkout ID"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.ItemCheckoutStatus",
        "type_short": "ItemCheckoutStatus",
        "comment": "checkout status or null if checkout ID not found."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs or this item is not versioned"
        }
      ]
    },
    {
      "name": "getCheckouts",
      "comment": "Get all current checkouts for this item.",
      "javadoc": "Get all current checkouts for this item.\n@return array of checkouts\n@throws IOException if an IO error occurs or this item is not versioned",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.store.ItemCheckoutStatus[]",
        "type_short": "ghidra.framework.store.ItemCheckoutStatus[]",
        "comment": "array of checkouts"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs or this item is not versioned"
        }
      ]
    },
    {
      "name": "isCheckinActive",
      "comment": "Returns true if this item is versioned and has a checkin in-progress.",
      "javadoc": "Returns true if this item is versioned and has a checkin in-progress.\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "updateCheckoutVersion",
      "comment": "Update the checkout version associated with this versioned item.",
      "javadoc": "Update the checkout version associated with this versioned item.\n@param checkoutId id corresponding to an existing checkout\n@param checkoutVersion\n@param user\n@throws IOException if an IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "id corresponding to an existing checkout"
        },
        {
          "name": "checkoutVersion",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "user",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs."
        }
      ]
    },
    {
      "name": "output",
      "comment": "Serialize (i.e., pack) this item into the specified outputFile.",
      "javadoc": "Serialize (i.e., pack) this item into the specified outputFile.\n@param outputFile packed output file to be created\n@param version if this item is versioned, specifies the version to be output, otherwise\n -1 should be specified.\n@param monitor progress monitor\n@throws IOException\n@throws CancelledException if monitor cancels operation",
      "static": false,
      "params": [
        {
          "name": "outputFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "packed output file to be created"
        },
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "if this item is versioned, specifies the version to be output, otherwise\n -1 should be specified."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "progress monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if monitor cancels operation"
        }
      ]
    },
    {
      "name": "refresh",
      "comment": "Returns this instance after refresh or null if item no longer exists",
      "javadoc": "Returns this instance after refresh or null if item no longer exists",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.store.FolderItem",
        "type_short": "FolderItem",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
