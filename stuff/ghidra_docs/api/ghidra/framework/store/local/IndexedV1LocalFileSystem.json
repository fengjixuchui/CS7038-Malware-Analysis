{
  "name": "IndexedV1LocalFileSystem",
  "comment": "IndexedLocalFileSystem implements a case-sensitive indexed filesystem\n which uses a shallow storage hierarchy with no restriction on file name or path \n length.  This filesystem is identified by the existence of an index file (~index.dat) \n and recovery journal (~index.jrn).",
  "javadoc": "\u003ccode\u003eIndexedLocalFileSystem\u003c/code\u003e implements a case-sensitive indexed filesystem\n which uses a shallow storage hierarchy with no restriction on file name or path \n length.  This filesystem is identified by the existence of an index file (~index.dat) \n and recovery journal (~index.jrn).",
  "static": false,
  "implements": [],
  "extends": "ghidra.framework.store.local.IndexedLocalFileSystem",
  "fields": [
    {
      "name": "INDEX_VERSION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "fileIdMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cjava.lang.String,ghidra.framework.store.local.IndexedLocalFileSystem.Item\u003e",
      "type_short": "HashMap",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor.",
      "javadoc": "Constructor.\n@param file path path for root directory.\n@param isVersioned if true item versioning will be enabled.\n@param readOnly if true modifications within this file-system will not be allowed\n and result in an ReadOnlyException\n@param enableAsyncronousDispatching if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed.\n@throws FileNotFoundException if specified rootPath does not exist\n@throws IOException if error occurs while reading/writing index files",
      "static": false,
      "params": [
        {
          "name": "rootPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "isVersioned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true item versioning will be enabled."
        },
        {
          "name": "readOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true modifications within this file-system will not be allowed\n and result in an ReadOnlyException"
        },
        {
          "name": "enableAsyncronousDispatching",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed."
        },
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error occurs while reading/writing index files"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct existing indexed filesystem with an empty index.\n This can be used to prepare for rebuilding the filesystem index.",
      "javadoc": "Construct existing indexed filesystem with an empty index.\n This can be used to prepare for rebuilding the filesystem index.\n@param rootPath\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "rootPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getIndexImplementationVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "formatIndexItem",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "item",
          "type_long": "ghidra.framework.store.local.IndexedLocalFileSystem.Item",
          "type_short": "Item",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseIndexItem",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "ghidra.framework.store.local.IndexedLocalFileSystem.Folder",
          "type_short": "Folder",
          "comment": ""
        },
        {
          "name": "entry",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.local.IndexedLocalFileSystem.Item",
        "type_short": "Item",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fileIdChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pfile",
          "type_long": "ghidra.util.PropertyFile",
          "type_short": "PropertyFile",
          "comment": ""
        },
        {
          "name": "oldFileId",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFileIdMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.HashMap\u003cjava.lang.String,ghidra.framework.store.local.IndexedLocalFileSystem.Item\u003e",
        "type_short": "HashMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mapFileID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fileId",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "item",
          "type_long": "ghidra.framework.store.local.IndexedLocalFileSystem.Item",
          "type_short": "Item",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "unmapFileID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fileId",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getItem",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fileID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.FolderItem",
        "type_short": "FolderItem",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "java.lang.UnsupportedOperationException",
          "type_short": "UnsupportedOperationException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFileSystem",
      "comment": "Get the V0 indexed-file-system instance.  File system storage should first be \n pre-qualified as an having indexed storage using the #isIndexed(String) method\n and have the correct version.",
      "javadoc": "Get the V0 indexed-file-system instance.  File system storage should first be \n pre-qualified as an having indexed storage using the {@link #isIndexed(String)} method\n and have the correct version.\n@param rootPath\n@param isVersioned\n@param readOnly\n@param enableAsyncronousDispatching\n@return file-system instance\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "rootPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "isVersioned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "readOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "enableAsyncronousDispatching",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.local.IndexedV1LocalFileSystem",
        "type_short": "IndexedV1LocalFileSystem",
        "comment": "file-system instance"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "rebuild",
      "comment": "Completely rebuild filesystem index using item information contained\n within indexed property files.  Empty folders will be lost.",
      "javadoc": "Completely rebuild filesystem index using item information contained\n within indexed property files.  Empty folders will be lost.\n@param rootDir\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "rootDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
