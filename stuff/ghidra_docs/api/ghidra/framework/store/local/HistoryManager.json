{
  "name": "HistoryManager",
  "comment": "HistoryManager manages version data for a versioned LocalFolderItem.\n History data is maintained within the file \u0027historyt.dat\u0027 located within the\n items data directory.",
  "javadoc": "\u003ccode\u003eHistoryManager\u003c/code\u003e manages version data for a versioned LocalFolderItem.\n History data is maintained within the file \u0027historyt.dat\u0027 located within the\n items data directory.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "HISTORY_FILE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"history.dat\""
    },
    {
      "name": "item",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.store.local.LocalFolderItem",
      "type_short": "LocalFolderItem",
      "constant_value": null
    },
    {
      "name": "minVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "curVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "versions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.store.Version[]",
      "type_short": "ghidra.framework.store.Version[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor.",
      "javadoc": "Constructor.\n@param item folder item\n@param create if true an empty history data file is written,\n else the initial data is read from the file.\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "item",
          "type_long": "ghidra.framework.store.local.LocalFolderItem",
          "type_short": "LocalFolderItem",
          "comment": "folder item"
        },
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true an empty history data file is written,\n else the initial data is read from the file."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getHistoryFile",
      "comment": "Returns the file which contains version history data.  Content of this\n file is managed by the HistoryManager.",
      "javadoc": "Returns the file which contains version history data.  Content of this\n file is managed by the HistoryManager.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixHistory",
      "comment": "Add and/or remove history entries to agree with specified minimum and current versions.",
      "javadoc": "Add and/or remove history entries to agree with specified minimum and current versions.\n@param minVersion minimum version\n@param curVersion current version\n@return true if a version correction was performed",
      "static": false,
      "params": [
        {
          "name": "minVersion",
          "type_long": "int",
          "type_short": "int",
          "comment": "minimum version"
        },
        {
          "name": "curVersion",
          "type_long": "int",
          "type_short": "int",
          "comment": "current version"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a version correction was performed"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "versionAdded",
      "comment": "Record the creation of a new item version.",
      "javadoc": "Record the creation of a new item version.\n@param version version number\n@param user user who created version",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "version number"
        },
        {
          "name": "time",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "user",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "user who created version"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "versionDeleted",
      "comment": "Remove the specified version from the history data.\n This method only modifies the data if the minimum or\n latest version is specified.",
      "javadoc": "Remove the specified version from the history data.\n This method only modifies the data if the minimum or\n latest version is specified.\n@param version minimum or latest version",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "minimum or latest version"
        },
        {
          "name": "user",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getVersions",
      "comment": "Return all versions contained within the history.  Versions are\n ordered oldest to newest (i.e., minumum to latest).",
      "javadoc": "Return all versions contained within the history.  Versions are\n ordered oldest to newest (i.e., minumum to latest).\n@throws IOException if an IO error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.store.Version[]",
        "type_short": "ghidra.framework.store.Version[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs."
        }
      ]
    },
    {
      "name": "getVersion",
      "comment": "Return specific version.",
      "javadoc": "Return specific version.\n@param version item version\n@return version object or null if not found\n@throws IOException if an IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "item version"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.Version",
        "type_short": "Version",
        "comment": "version object or null if not found"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs."
        }
      ]
    },
    {
      "name": "validate",
      "comment": "If validationRequired is true and the history data file has been \n updated, the history data will be re-initialized from the file.\n This is undesirable and is only required when mulitple instances \n of a LocalFolderItem are used for a specific item path (e.g., unit testing).",
      "javadoc": "If validationRequired is true and the history data file has been \n updated, the history data will be re-initialized from the file.\n This is undesirable and is only required when mulitple instances \n of a LocalFolderItem are used for a specific item path (e.g., unit testing).",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readHistoryFile",
      "comment": "Read data from history file.",
      "javadoc": "Read data from history file.\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeHistoryFile",
      "comment": "Write all history data to file.",
      "javadoc": "Write all history data to file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "appendHistoryFile",
      "comment": "Write new version data to file.",
      "javadoc": "Write new version data to file.\n@param ver new version data (must be latest version)",
      "static": false,
      "params": [
        {
          "name": "ver",
          "type_long": "ghidra.framework.store.Version",
          "type_short": "Version",
          "comment": "new version data (must be latest version)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "encodeVersion",
      "comment": "Encode item version data for file output.",
      "javadoc": "Encode item version data for file output.\n@param ver version data\n@return ",
      "static": false,
      "params": [
        {
          "name": "ver",
          "type_long": "ghidra.framework.store.Version",
          "type_short": "Version",
          "comment": "version data"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decodeVersion",
      "comment": "Decode item version data from file.",
      "javadoc": "Decode item version data from file.\n@param line file input line\n@return parsed version data\n@throws NumberFormatException\n@throws NoSuchElementException",
      "static": false,
      "params": [
        {
          "name": "line",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "file input line"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.Version",
        "type_short": "Version",
        "comment": "parsed version data"
      },
      "throws": [
        {
          "type_long": "java.lang.NumberFormatException",
          "type_short": "NumberFormatException",
          "comment": ""
        },
        {
          "type_long": "java.util.NoSuchElementException",
          "type_short": "NoSuchElementException",
          "comment": ""
        }
      ]
    },
    {
      "name": "encodeString",
      "comment": "Escape special characters within a string and output to string buffer.",
      "javadoc": "Escape special characters within a string and output to string buffer.\n@param text text string to be escaped\n@param buf output buffer",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "text string to be escaped"
        },
        {
          "name": "buf",
          "type_long": "java.lang.StringBuffer",
          "type_short": "StringBuffer",
          "comment": "output buffer"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decodeString",
      "comment": "Decode an escaped string.",
      "javadoc": "Decode an escaped string.\n@param text string containing escaped characters.\n@return decoded string",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string containing escaped characters."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "decoded string"
      },
      "throws": []
    }
  ]
}
