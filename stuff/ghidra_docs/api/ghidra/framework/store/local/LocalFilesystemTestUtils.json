{
  "name": "LocalFilesystemTestUtils",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createMangledFilesystem",
      "comment": "Create empty mangled filesystem",
      "javadoc": "Create empty mangled filesystem\n@param rootPath path for root directory (must already exist).\n@param isVersioned if true item versioning will be enabled.\n@param readOnly if true modifications within this file-system will not be allowed\n and result in an ReadOnlyException\n@param enableAsyncronousDispatching if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed.\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "rootPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path for root directory (must already exist)."
        },
        {
          "name": "isVersioned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true item versioning will be enabled."
        },
        {
          "name": "readOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true modifications within this file-system will not be allowed\n and result in an ReadOnlyException"
        },
        {
          "name": "enableAsyncronousDispatching",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.local.MangledLocalFileSystem",
        "type_short": "MangledLocalFileSystem",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createOriginalIndexedFilesystem",
      "comment": "Create empty original Indexed filesystem.  The original index file lacked any version indicator\n but will be treated as a version 0 index.",
      "javadoc": "Create empty original Indexed filesystem.  The original index file lacked any version indicator\n but will be treated as a version 0 index.\n@param rootPath path for root directory (must already exist).\n@param isVersioned if true item versioning will be enabled.\n@param readOnly if true modifications within this file-system will not be allowed\n and result in an ReadOnlyException\n@param enableAsyncronousDispatching if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed.\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "rootPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path for root directory (must already exist)."
        },
        {
          "name": "isVersioned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true item versioning will be enabled."
        },
        {
          "name": "readOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true modifications within this file-system will not be allowed\n and result in an ReadOnlyException"
        },
        {
          "name": "enableAsyncronousDispatching",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.local.IndexedLocalFileSystem",
        "type_short": "IndexedLocalFileSystem",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createIndexedV0Filesystem",
      "comment": "Create empty V0 Indexed filesystem.  This is an original Indexed filesystem with the addition \n of a version 0 indicator within the index file.",
      "javadoc": "Create empty V0 Indexed filesystem.  This is an original Indexed filesystem with the addition \n of a version 0 indicator within the index file.\n@param rootPath path for root directory (must already exist).\n@param isVersioned if true item versioning will be enabled.\n@param readOnly if true modifications within this file-system will not be allowed\n and result in an ReadOnlyException\n@param enableAsyncronousDispatching if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed.\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "rootPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path for root directory (must already exist)."
        },
        {
          "name": "isVersioned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true item versioning will be enabled."
        },
        {
          "name": "readOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true modifications within this file-system will not be allowed\n and result in an ReadOnlyException"
        },
        {
          "name": "enableAsyncronousDispatching",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.local.IndexedLocalFileSystem",
        "type_short": "IndexedLocalFileSystem",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createIndexedV1Filesystem",
      "comment": "Create empty mangled filesystem",
      "javadoc": "Create empty mangled filesystem\n@param rootPath path for root directory (must already exist).\n@param isVersioned if true item versioning will be enabled.\n@param readOnly if true modifications within this file-system will not be allowed\n and result in an ReadOnlyException\n@param enableAsyncronousDispatching if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed.\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "rootPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path for root directory (must already exist)."
        },
        {
          "name": "isVersioned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true item versioning will be enabled."
        },
        {
          "name": "readOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true modifications within this file-system will not be allowed\n and result in an ReadOnlyException"
        },
        {
          "name": "enableAsyncronousDispatching",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.local.IndexedV1LocalFileSystem",
        "type_short": "IndexedV1LocalFileSystem",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createRootDir",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "rootPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
