{
  "name": "ItemSerializer",
  "comment": "ItemSerializer facilitates the compressing and writing of a data stream\n to a \"packed\" file.  The resulting \"packed\" file will contain the following meta-data\n which is available after construction:\n \n Item name\n Content type (int)\n File type (int)\n Data length\n ",
  "javadoc": "\u003ccode\u003eItemSerializer\u003c/code\u003e facilitates the compressing and writing of a data stream\n to a \"packed\" file.  The resulting \"packed\" file will contain the following meta-data\n which is available after construction:\n \u003cul\u003e\n \u003cli\u003eItem name\u003c/li\u003e\n \u003cli\u003eContent type (int)\u003c/li\u003e\n \u003cli\u003eFile type (int)\u003c/li\u003e\n \u003cli\u003eData length\u003c/li\u003e\n \u003c/ul\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "MAGIC_NUMBER_POS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "MAGIC_NUMBER_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "MAGIC_NUMBER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "3328196572606966816"
    },
    {
      "name": "FORMAT_VERSION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "ZIP_ENTRY_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"FOLDER_ITEM\""
    },
    {
      "name": "IO_BUFFER_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32768"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "outputItem",
      "comment": "Read and compress data from the specified content stream and write to \n a packed file along with additional meta-data.",
      "javadoc": "Read and compress data from the specified content stream and write to \n a packed file along with additional meta-data.\n@param itemName item name\n@param contentType content type\n@param fileType file type\n@param length content length to be read\n@param content content input stream\n@param packedFile output packed file to be created\n@param monitor task monitor\n@throws CancelledException\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "item name"
        },
        {
          "name": "contentType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "content type"
        },
        {
          "name": "fileType",
          "type_long": "int",
          "type_short": "int",
          "comment": "file type"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "content length to be read"
        },
        {
          "name": "content",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "content input stream"
        },
        {
          "name": "packedFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "output packed file to be created"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isPackedFile",
      "comment": "A simple utility method to determine if the given file is a packed file as created by \n this class.",
      "javadoc": "A simple utility method to determine if the given file is a packed file as created by \n this class.\n@param file The file to check\n@return True if it is a packed file\n@throws IOException If there is a problem reading the given file",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "The file to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if it is a packed file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "If there is a problem reading the given file"
        }
      ]
    },
    {
      "name": "isPackedFile",
      "comment": "A convenience method for checking if the file denoted by the given inputStream is a \n packed file.  \n \n Note:  This method will NOT close the given inputStream.",
      "javadoc": "A convenience method for checking if the file denoted by the given inputStream is a \n packed file.  \n \u003cp\u003e\n \u003cb\u003eNote: \u003c/b\u003e This method will NOT close the given inputStream.\n@param inputStream a stream for accessing bytes of what may be a packed file\n@return true if the bytes from the inputStream represent the bytes of a packed file\n@throws IOException If there is a problem accessing the inputStream\n@see #isPackedFile(File)",
      "static": true,
      "params": [
        {
          "name": "inputStream",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "a stream for accessing bytes of what may be a packed file"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the bytes from the inputStream represent the bytes of a packed file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "If there is a problem accessing the inputStream"
        }
      ]
    }
  ]
}
