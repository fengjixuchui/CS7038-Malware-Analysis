{
  "name": "FileChangeListener",
  "comment": "Defines a file change listener interface.",
  "javadoc": "Defines a file change listener interface.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "fileModified",
      "comment": "Used to notify a listener that the specified file has been modified.\n If the file watcher was created with a lock file, the lock will be set\n on behalf of the caller.  This method should not attempt to alter the \n lock.",
      "javadoc": "Used to notify a listener that the specified file has been modified.\n If the file watcher was created with a lock file, the lock will be set\n on behalf of the caller.  This method should not attempt to alter the \n lock.\n@param file the modified file.",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the modified file."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fileRemoved",
      "comment": "Used to notify a listener that the specified file has been removed.\n If the file watcher was created with a lock file, the lock will be set\n on behalf of the caller.  This method should not attempt to alter the \n lock.",
      "javadoc": "Used to notify a listener that the specified file has been removed.\n If the file watcher was created with a lock file, the lock will be set\n on behalf of the caller.  This method should not attempt to alter the \n lock.\n@param file the removed file.",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the removed file."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
