{
  "name": "CheckoutManager",
  "comment": "CheckoutManager manages checkout data for a versioned\n LocalFolderItem. Checkout data is maintained within the file \u0027checkout.dat\u0027\n located within the items data directory.",
  "javadoc": "\u003ccode\u003eCheckoutManager\u003c/code\u003e manages checkout data for a versioned\n LocalFolderItem. Checkout data is maintained within the file \u0027checkout.dat\u0027\n located within the items data directory.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "CHECKOUTS_FILE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"checkout.dat\""
    },
    {
      "name": "item",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.store.local.LocalFolderItem",
      "type_short": "LocalFolderItem",
      "constant_value": null
    },
    {
      "name": "nextCheckoutId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "checkouts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.framework.store.ItemCheckoutStatus\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor.",
      "javadoc": "Constructor.\n@param item folder item\n@param create if true an empty checkout data file is written, else the\n            initial data is read from the file.\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "item",
          "type_long": "ghidra.framework.store.local.LocalFolderItem",
          "type_short": "LocalFolderItem",
          "comment": "folder item"
        },
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true an empty checkout data file is written, else the\n            initial data is read from the file."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getCheckoutsFile",
      "comment": "Returns the file which contains checkout data.",
      "javadoc": "Returns the file which contains checkout data.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newCheckout",
      "comment": "Requests a new checkout for the associated item.",
      "javadoc": "Requests a new checkout for the associated item.\n@param checkoutType type of checkout\n@param user name of user requesting checkout\n@param version item version to be checked-out\n@return checkout data or null if exclusive checkout denied due to\n         existing checkouts.\n@throws IOException if checkout fails",
      "static": false,
      "params": [
        {
          "name": "checkoutType",
          "type_long": "ghidra.framework.store.CheckoutType",
          "type_short": "CheckoutType",
          "comment": "type of checkout"
        },
        {
          "name": "user",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of user requesting checkout"
        },
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "item version to be checked-out"
        },
        {
          "name": "projectPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.ItemCheckoutStatus",
        "type_short": "ItemCheckoutStatus",
        "comment": "checkout data or null if exclusive checkout denied due to\n         existing checkouts."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if checkout fails"
        }
      ]
    },
    {
      "name": "updateCheckout",
      "comment": "Update the version associated with the specified checkout",
      "javadoc": "Update the version associated with the specified checkout\n@param checkoutId checkout ID to be updated\n@param version item version to be associated with checkout",
      "static": false,
      "params": [
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "checkout ID to be updated"
        },
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "item version to be associated with checkout"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "endCheckout",
      "comment": "Terminate the specified checkout",
      "javadoc": "Terminate the specified checkout\n@param checkoutId checkout ID\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "checkout ID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isCheckedOut",
      "comment": "Returns true if the specified version of the associated item is\n checked-out.",
      "javadoc": "Returns true if the specified version of the associated item is\n checked-out.\n@param version the specific version to check for checkouts.",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "the specific version to check for checkouts."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isCheckedOut",
      "comment": "Returns true if the any version of the associated item is checked-out.",
      "javadoc": "Returns true if the any version of the associated item is checked-out.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getCheckout",
      "comment": "Returns the checkout data corresponding to the specified checkout ID.\n Null is returned if checkout ID is not found.",
      "javadoc": "Returns the checkout data corresponding to the specified checkout ID.\n Null is returned if checkout ID is not found.\n@param checkoutId checkout ID",
      "static": false,
      "params": [
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "checkout ID"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.ItemCheckoutStatus",
        "type_short": "ItemCheckoutStatus",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getAllCheckouts",
      "comment": "Returns the checkout data for all existing checkouts of the associated\n item.",
      "javadoc": "Returns the checkout data for all existing checkouts of the associated\n item.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.store.ItemCheckoutStatus[]",
        "type_short": "ghidra.framework.store.ItemCheckoutStatus[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "validate",
      "comment": "If validationRequired is true and the checkout data file has been\n updated, the checkout data will be re-initialized from the file. This is\n undesirable and is only required when multiple instances of a\n LocalFolderItem are used for a specific item path (e.g., unit testing).",
      "javadoc": "If validationRequired is true and the checkout data file has been\n updated, the checkout data will be re-initialized from the file. This is\n undesirable and is only required when multiple instances of a\n LocalFolderItem are used for a specific item path (e.g., unit testing).",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readCheckoutsFile",
      "comment": "Read data from checkout file.",
      "javadoc": "Read data from checkout file.\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parseCheckoutElement",
      "comment": "Parse checkout element from file.",
      "javadoc": "Parse checkout element from file.\n@param coElement checkout data element\n@return checkout data for specified element\n@throws JDOMException",
      "static": false,
      "params": [
        {
          "name": "coElement",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "checkout data element"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.ItemCheckoutStatus",
        "type_short": "ItemCheckoutStatus",
        "comment": "checkout data for specified element"
      },
      "throws": [
        {
          "type_long": "org.jdom.JDOMException",
          "type_short": "JDOMException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeCheckoutsFile",
      "comment": "Write checkout data file.",
      "javadoc": "Write checkout data file.\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getCheckoutElement",
      "comment": "Build checkout data element",
      "javadoc": "Build checkout data element\n@param coStatus checkout data\n@return checkout data element",
      "static": false,
      "params": [
        {
          "name": "coStatus",
          "type_long": "ghidra.framework.store.ItemCheckoutStatus",
          "type_short": "ItemCheckoutStatus",
          "comment": "checkout data"
        }
      ],
      "return": {
        "type_long": "org.jdom.Element",
        "type_short": "Element",
        "comment": "checkout data element"
      },
      "throws": []
    }
  ]
}
