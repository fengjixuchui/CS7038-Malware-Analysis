{
  "name": "VersionedDatabase",
  "comment": "VersionedDatabase corresponds to a versioned database.",
  "javadoc": "\u003ccode\u003eVersionedDatabase\u003c/code\u003e corresponds to a versioned database.",
  "static": false,
  "implements": [],
  "extends": "db.Database",
  "fields": [
    {
      "name": "log",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "org.apache.logging.log4j.Logger",
      "type_short": "Logger",
      "constant_value": null
    },
    {
      "name": "LATEST_VERSION",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "DEFAULT_CHECKOUT_ID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "-1"
    },
    {
      "name": "verDBListener",
      "comment": "Change listener",
      "javadoc": "Change listener",
      "static": false,
      "type_long": "ghidra.framework.store.db.VersionedDBListener",
      "type_short": "VersionedDBListener",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "General \"Versioned\" Database Constructor.",
      "javadoc": "General \"Versioned\" Database Constructor.\n@param dbDir\n@param verDBListener\n@param create if true an empty database will be created.\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "verDBListener",
          "type_long": "ghidra.framework.store.db.VersionedDBListener",
          "type_short": "VersionedDBListener",
          "comment": ""
        },
        {
          "name": "create",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true an empty database will be created."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for an existing \"Versioned\" Database.",
      "javadoc": "Constructor for an existing \"Versioned\" Database.\n@param dbDir database directory\n@param verDBListener\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "database directory"
        },
        {
          "name": "verDBListener",
          "type_long": "ghidra.framework.store.db.VersionedDBListener",
          "type_short": "VersionedDBListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new \"Versioned\" Database from an existing srcFile.",
      "javadoc": "Construct a new \"Versioned\" Database from an existing srcFile.\n@param dbDir\n@param srcFile\n@param monitor\n@throws IOException\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "srcFile",
          "type_long": "db.buffers.BufferFile",
          "type_short": "BufferFile",
          "comment": ""
        },
        {
          "name": "verDBListener",
          "type_long": "ghidra.framework.store.db.VersionedDBListener",
          "type_short": "VersionedDBListener",
          "comment": ""
        },
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new \"Versioned\" Database from a packed database file",
      "javadoc": "Construct a new \"Versioned\" Database from a packed database file\n@param dbDir\n@param packedFile\n@param verDBListener\n@param checkoutId\n@param comment\n@param monitor\n@throws IOException\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "packedFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "verDBListener",
          "type_long": "ghidra.framework.store.db.VersionedDBListener",
          "type_short": "VersionedDBListener",
          "comment": ""
        },
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createVersionedDatabase",
      "comment": "Create a new database and provide the initial buffer file for writing.",
      "javadoc": "Create a new database and provide the initial buffer file for writing.\n@param dbDir\n@param bufferSize\n@return initial buffer file\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "bufferSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "verDBListener",
          "type_long": "ghidra.framework.store.db.VersionedDBListener",
          "type_short": "VersionedDBListener",
          "comment": ""
        },
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.buffers.LocalManagedBufferFile",
        "type_short": "LocalManagedBufferFile",
        "comment": "initial buffer file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getMinimumVersion",
      "comment": "Returns the version number associated with the oldest buffer file version.",
      "javadoc": "Returns the version number associated with the oldest buffer file version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCurrentVersion",
      "comment": "Returns the version number associated with the latest buffer file version.",
      "javadoc": "Returns the version number associated with the latest buffer file version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteMinimumVersion",
      "comment": "Delete oldest version.",
      "javadoc": "Delete oldest version.\n@throws IOException if an error occurs or this is the only version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an error occurs or this is the only version."
        }
      ]
    },
    {
      "name": "deleteCurrentVersion",
      "comment": "Delete latest version.",
      "javadoc": "Delete latest version.\n@throws IOException if an error occurs or this is the only version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an error occurs or this is the only version."
        }
      ]
    },
    {
      "name": "openBufferFile",
      "comment": "Open a specific version of this database for non-update use.",
      "javadoc": "Open a specific version of this database for non-update use.\n@param version database version or LATEST_VERSION for current version\n@param minChangeDataVer the minimum database version whose change data\n should be associated with the returned buffer file.  A value of -1 indicates that\n change data is not required.\n@return buffer file for non-update use.\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "database version or LATEST_VERSION for current version"
        },
        {
          "name": "minChangeDataVer",
          "type_long": "int",
          "type_short": "int",
          "comment": "the minimum database version whose change data\n should be associated with the returned buffer file.  A value of -1 indicates that\n change data is not required."
        }
      ],
      "return": {
        "type_long": "db.buffers.LocalManagedBufferFile",
        "type_short": "LocalManagedBufferFile",
        "comment": "buffer file for non-update use."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "open",
      "comment": "Open a specific version of the stored database for non-update use.\n The returned handle does not support the Save operation.",
      "javadoc": "Open a specific version of the stored database for non-update use.\n The returned handle does not support the Save operation.\n@param version database version\n@param monitor task monitor (may be null)\n@return database handle\n@throws FileInUseException thrown if unable to obtain the required database lock(s).\n@throws IOException thrown if IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "database version"
        },
        {
          "name": "minChangeDataVer",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor (may be null)"
        }
      ],
      "return": {
        "type_long": "db.DBHandle",
        "type_short": "DBHandle",
        "comment": "database handle"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO error occurs."
        }
      ]
    },
    {
      "name": "openForUpdate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.DBHandle",
        "type_short": "DBHandle",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "openBufferFileForUpdate",
      "comment": "Open the current version of this database for update use.",
      "javadoc": "Open the current version of this database for update use.\n@param checkoutId checkout ID\n@return updateable buffer file\n@throws IOException if update not permitted or other error occurs",
      "static": false,
      "params": [
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "checkout ID"
        }
      ],
      "return": {
        "type_long": "db.buffers.LocalManagedBufferFile",
        "type_short": "LocalManagedBufferFile",
        "comment": "updateable buffer file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if update not permitted or other error occurs"
        }
      ]
    },
    {
      "name": "dbMoved",
      "comment": "Following a move of the database directory,\n this method should be invoked if this instance will\n continue to be used.",
      "javadoc": "Following a move of the database directory,\n this method should be invoked if this instance will\n continue to be used.\n@param dbDir new database directory",
      "static": false,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "new database directory"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "scanFiles",
      "comment": "Scan files and update state.",
      "javadoc": "Scan files and update state.\n@param repair if true files are repaired if needed.",
      "static": false,
      "params": [
        {
          "name": "repair",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true files are repaired if needed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "output",
      "comment": "Output the current version of this database to a packed storage file.",
      "javadoc": "Output the current version of this database to a packed storage file.\n@param outputFile packed storage file to be written\n@param name database name\n@param filetype application file type\n@param contentType user content type\n@param monitor\n@throws IOException\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "outputFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "packed storage file to be written"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "database name"
        },
        {
          "name": "filetype",
          "type_long": "int",
          "type_short": "int",
          "comment": "application file type"
        },
        {
          "name": "contentType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "user content type"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    }
  ]
}
