{
  "name": "PrivateDatabase",
  "comment": "PrivateDatabase corresponds to a non-versioned database.",
  "javadoc": "\u003ccode\u003ePrivateDatabase\u003c/code\u003e corresponds to a non-versioned database.",
  "static": false,
  "implements": [],
  "extends": "db.Database",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor used to create an empty \"Non-Versioned\" database.",
      "javadoc": "Constructor used to create an empty \"Non-Versioned\" database.\n@param dbDir database directory\n@param dbFileListener database listener which will be notified when\n initial version is created.\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "database directory"
        },
        {
          "name": "dbFileListener",
          "type_long": "db.DBFileListener",
          "type_short": "DBFileListener",
          "comment": "database listener which will be notified when\n initial version is created."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for an existing \"Non-Versioned\" Database.",
      "javadoc": "Constructor for an existing \"Non-Versioned\" Database.\n@param dbDir database directory\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "database directory"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new Database from an existing srcFile.",
      "javadoc": "Construct a new Database from an existing srcFile.\n@param dbDir\n@param srcFile\n@param resetDatabaseId if true database ID will be reset for new Database\n@param monitor\n@throws IOException\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "srcFile",
          "type_long": "db.buffers.BufferFile",
          "type_short": "BufferFile",
          "comment": ""
        },
        {
          "name": "resetDatabaseId",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true database ID will be reset for new Database"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new Database from an existing packed database file.",
      "javadoc": "Constructs a new Database from an existing packed database file.\n@param dbDir private database directory\n@param packedFile packed database storage file\n@param monitor\n@throws IOException\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "private database directory"
        },
        {
          "name": "packedFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "packed database storage file"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createDatabase",
      "comment": "Create a new database and provide the initial buffer file for writing.",
      "javadoc": "Create a new database and provide the initial buffer file for writing.\n@param dbDir\n@param bufferSize\n@return initial buffer file\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "dbDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "dbFileListener",
          "type_long": "db.DBFileListener",
          "type_short": "DBFileListener",
          "comment": ""
        },
        {
          "name": "bufferSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "db.buffers.LocalManagedBufferFile",
        "type_short": "LocalManagedBufferFile",
        "comment": "initial buffer file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setIsCheckoutCopy",
      "comment": "If this is a checked-out copy and a cumulative change file\n should be maintained, this method must be invoked following\n construction.",
      "javadoc": "If this is a checked-out copy and a cumulative change file\n should be maintained, this method must be invoked following\n construction.",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "openBufferFile",
      "comment": "Open the current version of this database for non-update use.",
      "javadoc": "Open the current version of this database for non-update use.\n@return buffer file for non-update use\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.buffers.LocalManagedBufferFile",
        "type_short": "LocalManagedBufferFile",
        "comment": "buffer file for non-update use"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "openBufferFileForUpdate",
      "comment": "Open the current version of this database for update use.",
      "javadoc": "Open the current version of this database for update use.\n@return updateable buffer file\n@throws IOException if updating this database file is not allowed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "db.buffers.LocalManagedBufferFile",
        "type_short": "LocalManagedBufferFile",
        "comment": "updateable buffer file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if updating this database file is not allowed"
        }
      ]
    },
    {
      "name": "canRecover",
      "comment": "Returns true if recovery data exists which may enable recovery of unsaved changes\n resulting from a previous crash.",
      "javadoc": "Returns true if recovery data exists which may enable recovery of unsaved changes\n resulting from a previous crash.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dbMoved",
      "comment": "Following a move of the database directory,\n this method should be invoked if this instance will\n continue to be used.",
      "javadoc": "Following a move of the database directory,\n this method should be invoked if this instance will\n continue to be used.\n@param dir new database directory\n@throws FileNotFoundException if the database directory cannot be found",
      "static": false,
      "params": [
        {
          "name": "dir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "new database directory"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the database directory cannot be found"
        }
      ]
    },
    {
      "name": "updateCheckoutCopy",
      "comment": "If this is a checked-out copy, replace the buffer file content with that\n provided by the specified srcFile.  This Database must be a checkout copy.\n If a cumulative change files exists, it will be deleted following the update.",
      "javadoc": "If this is a checked-out copy, replace the buffer file content with that\n provided by the specified srcFile.  This Database must be a checkout copy.\n If a cumulative change files exists, it will be deleted following the update.\n@param srcFile open source data buffer file or null if current version\n is already up-to-date.\n@param oldVersion older version of srcFile from which this database originated.\n@throws IOException\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "srcFile",
          "type_long": "db.buffers.ManagedBufferFile",
          "type_short": "ManagedBufferFile",
          "comment": "open source data buffer file or null if current version\n is already up-to-date."
        },
        {
          "name": "oldVersion",
          "type_long": "int",
          "type_short": "int",
          "comment": "older version of srcFile from which this database originated."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "updateCheckoutCopy",
      "comment": "If a cumulative change files exists, it will be deleted.",
      "javadoc": "If a cumulative change files exists, it will be deleted.\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "updateCheckoutFrom",
      "comment": "Move the content of the otherDb into this database.\n The otherDb will no longer exist if this method is successful.\n If already open for update, a save should not be done or the database\n may become corrupted.  All existing handles should be closed and reopened\n when this method is complete.",
      "javadoc": "Move the content of the otherDb into this database.\n The otherDb will no longer exist if this method is successful.\n If already open for update, a save should not be done or the database\n may become corrupted.  All existing handles should be closed and reopened\n when this method is complete.\n@param otherDb the other database.\n@throws IOException if an IO error occurs.  An attempt will be made to restore\n this database to its original state, however the otherDb will not be repaired\n and may become unusable.",
      "static": false,
      "params": [
        {
          "name": "otherDb",
          "type_long": "ghidra.framework.store.db.PrivateDatabase",
          "type_short": "PrivateDatabase",
          "comment": "the other database."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs.  An attempt will be made to restore\n this database to its original state, however the otherDb will not be repaired\n and may become unusable."
        }
      ]
    },
    {
      "name": "output",
      "comment": "Output the current version of this database to a packed storage file.",
      "javadoc": "Output the current version of this database to a packed storage file.\n@param outputFile packed storage file to be written\n@param name database name\n@param filetype application file type\n@param contentType user content type\n@param monitor\n@throws IOException\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "outputFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "packed storage file to be written"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "database name"
        },
        {
          "name": "filetype",
          "type_long": "int",
          "type_short": "int",
          "comment": "application file type"
        },
        {
          "name": "contentType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "user content type"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    }
  ]
}
