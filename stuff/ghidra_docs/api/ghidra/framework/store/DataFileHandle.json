{
  "name": "DataFileHandle",
  "comment": "DataFileHandle provides a random-access handle to a file.",
  "javadoc": "\u003ccode\u003eDataFileHandle\u003c/code\u003e provides a random-access handle to a file.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "isReadOnly",
      "comment": "Returns true if this data file handle is open read-only.",
      "javadoc": "Returns true if this data file handle is open read-only.\n@throws IOException if an I/O error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs."
        }
      ]
    },
    {
      "name": "read",
      "comment": "Reads b.length bytes from this file into the byte \n array, starting at the current file pointer. This method reads \n repeatedly from the file until the requested number of bytes are \n read. This method blocks until the requested number of bytes are \n read, the end of the stream is detected, or an exception is thrown.",
      "javadoc": "Reads \u003ccode\u003eb.length\u003c/code\u003e bytes from this file into the byte \n array, starting at the current file pointer. This method reads \n repeatedly from the file until the requested number of bytes are \n read. This method blocks until the requested number of bytes are \n read, the end of the stream is detected, or an exception is thrown.\n@param b the buffer into which the data is read.\n@exception java.io.EOFException if this file reaches the end before reading\n               all the bytes.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the buffer into which the data is read."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "read",
      "comment": "Reads exactly len bytes from this file into the byte \n array, starting at the current file pointer. This method reads \n repeatedly from the file until the requested number of bytes are \n read. This method blocks until the requested number of bytes are \n read, the end of the stream is detected, or an exception is thrown.",
      "javadoc": "Reads exactly \u003ccode\u003elen\u003c/code\u003e bytes from this file into the byte \n array, starting at the current file pointer. This method reads \n repeatedly from the file until the requested number of bytes are \n read. This method blocks until the requested number of bytes are \n read, the end of the stream is detected, or an exception is thrown.\n@param b the buffer into which the data is read.\n@param off the start offset of the data.\n@param len the number of bytes to read.\n@exception java.io.EOFException if this file reaches the end before reading\n               all the bytes.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the buffer into which the data is read."
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": "the start offset of the data."
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to read."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "skipBytes",
      "comment": "Attempts to skip over n bytes of input discarding the \n skipped bytes. \n \n \n This method may skip over some smaller number of bytes, possibly zero. \n This may result from any of a number of conditions; reaching end of \n file before n bytes have been skipped is only one \n possibility. This method never throws an EOFException. \n The actual number of bytes skipped is returned.  If n \n is negative, no bytes are skipped.",
      "javadoc": "Attempts to skip over \u003ccode\u003en\u003c/code\u003e bytes of input discarding the \n skipped bytes. \n \u003cp\u003e\n \n This method may skip over some smaller number of bytes, possibly zero. \n This may result from any of a number of conditions; reaching end of \n file before \u003ccode\u003en\u003c/code\u003e bytes have been skipped is only one \n possibility. This method never throws an \u003ccode\u003eEOFException\u003c/code\u003e. \n The actual number of bytes skipped is returned.  If \u003ccode\u003en\u003c/code\u003e \n is negative, no bytes are skipped.\n@param n the number of bytes to be skipped.\n@return the actual number of bytes skipped.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "n",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to be skipped."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the actual number of bytes skipped."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "write",
      "comment": "Writes the specified byte to this file. The write starts at \n the current file pointer.",
      "javadoc": "Writes the specified byte to this file. The write starts at \n the current file pointer.\n@param b the \u003ccode\u003ebyte\u003c/code\u003e to be written.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "int",
          "type_short": "int",
          "comment": "the byte to be written."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "write",
      "comment": "Writes b.length bytes from the specified byte array \n to this file, starting at the current file pointer.",
      "javadoc": "Writes \u003ccode\u003eb.length\u003c/code\u003e bytes from the specified byte array \n to this file, starting at the current file pointer.\n@param b the data.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the data."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "write",
      "comment": "Writes len bytes from the specified byte array \n starting at offset off to this file.",
      "javadoc": "Writes \u003ccode\u003elen\u003c/code\u003e bytes from the specified byte array \n starting at offset \u003ccode\u003eoff\u003c/code\u003e to this file.\n@param b the data.\n@param off the start offset in the data.\n@param len the number of bytes to write.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the data."
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": "the start offset in the data."
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to write."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "seek",
      "comment": "Sets the file-pointer offset, measured from the beginning of this \n file, at which the next read or write occurs.  The offset may be \n set beyond the end of the file. Setting the offset beyond the end \n of the file does not change the file length.  The file length will \n change only by writing after the offset has been set beyond the end \n of the file.",
      "javadoc": "Sets the file-pointer offset, measured from the beginning of this \n file, at which the next read or write occurs.  The offset may be \n set beyond the end of the file. Setting the offset beyond the end \n of the file does not change the file length.  The file length will \n change only by writing after the offset has been set beyond the end \n of the file.\n@param pos the offset position, measured in bytes from the \n                   beginning of the file, at which to set the file \n                   pointer.\n@exception IOException if \u003ccode\u003epos\u003c/code\u003e is less than \n                          \u003ccode\u003e0\u003c/code\u003e or if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "pos",
          "type_long": "long",
          "type_short": "long",
          "comment": "the offset position, measured in bytes from the \n                   beginning of the file, at which to set the file \n                   pointer."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "length",
      "comment": "Returns the length of this file.",
      "javadoc": "Returns the length of this file.\n@return the length of this file, measured in bytes.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the length of this file, measured in bytes."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setLength",
      "comment": "Sets the length of this file.\n\n  If the present length of the file as returned by the\n length method is greater than the newLength\n argument then the file will be truncated.  In this case, if the file\n offset as returned by the getFilePointer method is greater\n then newLength then after this method returns the offset\n will be equal to newLength.\n\n  If the present length of the file as returned by the\n length method is smaller than the newLength\n argument then the file will be extended.  In this case, the contents of\n the extended portion of the file are not defined.",
      "javadoc": "Sets the length of this file.\n\n \u003cp\u003e If the present length of the file as returned by the\n \u003ccode\u003elength\u003c/code\u003e method is greater than the \u003ccode\u003enewLength\u003c/code\u003e\n argument then the file will be truncated.  In this case, if the file\n offset as returned by the \u003ccode\u003egetFilePointer\u003c/code\u003e method is greater\n then \u003ccode\u003enewLength\u003c/code\u003e then after this method returns the offset\n will be equal to \u003ccode\u003enewLength\u003c/code\u003e.\n\n \u003cp\u003e If the present length of the file as returned by the\n \u003ccode\u003elength\u003c/code\u003e method is smaller than the \u003ccode\u003enewLength\u003c/code\u003e\n argument then the file will be extended.  In this case, the contents of\n the extended portion of the file are not defined.\n@param newLength The desired length of the file\n@exception IOException If an I/O error occurs",
      "static": false,
      "params": [
        {
          "name": "newLength",
          "type_long": "long",
          "type_short": "long",
          "comment": "The desired length of the file"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "close",
      "comment": "Closes this random access file stream and releases any system \n resources associated with the stream. A closed random access \n file cannot perform input or output operations and cannot be \n reopened.",
      "javadoc": "Closes this random access file stream and releases any system \n resources associated with the stream. A closed random access \n file cannot perform input or output operations and cannot be \n reopened.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
