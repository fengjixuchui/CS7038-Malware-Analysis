{
  "name": "FileSystem",
  "comment": "FileSystem provides a hierarchical view and management of a \n set of files and folders.",
  "javadoc": "\u003ccode\u003eFileSystem\u003c/code\u003e provides a hierarchical view and management of a \n set of files and folders.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "SEPARATOR_CHAR",
      "comment": "Character used to separate folder and item names within a path string.",
      "javadoc": "Character used to separate folder and item names within a path string.",
      "static": true,
      "type_long": "char",
      "type_short": "char",
      "constant_value": "/"
    },
    {
      "name": "SEPARATOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getUserName",
      "comment": "Get user name associated with this filesystem.  In the case of a remote filesystem\n this will correspond to the name used during login/authentication.  A null value may \n be returned if user name unknown.",
      "javadoc": "Get user name associated with this filesystem.  In the case of a remote filesystem\n this will correspond to the name used during login/authentication.  A null value may \n be returned if user name unknown.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isVersioned",
      "comment": "Returns true if the file-system requires check-outs when\n modifying folder items.",
      "javadoc": "Returns true if the file-system requires check-outs when\n modifying folder items.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOnline",
      "comment": "Returns true if file-system is on-line.",
      "javadoc": "Returns true if file-system is on-line.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isReadOnly",
      "comment": "Returns true if file-system is read-only.",
      "javadoc": "Returns true if file-system is read-only.\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getItemCount",
      "comment": "Returns the number of folder items contained within this file-system.",
      "javadoc": "Returns the number of folder items contained within this file-system.\n@throws IOException\n@throws UnsupportedOperationException if file-system does not support this operation",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "java.lang.UnsupportedOperationException",
          "type_short": "UnsupportedOperationException",
          "comment": "if file-system does not support this operation"
        }
      ]
    },
    {
      "name": "getItemNames",
      "comment": "Returns a list of the folder item names contained in the given folder.",
      "javadoc": "Returns a list of the folder item names contained in the given folder.\n@param folderPath the path of the folder.\n@return a list of folder item names.\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "folderPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path of the folder."
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "a list of folder item names."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getItem",
      "comment": "Returns the FolderItem in the given folder with the given name",
      "javadoc": "Returns the FolderItem in the given folder with the given name\n@param folderPath the folder path containing the item.\n@param name the name of the item.\n@return the FolderItem with the given folderPath and name, or null if it doesn\u0027t exist.\n@throws IOException if IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "folderPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the folder path containing the item."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the item."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.FolderItem",
        "type_short": "FolderItem",
        "comment": "the FolderItem with the given folderPath and name, or null if it doesn\u0027t exist."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs."
        }
      ]
    },
    {
      "name": "getItem",
      "comment": "Returns the FolderItem specified by its unique File-ID",
      "javadoc": "Returns the FolderItem specified by its unique File-ID\n@param fileID the items unique file ID\n@return the FolderItem with the given folderPath and name, or null if it doesn\u0027t exist.\n@throws IOException if IO error occurs.\n@throws UnsupportedOperationException if file-system does not support this operation",
      "static": false,
      "params": [
        {
          "name": "fileID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the items unique file ID"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.FolderItem",
        "type_short": "FolderItem",
        "comment": "the FolderItem with the given folderPath and name, or null if it doesn\u0027t exist."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs."
        },
        {
          "type_long": "java.lang.UnsupportedOperationException",
          "type_short": "UnsupportedOperationException",
          "comment": "if file-system does not support this operation"
        }
      ]
    },
    {
      "name": "getFolderNames",
      "comment": "Return a list of subfolders (by name) that are stored within the specified folder path.",
      "javadoc": "Return a list of subfolders (by name) that are stored within the specified folder path.\n@throws FileNotFoundException if folder path does not exist.\n@throws IOException if IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "folderPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO error occurs."
        }
      ]
    },
    {
      "name": "createFolder",
      "comment": "Creates a new subfolder within the specified parent folder.",
      "javadoc": "Creates a new subfolder within the specified parent folder.\n@param parentPath folder path of parent\n@param folderName name of new subfolder\n@throws DuplicateFileException if a folder exists with this name\n@throws InvalidNameException if the name does not have\n all alphanumerics\n@throws IOException thrown if an IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "folder path of parent"
        },
        {
          "name": "folderName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of new subfolder"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the name does not have\n all alphanumerics"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs."
        }
      ]
    },
    {
      "name": "createDatabase",
      "comment": "Create a new database item within the specified parent folder using the contents\n of the specified BufferFile.",
      "javadoc": "Create a new database item within the specified parent folder using the contents\n of the specified BufferFile.\n@param parentPath folder path of parent\n@param name new database name\n@param fileID file ID to be associated with new database or null\n@param bufferFile data source\n@param comment version comment (used for versioned file system only)\n@param contentType application defined content type\n@param resetDatabaseId if true database ID will be reset for new Database\n@param monitor allows the database copy to be monitored and cancelled.\n@param user name of user creating item (required for versioned item)\n@return new DatabaseItem\n@throws FileNotFoundException thrown if parent folder does not exist.\n@throws DuplicateFileException if a folder item exists with this name\n@throws InvalidNameException if the name does not have\n all alphanumerics\n@throws IOException if an IO error occurs.\n@throws CancelledException if cancelled by monitor",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "folder path of parent"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new database name"
        },
        {
          "name": "fileID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "file ID to be associated with new database or null"
        },
        {
          "name": "bufferFile",
          "type_long": "db.buffers.BufferFile",
          "type_short": "BufferFile",
          "comment": "data source"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "version comment (used for versioned file system only)"
        },
        {
          "name": "contentType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "application defined content type"
        },
        {
          "name": "resetDatabaseId",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true database ID will be reset for new Database"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "allows the database copy to be monitored and cancelled."
        },
        {
          "name": "user",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of user creating item (required for versioned item)"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.DatabaseItem",
        "type_short": "DatabaseItem",
        "comment": "new DatabaseItem"
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the name does not have\n all alphanumerics"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if cancelled by monitor"
        }
      ]
    },
    {
      "name": "createDatabase",
      "comment": "Create a new empty database item within the specified parent folder. \n If this is a versioned file-system, the associated item is checked-out.\n The resulting checkoutId can be obtained from the returned buffer file.",
      "javadoc": "Create a new empty database item within the specified parent folder. \n If this is a versioned file-system, the associated item is checked-out.\n The resulting checkoutId can be obtained from the returned buffer file.\n@param parentPath folder path of parent\n@param name new database name\n@param fileID file ID to be associated with new database or null\n@param contentType application defined content type\n@param bufferSize buffer size.  If copying an existing BufferFile, the buffer \n size must be the same as the source file.\n@param user name of user creating item (required for versioned item)\n@param projectPath path of project in which database is checked-out (required for versioned item)\n@return an empty BufferFile open for read-write.\n@throws FileNotFoundException thrown if parent folder does not exist.\n@throws DuplicateFileException if a folder item exists with this name\n@throws InvalidNameException if the name does not have\n all alphanumerics\n@throws IOException if an IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "folder path of parent"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new database name"
        },
        {
          "name": "fileID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "file ID to be associated with new database or null"
        },
        {
          "name": "contentType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "application defined content type"
        },
        {
          "name": "bufferSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "buffer size.  If copying an existing BufferFile, the buffer \n size must be the same as the source file."
        },
        {
          "name": "user",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of user creating item (required for versioned item)"
        },
        {
          "name": "projectPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path of project in which database is checked-out (required for versioned item)"
        }
      ],
      "return": {
        "type_long": "db.buffers.ManagedBufferFile",
        "type_short": "ManagedBufferFile",
        "comment": "an empty BufferFile open for read-write."
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the name does not have\n all alphanumerics"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs."
        }
      ]
    },
    {
      "name": "createDataFile",
      "comment": "Creates a new empty data file within the specified parent folder.",
      "javadoc": "Creates a new empty data file within the specified parent folder.\n@param parentPath folder path of parent\n@param name new data file name\n@param istream source data\n@param comment version comment (used for versioned file system only)\n@param contentType application defined content type\n@param monitor progress monitor (used for cancel support, \n progress not used since length of input stream is unknown)\n@return new data file\n@throws DuplicateFileException Thrown if a folderItem with that name already exists.\n@throws InvalidNameException if the name has illegal characters.\n all alphanumerics\n@throws IOException if an IO error occurs.\n@throws CancelledException if cancelled by monitor",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "folder path of parent"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new data file name"
        },
        {
          "name": "istream",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "source data"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "version comment (used for versioned file system only)"
        },
        {
          "name": "contentType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "application defined content type"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "progress monitor (used for cancel support, \n progress not used since length of input stream is unknown)"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.DataFileItem",
        "type_short": "DataFileItem",
        "comment": "new data file"
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the name has illegal characters.\n all alphanumerics"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if cancelled by monitor"
        }
      ]
    },
    {
      "name": "createFile",
      "comment": "Creates a new file item from a packed file.\n The content/item type must be determined from the input stream.",
      "javadoc": "Creates a new file item from a packed file.\n The content/item type must be determined from the input stream.\n@param parentPath folder path of parent\n@param name new data file name\n@param packedFile packed file data\n@param monitor progress monitor (used for cancel support, \n progress not used since length of input stream is unknown)\n@param user name of user creating item (required for versioned item)\n@return new item\n@throws InvalidNameException if the name has illegal characters.\n all alphanumerics\n@throws IOException if an IO error occurs.\n@throws CancelledException if cancelled by monitor",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "folder path of parent"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new data file name"
        },
        {
          "name": "packedFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "packed file data"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "progress monitor (used for cancel support, \n progress not used since length of input stream is unknown)"
        },
        {
          "name": "user",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of user creating item (required for versioned item)"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.FolderItem",
        "type_short": "FolderItem",
        "comment": "new item"
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the name has illegal characters.\n all alphanumerics"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if cancelled by monitor"
        }
      ]
    },
    {
      "name": "deleteFolder",
      "comment": "Delete the specified folder.",
      "javadoc": "Delete the specified folder.\n@param folderPath path of folder to be deleted\n@throws FolderNotEmptyException Thrown if the folder is not empty.\n@throws FileNotFoundException if there is no folder with the given path name.\n@throws IOException if error occurred during delete.",
      "static": false,
      "params": [
        {
          "name": "folderPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path of folder to be deleted"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error occurred during delete."
        }
      ]
    },
    {
      "name": "moveFolder",
      "comment": "Move the specified folder to the path specified by newFolderPath. \n The moved folder must not be an ancestor of the new Parent.",
      "javadoc": "Move the specified folder to the path specified by newFolderPath. \n The moved folder must not be an ancestor of the new Parent.\n@param parentPath path of parent folder that the moving folder currently resides in.\n@param folderName name of the folder within the parentPath to be moved.\n@param newParentPath path to where the folder is to be moved.\n@throws FileNotFoundException if the moved folder does not exist.\n@throws DuplicateFileException if folder with the same name exists within the new parent folder\n@throws FileInUseException if any file within this folder or its decendents are in-use or checked-out\n@throws IOException if an IO error occurs.\n@throws InvalidNameException if the new FolderPath contains an illegal file name.\n@throws IllegalArgumentException if new Parent is invalid.",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path of parent folder that the moving folder currently resides in."
        },
        {
          "name": "folderName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the folder within the parentPath to be moved."
        },
        {
          "name": "newParentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path to where the folder is to be moved."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the new FolderPath contains an illegal file name."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs."
        }
      ]
    },
    {
      "name": "renameFolder",
      "comment": "Renames the specified folder to a new name.",
      "javadoc": "Renames the specified folder to a new name.\n@param parentPath the parent folder of the folder to be renamed.\n@param folderName the current name of the folder to be renamed.\n@param newFolderName the name the folder to be renamed to.\n@throws FileNotFoundException if the folder to be renamed does not exist.\n@throws DuplicateFileException if folder with the new name already exists.\n@throws FileInUseException if any file within this folder or its decendents are in-use or checked-out\n@throws IOException if an IO error occurs.\n@throws InvalidNameException if the new FolderName contains an illegal file name.",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the parent folder of the folder to be renamed."
        },
        {
          "name": "folderName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the current name of the folder to be renamed."
        },
        {
          "name": "newFolderName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name the folder to be renamed to."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the new FolderName contains an illegal file name."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs."
        }
      ]
    },
    {
      "name": "moveItem",
      "comment": "Moves the specified item to a new folder.",
      "javadoc": "Moves the specified item to a new folder.\n@param folderPath path of folder containing the item.\n@param name name of the item to be moved.\n@param newFolderPath path of folder where item is to be moved.\n@throws FileNotFoundException if the item does not exist.\n@throws DuplicateFileException if item with the same name exists within the new parent folder.\n@throws FileInUseException if the item is in-use or checked-out\n@throws IOException if an IO error occurs.\n@throws InvalidNameException if the newName is invalid",
      "static": false,
      "params": [
        {
          "name": "folderPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path of folder containing the item."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the item to be moved."
        },
        {
          "name": "newFolderPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path of folder where item is to be moved."
        },
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs."
        },
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if the newName is invalid"
        }
      ]
    },
    {
      "name": "addFileSystemListener",
      "comment": "Adds the given listener to be notified of file system changes.",
      "javadoc": "Adds the given listener to be notified of file system changes.\n@param listener the listener to be added.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.store.FileSystemListener",
          "type_short": "FileSystemListener",
          "comment": "the listener to be added."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeFileSystemListener",
      "comment": "Removes the listener from being notified of file system changes.",
      "javadoc": "Removes the listener from being notified of file system changes.\n@param listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.store.FileSystemListener",
          "type_short": "FileSystemListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "folderExists",
      "comment": "Returns true if the folder specified by the path exists.",
      "javadoc": "Returns true if the folder specified by the path exists.\n@param folderPath the name of the folder to check for existence.\n@return true if the folder exists.\n@throws IOException if an IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "folderPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the folder to check for existence."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the folder exists."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs."
        }
      ]
    },
    {
      "name": "fileExists",
      "comment": "Returns true if the file exists",
      "javadoc": "Returns true if the file exists\n@param folderPath the folderPath of the folder that may contain the file.\n@param name the name of the file to check for existence.\n@throws IOException if an IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "folderPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the folderPath of the folder that may contain the file."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the file to check for existence."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs."
        }
      ]
    },
    {
      "name": "isShared",
      "comment": "Returns true if this file system is shared",
      "javadoc": "Returns true if this file system is shared",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "Cleanup and release resources",
      "javadoc": "Cleanup and release resources",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
