{
  "name": "RepositoryServerHandle",
  "comment": "RepositoryServerHandle provides access to a repository server.",
  "javadoc": "\u003ccode\u003eRepositoryServerHandle\u003c/code\u003e provides access to a repository server.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "anonymousAccessAllowed",
      "comment": "",
      "javadoc": "@return true if server allows anonymous access.\n Individual repositories must grant anonymous access separately.\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if server allows anonymous access.\n Individual repositories must grant anonymous access separately."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "isReadOnly",
      "comment": "",
      "javadoc": "@return true if user has restricted read-only access to server (e.g., anonymous user)\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if user has restricted read-only access to server (e.g., anonymous user)"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "createRepository",
      "comment": "Create a new repository on the server.  The newly created RepositoryHandle will contain \n a unique project ID for the client.",
      "javadoc": "Create a new repository on the server.  The newly created RepositoryHandle will contain \n a unique project ID for the client.\n@param name repository name.\n This ID will be used to identify and maintain checkout data.\n@return handle to new repository.\n@throws DuplicateFileException\n@throws UserAccessException\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "repository name.\n This ID will be used to identify and maintain checkout data."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.remote.RepositoryHandle",
        "type_short": "RepositoryHandle",
        "comment": "handle to new repository."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getRepository",
      "comment": "Get a handle to an existing repository.",
      "javadoc": "Get a handle to an existing repository.\n@param name repository name.\n@return repository handle or null if repository does not exist.\n@throws UserAccessException if user does not have permission to access repository\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "repository name."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.remote.RepositoryHandle",
        "type_short": "RepositoryHandle",
        "comment": "repository handle or null if repository does not exist."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "deleteRepository",
      "comment": "Delete a repository.",
      "javadoc": "Delete a repository.\n@param name repository name.\n@throws UserAccessException if user does not have permission to delete repository\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "repository name."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getRepositoryNames",
      "comment": "Returns a list of all repository names which are accessable by the current user.",
      "javadoc": "Returns a list of all repository names which are accessable by the current user.\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getUser",
      "comment": "Returns current user for which this handle belongs.",
      "javadoc": "Returns current user for which this handle belongs.\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getAllUsers",
      "comment": "Returns a list of all known users.",
      "javadoc": "Returns a list of all known users.\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "canSetPassword",
      "comment": "Returns true if the user\u0027s password can be changed.",
      "javadoc": "Returns true if the user\u0027s password can be changed.\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getPasswordExpiration",
      "comment": "Returns the amount of time in milliseconds until the \n user\u0027s password will expire.",
      "javadoc": "Returns the amount of time in milliseconds until the \n user\u0027s password will expire.\n@return time until expiration or -1 if it will not expire\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "time until expiration or -1 if it will not expire"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "setPassword",
      "comment": "Set the password for the user.",
      "javadoc": "Set the password for the user.\n@param saltedSHA256PasswordHash SHA256 salted password hash\n@return true if password changed\n@throws IOException if an IO error occurs\n@see ghidra.util.HashUtilities#getSaltedHash(String, char[]) HashUtilities.getSaltedHash(\"SHA-256\", char[])",
      "static": false,
      "params": [
        {
          "name": "saltedSHA256PasswordHash",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": "SHA256 salted password hash"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if password changed"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "connected",
      "comment": "Verify that server is alive and connected.",
      "javadoc": "Verify that server is alive and connected.\n@throws IOException if connection verification fails",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if connection verification fails"
        }
      ]
    }
  ]
}
