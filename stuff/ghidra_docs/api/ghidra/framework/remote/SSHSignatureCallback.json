{
  "name": "SSHSignatureCallback",
  "comment": "SSHSignatureCallback provides a Callback implementation used\n to perform SSH authentication.  This callback is instantiated\n by the server with a random token which must be signed using the \n user\u0027s SSH private key.\n \n It is the responsibility of the callback handler to invoke the \n sign method and return this object in response\n to the callback.",
  "javadoc": "\u003ccode\u003eSSHSignatureCallback\u003c/code\u003e provides a Callback implementation used\n to perform SSH authentication.  This callback is instantiated\n by the server with a random token which must be signed using the \n user\u0027s SSH private key.\n \u003cp\u003e\n It is the responsibility of the callback handler to invoke the \n sign method and return this object in response\n to the callback.",
  "static": false,
  "implements": [
    "javax.security.auth.callback.Callback",
    "java.io.Serializable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "serialVersionUID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "token",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "serverSignature",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "signature",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct callback with a random token to be signed by the client.",
      "javadoc": "Construct callback with a random token to be signed by the client.\n@param token random bytes to be signed",
      "static": false,
      "params": [
        {
          "name": "token",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "random bytes to be signed"
        },
        {
          "name": "serverSignature",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToken",
      "comment": "",
      "javadoc": "@return token to be signed using user certificate.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "token to be signed using user certificate."
      },
      "throws": []
    },
    {
      "name": "getSignature",
      "comment": "",
      "javadoc": "@return signed token bytes set by callback handler.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "signed token bytes set by callback handler."
      },
      "throws": []
    },
    {
      "name": "getServerSignature",
      "comment": "",
      "javadoc": "@return the server\u0027s signature of the token bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the server\u0027s signature of the token bytes."
      },
      "throws": []
    },
    {
      "name": "isSigned",
      "comment": "",
      "javadoc": "@return true if callback has been signed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if callback has been signed"
      },
      "throws": []
    },
    {
      "name": "sign",
      "comment": "Sign this challenge with the specified SSH private key.",
      "javadoc": "Sign this challenge with the specified SSH private key.\n@param sshPrivateKey RSAPrivateKey or DSAPrivateKey\n@throws IOException if signature generation failed\n@see RSAPrivateKey\n@see DSAPrivateKey",
      "static": false,
      "params": [
        {
          "name": "sshPrivateKey",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "RSAPrivateKey or DSAPrivateKey"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if signature generation failed"
        }
      ]
    }
  ]
}
