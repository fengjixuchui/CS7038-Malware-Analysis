{
  "name": "RepositoryHandle",
  "comment": "RepositoryHandle provides access to a repository.",
  "javadoc": "\u003ccode\u003eRepositoryHandle\u003c/code\u003e provides access to a repository.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "CLIENT_CHECK_PERIOD",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getName",
      "comment": "Returns the name of this repository.",
      "javadoc": "Returns the name of this repository.\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getUser",
      "comment": "Returns user object associated with this handle.",
      "javadoc": "Returns user object associated with this handle.\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.remote.User",
        "type_short": "User",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getUserList",
      "comment": "Returns a list of users authorized for this repository.",
      "javadoc": "Returns a list of users authorized for this repository.\n@throws UserAccessException\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.remote.User[]",
        "type_short": "ghidra.framework.remote.User[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "anonymousAccessAllowed",
      "comment": "",
      "javadoc": "@return true if anonymous access allowed by this repository\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if anonymous access allowed by this repository"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getServerUserList",
      "comment": "Convenience method for obtaining a list of all users\n known to the server.",
      "javadoc": "Convenience method for obtaining a list of all users\n known to the server.\n@return list of user names.\n@throws IOException if an IO error occurs\n@see RemoteRepositoryServerHandle#getAllUsers",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "list of user names."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "setUserList",
      "comment": "Set the list of authorized users for this repository.",
      "javadoc": "Set the list of authorized users for this repository.\n@param users list of user and access permissions.\n@param anonymousAccessAllowed true if anonymous access should be permitted to\n this repository\n@throws UserAccessException\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "users",
          "type_long": "ghidra.framework.remote.User[]",
          "type_short": "ghidra.framework.remote.User[]",
          "comment": "list of user and access permissions."
        },
        {
          "name": "anonymousAccessAllowed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if anonymous access should be permitted to\n this repository"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getSubfolderList",
      "comment": "Get list of subfolders contained within the specified parent folder.",
      "javadoc": "Get list of subfolders contained within the specified parent folder.\n@param folderPath parent folder path\n@return list of subfolder names\n@throws UserAccessException if user does not have adequate permission within the repository.\n@throws FileNotFoundException if specified parent folder path not found\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "folderPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "list of subfolder names"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getItemCount",
      "comment": "Returns the number of folder items contained within this file-system.",
      "javadoc": "Returns the number of folder items contained within this file-system.\n@throws IOException if an IO error occurs\n@throws UnsupportedOperationException if file-system does not support this operation",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getItemList",
      "comment": "Get of all items found within the specified parent folder path.",
      "javadoc": "Get of all items found within the specified parent folder path.\n@param folderPath parent folder path\n@return list of items contained within specified parent folder\n@throws UserAccessException\n@throws FileNotFoundException if parent folder not found\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "folderPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.remote.RepositoryItem[]",
        "type_short": "ghidra.framework.remote.RepositoryItem[]",
        "comment": "list of items contained within specified parent folder"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getItem",
      "comment": "Returns the RepositoryItem in the given folder with the given name",
      "javadoc": "Returns the RepositoryItem in the given folder with the given name\n@param parentPath folder path\n@param name item name\n@return item or null if not found\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "folder path"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "item name"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.remote.RepositoryItem",
        "type_short": "RepositoryItem",
        "comment": "item or null if not found"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getItem",
      "comment": "Returns the RepositoryItem with the given unique file ID",
      "javadoc": "Returns the RepositoryItem with the given unique file ID\n@param fileID unique file ID\n@return item or null if not found\n@throws IOException if an IO error occurs\n@throws UnsupportedOperationException if file-system does not support this operation",
      "static": false,
      "params": [
        {
          "name": "fileID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "unique file ID"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.remote.RepositoryItem",
        "type_short": "RepositoryItem",
        "comment": "item or null if not found"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "createDatabase",
      "comment": "Create a new empty database item within the repository.",
      "javadoc": "Create a new empty database item within the repository.\n@param parentPath parent folder path\n@param itemName new item name\n@param fileID unique file ID\n@param bufferSize buffer file buffer size\n@param contentType application content type\n@param projectPath path of user\u0027s project\n@return initial buffer file open for writing\n@throws UserAccessException if user does not have adequate permission within the repository.\n@throws DuplicateFileException item path already exists within repository\n@throws IOException if an IO error occurs\n@throws InvalidNameException if itemName or parentPath contains invalid characters",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new item name"
        },
        {
          "name": "fileID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "unique file ID"
        },
        {
          "name": "bufferSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "buffer file buffer size"
        },
        {
          "name": "contentType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "application content type"
        },
        {
          "name": "projectPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path of user\u0027s project"
        }
      ],
      "return": {
        "type_long": "db.buffers.ManagedBufferFileHandle",
        "type_short": "ManagedBufferFileHandle",
        "comment": "initial buffer file open for writing"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        },
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if itemName or parentPath contains invalid characters"
        }
      ]
    },
    {
      "name": "openDatabase",
      "comment": "Open an existing version of a database buffer file for non-update read-only use.",
      "javadoc": "Open an existing version of a database buffer file for non-update read-only use.\n@param parentPath parent folder path\n@param itemName name of existing data file\n@param version existing version of data file (-1 \u003d latest version)\n@param minChangeDataVer indicates the oldest change data buffer file to be\n included.  A -1 indicates only the last change data buffer file is applicable.\n@return remote buffer file for non-update read-only use\n@throws UserAccessException if user does not have adequate permission within the repository.\n@throws FileNotFoundException if database version not found\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of existing data file"
        },
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "existing version of data file (-1 \u003d latest version)"
        },
        {
          "name": "minChangeDataVer",
          "type_long": "int",
          "type_short": "int",
          "comment": "indicates the oldest change data buffer file to be\n included.  A -1 indicates only the last change data buffer file is applicable."
        }
      ],
      "return": {
        "type_long": "db.buffers.ManagedBufferFileHandle",
        "type_short": "ManagedBufferFileHandle",
        "comment": "remote buffer file for non-update read-only use"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "openDatabase",
      "comment": "Open the current version for checkin of new version.",
      "javadoc": "Open the current version for checkin of new version.\n@param parentPath parent folder path\n@param itemName name of existing data file\n@param checkoutId checkout ID\n@return remote buffer file for updateable read-only use\n@throws UserAccessException if user does not have adequate permission within the repository.\n@throws FileNotFoundException if database version not found\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of existing data file"
        },
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "checkout ID"
        }
      ],
      "return": {
        "type_long": "db.buffers.ManagedBufferFileHandle",
        "type_short": "ManagedBufferFileHandle",
        "comment": "remote buffer file for updateable read-only use"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getVersions",
      "comment": "Returns a list of all versions for the specified item.",
      "javadoc": "Returns a list of all versions for the specified item.\n@param parentPath parent folder path\n@param itemName name of item\n@return version list\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of item"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.Version[]",
        "type_short": "ghidra.framework.store.Version[]",
        "comment": "version list"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "deleteItem",
      "comment": "Delete the specified version of an item.",
      "javadoc": "Delete the specified version of an item.\n@param parentPath parent folder path\n@param itemName name of item\n@param version oldest or latest version of item to be deleted, or -1\n to delete the entire item.  User must be Admin or owner of version to be\n deleted.\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of item"
        },
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "oldest or latest version of item to be deleted, or -1\n to delete the entire item.  User must be Admin or owner of version to be\n deleted."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "moveFolder",
      "comment": "Move an entire folder",
      "javadoc": "Move an entire folder\n@param oldParentPath current parent folder path\n@param newParentPath new parent folder path\n@param oldFolderName current folder name\n@param newFolderName new folder name\n@throws InvalidNameException if newFolderName is invalid\n@throws DuplicateFileException if target folder already exists\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "oldParentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "current parent folder path"
        },
        {
          "name": "newParentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new parent folder path"
        },
        {
          "name": "oldFolderName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "current folder name"
        },
        {
          "name": "newFolderName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new folder name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if newFolderName is invalid"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "moveItem",
      "comment": "Move an item to another folder",
      "javadoc": "Move an item to another folder\n@param oldParentPath current parent folder path\n@param newParentPath new parent folder path\n@param oldItemName current item name\n@param newItemName new item name\n@throws InvalidNameException if newItemName is invalid\n@throws DuplicateFileException if target item already exists\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "oldParentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "current parent folder path"
        },
        {
          "name": "newParentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new parent folder path"
        },
        {
          "name": "oldItemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "current item name"
        },
        {
          "name": "newItemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new item name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if newItemName is invalid"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "checkout",
      "comment": "Perform a checkout on the specified item.",
      "javadoc": "Perform a checkout on the specified item.\n@param parentPath parent folder path\n@param itemName name of item\n@param checkoutType checkout type.  If exclusive or transient, checkout is only successful \n if no other checkouts exist.  No new checkouts of item will be permitted while an \n exclusive/transient checkout is active.\n@param projectPath path of user\u0027s project\n@return checkout data\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of item"
        },
        {
          "name": "checkoutType",
          "type_long": "ghidra.framework.store.CheckoutType",
          "type_short": "CheckoutType",
          "comment": "checkout type.  If exclusive or transient, checkout is only successful \n if no other checkouts exist.  No new checkouts of item will be permitted while an \n exclusive/transient checkout is active."
        },
        {
          "name": "projectPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "path of user\u0027s project"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.ItemCheckoutStatus",
        "type_short": "ItemCheckoutStatus",
        "comment": "checkout data"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "terminateCheckout",
      "comment": "Terminate an existing item checkout.",
      "javadoc": "Terminate an existing item checkout.\n@param parentPath parent folder path\n@param itemName name of item\n@param checkoutId checkout ID\n@param notify notify listeners of item status change\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of item"
        },
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "checkout ID"
        },
        {
          "name": "notify",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "notify listeners of item status change"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getCheckout",
      "comment": "Returns specific checkout data for an item.",
      "javadoc": "Returns specific checkout data for an item.\n@param parentPath parent folder path\n@param itemName name of item\n@param checkoutId checkout ID\n@return checkout data\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of item"
        },
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "checkout ID"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.ItemCheckoutStatus",
        "type_short": "ItemCheckoutStatus",
        "comment": "checkout data"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getCheckouts",
      "comment": "Get a list of all checkouts for an item.",
      "javadoc": "Get a list of all checkouts for an item.\n@param parentPath parent folder path\n@param itemName name of item\n@return checkout data list\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of item"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.store.ItemCheckoutStatus[]",
        "type_short": "ghidra.framework.store.ItemCheckoutStatus[]",
        "comment": "checkout data list"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "folderExists",
      "comment": "Returns true if the specified folder path exists.",
      "javadoc": "Returns true if the specified folder path exists.\n@param folderPath folder path\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "folderPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "folder path"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "fileExists",
      "comment": "Returns true if the specified item exists.",
      "javadoc": "Returns true if the specified item exists.\n@param parentPath parent folder path\n@param itemName name of item\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of item"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getLength",
      "comment": "Returns the length of this domain file.  This size is the minimum disk space\n used for storing this file, but does not account for additional storage space\n used to tracks changes, etc.",
      "javadoc": "Returns the length of this domain file.  This size is the minimum disk space\n used for storing this file, but does not account for additional storage space\n used to tracks changes, etc.\n@param parentPath parent folder path\n@param itemName name of item\n@return file length\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of item"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "file length"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "hasCheckouts",
      "comment": "Returns true if the specified item has one or more checkouts.",
      "javadoc": "Returns true if the specified item has one or more checkouts.\n@param parentPath parent folder path\n@param itemName name of item",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of item"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isCheckinActive",
      "comment": "Returns true if the specified item has an active checkin.",
      "javadoc": "Returns true if the specified item has an active checkin.\n@param parentPath parent folder path\n@param itemName name of item",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of item"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "updateCheckoutVersion",
      "comment": "Update checkout data for an item following an update of a local checkout file.",
      "javadoc": "Update checkout data for an item following an update of a local checkout file.\n@param parentPath parent folder path\n@param itemName name of item\n@param checkoutId checkout ID\n@param checkoutVersion item version used for update\n@throws IOException if error occurs",
      "static": false,
      "params": [
        {
          "name": "parentPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "parent folder path"
        },
        {
          "name": "itemName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of item"
        },
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "checkout ID"
        },
        {
          "name": "checkoutVersion",
          "type_long": "int",
          "type_short": "int",
          "comment": "item version used for update"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error occurs"
        }
      ]
    },
    {
      "name": "getEvents",
      "comment": "Get pending change events.  Call will block until an event is available.",
      "javadoc": "Get pending change events.  Call will block until an event is available.\n@return array of events\n@throws IOException if error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.remote.RepositoryChangeEvent[]",
        "type_short": "ghidra.framework.remote.RepositoryChangeEvent[]",
        "comment": "array of events"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error occurs."
        }
      ]
    },
    {
      "name": "close",
      "comment": "Notification to server that client is dropping handle.",
      "javadoc": "Notification to server that client is dropping handle.\n@throws IOException if error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error occurs"
        }
      ]
    }
  ]
}
