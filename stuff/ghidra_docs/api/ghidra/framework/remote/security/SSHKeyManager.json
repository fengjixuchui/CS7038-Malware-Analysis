{
  "name": "SSHKeyManager",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "passwordProvider",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.security.KeyStorePasswordProvider",
      "type_short": "KeyStorePasswordProvider",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProtectedKeyStorePasswordProvider",
      "comment": "Set PKI protected keystore password provider",
      "javadoc": "Set PKI protected keystore password provider\n@param provider",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.security.KeyStorePasswordProvider",
          "type_short": "KeyStorePasswordProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSSHPrivateKey",
      "comment": "Return the SSH private key corresponding to the specified key file.\n If the specified key file is encrypted the currently installed password\n provider will be used to obtain the decrypt password.",
      "javadoc": "Return the SSH private key corresponding to the specified key file.\n If the specified key file is encrypted the currently installed password\n provider will be used to obtain the decrypt password.\n@param sshPrivateKeyFile\n@return RSAPrivateKey or DSAPrivateKey\n@throws FileNotFoundException key file not found\n@throws IOException if key file not found or key parse failed\n@see RSAPrivateKey\n@see DSAPrivateKey",
      "static": true,
      "params": [
        {
          "name": "sshPrivateKeyFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "RSAPrivateKey or DSAPrivateKey"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if key file not found or key parse failed"
        }
      ]
    },
    {
      "name": "getSSHPrivateKey",
      "comment": "Return the SSH private key corresponding to the specified key input stream.\n If the specified key is encrypted the currently installed password\n provider will be used to obtain the decrypt password.",
      "javadoc": "Return the SSH private key corresponding to the specified key input stream.\n If the specified key is encrypted the currently installed password\n provider will be used to obtain the decrypt password.\n@param sshPrivateKeyIn\n@return RSAPrivateKey or DSAPrivateKey\n@throws FileNotFoundException key file not found\n@throws IOException if key file not found or key parse failed\n@see RSAPrivateKey\n@see DSAPrivateKey",
      "static": true,
      "params": [
        {
          "name": "sshPrivateKeyIn",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "RSAPrivateKey or DSAPrivateKey"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if key file not found or key parse failed"
        }
      ]
    },
    {
      "name": "getSSHPrivateKey",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "sshPrivateKeyIn",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": ""
        },
        {
          "name": "srcName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getSSHPublicKey",
      "comment": "Attempt to instantiate an SSH public key from the specified file\n which contains a single public key.",
      "javadoc": "Attempt to instantiate an SSH public key from the specified file\n which contains a single public key.\n@param sshPublicKeyFile\n@return RSAPublicKey or DSAPublicKey\n@throws FileNotFoundException key file not found\n@throws IOException if key file not found or key parse failed\n@see RSAPublicKey\n@see DSAPublicKey",
      "static": true,
      "params": [
        {
          "name": "sshPublicKeyFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "RSAPublicKey or DSAPublicKey"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if key file not found or key parse failed"
        }
      ]
    }
  ]
}
