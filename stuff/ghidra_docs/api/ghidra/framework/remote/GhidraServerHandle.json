{
  "name": "GhidraServerHandle",
  "comment": "GhidraServerHandle provides access to a remote server.\n This remote interface facilitates user login/authentication, providing\n a more useful handle to the associated repository server.",
  "javadoc": "\u003ccode\u003eGhidraServerHandle\u003c/code\u003e provides access to a remote server.\n This remote interface facilitates user login/authentication, providing\n a more useful handle to the associated repository server.",
  "static": false,
  "implements": [
    "java.rmi.Remote"
  ],
  "fields": [
    {
      "name": "INTERFACE_VERSION",
      "comment": "The collective interface version for all Ghidra Server remote interfaces.\n If any remote interface is modified, this value should be incremented.\n \n Version Change History:\n   1: Original Version\n   2: Changed API to support NAT and firewalls\n   3: Allow user to login with alternate user ID\n   4: Added additional checkout data and database ID support (4.2)\n   5: Added support for quick update of checkout file following merged check-in on server,\n      also added alternate authentication via password file (4.4)\n   6: Refactored BufferFile related classes creating a ManagedBufferFile which\n      supports all the version-control capabilities. (5.2)\n   7: Added support for SSH authentication callback, anonymous user access (5.4)\n   8: Added salted local passwords, added LocalIndexedFilesystem V1 with ability to obtain file count (6.1)\n   9: Added support for transient checkouts (7.2)\n   10: Added BlockStreamServer (7.4)\n   11: Revised password hash to SHA-256 (9.0)\n       - version 9.1 switched to using SSL/TLS for RMI registry connection preventing\n         older clients the ability to connect to the server.  Remote interface remained\n         unchanged allowing 9.1 clients to connect to 9.0 server.",
      "javadoc": "The collective interface version for all Ghidra Server remote interfaces.\n If any remote interface is modified, this value should be incremented.\n \n Version Change History:\n   1: Original Version\n   2: Changed API to support NAT and firewalls\n   3: Allow user to login with alternate user ID\n   4: Added additional checkout data and database ID support (4.2)\n   5: Added support for quick update of checkout file following merged check-in on server,\n      also added alternate authentication via password file (4.4)\n   6: Refactored BufferFile related classes creating a ManagedBufferFile which\n      supports all the version-control capabilities. (5.2)\n   7: Added support for SSH authentication callback, anonymous user access (5.4)\n   8: Added salted local passwords, added LocalIndexedFilesystem V1 with ability to obtain file count (6.1)\n   9: Added support for transient checkouts (7.2)\n   10: Added BlockStreamServer (7.4)\n   11: Revised password hash to SHA-256 (9.0)\n       - version 9.1 switched to using SSL/TLS for RMI registry connection preventing\n         older clients the ability to connect to the server.  Remote interface remained\n         unchanged allowing 9.1 clients to connect to 9.0 server.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "11"
    },
    {
      "name": "MIN_GHIDRA_VERSION",
      "comment": "Minimum version of Ghidra which utilized the current INTERFACE_VERSION",
      "javadoc": "Minimum version of Ghidra which utilized the current INTERFACE_VERSION",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"9.0\""
    },
    {
      "name": "DEFAULT_PORT",
      "comment": "Default RMI base port for Ghidra Server",
      "javadoc": "Default RMI base port for Ghidra Server",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "13100"
    },
    {
      "name": "BIND_NAME_PREFIX",
      "comment": "RMI registry binding name prefix for all versions of the remote GhidraServerHandle object.",
      "javadoc": "RMI registry binding name prefix for all versions of the remote GhidraServerHandle object.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"GhidraServer\""
    },
    {
      "name": "BIND_NAME",
      "comment": "RMI registry binding name for the supported version of the remote GhidraServerHandle object.",
      "javadoc": "RMI registry binding name for the supported version of the remote GhidraServerHandle object.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"GhidraServer9.0\""
    }
  ],
  "methods": [
    {
      "name": "getAuthenticationCallbacks",
      "comment": "Returns user authentication proxy object.",
      "javadoc": "Returns user authentication proxy object.\n@throws RemoteException\n@return authentication callbacks which must be satisfied or null if authentication not\n required.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.security.auth.callback.Callback[]",
        "type_short": "javax.security.auth.callback.Callback[]",
        "comment": "authentication callbacks which must be satisfied or null if authentication not\n required."
      },
      "throws": [
        {
          "type_long": "java.rmi.RemoteException",
          "type_short": "RemoteException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRepositoryServer",
      "comment": "Get a handle to the repository server.",
      "javadoc": "Get a handle to the repository server.\n@param user user subject containing GhidraPrincipal\n@param authCallbacks valid authentication callback objects which have been satisfied, or\n null if server does not require authentication.\n@return repository server handle.\n@throws LoginException if user authentication fails\n@throws RemoteException\n@see #getAuthenticationCallbacks()",
      "static": false,
      "params": [
        {
          "name": "user",
          "type_long": "javax.security.auth.Subject",
          "type_short": "Subject",
          "comment": "user subject containing GhidraPrincipal"
        },
        {
          "name": "authCallbacks",
          "type_long": "javax.security.auth.callback.Callback[]",
          "type_short": "javax.security.auth.callback.Callback[]",
          "comment": "valid authentication callback objects which have been satisfied, or\n null if server does not require authentication."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.remote.RemoteRepositoryServerHandle",
        "type_short": "RemoteRepositoryServerHandle",
        "comment": "repository server handle."
      },
      "throws": [
        {
          "type_long": "javax.security.auth.login.LoginException",
          "type_short": "LoginException",
          "comment": "if user authentication fails"
        },
        {
          "type_long": "java.rmi.RemoteException",
          "type_short": "RemoteException",
          "comment": ""
        }
      ]
    },
    {
      "name": "checkCompatibility",
      "comment": "Check server interface compatibility",
      "javadoc": "Check server interface compatibility\n@param serverInterfaceVersion client/server interface version\n@throws RemoteException\n@see #INTERFACE_VERSION",
      "static": false,
      "params": [
        {
          "name": "serverInterfaceVersion",
          "type_long": "int",
          "type_short": "int",
          "comment": "client/server interface version"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.rmi.RemoteException",
          "type_short": "RemoteException",
          "comment": ""
        }
      ]
    }
  ]
}
