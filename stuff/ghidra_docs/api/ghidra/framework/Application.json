{
  "name": "Application",
  "comment": "The Application class provides a variety of static convenience methods for accessing Application \n elements that can be used once the #initializeApplication call has been made.\n\n In order to initialize an application, an ApplicationLayout and an \n ApplicationConfiguration must be provided.  The layout and configuration come in a\n variety of flavors, and are what makes the Application class usable across a range of tools.\n\n Example use case:\n \n   ApplicationLayout layout \u003d new GhidraApplicationLayout();\n   ApplicationConfiguration configuration \u003d new GhidraApplicationConfiguration();\n   Application.initalizeApplication(layout, configuration);\n ",
  "javadoc": "The Application class provides a variety of static convenience methods for accessing Application \n elements that can be used once the {@link #initializeApplication} call has been made.\n\n \u003cp\u003eIn order to initialize an application, an {@link ApplicationLayout} and an \n {@link ApplicationConfiguration} must be provided.  The layout and configuration come in a\n variety of flavors, and are what makes the Application class usable across a range of tools.\n\n \u003cp\u003eExample use case:\n \u003cpre\u003e\n   ApplicationLayout layout \u003d new GhidraApplicationLayout();\n   ApplicationConfiguration configuration \u003d new GhidraApplicationConfiguration();\n   Application.initalizeApplication(layout, configuration);\n \u003c/pre\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "JAR_EXTENSION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\".jar\""
    },
    {
      "name": "DATA_DIRNAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"data/\""
    },
    {
      "name": "app",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.framework.Application",
      "type_short": "Application",
      "constant_value": null
    },
    {
      "name": "firstCreationThrowable",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.Throwable",
      "type_short": "Throwable",
      "constant_value": null
    },
    {
      "name": "layout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "utility.application.ApplicationLayout",
      "type_short": "ApplicationLayout",
      "constant_value": null
    },
    {
      "name": "configuration",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.ApplicationConfiguration",
      "type_short": "ApplicationConfiguration",
      "constant_value": null
    },
    {
      "name": "classModuleTree",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.jar.ClassModuleTree",
      "type_short": "ClassModuleTree",
      "constant_value": null
    },
    {
      "name": "loggingInitialized",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "fileExtensionCache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,java.util.List\u003cgeneric.jar.ResourceFile\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new application object.  Application is a singleton so this is private.",
      "javadoc": "Creates a new application object.  Application is a singleton so this is private.\n@param layout The application layout to be used by this application.\n@param configuration The application configuration to be used by this application.",
      "static": false,
      "params": [
        {
          "name": "layout",
          "type_long": "utility.application.ApplicationLayout",
          "type_short": "ApplicationLayout",
          "comment": "The application layout to be used by this application."
        },
        {
          "name": "configuration",
          "type_long": "ghidra.framework.ApplicationConfiguration",
          "type_short": "ApplicationConfiguration",
          "comment": "The application configuration to be used by this application."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeApplication",
      "comment": "Initializes the application.  The static methods of this class cannot be used until the\n application is initialized.",
      "javadoc": "Initializes the application.  The static methods of this class cannot be used until the\n application is initialized.\n@param layout The application layout to be used by the application.\n@param configuration The application configuration to be used by the application.",
      "static": true,
      "params": [
        {
          "name": "layout",
          "type_long": "utility.application.ApplicationLayout",
          "type_short": "ApplicationLayout",
          "comment": "The application layout to be used by the application."
        },
        {
          "name": "configuration",
          "type_long": "ghidra.framework.ApplicationConfiguration",
          "type_short": "ApplicationConfiguration",
          "comment": "The application configuration to be used by the application."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInitialized",
      "comment": "Checks to see if the application has been initialized.",
      "javadoc": "Checks to see if the application has been initialized.\n@return true if the application has been initialized; otherwise, false.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the application has been initialized; otherwise, false."
      },
      "throws": []
    },
    {
      "name": "installStaticFactories",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeLogging",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeLogging",
      "comment": "If the Application was previously initialized with logging disabled, this method\n may be used to perform delayed logging initialization.",
      "javadoc": "If the Application was previously initialized with logging disabled, this method\n may be used to perform delayed logging initialization.\n@param logFile application log file, if null the default \u003ci\u003eapplication.log\u003c/i\u003e will be stored\n within the user\u0027s application settings directory\n@param scriptLogFile scripting log file, if null the default \u003ci\u003escript.log\u003c/i\u003e will be stored\n within the user\u0027s application settings directory\n@throws AssertException if Application has not yet been initialized, or logging \n was previously configured for the application.",
      "static": true,
      "params": [
        {
          "name": "logFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "application log file, if null the default application.log will be stored\n within the user\u0027s application settings directory"
        },
        {
          "name": "scriptLogFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "scripting log file, if null the default script.log will be stored\n within the user\u0027s application settings directory"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getApplicationLayout",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "utility.application.ApplicationLayout",
        "type_short": "ApplicationLayout",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getModuleFromTreeMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "className",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.GModule",
        "type_short": "GModule",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getModuleContainingResourceFile",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "file",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getModuleContainingClass",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "className",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findJavaSourceDirectories",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cgeneric.jar.ResourceFile\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "moduleRootDirectory",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findModuleForJavaSource",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourcePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getModuleForClass",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "className",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findFilesByExtension",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "extension",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findModuleDataFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "relativePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findFilesByExtensionInModule",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "extension",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findModuleDirectories",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "relativePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataFileInModule",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "relativeDataPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFileInModule",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "relativePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "checkAppInitialized",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataSubDirectoryInModule",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "relativePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getSubDirectoryInModule",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "relativePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getModuleFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "module",
          "type_long": "ghidra.framework.GModule",
          "type_short": "GModule",
          "comment": ""
        },
        {
          "name": "subdirPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "exactFilename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getModuleOSFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "exactFilename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.framework.OSFileNotFoundException",
          "type_short": "OSFileNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findModuleFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "subdirPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "exactFilename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOSFileInAnyModule",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.framework.OSFileNotFoundException",
          "type_short": "OSFileNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "verifyExtension",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "extension",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMyModuleRootDirectory",
      "comment": "Returns the module root directory that contains the class that called this method.",
      "javadoc": "Returns the module root directory that contains the class that called this method.\n@return the module root directory that contains the class that called this method.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": "the module root directory that contains the class that called this method."
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the name of the application.",
      "javadoc": "Returns the name of the application.\n@return the name of the application.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the application."
      },
      "throws": []
    },
    {
      "name": "getApplicationProperty",
      "comment": "Returns the value of the give application property name.",
      "javadoc": "Returns the value of the give application property name.\n@param propertyName the name of the application property to retrieve.\n@return the value of the give application property name.",
      "static": true,
      "params": [
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the application property to retrieve."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the value of the give application property name."
      },
      "throws": []
    },
    {
      "name": "getApplicationRootDirectories",
      "comment": "Returns a list of the application root directories.  An application root directory is a\n directory containing one or more modules.  Applications support multiple application root\n directories so that it can contain modules that don\u0027t have a common file system root.  This\n is useful if the application contains modules from more than one source code repository.\n Application roots are returned in the order they appear in the classpath.",
      "javadoc": "Returns a list of the application root directories.  An application root directory is a\n directory containing one or more modules.  Applications support multiple application root\n directories so that it can contain modules that don\u0027t have a common file system root.  This\n is useful if the application contains modules from more than one source code repository.\n Application roots are returned in the order they appear in the classpath.\n@return a list of root directories containing modules for this application.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "Collection",
        "comment": "a list of root directories containing modules for this application."
      },
      "throws": []
    },
    {
      "name": "getApplicationRootDirectory",
      "comment": "Returns the application root directory.   An application root directory is a\n directory containing one or more modules.  In development mode there may be multiple \n application root directories, which can be retrieved via \n #getApplicationRootDirectories().\n \n In an installation of the application, there will only be one application root directory.\n \n Note:  Be sure you understand that there may be multiple application root\n directories in development mode.  In general you should not be using this method for \n searching for files yourself, but instead using \n the various find* methods of this class.",
      "javadoc": "Returns the application root directory.   An application root directory is a\n directory containing one or more modules.  In development mode there may be multiple \n application root directories, which can be retrieved via \n {@link #getApplicationRootDirectories()}.\n \u003cp\u003e\n In an installation of the application, there will only be one application root directory.\n \u003cp\u003e\n \u003cb\u003eNote:  Be sure you understand that there may be multiple application root\n directories in development mode.\u003c/b\u003e  In general you should not be using this method for \n searching for files yourself, but instead using \n the various \u003ccode\u003efind*\u003c/code\u003e methods of this class.\n@return Returns the application root directory.\n@see #getApplicationRootDirectories()",
      "static": true,
      "params": [],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": "Returns the application root directory."
      },
      "throws": []
    },
    {
      "name": "getUserSettingsDirectory",
      "comment": "Returns the File containing the user configuration settings for this application.",
      "javadoc": "Returns the File containing the user configuration settings for this application.\n@return the File containing the user configuration settings for this application.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the File containing the user configuration settings for this application."
      },
      "throws": []
    },
    {
      "name": "getUserTempDirectory",
      "comment": "Returns the temporary directory specific to the user and the application.\n Directory has name of username-appname\n This directory may be removed at system reboot or during periodic \n system cleanup of unused temp files.\n This directory is specific to the application name but not the version.\n Resources stored within this directory should utilize some \n form of access locking or unique naming.  Transient resources should be \n deleted when no longer in use.",
      "javadoc": "Returns the temporary directory specific to the user and the application.\n Directory has name of \u0026lt;username\u0026gt;-\u0026lt;appname\u0026gt;\n This directory may be removed at system reboot or during periodic \n system cleanup of unused temp files.\n This directory is specific to the application name but not the version.\n Resources stored within this directory should utilize some \n form of access locking or unique naming.  Transient resources should be \n deleted when no longer in use.\n@return temp directory",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "temp directory"
      },
      "throws": []
    },
    {
      "name": "getUserCacheDirectory",
      "comment": "Returns the cache directory specific to the user and the application.\n The intention is for directory contents to be preserved, however the \n specific location is platform specific and contents may be removed when\n not in use and may in fact be the same directory the user temp directory.\n This directory is specific to the application name but not the version.\n Resources stored within this directory should utilize some \n form of access locking and/or unique naming.",
      "javadoc": "Returns the cache directory specific to the user and the application.\n The intention is for directory contents to be preserved, however the \n specific location is platform specific and contents may be removed when\n not in use and may in fact be the same directory the user temp directory.\n This directory is specific to the application name but not the version.\n Resources stored within this directory should utilize some \n form of access locking and/or unique naming.\n@return cache directory",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "cache directory"
      },
      "throws": []
    },
    {
      "name": "getModuleRootDirectories",
      "comment": "Returns a collection of all the module root directories. A module root directory is\n the top-level directory of a module.",
      "javadoc": "Returns a collection of all the module root directories. A module root directory is\n the top-level directory of a module.\n@return a collection of all the module root directories.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "Collection",
        "comment": "a collection of all the module root directories."
      },
      "throws": []
    },
    {
      "name": "getInstallationDirectory",
      "comment": "Returns the installation directory.  In an installation, there is only one application root\n and its parent is the installation directory.  If not an installation, then this call doesn\u0027t\n really make sense, but it will return the parent of the first installation root.",
      "javadoc": "Returns the installation directory.  In an installation, there is only one application root\n and its parent is the installation directory.  If not an installation, then this call doesn\u0027t\n really make sense, but it will return the parent of the first installation root.\n@return ",
      "static": true,
      "params": [],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getModuleRootDir",
      "comment": "Return the module root directory for the module with the given name.",
      "javadoc": "Return the module root directory for the module with the given name.\n@param moduleName the name of the module.\n@return the module root directory for the module with the given name or null if not found.",
      "static": true,
      "params": [
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the module."
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": "the module root directory for the module with the given name or null if not found."
      },
      "throws": []
    },
    {
      "name": "isTestBuild",
      "comment": "Returns true if this build was not built through the official build process, but instead\n  was created using the \"buildLocal\" call.",
      "javadoc": "Returns true if this build was not built through the official build process, but instead\n  was created using the \"buildLocal\" call.\n@return true if this build was not built using the official build process.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this build was not built using the official build process."
      },
      "throws": []
    },
    {
      "name": "inSingleJarMode",
      "comment": "Checks whether or not the application is in \"single jar\" mode.",
      "javadoc": "Checks whether or not the application is in \"single jar\" mode.\n@return true if the application is in \"single jar\" mode; otherwise, false.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the application is in \"single jar\" mode; otherwise, false."
      },
      "throws": []
    },
    {
      "name": "getApplicationVersion",
      "comment": "Returns the version of this build.",
      "javadoc": "Returns the version of this build.\n@return the version of this build.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the version of this build."
      },
      "throws": []
    },
    {
      "name": "getBuildDate",
      "comment": "Returns the date this build was created.",
      "javadoc": "Returns the date this build was created.\n@return the date this build was created.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the date this build was created."
      },
      "throws": []
    },
    {
      "name": "getApplicationReleaseName",
      "comment": "Returns the release name for this build.",
      "javadoc": "Returns the release name for this build.\n@return the application release name.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the application release name."
      },
      "throws": []
    },
    {
      "name": "getApplicationSourceRevisions",
      "comment": "Return the source repository revisions used in the build process\n or null if not applicable.",
      "javadoc": "Return the source repository revisions used in the build process\n or null if not applicable.\n@return source revision map or null if not applicable",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.Map\u003cjava.lang.String,java.lang.String\u003e",
        "type_short": "Map",
        "comment": "source revision map or null if not applicable"
      },
      "throws": []
    },
    {
      "name": "getLibraryDirectories",
      "comment": "Returns a collection of module library directories. Library directories are optional for a module.",
      "javadoc": "Returns a collection of module library directories. Library directories are optional for a module.\n@return a collection of module library directories.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "Collection",
        "comment": "a collection of module library directories."
      },
      "throws": []
    },
    {
      "name": "findFilesByExtensionInApplication",
      "comment": "Returns all files within any module\u0027s data directory that end with the given extension.",
      "javadoc": "Returns all files within any module\u0027s data directory that end with the given extension.\n@param extension the extension of files to be found.\n@return all files within any module\u0027s data directory that end with the given extension.",
      "static": true,
      "params": [
        {
          "name": "extension",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the extension of files to be found."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "List",
        "comment": "all files within any module\u0027s data directory that end with the given extension."
      },
      "throws": []
    },
    {
      "name": "findDataFileInAnyModule",
      "comment": "Finds the first file that exists with the relative path in any module.",
      "javadoc": "Finds the first file that exists with the relative path in any module.\n@param relativePath the path from the module root\n@return the first file that exists with the relative path in any module.",
      "static": true,
      "params": [
        {
          "name": "relativePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path from the module root"
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": "the first file that exists with the relative path in any module."
      },
      "throws": []
    },
    {
      "name": "findFilesByExtensionInMyModule",
      "comment": "Returns a list of all files with the given extension that are located in the module\n of the calling class.",
      "javadoc": "Returns a list of all files with the given extension that are located in the module\n of the calling class.\n@param extension the filename extension for which to find file.s\n@return a list of all files with the given extension that are located in the module\n of the calling class.",
      "static": true,
      "params": [
        {
          "name": "extension",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the filename extension for which to find file.s"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "List",
        "comment": "a list of all files with the given extension that are located in the module\n of the calling class."
      },
      "throws": []
    },
    {
      "name": "findFilesByExtension",
      "comment": "Returns a list of all files with the given extension that are located in the named module.",
      "javadoc": "Returns a list of all files with the given extension that are located in the named module.\n@param moduleName the name of the module for which to look for files with the given extension.\n@param extension the filename extension for which to find file.s\n@return a list of all files with the given extension that are located in the named module.",
      "static": true,
      "params": [
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the module for which to look for files with the given extension."
        },
        {
          "name": "extension",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the filename extension for which to find file.s"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "List",
        "comment": "a list of all files with the given extension that are located in the named module."
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": ""
        }
      ]
    },
    {
      "name": "findModuleSubDirectories",
      "comment": "Returns a list of all directories in any module that have the given module relative path.  For\n example, a relative path of \"foo/bar\" will return all directories that are of the form\n ",
      "javadoc": "Returns a list of all directories in any module that have the given module relative path.  For\n example, a relative path of \"foo/bar\" will return all directories that are of the form\n {@code \u003cmodule root\u003e/data/foo/bar}\n@param relativePath the module relative path to search for.\n@return a list of all directories in any module that have the given module relative path.",
      "static": true,
      "params": [
        {
          "name": "relativePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the module relative path to search for."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cgeneric.jar.ResourceFile\u003e",
        "type_short": "List",
        "comment": "a list of all directories in any module that have the given module relative path."
      },
      "throws": []
    },
    {
      "name": "getModuleDataSubDirectory",
      "comment": "Returns the directory relative to the calling class\u0027s module\u0027s data directory.",
      "javadoc": "Returns the directory relative to the calling class\u0027s module\u0027s data directory.\n@param relativePath the path relative the module\u0027s data directory\n@throws FileNotFoundException if the directory does not exist.\n@throws IOException if an error occurred trying to access the directory.",
      "static": true,
      "params": [
        {
          "name": "relativePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path relative the module\u0027s data directory"
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the directory does not exist."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an error occurred trying to access the directory."
        }
      ]
    },
    {
      "name": "getModuleDataSubDirectory",
      "comment": "Return the directory relative the the name module\u0027s data directory. (i.e. \"/data\" will\n be prepended to the given path)",
      "javadoc": "Return the directory relative the the name module\u0027s data directory. (i.e. \"/data\" will\n be prepended to the given path)\n@param moduleName the name of the module.\n@param relativePath the path relative to the module\u0027s data directory.\n@throws FileNotFoundException if the directory does not exist\n@throws IOException if an error occurred trying to access the directory.",
      "static": true,
      "params": [
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the module."
        },
        {
          "name": "relativePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path relative to the module\u0027s data directory."
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the directory does not exist"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an error occurred trying to access the directory."
        }
      ]
    },
    {
      "name": "getModuleSubDirectory",
      "comment": "Return the directory relative the the name module\u0027s directory.",
      "javadoc": "Return the directory relative the the name module\u0027s directory.\n@param moduleName the name of the module.\n@param relativePath the path relative to the module\u0027s root directory.\n@throws FileNotFoundException if the directory does not exist\n@throws IOException if an error occurred trying to access the directory.",
      "static": true,
      "params": [
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the module."
        },
        {
          "name": "relativePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path relative to the module\u0027s root directory."
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the directory does not exist"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an error occurred trying to access the directory."
        }
      ]
    },
    {
      "name": "getModuleDataFile",
      "comment": "Returns the file relative to the calling class\u0027s module\u0027s data directory",
      "javadoc": "Returns the file relative to the calling class\u0027s module\u0027s data directory\n@param relativeDataPath the path relative the to module\u0027s data directory\n@throws FileNotFoundException if the file or module does not exist.",
      "static": true,
      "params": [
        {
          "name": "relativeDataPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path relative the to module\u0027s data directory"
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the file or module does not exist."
        }
      ]
    },
    {
      "name": "getModuleDataFile",
      "comment": "Returns the file relative to the named module\u0027s data directory. (i.e. \"data/\" will\n be prepended to the give path)",
      "javadoc": "Returns the file relative to the named module\u0027s data directory. (i.e. \"data/\" will\n be prepended to the give path)\n@param moduleName the name of the module.\n@param relativeDataPath the path relative to the module\u0027s data directory.\n@throws FileNotFoundException if the file does not exist.",
      "static": true,
      "params": [
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the module."
        },
        {
          "name": "relativeDataPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path relative to the module\u0027s data directory."
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the file does not exist."
        }
      ]
    },
    {
      "name": "getModuleFile",
      "comment": "Returns the file relative to the named module\u0027s directory.",
      "javadoc": "Returns the file relative to the named module\u0027s directory.\n@param moduleName the name of the module.\n@param relativePath the path relative to the module\u0027s data directory.\n@throws FileNotFoundException if the file does not exist.",
      "static": true,
      "params": [
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the module."
        },
        {
          "name": "relativePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the path relative to the module\u0027s data directory."
        }
      ],
      "return": {
        "type_long": "generic.jar.ResourceFile",
        "type_short": "ResourceFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the file does not exist."
        }
      ]
    },
    {
      "name": "getOSFile",
      "comment": "Returns the OS specific file within the given module with the given name.",
      "javadoc": "Returns the OS specific file within the given module with the given name.\n@param moduleName the name of the module\n@param exactFilename the name of the OS file within the module.\n@return the OS specific file.\n@throws OSFileNotFoundException if the file does not exist.",
      "static": true,
      "params": [
        {
          "name": "moduleName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the module"
        },
        {
          "name": "exactFilename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the OS file within the module."
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the OS specific file."
      },
      "throws": [
        {
          "type_long": "ghidra.framework.OSFileNotFoundException",
          "type_short": "OSFileNotFoundException",
          "comment": "if the file does not exist."
        }
      ]
    },
    {
      "name": "getOSFile",
      "comment": "Returns the specified OS specific file.  It is first searched for in the calling class\u0027s\n module.  If it is not found there, it is searched for in all modules.",
      "javadoc": "Returns the specified OS specific file.  It is first searched for in the calling class\u0027s\n module.  If it is not found there, it is searched for in all modules.\n@param exactFilename the name of the OS specific file.\n@return the OS specific file.\n@throws OSFileNotFoundException if the file does not exist.",
      "static": true,
      "params": [
        {
          "name": "exactFilename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the OS specific file."
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the OS specific file."
      },
      "throws": [
        {
          "type_long": "ghidra.framework.OSFileNotFoundException",
          "type_short": "OSFileNotFoundException",
          "comment": "if the file does not exist."
        }
      ]
    }
  ]
}
