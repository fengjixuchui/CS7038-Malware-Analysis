{
  "name": "Preferences",
  "comment": "Uses Properties to manage user preferences as name/value pairs.  All methods\n are static.",
  "javadoc": "Uses Properties to manage user preferences as name/value pairs.  All methods\n are static.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "APPLICATION_PREFERENCES_FILENAME",
      "comment": "The APPLICATION_PREFERENCES_FILENAME is the default name for the user preferences file.",
      "javadoc": "The \u003ccode\u003eAPPLICATION_PREFERENCES_FILENAME\u003c/code\u003e is the default name for the user preferences file.\n@see ghidra.framework.preferences.Preferences",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"preferences\""
    },
    {
      "name": "USER_PLUGIN_PATH",
      "comment": "Preference name of the user plugin path.",
      "javadoc": "Preference name of the user plugin path.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"UserPluginPath\""
    },
    {
      "name": "LAST_OPENED_ARCHIVE_DIRECTORY",
      "comment": "Preference name for the last opened archive directory.",
      "javadoc": "Preference name for the last opened archive directory.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"LastOpenedArchiveDirectory\""
    },
    {
      "name": "PROJECT_DIRECTORY",
      "comment": "Preference name for the project directory.",
      "javadoc": "Preference name for the project directory.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"ProjectDirectory\""
    },
    {
      "name": "LAST_TOOL_IMPORT_DIRECTORY",
      "comment": "Preference name for import directory that was last accessed for tools.",
      "javadoc": "Preference name for import directory that was last accessed for tools.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"LastToolImportDirectory\""
    },
    {
      "name": "LAST_TOOL_EXPORT_DIRECTORY",
      "comment": "Preference name for export directory that was last accessed for tools.",
      "javadoc": "Preference name for export directory that was last accessed for tools.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"LastToolExportDirectory\""
    },
    {
      "name": "LAST_NEW_PROJECT_DIRECTORY",
      "comment": "Preference name for directory last selected for creating a new project.",
      "javadoc": "Preference name for directory last selected for creating a new project.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"LastNewProjectDirectory\""
    },
    {
      "name": "LAST_IMPORT_DIRECTORY",
      "comment": "Preference name for the import directory that was last accessed for\n domain files.",
      "javadoc": "Preference name for the import directory that was last accessed for\n domain files.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"LastImportDirectory\""
    },
    {
      "name": "LAST_EXPORT_DIRECTORY",
      "comment": "Preference name for the export directory that was last accessed.",
      "javadoc": "Preference name for the export directory that was last accessed.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"LastExportDirectory\""
    },
    {
      "name": "properties",
      "comment": "The data storage for this class.",
      "javadoc": "The data storage for this class.",
      "static": true,
      "type_long": "java.util.Properties",
      "type_short": "Properties",
      "constant_value": null
    },
    {
      "name": "previousProperties",
      "comment": "Data storage that contains preferences data from a previous installation.",
      "javadoc": "Data storage that contains preferences data from a previous installation.",
      "static": true,
      "type_long": "java.util.Properties",
      "type_short": "Properties",
      "constant_value": null
    },
    {
      "name": "filename",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Don\u0027t allow instantiation of this class.",
      "javadoc": "Don\u0027t allow instantiation of this class.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "load",
      "comment": "Initialize properties by reading name, values from the given filename.",
      "javadoc": "Initialize properties by reading name, values from the given filename.\n@param pathName name of preferences file to read in; could be null\n@throws IOException if there is a problem reading the file",
      "static": true,
      "params": [
        {
          "name": "pathName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of preferences file to read in; could be null"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem reading the file"
        }
      ]
    },
    {
      "name": "loadPreviousInstallationPreferences",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "clear",
      "comment": "Clears all properties in this Preferences object.\n \n Warning: Save any changes pending before calling this method, as this call will\n erase any changes not written do disk via #store()",
      "javadoc": "Clears all properties in this Preferences object.\n \u003cp\u003e\n \u003cb\u003eWarning: \u003c/b\u003eSave any changes pending before calling this method, as this call will\n erase any changes not written do disk via {@link #store()}",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAlternateFileInputStream",
      "comment": "Gets an input stream to a file that is the same named file within a different \n application version directory for this user. This method will search for an \n alternate file based on the application version directories modification times \n and will use the first matching file it finds.",
      "javadoc": "Gets an input stream to a file that is the same named file within a different \n application version directory for this user. This method will search for an \n alternate file based on the application version directories modification times \n and will use the first matching file it finds.\n@return a file input stream for an alternate file or null.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.io.FileInputStream",
        "type_short": "FileInputStream",
        "comment": "a file input stream for an alternate file or null."
      },
      "throws": []
    },
    {
      "name": "removeProperty",
      "comment": "Removes the given preference from this preferences object.",
      "javadoc": "Removes the given preference from this preferences object.\n@param name the name of the preference key to remove.\n@return the value that was stored with the given key.",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the preference key to remove."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the value that was stored with the given key."
      },
      "throws": []
    },
    {
      "name": "getProperty",
      "comment": "Get the property with the given name.\n \n Note: all getProperty(...) methods will first check System#getProperty(String)\n for a value first.  This allows users to override preferences from the command-line.",
      "javadoc": "Get the property with the given name.\n \u003cp\u003e\n Note: all \u003ccode\u003egetProperty(...)\u003c/code\u003e methods will first check {@link System#getProperty(String)}\n for a value first.  This allows users to override preferences from the command-line.\n@param name the property name\n@return the current property value; null if not set",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the property name"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the current property value; null if not set"
      },
      "throws": []
    },
    {
      "name": "getProperty",
      "comment": "Get the property with the given name; if there is no property, return the defaultValue.\n \n Note: all getProperty(...) methods will first check System#getProperty(String)\n for a value first.  This allows users to override preferences from the command-line.",
      "javadoc": "Get the property with the given name; if there is no property, return the defaultValue.\n \u003cp\u003e\n Note: all \u003ccode\u003egetProperty(...)\u003c/code\u003e methods will first check {@link System#getProperty(String)}\n for a value first.  This allows users to override preferences from the command-line.\n@param name the property name\n@param defaultValue the default value\n@return the property value; default value if not set\n@see #getProperty(String, String, boolean)",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the property name"
        },
        {
          "name": "defaultValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the default value"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the property value; default value if not set"
      },
      "throws": []
    },
    {
      "name": "getProperty",
      "comment": "Get the property with the given name; if there is no property, return the defaultValue.\n \n This version of getProperty will, when useHistoricalValue is true, look\n for the given preference value in the last used installation of the application.\n \n Note: all getProperty(...) methods will first check System#getProperty(String)\n for a value first.  This allows users to override preferences from the command-line.",
      "javadoc": "Get the property with the given name; if there is no property, return the defaultValue.\n \u003cp\u003e\n This version of \u003ccode\u003egetProperty\u003c/code\u003e will, when \u003ccode\u003euseHistoricalValue\u003c/code\u003e is true, look\n for the given preference value in the last used installation of the application.\n \u003cp\u003e\n Note: all \u003ccode\u003egetProperty(...)\u003c/code\u003e methods will first check {@link System#getProperty(String)}\n for a value first.  This allows users to override preferences from the command-line.\n@param name The name of the property for which to get a value\n@param defaultValue The value to use if there is no value yet set for the given name\n@param useHistoricalValue True signals to check the last used application installation for a \n        value for the given name \u003cb\u003eif that value has not yet been set\u003c/b\u003e.\n@return the property with the given name; if there is no property,\n         return the defaultValue.\n@see #getProperty(String)\n@see #getProperty(String, String)",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the property for which to get a value"
        },
        {
          "name": "defaultValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The value to use if there is no value yet set for the given name"
        },
        {
          "name": "useHistoricalValue",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True signals to check the last used application installation for a \n        value for the given name if that value has not yet been set."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the property with the given name; if there is no property,\n         return the defaultValue."
      },
      "throws": []
    },
    {
      "name": "setProperty",
      "comment": "Set the property value.  If a null value is passed, then the property is removed from \n this collection of preferences.",
      "javadoc": "Set the property value.  If a null value is passed, then the property is removed from \n this collection of preferences.\n@param name property name\n@param value value for property",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "property name"
        },
        {
          "name": "value",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "value for property"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPropertyNames",
      "comment": "Get an array of known property names.",
      "javadoc": "Get an array of known property names.\n@return if there are no properties, return a zero-length array",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "if there are no properties, return a zero-length array"
      },
      "throws": []
    },
    {
      "name": "getFilename",
      "comment": "Get the filename that will be used in the store() method.",
      "javadoc": "Get the filename that will be used in the store() method.\n@return the filename",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the filename"
      },
      "throws": []
    },
    {
      "name": "setFilename",
      "comment": "Set the filename so that when the store() method is called, the\n preferences are written to this file.",
      "javadoc": "Set the filename so that when the store() method is called, the\n preferences are written to this file.\n@param name the filename",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the filename"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "store",
      "comment": "Store the preferences in a file for the current filename.",
      "javadoc": "Store the preferences in a file for the current filename.\n@return true if the file was written\n@throws RuntimeException if the preferences filename was not set",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the file was written"
      },
      "throws": []
    },
    {
      "name": "getPluginPaths",
      "comment": "Return the paths in the UserPluginPath property.\n Return zero length array if this property is not set.",
      "javadoc": "Return the paths in the UserPluginPath property.\n Return zero length array if this property is not set.\n@return the paths",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "the paths"
      },
      "throws": []
    },
    {
      "name": "setPluginPaths",
      "comment": "Set the paths to be used as the UserPluginPath property.",
      "javadoc": "Set the paths to be used as the UserPluginPath property.\n@param paths the paths",
      "static": true,
      "params": [
        {
          "name": "paths",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "the paths"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPluginPathList",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    }
  ]
}
