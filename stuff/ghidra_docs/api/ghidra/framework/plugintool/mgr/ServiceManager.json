{
  "name": "ServiceManager",
  "comment": "Class for managing plugin services. A plugin may provide a service, or\n it may depend on a service. The ServiceManager maintains a list of\n service names and plugins that provide those services. A plugin may\n dynamically add and remove services from the service registry. As services\n are added and removed, all the plugins (ServiceListener) \n in the tool are notified.",
  "javadoc": "Class for managing plugin services. A plugin may provide a service, or\n it may depend on a service. The ServiceManager maintains a list of\n service names and plugins that provide those services. A plugin may\n dynamically add and remove services from the service registry. As services\n are added and removed, all the plugins (ServiceListener) \n in the tool are notified.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "servicesByInterface",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Class\u003c?\u003e,java.util.List\u003cjava.lang.Object\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "serviceListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.WeakSet\u003cghidra.framework.plugintool.util.ServiceListener\u003e",
      "type_short": "WeakSet",
      "constant_value": null
    },
    {
      "name": "notifyAdd",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "notifications",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cjava.lang.Object[]\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new Service Registry.",
      "javadoc": "Construct a new Service Registry.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addServiceListener",
      "comment": "Add listener that is notified when services are added or removed.",
      "javadoc": "Add listener that is notified when services are added or removed.\n@param listener listener to notify",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.plugintool.util.ServiceListener",
          "type_short": "ServiceListener",
          "comment": "listener to notify"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeServiceListener",
      "comment": "Remove the given listener from list of listeners notified when\n services are added or removed.",
      "javadoc": "Remove the given listener from list of listeners notified when\n services are added or removed.\n@param listener listener to remove",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.plugintool.util.ServiceListener",
          "type_short": "ServiceListener",
          "comment": "listener to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setServiceAddedNotificationsOn",
      "comment": "Set the indicator for whether service listeners should be notified.\n While plugins are being restored from a tool state, this indicator\n is false, as a plugin may not be in the proper state to handle the\n notification.",
      "javadoc": "Set the indicator for whether service listeners should be notified.\n While plugins are being restored from a tool state, this indicator\n is false, as a plugin may not be in the proper state to handle the\n notification.\n@param b true means to notify listeners of the services added to\n the tool",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to notify listeners of the services added to\n the tool"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "notifyServiceAdded",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "interfaceClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "service",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addService",
      "comment": "Add the service to the tool. Notify the service listeners if the\n notification indicator is true; otherwise, add the service to a list\n that will be used to notify listeners when notifications are \n turned on again.",
      "javadoc": "Add the service to the tool. Notify the service listeners if the\n notification indicator is true; otherwise, add the service to a list\n that will be used to notify listeners when notifications are \n turned on again.\n@param interfaceClass class of the service interface being added\n@param service implementation of the service; it may be a plugin or\n may be some object created by the plugin\n@see #setServiceAddedNotificationsOn(boolean)",
      "static": false,
      "params": [
        {
          "name": "interfaceClass",
          "type_long": "java.lang.Class\u003c? extends T\u003e",
          "type_short": "Class",
          "comment": "class of the service interface being added"
        },
        {
          "name": "service",
          "type_long": "T",
          "type_short": "T",
          "comment": "implementation of the service; it may be a plugin or\n may be some object created by the plugin"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeService",
      "comment": "Remove the service from the tool.",
      "javadoc": "Remove the service from the tool.",
      "static": false,
      "params": [
        {
          "name": "interfaceClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "service",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getService",
      "comment": "Return the first implementation found for the given service class.",
      "javadoc": "Return the first implementation found for the given service class.\n@param interfaceClass interface class for the service\n@return null if the interfaceClass was not registered",
      "static": false,
      "params": [
        {
          "name": "interfaceClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "interface class for the service"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "null if the interfaceClass was not registered"
      },
      "throws": []
    },
    {
      "name": "getServices",
      "comment": "Get an array of objects that implement the given interfaceClass.",
      "javadoc": "Get an array of objects that implement the given interfaceClass.\n@param interfaceClass interface class for the service\n@return zero length array if the interfaceClass was not registered",
      "static": false,
      "params": [
        {
          "name": "interfaceClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "interface class for the service"
        }
      ],
      "return": {
        "type_long": "T[]",
        "type_short": "T[]",
        "comment": "zero length array if the interfaceClass was not registered"
      },
      "throws": []
    },
    {
      "name": "isService",
      "comment": "Returns true if the specified serviceInterface\n is a valid service that exists in this service manager.",
      "javadoc": "Returns true if the specified \u003ccode\u003eserviceInterface\u003c/code\u003e\n is a valid service that exists in this service manager.\n@param serviceInterface the service interface\n@return true if the specified \u003ccode\u003eserviceInterface\u003c/code\u003e",
      "static": false,
      "params": [
        {
          "name": "serviceInterface",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "the service interface"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the specified serviceInterface"
      },
      "throws": []
    },
    {
      "name": "getAllServices",
      "comment": "Returns a array of all service implementors.",
      "javadoc": "Returns a array of all service implementors.\n@return a array of all service implementors",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.framework.plugintool.ServiceInterfaceImplementationPair\u003e",
        "type_short": "List",
        "comment": "a array of all service implementors"
      },
      "throws": []
    }
  ]
}
