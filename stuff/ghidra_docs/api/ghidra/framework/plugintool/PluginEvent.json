{
  "name": "PluginEvent",
  "comment": "Event generated by a plugin.\n \n A PluginEvent should be annotate with a ToolEventName if it may be\n passed between multiple tools via a ToolConnection.",
  "javadoc": "Event generated by a plugin.\n \u003cp\u003e\n A PluginEvent should be annotate with a {@link ToolEventName} if it may be\n passed between multiple tools via a {@link ToolConnection}.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "EXTERNAL_SOURCE_NAME",
      "comment": "Name of event source when plugin event is passed to\n another tool as cross-tool event.",
      "javadoc": "Name of event source when plugin event is passed to\n another tool as cross-tool event.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"External Tool\""
    },
    {
      "name": "eventName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "sourceName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "triggerEvent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.PluginEvent",
      "type_short": "PluginEvent",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "lookupToolEventName",
      "comment": "Returns the tool event name corresponding to the given pluginEventClass.\n If no corresponding tool event exists, null will be returned.",
      "javadoc": "Returns the tool event name corresponding to the given pluginEventClass.\n If no corresponding tool event exists, null will be returned.",
      "static": true,
      "params": [
        {
          "name": "pluginEventClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param sourceName source name of the event\n@param eventName name of event",
      "static": false,
      "params": [
        {
          "name": "sourceName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "source name of the event"
        },
        {
          "name": "eventName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of event"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isToolEvent",
      "comment": "Determine if this event has been annotated with a ToolEventName which\n makes it available for passing to another tool via a ToolConnection.",
      "javadoc": "Determine if this event has been annotated with a {@link ToolEventName} which\n makes it available for passing to another tool via a {@link ToolConnection}.\n@return true if event can be utilized as a cross-tool event",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if event can be utilized as a cross-tool event"
      },
      "throws": []
    },
    {
      "name": "getToolEventName",
      "comment": "Get the optional cross-tool event name which has been established via\n a ToolEventName annotation which makes it available for\n passing as an external tool via a ToolConnection.\n This name may differ from the #getEventName().s",
      "javadoc": "Get the optional cross-tool event name which has been established via\n a {@link ToolEventName} annotation which makes it available for\n passing as an external tool via a {@link ToolConnection}.\n This name may differ from the {@link #getEventName()}.s\n@return tool event name or null if not permitted as a cross-tool event",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "tool event name or null if not permitted as a cross-tool event"
      },
      "throws": []
    },
    {
      "name": "getEventName",
      "comment": "Get the plugin event name.",
      "javadoc": "Get the plugin event name.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSourceName",
      "comment": "Returns the name of the plugin immediately responsible for firing this\n event.",
      "javadoc": "Returns the name of the plugin immediately responsible for firing this\n event.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSourceName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTriggerEvent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "triggerEvent",
          "type_long": "ghidra.framework.plugintool.PluginEvent",
          "type_short": "PluginEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTriggerEvent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginEvent",
        "type_short": "PluginEvent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDetails",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
