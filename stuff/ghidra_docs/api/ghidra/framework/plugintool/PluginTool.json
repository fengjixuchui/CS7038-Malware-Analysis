{
  "name": "PluginTool",
  "comment": "Base class that is a container to manage plugins and their actions, and to coordinate the\n firing of plugin events and tool events. A PluginTool may have visible components supplied by\n ComponentProviders . These components may be docked within the tool, or moved\n out into their own windows.\n\n Plugins normally add actions via #addAction(DockingActionIf).   There is also\n an alternate method for getting actions to appear in the popup context menu (see\n #addPopupActionProvider(PopupActionProvider)).   The popup listener mechanism is generally not\n needed and should only be used in special circumstances (see PopupActionProvider).\n \n The PluginTool also manages tasks that run in the background, and options used by the plugins.",
  "javadoc": "Base class that is a container to manage plugins and their actions, and to coordinate the\n firing of plugin events and tool events. A PluginTool may have visible components supplied by\n \u003cpre\u003eComponentProviders \u003c/pre\u003e. These components may be docked within the tool, or moved\n out into their own windows.\n\n \u003cp\u003ePlugins normally add actions via {@link #addAction(DockingActionIf)}.   There is also\n an alternate method for getting actions to appear in the popup context menu (see\n {@link #addPopupActionProvider(PopupActionProvider)}).   The popup listener mechanism is generally not\n needed and should only be used in special circumstances (see {@link PopupActionProvider}).\n \n \u003cp\u003eThe PluginTool also manages tasks that run in the background, and options used by the plugins.",
  "static": false,
  "implements": [],
  "extends": "docking.AbstractDockingTool",
  "fields": [
    {
      "name": "TOOL_NAME_PROPERTY",
      "comment": "Name of the property for the tool name.",
      "javadoc": "Name of the property for the tool name.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"ToolName\""
    },
    {
      "name": "ICON_PROPERTY_NAME",
      "comment": "Name of the property for the tool icon.",
      "javadoc": "Name of the property for the tool icon.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Icon\""
    },
    {
      "name": "DESCRIPTION_PROPERTY_NAME",
      "comment": "Name of the property for the description of the tool.",
      "javadoc": "Name of the property for the description of the tool.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Description\""
    },
    {
      "name": "PLUGIN_COUNT_PROPERTY_NAME",
      "comment": "Name of the property for the number of plugins the tool has.",
      "javadoc": "Name of the property for the number of plugins the tool has.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"PluginCount\""
    },
    {
      "name": "DOCKING_WINDOWS_ON_TOP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Docking Windows On Top\""
    },
    {
      "name": "SAVE_DIALOG_TITLE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Save Tool - Possible Conflict\""
    },
    {
      "name": "projectManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.model.ProjectManager",
      "type_short": "ProjectManager",
      "constant_value": null
    },
    {
      "name": "project",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.model.Project",
      "type_short": "Project",
      "constant_value": null
    },
    {
      "name": "instanceName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "toolName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "fullName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "subTitle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "serviceMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.mgr.ServiceManager",
      "type_short": "ServiceManager",
      "constant_value": null
    },
    {
      "name": "optionsMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.mgr.OptionsManager",
      "type_short": "OptionsManager",
      "constant_value": null
    },
    {
      "name": "pluginMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.PluginManager",
      "type_short": "PluginManager",
      "constant_value": null
    },
    {
      "name": "eventMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.mgr.EventManager",
      "type_short": "EventManager",
      "constant_value": null
    },
    {
      "name": "dialogMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.mgr.DialogManager",
      "type_short": "DialogManager",
      "constant_value": null
    },
    {
      "name": "propertyChangeMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.beans.PropertyChangeSupport",
      "type_short": "PropertyChangeSupport",
      "constant_value": null
    },
    {
      "name": "taskMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.mgr.ToolTaskManager",
      "type_short": "ToolTaskManager",
      "constant_value": null
    },
    {
      "name": "executingTaskListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cghidra.util.task.TaskListener\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "optionsListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.options.OptionsChangeListener",
      "type_short": "OptionsChangeListener",
      "constant_value": null
    },
    {
      "name": "manageDialog",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.dialog.ManagePluginsDialog",
      "type_short": "ManagePluginsDialog",
      "constant_value": null
    },
    {
      "name": "extensionTableProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.dialog.ExtensionTableProvider",
      "type_short": "ExtensionTableProvider",
      "constant_value": null
    },
    {
      "name": "iconURL",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.util.image.ToolIconURL",
      "type_short": "ToolIconURL",
      "constant_value": null
    },
    {
      "name": "toolServices",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.model.ToolServices",
      "type_short": "ToolServices",
      "constant_value": null
    },
    {
      "name": "isConfigurable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isDisposed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new PluginTool.",
      "javadoc": "Construct a new PluginTool.\n@param project project that contains this tool\n@param template the template from which to load this tool",
      "static": false,
      "params": [
        {
          "name": "project",
          "type_long": "ghidra.framework.model.Project",
          "type_short": "Project",
          "comment": "project that contains this tool"
        },
        {
          "name": "template",
          "type_long": "ghidra.framework.model.ToolTemplate",
          "type_short": "ToolTemplate",
          "comment": "the template from which to load this tool"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new PluginTool.",
      "javadoc": "Construct a new PluginTool.\n@param project project that contains the tool\n@param name the name of the tool\n@param isDockable true if the tool contains components that can be docked\n@param hasStatus true if the tool should display a status component\n@param isModal true if the tool is modal, meaning that while this tool is visible,\n        no other tool or dialog in Ghidra can have focus",
      "static": false,
      "params": [
        {
          "name": "project",
          "type_long": "ghidra.framework.model.Project",
          "type_short": "Project",
          "comment": "project that contains the tool"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the tool"
        },
        {
          "name": "isDockable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the tool contains components that can be docked"
        },
        {
          "name": "hasStatus",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the tool should display a status component"
        },
        {
          "name": "isModal",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the tool is modal, meaning that while this tool is visible,\n        no other tool or dialog in Ghidra can have focus"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "project",
          "type_long": "ghidra.framework.model.Project",
          "type_short": "Project",
          "comment": ""
        },
        {
          "name": "projectManager",
          "type_long": "ghidra.framework.model.ProjectManager",
          "type_short": "ProjectManager",
          "comment": ""
        },
        {
          "name": "toolServices",
          "type_long": "ghidra.framework.model.ToolServices",
          "type_short": "ToolServices",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "isDockable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "hasStatus",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "isModal",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPluginClassManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.util.PluginClassManager",
        "type_short": "PluginClassManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createDockingWindowManager",
      "comment": "This method exists here, as opposed to inline in the constructor, so that subclasses can\n alter the behavior of the DockingWindowManager construction.",
      "javadoc": "This method exists here, as opposed to inline in the constructor, so that subclasses can\n alter the behavior of the DockingWindowManager construction.\n@param isDockable true if the tool contains components that can be\n docked\n@param hasStatus true if the tool should display a status component\n@param isModal true if the tool is modal, meaning that while this tool\n is visible, no other tool or dialog in Ghidra can have focus\n@return a new DockingWindowManager",
      "static": false,
      "params": [
        {
          "name": "isDockable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the tool contains components that can be\n docked"
        },
        {
          "name": "hasStatus",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the tool should display a status component"
        },
        {
          "name": "isModal",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the tool is modal, meaning that while this tool\n is visible, no other tool or dialog in Ghidra can have focus"
        }
      ],
      "return": {
        "type_long": "docking.DockingWindowManager",
        "type_short": "DockingWindowManager",
        "comment": "a new DockingWindowManager"
      },
      "throws": []
    },
    {
      "name": "installHomeButton",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initActions",
      "comment": "Placeholder for subclasses to get a chance to install actions before plugins.",
      "javadoc": "Placeholder for subclasses to get a chance to install actions before plugins.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDefaultOptionValues",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "optionsChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "oldValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "newValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setWindowsOnTop",
      "comment": "Set the Tool option (GhidraOptions.OPTION_DOCKING_WINDOWS_ON_TOP)\n for whether a docked window will always be shown on top of its parent window.",
      "javadoc": "Set the Tool option (GhidraOptions.OPTION_DOCKING_WINDOWS_ON_TOP)\n for whether a docked window will always be shown on top of its parent window.\n@param b true means that the docked window will always appear on top of its\n parent window; false means to allow the docked window to be \"hidden\" under its\n parent dialog",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means that the docked window will always appear on top of its\n parent window; false means to allow the docked window to be \"hidden\" under its\n parent dialog"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isWindowsOnTop",
      "comment": "Return the value of the Tool option (GhidraOptions.OPTION_DOCKING_WINDOWS_ON_TOP)\n for whether docked windows will always be shown on top of their parent windows.",
      "javadoc": "Return the value of the Tool option (GhidraOptions.OPTION_DOCKING_WINDOWS_ON_TOP)\n for whether docked windows will always be shown on top of their parent windows.\n@return value of the Tool option, GhidraOptions.OPTION_DOCKING_WINDOWS_ON_TOP",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "value of the Tool option, GhidraOptions.OPTION_DOCKING_WINDOWS_ON_TOP"
      },
      "throws": []
    },
    {
      "name": "getManagePluginsDialog",
      "comment": "Returns the manage plugins dialog that is currently\n being used.",
      "javadoc": "Returns the manage plugins dialog that is currently\n being used.\n@return the current manage plugins dialog",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.dialog.ManagePluginsDialog",
        "type_short": "ManagePluginsDialog",
        "comment": "the current manage plugins dialog"
      },
      "throws": []
    },
    {
      "name": "showConfig",
      "comment": "Displays the manage plugins dialog.",
      "javadoc": "Displays the manage plugins dialog.\n@param addSaveActions if true show save actions\n@param isNewTool true if creating a new tool",
      "static": false,
      "params": [
        {
          "name": "addSaveActions",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true show save actions"
        },
        {
          "name": "isNewTool",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if creating a new tool"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showExtensions",
      "comment": "Displays the extensions installation dialog.",
      "javadoc": "Displays the extensions installation dialog.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showComponentHeader",
      "comment": "Set whether a component\u0027s header should be shown; the header is the component that\n is dragged in order to move the component within the tool, or out of the tool\n into a separate window",
      "javadoc": "Set whether a component\u0027s header should be shown; the header is the component that\n is dragged in order to move the component within the tool, or out of the tool\n into a separate window\n@param provider provider of the visible component in the tool\n@param b true means to show the header",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "provider of the visible component in the tool"
        },
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to show the header"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "installServices",
      "comment": "Install any services that are not provided by plugins",
      "javadoc": "Install any services that are not provided by plugins",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isService",
      "comment": "Returns true if the specified serviceInterface\n is a valid service that exists in this tool.",
      "javadoc": "Returns true if the specified \u003ccode\u003eserviceInterface\u003c/code\u003e\n is a valid service that exists in this tool.\n@param serviceInterface the service interface\n@return true if the specified \u003ccode\u003eserviceInterface\u003c/code\u003e",
      "static": false,
      "params": [
        {
          "name": "serviceInterface",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "the service interface"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the specified serviceInterface"
      },
      "throws": []
    },
    {
      "name": "getService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getServices",
      "comment": "Get the objects that implement the given service.",
      "javadoc": "Get the objects that implement the given service.\n@param c service class\n@return array of Objects that implement the service, c.",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "service class"
        }
      ],
      "return": {
        "type_long": "T[]",
        "type_short": "T[]",
        "comment": "array of Objects that implement the service, c."
      },
      "throws": []
    },
    {
      "name": "addService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "interfaceClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "service",
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "interfaceClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "service",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addServiceListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.plugintool.util.ServiceListener",
          "type_short": "ServiceListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeServiceListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.plugintool.util.ServiceListener",
          "type_short": "ServiceListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "beep",
      "comment": "A convenience method to make an attention-grabbing noise to the user",
      "javadoc": "A convenience method to make an attention-grabbing noise to the user",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDefaultComponent",
      "comment": "Sets the provider that should get the default focus when no component has focus.",
      "javadoc": "Sets the provider that should get the default focus when no component has focus.\n@param provider the provider that should get the default focus when no component has focus.",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider that should get the default focus when no component has focus."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToolTemplate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "includeConfigState",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.ToolTemplate",
        "type_short": "ToolTemplate",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveToolToToolTemplate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ToolTemplate",
        "type_short": "ToolTemplate",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveWindowingDataToXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "org.jdom.Element",
        "type_short": "Element",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreWindowingDataFromXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "element",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "acceptDomainFiles",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "ghidra.framework.model.DomainFile[]",
          "type_short": "ghidra.framework.model.DomainFile[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPropertyChangeListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "java.beans.PropertyChangeListener",
          "type_short": "PropertyChangeListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addToolListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.model.ToolListener",
          "type_short": "ToolListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasToolListeners",
      "comment": "Returns true if there is at least one tool listening to this tool\u0027s plugin events",
      "javadoc": "Returns true if there is at least one tool listening to this tool\u0027s plugin events\n@return true if there is at least one tool listening to this tool\u0027s plugin events",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there is at least one tool listening to this tool\u0027s plugin events"
      },
      "throws": []
    },
    {
      "name": "exit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disposeManagers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "firePluginEvent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "ghidra.framework.plugintool.PluginEvent",
          "type_short": "PluginEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConsumedToolEventNames",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDomainFiles",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile[]",
        "type_short": "ghidra.framework.model.DomainFile[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIcon",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.ImageIcon",
        "type_short": "ImageIcon",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIconURL",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.util.image.ToolIconURL",
        "type_short": "ToolIconURL",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInstanceName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSupportedDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003c?\u003e[]",
        "type_short": "java.lang.Class\u003c?\u003e[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToolEventNames",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToolName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "putInstanceName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newInstanceName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removePropertyChangeListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "java.beans.PropertyChangeListener",
          "type_short": "PropertyChangeListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeToolListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.model.ToolListener",
          "type_short": "ToolListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreDataStateFromXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "root",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveDataStateToXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "savingProject",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "org.jdom.Element",
        "type_short": "Element",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreFromXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "root",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveToXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "includeConfigState",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "org.jdom.Element",
        "type_short": "Element",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setConfigChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "changed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setIconURL",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newIconURL",
          "type_long": "docking.util.image.ToolIconURL",
          "type_short": "ToolIconURL",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToolName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processToolEvent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "toolEvent",
          "type_long": "ghidra.framework.plugintool.PluginEvent",
          "type_short": "PluginEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "execute",
      "comment": "Call the applyTo() method on the given command to make some change to\n the domain object; the command is done in the AWT thread, therefore,\n the command that is to be executed should be a relatively quick operation\n so that the event queue does not appear to \"hang.\" For lengthy\n operations, the command should be done in a background task.",
      "javadoc": "Call the applyTo() method on the given command to make some change to\n the domain object; the command is done in the AWT thread, therefore,\n the command that is to be executed should be a relatively quick operation\n so that the event queue does not appear to \"hang.\" For lengthy\n operations, the command should be done in a background task.\n@param command command to apply\n@param obj domain object that the command will be applied to\n@return status of the command\u0027s applyTo() method\n@see #executeBackgroundCommand(BackgroundCommand, UndoableDomainObject)",
      "static": false,
      "params": [
        {
          "name": "command",
          "type_long": "ghidra.framework.cmd.Command",
          "type_short": "Command",
          "comment": "command to apply"
        },
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": "domain object that the command will be applied to"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "status of the command\u0027s applyTo() method"
      },
      "throws": []
    },
    {
      "name": "isExecutingCommand",
      "comment": "Return whether there is a command being executed",
      "javadoc": "Return whether there is a command being executed\n@return true if there is a command being executed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there is a command being executed"
      },
      "throws": []
    },
    {
      "name": "threadIsBackgroundTaskThread",
      "comment": "",
      "javadoc": "@return true if the current thread group or its ancestors is\n a member of this tools background task thread group, else false",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the current thread group or its ancestors is\n a member of this tools background task thread group, else false"
      },
      "throws": []
    },
    {
      "name": "executeBackgroundCommand",
      "comment": "Start a new thread that will call the given command\u0027s applyTo()\n method to make some change in the domain object. This method should\n be called for an operation that could potentially take a long time to\n complete.",
      "javadoc": "Start a new thread that will call the given command\u0027s applyTo()\n method to make some change in the domain object. This method should\n be called for an operation that could potentially take a long time to\n complete.\n@param cmd command that will be executed in another thread (not the\n AWT Thread)\n@param obj domain object that the command will be applied to",
      "static": false,
      "params": [
        {
          "name": "cmd",
          "type_long": "ghidra.framework.cmd.BackgroundCommand",
          "type_short": "BackgroundCommand",
          "comment": "command that will be executed in another thread (not the\n AWT Thread)"
        },
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.UndoableDomainObject",
          "type_short": "UndoableDomainObject",
          "comment": "domain object that the command will be applied to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "terminateBackgroundCommands",
      "comment": "Cancel any running command and clear the command queue.",
      "javadoc": "Cancel any running command and clear the command queue.\n@param wait if true wait for current task to cancel cleanly",
      "static": false,
      "params": [
        {
          "name": "wait",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true wait for current task to cancel cleanly"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "scheduleFollowOnCommand",
      "comment": "Add the given background command to a queue that is processed after the\n main background command completes.",
      "javadoc": "Add the given background command to a queue that is processed after the\n main background command completes.\n@param cmd background command to submit\n@param obj the domain object to be modified by the command.",
      "static": false,
      "params": [
        {
          "name": "cmd",
          "type_long": "ghidra.framework.cmd.BackgroundCommand",
          "type_short": "BackgroundCommand",
          "comment": "background command to submit"
        },
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.UndoableDomainObject",
          "type_short": "UndoableDomainObject",
          "comment": "the domain object to be modified by the command."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "execute",
      "comment": "Launch the task in a new thread",
      "javadoc": "Launch the task in a new thread\n@param task task to run in a new thread\n@param delay number of milliseconds to delay the display of task monitor dialog",
      "static": false,
      "params": [
        {
          "name": "task",
          "type_long": "ghidra.util.task.Task",
          "type_short": "Task",
          "comment": "task to run in a new thread"
        },
        {
          "name": "delay",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of milliseconds to delay the display of task monitor dialog"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "execute",
      "comment": "Launch the task in a new thread",
      "javadoc": "Launch the task in a new thread\n@param task task to run in a new thread",
      "static": false,
      "params": [
        {
          "name": "task",
          "type_long": "ghidra.util.task.Task",
          "type_short": "Task",
          "comment": "task to run in a new thread"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "categoryName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.options.ToolOptions",
        "type_short": "ToolOptions",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerOptionsNameChange",
      "comment": "Updates saved options from an old name to a new name.  NOTE: this must be called before\n any calls to register or get options.",
      "javadoc": "Updates saved options from an old name to a new name.  NOTE: this must be called before\n any calls to register or get options.\n@param oldName the old name of the options.\n@param newName the new name of the options.",
      "static": false,
      "params": [
        {
          "name": "oldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the old name of the options."
        },
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new name of the options."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasOptions",
      "comment": "Return true if there is an options category with the given name",
      "javadoc": "Return true if there is an options category with the given name\n@param category name of the options set\n@return true if there is an options category with the given name",
      "static": false,
      "params": [
        {
          "name": "category",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the options set"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there is an options category with the given name"
      },
      "throws": []
    },
    {
      "name": "getOptionsManager",
      "comment": "Returns options manager",
      "javadoc": "Returns options manager\n@return the manager",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.mgr.OptionsManager",
        "type_short": "OptionsManager",
        "comment": "the manager"
      },
      "throws": []
    },
    {
      "name": "getOptions",
      "comment": "Get all options.",
      "javadoc": "Get all options.\n@return zero-length array if no options exist.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.options.ToolOptions[]",
        "type_short": "ghidra.framework.options.ToolOptions[]",
        "comment": "zero-length array if no options exist."
      },
      "throws": []
    },
    {
      "name": "getProject",
      "comment": "Get the project associated with this tool.  Null will be returned if there is no\n project open or if this tool does not use projects.",
      "javadoc": "Get the project associated with this tool.  Null will be returned if there is no\n project open or if this tool does not use projects.\n@return null if there is no open project",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.Project",
        "type_short": "Project",
        "comment": "null if there is no open project"
      },
      "throws": []
    },
    {
      "name": "getProjectManager",
      "comment": "Returns the project manager associated with this tool.\n\n Null will be returned if this tool does not use projects.",
      "javadoc": "Returns the project manager associated with this tool.\n\n \u003cP\u003eNull will be returned if this tool does not use projects.\n@return the project manager associated with this tool",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ProjectManager",
        "type_short": "ProjectManager",
        "comment": "the project manager associated with this tool"
      },
      "throws": []
    },
    {
      "name": "getToolServices",
      "comment": "Returns an object that provides fundamental services that plugins can use",
      "javadoc": "Returns an object that provides fundamental services that plugins can use\n@return the services instance",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ToolServices",
        "type_short": "ToolServices",
        "comment": "the services instance"
      },
      "throws": []
    },
    {
      "name": "setSubTitle",
      "comment": "Sets the subtitle on the tool; the subtitle is extra text in the title.",
      "javadoc": "Sets the subtitle on the tool; the subtitle is extra text in the title.\n@param subTitle the subtitle to display on the tool",
      "static": false,
      "params": [
        {
          "name": "subTitle",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the subtitle to display on the tool"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPlugin",
      "comment": "Add a plugin to the tool.",
      "javadoc": "Add a plugin to the tool.\n@param className name of the plugin class, e.g., \"MyPlugin.class.getName()\"\n@throws PluginException if the plugin could not be constructed, or\n there was problem executing its init() method, or if a plugin of this\n class already exists in the tool",
      "static": false,
      "params": [
        {
          "name": "className",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the plugin class, e.g., \"MyPlugin.class.getName()\""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.framework.plugintool.util.PluginException",
          "type_short": "PluginException",
          "comment": "if the plugin could not be constructed, or\n there was problem executing its init() method, or if a plugin of this\n class already exists in the tool"
        }
      ]
    },
    {
      "name": "addPlugins",
      "comment": "Add plugins to the tool.",
      "javadoc": "Add plugins to the tool.\n@param classNames array of plugin class names\n@throws PluginException if a plugin could not be constructed, or\n there was problem executing its init() method, or if a plugin of this\n class already exists in the tool",
      "static": false,
      "params": [
        {
          "name": "classNames",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "array of plugin class names"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.framework.plugintool.util.PluginException",
          "type_short": "PluginException",
          "comment": "if a plugin could not be constructed, or\n there was problem executing its init() method, or if a plugin of this\n class already exists in the tool"
        }
      ]
    },
    {
      "name": "addPlugin",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.framework.plugintool.Plugin",
          "type_short": "Plugin",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.framework.plugintool.util.PluginException",
          "type_short": "PluginException",
          "comment": ""
        }
      ]
    },
    {
      "name": "hasUnsavedData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removePlugins",
      "comment": "Remove the array of plugins from the tool.",
      "javadoc": "Remove the array of plugins from the tool.\n@param plugins array of plugins to remove",
      "static": false,
      "params": [
        {
          "name": "plugins",
          "type_long": "ghidra.framework.plugintool.Plugin[]",
          "type_short": "ghidra.framework.plugintool.Plugin[]",
          "comment": "array of plugins to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getManagedPlugins",
      "comment": "Return a list of plugins in the tool",
      "javadoc": "Return a list of plugins in the tool\n@return list of plugins in the tool",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.framework.plugintool.Plugin\u003e",
        "type_short": "List",
        "comment": "list of plugins in the tool"
      },
      "throws": []
    },
    {
      "name": "saveTool",
      "comment": "Save this tool\u0027s configuration.",
      "javadoc": "Save this tool\u0027s configuration.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveToolAs",
      "comment": "Triggers a \u0027Save As\u0027 dialog that allows the user to save off the tool under a different\n name.  This returns true if the user performed a save.",
      "javadoc": "Triggers a \u0027Save As\u0027 dialog that allows the user to save off the tool under a different\n name.  This returns true if the user performed a save.\n@return true if a save happened",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a save happened"
      },
      "throws": []
    },
    {
      "name": "addStatusComponent",
      "comment": "Add a status component to the tool.",
      "javadoc": "Add a status component to the tool.\n@param c component to add\n@param addBorder true if a border should be added to the component\n@param rightSide true if the component should be placed in the right side of the tool",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": "component to add"
        },
        {
          "name": "addBorder",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if a border should be added to the component"
        },
        {
          "name": "rightSide",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the component should be placed in the right side of the tool"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeStatusComponent",
      "comment": "Remove the status component.",
      "javadoc": "Remove the status component.\n@param c status component to remove",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": "status component to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addExitAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addOptionsAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addSaveToolAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addExportToolAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addHelpActions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearLastEvents",
      "comment": "Clear the list of events that were last generated.",
      "javadoc": "Clear the list of events that were last generated.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "Close this tool:\n \n \tif there are no tasks running.\n \tresolve the state of any plugins so they can be closed.\n \tPrompt the user to save any changes.\n \tclose all associated plugins (this closes the domain object if one is open).\n \tpop up dialog to save the configuration if it has changed.\n \tnotify the project tool services that this tool is going away.\n ",
      "javadoc": "Close this tool:\n \u003cOL\u003e\n \t\u003cLI\u003eif there are no tasks running.\n \t\u003cLI\u003eresolve the state of any plugins so they can be closed.\n \t\u003cLI\u003ePrompt the user to save any changes.\n \t\u003cLI\u003eclose all associated plugins (this closes the domain object if one is open).\n \t\u003cLI\u003epop up dialog to save the configuration if it has changed.\n \t\u003cLI\u003enotify the project tool services that this tool is going away.\n \u003c/OL\u003e",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doClose",
      "comment": "Close this tool:\n \n \tif there are no tasks running.\n \tclose all associated plugins (this closes the domain object if one is open).\n \tpop up dialog to save the configuration if it has changed;\n \tnotify the project tool services that this tool is going away.\n ",
      "javadoc": "Close this tool:\n \u003cOL\u003e\n \t\u003cLI\u003eif there are no tasks running.\n \t\u003cLI\u003eclose all associated plugins (this closes the domain object if one is open).\n \t\u003cLI\u003epop up dialog to save the configuration if it has changed;\n \t\u003cLI\u003enotify the project tool services that this tool is going away.\n \u003c/OL\u003e",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "shouldSave",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doSaveTool",
      "comment": "Called when it is time to save the tool.  Handles auto-saving logic.",
      "javadoc": "Called when it is time to save the tool.  Handles auto-saving logic.\n@return true if a save happened",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a save happened"
      },
      "throws": []
    },
    {
      "name": "canClose",
      "comment": "Can this tool be closed?\n Note: This forces plugins to terminate any tasks they have running and\n apply any unsaved data to domain objects or files. If they can\u0027t do\n this or the user cancels then this returns false.",
      "javadoc": "Can this tool be closed?\n \u003cbr\u003eNote: This forces plugins to terminate any tasks they have running and\n apply any unsaved data to domain objects or files. If they can\u0027t do\n this or the user cancels then this returns false.\n@param isExiting whether the tool is exiting\n@return false if this tool has tasks in progress or can\u0027t be closed\n since the user has unfinished/unsaved changes.",
      "static": false,
      "params": [
        {
          "name": "isExiting",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "whether the tool is exiting"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "false if this tool has tasks in progress or can\u0027t be closed\n since the user has unfinished/unsaved changes."
      },
      "throws": []
    },
    {
      "name": "canCloseDomainObject",
      "comment": "Can the domain object be closed?\n Note: This forces plugins to terminate any tasks they have running for the\n indicated domain object and apply any unsaved data to the domain object. If they can\u0027t do\n this or the user cancels then this returns false.",
      "javadoc": "Can the domain object be closed?\n \u003cbr\u003eNote: This forces plugins to terminate any tasks they have running for the\n indicated domain object and apply any unsaved data to the domain object. If they can\u0027t do\n this or the user cancels then this returns false.\n@param domainObject the domain object to check\n@return false any of the plugins reports that the domain object\n should not be closed",
      "static": false,
      "params": [
        {
          "name": "domainObject",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": "the domain object to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "false any of the plugins reports that the domain object\n should not be closed"
      },
      "throws": []
    },
    {
      "name": "canCloseDomainFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "domainFile",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "prepareToSave",
      "comment": "Called when the domain object is about to be saved; this allows any plugin that has\n a cache to flush out to the domain object.",
      "javadoc": "Called when the domain object is about to be saved; this allows any plugin that has\n a cache to flush out to the domain object.\n@param dobj domain object that is about to be saved",
      "static": false,
      "params": [
        {
          "name": "dobj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": "domain object that is about to be saved"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSize",
      "comment": "Sets the size of the tool\u0027s main window",
      "javadoc": "Sets the size of the tool\u0027s main window\n@param width width in pixels\n@param height height in pixels",
      "static": false,
      "params": [
        {
          "name": "width",
          "type_long": "int",
          "type_short": "int",
          "comment": "width in pixels"
        },
        {
          "name": "height",
          "type_long": "int",
          "type_short": "int",
          "comment": "height in pixels"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "Return the dimension of this tool\u0027s frame.",
      "javadoc": "Return the dimension of this tool\u0027s frame.\n@return dimension of this tool\u0027s frame",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Dimension",
        "type_short": "Dimension",
        "comment": "dimension of this tool\u0027s frame"
      },
      "throws": []
    },
    {
      "name": "setLocation",
      "comment": "Set the location of this tool\u0027s frame on the screen.",
      "javadoc": "Set the location of this tool\u0027s frame on the screen.\n@param x screen x coordinate\n@param y screen y coordinate",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "int",
          "type_short": "int",
          "comment": "screen x coordinate"
        },
        {
          "name": "y",
          "type_long": "int",
          "type_short": "int",
          "comment": "screen y coordinate"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLocation",
      "comment": "Return the location of this tool\u0027s frame on the screen.",
      "javadoc": "Return the location of this tool\u0027s frame on the screen.\n@return location of this tool\u0027s frame",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Point",
        "type_short": "Point",
        "comment": "location of this tool\u0027s frame"
      },
      "throws": []
    },
    {
      "name": "updateTitle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreOptionsFromXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "root",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "project",
          "type_long": "ghidra.framework.model.Project",
          "type_short": "Project",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restorePluginsFromXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "elem",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.framework.plugintool.util.PluginException",
          "type_short": "PluginException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getLastEvents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginEvent[]",
        "type_short": "ghidra.framework.plugintool.PluginEvent[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAll",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerEventProduced",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "eventClass",
          "type_long": "java.lang.Class\u003c? extends ghidra.framework.plugintool.PluginEvent\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addEventListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "eventClass",
          "type_long": "java.lang.Class\u003c? extends ghidra.framework.plugintool.PluginEvent\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "listener",
          "type_long": "ghidra.framework.plugintool.util.PluginEventListener",
          "type_short": "PluginEventListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "unregisterEventProduced",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "eventClass",
          "type_long": "java.lang.Class\u003c? extends ghidra.framework.plugintool.PluginEvent\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addListenerForAllPluginEvents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.plugintool.util.PluginEventListener",
          "type_short": "PluginEventListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeListenerForAllPluginEvents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.plugintool.util.PluginEventListener",
          "type_short": "PluginEventListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeEventListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "eventClass",
          "type_long": "java.lang.Class\u003c? extends ghidra.framework.plugintool.PluginEvent\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "listener",
          "type_long": "ghidra.framework.plugintool.util.PluginEventListener",
          "type_short": "PluginEventListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeEventListener",
      "comment": "Remove the event listener by className; the plugin registered\n for events, but the construction failed.",
      "javadoc": "Remove the event listener by className; the plugin registered\n for events, but the construction failed.\n@param className class name of the plugin that is the event listener",
      "static": false,
      "params": [
        {
          "name": "className",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "class name of the plugin that is the event listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showEditWindow",
      "comment": "Display an text edit box on top of the specified component.",
      "javadoc": "Display an text edit box on top of the specified component.\n@param defaultText initial text to be displayed in edit box\n@param comp component over which the edit box will be placed\n@param rect specifies the bounds of the edit box relative to the\n component.  The height is ignored.  The default text field height\n is used as the preferred height.\n@param listener when the edit is complete, this listener is notified\n with the new text.  The edit box is dismissed prior to notifying\n the listener.",
      "static": false,
      "params": [
        {
          "name": "defaultText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "initial text to be displayed in edit box"
        },
        {
          "name": "comp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "component over which the edit box will be placed"
        },
        {
          "name": "rect",
          "type_long": "java.awt.Rectangle",
          "type_short": "Rectangle",
          "comment": "specifies the bounds of the edit box relative to the\n component.  The height is ignored.  The default text field height\n is used as the preferred height."
        },
        {
          "name": "listener",
          "type_long": "docking.EditListener",
          "type_short": "EditListener",
          "comment": "when the edit is complete, this listener is notified\n with the new text.  The edit box is dismissed prior to notifying\n the listener."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cancelCurrentTask",
      "comment": "Cancel the current task in the tool.",
      "javadoc": "Cancel the current task in the tool.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setToolOptionsHelpLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTransientState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.util.TransientToolState",
        "type_short": "TransientToolState",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUndoRedoToolState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "domainObject",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.plugintool.util.UndoRedoToolState",
        "type_short": "UndoRedoToolState",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showDialogOnActiveWindow",
      "comment": "Shows the dialog using the tool\u0027s currently active window as a parent.  Also,\n remembers any size and location adjustments made by the user for the next\n time the dialog is shown.",
      "javadoc": "Shows the dialog using the tool\u0027s currently active window as a parent.  Also,\n remembers any size and location adjustments made by the user for the next\n time the dialog is shown.\n@param dialogComponent the DialogComponentProvider object to be shown in a dialog.\n@deprecated dialogs are now always shown over the active window when possible",
      "static": false,
      "params": [
        {
          "name": "dialogComponent",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": "the DialogComponentProvider object to be shown in a dialog."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showDialog",
      "comment": "Shows the dialog using the window containing the given componentProvider as its parent window.\n Remembers the last location and size of this dialog for the next time it is shown.",
      "javadoc": "Shows the dialog using the window containing the given componentProvider as its parent window.\n Remembers the last location and size of this dialog for the next time it is shown.\n@param dialogComponent the DialogComponentProvider object to be shown in a dialog.\n@param centeredOnProvider the component provider that is used to find a parent window for this dialog.\n The dialog is centered on this component provider\u0027s component.",
      "static": false,
      "params": [
        {
          "name": "dialogComponent",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": "the DialogComponentProvider object to be shown in a dialog."
        },
        {
          "name": "centeredOnProvider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the component provider that is used to find a parent window for this dialog.\n The dialog is centered on this component provider\u0027s component."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showDialog",
      "comment": "Shows the dialog using the tool\u0027s parent frame, but centers the dialog on the given\n component",
      "javadoc": "Shows the dialog using the tool\u0027s parent frame, but centers the dialog on the given\n component\n@param dialogComponent the DialogComponentProvider object to be shown in a dialog.\n@param centeredOnComponent the component on which to center the dialog.",
      "static": false,
      "params": [
        {
          "name": "dialogComponent",
          "type_long": "docking.DialogComponentProvider",
          "type_short": "DialogComponentProvider",
          "comment": "the DialogComponentProvider object to be shown in a dialog."
        },
        {
          "name": "centeredOnComponent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component on which to center the dialog."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getActiveWindow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Window",
        "type_short": "Window",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getActiveComponentProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.ComponentProvider",
        "type_short": "ComponentProvider",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "refreshKeybindings",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setUnconfigurable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isConfigurable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removePreferenceState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultToolContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.ActionContext",
        "type_short": "ActionContext",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contextChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkedRunSwingNow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "r",
          "type_long": "ghidra.framework.plugintool.PluginTool.CheckedRunnable\u003cT\u003e",
          "type_short": "CheckedRunnable",
          "comment": ""
        },
        {
          "name": "exceptionClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "T",
          "type_short": "T",
          "comment": ""
        }
      ]
    }
  ]
}
