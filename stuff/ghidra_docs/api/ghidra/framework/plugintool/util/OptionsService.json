{
  "name": "OptionsService",
  "comment": "Provides a service interface that allows the user to get Options and to check for the\n existence of options.",
  "javadoc": "Provides a service interface that allows the user to get Options and to check for the\n existence of options.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getOptions",
      "comment": "Get the list of options for all categories.",
      "javadoc": "Get the list of options for all categories.\n@return the list of options for all categories.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.options.Options[]",
        "type_short": "ghidra.framework.options.Options[]",
        "comment": "the list of options for all categories."
      },
      "throws": []
    },
    {
      "name": "getOptions",
      "comment": "Get the options for the given category name.   If no options exist with the given name,\n then a new options object is created.\n \n Note: the given name should not contains options path separator characters.  Any\n sub-options needed must be retrieved from the ToolOptions object returned from this\n method.",
      "javadoc": "Get the options for the given category name.   If no options exist with the given name,\n then a new options object is created.\n \n \u003cp\u003eNote: the given name should not contains options path separator characters.  Any\n sub-options needed must be retrieved from the ToolOptions object returned from this\n method.\n@param category name of category\n@return the options for the given category name.",
      "static": false,
      "params": [
        {
          "name": "category",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of category"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.options.ToolOptions",
        "type_short": "ToolOptions",
        "comment": "the options for the given category name."
      },
      "throws": []
    },
    {
      "name": "hasOptions",
      "comment": "Return whether an Options object exists for the given category.",
      "javadoc": "Return whether an Options object exists for the given category.\n@param category name of the category\n@return true if an Options object exists",
      "static": false,
      "params": [
        {
          "name": "category",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the category"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if an Options object exists"
      },
      "throws": []
    },
    {
      "name": "showOptionsDialog",
      "comment": "Shows Options Dialog with the node denoted by \"category\" being displayed.  The value is\n expected to be the name of a node in the options tree, residing under the root node.  You\n may also provide the name of such a node, followed by the options delimiter, followed by\n the name of a child node under that node.  For example, suppose in the options tree exists\n a node   You may pass the value \"Foo\" to get that node.  Or, suppose\n in the options tree exists a node   In this case, you may\n pass the value \"Foo.childNode1\", where the \u0027.\u0027 character is the delimiter of the\n ToolOptions class (this is the value at the time of writing this documentation).\n \n \n The filter text parameter is used to set the contents filter text of the options.  You may\n use this parameter to filter the tree; for example, to show only the node in the tree that\n you want the user to see.",
      "javadoc": "Shows Options Dialog with the node denoted by \"category\" being displayed.  The value is\n expected to be the name of a node in the options tree, residing under the root node.  You\n may also provide the name of such a node, followed by the options delimiter, followed by\n the name of a child node under that node.  For example, suppose in the options tree exists\n a node {@literal Root-\u003eFoo}  You may pass the value \"Foo\" to get that node.  Or, suppose\n in the options tree exists a node {@literal Root-\u003eFoo-\u003echildNode1}  In this case, you may\n pass the value \"Foo.childNode1\", where the \u0027.\u0027 character is the delimiter of the\n {@link ToolOptions} class (this is the value at the time of writing this documentation).\n \n \u003cp\u003e\n The filter text parameter is used to set the contents filter text of the options.  You may\n use this parameter to filter the tree; for example, to show only the node in the tree that\n you want the user to see.\n@param category The category of options to have displayed\n@param filterText An optional value used to filter the nodes visible in the options tree.\n                   You may pass \u003ccode\u003enull\u003c/code\u003e or the empty string \u003ccode\u003e\"\"\u003c/code\u003e here if you\n                   do not desire filtering.\n@throws IllegalArgumentException if the given \u003ccode\u003ecategory\u003c/code\u003e value does not exist in\n                                  the tree of options.",
      "static": false,
      "params": [
        {
          "name": "category",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The category of options to have displayed"
        },
        {
          "name": "filterText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "An optional value used to filter the nodes visible in the options tree.\n                   You may pass null or the empty string \"\" here if you\n                   do not desire filtering."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
