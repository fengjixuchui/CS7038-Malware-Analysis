{
  "name": "PluginUtils",
  "comment": "Utility class for plugin-related methods.",
  "javadoc": "Utility class for plugin-related methods.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPluginDescriptions",
      "comment": "Finds all PluginDescription objects that match a given set of plugin classes. This\n effectively tells the caller which of the given plugins have been loaded by the class loader.\n \n eg: If the list of plugin classes contains the class \"FooPlugin.class\", this method\n will search the PluginConfigurationModel for any plugin with the name \"FooPlugin\" and\n return its PluginDescription.\n \n Note that this method does not take path/package information into account when finding\n plugins; in the example above, if there is more than one plugin with the name \"FooPlugin\",\n only one will be found (the one found is not guaranteed to be the first).",
      "javadoc": "Finds all {@link PluginDescription} objects that match a given set of plugin classes. This\n effectively tells the caller which of the given plugins have been loaded by the class loader.\n \u003cp\u003e\n eg: If the list of plugin classes contains the class \"FooPlugin.class\", this method\n will search the {@link PluginConfigurationModel} for any plugin with the name \"FooPlugin\" and\n return its {@link PluginDescription}.\n \u003cp\u003e\n Note that this method does not take path/package information into account when finding\n plugins; in the example above, if there is more than one plugin with the name \"FooPlugin\",\n only one will be found (the one found is not guaranteed to be the first).\n@param tool the current tool\n@param plugins the list of plugin classes to search for\n@return list of plugin descriptions",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "the current tool"
        },
        {
          "name": "plugins",
          "type_long": "java.util.List\u003cjava.lang.Class\u003c?\u003e\u003e",
          "type_short": "List",
          "comment": "the list of plugin classes to search for"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.framework.plugintool.util.PluginDescription\u003e",
        "type_short": "List",
        "comment": "list of plugin descriptions"
      },
      "throws": []
    },
    {
      "name": "findLoadedPlugins",
      "comment": "Finds all plugin classes loaded from a given set of extensions.",
      "javadoc": "Finds all plugin classes loaded from a given set of extensions.\n@param extensions set of extensions to search\n@return list of loaded plugin classes, or empty list if none found",
      "static": true,
      "params": [
        {
          "name": "extensions",
          "type_long": "java.util.Set\u003cghidra.framework.plugintool.dialog.ExtensionDetails\u003e",
          "type_short": "Set",
          "comment": "set of extensions to search"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.Class\u003c?\u003e\u003e",
        "type_short": "List",
        "comment": "list of loaded plugin classes, or empty list if none found"
      },
      "throws": []
    },
    {
      "name": "findLoadedPlugins",
      "comment": "Finds all plugin classes loaded from a particular folder/file.\n \n This uses the ClassSearcher to find all Plugin.class objects on the\n classpath. For each class, the original resource file is compared against the\n given folder and if it\u0027s contained therein (or if it matches a given jar), it\u0027s\n added to the return list.",
      "javadoc": "Finds all plugin classes loaded from a particular folder/file.\n \u003cp\u003e\n This uses the {@link ClassSearcher} to find all \u003ccode\u003ePlugin.class\u003c/code\u003e objects on the\n classpath. For each class, the original resource file is compared against the\n given folder and if it\u0027s contained therein (or if it matches a given jar), it\u0027s\n added to the return list.\n@param dir the directory to search, or a jar file\n@return list of {@link Plugin} classes, or empty list if none found",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the directory to search, or a jar file"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.Class\u003c?\u003e\u003e",
        "type_short": "List",
        "comment": "list of Plugin classes, or empty list if none found"
      },
      "throws": []
    },
    {
      "name": "findJarFiles",
      "comment": "Populates the given list with all discovered jar files found in the given directory and\n its subdirectories.",
      "javadoc": "Populates the given list with all discovered jar files found in the given directory and\n its subdirectories.\n@param dir the directory to search\n@param jarFiles list of found jar files",
      "static": true,
      "params": [
        {
          "name": "dir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the directory to search"
        },
        {
          "name": "jarFiles",
          "type_long": "java.util.List\u003cjava.io.File\u003e",
          "type_short": "List",
          "comment": "list of found jar files"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "instantiatePlugin",
      "comment": "Returns a new instance of a Plugin.",
      "javadoc": "Returns a new instance of a {@link Plugin}.\n@param pluginClass Specific Plugin Class\n@param tool The {@link PluginTool} that is the parent of the new Plugin\n@return a new Plugin instance, never NULL.\n@throws PluginException if problem constructing the Plugin instance.",
      "static": true,
      "params": [
        {
          "name": "pluginClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "Specific Plugin Class"
        },
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "The PluginTool that is the parent of the new Plugin"
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "a new Plugin instance, never NULL."
      },
      "throws": [
        {
          "type_long": "ghidra.framework.plugintool.util.PluginException",
          "type_short": "PluginException",
          "comment": "if problem constructing the Plugin instance."
        }
      ]
    },
    {
      "name": "forName",
      "comment": "Returns the Class for a Plugin, by class name.",
      "javadoc": "Returns the Class for a Plugin, by class name.\n@param pluginClassName String class name\n@return Class that is a Plugin, never null.\n@throws PluginException if specified class does not exist or is not a Plugin.",
      "static": true,
      "params": [
        {
          "name": "pluginClassName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String class name"
        }
      ],
      "return": {
        "type_long": "java.lang.Class\u003c? extends ghidra.framework.plugintool.Plugin\u003e",
        "type_short": "Class",
        "comment": "Class that is a Plugin, never null."
      },
      "throws": [
        {
          "type_long": "ghidra.framework.plugintool.util.PluginException",
          "type_short": "PluginException",
          "comment": "if specified class does not exist or is not a Plugin."
        }
      ]
    },
    {
      "name": "getStaticStringFieldValue",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "fieldName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultProviderForServiceClass",
      "comment": "Returns the Plugin Class that is specified as being the defaultProvider for a\n Service, or null if no default provider is specified.\n ",
      "javadoc": "Returns the Plugin Class that is specified as being the defaultProvider for a\n Service, or null if no default provider is specified.\n \u003cp\u003e\n@param serviceClass Service interface class\n@return Plugin class that provides the specified service",
      "static": true,
      "params": [
        {
          "name": "serviceClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "Service interface class"
        }
      ],
      "return": {
        "type_long": "java.lang.Class\u003c? extends ghidra.framework.plugintool.Plugin\u003e",
        "type_short": "Class",
        "comment": "Plugin class that provides the specified service"
      },
      "throws": []
    },
    {
      "name": "getPluginNameFromClass",
      "comment": "Returns the name of a Plugin based on its class.",
      "javadoc": "Returns the name of a Plugin based on its class.\n@param pluginClass Class to get name from\n@return String name, based on Class\u0027s getSimpleName()",
      "static": true,
      "params": [
        {
          "name": "pluginClass",
          "type_long": "java.lang.Class\u003c? extends ghidra.framework.plugintool.Plugin\u003e",
          "type_short": "Class",
          "comment": "Class to get name from"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String name, based on Class\u0027s getSimpleName()"
      },
      "throws": []
    },
    {
      "name": "assertUniquePluginName",
      "comment": "Ensures the specified Plugin has a unique name among all Plugin classes\n found in the current ClassSearcher\u0027s reach.",
      "javadoc": "Ensures the specified Plugin has a unique name among all Plugin classes\n found in the current ClassSearcher\u0027s reach.\n@param pluginClass Class\n@throws PluginException throws exception if Plugin class is not uniquely named",
      "static": true,
      "params": [
        {
          "name": "pluginClass",
          "type_long": "java.lang.Class\u003c? extends ghidra.framework.plugintool.Plugin\u003e",
          "type_short": "Class",
          "comment": "Class"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.framework.plugintool.util.PluginException",
          "type_short": "PluginException",
          "comment": "throws exception if Plugin class is not uniquely named"
        }
      ]
    },
    {
      "name": "isValidPluginClass",
      "comment": "Returns true if the specified Plugin class is well-formed and meets requirements for\n Ghidra Plugins:\n \n \tHas a constructor with a signature of ThePlugin(PluginTool tool)\n \tHas a PluginInfo annotation.\n \n \n See Plugin.\n ",
      "javadoc": "Returns true if the specified Plugin class is well-formed and meets requirements for\n Ghidra Plugins:\n \u003cul\u003e\n \t\u003cli\u003eHas a constructor with a signature of \u003ccode\u003eThePlugin(PluginTool tool)\u003c/code\u003e\n \t\u003cli\u003eHas a {@link PluginInfo @PluginInfo} annotation.\n \u003c/ul\u003e\n \u003cp\u003e\n See {@link Plugin}.\n \u003cp\u003e\n@param pluginClass Class to examine.\n@return boolean true if well formed.",
      "static": true,
      "params": [
        {
          "name": "pluginClass",
          "type_long": "java.lang.Class\u003c? extends ghidra.framework.plugintool.Plugin\u003e",
          "type_short": "Class",
          "comment": "Class to examine."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if well formed."
      },
      "throws": []
    }
  ]
}
