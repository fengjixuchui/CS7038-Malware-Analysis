{
  "name": "ServiceProvider",
  "comment": "Interface for providing Services",
  "javadoc": "Interface for providing Services",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getService",
      "comment": "Returns the Service object that implements the given service interface.",
      "javadoc": "Returns the Service object that implements the given service interface.\n@param serviceClass the interface class.",
      "static": false,
      "params": [
        {
          "name": "serviceClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the interface class."
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addServiceListener",
      "comment": "Adds a listener that will be called as services are added and removed from this \n ServiceProvider.",
      "javadoc": "Adds a listener that will be called as services are added and removed from this \n ServiceProvider.\n@param listener The listener to add.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.plugintool.util.ServiceListener",
          "type_short": "ServiceListener",
          "comment": "The listener to add."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeServiceListener",
      "comment": "Removes the given listener from this ServiceProvider.  This method does nothing if the\n given listener is not contained by this ServiceProvider.",
      "javadoc": "Removes the given listener from this ServiceProvider.  This method does nothing if the\n given listener is not contained by this ServiceProvider.\n@param listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.plugintool.util.ServiceListener",
          "type_short": "ServiceListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
