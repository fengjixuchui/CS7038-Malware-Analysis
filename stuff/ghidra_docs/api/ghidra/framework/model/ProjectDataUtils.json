{
  "name": "ProjectDataUtils",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "descendantFiles",
      "comment": "Returns a Iterable sequence of all the DomainFiles that exist under\n the specified DomainFolder.",
      "javadoc": "Returns a {@link Iterable} sequence of all the {@link DomainFile}s that exist under\n the specified {@link DomainFolder folder}.\n@param folder\n@return ",
      "static": true,
      "params": [
        {
          "name": "folder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Iterable\u003cghidra.framework.model.DomainFile\u003e",
        "type_short": "Iterable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "descendantFolders",
      "comment": "Returns a Iterable sequence of all the DomainFolders that exist under\n the specified DomainFolder.",
      "javadoc": "Returns a {@link Iterable} sequence of all the {@link DomainFolder}s that exist under\n the specified {@link DomainFolder folder}.\n@param folder\n@return ",
      "static": true,
      "params": [
        {
          "name": "folder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Iterable\u003cghidra.framework.model.DomainFolder\u003e",
        "type_short": "Iterable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createDomainFolderPath",
      "comment": "Returns a Ghidra DomainFolder with the matching path, creating\n any missing parent folders as needed.\n ",
      "javadoc": "Returns a Ghidra {@link DomainFolder} with the matching path, creating\n any missing parent folders as needed.\n \u003cp\u003e\n@param currentFolder starting {@link DomainFolder}.\n@param path relative path to the desired DomainFolder, using forward slashes\n as separators.  Empty string ok, multiple slashes in a row treated as single slash,\n trailing slashes ignored.\n@return {@link DomainFolder} that the path points to.\n@throws InvalidNameException if bad name\n@throws IOException if problem when creating folder",
      "static": true,
      "params": [
        {
          "name": "currentFolder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "starting DomainFolder."
        },
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "relative path to the desired DomainFolder, using forward slashes\n as separators.  Empty string ok, multiple slashes in a row treated as single slash,\n trailing slashes ignored."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFolder",
        "type_short": "DomainFolder",
        "comment": "DomainFolder that the path points to."
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if bad name"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if problem when creating folder"
        }
      ]
    },
    {
      "name": "lookupDomainPath",
      "comment": "Returns a Ghidra DomainFolder with the matching path, or null if not found.\n ",
      "javadoc": "Returns a Ghidra {@link DomainFolder} with the matching path, or null if not found.\n \u003cp\u003e\n@param currentFolder starting {@link DomainFolder}.\n@param path relative path to the desired DomainFolder, using forward slashes\n as separators.  Empty string ok, multiple slashes in a row treated as single slash,\n trailing slashes ignored.\n@return {@link DomainFolder} that the path points to or null if not found.",
      "static": true,
      "params": [
        {
          "name": "currentFolder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "starting DomainFolder."
        },
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "relative path to the desired DomainFolder, using forward slashes\n as separators.  Empty string ok, multiple slashes in a row treated as single slash,\n trailing slashes ignored."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFolder",
        "type_short": "DomainFolder",
        "comment": "DomainFolder that the path points to or null if not found."
      },
      "throws": []
    },
    {
      "name": "getUniqueName",
      "comment": "Returns a unique name in a Ghidra DomainFolder.",
      "javadoc": "Returns a unique name in a Ghidra {@link DomainFolder}.\n@param folder {@link DomainFolder} to check for child name collisions.\n@param baseName String base name of the file or folder\n@return \"baseName\" if no collisions, or \"baseNameNNN\" (where NNN is an incrementing\n integer value) when collisions are found, or null if there are more than 1000 collisions.",
      "static": true,
      "params": [
        {
          "name": "folder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "DomainFolder to check for child name collisions."
        },
        {
          "name": "baseName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "String base name of the file or folder"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "\"baseName\" if no collisions, or \"baseNameNNN\" (where NNN is an incrementing\n integer value) when collisions are found, or null if there are more than 1000 collisions."
      },
      "throws": []
    }
  ]
}
