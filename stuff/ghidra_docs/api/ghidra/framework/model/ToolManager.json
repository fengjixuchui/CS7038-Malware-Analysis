{
  "name": "ToolManager",
  "comment": "Interface to define methods to manage running tools and tools in\n the Tool Chest. The ToolManager also keeps track of the workspaces, and\n what tools are running in workspace, as well as the connections among tools\n across all workspaces.",
  "javadoc": "Interface to define methods to manage running tools and tools in\n the Tool Chest. The ToolManager also keeps track of the workspaces, and\n what tools are running in workspace, as well as the connections among tools\n across all workspaces.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "DEFAULT_WORKSPACE_NAME",
      "comment": "The name to use for a new unnamed workspace; used by the Ghidra\n Project Window when the user creates a new workspace.",
      "javadoc": "The name to use for a new unnamed workspace; used by the Ghidra\n Project Window when the user creates a new workspace.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Workspace\""
    },
    {
      "name": "WORKSPACE_NAME_PROPERTY",
      "comment": "Property used when sending the change event when a workspace name is\n changed.",
      "javadoc": "Property used when sending the change event when a workspace name is\n changed.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"WorkspaceName\""
    }
  ],
  "methods": [
    {
      "name": "getConnection",
      "comment": "Get the connection object for the producer and consumer tools",
      "javadoc": "Get the connection object for the producer and consumer tools\n@param producer tool that is producing the tool event\n@param consumer tool that is consuming the tool event\n@return the connection",
      "static": false,
      "params": [
        {
          "name": "producer",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "tool that is producing the tool event"
        },
        {
          "name": "consumer",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "tool that is consuming the tool event"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.ToolConnection",
        "type_short": "ToolConnection",
        "comment": "the connection"
      },
      "throws": []
    },
    {
      "name": "getProducerTools",
      "comment": "Get a list of tools that produce at least one tool event.",
      "javadoc": "Get a list of tools that produce at least one tool event.\n@return zero-length array if no tool produces any events",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool[]",
        "type_short": "ghidra.framework.plugintool.PluginTool[]",
        "comment": "zero-length array if no tool produces any events"
      },
      "throws": []
    },
    {
      "name": "getConsumerTools",
      "comment": "Get a list of tools that consume at least one tool event.",
      "javadoc": "Get a list of tools that consume at least one tool event.\n@return zero-length array if no tool consumes any events",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool[]",
        "type_short": "ghidra.framework.plugintool.PluginTool[]",
        "comment": "zero-length array if no tool consumes any events"
      },
      "throws": []
    },
    {
      "name": "getRunningTools",
      "comment": "Get a list running tools across all workspaces.",
      "javadoc": "Get a list running tools across all workspaces.\n@return zero-length array if there are no running tools.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool[]",
        "type_short": "ghidra.framework.plugintool.PluginTool[]",
        "comment": "zero-length array if there are no running tools."
      },
      "throws": []
    },
    {
      "name": "createWorkspace",
      "comment": "Create a workspace with the given name.",
      "javadoc": "Create a workspace with the given name.\n@param name name of workspace\n@return the workspace\n@throws DuplicateNameException if a workspace with this name already exists",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of workspace"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.Workspace",
        "type_short": "Workspace",
        "comment": "the workspace"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if a workspace with this name already exists"
        }
      ]
    },
    {
      "name": "removeWorkspace",
      "comment": "Remove the workspace.",
      "javadoc": "Remove the workspace.\n@param ws workspace to remove",
      "static": false,
      "params": [
        {
          "name": "ws",
          "type_long": "ghidra.framework.model.Workspace",
          "type_short": "Workspace",
          "comment": "workspace to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWorkspaces",
      "comment": "Get list of known workspaces.",
      "javadoc": "Get list of known workspaces.\n@return an array of known workspaces",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.Workspace[]",
        "type_short": "ghidra.framework.model.Workspace[]",
        "comment": "an array of known workspaces"
      },
      "throws": []
    },
    {
      "name": "getActiveWorkspace",
      "comment": "Get the active workspace",
      "javadoc": "Get the active workspace\n@return the active workspace",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.Workspace",
        "type_short": "Workspace",
        "comment": "the active workspace"
      },
      "throws": []
    },
    {
      "name": "addWorkspaceChangeListener",
      "comment": "Add the listener that will be notified when a tool is added\n or removed.",
      "javadoc": "Add the listener that will be notified when a tool is added\n or removed.\n@param listener workspace listener to add",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.model.WorkspaceChangeListener",
          "type_short": "WorkspaceChangeListener",
          "comment": "workspace listener to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeWorkspaceChangeListener",
      "comment": "Remove the workspace listener.",
      "javadoc": "Remove the workspace listener.\n@param l workspace listener to remove",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.framework.model.WorkspaceChangeListener",
          "type_short": "WorkspaceChangeListener",
          "comment": "workspace listener to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disconnectTool",
      "comment": "Removes all connections involving tool",
      "javadoc": "Removes all connections involving tool\n@param tool tool for which to remove all connections",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "tool for which to remove all connections"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toolChanged",
      "comment": "A configuration change was made to the tool; a plugin was added\n or removed.",
      "javadoc": "A configuration change was made to the tool; a plugin was added\n or removed.\n@param tool tool that changed",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "tool that changed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
