{
  "name": "ProjectData",
  "comment": "The ProjectData interface provides access to all the data files and folders\n in a project.",
  "javadoc": "The ProjectData interface provides access to all the data files and folders\n in a project.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getLocalStorageClass",
      "comment": "",
      "javadoc": "@return local storage implementation class",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003c? extends ghidra.framework.store.local.LocalFileSystem\u003e",
        "type_short": "Class",
        "comment": "local storage implementation class"
      },
      "throws": []
    },
    {
      "name": "getRootFolder",
      "comment": "Returns the root folder of the project.",
      "javadoc": "Returns the root folder of the project.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.DomainFolder",
        "type_short": "DomainFolder",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFolder",
      "comment": "Get domain folder specified by an absolute data path.",
      "javadoc": "Get domain folder specified by an absolute data path.\n@param path the absolute path of domain folder relative to the data folder.\n@return domain folder or null if folder not found",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the absolute path of domain folder relative to the data folder."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFolder",
        "type_short": "DomainFolder",
        "comment": "domain folder or null if folder not found"
      },
      "throws": []
    },
    {
      "name": "getFileCount",
      "comment": "Get the approximate number of files contained within the project.  The number \n may be reduced if not connected to the shared repository.  Only the newer \n indexed file-system supports this capability, a value of -1 will be\n returned for older projects utilizing the mangled file-system or if an\n IO Error occurs.\n An approximate number is provided since the two underlying file systems\n are consulted separately and the local private file-system does not\n distinguish between checked-out files and private files.  This number \n is currently intended as a rough sizing number to disable certain features\n when very large projects are in use.  Generally the larger of the two\n file counts will be returned.",
      "javadoc": "Get the approximate number of files contained within the project.  The number \n may be reduced if not connected to the shared repository.  Only the newer \n indexed file-system supports this capability, a value of -1 will be\n returned for older projects utilizing the mangled file-system or if an\n IO Error occurs.\n An approximate number is provided since the two underlying file systems\n are consulted separately and the local private file-system does not\n distinguish between checked-out files and private files.  This number \n is currently intended as a rough sizing number to disable certain features\n when very large projects are in use.  Generally the larger of the two\n file counts will be returned.\n@return number of project files or -1 if unknown.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of project files or -1 if unknown."
      },
      "throws": []
    },
    {
      "name": "getFile",
      "comment": "Get domain file specified by an absolute data path.",
      "javadoc": "Get domain file specified by an absolute data path.\n@param path the absolute path of domain file relative to the root folder.\n@return domain file or null if file not found",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the absolute path of domain file relative to the root folder."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "domain file or null if file not found"
      },
      "throws": []
    },
    {
      "name": "findOpenFiles",
      "comment": "Finds all open domain files and appends\n them to the specified list.",
      "javadoc": "Finds all open domain files and appends\n them to the specified list.\n@param list the list to receive the open domain files",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cghidra.framework.model.DomainFile\u003e",
          "type_short": "List",
          "comment": "the list to receive the open domain files"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFileByID",
      "comment": "Get domain file specified by its unique fileID.",
      "javadoc": "Get domain file specified by its unique fileID.\n@param fileID domain file ID\n@return domain file or null if file not found",
      "static": false,
      "params": [
        {
          "name": "fileID",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "domain file ID"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "domain file or null if file not found"
      },
      "throws": []
    },
    {
      "name": "getSharedFileURL",
      "comment": "Get a URL for a shared domain file which is available \n within a remote repository.",
      "javadoc": "Get a URL for a shared domain file which is available \n within a remote repository.\n@param path the absolute path of domain file relative to the root folder.\n@return URL object for accessing shared file from outside of a project, or\n null if file does not exist or is not shared.",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the absolute path of domain file relative to the root folder."
        }
      ],
      "return": {
        "type_long": "java.net.URL",
        "type_short": "URL",
        "comment": "URL object for accessing shared file from outside of a project, or\n null if file does not exist or is not shared."
      },
      "throws": []
    },
    {
      "name": "makeValidName",
      "comment": "Transform the specified name into an acceptable folder or file item name.  Only an individual folder\n or file name should be specified, since any separators will be stripped-out.\n NOTE: Uniqueness of name within the intended target folder is not considered.",
      "javadoc": "Transform the specified name into an acceptable folder or file item name.  Only an individual folder\n or file name should be specified, since any separators will be stripped-out.\n NOTE: Uniqueness of name within the intended target folder is not considered.\n@param name\n@return valid name or \"unknown\" if no valid characters exist within name provided",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "valid name or \"unknown\" if no valid characters exist within name provided"
      },
      "throws": []
    },
    {
      "name": "getProjectLocator",
      "comment": "Returns the projectLocator for the this ProjectData.",
      "javadoc": "Returns the projectLocator for the this ProjectData.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ProjectLocator",
        "type_short": "ProjectLocator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDomainFolderChangeListener",
      "comment": "Adds a listener that will be notified when any folder or file\n changes in the project.",
      "javadoc": "Adds a listener that will be notified when any folder or file\n changes in the project.\n@param listener the listener to be notified of folder and file changes.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.model.DomainFolderChangeListener",
          "type_short": "DomainFolderChangeListener",
          "comment": "the listener to be notified of folder and file changes."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeDomainFolderChangeListener",
      "comment": "Removes the listener to be notified of folder and file changes.",
      "javadoc": "Removes the listener to be notified of folder and file changes.\n@param listener the listener to be removed.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.model.DomainFolderChangeListener",
          "type_short": "DomainFolderChangeListener",
          "comment": "the listener to be removed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "refresh",
      "comment": "Sync the Domain folder/file structure with the underlying file structure.",
      "javadoc": "Sync the Domain folder/file structure with the underlying file structure.\n@param force if true all folders will be be visited and refreshed, if false\n only those folders previously visited will be refreshed.",
      "static": false,
      "params": [
        {
          "name": "force",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true all folders will be be visited and refreshed, if false\n only those folders previously visited will be refreshed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getUser",
      "comment": "Returns User object associated with remote repository or null if a remote repository\n is not used.",
      "javadoc": "Returns User object associated with remote repository or null if a remote repository\n is not used.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.remote.User",
        "type_short": "User",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepository",
      "comment": "Return the repository for this project data.",
      "javadoc": "Return the repository for this project data.\n@return null if the project is not associated with a repository",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.client.RepositoryAdapter",
        "type_short": "RepositoryAdapter",
        "comment": "null if the project is not associated with a repository"
      },
      "throws": []
    },
    {
      "name": "convertProjectToShared",
      "comment": "Convert a local project to a shared project. NOTE: The project should be closed and\n then reopened after this method is called.",
      "javadoc": "Convert a local project to a shared project. NOTE: The project should be closed and\n then reopened after this method is called.\n@param repository the repository that the project will be associated with.\n@param monitor task monitor\n@throws IOException thrown if files under version control are still checked out, or\n if there was a problem accessing the filesystem\n@throws CancelledException if the conversion was cancelled while versioned files were being\n converted to private files.",
      "static": false,
      "params": [
        {
          "name": "repository",
          "type_long": "ghidra.framework.client.RepositoryAdapter",
          "type_short": "RepositoryAdapter",
          "comment": "the repository that the project will be associated with."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if files under version control are still checked out, or\n if there was a problem accessing the filesystem"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the conversion was cancelled while versioned files were being\n converted to private files."
        }
      ]
    },
    {
      "name": "updateRepositoryInfo",
      "comment": "Update the repository for this project; the server may have changed or a different \n repository is being used.  NOTE: The project should be closed and then reopened after this\n method is called.",
      "javadoc": "Update the repository for this project; the server may have changed or a different \n repository is being used.  NOTE: The project should be closed and then reopened after this\n method is called.\n@param repository new repository to use\n@param monitor task monitor\n@throws IOException thrown if files are still checked out, or if there was a problem accessing\n the filesystem\n@throws CancelledException if the user canceled the update",
      "static": false,
      "params": [
        {
          "name": "repository",
          "type_long": "ghidra.framework.client.RepositoryAdapter",
          "type_short": "RepositoryAdapter",
          "comment": "new repository to use"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if files are still checked out, or if there was a problem accessing\n the filesystem"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user canceled the update"
        }
      ]
    },
    {
      "name": "close",
      "comment": "Close the project storage associated with this project data object.\n NOTE: This should not be invoked if this object is utilized by a Project instance.",
      "javadoc": "Close the project storage associated with this project data object.\n NOTE: This should not be invoked if this object is utilized by a Project instance.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaxNameLength",
      "comment": "",
      "javadoc": "@return the maximum name length permitted for folders or items.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the maximum name length permitted for folders or items."
      },
      "throws": []
    },
    {
      "name": "testValidName",
      "comment": "Validate a folder/item name or path.",
      "javadoc": "Validate a folder/item name or path.\n@param name folder or item name\n@param isPath if true name represents full path\n@throws InvalidNameException if name is invalid",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "folder or item name"
        },
        {
          "name": "isPath",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true name represents full path"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if name is invalid"
        }
      ]
    }
  ]
}
