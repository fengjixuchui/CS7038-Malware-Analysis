{
  "name": "DomainObject",
  "comment": "DomainObject is the interface that must be supported by\n data objects that are persistent. DomainObjects maintain an\n association with a DomainFile. A DomainObject that\n has never been saved will have a null DomainFile.",
  "javadoc": "\u003cCODE\u003eDomainObject\u003c/CODE\u003e is the interface that must be supported by\n data objects that are persistent. \u003cCODE\u003eDomainObject\u003c/CODE\u003es maintain an\n association with a \u003cCODE\u003eDomainFile\u003c/CODE\u003e. A \u003cCODE\u003eDomainObject\u003c/CODE\u003e that\n has never been saved will have a null \u003cCODE\u003eDomainFile\u003c/CODE\u003e.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "undoLock",
      "comment": "Object to synchronize on for undo/redo operations.",
      "javadoc": "Object to synchronize on for undo/redo operations.",
      "static": true,
      "type_long": "java.lang.Object",
      "type_short": "Object",
      "constant_value": null
    },
    {
      "name": "DO_OBJECT_SAVED",
      "comment": "Event type generated when the domain object is saved.",
      "javadoc": "Event type generated when the domain object is saved.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "DO_DOMAIN_FILE_CHANGED",
      "comment": "Event type generated when the domain file associated with\n the domain object changes.",
      "javadoc": "Event type generated when the domain file associated with\n the domain object changes.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "DO_OBJECT_RENAMED",
      "comment": "Event type generated when the object name changes.",
      "javadoc": "Event type generated when the object name changes.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "DO_OBJECT_RESTORED",
      "comment": "Event type generated when domain object is restored.",
      "javadoc": "Event type generated when domain object is restored.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "DO_PROPERTY_CHANGED",
      "comment": "Event type generated when a property on this DomainObject is changed.",
      "javadoc": "Event type generated when a property on this DomainObject is changed.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "DO_OBJECT_CLOSED",
      "comment": "Event type generated when this domain object is closed.",
      "javadoc": "Event type generated when this domain object is closed.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "DO_OBJECT_ERROR",
      "comment": "Event type generated when a fatal error occurs which renders the domain object invalid.",
      "javadoc": "Event type generated when a fatal error occurs which renders the domain object invalid.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    }
  ],
  "methods": [
    {
      "name": "isChanged",
      "comment": "Returns whether the object has changed.",
      "javadoc": "Returns whether the object has changed.\n@return whether the object has changed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "whether the object has changed."
      },
      "throws": []
    },
    {
      "name": "setTemporary",
      "comment": "Set the temporary state of this object.\n If this object is temporary, the isChanged() method will\n always return false.  The default temporary state is false.",
      "javadoc": "Set the temporary state of this object.\n If this object is temporary, the isChanged() method will\n always return false.  The default temporary state is false.\n@param state if true object is marked as temporary",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true object is marked as temporary"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isTemporary",
      "comment": "Returns true if this object has been marked as Temporary.",
      "javadoc": "Returns true if this object has been marked as Temporary.\n@return true if this object has been marked as Temporary.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this object has been marked as Temporary."
      },
      "throws": []
    },
    {
      "name": "isChangeable",
      "comment": "Returns true if changes are permitted.",
      "javadoc": "Returns true if changes are permitted.\n@return true if changes are permitted.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if changes are permitted."
      },
      "throws": []
    },
    {
      "name": "canSave",
      "comment": "Returns true if this object can be saved; a read-only file cannot be saved.",
      "javadoc": "Returns true if this object can be saved; a read-only file cannot be saved.\n@return true if this object can be saved",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this object can be saved"
      },
      "throws": []
    },
    {
      "name": "save",
      "comment": "Saves changes to the DomainFile.",
      "javadoc": "Saves changes to the DomainFile.\n@param comment comment used for new version\n@param monitor monitor that shows the progress of the save\n@throws IOException thrown if there was an error accessing this\n domain object\n@throws ReadOnlyException thrown if this DomainObject is read only\n and cannot be saved\n@throws CancelledException thrown if the user canceled the save\n operation",
      "static": false,
      "params": [
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "comment used for new version"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "monitor that shows the progress of the save"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if there was an error accessing this\n domain object"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "thrown if the user canceled the save\n operation"
        }
      ]
    },
    {
      "name": "saveToPackedFile",
      "comment": "Saves (i.e., serializes) the current content to a packed file.",
      "javadoc": "Saves (i.e., serializes) the current content to a packed file.\n@param outputFile packed output file\n@param monitor progress monitor\n@throws IOException if an exception occurs\n@throws CancelledException if the user cancels\n@throws UnsupportedOperationException if not supported by object implementation",
      "static": false,
      "params": [
        {
          "name": "outputFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "packed output file"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "progress monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an exception occurs"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels"
        }
      ]
    },
    {
      "name": "release",
      "comment": "Notify the domain object that the specified consumer is no longer using it.\n When the last consumer invokes this method, the domain object will be closed\n and will become invalid.",
      "javadoc": "Notify the domain object that the specified consumer is no longer using it.\n When the last consumer invokes this method, the domain object will be closed\n and will become invalid.\n@param consumer the consumer (e.g., tool, plugin, etc) of the domain object\n previously established with the addConsumer method.",
      "static": false,
      "params": [
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the consumer (e.g., tool, plugin, etc) of the domain object\n previously established with the addConsumer method."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addListener",
      "comment": "Adds a listener for this object.",
      "javadoc": "Adds a listener for this object.\n@param dol listener notified when any change occurs to this domain object",
      "static": false,
      "params": [
        {
          "name": "dol",
          "type_long": "ghidra.framework.model.DomainObjectListener",
          "type_short": "DomainObjectListener",
          "comment": "listener notified when any change occurs to this domain object"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeListener",
      "comment": "Remove the listener for this object.",
      "javadoc": "Remove the listener for this object.\n@param dol listener",
      "static": false,
      "params": [
        {
          "name": "dol",
          "type_long": "ghidra.framework.model.DomainObjectListener",
          "type_short": "DomainObjectListener",
          "comment": "listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addCloseListener",
      "comment": "Adds a listener that will be notified when this DomainObject is closed.  This is meant\n for clients to have a chance to cleanup, such as reference removal.",
      "javadoc": "Adds a listener that will be notified when this DomainObject is closed.  This is meant\n for clients to have a chance to cleanup, such as reference removal.\n@param listener the reference to add",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.model.DomainObjectClosedListener",
          "type_short": "DomainObjectClosedListener",
          "comment": "the reference to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeCloseListener",
      "comment": "Removes the given close listener.",
      "javadoc": "Removes the given close listener.\n@param listener the listener to remove.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.model.DomainObjectClosedListener",
          "type_short": "DomainObjectClosedListener",
          "comment": "the listener to remove."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createPrivateEventQueue",
      "comment": "Creates a private event queue that can be flushed independently from the main event queue.",
      "javadoc": "Creates a private event queue that can be flushed independently from the main event queue.\n@param listener the listener to be notified of domain object events.\n@param maxDelay the time interval (in milliseconds) used to buffer events.\n@return a unique identifier for this private queue.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.model.DomainObjectListener",
          "type_short": "DomainObjectListener",
          "comment": "the listener to be notified of domain object events."
        },
        {
          "name": "maxDelay",
          "type_long": "int",
          "type_short": "int",
          "comment": "the time interval (in milliseconds) used to buffer events."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.EventQueueID",
        "type_short": "EventQueueID",
        "comment": "a unique identifier for this private queue."
      },
      "throws": []
    },
    {
      "name": "removePrivateEventQueue",
      "comment": "Removes the specified private event queue",
      "javadoc": "Removes the specified private event queue\n@param id the id of the queue to remove.\n@return true if the id represents a valid queue that was removed.",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "ghidra.framework.model.EventQueueID",
          "type_short": "EventQueueID",
          "comment": "the id of the queue to remove."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the id represents a valid queue that was removed."
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "Returns a word or short phrase that best describes or categorizes\n the object in terms that a user will understand.",
      "javadoc": "Returns a word or short phrase that best describes or categorizes\n the object in terms that a user will understand.\n@return the description",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the description"
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Get the name of this domain object.",
      "javadoc": "Get the name of this domain object.\n@return the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "Set the name for this domain object.",
      "javadoc": "Set the name for this domain object.\n@param name object name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "object name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDomainFile",
      "comment": "Get the domain file for this domain object.",
      "javadoc": "Get the domain file for this domain object.\n@return the associated domain file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "the associated domain file"
      },
      "throws": []
    },
    {
      "name": "addConsumer",
      "comment": "Adds the given object as a consumer.  The release method must be invoked\n with this same consumer instance when this domain object is no longer in-use.",
      "javadoc": "Adds the given object as a consumer.  The release method must be invoked\n with this same consumer instance when this domain object is no longer in-use.\n@param consumer domain object consumer\n@return false if this domain object has already been closed",
      "static": false,
      "params": [
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "domain object consumer"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "false if this domain object has already been closed"
      },
      "throws": []
    },
    {
      "name": "getConsumerList",
      "comment": "Returns the list of consumers on this domainObject",
      "javadoc": "Returns the list of consumers on this domainObject\n@return the list of consumers.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.ArrayList\u003cjava.lang.Object\u003e",
        "type_short": "ArrayList",
        "comment": "the list of consumers."
      },
      "throws": []
    },
    {
      "name": "isUsedBy",
      "comment": "Returns true if the given consumer is using (has open) this domain object.",
      "javadoc": "Returns true if the given consumer is using (has open) this domain object.\n@param consumer the object to test to see if it is a consumer of this domain object.\n@return true if the given consumer is using (has open) this domain object;",
      "static": false,
      "params": [
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the object to test to see if it is a consumer of this domain object."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given consumer is using (has open) this domain object;"
      },
      "throws": []
    },
    {
      "name": "setEventsEnabled",
      "comment": "If true, domain object change events are sent. If false, no events are sent.\n \n \n NOTE: disabling events could cause plugins to be out of sync!\n \n \n NOTE: when re-enabling events, an event will be sent to the system to signal that\n       every listener should update.",
      "javadoc": "If true, domain object change events are sent. If false, no events are sent.\n \u003cp\u003e\n \u003cb\u003e\n NOTE: disabling events could cause plugins to be out of sync!\n \u003c/b\u003e\n \u003cp\u003e\n NOTE: when re-enabling events, an event will be sent to the system to signal that\n       every listener should update.\n@param enabled true means to enable events",
      "static": false,
      "params": [
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to enable events"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSendingEvents",
      "comment": "Returns true if this object is sending out events as it is changed.  The default is\n true.  You can change this value by calling #setEventsEnabled(boolean).",
      "javadoc": "Returns true if this object is sending out events as it is changed.  The default is\n true.  You can change this value by calling {@link #setEventsEnabled(boolean)}.\n@return true if sending events\n@see #setEventsEnabled(boolean)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if sending events"
      },
      "throws": []
    },
    {
      "name": "flushEvents",
      "comment": "Makes sure all pending domainEvents have been sent.",
      "javadoc": "Makes sure all pending domainEvents have been sent.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "flushPrivateEventQueue",
      "comment": "Flush events from the specified event queue.",
      "javadoc": "Flush events from the specified event queue.\n@param id the id specifying the event queue to be flushed.",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "ghidra.framework.model.EventQueueID",
          "type_short": "EventQueueID",
          "comment": "the id specifying the event queue to be flushed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "canLock",
      "comment": "Returns true if a modification lock can be obtained on this\n domain object.  Care should be taken with using this method since\n this will not prevent another thread from modifying the domain object.",
      "javadoc": "Returns true if a modification lock can be obtained on this\n domain object.  Care should be taken with using this method since\n this will not prevent another thread from modifying the domain object.\n@return true if can lock",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if can lock"
      },
      "throws": []
    },
    {
      "name": "isLocked",
      "comment": "Returns true if the domain object currently has a modification lock enabled.",
      "javadoc": "Returns true if the domain object currently has a modification lock enabled.\n@return true if locked",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if locked"
      },
      "throws": []
    },
    {
      "name": "lock",
      "comment": "Attempt to obtain a modification lock on the domain object.  Multiple locks may be granted\n on this domain object, although all lock owners must release their lock in a timely fashion.",
      "javadoc": "Attempt to obtain a modification lock on the domain object.  Multiple locks may be granted\n on this domain object, although all lock owners must release their lock in a timely fashion.\n@param reason very short reason for requesting lock\n@return true if lock obtained successfully, else false which indicates that a modification\n is in process.",
      "static": false,
      "params": [
        {
          "name": "reason",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "very short reason for requesting lock"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if lock obtained successfully, else false which indicates that a modification\n is in process."
      },
      "throws": []
    },
    {
      "name": "forceLock",
      "comment": "Cancels any previous lock and acquires it.",
      "javadoc": "Cancels any previous lock and acquires it.\n@param rollback if true, any changes in made with the previous lock should be discarded.\n@param reason very short reason for requesting lock",
      "static": false,
      "params": [
        {
          "name": "rollback",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, any changes in made with the previous lock should be discarded."
        },
        {
          "name": "reason",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "very short reason for requesting lock"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "unlock",
      "comment": "Release a modification lock previously granted with the lock method.",
      "javadoc": "Release a modification lock previously granted with the lock method.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOptionsNames",
      "comment": "Returns all properties lists contained by this domain object.",
      "javadoc": "Returns all properties lists contained by this domain object.\n@return all property lists contained by this domain object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "all property lists contained by this domain object."
      },
      "throws": []
    },
    {
      "name": "getOptions",
      "comment": "Get the property list for the given name.",
      "javadoc": "Get the property list for the given name.\n@param propertyListName name of property list\n@return the options",
      "static": false,
      "params": [
        {
          "name": "propertyListName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of property list"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.options.Options",
        "type_short": "Options",
        "comment": "the options"
      },
      "throws": []
    },
    {
      "name": "isClosed",
      "comment": "Returns true if this domain object has been closed as a result of the last release",
      "javadoc": "Returns true if this domain object has been closed as a result of the last release\n@return true if closed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if closed"
      },
      "throws": []
    },
    {
      "name": "hasExclusiveAccess",
      "comment": "Returns true if the user has exclusive access to the domain object.  Exclusive access means\n either the object is not shared or the user has an exclusive checkout on the object.",
      "javadoc": "Returns true if the user has exclusive access to the domain object.  Exclusive access means\n either the object is not shared or the user has an exclusive checkout on the object.\n@return true if has exclusive access",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if has exclusive access"
      },
      "throws": []
    },
    {
      "name": "getMetadata",
      "comment": "Returns a map containing all the stored metadata associated with this domain object.  The map\n contains key,value pairs and are ordered by their insertion order.",
      "javadoc": "Returns a map containing all the stored metadata associated with this domain object.  The map\n contains key,value pairs and are ordered by their insertion order.\n@return a map containing all the stored metadata associated with this domain object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Map\u003cjava.lang.String,java.lang.String\u003e",
        "type_short": "Map",
        "comment": "a map containing all the stored metadata associated with this domain object."
      },
      "throws": []
    },
    {
      "name": "getModificationNumber",
      "comment": "Returns a long value that gets incremented every time a change, undo, or redo takes place.\n Useful for implementing a lazy caching system.",
      "javadoc": "Returns a long value that gets incremented every time a change, undo, or redo takes place.\n Useful for implementing a lazy caching system.\n@return a long value that is incremented for every change to the program.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "a long value that is incremented for every change to the program."
      },
      "throws": []
    }
  ]
}
