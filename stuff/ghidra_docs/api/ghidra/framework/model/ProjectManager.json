{
  "name": "ProjectManager",
  "comment": "Interface for methods to create, open, and delete projects; maintains a\n list of known project views that the user opened. \n It has a handle to the currently opened project. A project can be\n opened by one user at a time.",
  "javadoc": "Interface for methods to create, open, and delete projects; maintains a\n list of known project views that the user opened. \n It has a handle to the currently opened project. A project can be\n opened by one user at a time.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "APPLICATION_TOOL_EXTENSION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\".tcd\""
    },
    {
      "name": "APPLICATION_TOOLS_DIR_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"tools\""
    }
  ],
  "methods": [
    {
      "name": "createProject",
      "comment": "Create a project on the local filesystem.",
      "javadoc": "Create a project on the local filesystem.\n@param projectLocator location for where the project should be created\n@param repAdapter repository adapter if this project is to be a \n        shared project; may be null if the project is not shared.\n@param remember if false the new project should not be remembered (i.e., recently opened, etc.)\n@return the new project\n@throws IOException if user cannot access/write the project location",
      "static": false,
      "params": [
        {
          "name": "projectLocator",
          "type_long": "ghidra.framework.model.ProjectLocator",
          "type_short": "ProjectLocator",
          "comment": "location for where the project should be created"
        },
        {
          "name": "repAdapter",
          "type_long": "ghidra.framework.client.RepositoryAdapter",
          "type_short": "RepositoryAdapter",
          "comment": "repository adapter if this project is to be a \n        shared project; may be null if the project is not shared."
        },
        {
          "name": "remember",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if false the new project should not be remembered (i.e., recently opened, etc.)"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.Project",
        "type_short": "Project",
        "comment": "the new project"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if user cannot access/write the project location"
        }
      ]
    },
    {
      "name": "getRecentProjects",
      "comment": "Get list of projects that user most recently opened.",
      "javadoc": "Get list of projects that user most recently opened.\n@return list of project URLs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ProjectLocator[]",
        "type_short": "ghidra.framework.model.ProjectLocator[]",
        "comment": "list of project URLs"
      },
      "throws": []
    },
    {
      "name": "getRecentViewedProjects",
      "comment": "Get list of projects that user most recently viewed.",
      "javadoc": "Get list of projects that user most recently viewed.\n@return list of project URLs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.net.URL[]",
        "type_short": "java.net.URL[]",
        "comment": "list of project URLs"
      },
      "throws": []
    },
    {
      "name": "getActiveProject",
      "comment": "Get the project that is currently open.",
      "javadoc": "Get the project that is currently open.\n@return currently open project, return null if there is no\n project opened",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.Project",
        "type_short": "Project",
        "comment": "currently open project, return null if there is no\n project opened"
      },
      "throws": []
    },
    {
      "name": "getLastOpenedProject",
      "comment": "Get the last opened (active) project.",
      "javadoc": "Get the last opened (active) project.\n@return project last opened by the user; returns NULL if a project\n was never opened OR the last opened project is no longer valid",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ProjectLocator",
        "type_short": "ProjectLocator",
        "comment": "project last opened by the user; returns NULL if a project\n was never opened OR the last opened project is no longer valid"
      },
      "throws": []
    },
    {
      "name": "setLastOpenedProject",
      "comment": "Set the projectLocator of last opened (active) project; this projectLocator is returned\n in the getLastOpenedProject() method.",
      "javadoc": "Set the projectLocator of last opened (active) project; this projectLocator is returned\n in the getLastOpenedProject() method.\n@param projectLocator project location of last project that was opened",
      "static": false,
      "params": [
        {
          "name": "projectLocator",
          "type_long": "ghidra.framework.model.ProjectLocator",
          "type_short": "ProjectLocator",
          "comment": "project location of last project that was opened"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "rememberProject",
      "comment": "Keep the projectLocator on the list of known projects.",
      "javadoc": "Keep the projectLocator on the list of known projects.\n@param projectLocator project location",
      "static": false,
      "params": [
        {
          "name": "projectLocator",
          "type_long": "ghidra.framework.model.ProjectLocator",
          "type_short": "ProjectLocator",
          "comment": "project location"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "rememberViewedProject",
      "comment": "Keep the url on the list of known projects.",
      "javadoc": "Keep the url on the list of known projects.\n@param url project identifier",
      "static": false,
      "params": [
        {
          "name": "url",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": "project identifier"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "forgetViewedProject",
      "comment": "Remove the project url from the list of known viewed projects.",
      "javadoc": "Remove the project url from the list of known viewed projects.\n@param url project identifier",
      "static": false,
      "params": [
        {
          "name": "url",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": "project identifier"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "openProject",
      "comment": "Open a project from the file system. Add the project url\n to the list of known projects.",
      "javadoc": "Open a project from the file system. Add the project url\n to the list of known projects.\n@param projectLocator project location\n@param doRestore true if the project should be restored\n@param resetOwner if true, the owner of the project will be changed to the current user.\n@return opened project\n@throws NotFoundException if the file for the project was\n not found.\n@throws NotOwnerException if the project owner is not the user\n@throws LockException if the project is already opened by another user",
      "static": false,
      "params": [
        {
          "name": "projectLocator",
          "type_long": "ghidra.framework.model.ProjectLocator",
          "type_short": "ProjectLocator",
          "comment": "project location"
        },
        {
          "name": "doRestore",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the project should be restored"
        },
        {
          "name": "resetOwner",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the owner of the project will be changed to the current user."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.Project",
        "type_short": "Project",
        "comment": "opened project"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": "if the file for the project was\n not found."
        },
        {
          "type_long": "ghidra.util.NotOwnerException",
          "type_short": "NotOwnerException",
          "comment": "if the project owner is not the user"
        },
        {
          "type_long": "ghidra.framework.store.LockException",
          "type_short": "LockException",
          "comment": "if the project is already opened by another user"
        }
      ]
    },
    {
      "name": "deleteProject",
      "comment": "Delete the project in the given location.",
      "javadoc": "Delete the project in the given location.\n@param projectLocator project location\n@return false if no project was deleted.",
      "static": false,
      "params": [
        {
          "name": "projectLocator",
          "type_long": "ghidra.framework.model.ProjectLocator",
          "type_short": "ProjectLocator",
          "comment": "project location"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "false if no project was deleted."
      },
      "throws": []
    },
    {
      "name": "projectExists",
      "comment": "Returns true if a project with the given projectLocator exists.",
      "javadoc": "Returns true if a project with the given projectLocator exists.\n@param projectLocator project location",
      "static": false,
      "params": [
        {
          "name": "projectLocator",
          "type_long": "ghidra.framework.model.ProjectLocator",
          "type_short": "ProjectLocator",
          "comment": "project location"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepositoryServerAdapter",
      "comment": "Establish a connection to the given host and port number.",
      "javadoc": "Establish a connection to the given host and port number.\n@param host server name or IP address\n@param portNumber server port or 0 for default\n@param forceConnect if true and currently not connected, an attempt will be be to connect\n@return a handle to the remote server containing shared repositories",
      "static": false,
      "params": [
        {
          "name": "host",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "server name or IP address"
        },
        {
          "name": "portNumber",
          "type_long": "int",
          "type_short": "int",
          "comment": "server port or 0 for default"
        },
        {
          "name": "forceConnect",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true and currently not connected, an attempt will be be to connect"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.client.RepositoryServerAdapter",
        "type_short": "RepositoryServerAdapter",
        "comment": "a handle to the remote server containing shared repositories"
      },
      "throws": []
    },
    {
      "name": "getMostRecentServerInfo",
      "comment": "Get the information that was last used to access a repository\n managed by a Ghidra server.",
      "javadoc": "Get the information that was last used to access a repository\n managed by a Ghidra server.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ServerInfo",
        "type_short": "ServerInfo",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUserToolChest",
      "comment": "Return the user\u0027s ToolChest",
      "javadoc": "Return the user\u0027s ToolChest",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ToolChest",
        "type_short": "ToolChest",
        "comment": ""
      },
      "throws": []
    }
  ]
}
