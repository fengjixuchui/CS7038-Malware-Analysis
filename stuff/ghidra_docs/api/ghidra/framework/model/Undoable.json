{
  "name": "Undoable",
  "comment": "Objects that implement Undoable have the ability to \"remember\" some number\n of stable states that are created as operations are performed upon them.  The\n object then provides methods for \"undoing\" to a previous state or \"redoing\" to\n a later state.",
  "javadoc": "Objects that implement Undoable have the ability to \"remember\" some number\n of stable states that are created as operations are performed upon them.  The\n object then provides methods for \"undoing\" to a previous state or \"redoing\" to\n a later state.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "canUndo",
      "comment": "Returns true if there is a previous state to \"undo\" to.",
      "javadoc": "Returns true if there is a previous state to \"undo\" to.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "canRedo",
      "comment": "Returns true if there is a later state to \"redo\" to.",
      "javadoc": "Returns true if there is a later state to \"redo\" to.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearUndo",
      "comment": "Clear all undoable/redoable transactions",
      "javadoc": "Clear all undoable/redoable transactions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "undo",
      "comment": "Returns to the previous state.  Normally, this will cause the current state\n to appear on the \"redo\" stack.  This method will do nothing if there are\n no previous states to \"undo\".",
      "javadoc": "Returns to the previous state.  Normally, this will cause the current state\n to appear on the \"redo\" stack.  This method will do nothing if there are\n no previous states to \"undo\".\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "redo",
      "comment": "Returns to a latter state that exists because of an undo.  Normally, this\n will cause the current state to appear on the \"undo\" stack.  This method\n will do nothing if there are no latter states to \"redo\".",
      "javadoc": "Returns to a latter state that exists because of an undo.  Normally, this\n will cause the current state to appear on the \"undo\" stack.  This method\n will do nothing if there are no latter states to \"redo\".\n@throws IOException if an IO error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs"
        }
      ]
    },
    {
      "name": "getUndoName",
      "comment": "Returns a description of the chanage that would be \"undone\".",
      "javadoc": "Returns a description of the chanage that would be \"undone\".",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRedoName",
      "comment": "Returns a description of the change that would be \"redone\".",
      "javadoc": "Returns a description of the change that would be \"redone\".",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addTransactionListener",
      "comment": "Adds the given transaction listener to this domain object",
      "javadoc": "Adds the given transaction listener to this domain object\n@param listener the new transaction listener to add",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.model.TransactionListener",
          "type_short": "TransactionListener",
          "comment": "the new transaction listener to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeTransactionListener",
      "comment": "Removes the given transaction listener from this domain object.",
      "javadoc": "Removes the given transaction listener from this domain object.\n@param listener the transaction listener to remove",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.model.TransactionListener",
          "type_short": "TransactionListener",
          "comment": "the transaction listener to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
