{
  "name": "ToolChest",
  "comment": "Interface to define methods to manage tools in a central location.",
  "javadoc": "Interface to define methods to manage tools in a central location.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getToolTemplate",
      "comment": "Get the tool template for the given tool name.",
      "javadoc": "Get the tool template for the given tool name.\n@param toolName name of tool\n@return null if there is no tool template for the given\n toolName.",
      "static": false,
      "params": [
        {
          "name": "toolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of tool"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.ToolTemplate",
        "type_short": "ToolTemplate",
        "comment": "null if there is no tool template for the given\n toolName."
      },
      "throws": []
    },
    {
      "name": "getToolTemplates",
      "comment": "Get the tool templates from the tool chest.",
      "javadoc": "Get the tool templates from the tool chest.\n@return list of tool template",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ToolTemplate[]",
        "type_short": "ghidra.framework.model.ToolTemplate[]",
        "comment": "list of tool template"
      },
      "throws": []
    },
    {
      "name": "addToolChestChangeListener",
      "comment": "Add a listener to be notified when the tool chest is changed.",
      "javadoc": "Add a listener to be notified when the tool chest is changed.\n@param l listener to add",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.framework.model.ToolChestChangeListener",
          "type_short": "ToolChestChangeListener",
          "comment": "listener to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeToolChestChangeListener",
      "comment": "Remove a listener that is listening to when the tool chest is changed.",
      "javadoc": "Remove a listener that is listening to when the tool chest is changed.\n@param l to remove",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "ghidra.framework.model.ToolChestChangeListener",
          "type_short": "ToolChestChangeListener",
          "comment": "to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addToolTemplate",
      "comment": "Add tool template to the tool chest.\n \n Note: If the given tool template name already exists in the project, then the name will \n be altered by appending an underscore and a one-up value.  The template\n parameter\u0027s name is also updated with then new name. \n \n To simply replace a tool with without changing its name, call \n #replaceToolTemplate(ToolTemplate)",
      "javadoc": "Add tool template to the tool chest.\n \u003cbr\u003e\n Note: If the given tool template name already exists in the project, then the name will \n be altered by appending an underscore and a one-up value.  The \u003ccode\u003etemplate\u003c/code\u003e\n parameter\u0027s name is also updated with then new name. \n \u003cp\u003e\n To simply replace a tool with without changing its name, call \n {@link #replaceToolTemplate(ToolTemplate)}\n@param template tool template to add",
      "static": false,
      "params": [
        {
          "name": "template",
          "type_long": "ghidra.framework.model.ToolTemplate",
          "type_short": "ToolTemplate",
          "comment": "tool template to add"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Remove entry (toolTemplate or toolSet) from the tool chest.",
      "javadoc": "Remove entry (toolTemplate or toolSet) from the tool chest.\n@param toolName name of toolConfig or toolSet to remove\n@return true if the toolConfig or toolset was\n successfully removed from the tool chest.",
      "static": false,
      "params": [
        {
          "name": "toolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of toolConfig or toolSet to remove"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the toolConfig or toolset was\n successfully removed from the tool chest."
      },
      "throws": []
    },
    {
      "name": "getToolCount",
      "comment": "Get the number of tools in this tool chest.",
      "javadoc": "Get the number of tools in this tool chest.\n@return tool count.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "tool count."
      },
      "throws": []
    },
    {
      "name": "replaceToolTemplate",
      "comment": "Performs the same action as calling #remove(String) and then \n #addToolTemplate(ToolTemplate).  However, calling this method prevents state from \n being lost in the transition, such as position in the tool chest and default tool status.",
      "javadoc": "Performs the same action as calling {@link #remove(String)} and then \n {@link #addToolTemplate(ToolTemplate)}.  However, calling this method prevents state from \n being lost in the transition, such as position in the tool chest and default tool status.\n@param template The template to add to the tool chest, replacing any tools with the same name.\n@return True if the template was added.",
      "static": false,
      "params": [
        {
          "name": "template",
          "type_long": "ghidra.framework.model.ToolTemplate",
          "type_short": "ToolTemplate",
          "comment": "The template to add to the tool chest, replacing any tools with the same name."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if the template was added."
      },
      "throws": []
    }
  ]
}
