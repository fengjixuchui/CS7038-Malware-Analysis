{
  "name": "ToolConnection",
  "comment": "Represents a connection between a producer tool and a\n consumer tool.",
  "javadoc": "Represents a connection between a producer tool and a\n consumer tool.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getProducer",
      "comment": "Get the tool that produces an event",
      "javadoc": "Get the tool that produces an event\n@return the tool",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the tool"
      },
      "throws": []
    },
    {
      "name": "getConsumer",
      "comment": "Get the tool that consumes an event",
      "javadoc": "Get the tool that consumes an event\n@return the tool",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the tool"
      },
      "throws": []
    },
    {
      "name": "getEvents",
      "comment": "Get the list of event names that is an intersection\n between what the producer produces and what the\n consumers consumes.",
      "javadoc": "Get the list of event names that is an intersection\n between what the producer produces and what the\n consumers consumes.\n@return an array of event names",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "an array of event names"
      },
      "throws": []
    },
    {
      "name": "connect",
      "comment": "Connect the tools for the given event name.",
      "javadoc": "Connect the tools for the given event name.\n@param eventName name of event to connect\n@throws IllegalArgumentException if eventName is not valid for this\n producer/consumer pair.",
      "static": false,
      "params": [
        {
          "name": "eventName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of event to connect"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "disconnect",
      "comment": "Break the connection between the tools for the\n given event name.",
      "javadoc": "Break the connection between the tools for the\n given event name.\n@param eventName name of event to disconnect\n@throws IllegalArgumentException if eventName is not valid for this\n producer/consumer pair.",
      "static": false,
      "params": [
        {
          "name": "eventName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of event to disconnect"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isConnected",
      "comment": "Return whether the tools are connected for the\n given event name.",
      "javadoc": "Return whether the tools are connected for the\n given event name.\n@param eventName name of event to check\n@return true if the tools are connected by eventName.",
      "static": false,
      "params": [
        {
          "name": "eventName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of event to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the tools are connected by eventName."
      },
      "throws": []
    }
  ]
}
