{
  "name": "DomainFile",
  "comment": "DomainFile provides a storage interface for project files.  A \n DomainFile is an immutable reference to file contained within a project.  The state \n of a DomainFile object does not track name/parent changes made to the referenced \n project file.",
  "javadoc": "\u003ccode\u003eDomainFile\u003c/code\u003e provides a storage interface for project files.  A \n \u003ccode\u003eDomainFile\u003c/code\u003e is an immutable reference to file contained within a project.  The state \n of a \u003ccode\u003eDomainFile\u003c/code\u003e object does not track name/parent changes made to the referenced \n project file.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "fields": [
    {
      "name": "DEFAULT_VERSION",
      "comment": "Use with getDomainObject to request the default version.  The default version is\n the private file or check-out file if one exists, or the latest version from the\n version controlled file system.",
      "javadoc": "Use with getDomainObject to request the default version.  The default version is\n the private file or check-out file if one exists, or the latest version from the\n version controlled file system.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "READ_ONLY_PROPERTY",
      "comment": "Event property name for Read-only setting.",
      "javadoc": "Event property name for Read-only setting.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"READ_ONLY\""
    }
  ],
  "methods": [
    {
      "name": "getName",
      "comment": "Get the name of  the StoredObj that is associated with the data.",
      "javadoc": "Get the name of  the StoredObj that is associated with the data.\n@return the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "exists",
      "comment": "Check for existence of domain file.",
      "javadoc": "Check for existence of domain file.\n@return true if file exists.  A proxy domain file will always return false.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if file exists.  A proxy domain file will always return false."
      },
      "throws": []
    },
    {
      "name": "getFileID",
      "comment": "Returns a unique file-ID",
      "javadoc": "Returns a unique file-ID\n@return the ID",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the ID"
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "Set the name on this domain file.",
      "javadoc": "Set the name on this domain file.\n@param newName domain file name\n@return renamed domain file (the original DomainFile object becomes invalid since it is immutable)\n@throws InvalidNameException if newName contains illegal characters\n@throws DuplicateFileException if a file named newName \n already exists in this files domain folder.\n@throws FileInUseException if this file is in-use / checked-out.\n@throws IOException thrown if an IO or access error occurs.",
      "static": false,
      "params": [
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "domain file name"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "renamed domain file (the original DomainFile object becomes invalid since it is immutable)"
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if newName contains illegal characters"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO or access error occurs."
        }
      ]
    },
    {
      "name": "getPathname",
      "comment": "Returns the path name to the domain object.",
      "javadoc": "Returns the path name to the domain object.\n@return the path name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the path name"
      },
      "throws": []
    },
    {
      "name": "getProjectLocator",
      "comment": "Returns the local storage location for the project that this DomainFile belongs to.",
      "javadoc": "Returns the local storage location for the project that this DomainFile belongs to.\n@return the location",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ProjectLocator",
        "type_short": "ProjectLocator",
        "comment": "the location"
      },
      "throws": []
    },
    {
      "name": "getContentType",
      "comment": "Returns content-type string",
      "javadoc": "Returns content-type string\n@return the content type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the content type"
      },
      "throws": []
    },
    {
      "name": "getDomainObjectClass",
      "comment": "Returns the underlying Class for the domain object in this domain file.",
      "javadoc": "Returns the underlying Class for the domain object in this domain file.\n@return the class",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003c? extends ghidra.framework.model.DomainObject\u003e",
        "type_short": "Class",
        "comment": "the class"
      },
      "throws": []
    },
    {
      "name": "getParent",
      "comment": "Get the parent domain folder for this domain file.",
      "javadoc": "Get the parent domain folder for this domain file.\n@return the parent",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.DomainFolder",
        "type_short": "DomainFolder",
        "comment": "the parent"
      },
      "throws": []
    },
    {
      "name": "getChangesByOthersSinceCheckout",
      "comment": "Returns changes made to versioned file by others since checkout was performed.",
      "javadoc": "Returns changes made to versioned file by others since checkout was performed.\n@return change set or null\n@throws VersionException latest version was created with a newer version of software\n@throws IOException if a folder item access error occurs or change set was \n produced by newer version of software and can not be read",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ChangeSet",
        "type_short": "ChangeSet",
        "comment": "change set or null"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "latest version was created with a newer version of software"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if a folder item access error occurs or change set was \n produced by newer version of software and can not be read"
        }
      ]
    },
    {
      "name": "getDomainObject",
      "comment": "Opens and returns the current domain object.  If the domain object is already opened,\n then the existing open domain object is returned.",
      "javadoc": "Opens and returns the current domain object.  If the domain object is already opened,\n then the existing open domain object is returned.\n@param consumer consumer of the domain object which is responsible for\n releasing it after use. When all the consumers using the domain object release it, then\n the object is closed and its resources released.\n@param okToUpgrade if true, allows the system to upgrade out of data domain objects to\n be in compliance with the current version of Ghidra. A Version exception will be thrown\n if the domain object cannot be upgraded OR okToUpgrade is false and the domain object is\n out of date.\n@param okToRecover if true, allows the system to recover unsaved file changes which \n resulted from a crash.  If false, any existing recovery data will be deleted.\n This flag is only relevant if project is open for update (isInProject) and the file can be\n opened for update.\n@param monitor permits monitoring of open progress.\n@return an open domain object can be modified and saved. (Not read-only)\n@throws VersionException if the domain object could not be read due\n to a version format change.  If okToUpgrade is true, then a VersionException indicates\n that the domain object cannot be upgraded to the current format.  If okToUpgrade is false,\n then the VersionException only means the object is not in the current format - it \n may or may not be possible to upgrade.\n@throws IOException thrown if an IO or access error occurs.\n@throws CancelledException if monitor cancelled operation",
      "static": false,
      "params": [
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "consumer of the domain object which is responsible for\n releasing it after use. When all the consumers using the domain object release it, then\n the object is closed and its resources released."
        },
        {
          "name": "okToUpgrade",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, allows the system to upgrade out of data domain objects to\n be in compliance with the current version of Ghidra. A Version exception will be thrown\n if the domain object cannot be upgraded OR okToUpgrade is false and the domain object is\n out of date."
        },
        {
          "name": "okToRecover",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, allows the system to recover unsaved file changes which \n resulted from a crash.  If false, any existing recovery data will be deleted.\n This flag is only relevant if project is open for update (isInProject) and the file can be\n opened for update."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "permits monitoring of open progress."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainObject",
        "type_short": "DomainObject",
        "comment": "an open domain object can be modified and saved. (Not read-only)"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if the domain object could not be read due\n to a version format change.  If okToUpgrade is true, then a VersionException indicates\n that the domain object cannot be upgraded to the current format.  If okToUpgrade is false,\n then the VersionException only means the object is not in the current format - it \n may or may not be possible to upgrade."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO or access error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if monitor cancelled operation"
        }
      ]
    },
    {
      "name": "getOpenedDomainObject",
      "comment": "Returns the domainObject for this DomainFile only if it is already open.",
      "javadoc": "Returns the domainObject for this DomainFile only if it is already open.\n@param consumer the consumer that will use the object.\n@return the already opened domainObject or null if it is not currently open.",
      "static": false,
      "params": [
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the consumer that will use the object."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainObject",
        "type_short": "DomainObject",
        "comment": "the already opened domainObject or null if it is not currently open."
      },
      "throws": []
    },
    {
      "name": "getReadOnlyDomainObject",
      "comment": "Returns a \"read-only\" version of the domain object.  \"Read-only\" means that the domain\n object cannot be saved back into its original domain object. It can still be modified\n and saved to a new domain file.  The domain object will be assigned a temporary domain\n file that will not allow a \"save\" operation. The user must do a \"save as\"\n to a new filename.",
      "javadoc": "Returns a \"read-only\" version of the domain object.  \"Read-only\" means that the domain\n object cannot be saved back into its original domain object. It can still be modified\n and saved to a new domain file.  The domain object will be assigned a temporary domain\n file that will not allow a \"save\" operation. The user must do a \"save as\"\n to a new filename.\n@param consumer consumer of the domain object which is responsible for\n releasing it after use.\n@param version the domain object version requested.  DEFAULT_VERSION should be \n specified to open the current version.\n@param monitor permits monitoring of open progress.\n@return a new domain object that is disassociated from its original domain file.\n@throws VersionException if the domain object could not be read due\n to a version format change.\n@throws FileNotFoundException if the stored file/version was not found.\n@throws IOException thrown if an IO or access error occurs.\n@throws CancelledException if monitor cancelled operation",
      "static": false,
      "params": [
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "consumer of the domain object which is responsible for\n releasing it after use."
        },
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "the domain object version requested.  DEFAULT_VERSION should be \n specified to open the current version."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "permits monitoring of open progress."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainObject",
        "type_short": "DomainObject",
        "comment": "a new domain object that is disassociated from its original domain file."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if the domain object could not be read due\n to a version format change."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO or access error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if monitor cancelled operation"
        }
      ]
    },
    {
      "name": "getImmutableDomainObject",
      "comment": "Returns a new DomainObject that cannot be changed or saved to its original file.",
      "javadoc": "Returns a new DomainObject that cannot be changed or saved to its original file.\n@param consumer consumer of the domain object which is responsible for\n releasing it after use.\n@param version the domain object version requested.  DEFAULT_VERSION should be \n specified to open the current version.\n@param monitor permits monitoring of open progress.\n@return a new domain object that is disassociated from its original domain file\n and cannot be modified\n@throws VersionException if the domain object could not be read due\n to a version format change.\n@throws FileNotFoundException if the stored file/version was not found.\n@throws IOException thrown if an IO or access error occurs.\n@throws CancelledException if monitor cancelled operation",
      "static": false,
      "params": [
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "consumer of the domain object which is responsible for\n releasing it after use."
        },
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "the domain object version requested.  DEFAULT_VERSION should be \n specified to open the current version."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "permits monitoring of open progress."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainObject",
        "type_short": "DomainObject",
        "comment": "a new domain object that is disassociated from its original domain file\n and cannot be modified"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if the domain object could not be read due\n to a version format change."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO or access error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if monitor cancelled operation"
        }
      ]
    },
    {
      "name": "save",
      "comment": "Save the DomainObject associated with this file.",
      "javadoc": "Save the \u003cCODE\u003eDomainObject\u003c/CODE\u003e associated with this file.\n@param monitor monitor for the task that is doing the save on the file\n@throws FileInUseException if the file is open for update by someone else, or\n a transient-read is in progress.\n@throws IOException thrown if an IO error occurs.\n@throws CancelledException if monitor cancelled operation",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "monitor for the task that is doing the save on the file"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if monitor cancelled operation"
        }
      ]
    },
    {
      "name": "canSave",
      "comment": "Return whether this domain object can be saved (i.e., updated/overwritten).",
      "javadoc": "Return whether this domain object can be saved (i.e., updated/overwritten).\n@return true if the user is the owner AND the file is in\n the active project AND the file is not read-only.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the user is the owner AND the file is in\n the active project AND the file is not read-only."
      },
      "throws": []
    },
    {
      "name": "canRecover",
      "comment": "Prior to invoking getDomainObject, this method can be used to determine if\n unsaved changes can be recovered on the next open.",
      "javadoc": "Prior to invoking getDomainObject, this method can be used to determine if\n unsaved changes can be recovered on the next open.\n@return true if recovery data exists.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if recovery data exists."
      },
      "throws": []
    },
    {
      "name": "takeRecoverySnapshot",
      "comment": "If the file has an updatable domain object with unsaved changes, generate a recovery \n snapshot.",
      "javadoc": "If the file has an updatable domain object with unsaved changes, generate a recovery \n snapshot.\n@return true if snapshot successful or not needed, false if file is busy which prevents \n snapshot, or snapshot was cancelled.\n@throws IOException if there is an exception saving the snapshot",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if snapshot successful or not needed, false if file is busy which prevents \n snapshot, or snapshot was cancelled."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception saving the snapshot"
        }
      ]
    },
    {
      "name": "isInWritableProject",
      "comment": "Returns true if this file is in a writable project.",
      "javadoc": "Returns true if this file is in a writable project.\n@return true if writable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if writable"
      },
      "throws": []
    },
    {
      "name": "getLastModifiedTime",
      "comment": "Get a long value representing the time when the data was last modified.",
      "javadoc": "Get a long value representing the time when the data was last modified.\n@return the time",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the time"
      },
      "throws": []
    },
    {
      "name": "getIcon",
      "comment": "Get the state based Icon image for the domain file based upon its content class.",
      "javadoc": "Get the state based Icon image for the domain file based upon its content class.\n@param disabled true if the icon return should be rendered as \n not enabled\n@return image icon",
      "static": false,
      "params": [
        {
          "name": "disabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the icon return should be rendered as \n not enabled"
        }
      ],
      "return": {
        "type_long": "javax.swing.Icon",
        "type_short": "Icon",
        "comment": "image icon"
      },
      "throws": []
    },
    {
      "name": "isCheckedOut",
      "comment": "Returns true if this is a checked-out file.",
      "javadoc": "Returns true if this is a checked-out file.\n@return true if checked-out",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if checked-out"
      },
      "throws": []
    },
    {
      "name": "isCheckedOutExclusive",
      "comment": "Returns true if this a checked-out file with exclusive access.",
      "javadoc": "Returns true if this a checked-out file with exclusive access.\n@return true if checked-out exclusively",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if checked-out exclusively"
      },
      "throws": []
    },
    {
      "name": "modifiedSinceCheckout",
      "comment": "Returns true if this is a checked-out file which has been modified since it was checked-out.",
      "javadoc": "Returns true if this is a checked-out file which has been modified since it was checked-out.\n@return true if modified since check-out",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if modified since check-out"
      },
      "throws": []
    },
    {
      "name": "canCheckout",
      "comment": "Returns true if this file may be checked-out from the associated repository.\n User\u0027s with read-only repository access will not have checkout ability.",
      "javadoc": "Returns true if this file may be checked-out from the associated repository.\n User\u0027s with read-only repository access will not have checkout ability.\n@return true if can checkout",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if can checkout"
      },
      "throws": []
    },
    {
      "name": "canCheckin",
      "comment": "Returns true if this file may be checked-in to the associated repository.",
      "javadoc": "Returns true if this file may be checked-in to the associated repository.\n@return true if can check-in",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if can check-in"
      },
      "throws": []
    },
    {
      "name": "canMerge",
      "comment": "Returns true if this file can be merged with the current versioned file.",
      "javadoc": "Returns true if this file can be merged with the current versioned file.\n@return true if can merge",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if can merge"
      },
      "throws": []
    },
    {
      "name": "canAddToRepository",
      "comment": "Returns true if this private file may be added to the associated repository.",
      "javadoc": "Returns true if this private file may be added to the associated repository.\n@return true if can add to the repository",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if can add to the repository"
      },
      "throws": []
    },
    {
      "name": "setReadOnly",
      "comment": "Sets the object to read-only.  This method may only be invoked\n for private files (i.e., not versioned).",
      "javadoc": "Sets the object to read-only.  This method may only be invoked\n for private files (i.e., not versioned).\n@param state if true file will be read-only and may not be updated, if false the \n file may be updated.\n@throws IOException thrown if an IO error occurs.",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true file will be read-only and may not be updated, if false the \n file may be updated."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO error occurs."
        }
      ]
    },
    {
      "name": "isReadOnly",
      "comment": "Returns whether the object is read-only. From a framework point of view a read-only object \n can never be changed.",
      "javadoc": "Returns whether the object is read-only. From a framework point of view a read-only object \n can never be changed.\n@return true if read-only",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if read-only"
      },
      "throws": []
    },
    {
      "name": "isVersionControlSupported",
      "comment": "Returns true if the versioned filesystem can be used to store this files content type.",
      "javadoc": "Returns true if the versioned filesystem can be used to store this files content type.\n@return true if supports version control",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if supports version control"
      },
      "throws": []
    },
    {
      "name": "isVersioned",
      "comment": "Return true if this is a versioned database, else false",
      "javadoc": "Return true if this is a versioned database, else false\n@return true if versioned",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if versioned"
      },
      "throws": []
    },
    {
      "name": "isHijacked",
      "comment": "Returns true if the file is versioned but a private copy also exists.",
      "javadoc": "Returns true if the file is versioned but a private copy also exists.\n@return true if hijacked",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if hijacked"
      },
      "throws": []
    },
    {
      "name": "getLatestVersion",
      "comment": "Return the latest version",
      "javadoc": "Return the latest version\n@return the version",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the version"
      },
      "throws": []
    },
    {
      "name": "isLatestVersion",
      "comment": "Returns true if this file represents the latest version of the associated domain object.",
      "javadoc": "Returns true if this file represents the latest version of the associated domain object.\n@return true if the latest version",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the latest version"
      },
      "throws": []
    },
    {
      "name": "getVersion",
      "comment": "Return either the latest version if the file is not checked-out or the version that\n was checked-out or a specific version that was requested.",
      "javadoc": "Return either the latest version if the file is not checked-out or the version that\n was checked-out or a specific version that was requested.\n@return the version",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the version"
      },
      "throws": []
    },
    {
      "name": "getVersionHistory",
      "comment": "Returns list of all available versions.",
      "javadoc": "Returns list of all available versions.\n@return the versions\n@throws IOException if there is an exception getting the history",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.store.Version[]",
        "type_short": "ghidra.framework.store.Version[]",
        "comment": "the versions"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception getting the history"
        }
      ]
    },
    {
      "name": "addToVersionControl",
      "comment": "Adds this private file to version control.",
      "javadoc": "Adds this private file to version control.\n@param comment new version comment\n@param keepCheckedOut if true, the file will be initially checked-out\n@param monitor progress monitor\n@throws FileInUseException if this file is in-use.\n@throws IOException thrown if an IO or access error occurs.  Also thrown if file is not \n private.\n@throws CancelledException if the monitor cancelled the operation",
      "static": false,
      "params": [
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new version comment"
        },
        {
          "name": "keepCheckedOut",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the file will be initially checked-out"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "progress monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO or access error occurs.  Also thrown if file is not \n private."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the monitor cancelled the operation"
        }
      ]
    },
    {
      "name": "checkout",
      "comment": "Checkout this file for update.  If this file is already \n private, this method does nothing.",
      "javadoc": "Checkout this file for update.  If this file is already \n private, this method does nothing.\n@param exclusive if true an exclusive checkout will be requested\n@param monitor progress monitor\n@return true if checkout successful, false if an exclusive checkout was not possible\n due to other users having checkouts of this file.  A request for a non-exclusive checkout \n will never return false.\n@throws IOException thrown if an IO or access error occurs.\n@throws CancelledException if task monitor cancelled operation.",
      "static": false,
      "params": [
        {
          "name": "exclusive",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true an exclusive checkout will be requested"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "progress monitor"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if checkout successful, false if an exclusive checkout was not possible\n due to other users having checkouts of this file.  A request for a non-exclusive checkout \n will never return false."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO or access error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if task monitor cancelled operation."
        }
      ]
    },
    {
      "name": "checkin",
      "comment": "Performs check in to associated repository.  File must be checked-out \n and modified since checkout.",
      "javadoc": "Performs check in to associated repository.  File must be checked-out \n and modified since checkout.\n@param checkinHandler provides user input data to complete checkin process.\n@param okToUpgrade if true an upgrade will be performed if needed\n@param monitor the TaskMonitor.\n@throws IOException if an IO or access error occurs\n@throws VersionException if unable to handle domain object version in versioned filesystem.\n If okToUpgrade was false, check exception to see if it can be upgraded\n sometime after doing a checkout.\n@throws CancelledException if task monitor cancelled operation",
      "static": false,
      "params": [
        {
          "name": "checkinHandler",
          "type_long": "ghidra.framework.data.CheckinHandler",
          "type_short": "CheckinHandler",
          "comment": "provides user input data to complete checkin process."
        },
        {
          "name": "okToUpgrade",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true an upgrade will be performed if needed"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the TaskMonitor."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO or access error occurs"
        },
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if unable to handle domain object version in versioned filesystem.\n If okToUpgrade was false, check exception to see if it can be upgraded\n sometime after doing a checkout."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if task monitor cancelled operation"
        }
      ]
    },
    {
      "name": "merge",
      "comment": "Performs merge from current version of versioned file into local checked-out file.",
      "javadoc": "Performs merge from current version of versioned file into local checked-out file.\n@param okToUpgrade if true an upgrade will be performed if needed\n@param monitor task monitor\n@throws IOException if an IO or access error occurs\n@throws VersionException if unable to handle domain object version in versioned filesystem.\n If okToUpgrade was false, check exception to see if it can be upgraded\n@throws CancelledException if task monitor cancelled operation",
      "static": false,
      "params": [
        {
          "name": "okToUpgrade",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true an upgrade will be performed if needed"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO or access error occurs"
        },
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": "if unable to handle domain object version in versioned filesystem.\n If okToUpgrade was false, check exception to see if it can be upgraded"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if task monitor cancelled operation"
        }
      ]
    },
    {
      "name": "undoCheckout",
      "comment": "Undo \"checked-out\" file.  The original repository file is restored.",
      "javadoc": "Undo \"checked-out\" file.  The original repository file is restored.\n@param keep if true, the private database will be renamed with a .keep\n extension.\n@throws FileInUseException if this file is in-use / checked-out.\n@throws IOException thrown if file is not checked-out or an IO / access error occurs.",
      "static": false,
      "params": [
        {
          "name": "keep",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the private database will be renamed with a .keep\n extension."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if file is not checked-out or an IO / access error occurs."
        }
      ]
    },
    {
      "name": "terminateCheckout",
      "comment": "Forcefully terminate a checkout for the associated versioned file.\n The user must be the owner of the checkout or have administrator privilege\n on the versioned filesystem (i.e., repository).",
      "javadoc": "Forcefully terminate a checkout for the associated versioned file.\n The user must be the owner of the checkout or have administrator privilege\n on the versioned filesystem (i.e., repository).\n@param checkoutId checkout ID\n@throws IOException if an IO or access error occurs",
      "static": false,
      "params": [
        {
          "name": "checkoutId",
          "type_long": "long",
          "type_short": "long",
          "comment": "checkout ID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO or access error occurs"
        }
      ]
    },
    {
      "name": "getCheckouts",
      "comment": "Get a list of checkouts by all users for the associated versioned file.",
      "javadoc": "Get a list of checkouts by all users for the associated versioned file.\n@return list of checkouts\n@throws IOException if an IO or access error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.store.ItemCheckoutStatus[]",
        "type_short": "ghidra.framework.store.ItemCheckoutStatus[]",
        "comment": "list of checkouts"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO or access error occurs"
        }
      ]
    },
    {
      "name": "getCheckoutStatus",
      "comment": "Get checkout status associated with a versioned file.",
      "javadoc": "Get checkout status associated with a versioned file.\n@return checkout status or null if not checked-out to current associated project.\n@throws IOException if an IO or access error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.store.ItemCheckoutStatus",
        "type_short": "ItemCheckoutStatus",
        "comment": "checkout status or null if not checked-out to current associated project."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO or access error occurs"
        }
      ]
    },
    {
      "name": "delete",
      "comment": "Delete the entire database for this file, including any version files.",
      "javadoc": "Delete the entire database for this file, including any version files.\n@throws FileInUseException if this file is in-use / checked-out.\n@throws UserAccessException if the user does not have permission to delete the file.\n@throws IOException thrown if an IO or access error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO or access error occurs."
        }
      ]
    },
    {
      "name": "delete",
      "comment": "Deletes a specific version of a file from the versioned filesystem.",
      "javadoc": "Deletes a specific version of a file from the versioned filesystem.\n@param version specific version to be deleted.  The version must either\n be the oldest or latest, or -1 which will attempt to remove all versions.\n When deleting the latest version, this method could take a long time\n to return since the previous version must be reconstructed within the\n versioned filesystem.\n@throws IOException if an IO error occurs, including the inability \n to delete a version because this item is checked-out, the user does\n not have permission, or the specified version is not the oldest or\n latest.",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "specific version to be deleted.  The version must either\n be the oldest or latest, or -1 which will attempt to remove all versions.\n When deleting the latest version, this method could take a long time\n to return since the previous version must be reconstructed within the\n versioned filesystem."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an IO error occurs, including the inability \n to delete a version because this item is checked-out, the user does\n not have permission, or the specified version is not the oldest or\n latest."
        }
      ]
    },
    {
      "name": "moveTo",
      "comment": "Move this file into the newParent folder.",
      "javadoc": "Move this file into the newParent folder.\n@param newParent new parent folder within the same project\n@return the newly relocated domain file (the original DomainFile object becomes invalid since it is immutable)\n@throws DuplicateFileException if a file with the same name \n already exists in newParent folder.\n@throws FileInUseException if this file is in-use / checked-out.\n@throws IOException thrown if an IO or access error occurs.",
      "static": false,
      "params": [
        {
          "name": "newParent",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "new parent folder within the same project"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "the newly relocated domain file (the original DomainFile object becomes invalid since it is immutable)"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO or access error occurs."
        }
      ]
    },
    {
      "name": "copyTo",
      "comment": "Copy this file into the newParent folder as a private file.",
      "javadoc": "Copy this file into the newParent folder as a private file.\n@param newParent new parent folder\n@param monitor task monitor\n@return newly created domain file\n@throws FileInUseException if this file is in-use / checked-out.\n@throws IOException thrown if an IO or access error occurs.\n@throws CancelledException if task monitor cancelled operation.",
      "static": false,
      "params": [
        {
          "name": "newParent",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "new parent folder"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "newly created domain file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO or access error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if task monitor cancelled operation."
        }
      ]
    },
    {
      "name": "copyVersionTo",
      "comment": "Copy a specific version of this file to the specified destFolder.",
      "javadoc": "Copy a specific version of this file to the specified destFolder.\n@param version version to copy\n@param destFolder destination parent folder\n@param monitor task monitor\n@return the copied file\n@throws IOException thrown if an IO or access error occurs.\n@throws CancelledException if task monitor cancelled operation.",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "version to copy"
        },
        {
          "name": "destFolder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "destination parent folder"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "the copied file"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO or access error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if task monitor cancelled operation."
        }
      ]
    },
    {
      "name": "getConsumers",
      "comment": "Get the list of consumers (Objects) for this domain file.",
      "javadoc": "Get the list of consumers (Objects) for this domain file.\n@return empty array list if there are no consumers",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003c?\u003e",
        "type_short": "List",
        "comment": "empty array list if there are no consumers"
      },
      "throws": []
    },
    {
      "name": "isChanged",
      "comment": "Return whether the domain object in this domain file has changed.",
      "javadoc": "Return whether the domain object in this domain file has changed.\n@return true if changed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if changed"
      },
      "throws": []
    },
    {
      "name": "isOpen",
      "comment": "Returns true if there is an open domainObject for this file.",
      "javadoc": "Returns true if there is an open domainObject for this file.\n@return true if open",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if open"
      },
      "throws": []
    },
    {
      "name": "isBusy",
      "comment": "Returns true if the domain object in this domain file exists and has an open transaction.",
      "javadoc": "Returns true if the domain object in this domain file exists and has an open transaction.\n@return true if busy",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if busy"
      },
      "throws": []
    },
    {
      "name": "packFile",
      "comment": "Pack domain file into specified file.\n Specified file will be overwritten if it already exists.",
      "javadoc": "Pack domain file into specified file.\n Specified file will be overwritten if it already exists.\n@param file destination file\n@param monitor the task monitor\n@throws IOException if there is an exception packing the file\n@throws CancelledException if monitor cancels operation",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "destination file"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception packing the file"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if monitor cancels operation"
        }
      ]
    },
    {
      "name": "getMetadata",
      "comment": "Returns an ordered map containing the metadata that has been associated with the \n corresponding domain object. The map contains key,value pairs and are ordered by their \n insertion order.",
      "javadoc": "Returns an ordered map containing the metadata that has been associated with the \n corresponding domain object. The map contains key,value pairs and are ordered by their \n insertion order.\n@return a map containing the metadata that has been associated with the corresponding domain \n object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Map\u003cjava.lang.String,java.lang.String\u003e",
        "type_short": "Map",
        "comment": "a map containing the metadata that has been associated with the corresponding domain \n object."
      },
      "throws": []
    },
    {
      "name": "length",
      "comment": "Returns the length of this domain file.  This size is the minimum disk space\n used for storing this file, but does not account for additional storage space\n used to tracks changes, etc.",
      "javadoc": "Returns the length of this domain file.  This size is the minimum disk space\n used for storing this file, but does not account for additional storage space\n used to tracks changes, etc.\n@return file length\n@throws IOException thrown if IO or access error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "file length"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if IO or access error occurs"
        }
      ]
    }
  ]
}
