{
  "name": "DomainFolder",
  "comment": "DomainFolder provides a storage interface for project folders.  A \n DomainFolder is an immutable reference to a folder contained within a project.  The \n state of a DomainFolder object does not track name/parent changes made to the \n referenced project folder.",
  "javadoc": "\u003ccode\u003eDomainFolder\u003c/code\u003e provides a storage interface for project folders.  A \n \u003ccode\u003eDomainFolder\u003c/code\u003e is an immutable reference to a folder contained within a project.  The \n state of a \u003ccode\u003eDomainFolder\u003c/code\u003e object does not track name/parent changes made to the \n referenced project folder.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "fields": [
    {
      "name": "SEPARATOR",
      "comment": "Character used to separate folder and item names within a path string.",
      "javadoc": "Character used to separate folder and item names within a path string.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"/\""
    },
    {
      "name": "COPY_SUFFIX",
      "comment": "Name extension to add when attempting to avoid a duplicate name.",
      "javadoc": "Name extension to add when attempting to avoid a duplicate name.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\".copy\""
    }
  ],
  "methods": [
    {
      "name": "getName",
      "comment": "Return this folder\u0027s name.",
      "javadoc": "Return this folder\u0027s name.\n@return the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "Set the name on this domain folder.",
      "javadoc": "Set the name on this domain folder.\n@param newName domain folder name\n@return renamed domain file (the original DomainFolder object becomes invalid since it is \n immutable)\n@throws InvalidNameException if newName contains illegal characters\n@throws DuplicateFileException if a folder named newName \n already exists in this files domain folder.\n@throws FileInUseException if any file within this folder or its descendants is \n in-use / checked-out.\n@throws IOException thrown if an IO or access error occurs.",
      "static": false,
      "params": [
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "domain folder name"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFolder",
        "type_short": "DomainFolder",
        "comment": "renamed domain file (the original DomainFolder object becomes invalid since it is \n immutable)"
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if newName contains illegal characters"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO or access error occurs."
        }
      ]
    },
    {
      "name": "getProjectLocator",
      "comment": "Returns the local storage location for the project that this DomainFolder belongs to.",
      "javadoc": "Returns the local storage location for the project that this DomainFolder belongs to.\n@return the locator",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ProjectLocator",
        "type_short": "ProjectLocator",
        "comment": "the locator"
      },
      "throws": []
    },
    {
      "name": "getProjectData",
      "comment": "Returns the project data",
      "javadoc": "Returns the project data\n@return the project data",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ProjectData",
        "type_short": "ProjectData",
        "comment": "the project data"
      },
      "throws": []
    },
    {
      "name": "getPathname",
      "comment": "Returns the path name to the domain object.",
      "javadoc": "Returns the path name to the domain object.\n@return the path name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the path name"
      },
      "throws": []
    },
    {
      "name": "isInWritableProject",
      "comment": "Returns true if this file is in a writable project.",
      "javadoc": "Returns true if this file is in a writable project.\n@return true if writable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if writable"
      },
      "throws": []
    },
    {
      "name": "getParent",
      "comment": "Return parent folder or null if this DomainFolder is the root folder.",
      "javadoc": "Return parent folder or null if this DomainFolder is the root folder.\n@return the parent",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.DomainFolder",
        "type_short": "DomainFolder",
        "comment": "the parent"
      },
      "throws": []
    },
    {
      "name": "getFolders",
      "comment": "Get DomainFolders in this folder.\n This returns cached information and does not force a full refresh.",
      "javadoc": "Get DomainFolders in this folder.\n This returns cached information and does not force a full refresh.\n@return list of sub-folders",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.DomainFolder[]",
        "type_short": "ghidra.framework.model.DomainFolder[]",
        "comment": "list of sub-folders"
      },
      "throws": []
    },
    {
      "name": "getFolder",
      "comment": "Return the folder for the given name.",
      "javadoc": "Return the folder for the given name.\n@param name of folder to retrieve\n@return folder or null if there is no folder by the given name.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "of folder to retrieve"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFolder",
        "type_short": "DomainFolder",
        "comment": "folder or null if there is no folder by the given name."
      },
      "throws": []
    },
    {
      "name": "getFile",
      "comment": "Get the domain file in this folder with the given name.",
      "javadoc": "Get the domain file in this folder with the given name.\n@param name name of file in this folder to retrieve\n@return domain file or null if there is no domain file in this folder with the given name.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of file in this folder to retrieve"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "domain file or null if there is no domain file in this folder with the given name."
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "Determine if this folder contains any sub-folders or domain files.",
      "javadoc": "Determine if this folder contains any sub-folders or domain files.\n@return true if this folder is empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this folder is empty."
      },
      "throws": []
    },
    {
      "name": "getFiles",
      "comment": "Get all domain files in this folder.\n This returns cached information and does not force a full refresh.",
      "javadoc": "Get all domain files in this folder.\n This returns cached information and does not force a full refresh.\n@return list of domain files",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile[]",
        "type_short": "ghidra.framework.model.DomainFile[]",
        "comment": "list of domain files"
      },
      "throws": []
    },
    {
      "name": "createFile",
      "comment": "Add a domain object to this folder.",
      "javadoc": "Add a domain object to this folder.\n@param name domain file name\n@param obj domain object to be stored\n@param monitor progress monitor\n@return domain file created as a result of adding\n the domain object to this folder\n@throws DuplicateFileException thrown if the file name already exists\n@throws InvalidNameException if name is an empty string\n or if it contains characters other than alphanumerics.\n@throws IOException if IO or access error occurs\n@throws CancelledException if the user cancels the create.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "domain file name"
        },
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": "domain object to be stored"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "progress monitor"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "domain file created as a result of adding\n the domain object to this folder"
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if name is an empty string\n or if it contains characters other than alphanumerics."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO or access error occurs"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels the create."
        }
      ]
    },
    {
      "name": "createFile",
      "comment": "Add a new domain file to this folder.",
      "javadoc": "Add a new domain file to this folder.\n@param name domain file name\n@param packFile packed file containing domain file data\n@param monitor progress monitor\n@return domain file created as a result of adding\n the domain object to this folder\n@throws DuplicateFileException thrown if the file name already exists\n@throws InvalidNameException if name is an empty string\n or if it contains characters other than alphanumerics.\n@throws IOException if IO or access error occurs\n@throws CancelledException if the user cancels the create.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "domain file name"
        },
        {
          "name": "packFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "packed file containing domain file data"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "progress monitor"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFile",
        "type_short": "DomainFile",
        "comment": "domain file created as a result of adding\n the domain object to this folder"
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if name is an empty string\n or if it contains characters other than alphanumerics."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO or access error occurs"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels the create."
        }
      ]
    },
    {
      "name": "createFolder",
      "comment": "Create a subfolder of this folder.",
      "javadoc": "Create a subfolder of this folder.\n@param folderName sub-folder name\n@return the folder\n@throws DuplicateFileException if a folder by\n this name already exists\n@throws InvalidNameException if name is an empty string of if it contains characters other \n than alphanumerics.\n@throws IOException if IO or access error occurs",
      "static": false,
      "params": [
        {
          "name": "folderName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "sub-folder name"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFolder",
        "type_short": "DomainFolder",
        "comment": "the folder"
      },
      "throws": [
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if name is an empty string of if it contains characters other \n than alphanumerics."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO or access error occurs"
        }
      ]
    },
    {
      "name": "delete",
      "comment": "Deletes this folder and all of its contents",
      "javadoc": "Deletes this folder and all of its contents\n@throws IOException if IO or access error occurs\n@throws FolderNotEmptyException Thrown if the subfolder is not empty.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if IO or access error occurs"
        }
      ]
    },
    {
      "name": "moveTo",
      "comment": "Move this folder into the newParent folder.  If connected to an archive\n this affects both private and repository folders and files.  If not\n connected, only private folders and files are affected.",
      "javadoc": "Move this folder into the newParent folder.  If connected to an archive\n this affects both private and repository folders and files.  If not\n connected, only private folders and files are affected.\n@param newParent new parent folder within the same project\n@return the newly relocated folder (the original DomainFolder object becomes invalid since \n it is immutable)\n@throws DuplicateFileException if a folder with the same name \n already exists in newParent folder.\n@throws FileInUseException if this folder or one of its descendants \n contains a file which is in-use / checked-out.\n@throws IOException thrown if an IO or access error occurs.",
      "static": false,
      "params": [
        {
          "name": "newParent",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "new parent folder within the same project"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFolder",
        "type_short": "DomainFolder",
        "comment": "the newly relocated folder (the original DomainFolder object becomes invalid since \n it is immutable)"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO or access error occurs."
        }
      ]
    },
    {
      "name": "copyTo",
      "comment": "Copy this folder into the newParent folder.",
      "javadoc": "Copy this folder into the newParent folder.\n@param newParent new parent folder\n@param monitor the task monitor\n@return the copied folder\n@throws DuplicateFileException if a folder or file by\n this name already exists in the newParent folder\n@throws IOException thrown if an IO or access error occurs.\n@throws CancelledException if task monitor cancelled operation.",
      "static": false,
      "params": [
        {
          "name": "newParent",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "new parent folder"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainFolder",
        "type_short": "DomainFolder",
        "comment": "the copied folder"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if an IO or access error occurs."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if task monitor cancelled operation."
        }
      ]
    },
    {
      "name": "setActive",
      "comment": "Allows the framework to react to a request to make this folder the \"active\" one.",
      "javadoc": "Allows the framework to react to a request to make this folder the \"active\" one.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
