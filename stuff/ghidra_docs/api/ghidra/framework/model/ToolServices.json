{
  "name": "ToolServices",
  "comment": "Services that the Tool uses.",
  "javadoc": "Services that the Tool uses.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "DEFAULT_TOOLNAME",
      "comment": "The default tool name for Ghidra",
      "javadoc": "The default tool name for Ghidra",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"DefaultTool\""
    }
  ],
  "methods": [
    {
      "name": "closeTool",
      "comment": "Notify the framework that the tool is closing.",
      "javadoc": "Notify the framework that the tool is closing.\n@param tool tool that is closing",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "tool that is closing"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveTool",
      "comment": "Saves the tool\u0027s configuration in the standard\n tool location.",
      "javadoc": "Saves the tool\u0027s configuration in the standard\n tool location.\n@param tool tool to save.",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "tool to save."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "exportTool",
      "comment": "Save the tool to the given location on the local file system.",
      "javadoc": "Save the tool to the given location on the local file system.\n@param tool the tool template to write\n@return the file to which the tool was saved\n@throws FileNotFoundException thrown if the file\u0027s directory doesn\u0027t exist.\n@throws IOException thrown if there is an error writing the file.",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.model.ToolTemplate",
          "type_short": "ToolTemplate",
          "comment": "the tool template to write"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the file to which the tool was saved"
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "thrown if the file\u0027s directory doesn\u0027t exist."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if there is an error writing the file."
        }
      ]
    },
    {
      "name": "getToolChest",
      "comment": "Get the tool chest for the project",
      "javadoc": "Get the tool chest for the project\n@return the tool chest",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ToolChest",
        "type_short": "ToolChest",
        "comment": "the tool chest"
      },
      "throws": []
    },
    {
      "name": "displaySimilarTool",
      "comment": "Find a running tool like the one specified that has the named domain file.\n If it finds a matching tool, then it is brought to the front.\n Otherwise, it creates one and runs it.\n It then invokes the specified event on the running tool.",
      "javadoc": "Find a running tool like the one specified that has the named domain file.\n If it finds a matching tool, then it is brought to the front.\n Otherwise, it creates one and runs it.\n It then invokes the specified event on the running tool.\n@param tool find/create a tool like this one.\n@param domainFile open this file in the found/created tool.\n@param event invoke this event on the found/created tool",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "find/create a tool like this one."
        },
        {
          "name": "domainFile",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": "open this file in the found/created tool."
        },
        {
          "name": "event",
          "type_long": "ghidra.framework.plugintool.PluginEvent",
          "type_short": "PluginEvent",
          "comment": "invoke this event on the found/created tool"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultToolTemplate",
      "comment": "Returns the default tool template used to open the tool.  Here default means the \n tool that should be used to open the given file, whether defined by the user or the \n system default.",
      "javadoc": "Returns the default tool template used to open the tool.  Here \u003cb\u003edefault\u003c/b\u003e means the \n tool that should be used to open the given file, whether defined by the user or the \n system default.\n@param domainFile The file for which to find the preferred tool.\n@return The preferred tool that should be used to open the given file.",
      "static": false,
      "params": [
        {
          "name": "domainFile",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": "The file for which to find the preferred tool."
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.ToolTemplate",
        "type_short": "ToolTemplate",
        "comment": "The preferred tool that should be used to open the given file."
      },
      "throws": []
    },
    {
      "name": "getCompatibleTools",
      "comment": "Returns a set of tools that can open the given domain file class.",
      "javadoc": "Returns a set of tools that can open the given domain file class.\n@param domainClass The domain file class type for which to get tools\n@return the tools",
      "static": false,
      "params": [
        {
          "name": "domainClass",
          "type_long": "java.lang.Class\u003c? extends ghidra.framework.model.DomainObject\u003e",
          "type_short": "Class",
          "comment": "The domain file class type for which to get tools"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cghidra.framework.model.ToolTemplate\u003e",
        "type_short": "Set",
        "comment": "the tools"
      },
      "throws": []
    },
    {
      "name": "getContentTypeToolAssociations",
      "comment": "Returns the ToolAssociationInfo, which describe content \n types and the tools used to open them, for all content types known to the system.",
      "javadoc": "Returns the {@link ToolAssociationInfo associations}, which describe content \n types and the tools used to open them, for all content types known to the system.\n@return the associations\n@see #setContentTypeToolAssociations(Set)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cghidra.framework.model.ToolAssociationInfo\u003e",
        "type_short": "Set",
        "comment": "the associations"
      },
      "throws": []
    },
    {
      "name": "setContentTypeToolAssociations",
      "comment": "Sets the  ToolAssociationInfo, which describe content \n types and the tools used to open them, for the system.",
      "javadoc": "Sets the  {@link ToolAssociationInfo associations}, which describe content \n types and the tools used to open them, for the system.\n@param infos The associations to be applied\n@see #getContentTypeToolAssociations()",
      "static": false,
      "params": [
        {
          "name": "infos",
          "type_long": "java.util.Set\u003cghidra.framework.model.ToolAssociationInfo\u003e",
          "type_short": "Set",
          "comment": "The associations to be applied"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "launchDefaultTool",
      "comment": "Launch the default tool; if domainFile is not null, this file will\n be opened in the tool.",
      "javadoc": "Launch the default tool; if domainFile is not null, this file will\n be opened in the tool.\n@param domainFile the file to open; may be null\n@return the tool",
      "static": false,
      "params": [
        {
          "name": "domainFile",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": "the file to open; may be null"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the tool"
      },
      "throws": []
    },
    {
      "name": "launchTool",
      "comment": "Launch the tool with the given name",
      "javadoc": "Launch the tool with the given name\n@param toolName name of the tool to launch\n@param domainFile the file to open; may be null\n@return the tool",
      "static": false,
      "params": [
        {
          "name": "toolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the tool to launch"
        },
        {
          "name": "domainFile",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": "the file to open; may be null"
        }
      ],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": "the tool"
      },
      "throws": []
    },
    {
      "name": "addDefaultToolChangeListener",
      "comment": "Add a listener that will be notified when the default tool specification changes",
      "javadoc": "Add a listener that will be notified when the default tool specification changes\n@param listener the listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.model.DefaultToolChangeListener",
          "type_short": "DefaultToolChangeListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeDefaultToolChangeListener",
      "comment": "Remove the listener",
      "javadoc": "Remove the listener\n@param listener the listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.model.DefaultToolChangeListener",
          "type_short": "DefaultToolChangeListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRunningTools",
      "comment": "Return array of running tools",
      "javadoc": "Return array of running tools\n@return array of Tools",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool[]",
        "type_short": "ghidra.framework.plugintool.PluginTool[]",
        "comment": "array of Tools"
      },
      "throws": []
    },
    {
      "name": "canAutoSave",
      "comment": "Returns true if this tool should be saved base on the state of other running instances of\n the same tool",
      "javadoc": "Returns true if this tool should be saved base on the state of other running instances of\n the same tool\n@param tool the tool to check for saving\n@return true if the tool should be saved",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "the tool to check for saving"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the tool should be saved"
      },
      "throws": []
    }
  ]
}
