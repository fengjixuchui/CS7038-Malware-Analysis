{
  "name": "GenericRunInfo",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "TEST_DIRECTORY_SUFFIX",
      "comment": "The name appended to application directories during testing",
      "javadoc": "The name appended to application directories during testing",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"-Test\""
    },
    {
      "name": "LOG",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "org.apache.logging.log4j.Logger",
      "type_short": "Logger",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUserSettingsDirsByTime",
      "comment": "Get all of the applications\u0027s settings directories \n (.application_name_version) for various versions in descending order by the \n modification time. In other words, list.get(0) will be the directory \n with the most recent modification time. If two directories have the same time then the \n directories will simply be sorted based on their pathnames as a string.\n \n Note: This method ignores Test directories",
      "javadoc": "Get all of the applications\u0027s settings directories \n (\u003ctt\u003e.\u003ci\u003eapplication_name_version\u003c/i\u003e\u003c/tt\u003e) for various versions in descending order by the \n modification time. In other words, \u003ctt\u003elist.get(0)\u003c/tt\u003e will be the directory \n with the most recent modification time. If two directories have the same time then the \n directories will simply be sorted based on their pathnames as a string.\n \u003cp\u003e\n \u003cb\u003eNote: \u003c/b\u003eThis method ignores Test directories",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.io.File\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "collectAllApplicationDirectories",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dataDirectoryParentDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.io.File\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPreviousApplicationSettingsFile",
      "comment": "Searches previous Application Settings directories \n (#getUserSettingsDirsByTime()) to find a file by the given name.   This is \n useful for loading previous user settings, such as preferences.\n \n Note: this method will ignore any test versions of settings directories.",
      "javadoc": "Searches previous Application Settings directories \n ({@link #getUserSettingsDirsByTime()}) to find a file by the given name.   This is \n useful for loading previous user settings, such as preferences.\n \n \u003cp\u003eNote: this method will ignore any test versions of settings directories.\n@param filename the name for which to seek; must be relative to a settings directory\n@return the most recent file matching that name found in a previous settings dir",
      "static": true,
      "params": [
        {
          "name": "filename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name for which to seek; must be relative to a settings directory"
        }
      ],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the most recent file matching that name found in a previous settings dir"
      },
      "throws": []
    },
    {
      "name": "getPreviousApplicationSettingsDirsByTime",
      "comment": "This is the same as #getUserSettingsDirsByTime() except that it doesn\u0027t include the \n current installation or installations with different release names",
      "javadoc": "This is the same as {@link #getUserSettingsDirsByTime()} except that it doesn\u0027t include the \n current installation or installations with different release names\n@return the list of previous directories, sorted by time",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.io.File\u003e",
        "type_short": "List",
        "comment": "the list of previous directories, sorted by time"
      },
      "throws": []
    },
    {
      "name": "getProjectsDirPath",
      "comment": "Get the user\u0027s preferred projects directory.",
      "javadoc": "Get the user\u0027s preferred projects directory.\n@return projects directory path.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "projects directory path."
      },
      "throws": []
    },
    {
      "name": "setProjectsDirPath",
      "comment": "Set the user\u0027s current projects directory path.  Value is also retained\n within user\u0027s set of preferences.",
      "javadoc": "Set the user\u0027s current projects directory path.  Value is also retained\n within user\u0027s set of preferences.\n@param path projects directory path.",
      "static": true,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "projects directory path."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
