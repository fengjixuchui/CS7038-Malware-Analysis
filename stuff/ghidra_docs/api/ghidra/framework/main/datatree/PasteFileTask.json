{
  "name": "PasteFileTask",
  "comment": "Task to paste files at given destination folder.",
  "javadoc": "Task to paste files at given destination folder.",
  "static": false,
  "implements": [],
  "extends": "ghidra.util.task.Task",
  "fields": [
    {
      "name": "destNode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.datatree.DomainFolderNode",
      "type_short": "DomainFolderNode",
      "constant_value": null
    },
    {
      "name": "list",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cdocking.widgets.tree.GTreeNode\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "isCut",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "repository",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.client.RepositoryAdapter",
      "type_short": "RepositoryAdapter",
      "constant_value": null
    },
    {
      "name": "hasFailedCopy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for PasteFileTask.",
      "javadoc": "Constructor for PasteFileTask.\n@param destNode destination folder\n@param list list of GTreeNodes being pasted\n@param isCut boolean flag, true means source nodes were cut instead of copied.",
      "static": false,
      "params": [
        {
          "name": "destNode",
          "type_long": "ghidra.framework.main.datatree.DomainFolderNode",
          "type_short": "DomainFolderNode",
          "comment": "destination folder"
        },
        {
          "name": "list",
          "type_long": "java.util.List\u003cdocking.widgets.tree.GTreeNode\u003e",
          "type_short": "List",
          "comment": "list of GTreeNodes being pasted"
        },
        {
          "name": "isCut",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag, true means source nodes were cut instead of copied."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "run",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "pasteFile",
      "comment": "Paste the given file at the folder represented by destNode.",
      "javadoc": "Paste the given file at the folder represented by destNode.\n@param file file to be pasted.\n@param monitor task monitor",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": "file to be pasted."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "pasteFolder",
      "comment": "Paste the given folder at destNode.",
      "javadoc": "Paste the given folder at destNode.",
      "static": false,
      "params": [
        {
          "name": "folder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copyFile",
      "comment": "Copy a file into a new folder",
      "javadoc": "Copy a file into a new folder\n@param file source file}\n@param folder destination folder\n@param monitor task monitor",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": "source file}"
        },
        {
          "name": "folder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "destination folder"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copyFolder",
      "comment": "Copy the given folder and all of its contents into a new parent folder",
      "javadoc": "Copy the given folder and all of its contents into a new parent folder",
      "static": false,
      "params": [
        {
          "name": "folder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": ""
        },
        {
          "name": "newParent",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveFile",
      "comment": "Move a file into a folder.\n \n Displays a error dialog if there was an exception",
      "javadoc": "Move a file into a folder.\n \u003cp\u003e\n Displays a error dialog if there was an exception\n@param file file being moved\n@param folder destination folder",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": "file being moved"
        },
        {
          "name": "folder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "destination folder"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveFolder",
      "comment": "Move the given folder and all of its contents into a new parent folder.\n \n Displays a error dialog if there was an exception",
      "javadoc": "Move the given folder and all of its contents into a new parent folder.\n \u003cp\u003e\n Displays a error dialog if there was an exception\n@param folder being moved\n@param newParent destination",
      "static": false,
      "params": [
        {
          "name": "folder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "being moved"
        },
        {
          "name": "newParent",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "destination"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
