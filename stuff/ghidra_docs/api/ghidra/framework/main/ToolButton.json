{
  "name": "ToolButton",
  "comment": "Component that is a drop target for a DataTreeTransferable object.\n If the object contains a domain file that is supported by a tool of\n this tool template, then a tool is launched with the data in it.\n \n This button can be used in one of two ways: to launch new instances of an associated tool \n template, or to represent a running tool.",
  "javadoc": "Component that is a drop target for a DataTreeTransferable object.\n If the object contains a domain file that is supported by a tool of\n this tool template, then a tool is launched with the data in it.\n \u003cp\u003e\n This button can be used in one of two ways: to launch new instances of an associated tool \n template, or to represent a running tool.",
  "static": false,
  "implements": [
    "docking.dnd.Draggable",
    "docking.dnd.Droppable"
  ],
  "extends": "docking.widgets.EmptyBorderButton",
  "fields": [
    {
      "name": "DUMMY_CALLBACK_RUNNABLE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.Runnable",
      "type_short": "Runnable",
      "constant_value": null
    },
    {
      "name": "dropTarget",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.dnd.DropTarget",
      "type_short": "DropTarget",
      "constant_value": null
    },
    {
      "name": "dropTargetAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.dnd.DropTgtAdapter",
      "type_short": "DropTgtAdapter",
      "constant_value": null
    },
    {
      "name": "acceptableFlavors",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.datatransfer.DataFlavor[]",
      "type_short": "java.awt.datatransfer.DataFlavor[]",
      "constant_value": null
    },
    {
      "name": "dragSource",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.dnd.DragSource",
      "type_short": "DragSource",
      "constant_value": null
    },
    {
      "name": "dragGestureAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.dnd.DragGestureAdapter",
      "type_short": "DragGestureAdapter",
      "constant_value": null
    },
    {
      "name": "dragSourceAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.dnd.DragSrcAdapter",
      "type_short": "DragSrcAdapter",
      "constant_value": null
    },
    {
      "name": "dragAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "plugin",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.FrontEndPlugin",
      "type_short": "FrontEndPlugin",
      "constant_value": null
    },
    {
      "name": "template",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.model.ToolTemplate",
      "type_short": "ToolTemplate",
      "constant_value": null
    },
    {
      "name": "associatedRunningTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.PluginTool",
      "type_short": "PluginTool",
      "constant_value": null
    },
    {
      "name": "toolChangeListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.model.DefaultToolChangeListener",
      "type_short": "DefaultToolChangeListener",
      "constant_value": null
    },
    {
      "name": "toolServices",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.model.ToolServices",
      "type_short": "ToolServices",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a tool button that does not represent a running tool, using\n the default tool icon.",
      "javadoc": "Construct a tool button that does not represent a running tool, using\n the default tool icon.",
      "static": false,
      "params": [
        {
          "name": "plugin",
          "type_long": "ghidra.framework.main.FrontEndPlugin",
          "type_short": "FrontEndPlugin",
          "comment": ""
        },
        {
          "name": "template",
          "type_long": "ghidra.framework.model.ToolTemplate",
          "type_short": "ToolTemplate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a tool label that represents a running tool, using the\n default RUNNING_TOOL icon.",
      "javadoc": "Construct a tool label that represents a running tool, using the\n default RUNNING_TOOL icon.",
      "static": false,
      "params": [
        {
          "name": "plugin",
          "type_long": "ghidra.framework.main.FrontEndPlugin",
          "type_short": "FrontEndPlugin",
          "comment": ""
        },
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "template",
          "type_long": "ghidra.framework.model.ToolTemplate",
          "type_short": "ToolTemplate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a tool label that represents a running tool.",
      "javadoc": "Construct a tool label that represents a running tool.",
      "static": false,
      "params": [
        {
          "name": "plugin",
          "type_long": "ghidra.framework.main.FrontEndPlugin",
          "type_short": "FrontEndPlugin",
          "comment": ""
        },
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "template",
          "type_long": "ghidra.framework.model.ToolTemplate",
          "type_short": "ToolTemplate",
          "comment": ""
        },
        {
          "name": "iconURL",
          "type_long": "docking.util.image.ToolIconURL",
          "type_short": "ToolIconURL",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToolTipText",
      "comment": "Get the tool tip text.",
      "javadoc": "Get the tool tip text.",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "launchTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "domainFile",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dragUnderFeedback",
      "comment": "Set drag feedback according to the OK parameter.",
      "javadoc": "Set drag feedback according to the OK parameter.\n@param ok true means the drop action is OK\n@param e event that has current state of drag and drop operation",
      "static": false,
      "params": [
        {
          "name": "ok",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means the drop action is OK"
        },
        {
          "name": "e",
          "type_long": "java.awt.dnd.DropTargetDragEvent",
          "type_short": "DropTargetDragEvent",
          "comment": "event that has current state of drag and drop operation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isDropOk",
      "comment": "Return true if is OK to drop the transferable at the location\n specified the event.",
      "javadoc": "Return true if is OK to drop the transferable at the location\n specified the event.\n@param e event that has current state of drag and drop operation",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.dnd.DropTargetDragEvent",
          "type_short": "DropTargetDragEvent",
          "comment": "event that has current state of drag and drop operation"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "containsSupportedDataTypes",
      "comment": "The given list must contain only valid domain files (i.e., no folders or null items)",
      "javadoc": "The given list must contain only valid domain files (i.e., no folders or null items)\n@param nodeList The list of DataTreeNode objects to validate\n@return true if \u003cb\u003eall\u003c/b\u003e items in the list are supported",
      "static": false,
      "params": [
        {
          "name": "fileList",
          "type_long": "java.util.List\u003cghidra.framework.model.DomainFile\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if all items in the list are supported"
      },
      "throws": []
    },
    {
      "name": "undoDragUnderFeedback",
      "comment": "Revert back to normal if any drag feedback was set.",
      "javadoc": "Revert back to normal if any drag feedback was set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Add the object to the droppable component. The DropTgtAdapter\n calls this method from its drop() method.",
      "javadoc": "Add the object to the droppable component. The DropTgtAdapter\n calls this method from its drop() method.\n@param obj Transferable object that is to be dropped.\n@param e has current state of drop operation\n@param f represents the opaque concept of a data format as\n would appear on a clipboard, during drag and drop.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "Transferable object that is to be dropped."
        },
        {
          "name": "event",
          "type_long": "java.awt.dnd.DropTargetDropEvent",
          "type_short": "DropTargetDropEvent",
          "comment": ""
        },
        {
          "name": "f",
          "type_long": "java.awt.datatransfer.DataFlavor",
          "type_short": "DataFlavor",
          "comment": "represents the opaque concept of a data format as\n would appear on a clipboard, during drag and drop."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showFilesNotAcceptedMessage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "domainFiles",
          "type_long": "ghidra.framework.model.DomainFile[]",
          "type_short": "ghidra.framework.model.DomainFile[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addFromToolButton",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "toolButton",
          "type_long": "ghidra.framework.main.ToolButton",
          "type_short": "ToolButton",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "connectTools",
      "comment": "Connect the tools in both directions.",
      "javadoc": "Connect the tools in both directions.",
      "static": false,
      "params": [
        {
          "name": "t1",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "t2",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "connectAll",
      "comment": "Connect all events in the connection object.",
      "javadoc": "Connect all events in the connection object.",
      "static": false,
      "params": [
        {
          "name": "tc",
          "type_long": "ghidra.framework.model.ToolConnection",
          "type_short": "ToolConnection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSupportedDataType",
      "comment": "Return true if the domain file\u0027s object class is supported by\n this tool.",
      "javadoc": "Return true if the domain file\u0027s object class is supported by\n this tool.",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVersionedObject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": ""
        },
        {
          "name": "versionNumber",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.model.DomainObject",
        "type_short": "DomainObject",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resetButtonAfterDrag",
      "comment": "Fix the button state after dragging/dropping, since this is broken in Java",
      "javadoc": "Fix the button state after dragging/dropping, since this is broken in Java",
      "static": false,
      "params": [
        {
          "name": "button",
          "type_long": "javax.swing.JButton",
          "type_short": "JButton",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dragCanceled",
      "comment": "Method called when the drag operation exits the drop target\n without dropping.",
      "javadoc": "Method called when the drag operation exits the drop target\n without dropping.",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "java.awt.dnd.DragSourceDropEvent",
          "type_short": "DragSourceDropEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isStartDragOk",
      "comment": "Return true if the object at the location in the DragGesture\n event is draggable.",
      "javadoc": "Return true if the object at the location in the DragGesture\n event is draggable.\n@param e event passed to a DragGestureListener via its\n dragGestureRecognized() method when a particular DragGestureRecognizer\n detects a platform dependent Drag and Drop action initiating\n gesture has occurred on the Component it is tracking.\n@see docking.dnd.DragGestureAdapter",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.dnd.DragGestureEvent",
          "type_short": "DragGestureEvent",
          "comment": "event passed to a DragGestureListener via its\n dragGestureRecognized() method when a particular DragGestureRecognizer\n detects a platform dependent Drag and Drop action initiating\n gesture has occurred on the Component it is tracking."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDragSourceListener",
      "comment": "Called by the DragGestureAdapter to start the drag.",
      "javadoc": "Called by the DragGestureAdapter to start the drag.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.dnd.DragSourceListener",
        "type_short": "DragSourceListener",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTransferable",
      "comment": "Get the object to transfer.",
      "javadoc": "Get the object to transfer.\n@param p location of object to transfer\n@return object to transfer",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "java.awt.Point",
          "type_short": "Point",
          "comment": "location of object to transfer"
        }
      ],
      "return": {
        "type_long": "java.awt.datatransfer.Transferable",
        "type_short": "Transferable",
        "comment": "object to transfer"
      },
      "throws": []
    },
    {
      "name": "move",
      "comment": "Do the move operation; called when the drag and drop operation\n completes.",
      "javadoc": "Do the move operation; called when the drag and drop operation\n completes.\n@see ghidra.util.bean.dnd.DragSourceAdapter#dragDropEnd",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDragAction",
      "comment": "Get the drag actions supported by this drag source:\n \n DnDConstants.ACTION_MOVE\n DnDConstants.ACTION_COPY\n DnDConstants.ACTION_COPY_OR_MOVE\n ",
      "javadoc": "Get the drag actions supported by this drag source:\n \u003cUL\u003e\n \u003cli\u003eDnDConstants.ACTION_MOVE\n \u003cli\u003eDnDConstants.ACTION_COPY\n \u003cli\u003eDnDConstants.ACTION_COPY_OR_MOVE\n \u003c/li\u003e\n@return the drag actions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the drag actions"
      },
      "throws": []
    },
    {
      "name": "setToolTemplate",
      "comment": "Set the tool template for this button.",
      "javadoc": "Set the tool template for this button.",
      "static": false,
      "params": [
        {
          "name": "template",
          "type_long": "ghidra.framework.model.ToolTemplate",
          "type_short": "ToolTemplate",
          "comment": ""
        },
        {
          "name": "icon",
          "type_long": "javax.swing.Icon",
          "type_short": "Icon",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToolTemplate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.model.ToolTemplate",
        "type_short": "ToolTemplate",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isRunningTool",
      "comment": "Return whether this tool button represents a running tool.",
      "javadoc": "Return whether this tool button represents a running tool.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "closeTool",
      "comment": "Close the running tool.",
      "javadoc": "Close the running tool.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRunningTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.plugintool.PluginTool",
        "type_short": "PluginTool",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "activateTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doLaunchTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "domainFiles",
          "type_long": "ghidra.framework.model.DomainFile[]",
          "type_short": "ghidra.framework.model.DomainFile[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "openFilesAndOpenToolAsNecessary",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "domainFiles",
          "type_long": "ghidra.framework.model.DomainFile[]",
          "type_short": "ghidra.framework.model.DomainFile[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "openFilesAndOpenToolAsNecessary",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "domainFiles",
          "type_long": "ghidra.framework.model.DomainFile[]",
          "type_short": "ghidra.framework.model.DomainFile[]",
          "comment": ""
        },
        {
          "name": "finishedCallback",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "launchToolWithAnimationAndOpenFiles",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "domainFiles",
          "type_long": "ghidra.framework.model.DomainFile[]",
          "type_short": "ghidra.framework.model.DomainFile[]",
          "comment": ""
        },
        {
          "name": "toolFrame",
          "type_long": "javax.swing.JFrame",
          "type_short": "JFrame",
          "comment": ""
        },
        {
          "name": "toolGlassPane",
          "type_long": "ghidra.util.bean.GGlassPane",
          "type_short": "GGlassPane",
          "comment": ""
        },
        {
          "name": "finishedCallback",
          "type_long": "java.lang.Runnable",
          "type_short": "Runnable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "openDomainFiles",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "domainFiles",
          "type_long": "ghidra.framework.model.DomainFile[]",
          "type_short": "ghidra.framework.model.DomainFile[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setUpDragDrop",
      "comment": "Set up the objects so we can be a drag and drop site.",
      "javadoc": "Set up the objects so we can be a drag and drop site.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generateIcon",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.Icon",
        "type_short": "Icon",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setHelpLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "anchorTag",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleMouseReleased",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
