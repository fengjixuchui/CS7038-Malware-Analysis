{
  "name": "FVSlider",
  "comment": " Custom slider that acts as the scroll bar for the FVTable. This slider listens for\n changes to the viewport and updates its position accordingly.\n \n Q. Why not just use the standard javax.swing.JScrollBar that comes with the JScrollPane?\n \n A. It\u0027s because we are viewing only a portion of the total file at any given time.\n    If we used the standard scroll mechanism, it would size itself and its viewport\n    according to that subset of the total file, while we want it to reflect the file\n    in its entirety.\n \n Q. Why extend a JSlider for this custom scroll bar instead of a JScrollBar?\n \n A. The JSlider is much easier to customize, specifically when trying to adjust\n    the size of the slider thumb. Functionally they are both acceptable for our\n    purposes, but the ease of using the slider wins out.\n ",
  "javadoc": "\u003cpre\u003e Custom slider that acts as the scroll bar for the FVTable. This slider listens for\n changes to the viewport and updates its position accordingly.\n \n Q. Why not just use the standard {@link javax.swing.JScrollBar JScrollBar} that comes with the {@link JScrollPane}?\n \n A. It\u0027s because we are viewing only a portion of the total file at any given time.\n    If we used the standard scroll mechanism, it would size itself and its viewport\n    according to that subset of the total file, while we want it to reflect the file\n    in its entirety.\n \n Q. Why extend a {@link JSlider} for this custom scroll bar instead of a {@link JScrollBar}?\n \n A. The {@link JSlider} is much easier to customize, specifically when trying to adjust\n    the size of the slider thumb. Functionally they are both acceptable for our\n    purposes, but the ease of using the slider wins out.\n \u003c/pre\u003e",
  "static": false,
  "implements": [
    "javax.swing.event.ChangeListener",
    "java.awt.event.MouseMotionListener",
    "java.awt.event.MouseListener"
  ],
  "extends": "javax.swing.JSlider",
  "fields": [
    {
      "name": "mouseDown",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "viewportUtility",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.ui.ViewportUtility",
      "type_short": "ViewportUtility",
      "constant_value": null
    },
    {
      "name": "model",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.model.ChunkModel",
      "type_short": "ChunkModel",
      "constant_value": null
    },
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.model.ChunkReader",
      "type_short": "ChunkReader",
      "constant_value": null
    },
    {
      "name": "eventListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.event.FVEventListener",
      "type_short": "FVEventListener",
      "constant_value": null
    },
    {
      "name": "previousSliderValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor. Builds the UI elements and establishes event listeners.",
      "javadoc": "Constructor. Builds the UI elements and establishes event listeners.\n@param scrollPane\n@param table\n@param viewportUtility\n@param model\n@param reader\n@param eventListener",
      "static": false,
      "params": [
        {
          "name": "scrollPane",
          "type_long": "javax.swing.JScrollPane",
          "type_short": "JScrollPane",
          "comment": ""
        },
        {
          "name": "table",
          "type_long": "ghidra.framework.main.logviewer.ui.FVTable",
          "type_short": "FVTable",
          "comment": ""
        },
        {
          "name": "viewportUtility",
          "type_long": "ghidra.framework.main.logviewer.ui.ViewportUtility",
          "type_short": "ViewportUtility",
          "comment": ""
        },
        {
          "name": "model",
          "type_long": "ghidra.framework.main.logviewer.model.ChunkModel",
          "type_short": "ChunkModel",
          "comment": ""
        },
        {
          "name": "reader",
          "type_long": "ghidra.framework.main.logviewer.model.ChunkReader",
          "type_short": "ChunkReader",
          "comment": ""
        },
        {
          "name": "eventListener",
          "type_long": "ghidra.framework.main.logviewer.event.FVEventListener",
          "type_short": "FVEventListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setValue",
      "comment": "Sets the value of the slider based on the given file position.",
      "javadoc": "Sets the value of the slider based on the given file position.\n@param filePos",
      "static": false,
      "params": [
        {
          "name": "filePos",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMaximum",
      "comment": "Sets the maximum slider position given the size of the file. If the file position is\n greater than the maximum size of an integer, we just set it to that maximum size.",
      "javadoc": "Sets the maximum slider position given the size of the file. If the file position is\n greater than the maximum size of an integer, we just set it to that maximum size.\n@param fileSize",
      "static": false,
      "params": [
        {
          "name": "fileSize",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "syncWithViewport",
      "comment": "Updates the slider so it is in sync with the current position of the viewport. \n \n Note that this is only done if the mouse is NOT down; if it is, it means the user is \n moving the thumb and we should do nothing.",
      "javadoc": "Updates the slider so it is in sync with the current position of the viewport. \n \n Note that this is only done if the mouse is NOT down; if it is, it means the user is \n moving the thumb and we should do nothing.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "stateChanged",
      "comment": "Invoked when the slider value has changed. When this happens we need to update the \n viewport to match, but ONLY if this event is triggered as a result of the user \n manually moving the slider (and not as a result of the slider being moved programmatically\n in response to a viewport change).",
      "javadoc": "Invoked when the slider value has changed. When this happens we need to update the \n viewport to match, but ONLY if this event is triggered as a result of the user \n manually moving the slider (and not as a result of the slider being moved programmatically\n in response to a viewport change).",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "javax.swing.event.ChangeEvent",
          "type_short": "ChangeEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mouseDragged",
      "comment": "MOUSE EVENTS\n \n We need to set the mouseDown attribute so we only initiate a viewport\n update if the slider is moving in response to user action on the slider.",
      "javadoc": "MOUSE EVENTS\n \n We need to set the mouseDown attribute so we only initiate a viewport\n update if the slider is moving in response to user action on the slider.",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mouseMoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mouseClicked",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mousePressed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mouseReleased",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mouseEntered",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mouseExited",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFilePosition",
      "comment": "Returns the file position (long) for the given slider position (int). This is calculated by\n computing the position of the slider as a percentage of its maximum, and applying the same\n to the file position (relative to the total file size).",
      "javadoc": "Returns the file position (long) for the given slider position (int). This is calculated by\n computing the position of the slider as a percentage of its maximum, and applying the same\n to the file position (relative to the total file size).\n@param sliderPos\n@return ",
      "static": false,
      "params": [
        {
          "name": "sliderPos",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSliderPosition",
      "comment": "Returns the slider position for the given file pointer position. This is calculated by\n computing the position of the file pointer as a percentage of the total file size, and \n applying the same to the slider (relative to its maximum value).",
      "javadoc": "Returns the slider position for the given file pointer position. This is calculated by\n computing the position of the file pointer as a percentage of the total file size, and \n applying the same to the slider (relative to its maximum value).\n@param filePos\n@return ",
      "static": false,
      "params": [
        {
          "name": "filePos",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createKeyBindings",
      "comment": "Create key bindings for the slider. These are also captured by the FVTable, but if\n focus is on this slider we still want these keys to work.  \n \n We have to capture the following:\n   - arrow down\n   - arrow up\n   - page down\n   - page up\n   - home\n   - end\n   - Ctrl-C (Command-C for mac) for copy\n   - Ctrl-A (Command-A for mac) for select all\n   - Shift pressed \n   - Shift released",
      "javadoc": "Create key bindings for the slider. These are also captured by the {@link FVTable}, but if\n focus is on this slider we still want these keys to work.  \n \n We have to capture the following:\n   - arrow down\n   - arrow up\n   - page down\n   - page up\n   - home\n   - end\n   - Ctrl-C (Command-C for mac) for copy\n   - Ctrl-A (Command-A for mac) for select all\n   - Shift pressed \n   - Shift released\n@param table\n@param model\n@param reader\n@param eventListener",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "ghidra.framework.main.logviewer.ui.FVTable",
          "type_short": "FVTable",
          "comment": ""
        },
        {
          "name": "model",
          "type_long": "ghidra.framework.main.logviewer.model.ChunkModel",
          "type_short": "ChunkModel",
          "comment": ""
        },
        {
          "name": "reader",
          "type_long": "ghidra.framework.main.logviewer.model.ChunkReader",
          "type_short": "ChunkReader",
          "comment": ""
        },
        {
          "name": "eventListener",
          "type_long": "ghidra.framework.main.logviewer.event.FVEventListener",
          "type_short": "FVEventListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
