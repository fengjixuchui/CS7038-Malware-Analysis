{
  "name": "FVTable",
  "comment": "The table that backs the FileViewer window. It is responsible for displaying\n Chunk instances.",
  "javadoc": "The table that backs the {@link FileViewer} window. It is responsible for displaying\n {@link Chunk} instances.",
  "static": false,
  "implements": [
    "java.awt.event.MouseMotionListener",
    "java.awt.event.MouseListener"
  ],
  "extends": "docking.widgets.table.GTable",
  "fields": [
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.model.ChunkReader",
      "type_short": "ChunkReader",
      "constant_value": null
    },
    {
      "name": "viewportUtility",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.ui.ViewportUtility",
      "type_short": "ViewportUtility",
      "constant_value": null
    },
    {
      "name": "model",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.model.ChunkModel",
      "type_short": "ChunkModel",
      "constant_value": null
    },
    {
      "name": "shiftDown",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "mouseDragging",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "eventListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.event.FVEventListener",
      "type_short": "FVEventListener",
      "constant_value": null
    },
    {
      "name": "dateCol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.table.TableColumn",
      "type_short": "TableColumn",
      "constant_value": null
    },
    {
      "name": "timeCol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.table.TableColumn",
      "type_short": "TableColumn",
      "constant_value": null
    },
    {
      "name": "levelCol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.table.TableColumn",
      "type_short": "TableColumn",
      "constant_value": null
    },
    {
      "name": "messageCol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.table.TableColumn",
      "type_short": "TableColumn",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Ctor.",
      "javadoc": "Ctor.\n@param reader\n@param viewportUtility\n@param model\n@param eventListener",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.framework.main.logviewer.model.ChunkReader",
          "type_short": "ChunkReader",
          "comment": ""
        },
        {
          "name": "viewportUtility",
          "type_long": "ghidra.framework.main.logviewer.ui.ViewportUtility",
          "type_short": "ViewportUtility",
          "comment": ""
        },
        {
          "name": "model",
          "type_long": "ghidra.framework.main.logviewer.model.ChunkModel",
          "type_short": "ChunkModel",
          "comment": ""
        },
        {
          "name": "eventListener",
          "type_long": "ghidra.framework.main.logviewer.event.FVEventListener",
          "type_short": "FVEventListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "prepareRenderer",
      "comment": "Adjusts the column widths to be at least as wide as the widest cell.  This is required\n for horizontal scrolling to work properly.",
      "javadoc": "Adjusts the column widths to be at least as wide as the widest cell.  This is required\n for horizontal scrolling to work properly.",
      "static": false,
      "params": [
        {
          "name": "renderer",
          "type_long": "javax.swing.table.TableCellRenderer",
          "type_short": "TableCellRenderer",
          "comment": ""
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Component",
        "type_short": "Component",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setShiftDown",
      "comment": "Sets the status of the shift key.",
      "javadoc": "Sets the status of the shift key.\n@param isDown",
      "static": false,
      "params": [
        {
          "name": "isDown",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMouseDragging",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "isMouseDragging",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addRow",
      "comment": "Adds the given row to the table.",
      "javadoc": "Adds the given row to the table.\n@param row",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addRows",
      "comment": "Adds the list of rows to the table.",
      "javadoc": "Adds the list of rows to the table.\n@param rows",
      "static": false,
      "params": [
        {
          "name": "rows",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreSelection",
      "comment": "Set any previously selected table rows to a selected state. This should be called any \n time a chunk is read into the table. \n \n Note: This is critically important when the user has selected a row, then scrolled such that \n the selected row is in a chunk that has been swapped out and is no longer in the table. When\n that chunk is scrolled back into view, this will restore the selection.\n \n Note2: If there is a range of selected values and the table is somewhere in the middle of\n that range, just select the entire table.",
      "javadoc": "Set any previously selected table rows to a selected state. This should be called any \n time a chunk is read into the table. \n \n Note: This is critically important when the user has selected a row, then scrolled such that \n the selected row is in a chunk that has been swapped out and is no longer in the table. When\n that chunk is scrolled back into view, this will restore the selection.\n \n Note2: If there is a range of selected values and the table is somewhere in the middle of\n that range, just select the entire table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Removes all rows from the table model.",
      "javadoc": "Removes all rows from the table model.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "incrementAndAddSelection",
      "comment": "Increments the selection by the given number of rows, but doesn\u0027t affect any previously\n selected rows. This is typically called when selecting while dragging.",
      "javadoc": "Increments the selection by the given number of rows, but doesn\u0027t affect any previously\n selected rows. This is typically called when selecting while dragging.\n@param rows",
      "static": false,
      "params": [
        {
          "name": "rows",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "incrementSelection",
      "comment": "Moves the table selection down by the number of rows specified, ensuring that selection\n does not go beyond the bounds of the file.",
      "javadoc": "Moves the table selection down by the number of rows specified, ensuring that selection\n does not go beyond the bounds of the file.\n@param rows",
      "static": false,
      "params": [
        {
          "name": "rows",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decrementAndAddSelection",
      "comment": "Decrements the selection by the number of rows given, and adds the new rows to the \n selection.",
      "javadoc": "Decrements the selection by the number of rows given, and adds the new rows to the \n selection.\n@param rows",
      "static": false,
      "params": [
        {
          "name": "rows",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decrementSelection",
      "comment": "Moves the table selection up by the number of rows specified, ensuring that selection\n does not go beyond the beginning of the file.",
      "javadoc": "Moves the table selection up by the number of rows specified, ensuring that selection\n does not go beyond the beginning of the file.\n@param rows",
      "static": false,
      "params": [
        {
          "name": "rows",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "valueChanged",
      "comment": "Invoked when a new row has been selected in the table. Update our chunk model to \n reflect as much.",
      "javadoc": "Invoked when a new row has been selected in the table. Update our chunk model to \n reflect as much.\n@param e",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "javax.swing.event.ListSelectionEvent",
          "type_short": "ListSelectionEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createKeyBindings",
      "comment": "Create key bindings for the table. We have to capture the following:\n   - arrow down\n   - arrow up\n   - page down\n   - page up\n   - home\n   - end\n   - Ctrl-C (Command-C for mac) for copy\n   - Ctrl-A (Command-A for mac) for select all\n   - Shift pressed \n   - Shift released",
      "javadoc": "Create key bindings for the table. We have to capture the following:\n   - arrow down\n   - arrow up\n   - page down\n   - page up\n   - home\n   - end\n   - Ctrl-C (Command-C for mac) for copy\n   - Ctrl-A (Command-A for mac) for select all\n   - Shift pressed \n   - Shift released\n@param reader\n@param model\n@param eventListener",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.framework.main.logviewer.model.ChunkReader",
          "type_short": "ChunkReader",
          "comment": ""
        },
        {
          "name": "model",
          "type_long": "ghidra.framework.main.logviewer.model.ChunkModel",
          "type_short": "ChunkModel",
          "comment": ""
        },
        {
          "name": "eventListener",
          "type_long": "ghidra.framework.main.logviewer.event.FVEventListener",
          "type_short": "FVEventListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkBounds",
      "comment": "Returns true if the rows provided are both in the table.",
      "javadoc": "Returns true if the rows provided are both in the table.\n@param rowStart\n@param rowEnd\n@return ",
      "static": false,
      "params": [
        {
          "name": "rowStart",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "rowEnd",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mouseDragged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mouseMoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mouseClicked",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mousePressed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mouseReleased",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mouseEntered",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mouseExited",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
