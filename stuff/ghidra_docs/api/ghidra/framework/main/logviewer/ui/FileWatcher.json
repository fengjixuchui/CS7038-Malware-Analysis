{
  "name": "FileWatcher",
  "comment": "The FileWatcher *watches* a single file and fires a change notification whenever the file \n is modified. A couple notes:\n \n 1. To keep from processing change events every time the file is modified, which may be\n    too frequent and cause processing issues, we use a simple polling mechanism.  \n    \n 2. Changes in the file are identified by inspecting the File#lastModified()\n    timestamp. \n \n 3. The WatchService mechanism is not being used here since we cannot specify a \n    polling rate.",
  "javadoc": "The FileWatcher *watches* a single file and fires a change notification whenever the file \n is modified. A couple notes:\n \n 1. To keep from processing change events every time the file is modified, which may be\n    too frequent and cause processing issues, we use a simple polling mechanism.  \n    \n 2. Changes in the file are identified by inspecting the {@link File#lastModified()}\n    timestamp. \n \n 3. The {@link WatchService} mechanism is not being used here since we cannot specify a \n    polling rate.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "timestamp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "POLLING_INTERVAL_SEC",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "POLLING_DELAY_SEC",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "file",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.File",
      "type_short": "File",
      "constant_value": null
    },
    {
      "name": "future",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.concurrent.ScheduledFuture\u003c?\u003e",
      "type_short": "ScheduledFuture",
      "constant_value": null
    },
    {
      "name": "executor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.concurrent.ScheduledExecutorService",
      "type_short": "ScheduledExecutorService",
      "constant_value": null
    },
    {
      "name": "eventListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.event.FVEventListener",
      "type_short": "FVEventListener",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor. Creates a new Executor that will inspect the file at regular \n intervals.  Users must call #start() to begin polling.",
      "javadoc": "Constructor. Creates a new {@link Executor} that will inspect the file at regular \n intervals.  Users must call {@link #start()} to begin polling.\n@param file the file to be watched",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to be watched"
        },
        {
          "name": "eventListener",
          "type_long": "ghidra.framework.main.logviewer.event.FVEventListener",
          "type_short": "FVEventListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "stop",
      "comment": "Suspends the timer so it will no longer poll. This does not perform a shutdown, so the\n future may be scheduled again.",
      "javadoc": "Suspends the timer so it will no longer poll. This does not perform a shutdown, so the\n future may be scheduled again.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "start",
      "comment": "Starts polling, or resumes polling if previously stopped.",
      "javadoc": "Starts polling, or resumes polling if previously stopped.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isFileUpdated",
      "comment": "Checks the timestamp of the given file to see if it has changed.  If so, returns true.",
      "javadoc": "Checks the timestamp of the given file to see if it has changed.  If so, returns true.\n@param file\n@return ",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
