{
  "name": "ViewportUtility",
  "comment": "Utility class for managing the viewport in the FVTable. This viewport must be \n adjusted manually whenever Chunk objects are added to or removed from to the view, \n or whenever the FVSlider is moved.",
  "javadoc": "Utility class for managing the viewport in the {@link FVTable}. This viewport must be \n adjusted manually whenever {@link Chunk} objects are added to or removed from to the view, \n or whenever the {@link FVSlider} is moved.",
  "static": false,
  "implements": [
    "java.util.Observer"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "savePosition",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "viewport",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JViewport",
      "type_short": "JViewport",
      "constant_value": null
    },
    {
      "name": "table",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.ui.FVTable",
      "type_short": "FVTable",
      "constant_value": null
    },
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.model.ChunkReader",
      "type_short": "ChunkReader",
      "constant_value": null
    },
    {
      "name": "model",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.model.ChunkModel",
      "type_short": "ChunkModel",
      "constant_value": null
    },
    {
      "name": "eventListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.event.FVEventListener",
      "type_short": "FVEventListener",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "eventListener",
          "type_long": "ghidra.framework.main.logviewer.event.FVEventListener",
          "type_short": "FVEventListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setViewport",
      "comment": "",
      "javadoc": "@param viewport",
      "static": false,
      "params": [
        {
          "name": "viewport",
          "type_long": "javax.swing.JViewport",
          "type_short": "JViewport",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTable",
      "comment": "",
      "javadoc": "@param table",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "ghidra.framework.main.logviewer.ui.FVTable",
          "type_short": "FVTable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setReader",
      "comment": "",
      "javadoc": "@param reader",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.framework.main.logviewer.model.ChunkReader",
          "type_short": "ChunkReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setModel",
      "comment": "",
      "javadoc": "@param model",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "ghidra.framework.main.logviewer.model.ChunkModel",
          "type_short": "ChunkModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHeight",
      "comment": "Returns the height (in pixels) of the viewport.",
      "javadoc": "Returns the height (in pixels) of the viewport.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getViewportPositionAsRow",
      "comment": "Returns the table row associated with the top of the viewport.",
      "javadoc": "Returns the table row associated with the top of the viewport.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInViewport",
      "comment": "Returns true if the given row is in the viewport.",
      "javadoc": "Returns true if the given row is in the viewport.\n@param row\n@return ",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveViewportToBottom",
      "comment": "Snaps the viewport to the bottom of the table.",
      "javadoc": "Snaps the viewport to the bottom of the table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveViewportToTop",
      "comment": "Snaps the viewport to the top of the table.",
      "javadoc": "Snaps the viewport to the top of the table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumRowsInViewport",
      "comment": "Returns the number of rows that are visible in the viewport.",
      "javadoc": "Returns the number of rows that are visible in the viewport.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "scrollViewportTo",
      "comment": "Moves the viewport (top) to the given row in the current view.",
      "javadoc": "Moves the viewport (top) to the given row in the current view.\n@param row",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveViewportUp",
      "comment": "Moves the viewport up the number of rows specified. If moving up puts he view above \n the bounds of the first-visible chunk, load a previous chunk.",
      "javadoc": "Moves the viewport up the number of rows specified. If moving up puts he view above \n the bounds of the first-visible chunk, load a previous chunk.\n@param rows\n@param selection",
      "static": false,
      "params": [
        {
          "name": "rows",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "selection",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveViewportDown",
      "comment": "Moves the viewport down the number of rows specified. If moving down puts he view below \n the bounds of the first-visible chunk, load the next chunk.",
      "javadoc": "Moves the viewport down the number of rows specified. If moving down puts he view below \n the bounds of the first-visible chunk, load the next chunk.\n@param rows\n@param selection",
      "static": false,
      "params": [
        {
          "name": "rows",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "selection",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateSelectionToViewportTop",
      "comment": "Sets the first row in the viewport to be the start of the current selection range.  The \n end of the selection range remains untouched.",
      "javadoc": "Sets the first row in the viewport to be the start of the current selection range.  The \n end of the selection range remains untouched.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateSelectionToViewportBottom",
      "comment": "Sets the last row in the viewport to be the end of the current selection range.  The \n start of the selection range remains untouched.",
      "javadoc": "Sets the last row in the viewport to be the end of the current selection range.  The \n start of the selection range remains untouched.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPosition",
      "comment": "Sets the viewport to the given position, and fires off an event to notify any\n subscribers.",
      "javadoc": "Sets the viewport to the given position, and fires off an event to notify any\n subscribers.\n@param position",
      "static": false,
      "params": [
        {
          "name": "position",
          "type_long": "java.awt.Point",
          "type_short": "Point",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getViewportOffset",
      "comment": "Returns how many rows the given row is above or below the current viewport.",
      "javadoc": "Returns how many rows the given row is above or below the current viewport.\n@param row\n@return negative value if above the top of the viewport, positive value if below the bottom\n         of the viewport, 0 if the line is already in the viewport.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "negative value if above the top of the viewport, positive value if below the bottom\n         of the viewport, 0 if the line is already in the viewport."
      },
      "throws": []
    },
    {
      "name": "update",
      "comment": "",
      "javadoc": "@param o\n@param arg",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "java.util.Observable",
          "type_short": "Observable",
          "comment": ""
        },
        {
          "name": "arg",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleFVEvent",
      "comment": "Processes events received via the FVEvent mechanism.",
      "javadoc": "Processes events received via the {@link FVEvent} mechanism.\n@param event the event type received",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "ghidra.framework.main.logviewer.event.FVEvent",
          "type_short": "FVEvent",
          "comment": "the event type received"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isStateValid",
      "comment": "Returns true if all necessary state objects have been set.",
      "javadoc": "Returns true if all necessary state objects have been set.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
