{
  "name": "FVEvent",
  "comment": "Custom events to be used in conjunction with the FVEventListener module. Users should\n construct an event, then fire it using FVEventListener#send(FVEvent).\n \n Two items are passed along with each event:\n \t- The #eventType attribute specifies the event that is being fired.\n \t- The #arg is a generic object and can be populated with whatever is appropriate for the\n associated event. It\u0027s up to the receiver to understand how to parse it.",
  "javadoc": "Custom events to be used in conjunction with the {@link FVEventListener} module. Users should\n construct an event, then fire it using {@link FVEventListener#send(FVEvent)}.\n \n Two items are passed along with each event:\n \t- The {@link #eventType} attribute specifies the event that is being fired.\n \t- The {@link #arg} is a generic object and can be populated with whatever is appropriate for the\n associated event. It\u0027s up to the receiver to understand how to parse it.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "eventType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.event.FVEvent.EventType",
      "type_short": "EventType",
      "constant_value": null
    },
    {
      "name": "arg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Object",
      "type_short": "Object",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@param eventType\n@param arg",
      "static": false,
      "params": [
        {
          "name": "eventType",
          "type_long": "ghidra.framework.main.logviewer.event.FVEvent.EventType",
          "type_short": "EventType",
          "comment": ""
        },
        {
          "name": "arg",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
