{
  "name": "ReverseLineReader",
  "comment": "Reads in a single line of text from a given input file, in reverse order. \n \n CONOPS:\n \t1. Start at a given position in the file and read BUFFER_SIZE bytes into a byte array\n  2. From the end of the array, read a character\n  3. If the character represents a newline (or carriage return), the line is finished, so return.\n  4. If not, continue reading.",
  "javadoc": "Reads in a single line of text from a given input file, in reverse order. \n \n CONOPS:\n \t1. Start at a given position in the file and read BUFFER_SIZE bytes into a byte array\n  2. From the end of the array, read a character\n  3. If the character represents a newline (or carriage return), the line is finished, so return.\n  4. If not, continue reading.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "BUFFER_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8192"
    },
    {
      "name": "encoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "baos",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.ByteArrayOutputStream",
      "type_short": "ByteArrayOutputStream",
      "constant_value": null
    },
    {
      "name": "raf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.RandomAccessFile",
      "type_short": "RandomAccessFile",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@param encoding\n@param raf\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "encoding",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "raf",
          "type_long": "java.io.RandomAccessFile",
          "type_short": "RandomAccessFile",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setFilePos",
      "comment": "Moves the file pointer to the given byte location.",
      "javadoc": "Moves the file pointer to the given byte location.\n@param position",
      "static": false,
      "params": [
        {
          "name": "position",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readLine",
      "comment": "Reads a single line from the current file pointer position, in reverse.  To do this we do\n the following:\n \n 1. Read a \u0027large enough\u0027 number of bytes into a buffer (enough to guarantee a full line of\n    text.\n 2. Move backwards through the bytes just read until a newline or carriage return is found.\n 3. Throw away the rest of the bytes and return the line found.",
      "javadoc": "Reads a single line from the current file pointer position, in reverse.  To do this we do\n the following:\n \n 1. Read a \u0027large enough\u0027 number of bytes into a buffer (enough to guarantee a full line of\n    text.\n 2. Move backwards through the bytes just read until a newline or carriage return is found.\n 3. Throw away the rest of the bytes and return the line found.\n@return \n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "bufToString",
      "comment": "Converts the contents of the output stream to a string.",
      "javadoc": "Converts the contents of the output stream to a string.\n@return \n@throws UnsupportedEncodingException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.UnsupportedEncodingException",
          "type_short": "UnsupportedEncodingException",
          "comment": ""
        }
      ]
    }
  ]
}
