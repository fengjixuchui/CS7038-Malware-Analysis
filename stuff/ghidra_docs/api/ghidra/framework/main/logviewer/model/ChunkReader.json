{
  "name": "ChunkReader",
  "comment": "This class handles reading data from the input file, in the form of Chunk objects.  Each\n chunk is stored in the ChunkModel and represents a single block of text that is \n displayed in the FVTable.",
  "javadoc": "This class handles reading data from the input file, in the form of {@link Chunk} objects.  Each\n chunk is stored in the {@link ChunkModel} and represents a single block of text that is \n displayed in the {@link FVTable}.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "raf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.RandomAccessFile",
      "type_short": "RandomAccessFile",
      "constant_value": null
    },
    {
      "name": "reverser",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.model.ReverseLineReader",
      "type_short": "ReverseLineReader",
      "constant_value": null
    },
    {
      "name": "model",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.main.logviewer.model.ChunkModel",
      "type_short": "ChunkModel",
      "constant_value": null
    },
    {
      "name": "file",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.File",
      "type_short": "File",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@param file\n@param model\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "model",
          "type_long": "ghidra.framework.main.logviewer.model.ChunkModel",
          "type_short": "ChunkModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFileSize",
      "comment": "Returns the number of bytes in the input file.",
      "javadoc": "Returns the number of bytes in the input file.\n@return number of bytes\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "number of bytes"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFile",
      "comment": "Returns the file being read.",
      "javadoc": "Returns the file being read.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "reload",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readLastChunk",
      "comment": "Reads one chunk from the end of the file. This is useful when scrolling to the bottom of\n the viewport.",
      "javadoc": "Reads one chunk from the end of the file. This is useful when scrolling to the bottom of\n the viewport.\n@return the last chunk, or an empty list\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "the last chunk, or an empty list"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readPreviousChunk",
      "comment": "Reads the chunk immediately before the first visible one.",
      "javadoc": "Reads the chunk immediately before the first visible one.\n@return the previous chunk, or an empty list\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "the previous chunk, or an empty list"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readNextChunkFrom",
      "comment": "Reads a chunk of data from the given location in the file.  To ensure we\u0027re always reading\n full lines, take the given start position and move forward to the next full line before\n reading.",
      "javadoc": "Reads a chunk of data from the given location in the file.  To ensure we\u0027re always reading\n full lines, take the given start position and move forward to the next full line before\n reading.\n@param startByte the position to start reading from\n@return the lines of text read\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "startByte",
          "type_long": "long",
          "type_short": "long",
          "comment": "the position to start reading from"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "the lines of text read"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readBytes",
      "comment": "Reads all bytes from the given byte to the end byte. If the amount of bytes to be read is\n greater than the size of an INT, we will have to read this in several chunks, hence the\n need to return a list of arrays, and not just a single byte array.",
      "javadoc": "Reads all bytes from the given byte to the end byte. If the amount of bytes to be read is\n greater than the size of an INT, we will have to read this in several chunks, hence the\n need to return a list of arrays, and not just a single byte array.\n@param startByte\n@param endByte\n@return a map of all the bytes read in (index 0 is first chunk, 1 is next, etc...).\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "startByte",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "endByte",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cbyte[]\u003e",
        "type_short": "List",
        "comment": "a map of all the bytes read in (index 0 is first chunk, 1 is next, etc...)."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readNextChunk",
      "comment": "Reads the next chunk in the file past the last one specified in the ChunkModel.",
      "javadoc": "Reads the next chunk in the file past the last one specified in the {@link ChunkModel}.\n@return the lines of text read\n@throws FileNotFoundException\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "the lines of text read"
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readChunk",
      "comment": "Reads a single chunk of data from the input file. The start point of the read is wherever\n the #raf is currently pointing.",
      "javadoc": "Reads a single chunk of data from the input file. The start point of the read is wherever\n the {@link #raf} is currently pointing.\n@param startByte the byte in the file at which to start reading.\n@return the lines of text read\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "startByte",
          "type_long": "long",
          "type_short": "long",
          "comment": "the byte in the file at which to start reading."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "the lines of text read"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readChunkInReverse",
      "comment": "Reads in a chunk from the current file pointer location, backwards.",
      "javadoc": "Reads in a chunk from the current file pointer location, backwards.\n@param startByte the start byte from which to read\n@return the lines of text read\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "startByte",
          "type_long": "long",
          "type_short": "long",
          "comment": "the start byte from which to read"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "the lines of text read"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addChunkToModel",
      "comment": "Adds the given chunk to the model.",
      "javadoc": "Adds the given chunk to the model.\n@param chunk the chunk to add\n@param lines the lines included in the chunk\n@param startByte the start byte within the file this chunk represents\n@param endByte the end byte within the file this chunk represents\n@param addToFront if true, adds the chunk to the front of the chunk list",
      "static": false,
      "params": [
        {
          "name": "chunk",
          "type_long": "ghidra.framework.main.logviewer.model.Chunk",
          "type_short": "Chunk",
          "comment": "the chunk to add"
        },
        {
          "name": "lines",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": "the lines included in the chunk"
        },
        {
          "name": "startByte",
          "type_long": "long",
          "type_short": "long",
          "comment": "the start byte within the file this chunk represents"
        },
        {
          "name": "endByte",
          "type_long": "long",
          "type_short": "long",
          "comment": "the end byte within the file this chunk represents"
        },
        {
          "name": "addToFront",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, adds the chunk to the front of the chunk list"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStartOfNextLine",
      "comment": "Returns the start of the next line after the given byte. To do this, simply read \n backwards from the given point until a newline or carriage return is found.",
      "javadoc": "Returns the start of the next line after the given byte. To do this, simply read \n backwards from the given point until a newline or carriage return is found.\n@param startByte\n@return \n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "startByte",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
