{
  "name": "ProjectDataPasteAction",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.framework.main.projectdata.actions.ProjectDataCopyCutBaseAction",
  "fields": [
    {
      "name": "icon",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "group",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "actionPerformed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.framework.main.datatree.FrontEndProjectTreeContext",
          "type_short": "FrontEndProjectTreeContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEnabledForContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.framework.main.datatree.FrontEndProjectTreeContext",
          "type_short": "FrontEndProjectTreeContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isAddToPopup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.framework.main.datatree.FrontEndProjectTreeContext",
          "type_short": "FrontEndProjectTreeContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFolderForNode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "node",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.main.datatree.DomainFolderNode",
        "type_short": "DomainFolderNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkNodeForPaste",
      "comment": "Check the destination node for whether clipboard data can be pasted there.",
      "javadoc": "Check the destination node for whether clipboard data can be pasted there.\n@param destNode destination for paste operation\n@return true if least one node can be pasted at destNode",
      "static": false,
      "params": [
        {
          "name": "destNode",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": "destination for paste operation"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if least one node can be pasted at destNode"
      },
      "throws": []
    },
    {
      "name": "paste",
      "comment": "Process a \"paste\" request from a menu action.",
      "javadoc": "Process a \"paste\" request from a menu action.",
      "static": false,
      "params": [
        {
          "name": "tree",
          "type_long": "ghidra.framework.main.datatree.DataTree",
          "type_short": "DataTree",
          "comment": ""
        },
        {
          "name": "folderNode",
          "type_long": "ghidra.framework.main.datatree.DomainFolderNode",
          "type_short": "DomainFolderNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkPasteList",
      "comment": "Update the given list of nodes to paste if the corresponding file or\n folder cannot be pasted; remove it from the list and update the\n clipboard with the new list.",
      "javadoc": "Update the given list of nodes to paste if the corresponding file or\n folder cannot be pasted; remove it from the list and update the\n clipboard with the new list.\n@param destNode destination node\n@param list list of nodes to paste\n@param isCutOperation true if this is a cut vs copy; for cut, files\n cannot be in use",
      "static": false,
      "params": [
        {
          "name": "tree",
          "type_long": "ghidra.framework.main.datatree.DataTree",
          "type_short": "DataTree",
          "comment": ""
        },
        {
          "name": "destNode",
          "type_long": "docking.widgets.tree.GTreeNode",
          "type_short": "GTreeNode",
          "comment": "destination node"
        },
        {
          "name": "list",
          "type_long": "java.util.List\u003cdocking.widgets.tree.GTreeNode\u003e",
          "type_short": "List",
          "comment": "list of nodes to paste"
        },
        {
          "name": "isCutOperation",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if this is a cut vs copy; for cut, files\n cannot be in use"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeDecendantsFromList",
      "comment": "Remove descendant nodes from the list; having the parent node\n is enough when folders are getting pasted.",
      "javadoc": "Remove descendant nodes from the list; having the parent node\n is enough when folders are getting pasted.",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cdocking.widgets.tree.GTreeNode\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCutOperation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cdocking.widgets.tree.GTreeNode\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
