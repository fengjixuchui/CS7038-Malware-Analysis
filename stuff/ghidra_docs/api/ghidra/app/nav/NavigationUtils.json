{
  "name": "NavigationUtils",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getActiveNavigatable",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "ghidra.app.nav.Navigatable",
        "type_short": "Navigatable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSelection",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "navigatable",
          "type_long": "ghidra.app.nav.Navigatable",
          "type_short": "Navigatable",
          "comment": ""
        },
        {
          "name": "selection",
          "type_long": "ghidra.program.util.ProgramSelection",
          "type_short": "ProgramSelection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExternalLinkageAddresses",
      "comment": "Locate all possible linkage addresses which correspond to the specified external address.\n This will correspond to either a generic reference type (DATA or EXTERNAL_REF) on a pointer\n or a thunk to the external location.  Both pointers and thunk contructs are utilized to \n perform dynamic linking between programs and external libraries they reference.  These\n linkage locations facilitate the function calls into any dynamically\n linked external program (i.e., library).",
      "javadoc": "Locate all possible linkage addresses which correspond to the specified external address.\n This will correspond to either a generic reference type (DATA or EXTERNAL_REF) on a pointer\n or a thunk to the external location.  Both pointers and thunk contructs are utilized to \n perform dynamic linking between programs and external libraries they reference.  These\n linkage locations facilitate the function calls into any dynamically\n linked external program (i.e., library).\n@param program\n@param externalAddr external location address\n@return array of possible linkage addresses found",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "externalAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "external location address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address[]",
        "type_short": "ghidra.program.model.address.Address[]",
        "comment": "array of possible linkage addresses found"
      },
      "throws": []
    },
    {
      "name": "findExternalThunkLinkages",
      "comment": "Locate direct thunks to the external function identified by externalAddr.  Only consider\n those thunks whose function body does not refer to an address contained within the linkageSet\n provided.",
      "javadoc": "Locate direct thunks to the external function identified by externalAddr.  Only consider\n those thunks whose function body does not refer to an address contained within the linkageSet\n provided.\n@param program\n@param externalAddr external location address\n@param linkageSet set of previously discovered pointer linkages to the external\n location.  This set will be updated with any thunk linkage locations found.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "externalAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "external location address"
        },
        {
          "name": "linkageSet",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": "set of previously discovered pointer linkages to the external\n location.  This set will be updated with any thunk linkage locations found."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasLinkageReference",
      "comment": "Determine if the specified thunkFunction\u0027s body contains any references to addresses \n contained within the linkageSet provided.",
      "javadoc": "Determine if the specified thunkFunction\u0027s body contains any references to addresses \n contained within the linkageSet provided.\n@param thunkFunction possible linkage thunk\n@param linkageSet set of previously discovered linkage pointer locations\n@return true if function contains one or more references to addresses contained\n within the linkageSet of addresses, else false",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "thunkFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "possible linkage thunk"
        },
        {
          "name": "linkageSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "set of previously discovered linkage pointer locations"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if function contains one or more references to addresses contained\n within the linkageSet of addresses, else false"
      },
      "throws": []
    }
  ]
}
