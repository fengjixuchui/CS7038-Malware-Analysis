{
  "name": "Match",
  "comment": "Match maintains information about a single match between two programs.\n The match can consist of either bytes or code units.",
  "javadoc": "Match maintains information about a single match between two programs.\n The match can consist of either bytes or code units.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "thisBeginning",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "otherBeginning",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "thisMatch",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Object\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "otherMatch",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Object\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "totalLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@param thisBeginning The start Address of the match in the program\n from which the matches are being found.\n@param otherBeginning The start Address of the match in the program\n to which the matches are being found.\n@param bytes the bytes which make up this match.\n@param length the length of the bytes array.",
      "static": false,
      "params": [
        {
          "name": "thisBeginning",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The start Address of the match in the program\n from which the matches are being found."
        },
        {
          "name": "otherBeginning",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The start Address of the match in the program\n to which the matches are being found."
        },
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the bytes which make up this match."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the length of the bytes array."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@param thisBeginning The start Address of the match in the program\n from which the matches are being found.\n@param otherBeginning The start Address of the match in the program\n to which the matches are being found.\n@param codeUnits The CodeUnits which make up the match in this\n Program.\n@param otherUnits The CodeUnits which make up this match in the \n other program. Note, the code units need no match up byte for \n byte.\n@param length The length of the CodeUnit arrays.",
      "static": false,
      "params": [
        {
          "name": "thisBeginning",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The start Address of the match in the program\n from which the matches are being found."
        },
        {
          "name": "otherBeginning",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The start Address of the match in the program\n to which the matches are being found."
        },
        {
          "name": "codeUnits",
          "type_long": "ghidra.program.model.listing.CodeUnit[]",
          "type_short": "ghidra.program.model.listing.CodeUnit[]",
          "comment": "The CodeUnits which make up the match in this\n Program."
        },
        {
          "name": "otherUnits",
          "type_long": "ghidra.program.model.listing.CodeUnit[]",
          "type_short": "ghidra.program.model.listing.CodeUnit[]",
          "comment": "The CodeUnits which make up this match in the \n other program. Note, the code units need no match up byte for \n byte."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "The length of the CodeUnit arrays."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "continueMatch",
      "comment": "",
      "javadoc": "@param b Continue the match by adding the additional byte b.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "Continue the match by adding the additional byte b."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "continueMatch",
      "comment": "",
      "javadoc": "@param cu The CodeUnit which extends the match in \u0027this\u0027 program.\n@param otherUnit The CodeUnit which extends the match in \u0027the other\u0027\n program.",
      "static": false,
      "params": [
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": "The CodeUnit which extends the match in \u0027this\u0027 program."
        },
        {
          "name": "otherUnit",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": "The CodeUnit which extends the match in \u0027the other\u0027\n program."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "@return The number of items that make up this match.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The number of items that make up this match."
      },
      "throws": []
    },
    {
      "name": "totalLength",
      "comment": "",
      "javadoc": "@return The total number of bytes that make up this match.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The total number of bytes that make up this match."
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOtherBeginning",
      "comment": "",
      "javadoc": "@return The Address that starts the match in the other program.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "The Address that starts the match in the other program."
      },
      "throws": []
    },
    {
      "name": "getThisBeginning",
      "comment": "",
      "javadoc": "@return The Address that starts the match in this program.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "The Address that starts the match in this program."
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "",
      "javadoc": "@return array containing the objects that make up the match \n in this program.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Object[]",
        "type_short": "java.lang.Object[]",
        "comment": "array containing the objects that make up the match \n in this program."
      },
      "throws": []
    },
    {
      "name": "getOtherBytes",
      "comment": "",
      "javadoc": "@return array containing the objects that make up the match \n in the other program.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Object[]",
        "type_short": "java.lang.Object[]",
        "comment": "array containing the objects that make up the match \n in the other program."
      },
      "throws": []
    },
    {
      "name": "printMatch",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "m",
          "type_long": "ghidra.app.plugin.match.Match",
          "type_short": "Match",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "expectedAddressForNextMatch",
      "comment": "",
      "javadoc": "@param baseLength the minimum number of items which make up a match.\n There are different values for instruction and byte matches. This\n value should either be NaiveMatchPlugin.MATCH_LENGTH_FOR_INSTRUCTIONS\n or NaiveMatchPlugin.MATCH_LENGTH_FOR_BYTES which can be found by\n calling getMatchLengthForInstructions() or getMatchLengthForBytes().\n@return The Address at which a continuing byte or code unit would\n be expected to be found in the other program.",
      "static": false,
      "params": [
        {
          "name": "baseLength",
          "type_long": "int",
          "type_short": "int",
          "comment": "the minimum number of items which make up a match.\n There are different values for instruction and byte matches. This\n value should either be NaiveMatchPlugin.MATCH_LENGTH_FOR_INSTRUCTIONS\n or NaiveMatchPlugin.MATCH_LENGTH_FOR_BYTES which can be found by\n calling getMatchLengthForInstructions() or getMatchLengthForBytes()."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "The Address at which a continuing byte or code unit would\n be expected to be found in the other program."
      },
      "throws": []
    }
  ]
}
