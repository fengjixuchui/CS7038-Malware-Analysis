{
  "name": "PcodeEmit",
  "comment": "Class for converting ConstructTpl into a pcode ops given\n a particular InstructionContext",
  "javadoc": "Class for converting ConstructTpl into a pcode ops given\n a particular InstructionContext",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "override",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.PcodeOverride",
      "type_short": "PcodeOverride",
      "constant_value": null
    },
    {
      "name": "parsercontext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.SleighParserContext",
      "type_short": "SleighParserContext",
      "constant_value": null
    },
    {
      "name": "instcontext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.InstructionContext",
      "type_short": "InstructionContext",
      "constant_value": null
    },
    {
      "name": "walker",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.ParserWalker",
      "type_short": "ParserWalker",
      "constant_value": null
    },
    {
      "name": "flowOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.FlowOverride",
      "type_short": "FlowOverride",
      "constant_value": null
    },
    {
      "name": "startAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "defaultFallAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "fallOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "fallOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "uniqueFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.UniqueAddressFactory",
      "type_short": "UniqueAddressFactory",
      "constant_value": null
    },
    {
      "name": "outcache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData",
      "type_short": "VarnodeData",
      "constant_value": null
    },
    {
      "name": "incache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData[]",
      "type_short": "ghidra.app.plugin.processors.sleigh.VarnodeData[]",
      "constant_value": null
    },
    {
      "name": "dyncache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData[]",
      "type_short": "ghidra.app.plugin.processors.sleigh.VarnodeData[]",
      "constant_value": null
    },
    {
      "name": "labeldef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Integer\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "numOps",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "labelbase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "labelcount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "inDelaySlot",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "const_space",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    },
    {
      "name": "uniq_space",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    },
    {
      "name": "uniquemask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "uniqueoffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "overlayspace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Pcode emitter constructor for empty or unimiplemented instructions",
      "javadoc": "Pcode emitter constructor for empty or unimiplemented instructions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Pcode emitter constructor",
      "javadoc": "Pcode emitter constructor\n@param walk is the ParserWalker state for the tree that needs to be walked to generate pcode\n@param ictx is the InstructionContext interface to resolve requests for context\n@param fallOffset default instruction fall offset (i.e., instruction length including delay slotted instructions)\n@param override required if pcode overrides are to be utilized\n@param uniqueFactory required when override specified or if overlay normalization is required",
      "static": false,
      "params": [
        {
          "name": "walk",
          "type_long": "ghidra.app.plugin.processors.sleigh.ParserWalker",
          "type_short": "ParserWalker",
          "comment": "is the ParserWalker state for the tree that needs to be walked to generate pcode"
        },
        {
          "name": "ictx",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "is the InstructionContext interface to resolve requests for context"
        },
        {
          "name": "fallOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "default instruction fall offset (i.e., instruction length including delay slotted instructions)"
        },
        {
          "name": "override",
          "type_long": "ghidra.program.model.pcode.PcodeOverride",
          "type_short": "PcodeOverride",
          "comment": "required if pcode overrides are to be utilized"
        },
        {
          "name": "uniqueFactory",
          "type_long": "ghidra.program.model.address.UniqueAddressFactory",
          "type_short": "UniqueAddressFactory",
          "comment": "required when override specified or if overlay normalization is required"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setUniqueOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStartAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFallOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWalker",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.processors.sleigh.ParserWalker",
        "type_short": "ParserWalker",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLabel",
      "comment": "Make a note of the current op index, and associate\n it with the label index from the label template,\n so that the label can later be resolved to a relative\n address by resolveRelatives",
      "javadoc": "Make a note of the current op index, and associate\n it with the label index from the label template,\n so that the label can later be resolved to a relative\n address by resolveRelatives\n@param op \u003d the label template op",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.OpTpl",
          "type_short": "OpTpl",
          "comment": "\u003d the label template op"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addLabelRef",
      "comment": "Make a note of a reference to a label within a\n BRANCH or CBRANCH op, so that it can later be resolved\n to a relative address.  We assume that the varnode\n reference is the first input to the op in question,\n so all we need to store is the index of the op",
      "javadoc": "Make a note of a reference to a label within a\n BRANCH or CBRANCH op, so that it can later be resolved\n to a relative address.  We assume that the varnode\n reference is the first input to the op in question,\n so all we need to store is the index of the op",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveRelatives",
      "comment": "Now that we have seen all label templates and references\n convert the collected references into full relative\n addresses",
      "javadoc": "Now that we have seen all label templates and references\n convert the collected references into full relative\n addresses",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveFinalFallthrough",
      "comment": "Now that all pcode has been generated, including special\n overrides and injections, ensure that a fallthrough override\n adds a final branch to prevent dropping out the bottom.  This\n addresses both fall-through cases:\n \n last pcode op has fall-through\n internal label used to branch beyond last pcode op\n ",
      "javadoc": "Now that all pcode has been generated, including special\n overrides and injections, ensure that a fallthrough override\n adds a final branch to prevent dropping out the bottom.  This\n addresses both fall-through cases:\n \u003cul\u003e\n \u003cli\u003elast pcode op has fall-through\u003c/li\u003e\n \u003cli\u003einternal label used to branch beyond last pcode op\u003c/li\u003e\n \u003c/ul\u003e",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dump",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instrAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "opcode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "in",
          "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData[]",
          "type_short": "ghidra.app.plugin.processors.sleigh.VarnodeData[]",
          "comment": ""
        },
        {
          "name": "isize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "out",
          "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData",
          "type_short": "VarnodeData",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpBranchOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opt",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.OpTpl",
          "type_short": "OpTpl",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpNullReturn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpCallOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opt",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.OpTpl",
          "type_short": "OpTpl",
          "comment": ""
        },
        {
          "name": "returnAfterCall",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpReturnOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opt",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.OpTpl",
          "type_short": "OpTpl",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpFlowOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opt",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.OpTpl",
          "type_short": "OpTpl",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generateLocation",
      "comment": "Convert a varnode template into a concrete varnode",
      "javadoc": "Convert a varnode template into a concrete varnode\n@param vntpl is the varnode template\n@param vn is the resulting concrete varnode",
      "static": false,
      "params": [
        {
          "name": "vntpl",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.VarnodeTpl",
          "type_short": "VarnodeTpl",
          "comment": "is the varnode template"
        },
        {
          "name": "vn",
          "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData",
          "type_short": "VarnodeData",
          "comment": "is the resulting concrete varnode"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generatePointer",
      "comment": "Generate a concrete pointer varnode for a dynamic varnode template",
      "javadoc": "Generate a concrete pointer varnode for a dynamic varnode template\n@param vntpl is the VarnodeTpl\n@param vn is the resulting concrete varnode\n@return the AddressSpace into which the pointer points",
      "static": false,
      "params": [
        {
          "name": "vntpl",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.VarnodeTpl",
          "type_short": "VarnodeTpl",
          "comment": "is the VarnodeTpl"
        },
        {
          "name": "vn",
          "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData",
          "type_short": "VarnodeData",
          "comment": "is the resulting concrete varnode"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": "the AddressSpace into which the pointer points"
      },
      "throws": []
    },
    {
      "name": "dump",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opt",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.OpTpl",
          "type_short": "OpTpl",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "appendBuild",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "bld",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.OpTpl",
          "type_short": "OpTpl",
          "comment": ""
        },
        {
          "name": "secnum",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.UnknownInstructionException",
          "type_short": "UnknownInstructionException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "delaySlot",
      "comment": "Insert the p-code of instruction(s) in the delay slot at this point in the p-code generation for the current instruction",
      "javadoc": "Insert the p-code of instruction(s) in the delay slot at this point in the p-code generation for the current instruction\n@param op is the DELAYSLOT directive\n@throws UnknownInstructionException\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.OpTpl",
          "type_short": "OpTpl",
          "comment": "is the DELAYSLOT directive"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.UnknownInstructionException",
          "type_short": "UnknownInstructionException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "appendCrossBuild",
      "comment": "Inject the p-code for a different instruction at this point in the p-code generation for current instruction",
      "javadoc": "Inject the p-code for a different instruction at this point in the p-code generation for current instruction\n@param bld is the CROSSBUILD directive containing the section number and address parameters\n@param secnum is the section number of the section containing the CROSSBUILD directive\n@throws UnknownInstructionException\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "bld",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.OpTpl",
          "type_short": "OpTpl",
          "comment": "is the CROSSBUILD directive containing the section number and address parameters"
        },
        {
          "name": "secnum",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the section number of the section containing the CROSSBUILD directive"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.UnknownInstructionException",
          "type_short": "UnknownInstructionException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "build",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "construct",
          "type_long": "ghidra.app.plugin.processors.sleigh.template.ConstructTpl",
          "type_short": "ConstructTpl",
          "comment": ""
        },
        {
          "name": "secnum",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.UnknownInstructionException",
          "type_short": "UnknownInstructionException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "buildEmpty",
      "comment": "Build a named p-code section of a constructor that contains only implied BUILD directives",
      "javadoc": "Build a named p-code section of a constructor that contains only implied BUILD directives\n@param ct Constructor to build section for\n@param secnum index of the section to be built\n@throws MemoryAccessException\n@throws UnknownInstructionException",
      "static": false,
      "params": [
        {
          "name": "ct",
          "type_long": "ghidra.app.plugin.processors.sleigh.Constructor",
          "type_short": "Constructor",
          "comment": "Constructor to build section for"
        },
        {
          "name": "secnum",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of the section to be built"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.UnknownInstructionException",
          "type_short": "UnknownInstructionException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "checkOverlays",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opcode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "in",
          "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData[]",
          "type_short": "ghidra.app.plugin.processors.sleigh.VarnodeData[]",
          "comment": ""
        },
        {
          "name": "isize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "out",
          "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData",
          "type_short": "VarnodeData",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkOverrides",
      "comment": "Applies opcode-specific overrides",
      "javadoc": "Applies opcode-specific overrides\n@param opcode opcode of instruction\n@param in input varnodes\n@return opcode of modified instruction",
      "static": false,
      "params": [
        {
          "name": "opcode",
          "type_long": "int",
          "type_short": "int",
          "comment": "opcode of instruction"
        },
        {
          "name": "in",
          "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData[]",
          "type_short": "ghidra.app.plugin.processors.sleigh.VarnodeData[]",
          "comment": "input varnodes"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "opcode of modified instruction"
      },
      "throws": []
    },
    {
      "name": "actualOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData",
          "type_short": "VarnodeData",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
