{
  "name": "PcodeEmitObjects",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.processors.sleigh.PcodeEmit",
  "fields": [
    {
      "name": "oplist",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.program.model.pcode.PcodeOp\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "labelref",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Integer\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Pcode emitter constructor for producing PcodeOp objects for unimplemented, snippets or empty responses\n when #getFallOffset() will not be used.",
      "javadoc": "Pcode emitter constructor for producing PcodeOp objects for unimplemented, snippets or empty responses\n when {@link #getFallOffset()} will not be used.\n@param walk state of the ParserContext from which to generate p-code",
      "static": false,
      "params": [
        {
          "name": "walk",
          "type_long": "ghidra.app.plugin.processors.sleigh.ParserWalker",
          "type_short": "ParserWalker",
          "comment": "state of the ParserContext from which to generate p-code"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Pcode emitter constructor for producing PcodeOp objects for unimplemented, snippets or empty responses.",
      "javadoc": "Pcode emitter constructor for producing PcodeOp objects for unimplemented, snippets or empty responses.\n@param walk state of the ParserContext from which to generate p-code\n@param fallOffset default fall-through offset (i.e., the full length \n of instruction including delay-sloted instructions)",
      "static": false,
      "params": [
        {
          "name": "walk",
          "type_long": "ghidra.app.plugin.processors.sleigh.ParserWalker",
          "type_short": "ParserWalker",
          "comment": "state of the ParserContext from which to generate p-code"
        },
        {
          "name": "fallOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "default fall-through offset (i.e., the full length \n of instruction including delay-sloted instructions)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@param walk state of the ParserContext from which to generate p-code\n@param ictx is the InstructionContext used to resolve delayslot and crossbuild directives\n@param fallOffset default instruction fall offset (i.e., instruction length including delay slotted instructions)\n@param override required if pcode overrides are to be utilized\n@param uniqueFactory required when override specified or if overlay normalization is required",
      "static": false,
      "params": [
        {
          "name": "walk",
          "type_long": "ghidra.app.plugin.processors.sleigh.ParserWalker",
          "type_short": "ParserWalker",
          "comment": "state of the ParserContext from which to generate p-code"
        },
        {
          "name": "ictx",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": "is the InstructionContext used to resolve delayslot and crossbuild directives"
        },
        {
          "name": "fallOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "default instruction fall offset (i.e., instruction length including delay slotted instructions)"
        },
        {
          "name": "override",
          "type_long": "ghidra.program.model.pcode.PcodeOverride",
          "type_short": "PcodeOverride",
          "comment": "required if pcode overrides are to be utilized"
        },
        {
          "name": "uniqueFactory",
          "type_long": "ghidra.program.model.address.UniqueAddressFactory",
          "type_short": "UniqueAddressFactory",
          "comment": "required when override specified or if overlay normalization is required"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPcodeOp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp[]",
        "type_short": "ghidra.program.model.pcode.PcodeOp[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveRelatives",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addLabelRef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dump",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "instrAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "opcode",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "in",
          "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData[]",
          "type_short": "ghidra.app.plugin.processors.sleigh.VarnodeData[]",
          "comment": ""
        },
        {
          "name": "isize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "out",
          "type_long": "ghidra.app.plugin.processors.sleigh.VarnodeData",
          "type_short": "VarnodeData",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
