{
  "name": "SleighParserContext",
  "comment": "All the recovered context for a single instruction\n The main data structure is the tree of constructors and operands",
  "javadoc": "All the recovered context for a single instruction\n The main data structure is the tree of constructors and operands",
  "static": false,
  "implements": [
    "ghidra.program.model.lang.ParserContext"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "memBuffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.mem.MemBuffer",
      "type_short": "MemBuffer",
      "constant_value": null
    },
    {
      "name": "addr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "nextInstrAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "refAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "destAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "prototype",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.SleighInstructionPrototype",
      "type_short": "SleighInstructionPrototype",
      "constant_value": null
    },
    {
      "name": "constantSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    },
    {
      "name": "handleMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cghidra.app.plugin.processors.sleigh.ConstructState,ghidra.app.plugin.processors.sleigh.FixedHandle\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "contextcommit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.plugin.processors.sleigh.SleighParserContext.ContextSet\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "context",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "memBuf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "prototype",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighInstructionPrototype",
          "type_short": "SleighInstructionPrototype",
          "comment": ""
        },
        {
          "name": "processorContext",
          "type_long": "ghidra.program.model.lang.ProcessorContextView",
          "type_short": "ProcessorContextView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrototype",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.processors.sleigh.SleighInstructionPrototype",
        "type_short": "SleighInstructionPrototype",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for building precompiled templates",
      "javadoc": "Constructor for building precompiled templates\n@param aAddr \u003d address to which \u0027inst_start\u0027 resolves\n@param nAddr \u003d address to which \u0027inst_next\u0027 resolves\n@param rAddr \u003d special address associated with original call\n@param dAddr \u003d destination address of original call being replaced",
      "static": false,
      "params": [
        {
          "name": "aAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "\u003d address to which \u0027inst_start\u0027 resolves"
        },
        {
          "name": "nAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "\u003d address to which \u0027inst_next\u0027 resolves"
        },
        {
          "name": "rAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "\u003d special address associated with original call"
        },
        {
          "name": "dAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "\u003d destination address of original call being replaced"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContextCommits",
      "comment": "",
      "javadoc": "@return context commits for normal instruction parse.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.app.plugin.processors.sleigh.SleighParserContext.ContextSet\u003e",
        "type_short": "Iterator",
        "comment": "context commits for normal instruction parse."
      },
      "throws": []
    },
    {
      "name": "addCommit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "point",
          "type_long": "ghidra.app.plugin.processors.sleigh.ConstructState",
          "type_short": "ConstructState",
          "comment": ""
        },
        {
          "name": "sym",
          "type_long": "ghidra.app.plugin.processors.sleigh.symbol.TripleSymbol",
          "type_short": "TripleSymbol",
          "comment": ""
        },
        {
          "name": "num",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "mask",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyCommits",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ctx",
          "type_long": "ghidra.program.model.lang.ProcessorContext",
          "type_short": "ProcessorContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFixedHandle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "constructState",
          "type_long": "ghidra.app.plugin.processors.sleigh.ConstructState",
          "type_short": "ConstructState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.processors.sleigh.FixedHandle",
        "type_short": "FixedHandle",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNaddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDelaySlotLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "delayByteLength",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCurSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConstSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMemBuffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.mem.MemBuffer",
        "type_short": "MemBuffer",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInstructionBytes",
      "comment": "Get bytes from the instruction stream into an int\n (packed in big endian format).  Uninitialized or \n undefined memory will return zero byte values.",
      "javadoc": "Get bytes from the instruction stream into an int\n (packed in big endian format).  Uninitialized or \n undefined memory will return zero byte values.\n@param offset offset relative start of this context\n@param bytestart pattern byte offset relative to specified context offset\n@param size\n@return requested byte-range value\n@throws MemoryAccessException if no bytes are available at first byte when (offset+bytestart\u003d\u003d0).",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset relative start of this context"
        },
        {
          "name": "bytestart",
          "type_long": "int",
          "type_short": "int",
          "comment": "pattern byte offset relative to specified context offset"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "requested byte-range value"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if no bytes are available at first byte when (offset+bytestart\u003d\u003d0)."
        }
      ]
    },
    {
      "name": "getInstructionBits",
      "comment": "Get bits from the instruction stream into an int\n (packed in big endian format).  Uninitialized or \n undefined memory will return zero bit values.",
      "javadoc": "Get bits from the instruction stream into an int\n (packed in big endian format).  Uninitialized or \n undefined memory will return zero bit values.\n@param offset offset relative start of this context\n@param startbit\n@param size\n@return requested bit-range value\n@throws MemoryAccessException if no bytes are available at first byte when (offset+bytestart/8\u003d\u003d0).",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset relative start of this context"
        },
        {
          "name": "startbit",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "requested bit-range value"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if no bytes are available at first byte when (offset+bytestart/8\u003d\u003d0)."
        }
      ]
    },
    {
      "name": "getContextBytes",
      "comment": "Get bytes from context into an int",
      "javadoc": "Get bytes from context into an int\n@param bytestart\n@param bytesize number of bytes (range: 1 - 4)\n@return ",
      "static": false,
      "params": [
        {
          "name": "bytestart",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bytesize",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes (range: 1 - 4)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContextBytes",
      "comment": "Get full set of context bytes.  Sleigh only supports context\n which is a multiple of 4-bytes (i.e., size of int)",
      "javadoc": "Get full set of context bytes.  Sleigh only supports context\n which is a multiple of 4-bytes (i.e., size of int)\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContextBits",
      "comment": "Get bits from context into an int",
      "javadoc": "Get bits from context into an int\n@param startbit\n@param bitsize number of bits (range: 1 - 32)\n@return ",
      "static": false,
      "params": [
        {
          "name": "startbit",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bitsize",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bits (range: 1 - 32)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setContextWord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "val",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "mask",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRootState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.processors.sleigh.ConstructState",
        "type_short": "ConstructState",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValid",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFlowRefAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFlowDestAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    }
  ]
}
