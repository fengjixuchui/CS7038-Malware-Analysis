{
  "name": "SleighDebugLogger",
  "comment": "SleighDebugLogger provides the ability to obtain detailed instruction\n parse details.",
  "javadoc": "\u003ccode\u003eSleighDebugLogger\u003c/code\u003e provides the ability to obtain detailed instruction\n parse details.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "buffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.StringBuffer",
      "type_short": "StringBuffer",
      "constant_value": null
    },
    {
      "name": "indentLevel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "indent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "atLineStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "contextBaseRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Register",
      "type_short": "Register",
      "constant_value": null
    },
    {
      "name": "buf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.mem.MemBuffer",
      "type_short": "MemBuffer",
      "constant_value": null
    },
    {
      "name": "mode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.SleighDebugLogger.SleighDebugMode",
      "type_short": "SleighDebugMode",
      "constant_value": null
    },
    {
      "name": "mainGroup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.SleighDebugLogger.PatternGroup",
      "type_short": "PatternGroup",
      "constant_value": null
    },
    {
      "name": "mainSubGroups",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.app.plugin.processors.sleigh.SleighDebugLogger.PatternGroup\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "currentGroup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.SleighDebugLogger.PatternGroup",
      "type_short": "PatternGroup",
      "constant_value": null
    },
    {
      "name": "currentDepth",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "instructionMask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "operandMasks",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cbyte[]\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "context",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.ProcessorContextView",
      "type_short": "ProcessorContextView",
      "constant_value": null
    },
    {
      "name": "prototype",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.SleighInstructionPrototype",
      "type_short": "SleighInstructionPrototype",
      "constant_value": null
    },
    {
      "name": "instrContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.InstructionContext",
      "type_short": "InstructionContext",
      "constant_value": null
    },
    {
      "name": "bytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Performs a parse debug at the specified memory location within program.",
      "javadoc": "Performs a parse debug at the specified memory location within program.\n@param buf the memory buffer\n@param context the processor context\n@param language the sleigh language\n@param mode the sleigh debug mode\n@throws IllegalArgumentException if program language provider is not Sleigh",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "the memory buffer"
        },
        {
          "name": "context",
          "type_long": "ghidra.program.model.lang.ProcessorContextView",
          "type_short": "ProcessorContextView",
          "comment": "the processor context"
        },
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "the sleigh language"
        },
        {
          "name": "mode",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighDebugLogger.SleighDebugMode",
          "type_short": "SleighDebugMode",
          "comment": "the sleigh debug mode"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Performs a parse debug at the specified memory location within program.",
      "javadoc": "Performs a parse debug at the specified memory location within program.\n@param program the program the memory location is found in\n@param start the start address of the memory location\n@param mode the sleigh debug mode\n@throws IllegalArgumentException if program language provider is not Sleigh",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program the memory location is found in"
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the memory location"
        },
        {
          "name": "mode",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighDebugLogger.SleighDebugMode",
          "type_short": "SleighDebugMode",
          "comment": "the sleigh debug mode"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isVerboseEnabled",
      "comment": "",
      "javadoc": "@return true if constructed for verbose logging",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if constructed for verbose logging"
      },
      "throws": []
    },
    {
      "name": "parseFailed",
      "comment": "",
      "javadoc": "@return true if a parse error was detected, otherwise false is returned.\n The methods getMaskedBytes() and getInstructionMask() should\n only be invoked if this method returns false.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a parse error was detected, otherwise false is returned.\n The methods getMaskedBytes() and getInstructionMask() should\n only be invoked if this method returns false."
      },
      "throws": []
    },
    {
      "name": "getConstructorLineNumbers",
      "comment": "Get list of constructor names with line numbers.\n Any debug mode may be used.",
      "javadoc": "Get list of constructor names with line numbers.\n Any debug mode may be used.\n@return list",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "list"
      },
      "throws": []
    },
    {
      "name": "dumpSymbolLineNumbers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "walker",
          "type_long": "ghidra.app.plugin.processors.sleigh.ParserWalker",
          "type_short": "ParserWalker",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.lang.UnknownInstructionException",
          "type_short": "UnknownInstructionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "append",
      "comment": "Append a binary formatted integer value with the specified range of bits\n bracketed to the log.  A -1 value for both startbit and bitcount disable the\n bit range bracketing. \n NOTE: Method has no affect unless constructed with VERBOSE logging mode.",
      "javadoc": "Append a binary formatted integer value with the specified range of bits\n bracketed to the log.  A -1 value for both startbit and bitcount disable the\n bit range bracketing. \n NOTE: Method has no affect unless constructed with VERBOSE logging mode.\n@param value integer value\n@param startbit identifies the first most-significant bit within the\n bracketed range (left-most value bit is bit-0, right-most value bit is bit-31)\n@param bitcount number of bits included within range",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "integer value"
        },
        {
          "name": "startbit",
          "type_long": "int",
          "type_short": "int",
          "comment": "identifies the first most-significant bit within the\n bracketed range (left-most value bit is bit-0, right-most value bit is bit-31)"
        },
        {
          "name": "bitcount",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bits included within range"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "append",
      "comment": "Append a binary formatted integer array with the specified range of bits\n bracketed to the log.  A -1 value for both startbit and bitcount disable the\n bit range bracketing.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.",
      "javadoc": "Append a binary formatted integer array with the specified range of bits\n bracketed to the log.  A -1 value for both startbit and bitcount disable the\n bit range bracketing.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.\n@param value integer array\n@param startbit identifies the first most-significant bit within the\n {@literal bracketed range (left-most value[0] bit is bit-0, right-most value[n] bit is bit-\u003c32(n+1)-1\u003e ).}\n@param bitcount number of bits included within range",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "integer array"
        },
        {
          "name": "startbit",
          "type_long": "int",
          "type_short": "int",
          "comment": "identifies the first most-significant bit within the\n "
        },
        {
          "name": "bitcount",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bits included within range"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "append",
      "comment": "Append a binary formatted byte array with the specified range of bits\n bracketed to the log.  A -1 value for both startbit and bitcount disable the\n bit range bracketing.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.",
      "javadoc": "Append a binary formatted byte array with the specified range of bits\n bracketed to the log.  A -1 value for both startbit and bitcount disable the\n bit range bracketing.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.\n@param value byte array\n@param startbit identifies the first most-significant bit within the\n {@literal bracketed range (left-most value[0] bit is bit-0, right-most value[n] bit is bit-\u003c8(n+1)-1\u003e ).}\n@param bitcount number of bits included within range",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array"
        },
        {
          "name": "startbit",
          "type_long": "int",
          "type_short": "int",
          "comment": "identifies the first most-significant bit within the\n "
        },
        {
          "name": "bitcount",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bits included within range"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "append",
      "comment": "Append message string to log buffer.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.",
      "javadoc": "Append message string to log buffer.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.\n@param str message string",
      "static": false,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "message string"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkLineStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "indent",
      "comment": "Shift log indent right",
      "javadoc": "Shift log indent right",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "indent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "levels",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dropIndent",
      "comment": "Shift log indent left",
      "javadoc": "Shift log indent left",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dropIndent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "levels",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIndent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Return log text",
      "javadoc": "Return log text",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpConstructor",
      "comment": "Dump constructor details to the log\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.",
      "javadoc": "Dump constructor details to the log\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.\n@param subtableName constructor name\n@param c constructor",
      "static": false,
      "params": [
        {
          "name": "subtableName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "constructor name"
        },
        {
          "name": "c",
          "type_long": "ghidra.app.plugin.processors.sleigh.Constructor",
          "type_short": "Constructor",
          "comment": "constructor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpFixedHandle",
      "comment": "Dump fixed handle associated with a constructor symbol to the log.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.",
      "javadoc": "Dump fixed handle associated with a constructor symbol to the log.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.\n@param name\n@param definingSymbol\n@param pos\n@param subState\n@param language\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "definingSymbol",
          "type_long": "ghidra.app.plugin.processors.sleigh.symbol.TripleSymbol",
          "type_short": "TripleSymbol",
          "comment": ""
        },
        {
          "name": "walker",
          "type_long": "ghidra.app.plugin.processors.sleigh.ParserWalker",
          "type_short": "ParserWalker",
          "comment": ""
        },
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "dumpPattern",
      "comment": "Dump pattern details to the log.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.",
      "javadoc": "Dump pattern details to the log.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.\n@param sym\n@param pos\n@param subState\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "sym",
          "type_long": "ghidra.app.plugin.processors.sleigh.symbol.OperandSymbol",
          "type_short": "OperandSymbol",
          "comment": ""
        },
        {
          "name": "walker",
          "type_long": "ghidra.app.plugin.processors.sleigh.ParserWalker",
          "type_short": "ParserWalker",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "dumpContextPattern",
      "comment": "Dump context pattern details.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.",
      "javadoc": "Dump context pattern details.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.\n@param maskvec\n@param valvec\n@param byteOffset\n@param pos",
      "static": false,
      "params": [
        {
          "name": "maskvec",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        },
        {
          "name": "valvec",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        },
        {
          "name": "byteOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "pos",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighParserContext",
          "type_short": "SleighParserContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpContextSet",
      "comment": "Dump transient context setting details.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.",
      "javadoc": "Dump transient context setting details.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.\n@param pos instruction context\n@param num 4-byte offset within base context register for mask and value\n@param value 4-byte context value\n@param mask 4-byte context mask",
      "static": false,
      "params": [
        {
          "name": "pos",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighParserContext",
          "type_short": "SleighParserContext",
          "comment": "instruction context"
        },
        {
          "name": "num",
          "type_long": "int",
          "type_short": "int",
          "comment": "4-byte offset within base context register for mask and value"
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "4-byte context value"
        },
        {
          "name": "mask",
          "type_long": "int",
          "type_short": "int",
          "comment": "4-byte context mask"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpGlobalSet",
      "comment": "Dump globalset details.  The target address is currently not included in the log.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.",
      "javadoc": "Dump globalset details.  The target address is currently not included in the log.\n NOTE: Method has no affect unless constructed with VERBOSE logging mode.\n@param pos\n@param state\n@param sym\n@param num\n@param mask\n@param value\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "pos",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighParserContext",
          "type_short": "SleighParserContext",
          "comment": ""
        },
        {
          "name": "state",
          "type_long": "ghidra.app.plugin.processors.sleigh.ConstructState",
          "type_short": "ConstructState",
          "comment": ""
        },
        {
          "name": "sym",
          "type_long": "ghidra.app.plugin.processors.sleigh.symbol.TripleSymbol",
          "type_short": "TripleSymbol",
          "comment": ""
        },
        {
          "name": "num",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "mask",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "dumpGlobalSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "ghidra.app.plugin.processors.sleigh.ConstructState",
          "type_short": "ConstructState",
          "comment": ""
        },
        {
          "name": "num",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "mask",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "setAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpFinalGlobalSets",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ints",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSigned",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "definingExpression",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.PatternExpression",
          "type_short": "PatternExpression",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "startPatternGroup",
      "comment": "Start new pattern group for a specific sub-table.  \n A null can correspond to a top-level constructor or \n low level complex pattern (AND, OR).  All committed unnamed groups \n with the same parent group will be combined.",
      "javadoc": "Start new pattern group for a specific sub-table.  \n A null can correspond to a top-level constructor or \n low level complex pattern (AND, OR).  All committed unnamed groups \n with the same parent group will be combined.\n@param name group name or null for unnamed group",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "group name or null for unnamed group"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "endPatternGroup",
      "comment": "Terminate the current pattern group",
      "javadoc": "Terminate the current pattern group\n@param commit if false group will be discarded, if true group will be retained",
      "static": false,
      "params": [
        {
          "name": "commit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if false group will be discarded, if true group will be retained"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addInstructionPattern",
      "comment": "Add instruction bit pattern to the current pattern group.",
      "javadoc": "Add instruction bit pattern to the current pattern group.\n@param offset base offset at which the specified maskvalue\n can be applied.\n@param maskvalue pattern mask/value",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "base offset at which the specified maskvalue\n can be applied."
        },
        {
          "name": "maskvalue",
          "type_long": "ghidra.app.plugin.processors.sleigh.pattern.PatternBlock",
          "type_short": "PatternBlock",
          "comment": "pattern mask/value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addContextPattern",
      "comment": "Add instruction context pattern to the current pattern group.",
      "javadoc": "Add instruction context pattern to the current pattern group.\n@param maskvalue pattern mask/value",
      "static": false,
      "params": [
        {
          "name": "maskvalue",
          "type_long": "ghidra.app.plugin.processors.sleigh.pattern.PatternBlock",
          "type_short": "PatternBlock",
          "comment": "pattern mask/value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildMasks",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearBits",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "destMask",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "clearSrcMask",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildOperandMask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInstructionMask",
      "comment": "Returns the instruction bit mask which identifies those bits used to uniquely identify\n the instruction (includes addressing modes, generally excludes register selector bits\n associated with attaches or immediate values used in for semantic values only).",
      "javadoc": "Returns the instruction bit mask which identifies those bits used to uniquely identify\n the instruction (includes addressing modes, generally excludes register selector bits\n associated with attaches or immediate values used in for semantic values only).\n@throws IllegalStateException if prototype parse failed\n@see #getFormattedInstructionMask(int) getFormattedInstructionMask(-1)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFormattedInstructionMask",
      "comment": "Return general/operand bit mask formatted as a String",
      "javadoc": "Return general/operand bit mask formatted as a String\n@param opIndex operand index or -1 for mnemonic mask\n@return bit mask string",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index or -1 for mnemonic mask"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "bit mask string"
      },
      "throws": []
    },
    {
      "name": "getFormattedMaskedValue",
      "comment": "Return general/operand bit values formatted as a String",
      "javadoc": "Return general/operand bit values formatted as a String\n@param opIndex operand index or -1 for mnemonic bit values\n@return bit value string",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index or -1 for mnemonic bit values"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "bit value string"
      },
      "throws": []
    },
    {
      "name": "getFormattedBytes",
      "comment": "Convenience method for formatting bytes as a bit sequence",
      "javadoc": "Convenience method for formatting bytes as a bit sequence\n@param value byte array\n@return binary formatted bytes",
      "static": true,
      "params": [
        {
          "name": "value",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "binary formatted bytes"
      },
      "throws": []
    },
    {
      "name": "getNumOperands",
      "comment": "Get the number of operands for the resulting prototype",
      "javadoc": "Get the number of operands for the resulting prototype\n@return operand count\n@throws IllegalStateException if prototype parse failed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "operand count"
      },
      "throws": []
    },
    {
      "name": "getMaskedBytes",
      "comment": "Apply an appropriate mask for the resulting instruction bytes\n to obtain the corresponding masked bytes.",
      "javadoc": "Apply an appropriate mask for the resulting instruction bytes\n to obtain the corresponding masked bytes.\n@param mask instruction, operand or similarly sized mask\n@return masked instruction bytes",
      "static": false,
      "params": [
        {
          "name": "mask",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "instruction, operand or similarly sized mask"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "masked instruction bytes"
      },
      "throws": []
    },
    {
      "name": "getOperandValueMask",
      "comment": "Get the byte value mask corresponding to the specified operand.",
      "javadoc": "Get the byte value mask corresponding to the specified operand.\n@param opIndex operand index within the instruction representation\n@return byte mask or null if operand does not have a corresponding sub-constructor or attach\n@throws IllegalStateException if prototype parse failed\n@throws IndexOutOfBoundsException if opIndex is not a valid operand index",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "operand index within the instruction representation"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "byte mask or null if operand does not have a corresponding sub-constructor or attach"
      },
      "throws": []
    },
    {
      "name": "combineOperandMask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "ghidra.app.plugin.processors.sleigh.ConstructState",
          "type_short": "ConstructState",
          "comment": ""
        },
        {
          "name": "sym",
          "type_long": "ghidra.app.plugin.processors.sleigh.symbol.OperandSymbol",
          "type_short": "OperandSymbol",
          "comment": ""
        },
        {
          "name": "mask",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "combinePatternMask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "ghidra.app.plugin.processors.sleigh.ConstructState",
          "type_short": "ConstructState",
          "comment": ""
        },
        {
          "name": "patternExpression",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.PatternExpression",
          "type_short": "PatternExpression",
          "comment": ""
        },
        {
          "name": "patternOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "mask",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "combineSymbolMask",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "constructState",
          "type_long": "ghidra.app.plugin.processors.sleigh.ConstructState",
          "type_short": "ConstructState",
          "comment": ""
        },
        {
          "name": "mask",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrototypeRepresentation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "proto",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighInstructionPrototype",
          "type_short": "SleighInstructionPrototype",
          "comment": ""
        },
        {
          "name": "instrContext",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultOperandRepresentation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "proto",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighInstructionPrototype",
          "type_short": "SleighInstructionPrototype",
          "comment": ""
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "instrContext",
          "type_long": "ghidra.program.model.lang.InstructionContext",
          "type_short": "InstructionContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
