{
  "name": "ConstructorPcodeTemplate",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "java.io.Serializable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "result",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.generic.HandleTemplate",
      "type_short": "HandleTemplate",
      "constant_value": null
    },
    {
      "name": "pcodeDirectives",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Object\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "delaySlotDepth",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "flowFlags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPcodeOpTemplate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opT",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.processors.generic.SledException",
          "type_short": "SledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "trimToSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "optimize",
      "comment": "The default pcode generated for a constructor is typically\n not very efficient.  For example, for an add instruction,\n we might generate something like\n \n tmp1 \u003d LOAD register_space register1\n tmp2 \u003d LOAD register_space register2\n tmp3 \u003d ADD tmp1 tmp2\n        STORE register_space register3 tmp3\n \n This routine marks opcodes and varnodes as potentially omitable,\n which allows us to generate much simpler pcode whenever there\n are no dynamic references involved.  In the case above we would\n replace the 4 pcode ops above with a single pcode op:\n \n register3 \u003d ADD register1 register2",
      "javadoc": "The default pcode generated for a constructor is typically\n not very efficient.  For example, for an add instruction,\n we might generate something like\n \n tmp1 \u003d LOAD register_space register1\n tmp2 \u003d LOAD register_space register2\n tmp3 \u003d ADD tmp1 tmp2\n        STORE register_space register3 tmp3\n \n This routine marks opcodes and varnodes as potentially omitable,\n which allows us to generate much simpler pcode whenever there\n are no dynamic references involved.  In the case above we would\n replace the 4 pcode ops above with a single pcode op:\n \n register3 \u003d ADD register1 register2",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustFlowFlags",
      "comment": "",
      "javadoc": "@param op",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.app.plugin.processors.generic.OpTemplate",
          "type_short": "OpTemplate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.processors.generic.SledException",
          "type_short": "SledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFlowFlags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPcode",
      "comment": "Method getPcode.  Recursive pcode generation method.",
      "javadoc": "Method getPcode.  Recursive pcode generation method.\n@param pcode - current list of pcode instructions to which we will append new instructions\n@param position\n@param off\n@param delayPcode - pcode for instruction(s) in delay slot\n@return HandleTemplate - handle for the result of this constructors pcode",
      "static": false,
      "params": [
        {
          "name": "pcode",
          "type_long": "java.util.ArrayList\u003cghidra.program.model.pcode.PcodeOp\u003e",
          "type_short": "ArrayList",
          "comment": "- current list of pcode instructions to which we will append new instructions"
        },
        {
          "name": "position",
          "type_long": "ghidra.app.plugin.processors.generic.Position",
          "type_short": "Position",
          "comment": ""
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "delayPcode",
          "type_long": "java.util.ArrayList\u003cghidra.program.model.pcode.PcodeOp\u003e",
          "type_short": "ArrayList",
          "comment": "- pcode for instruction(s) in delay slot"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.processors.generic.Handle",
        "type_short": "Handle",
        "comment": "HandleTemplate - handle for the result of this constructors pcode"
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "delaySlotDepth",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "result",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.processors.generic.HandleTemplate",
        "type_short": "HandleTemplate",
        "comment": ""
      },
      "throws": []
    }
  ]
}
