{
  "name": "UnimplementedConstructor",
  "comment": "Template for a constructor which is officially \"unimplemented\" as opposed to a\n constructor which does nothing (like a NOP). Any instruction which is \"unimplemented\"\n in this way will have its disassembly printed correctly but will be treated as an\n instruction which does nothing (and falls through) for any analysis that needs\n control-flow information or semantics. Actually anything that tries to get semantic\n information (via the getPcode call) will cause an exception to be thrown, as opposed\n to a NOP instruction which would return an empty pcode op array. The caller can then\n catch the exception and treat the instruction as special, or it can ignore the exception\n in which case the instruction behaves exactly like a NOP.",
  "javadoc": "Template for a constructor which is officially \"unimplemented\" as opposed to a\n constructor which does nothing (like a NOP). Any instruction which is \"unimplemented\"\n in this way will have its disassembly printed correctly but will be treated as an\n instruction which does nothing (and falls through) for any analysis that needs\n control-flow information or semantics. Actually anything that tries to get semantic\n information (via the getPcode call) will cause an exception to be thrown, as opposed\n to a NOP instruction which would return an empty pcode op array. The caller can then\n catch the exception and treat the instruction as special, or it can ignore the exception\n in which case the instruction behaves exactly like a NOP.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.processors.generic.ConstructorPcodeTemplate",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPcodeOpTemplate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opT",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.processors.generic.SledException",
          "type_short": "SledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getPcode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pcode",
          "type_long": "java.util.ArrayList\u003cghidra.program.model.pcode.PcodeOp\u003e",
          "type_short": "ArrayList",
          "comment": ""
        },
        {
          "name": "position",
          "type_long": "ghidra.app.plugin.processors.generic.Position",
          "type_short": "Position",
          "comment": ""
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "delayPcode",
          "type_long": "java.util.ArrayList\u003cghidra.program.model.pcode.PcodeOp\u003e",
          "type_short": "ArrayList",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.processors.generic.Handle",
        "type_short": "Handle",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotYetImplementedException",
          "type_short": "NotYetImplementedException",
          "comment": ""
        }
      ]
    }
  ]
}
