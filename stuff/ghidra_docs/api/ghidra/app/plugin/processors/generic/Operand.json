{
  "name": "Operand",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "java.io.Serializable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "dynamic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "op",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.generic.OperandValue",
      "type_short": "OperandValue",
      "constant_value": null
    },
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.generic.Offset",
      "type_short": "Offset",
      "constant_value": null
    },
    {
      "name": "handle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.generic.Handle",
      "type_short": "Handle",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "n",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "o",
          "type_long": "ghidra.app.plugin.processors.generic.OperandValue",
          "type_short": "OperandValue",
          "comment": ""
        },
        {
          "name": "off",
          "type_long": "ghidra.app.plugin.processors.generic.Offset",
          "type_short": "Offset",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "getInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.processors.generic.ConstructorInfo",
        "type_short": "ConstructorInfo",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "linkRelativeOffsets",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opHash",
          "type_long": "java.util.Hashtable\u003cjava.lang.String,ghidra.app.plugin.processors.generic.Operand\u003e",
          "type_short": "Hashtable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHandle",
      "comment": "Method getHandle.",
      "javadoc": "Method getHandle.\n@param pcode\n@param position\n@param off\n@return Handle",
      "static": false,
      "params": [
        {
          "name": "pcode",
          "type_long": "java.util.ArrayList\u003cghidra.program.model.pcode.PcodeOp\u003e",
          "type_short": "ArrayList",
          "comment": ""
        },
        {
          "name": "position",
          "type_long": "ghidra.app.plugin.processors.generic.Position",
          "type_short": "Position",
          "comment": ""
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.processors.generic.Handle",
        "type_short": "Handle",
        "comment": "Handle"
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "getHandle",
      "comment": "Returns previously computed handle for this operand.  Should not\n be called before the full version of getHandle, where Position and and\n offset are specified.",
      "javadoc": "Returns previously computed handle for this operand.  Should not\n be called before the full version of getHandle, where Position and and\n offset are specified.\n@return Handle",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.processors.generic.Handle",
        "type_short": "Handle",
        "comment": "Handle"
      },
      "throws": []
    },
    {
      "name": "getHandle",
      "comment": "Returns a handle for this operand *without* generating any pcode",
      "javadoc": "Returns a handle for this operand *without* generating any pcode\n@param position\n@param off\n@return \n@throws Exception",
      "static": false,
      "params": [
        {
          "name": "position",
          "type_long": "ghidra.app.plugin.processors.generic.Position",
          "type_short": "Position",
          "comment": ""
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.processors.generic.Handle",
        "type_short": "Handle",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "getAllHandles",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "handles",
          "type_long": "java.util.ArrayList\u003cghidra.app.plugin.processors.generic.Handle\u003e",
          "type_short": "ArrayList",
          "comment": ""
        },
        {
          "name": "position",
          "type_long": "ghidra.app.plugin.processors.generic.Position",
          "type_short": "Position",
          "comment": ""
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "getPcode",
      "comment": "Method getPcode",
      "javadoc": "Method getPcode\n@param position\n@return array of pcode ops for this operand\n@throws Exception",
      "static": false,
      "params": [
        {
          "name": "position",
          "type_long": "ghidra.app.plugin.processors.generic.Position",
          "type_short": "Position",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp[]",
        "type_short": "ghidra.program.model.pcode.PcodeOp[]",
        "comment": "array of pcode ops for this operand"
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "dynamic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "testDynamic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toList",
      "comment": "",
      "javadoc": "@see OperandValue#toList(ArrayList, Position, int)",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.ArrayList\u003cghidra.app.plugin.processors.generic.Handle\u003e",
          "type_short": "ArrayList",
          "comment": ""
        },
        {
          "name": "position",
          "type_long": "ghidra.app.plugin.processors.generic.Position",
          "type_short": "Position",
          "comment": ""
        },
        {
          "name": "off",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "getSize",
      "comment": "",
      "javadoc": "@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
