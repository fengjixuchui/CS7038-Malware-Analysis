{
  "name": "AssemblyFirstFollow",
  "comment": "A class to compute the first and follow of every non-terminal in a grammar\n \n See Alfred V. Aho, Monica S. Lam, Ravi Sethi, Jeffrey D. Ullman, Compilers: Principles,\n Techniques,  Tools. Bostom, MA: Pearson, 2007, pp. 220-2.",
  "javadoc": "A class to compute the first and follow of every non-terminal in a grammar\n \n See Alfred V. Aho, Monica S. Lam, Ravi Sethi, Jeffrey D. Ullman, \u003ci\u003eCompilers: Principles,\n Techniques, \u0026amp; Tools\u003c/i\u003e. Bostom, MA: Pearson, 2007, pp. 220-2.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "grammar",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AbstractAssemblyGrammar\u003c?,?\u003e",
      "type_short": "AbstractAssemblyGrammar",
      "constant_value": null
    },
    {
      "name": "nullable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "first",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "org.apache.commons.collections4.MultiValuedMap\u003cghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal,ghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal\u003e",
      "type_short": "MultiValuedMap",
      "constant_value": null
    },
    {
      "name": "follow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "org.apache.commons.collections4.MultiValuedMap\u003cghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal,ghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal\u003e",
      "type_short": "MultiValuedMap",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Compute the first and follow sets for every non-terminal in the given grammar",
      "javadoc": "Compute the first and follow sets for every non-terminal in the given grammar\n@param grammar the grammar",
      "static": false,
      "params": [
        {
          "name": "grammar",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AbstractAssemblyGrammar\u003c?,?\u003e",
          "type_short": "AbstractAssemblyGrammar",
          "comment": "the grammar"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "computeNullable",
      "comment": "Compute the nullable set",
      "javadoc": "Compute the nullable set",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "computeFirsts",
      "comment": "Compute the first set for each non-terminal",
      "javadoc": "Compute the first set for each non-terminal",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "computeFollows",
      "comment": "Compute the follow set for each non-terminal",
      "javadoc": "Compute the follow set for each non-terminal",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNullable",
      "comment": "Get the nullable set\n \n That is the set of all non-terminals, which through some derivation, can produce epsilon.",
      "javadoc": "Get the nullable set\n \n That is the set of all non-terminals, which through some derivation, can produce epsilon.\n@return the set",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal\u003e",
        "type_short": "Collection",
        "comment": "the set"
      },
      "throws": []
    },
    {
      "name": "getFirst",
      "comment": "Get the first set for a given non-terminal\n \n That is the set of all terminals, which through some derivation from the given non-terminal,\n can appear first in a sentential form.",
      "javadoc": "Get the first set for a given non-terminal\n \n That is the set of all terminals, which through some derivation from the given non-terminal,\n can appear first in a sentential form.\n@param nt the non-terminal\n@return the set",
      "static": false,
      "params": [
        {
          "name": "nt",
          "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal",
          "type_short": "AssemblyNonTerminal",
          "comment": "the non-terminal"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal\u003e",
        "type_short": "Collection",
        "comment": "the set"
      },
      "throws": []
    },
    {
      "name": "getFollow",
      "comment": "Get the follow set for a given non-terminal\n \n That is the set of all terminals, which through some derivation from the start symbol, can\n appear immediately after the given non-terminal in a sentential form.",
      "javadoc": "Get the follow set for a given non-terminal\n \n That is the set of all terminals, which through some derivation from the start symbol, can\n appear immediately after the given non-terminal in a sentential form.\n@param nt the non-terminal\n@return the set",
      "static": false,
      "params": [
        {
          "name": "nt",
          "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal",
          "type_short": "AssemblyNonTerminal",
          "comment": "the non-terminal"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal\u003e",
        "type_short": "Collection",
        "comment": "the set"
      },
      "throws": []
    },
    {
      "name": "print",
      "comment": "For debugging, print out the computed sets to the given stream",
      "javadoc": "For debugging, print out the computed sets to the given stream\n@param out the stream",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.io.PrintStream",
          "type_short": "PrintStream",
          "comment": "the stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
