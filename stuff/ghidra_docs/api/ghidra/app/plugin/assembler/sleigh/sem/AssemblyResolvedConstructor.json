{
  "name": "AssemblyResolvedConstructor",
  "comment": "A AssemblyResolution indicating successful application of a constructor\n \n This is almost analogous to ghidra.app.plugin.processors.sleigh.pattern.DisjointPattern, in that is joins an instruction AssemblyPatternBlock with a corresponding\n context AssemblyPatternBlock. However, this object is mutable, and it collects backfill records,\n as well as forbidden patterns.\n \n When the applied constructor is from the \"instruction\" subtable, this represents a fully-\n constructed instruction with required context. All backfill records ought to be resolved and\n applied before the final result is given to the user, i.e., passed into the\n AssemblySelector. If at any time during the resolution or backfill process, the result\n becomes confined to one of the forbidden patterns, it must be dropped, since the encoding will\n actually invoke a more specific SLEIGH constructor.",
  "javadoc": "A {@link AssemblyResolution} indicating successful application of a constructor\n \n This is almost analogous to {@link ghidra.app.plugin.processors.sleigh.pattern.DisjointPattern DisjointPattern}, in that is joins an instruction {@link AssemblyPatternBlock} with a corresponding\n context {@link AssemblyPatternBlock}. However, this object is mutable, and it collects backfill records,\n as well as forbidden patterns.\n \n When the applied constructor is from the \"instruction\" subtable, this represents a fully-\n constructed instruction with required context. All backfill records ought to be resolved and\n applied before the final result is given to the user, i.e., passed into the\n {@link AssemblySelector}. If at any time during the resolution or backfill process, the result\n becomes confined to one of the forbidden patterns, it must be dropped, since the encoding will\n actually invoke a more specific SLEIGH constructor.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution",
  "fields": [
    {
      "name": "INS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"ins:\""
    },
    {
      "name": "CTX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"ctx:\""
    },
    {
      "name": "SEP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\",\""
    },
    {
      "name": "ins",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock",
      "type_short": "AssemblyPatternBlock",
      "constant_value": null
    },
    {
      "name": "ctx",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock",
      "type_short": "AssemblyPatternBlock",
      "constant_value": null
    },
    {
      "name": "backfills",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedBackfill\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "forbids",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "pat",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.regex.Pattern",
      "type_short": "Pattern",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "computeHash",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@see AssemblyResolution#resolved(AssemblyPatternBlock, AssemblyPatternBlock, String, List)",
      "static": false,
      "params": [
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "children",
          "type_long": "java.util.List\u003c? extends ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "ins",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock",
          "type_short": "AssemblyPatternBlock",
          "comment": ""
        },
        {
          "name": "ctx",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock",
          "type_short": "AssemblyPatternBlock",
          "comment": ""
        },
        {
          "name": "backfills",
          "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedBackfill\u003e",
          "type_short": "Set",
          "comment": ""
        },
        {
          "name": "forbids",
          "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor\u003e",
          "type_short": "Set",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fromString",
      "comment": "Build a new successful SLEIGH constructor resolution from a string representation\n \n This was used primarily in testing, to specify expected results.",
      "javadoc": "Build a new successful SLEIGH constructor resolution from a string representation\n \n This was used primarily in testing, to specify expected results.\n@param str the string representation: \"{@code ins:[pattern],ctx:[pattern]}\"\n@see ghidra.util.NumericUtilities#convertHexStringToMaskedValue(AtomicLong, AtomicLong, String, int, int, String) NumericUtilities.convertHexStringToMaskedValue(AtomicLong, AtomicLong, String, int, int, String)\n@param description a description of the resolution\n@param children any children involved in the resolution\n@return the decoded resolution",
      "static": true,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string representation: \"\""
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a description of the resolution"
        },
        {
          "name": "children",
          "type_long": "java.util.List\u003cghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution\u003e",
          "type_short": "List",
          "comment": "any children involved in the resolution"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the decoded resolution"
      },
      "throws": []
    },
    {
      "name": "shift",
      "comment": "Shift the resolved instruction pattern to the right\n \n This also shifts any backfill and forbidden pattern records.",
      "javadoc": "Shift the resolved instruction pattern to the right\n \n This also shifts any backfill and forbidden pattern records.\n@param amt the number of bytes to shift.\n@return the result",
      "static": false,
      "params": [
        {
          "name": "amt",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to shift."
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the result"
      },
      "throws": []
    },
    {
      "name": "truncate",
      "comment": "Truncate (unshift) the resolved instruction pattern from the left\n \n NOTE: This drops all backfill and forbidden pattern records, since this method is typically\n       used to read token fields rather than passed around for resolution.",
      "javadoc": "Truncate (unshift) the resolved instruction pattern from the left\n \n NOTE: This drops all backfill and forbidden pattern records, since this method is typically\n       used to read token fields rather than passed around for resolution.\n@param amt the number of bytes to remove from the left\n@return the result",
      "static": false,
      "params": [
        {
          "name": "amt",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to remove from the left"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the result"
      },
      "throws": []
    },
    {
      "name": "checkNotForbidden",
      "comment": "Check if the current encoding is forbidden by one of the attached patterns\n \n The pattern become forbidden if this encoding\u0027s known bits are an overset of any forbidden\n pattern\u0027s known bits.",
      "javadoc": "Check if the current encoding is forbidden by one of the attached patterns\n \n The pattern become forbidden if this encoding\u0027s known bits are an overset of any forbidden\n pattern\u0027s known bits.\n@return false if the pattern is forbidden (and thus in error), true if permitted",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution",
        "type_short": "AssemblyResolution",
        "comment": "false if the pattern is forbidden (and thus in error), true if permitted"
      },
      "throws": []
    },
    {
      "name": "bitsEqual",
      "comment": "Check if this and another resolution have equal encodings\n \n This is like #equals(Object), but it ignores backfills records and forbidden\n patterns.",
      "javadoc": "Check if this and another resolution have equal encodings\n \n This is like {@link #equals(Object)}, but it ignores backfills records and forbidden\n patterns.\n@param that the other resolution\n@return true if both have equal encodings",
      "static": false,
      "params": [
        {
          "name": "that",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": "the other resolution"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if both have equal encodings"
      },
      "throws": []
    },
    {
      "name": "combine",
      "comment": "Combine the encodings and backfills of the given resolution into this one\n \n This combines corresponding pattern blocks (assuming they agree), collects backfill\n records, and collects forbidden patterns.",
      "javadoc": "Combine the encodings and backfills of the given resolution into this one\n \n This combines corresponding pattern blocks (assuming they agree), collects backfill\n records, and collects forbidden patterns.\n@param that the other resolution\n@return the result if successful, or null",
      "static": false,
      "params": [
        {
          "name": "that",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": "the other resolution"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the result if successful, or null"
      },
      "throws": []
    },
    {
      "name": "combineLessBackfill",
      "comment": "Combine a backfill result",
      "javadoc": "Combine a backfill result\n@param that the result from backfilling\n@param bf the resolved backfilled record\n@return the result if successful, or null\n \n When a backfill is successful, the result should be combined with the owning resolution. In\n addition, for bookkeeping\u0027s sake, the resolved record should be removed from the list of\n backfills.",
      "static": false,
      "params": [
        {
          "name": "that",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": "the result from backfilling"
        },
        {
          "name": "bf",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedBackfill",
          "type_short": "AssemblyResolvedBackfill",
          "comment": "the resolved backfilled record"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the result if successful, or null\n \n When a backfill is successful, the result should be combined with the owning resolution. In\n addition, for bookkeeping\u0027s sake, the resolved record should be removed from the list of\n backfills."
      },
      "throws": []
    },
    {
      "name": "combine",
      "comment": "Combine the given backfill record into this resolution",
      "javadoc": "Combine the given backfill record into this resolution\n@param bf the backfill record\n@return the result",
      "static": false,
      "params": [
        {
          "name": "bf",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedBackfill",
          "type_short": "AssemblyResolvedBackfill",
          "comment": "the backfill record"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the result"
      },
      "throws": []
    },
    {
      "name": "withForbids",
      "comment": "Create a new resolution from this one with the given forbidden patterns recorded",
      "javadoc": "Create a new resolution from this one with the given forbidden patterns recorded\n@param more the additional forbidden patterns to record\n@return the new resolution",
      "static": false,
      "params": [
        {
          "name": "more",
          "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor\u003e",
          "type_short": "Set",
          "comment": "the additional forbidden patterns to record"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the new resolution"
      },
      "throws": []
    },
    {
      "name": "withDescription",
      "comment": "Create a copy of this resolution with a new description",
      "javadoc": "Create a copy of this resolution with a new description\n@param desc the new description\n@return the copy",
      "static": false,
      "params": [
        {
          "name": "desc",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new description"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the copy"
      },
      "throws": []
    },
    {
      "name": "writeContextOp",
      "comment": "Encode the given value into the context block as specified by an operation",
      "javadoc": "Encode the given value into the context block as specified by an operation\n@param cop the context operation specifying the location of the value to encode\n@param val the masked value to encode\n@return the result\n \n This is the forward (as in disassembly) direction of applying context operations. The\n pattern expression is evaluated, and the result is written as specified.",
      "static": false,
      "params": [
        {
          "name": "cop",
          "type_long": "ghidra.app.plugin.processors.sleigh.ContextOp",
          "type_short": "ContextOp",
          "comment": "the context operation specifying the location of the value to encode"
        },
        {
          "name": "val",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": "the masked value to encode"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the result\n \n This is the forward (as in disassembly) direction of applying context operations. The\n pattern expression is evaluated, and the result is written as specified."
      },
      "throws": []
    },
    {
      "name": "readContextOp",
      "comment": "Decode the value from the context located where the given context operation would write\n \n This is used to read the value from the left-hand-side \"variable\" of a context operation.\n It seems backward, because it is. When assembling, the right-hand-side expression of a\n context operation must be solved. This means the \"variable\" is known from the context(s) of\n the resolved children constructors. The value read is then used as the goal in solving the\n expression.",
      "javadoc": "Decode the value from the context located where the given context operation would write\n \n This is used to read the value from the left-hand-side \"variable\" of a context operation.\n It seems backward, because it is. When assembling, the right-hand-side expression of a\n context operation must be solved. This means the \"variable\" is known from the context(s) of\n the resolved children constructors. The value read is then used as the goal in solving the\n expression.\n@param cop the context operation whose \"variable\" to read.\n@return the masked result.",
      "static": false,
      "params": [
        {
          "name": "cop",
          "type_long": "ghidra.app.plugin.processors.sleigh.ContextOp",
          "type_short": "ContextOp",
          "comment": "the context operation whose \"variable\" to read."
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
        "type_short": "MaskedLong",
        "comment": "the masked result."
      },
      "throws": []
    },
    {
      "name": "copyAppendDescription",
      "comment": "Duplicate this resolution, with additional description text appended",
      "javadoc": "Duplicate this resolution, with additional description text appended\n@param append the text to append\n@return the duplicate\n NOTE: An additional separator {@code \": \"} is inserted",
      "static": false,
      "params": [
        {
          "name": "append",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to append"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the duplicate\n NOTE: An additional separator  is inserted"
      },
      "throws": []
    },
    {
      "name": "maskOut",
      "comment": "Set all bits read by a given context operation to unknown",
      "javadoc": "Set all bits read by a given context operation to unknown\n@param cop the context operation\n@return the result\n@see AssemblyPatternBlock#maskOut(ContextOp)",
      "static": false,
      "params": [
        {
          "name": "cop",
          "type_long": "ghidra.app.plugin.processors.sleigh.ContextOp",
          "type_short": "ContextOp",
          "comment": "the context operation"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the result"
      },
      "throws": []
    },
    {
      "name": "backfill",
      "comment": "Apply as many backfill records as possible\n \n Each backfill record is resolved in turn, if the record cannot be resolved, it remains\n listed. If the record can be resolved, but it conflicts, an error record is returned. Each\n time a record is resolved and combined successfully, all remaining records are tried again.\n The result is the combined resolved backfills, with only the unresolved backfill records\n listed.",
      "javadoc": "Apply as many backfill records as possible\n \n Each backfill record is resolved in turn, if the record cannot be resolved, it remains\n listed. If the record can be resolved, but it conflicts, an error record is returned. Each\n time a record is resolved and combined successfully, all remaining records are tried again.\n The result is the combined resolved backfills, with only the unresolved backfill records\n listed.\n@param solver the solver, usually the same as the original attempt to solve.\n@param vals the values.\n@return the result, or an error.",
      "static": false,
      "params": [
        {
          "name": "solver",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.RecursiveDescentSolver",
          "type_short": "RecursiveDescentSolver",
          "comment": "the solver, usually the same as the original attempt to solve."
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": "the values."
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution",
        "type_short": "AssemblyResolution",
        "comment": "the result, or an error."
      },
      "throws": []
    },
    {
      "name": "lineToString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasBackfills",
      "comment": "Check if this resolution has pending backfills to apply",
      "javadoc": "Check if this resolution has pending backfills to apply\n@return true if there are backfills",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there are backfills"
      },
      "throws": []
    },
    {
      "name": "hasForbids",
      "comment": "Check if this resolution includes forbidden patterns",
      "javadoc": "Check if this resolution includes forbidden patterns\n@return true if there are forbidden patterns",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there are forbidden patterns"
      },
      "throws": []
    },
    {
      "name": "solveContextChangesForForbids",
      "comment": "Solve and apply context changes in reverse to forbidden patterns\n \n To avoid circumstances where a context change during disassembly would invoke a more\n specific subconstructor than was used to assembly the instruction, we must solve the\n forbidden patterns in tandem with the overall resolution. If the context of any forbidden\n pattern cannot be solved, we simply drop the forbidden pattern -- the lack of a solution\n implies there is no way the context change could produce the forbidden pattern.",
      "javadoc": "Solve and apply context changes in reverse to forbidden patterns\n \n To avoid circumstances where a context change during disassembly would invoke a more\n specific subconstructor than was used to assembly the instruction, we must solve the\n forbidden patterns in tandem with the overall resolution. If the context of any forbidden\n pattern cannot be solved, we simply drop the forbidden pattern -- the lack of a solution\n implies there is no way the context change could produce the forbidden pattern.\n@param sem the constructor whose context changes to solve\n@param vals any defined symbols\n@param opvals the operand values\n@return the result\n@see AssemblyConstructorSemantic#solveContextChanges(AssemblyResolvedConstructor, Map, Map)",
      "static": false,
      "params": [
        {
          "name": "sem",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyConstructorSemantic",
          "type_short": "AssemblyConstructorSemantic",
          "comment": "the constructor whose context changes to solve"
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": "any defined symbols"
        },
        {
          "name": "opvals",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": "the operand values"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the result"
      },
      "throws": []
    },
    {
      "name": "getInstructionLength",
      "comment": "Get the length of the instruction encoding\n \n This is used to ensure each operand is encoded at the correct offset",
      "javadoc": "Get the length of the instruction encoding\n \n This is used to ensure each operand is encoded at the correct offset\n@return the length of the instruction block\n \n NOTE: this DOES include the offset\n NOTE: this DOES include pending backfills",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of the instruction block\n \n NOTE: this DOES include the offset\n NOTE: this DOES include pending backfills"
      },
      "throws": []
    },
    {
      "name": "getDefinedInstructionLength",
      "comment": "Get the length of the instruction encoding, excluding trailing undefined bytes",
      "javadoc": "Get the length of the instruction encoding, excluding trailing undefined bytes\n@return the length of the defined bytes in the instruction block\n \n NOTE: this DOES include the offset\n NOTE: this DOES NOT include pending backfills",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of the defined bytes in the instruction block\n \n NOTE: this DOES include the offset\n NOTE: this DOES NOT include pending backfills"
      },
      "throws": []
    },
    {
      "name": "getInstruction",
      "comment": "Get the instruction block",
      "javadoc": "Get the instruction block\n@return the instruction block",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock",
        "type_short": "AssemblyPatternBlock",
        "comment": "the instruction block"
      },
      "throws": []
    },
    {
      "name": "getContext",
      "comment": "Get the context block",
      "javadoc": "Get the context block\n@return the context block",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock",
        "type_short": "AssemblyPatternBlock",
        "comment": "the context block"
      },
      "throws": []
    },
    {
      "name": "readInstruction",
      "comment": "Decode a portion of the instruction block",
      "javadoc": "Decode a portion of the instruction block\n@param start the first byte to decode\n@param len the number of bytes to decode\n@return the read masked value\n@see AssemblyPatternBlock#readBytes(int, int)",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "int",
          "type_short": "int",
          "comment": "the first byte to decode"
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to decode"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
        "type_short": "MaskedLong",
        "comment": "the read masked value"
      },
      "throws": []
    },
    {
      "name": "readContext",
      "comment": "Decode a portion of the context block",
      "javadoc": "Decode a portion of the context block\n@param start the first byte to decode\n@param len the number of bytes to decode\n@return the read masked value\n@see AssemblyPatternBlock#readBytes(int, int)",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "int",
          "type_short": "int",
          "comment": "the first byte to decode"
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to decode"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
        "type_short": "MaskedLong",
        "comment": "the read masked value"
      },
      "throws": []
    },
    {
      "name": "isError",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isBackfill",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasChildren",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "childrenToString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "indent",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpConstructorTree",
      "comment": "Used for testing and diagnostics: list the constructor line numbers used to resolve this\n encoding\n \n This includes braces to describe the tree structure",
      "javadoc": "Used for testing and diagnostics: list the constructor line numbers used to resolve this\n encoding\n \n This includes braces to describe the tree structure\n@see ConstructState#dumpConstructorTree()\n@return the constructor tree",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the constructor tree"
      },
      "throws": []
    },
    {
      "name": "getSpecificity",
      "comment": "Count the number of bits specified in the resolution patterns\n \n Totals the specificity of the instruction and context pattern blocks.",
      "javadoc": "Count the number of bits specified in the resolution patterns\n \n Totals the specificity of the instruction and context pattern blocks.\n@return the number of bits in the resulting patterns\n@see AssemblyPatternBlock#getSpecificity()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of bits in the resulting patterns"
      },
      "throws": []
    },
    {
      "name": "possibleInsVals",
      "comment": "Get an iterable over all the possible fillings of the instruction pattern given a context\n \n This is meant to be used idiomatically, as in an enhanced for loop:\n \n \n \n \n \n This is similar to calling\n #getInstruction().AssemblyPatternBlock#possibleVals(), but with\n forbidden patterns removed. A context is required so that only those forbidden patterns\n matching the given context are actually removed. This method should always be preferred to\n the sequence mentioned above, since AssemblyPatternBlock#possibleVals() on its own\n may yield bytes that do not produce the desired instruction. \n \n NOTE: The implementation is based on AssemblyPatternBlock#possibleVals(), so be\n aware that a single array is reused for each iterate. You should not retain a pointer to the\n array, but rather make a copy.",
      "javadoc": "Get an iterable over all the possible fillings of the instruction pattern given a context\n \n This is meant to be used idiomatically, as in an enhanced for loop:\n \n \u003cpre\u003e\n {@code\n for (byte[] ins : rcon.possibleInsVals(ctx)) {\n     System.out.println(format(ins));\n }\n }\n \u003c/pre\u003e\n \n This is similar to calling\n {@link #getInstruction()}.{@link AssemblyPatternBlock#possibleVals()}, \u003cem\u003ebut\u003c/em\u003e with\n forbidden patterns removed. A context is required so that only those forbidden patterns\n matching the given context are actually removed. This method should always be preferred to\n the sequence mentioned above, since {@link AssemblyPatternBlock#possibleVals()} on its own\n may yield bytes that do not produce the desired instruction. \n \n NOTE: The implementation is based on {@link AssemblyPatternBlock#possibleVals()}, so be\n aware that a single array is reused for each iterate. You should not retain a pointer to the\n array, but rather make a copy.\n@param forCtx the context at the assembly address\n@return the iterable",
      "static": false,
      "params": [
        {
          "name": "forCtx",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock",
          "type_short": "AssemblyPatternBlock",
          "comment": "the context at the assembly address"
        }
      ],
      "return": {
        "type_long": "java.lang.Iterable\u003cbyte[]\u003e",
        "type_short": "Iterable",
        "comment": "the iterable"
      },
      "throws": []
    }
  ]
}
