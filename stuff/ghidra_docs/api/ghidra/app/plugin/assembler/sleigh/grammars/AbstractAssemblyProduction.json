{
  "name": "AbstractAssemblyProduction",
  "comment": "Defines a production in a context-free grammar, usually for parsing mnemonic assembly",
  "javadoc": "Defines a production in a context-free grammar, usually for parsing mnemonic assembly\n@see AbstractAssemblyGrammar\n@param \u003cNT\u003e the type of non-terminals",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "org.apache.commons.collections4.list.AbstractListDecorator",
  "fields": [
    {
      "name": "lhs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "NT",
      "type_short": "NT",
      "constant_value": null
    },
    {
      "name": "rhs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential\u003cNT\u003e",
      "type_short": "AssemblySentential",
      "constant_value": null
    },
    {
      "name": "idx",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a production with the given LHS and RHS",
      "javadoc": "Construct a production with the given LHS and RHS\n@param lhs the left-hand side\n@param rhs the right-hand side",
      "static": false,
      "params": [
        {
          "name": "lhs",
          "type_long": "NT",
          "type_short": "NT",
          "comment": "the left-hand side"
        },
        {
          "name": "rhs",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential\u003cNT\u003e",
          "type_short": "AssemblySentential",
          "comment": "the right-hand side"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decorated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIndex",
      "comment": "Get the index of the production\n \n Instead of using deep comparison, the index is often used as the identify of the production\n within a grammar.",
      "javadoc": "Get the index of the production\n \n Instead of using deep comparison, the index is often used as the identify of the production\n within a grammar.\n@return the index",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index"
      },
      "throws": []
    },
    {
      "name": "getLHS",
      "comment": "Get the left-hand side",
      "javadoc": "Get the left-hand side\n@return the LHS",
      "static": false,
      "params": [],
      "return": {
        "type_long": "NT",
        "type_short": "NT",
        "comment": "the LHS"
      },
      "throws": []
    },
    {
      "name": "getRHS",
      "comment": "Get the right-hand side",
      "javadoc": "Get the right-hand side\n@return the RHS",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential\u003cNT\u003e",
        "type_short": "AssemblySentential",
        "comment": "the RHS"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "that",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "that",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AbstractAssemblyProduction\u003cNT\u003e",
          "type_short": "AbstractAssemblyProduction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "subList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fromIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "toIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential\u003cNT\u003e",
        "type_short": "AssemblySentential",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Get the \"name\" of this production\n \n This is mostly just notional and for debugging. The name is taken as the name of the LHS.",
      "javadoc": "Get the \"name\" of this production\n \n This is mostly just notional and for debugging. The name is taken as the name of the LHS.\n@return the name of the LHS",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the LHS"
      },
      "throws": []
    }
  ]
}
