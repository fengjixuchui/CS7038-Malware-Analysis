{
  "name": "AssemblySentential",
  "comment": "A \"string\" of symbols\n \n To avoid overloading the word \"String\", we call this a \"sentential\". Technically, to be a\n \"sentential\" in the classic sense, it must be a possible element in the derivation of a sentence\n in the grammar starting with the start symbol. We ignore that if only for the sake of naming.",
  "javadoc": "A \"string\" of symbols\n \n To avoid overloading the word \"String\", we call this a \"sentential\". Technically, to be a\n \"sentential\" in the classic sense, it must be a possible element in the derivation of a sentence\n in the grammar starting with the start symbol. We ignore that if only for the sake of naming.\n@param \u003cNT\u003e the type of non-terminals",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "org.apache.commons.collections4.list.AbstractListDecorator",
  "fields": [
    {
      "name": "symbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "finished",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "WHITE_SPACE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblyStringTerminal",
      "type_short": "AssemblyStringTerminal",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a string from the given list of symbols",
      "javadoc": "Construct a string from the given list of symbols\n@param symbols",
      "static": false,
      "params": [
        {
          "name": "symbols",
          "type_long": "java.util.List\u003c? extends ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decorated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a blank string\n \n This is suitable as a blank start, to add new symbols, or to use directly as the RHS,\n effectively creating an \"epsilon\" production.",
      "javadoc": "Construct a blank string\n \n This is suitable as a blank start, to add new symbols, or to use directly as the RHS,\n effectively creating an \"epsilon\" production.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a string from any number of symbols",
      "javadoc": "Construct a string from any number of symbols\n@param syms",
      "static": false,
      "params": [
        {
          "name": "syms",
          "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol[]",
          "type_short": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "that",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential\u003cNT\u003e",
          "type_short": "AssemblySentential",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addWS",
      "comment": "Add \"optional\" whitespace, if not already preceded by whitespace",
      "javadoc": "Add \"optional\" whitespace, if not already preceded by whitespace\n@return true if whitespace was added",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if whitespace was added"
      },
      "throws": []
    },
    {
      "name": "lastWhiteSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential.WhiteSpace",
        "type_short": "WhiteSpace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "finish",
      "comment": "Trim leading and trailing whitespace, and make the string immutable",
      "javadoc": "Trim leading and trailing whitespace, and make the string immutable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "subList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fromIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "toIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential\u003cNT\u003e",
        "type_short": "AssemblySentential",
        "comment": ""
      },
      "throws": []
    }
  ]
}
