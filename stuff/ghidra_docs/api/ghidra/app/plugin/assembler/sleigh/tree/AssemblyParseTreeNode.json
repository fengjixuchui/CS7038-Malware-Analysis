{
  "name": "AssemblyParseTreeNode",
  "comment": "A node in a parse tree",
  "javadoc": "A node in a parse tree",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "parent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseBranch",
      "type_short": "AssemblyParseBranch",
      "constant_value": null
    },
    {
      "name": "grammar",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar",
      "type_short": "AssemblyGrammar",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a node for a tree parsed by the given grammar",
      "javadoc": "Construct a node for a tree parsed by the given grammar\n@param grammar the grammar",
      "static": false,
      "params": [
        {
          "name": "grammar",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar",
          "type_short": "AssemblyGrammar",
          "comment": "the grammar"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSym",
      "comment": "Get the symbol for which this node is substituted\n \n For a branch, this is the LHS of the corresponding production. For a token, this is the\n terminal whose tokenizer matched it.",
      "javadoc": "Get the symbol for which this node is substituted\n \n For a branch, this is the LHS of the corresponding production. For a token, this is the\n terminal whose tokenizer matched it.\n@return the symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol",
        "type_short": "AssemblySymbol",
        "comment": "the symbol"
      },
      "throws": []
    },
    {
      "name": "getParent",
      "comment": "Get the branch which contains this node",
      "javadoc": "Get the branch which contains this node\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseBranch",
        "type_short": "AssemblyParseBranch",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setParent",
      "comment": "Set the branch which contains this node",
      "javadoc": "Set the branch which contains this node\n@param parent",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseBranch",
          "type_short": "AssemblyParseBranch",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "print",
      "comment": "For debugging: Display this parse tree via the given stream",
      "javadoc": "For debugging: Display this parse tree via the given stream\n@param out the stream",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.io.PrintStream",
          "type_short": "PrintStream",
          "comment": "the stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "print",
      "comment": "For debugging: Display the tree with the given indent",
      "javadoc": "For debugging: Display the tree with the given indent\n@param out the stream\n@param indent the indent",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.io.PrintStream",
          "type_short": "PrintStream",
          "comment": "the stream"
        },
        {
          "name": "indent",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the indent"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isConstructor",
      "comment": "Check if this node yields a subconstructor resolution",
      "javadoc": "Check if this node yields a subconstructor resolution\n@return true if this node yields a subconstructor resolution",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this node yields a subconstructor resolution"
      },
      "throws": []
    },
    {
      "name": "isNumeric",
      "comment": "Check if this node yields a numeric value",
      "javadoc": "Check if this node yields a numeric value\n@return true if this node yields a numeric value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this node yields a numeric value"
      },
      "throws": []
    },
    {
      "name": "getGrammar",
      "comment": "Get the grammar used to parse the tree",
      "javadoc": "Get the grammar used to parse the tree\n@return the grammar",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar",
        "type_short": "AssemblyGrammar",
        "comment": "the grammar"
      },
      "throws": []
    },
    {
      "name": "generateString",
      "comment": "Generate the string that this node parsed",
      "javadoc": "Generate the string that this node parsed\n@return the string",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string"
      },
      "throws": []
    }
  ]
}
