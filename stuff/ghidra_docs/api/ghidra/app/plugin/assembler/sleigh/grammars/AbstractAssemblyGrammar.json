{
  "name": "AbstractAssemblyGrammar",
  "comment": "Defines a context-free grammar, usually for the purpose of parsing mnemonic assembly instructions\n \n As in classic computer science, a CFG consists of productions of non-terminals and terminals.\n The left-hand side of the a production must be a single non-terminal, but the right-hand side\n may be any string of symbols. To avoid overloading the term \"String,\" here we call it a\n \"Sentential.\"\n \n To define a grammar, simply construct an appropriate subclass (probably AssemblyGrammar)\n and call #addProduction(AbstractAssemblyProduction) or\n #addProduction(AssemblyNonTerminal, AssemblySentential). The grammar object will collect\n the non-terminals and terminals.\n \n By default, the start symbol is taken from the left-hand side of the first production added to\n the grammar.",
  "javadoc": "Defines a context-free grammar, usually for the purpose of parsing mnemonic assembly instructions\n \n As in classic computer science, a CFG consists of productions of non-terminals and terminals.\n The left-hand side of the a production must be a single non-terminal, but the right-hand side\n may be any string of symbols. To avoid overloading the term \"String,\" here we call it a\n \"Sentential.\"\n \n To define a grammar, simply construct an appropriate subclass (probably {@link AssemblyGrammar})\n and call {@link #addProduction(AbstractAssemblyProduction)} or\n {@link #addProduction(AssemblyNonTerminal, AssemblySentential)}. The grammar object will collect\n the non-terminals and terminals.\n \n By default, the start symbol is taken from the left-hand side of the first production added to\n the grammar.\n@param \u003cNT\u003e the type of non-terminals\n@param \u003cP\u003e the type of productions, which must have the same types of (non-)terminals.",
  "static": false,
  "implements": [
    "java.lang.Iterable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "productions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "org.apache.commons.collections4.MultiValuedMap\u003cjava.lang.String,P\u003e",
      "type_short": "MultiValuedMap",
      "constant_value": null
    },
    {
      "name": "prodList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cP\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "nonterminals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,NT\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "terminals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "symbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "startName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newProduction",
      "comment": "Because a subclass may have a different type of production, it must provide a mechanism for\n constructing an appropriate production given just the LHS and RHS.",
      "javadoc": "Because a subclass may have a different type of production, it must provide a mechanism for\n constructing an appropriate production given just the LHS and RHS.\n@param lhs the left-hand side of the production\n@param rhs the right-hand side of the production\n@return the constructed production",
      "static": false,
      "params": [
        {
          "name": "lhs",
          "type_long": "NT",
          "type_short": "NT",
          "comment": "the left-hand side of the production"
        },
        {
          "name": "rhs",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential\u003cNT\u003e",
          "type_short": "AssemblySentential",
          "comment": "the right-hand side of the production"
        }
      ],
      "return": {
        "type_long": "P",
        "type_short": "P",
        "comment": "the constructed production"
      },
      "throws": []
    },
    {
      "name": "addProduction",
      "comment": "Add a production to the grammar",
      "javadoc": "Add a production to the grammar\n@param lhs the left-hand side\n@param rhs the right-hand side",
      "static": false,
      "params": [
        {
          "name": "lhs",
          "type_long": "NT",
          "type_short": "NT",
          "comment": "the left-hand side"
        },
        {
          "name": "rhs",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential\u003cNT\u003e",
          "type_short": "AssemblySentential",
          "comment": "the right-hand side"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addProduction",
      "comment": "Add a production to the grammar",
      "javadoc": "Add a production to the grammar\n@param prod the production",
      "static": false,
      "params": [
        {
          "name": "prod",
          "type_long": "P",
          "type_short": "P",
          "comment": "the production"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPureRecursive",
      "comment": "Check if the given production is purely recursive, i.e., of the form I \u003d I",
      "javadoc": "Check if the given production is purely recursive, i.e., of the form I \u003d\u0026gt; I\n@param prod the production to check\n@return true iff the production is purely recursive",
      "static": false,
      "params": [
        {
          "name": "prod",
          "type_long": "P",
          "type_short": "P",
          "comment": "the production to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true iff the production is purely recursive"
      },
      "throws": []
    },
    {
      "name": "setStart",
      "comment": "Change the start symbol for the grammar",
      "javadoc": "Change the start symbol for the grammar\n@param nt the new start symbol",
      "static": false,
      "params": [
        {
          "name": "nt",
          "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal",
          "type_short": "AssemblyNonTerminal",
          "comment": "the new start symbol"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStartName",
      "comment": "Change the start symbol for the grammar",
      "javadoc": "Change the start symbol for the grammar\n@param startName the name of the new start symbol",
      "static": false,
      "params": [
        {
          "name": "startName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the new start symbol"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStart",
      "comment": "Get the start symbol for the grammar",
      "javadoc": "Get the start symbol for the grammar\n@return the start symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "NT",
        "type_short": "NT",
        "comment": "the start symbol"
      },
      "throws": []
    },
    {
      "name": "getStartName",
      "comment": "Get the name of the start symbol for the grammar",
      "javadoc": "Get the name of the start symbol for the grammar\n@return the name of the start symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the start symbol"
      },
      "throws": []
    },
    {
      "name": "getNonTerminal",
      "comment": "Get the named non-terminal",
      "javadoc": "Get the named non-terminal\n@param name the name of the desired non-terminal\n@return the non-terminal, or null if it is not in this grammar",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the desired non-terminal"
        }
      ],
      "return": {
        "type_long": "NT",
        "type_short": "NT",
        "comment": "the non-terminal, or null if it is not in this grammar"
      },
      "throws": []
    },
    {
      "name": "getTerminal",
      "comment": "Get the named terminal",
      "javadoc": "Get the named terminal\n@param name the name of the desired terminal\n@return the terminal, or null if it is not in this grammar",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the desired terminal"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal",
        "type_short": "AssemblyTerminal",
        "comment": "the terminal, or null if it is not in this grammar"
      },
      "throws": []
    },
    {
      "name": "combine",
      "comment": "Add all the productions of a given grammar to this one",
      "javadoc": "Add all the productions of a given grammar to this one\n@param that the grammar whose productions to add",
      "static": false,
      "params": [
        {
          "name": "that",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AbstractAssemblyGrammar\u003cNT,P\u003e",
          "type_short": "AbstractAssemblyGrammar",
          "comment": "the grammar whose productions to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "print",
      "comment": "Print the productions of this grammar to the given stream",
      "javadoc": "Print the productions of this grammar to the given stream\n@param out the stream",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.io.PrintStream",
          "type_short": "PrintStream",
          "comment": "the stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "verify",
      "comment": "Check that the grammar is consistent\n \n The grammar is consistent if every non-terminal appearing in the grammar, also appears as\n the left-hand side of some production. If not, such non-terminals are said to be undefined.",
      "javadoc": "Check that the grammar is consistent\n \n The grammar is consistent if every non-terminal appearing in the grammar, also appears as\n the left-hand side of some production. If not, such non-terminals are said to be undefined.\n@throws AssemblyGrammarException the grammar is inconsistent, i.e., contains undefined\n                                  non-terminals.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammarException",
          "type_short": "AssemblyGrammarException",
          "comment": "the grammar is inconsistent, i.e., contains undefined\n                                  non-terminals."
        }
      ]
    },
    {
      "name": "iterator",
      "comment": "Traverse the productions",
      "javadoc": "Traverse the productions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cP\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "nonTerminals",
      "comment": "Get the non-terminals",
      "javadoc": "Get the non-terminals\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cNT\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "terminals",
      "comment": "Get the terminals",
      "javadoc": "Get the terminals\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "productionsOf",
      "comment": "Get all productions where the left-hand side non-terminal has the given name",
      "javadoc": "Get all productions where the left-hand side non-terminal has the given name\n@param name the name of the non-terminal\n@return all productions \"defining\" the named non-terminal",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the non-terminal"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cP\u003e",
        "type_short": "Collection",
        "comment": "all productions \"defining\" the named non-terminal"
      },
      "throws": []
    },
    {
      "name": "productionsOf",
      "comment": "Get all productions where the left-hand side is the given non-terminal",
      "javadoc": "Get all productions where the left-hand side is the given non-terminal\n@param nt the non-terminal whose defining productions to find\n@return all productions \"defining\" the given non-terminal",
      "static": false,
      "params": [
        {
          "name": "nt",
          "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal",
          "type_short": "AssemblyNonTerminal",
          "comment": "the non-terminal whose defining productions to find"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cP\u003e",
        "type_short": "Collection",
        "comment": "all productions \"defining\" the given non-terminal"
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Check if the grammar contains any symbol with the given name",
      "javadoc": "Check if the grammar contains any symbol with the given name\n@param name the name to find\n@return true iff a terminal or non-terminal has the given name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name to find"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true iff a terminal or non-terminal has the given name"
      },
      "throws": []
    }
  ]
}
