{
  "name": "AssemblyParseTransitionTable",
  "comment": "The transition table defining an LR(0) parsing machine",
  "javadoc": "The transition table defining an LR(0) parsing machine",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "map",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cghidra.app.plugin.assembler.sleigh.util.TableEntryKey,java.lang.Integer\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "put",
      "comment": "Put an entry into the state machine",
      "javadoc": "Put an entry into the state machine\n@param fromState the source state\n@param next the symbol that is matched\n@param newState the destination state\n@return the previous value for newState\n \n NOTE: Generally, if this return non-null, something is probably wrong with your LR(0)\n       machine generator",
      "static": false,
      "params": [
        {
          "name": "fromState",
          "type_long": "int",
          "type_short": "int",
          "comment": "the source state"
        },
        {
          "name": "next",
          "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol",
          "type_short": "AssemblySymbol",
          "comment": "the symbol that is matched"
        },
        {
          "name": "newState",
          "type_long": "int",
          "type_short": "int",
          "comment": "the destination state"
        }
      ],
      "return": {
        "type_long": "java.lang.Integer",
        "type_short": "Integer",
        "comment": "the previous value for newState\n \n NOTE: Generally, if this return non-null, something is probably wrong with your LR(0)\n       machine generator"
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "Get an entry from the state machine",
      "javadoc": "Get an entry from the state machine\n@param fromState the source state\n@param next the symbol that has been matched\n@return the destination state",
      "static": false,
      "params": [
        {
          "name": "fromState",
          "type_long": "int",
          "type_short": "int",
          "comment": "the source state"
        },
        {
          "name": "next",
          "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol",
          "type_short": "AssemblySymbol",
          "comment": "the symbol that has been matched"
        }
      ],
      "return": {
        "type_long": "java.lang.Integer",
        "type_short": "Integer",
        "comment": "the destination state"
      },
      "throws": []
    },
    {
      "name": "forEach",
      "comment": "Traverse every entry in the table, invoking Consumer#accept(Object) on each",
      "javadoc": "Traverse every entry in the table, invoking {@link Consumer#accept(Object)} on each\n@param consumer the callback",
      "static": false,
      "params": [
        {
          "name": "consumer",
          "type_long": "java.util.function.Consumer\u003cghidra.app.plugin.assembler.sleigh.util.TableEntry\u003cjava.lang.Integer\u003e\u003e",
          "type_short": "Consumer",
          "comment": "the callback"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
