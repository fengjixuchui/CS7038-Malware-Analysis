{
  "name": "AssemblyResolvedBackfill",
  "comment": "A AssemblyResolution indicating the need to solve an expression in the future\n \n Such records are collected within a AssemblyResolvedConstructor and then solved just\n before the final result(s) are assembled. This is typically required by instructions that refer\n to the  symbol.\n \n NOTE: These are used internally. The user ought never to see these from the assembly API.",
  "javadoc": "A {@link AssemblyResolution} indicating the need to solve an expression in the future\n \n Such records are collected within a {@link AssemblyResolvedConstructor} and then solved just\n before the final result(s) are assembled. This is typically required by instructions that refer\n to the {@code inst_next} symbol.\n \n NOTE: These are used internally. The user ought never to see these from the assembly API.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution",
  "fields": [
    {
      "name": "exp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.expression.PatternExpression",
      "type_short": "PatternExpression",
      "constant_value": null
    },
    {
      "name": "goal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
      "type_short": "MaskedLong",
      "constant_value": null
    },
    {
      "name": "res",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "inslen",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "computeHash",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@see {@link AssemblyResolution#backfill(PatternExpression, MaskedLong, Map, int, String)}",
      "static": false,
      "params": [
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "exp",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.PatternExpression",
          "type_short": "PatternExpression",
          "comment": ""
        },
        {
          "name": "goal",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "inslen",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "Duplicate this record",
      "javadoc": "Duplicate this record\n@return the duplicate",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedBackfill",
        "type_short": "AssemblyResolvedBackfill",
        "comment": "the duplicate"
      },
      "throws": []
    },
    {
      "name": "getInstructionLength",
      "comment": "Get the expected length of the instruction portion of the future encoding\n \n This is used to make sure that operands following a to-be-determined encoding are placed\n properly. Even though the actual encoding cannot yet be determined, its length can.",
      "javadoc": "Get the expected length of the instruction portion of the future encoding\n \n This is used to make sure that operands following a to-be-determined encoding are placed\n properly. Even though the actual encoding cannot yet be determined, its length can.\n@return the total expected length (including the offset)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the total expected length (including the offset)"
      },
      "throws": []
    },
    {
      "name": "isError",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isBackfill",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lineToString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "shift",
      "comment": "Shift the back-fill record\u0027s \"instruction\" pattern to the right.",
      "javadoc": "Shift the back-fill record\u0027s \"instruction\" pattern to the right.\n@param amt the number of bytes to shift the result when solved.\n@return the result",
      "static": false,
      "params": [
        {
          "name": "amt",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to shift the result when solved."
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedBackfill",
        "type_short": "AssemblyResolvedBackfill",
        "comment": "the result"
      },
      "throws": []
    },
    {
      "name": "solve",
      "comment": "Attempt (again) to solve the expression that generated this backfill record\n \n This will attempt to solve the same expression and goal again, using the same parameters as\n were given to the original attempt, except with additional defined symbols. Typically, the\n symbol that required backfill is . This method will not throw\n NeedsBackfillException, since that would imply the missing symbol(s) from the\n original attempt are still missing. Instead, the method returns an instance of\n AssemblyResolvedError.",
      "javadoc": "Attempt (again) to solve the expression that generated this backfill record\n \n This will attempt to solve the same expression and goal again, using the same parameters as\n were given to the original attempt, except with additional defined symbols. Typically, the\n symbol that required backfill is {@code inst_next}. This method will not throw\n {@link NeedsBackfillException}, since that would imply the missing symbol(s) from the\n original attempt are still missing. Instead, the method returns an instance of\n {@link AssemblyResolvedError}.\n@param solver a solver, usually the same as the one from the original attempt.\n@param vals the defined symbols, usually the same, but with the missing symbol(s).\n@return the solution result",
      "static": false,
      "params": [
        {
          "name": "solver",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.RecursiveDescentSolver",
          "type_short": "RecursiveDescentSolver",
          "comment": "a solver, usually the same as the one from the original attempt."
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": "the defined symbols, usually the same, but with the missing symbol(s)."
        },
        {
          "name": "cur",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution",
        "type_short": "AssemblyResolution",
        "comment": "the solution result"
      },
      "throws": []
    }
  ]
}
