{
  "name": "AssemblyTerminal",
  "comment": "The type of terminal for an assembly grammar\n \n Unlike classical parsing, each terminal provides its own tokenizer. If multiple tokenizers yield\n a token, the parser branches, possibly creating multiple, ambiguous trees.",
  "javadoc": "The type of terminal for an assembly grammar\n \n Unlike classical parsing, each terminal provides its own tokenizer. If multiple tokenizers yield\n a token, the parser branches, possibly creating multiple, ambiguous trees.\n@see AssemblyGrammar",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a terminal having the give name",
      "javadoc": "Construct a terminal having the give name\n@param name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "match",
      "comment": "Attempt to match a token from the input buffer starting at a given position",
      "javadoc": "Attempt to match a token from the input buffer starting at a given position\n@param buffer the input buffer\n@param pos the cursor position in the buffer\n@param grammar the grammar containing this terminal\n@param labels the program labels, if applicable\n@return the matched token, or null",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the input buffer"
        },
        {
          "name": "pos",
          "type_long": "int",
          "type_short": "int",
          "comment": "the cursor position in the buffer"
        },
        {
          "name": "grammar",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar",
          "type_short": "AssemblyGrammar",
          "comment": "the grammar containing this terminal"
        },
        {
          "name": "labels",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": "the program labels, if applicable"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003c? extends ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseToken\u003e",
        "type_short": "Collection",
        "comment": "the matched token, or null"
      },
      "throws": []
    },
    {
      "name": "getSuggestions",
      "comment": "Provide a collection of strings that this terminal would have accepted",
      "javadoc": "Provide a collection of strings that this terminal would have accepted\n@param got the remaining contents of the input buffer\n@param labels the program labels, if applicable\n@return a, possibly empty, collection of suggestions",
      "static": false,
      "params": [
        {
          "name": "got",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the remaining contents of the input buffer"
        },
        {
          "name": "labels",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": "the program labels, if applicable"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cjava.lang.String\u003e",
        "type_short": "Collection",
        "comment": "a, possibly empty, collection of suggestions"
      },
      "throws": []
    }
  ]
}
