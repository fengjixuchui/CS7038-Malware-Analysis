{
  "name": "AssemblyParseStateItem",
  "comment": "An item in the state of an LR(0) parser\n \n An item is a production with a dot indicating a position while parsing",
  "javadoc": "An item in the state of an LR(0) parser\n \n An item is a production with a dot indicating a position while parsing",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "prod",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction",
      "type_short": "AssemblyProduction",
      "constant_value": null
    },
    {
      "name": "pos",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new item starting at the far left of the given production",
      "javadoc": "Construct a new item starting at the far left of the given production\n@param prod the production",
      "static": false,
      "params": [
        {
          "name": "prod",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction",
          "type_short": "AssemblyProduction",
          "comment": "the production"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new item starting immediately before the symbol at the given position in the\n given production",
      "javadoc": "Construct a new item starting immediately before the symbol at the given position in the\n given production\n@param prod the production\n@param pos the position of the dot",
      "static": false,
      "params": [
        {
          "name": "prod",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction",
          "type_short": "AssemblyProduction",
          "comment": "the production"
        },
        {
          "name": "pos",
          "type_long": "int",
          "type_short": "int",
          "comment": "the position of the dot"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "read",
      "comment": "Advance the dot by one position, producing a new item",
      "javadoc": "Advance the dot by one position, producing a new item\n@return the new item",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseStateItem",
        "type_short": "AssemblyParseStateItem",
        "comment": "the new item"
      },
      "throws": []
    },
    {
      "name": "getNext",
      "comment": "Get the symbol immediately to the right of the dot\n \n This is the symbol which must be matched to advance the dot.",
      "javadoc": "Get the symbol immediately to the right of the dot\n \n This is the symbol which must be matched to advance the dot.\n@return the symbol, or null if the item is completed, i.e., the dot is at the far right",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol",
        "type_short": "AssemblySymbol",
        "comment": "the symbol, or null if the item is completed, i.e., the dot is at the far right"
      },
      "throws": []
    },
    {
      "name": "getClosure",
      "comment": "\"Fill\" one step out to close a state containing this item\n \n To compute the full closure, you must continue stepping out until no new items are generated",
      "javadoc": "\"Fill\" one step out to close a state containing this item\n \n To compute the full closure, you must continue stepping out until no new items are generated\n@param grammar the grammar containing the production\n@return a subset of items in the closure of a state containing this item",
      "static": false,
      "params": [
        {
          "name": "grammar",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar",
          "type_short": "AssemblyGrammar",
          "comment": "the grammar containing the production"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.parse.AssemblyParseStateItem\u003e",
        "type_short": "Collection",
        "comment": "a subset of items in the closure of a state containing this item"
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "that",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "that",
          "type_long": "ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseStateItem",
          "type_short": "AssemblyParseStateItem",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "completed",
      "comment": "Check if this item is completed\n \n The item is completed if all symbols have been matched, i.e., the dot is at the far right of\n the production.",
      "javadoc": "Check if this item is completed\n \n The item is completed if all symbols have been matched, i.e., the dot is at the far right of\n the production.\n@return true iff the item is completed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true iff the item is completed"
      },
      "throws": []
    },
    {
      "name": "getPos",
      "comment": "Get the position of the dot\n \n The position is the number of symbols to the left of the dot.",
      "javadoc": "Get the position of the dot\n \n The position is the number of symbols to the left of the dot.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProduction",
      "comment": "Get the production associated with this item",
      "javadoc": "Get the production associated with this item\n@return the production",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction",
        "type_short": "AssemblyProduction",
        "comment": "the production"
      },
      "throws": []
    }
  ]
}
