{
  "name": "AssemblyNumericTerminal",
  "comment": "A terminal that accepts any numeric value or program label\n \n The literal may take any form accepted by UNIX strtol() with base\u003d0. By default, the literal is\n interpreted in base 10, but it may be prefixed such that it\u0027s interpreted in an alternative\n base. With the prefix \u00270x\u0027, it is interpreted in hexadecimal. With the prefix \u00270\u0027, it is\n interpreted in octal.",
  "javadoc": "A terminal that accepts any numeric value or program label\n \n The literal may take any form accepted by UNIX strtol() with base\u003d0. By default, the literal is\n interpreted in base 10, but it may be prefixed such that it\u0027s interpreted in an alternative\n base. With the prefix \u00270x\u0027, it is interpreted in hexadecimal. With the prefix \u00270\u0027, it is\n interpreted in octal.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal",
  "fields": [
    {
      "name": "PREFIX_HEX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"0x\""
    },
    {
      "name": "PREFIX_OCT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"0\""
    },
    {
      "name": "suggestions",
      "comment": "Some suggestions, other than labels, to provide",
      "javadoc": "Some suggestions, other than labels, to provide",
      "static": true,
      "type_long": "java.util.Collection\u003cjava.lang.String\u003e",
      "type_short": "Collection",
      "constant_value": null
    },
    {
      "name": "MAX_LABEL_SUGGESTIONS",
      "comment": "The maximum number of labels to suggest",
      "javadoc": "The maximum number of labels to suggest",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "10"
    },
    {
      "name": "bitsize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a terminal with the given name, accepting any numeric value or program label",
      "javadoc": "Construct a terminal with the given name, accepting any numeric value or program label\n@param name the name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name"
        },
        {
          "name": "bitsize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "match",
      "comment": "This is only a convenience for testing\n \n Please use #match(String, int, AssemblyGrammar, Map).",
      "javadoc": "This is only a convenience for testing\n \n Please use {@link #match(String, int, AssemblyGrammar, Map) match(String, int, AssemblyGrammar, Map\u0026lt;String, Long\u0026gt;)}.\n@param buffer the input buffer\n@return the parsed token",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the input buffer"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseNumericToken",
        "type_short": "AssemblyParseNumericToken",
        "comment": "the parsed token"
      },
      "throws": []
    },
    {
      "name": "match",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "pos",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "grammar",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar",
          "type_short": "AssemblyGrammar",
          "comment": ""
        },
        {
          "name": "labels",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.tree.AssemblyParseNumericToken\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "match",
      "comment": "Try to match a sign-less numeric literal, or a program label",
      "javadoc": "Try to match a sign-less numeric literal, or a program label\n@param s the buffer cursor where the literal or label is expected\n@param buffer the input buffer\n@param grammar the grammar containing this terminal\n@param labels the program labels, mapped to their values\n@return the parsed token, or null",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "int",
          "type_short": "int",
          "comment": "the buffer cursor where the literal or label is expected"
        },
        {
          "name": "buffer",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the input buffer"
        },
        {
          "name": "grammar",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar",
          "type_short": "AssemblyGrammar",
          "comment": "the grammar containing this terminal"
        },
        {
          "name": "labels",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": "the program labels, mapped to their values"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.tree.AssemblyParseNumericToken\u003e",
        "type_short": "Collection",
        "comment": "the parsed token, or null"
      },
      "throws": []
    },
    {
      "name": "matchLiteral",
      "comment": "Try to match a numeric literal, after the optional sign, encoded in hex, decimal, or octal",
      "javadoc": "Try to match a numeric literal, after the optional sign, encoded in hex, decimal, or octal\n@param s buffer cursor where the literal is expected\n@param buffer the input buffer\n@param pos the start offset of the token parsed so far\n@param neg true if the the optional {@code -} is present\n@param grammar the grammar containing this terminal\n@return the parsed token, or null",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "int",
          "type_short": "int",
          "comment": "buffer cursor where the literal is expected"
        },
        {
          "name": "buffer",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the input buffer"
        },
        {
          "name": "pos",
          "type_long": "int",
          "type_short": "int",
          "comment": "the start offset of the token parsed so far"
        },
        {
          "name": "neg",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the the optional  is present"
        },
        {
          "name": "grammar",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar",
          "type_short": "AssemblyGrammar",
          "comment": "the grammar containing this terminal"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.tree.AssemblyParseNumericToken\u003e",
        "type_short": "Collection",
        "comment": "the parsed token, or null"
      },
      "throws": []
    },
    {
      "name": "makeToken",
      "comment": "Construct a numeric token",
      "javadoc": "Construct a numeric token\n@param str the string value of the token taken verbatim from the buffer\n@param num portion of the token following the optional sign and prefix\n@param radix the radix of {@code num}\n@param neg true if the the optional {@code -} is present\n@param grammar the grammar containing this terminal\n@return the parsed token, or null",
      "static": false,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string value of the token taken verbatim from the buffer"
        },
        {
          "name": "num",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "portion of the token following the optional sign and prefix"
        },
        {
          "name": "radix",
          "type_long": "int",
          "type_short": "int",
          "comment": "the radix of "
        },
        {
          "name": "neg",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the the optional  is present"
        },
        {
          "name": "grammar",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar",
          "type_short": "AssemblyGrammar",
          "comment": "the grammar containing this terminal"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.tree.AssemblyParseNumericToken\u003e",
        "type_short": "Collection",
        "comment": "the parsed token, or null"
      },
      "throws": []
    },
    {
      "name": "matchHex",
      "comment": "Try to match a hexadecimal literal, following the optional sign and prefix",
      "javadoc": "Try to match a hexadecimal literal, following the optional sign and prefix\n@param s the buffer cursor where the hex portion starts\n@param buffer the input buffer\n@param pos the start offset of the token parsed so far\n@param neg true if the the optional {@code -} is present\n@param grammar the grammar containing this terminal\n@return the parsed token, or null",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "int",
          "type_short": "int",
          "comment": "the buffer cursor where the hex portion starts"
        },
        {
          "name": "buffer",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the input buffer"
        },
        {
          "name": "pos",
          "type_long": "int",
          "type_short": "int",
          "comment": "the start offset of the token parsed so far"
        },
        {
          "name": "neg",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the the optional  is present"
        },
        {
          "name": "grammar",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar",
          "type_short": "AssemblyGrammar",
          "comment": "the grammar containing this terminal"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.tree.AssemblyParseNumericToken\u003e",
        "type_short": "Collection",
        "comment": "the parsed token, or null"
      },
      "throws": []
    },
    {
      "name": "matchDec",
      "comment": "Try to match a decimal literal, following the optional sign and optional prefix",
      "javadoc": "Try to match a decimal literal, following the optional sign and optional prefix\n@param s the buffer cursor where the hex portion starts\n@param buffer the input buffer\n@param pos the start offset of the token parsed so far\n@param neg true if the the optional {@code -} is present\n@param grammar the grammar containing this terminal\n@return the parsed token, or null",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "int",
          "type_short": "int",
          "comment": "the buffer cursor where the hex portion starts"
        },
        {
          "name": "buffer",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the input buffer"
        },
        {
          "name": "pos",
          "type_long": "int",
          "type_short": "int",
          "comment": "the start offset of the token parsed so far"
        },
        {
          "name": "neg",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the the optional  is present"
        },
        {
          "name": "grammar",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar",
          "type_short": "AssemblyGrammar",
          "comment": "the grammar containing this terminal"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.tree.AssemblyParseNumericToken\u003e",
        "type_short": "Collection",
        "comment": "the parsed token, or null"
      },
      "throws": []
    },
    {
      "name": "matchOct",
      "comment": "Try to match an octal literal, following the optional sign and prefix",
      "javadoc": "Try to match an octal literal, following the optional sign and prefix\n@param s the buffer cursor where the hex portion starts\n@param buffer the input buffer\n@param pos the start offset of the token parsed so far\n@param neg true if the the optional {@code -} is present\n@param grammar the grammar containing this terminal\n@return the parsed token, or null",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "int",
          "type_short": "int",
          "comment": "the buffer cursor where the hex portion starts"
        },
        {
          "name": "buffer",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the input buffer"
        },
        {
          "name": "pos",
          "type_long": "int",
          "type_short": "int",
          "comment": "the start offset of the token parsed so far"
        },
        {
          "name": "neg",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the the optional  is present"
        },
        {
          "name": "grammar",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar",
          "type_short": "AssemblyGrammar",
          "comment": "the grammar containing this terminal"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.tree.AssemblyParseNumericToken\u003e",
        "type_short": "Collection",
        "comment": "the parsed token, or null"
      },
      "throws": []
    },
    {
      "name": "getSuggestions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "got",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "labels",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cjava.lang.String\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBitSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
