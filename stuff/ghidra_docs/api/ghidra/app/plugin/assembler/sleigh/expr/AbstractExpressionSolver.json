{
  "name": "AbstractExpressionSolver",
  "comment": "The root type of an expression solver",
  "javadoc": "The root type of an expression solver\n@param \u003cT\u003e the type of expression solved (the operator)",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "tcls",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Class\u003cT\u003e",
      "type_short": "Class",
      "constant_value": null
    },
    {
      "name": "solver",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.expr.RecursiveDescentSolver",
      "type_short": "RecursiveDescentSolver",
      "constant_value": null
    },
    {
      "name": "dbg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.util.DbgTimer",
      "type_short": "DbgTimer",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a solver that can solve expression of the given type",
      "javadoc": "Construct a solver that can solve expression of the given type\n@param tcls the type of expressions it can solve",
      "static": false,
      "params": [
        {
          "name": "tcls",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": "the type of expressions it can solve"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "solve",
      "comment": "Attempt to solve an expression for a given value",
      "javadoc": "Attempt to solve an expression for a given value\n@param exp the expression to solve\n@param goal the desired value of the expression\n@param vals values of defined symbols\n@param res the results of subconstructor resolutions (used for lengths)\n@param hints describes techniques applied by calling solvers\n@param description the description to give to resolved solutions\n@return the resolution\n@throws NeedsBackfillException if the expression refers to an undefined symbol",
      "static": false,
      "params": [
        {
          "name": "exp",
          "type_long": "T",
          "type_short": "T",
          "comment": "the expression to solve"
        },
        {
          "name": "goal",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": "the desired value of the expression"
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": "values of defined symbols"
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": "the results of subconstructor resolutions (used for lengths)"
        },
        {
          "name": "cur",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        },
        {
          "name": "hints",
          "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.expr.SolverHint\u003e",
          "type_short": "Set",
          "comment": "describes techniques applied by calling solvers"
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the description to give to resolved solutions"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution",
        "type_short": "AssemblyResolution",
        "comment": "the resolution"
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.NeedsBackfillException",
          "type_short": "NeedsBackfillException",
          "comment": "if the expression refers to an undefined symbol"
        }
      ]
    },
    {
      "name": "getValue",
      "comment": "Attempt to get a constant value for the expression",
      "javadoc": "Attempt to get a constant value for the expression\n@param exp the expression\n@param vals values of defined symbols\n@param res the results of subconstructor resolutions (used for lengths)\n@return the constant value, or null if it depends on a variable\n@throws NeedsBackfillException if the expression refers to an undefined symbol",
      "static": false,
      "params": [
        {
          "name": "exp",
          "type_long": "T",
          "type_short": "T",
          "comment": "the expression"
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": "values of defined symbols"
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": "the results of subconstructor resolutions (used for lengths)"
        },
        {
          "name": "cur",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
        "type_short": "MaskedLong",
        "comment": "the constant value, or null if it depends on a variable"
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.NeedsBackfillException",
          "type_short": "NeedsBackfillException",
          "comment": "if the expression refers to an undefined symbol"
        }
      ]
    },
    {
      "name": "getInstructionLength",
      "comment": "Determines the length of the subconstructor that would be returned had the expression not\n depended on an undefined symbol.\n \n This is used by the backfilling process to ensure values are written to the correct offset",
      "javadoc": "Determines the length of the subconstructor that would be returned had the expression not\n depended on an undefined symbol.\n \n This is used by the backfilling process to ensure values are written to the correct offset\n@param exp the expression\n@param res the results of subconstructor resolutions (used for lengths)\n@return the length of filled in token field(s).",
      "static": false,
      "params": [
        {
          "name": "exp",
          "type_long": "T",
          "type_short": "T",
          "comment": "the expression"
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": "the results of subconstructor resolutions (used for lengths)"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of filled in token field(s)."
      },
      "throws": []
    },
    {
      "name": "valueForResolution",
      "comment": "Compute the value of the expression given the (possibly-intermediate) resolution",
      "javadoc": "Compute the value of the expression given the (possibly-intermediate) resolution\n@param exp the expression to evaluate\n@param rc the resolution on which to evaluate it\n@return the result",
      "static": false,
      "params": [
        {
          "name": "exp",
          "type_long": "T",
          "type_short": "T",
          "comment": "the expression to evaluate"
        },
        {
          "name": "rc",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": "the resolution on which to evaluate it"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
        "type_short": "MaskedLong",
        "comment": "the result"
      },
      "throws": []
    },
    {
      "name": "register",
      "comment": "Register this particular solver with the general expression solver",
      "javadoc": "Register this particular solver with the general expression solver\n@param general the general solver",
      "static": false,
      "params": [
        {
          "name": "general",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.RecursiveDescentSolver",
          "type_short": "RecursiveDescentSolver",
          "comment": "the general solver"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
