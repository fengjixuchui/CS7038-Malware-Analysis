{
  "name": "AssemblyParseActionGotoTable",
  "comment": "The Action/Goto table for a LALR(1) parser\n \n This table is unconventional in that it permits a single cell to be populated by more than one\n action. Typically, such a situation would indicate an ambiguity, or the need for a longer\n look-ahead value. Because we do not presume to control the grammar (which was automatically\n derived from another source), the parsing algorithm will simply branch, eventually trying both\n options.",
  "javadoc": "The Action/Goto table for a LALR(1) parser\n \n This table is unconventional in that it permits a single cell to be populated by more than one\n action. Typically, such a situation would indicate an ambiguity, or the need for a longer\n look-ahead value. Because we do not presume to control the grammar (which was automatically\n derived from another source), the parsing algorithm will simply branch, eventually trying both\n options.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "map",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "org.apache.commons.collections4.MultiValuedMap\u003cghidra.app.plugin.assembler.sleigh.util.TableEntryKey,ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseActionGotoTable.Action\u003e",
      "type_short": "MultiValuedMap",
      "constant_value": null
    },
    {
      "name": "possibleTerms",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "org.apache.commons.collections4.MultiValuedMap\u003cjava.lang.Integer,ghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal\u003e",
      "type_short": "MultiValuedMap",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "put",
      "comment": "Add an action entry to the given cell",
      "javadoc": "Add an action entry to the given cell\n@param fromState the state (row) in the table\n@param next the symbol (column) in the table\n@param action the entry to add to the cell\n@return true, if the given entry was not already present",
      "static": false,
      "params": [
        {
          "name": "fromState",
          "type_long": "int",
          "type_short": "int",
          "comment": "the state (row) in the table"
        },
        {
          "name": "next",
          "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol",
          "type_short": "AssemblySymbol",
          "comment": "the symbol (column) in the table"
        },
        {
          "name": "action",
          "type_long": "ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseActionGotoTable.Action",
          "type_short": "Action",
          "comment": "the entry to add to the cell"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true, if the given entry was not already present"
      },
      "throws": []
    },
    {
      "name": "putShift",
      "comment": "Add a SHIFT (Sn) entry to the given cell",
      "javadoc": "Add a SHIFT (S\u003ci\u003en\u003c/i\u003e) entry to the given cell\n@param fromState the state (row) in the table\n@param next the symbol (column) in the table\n@param newState the state (\u003ci\u003en\u003c/i\u003e) after the shift is applied\n@return true, if the given entry was not already present",
      "static": false,
      "params": [
        {
          "name": "fromState",
          "type_long": "int",
          "type_short": "int",
          "comment": "the state (row) in the table"
        },
        {
          "name": "next",
          "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal",
          "type_short": "AssemblyTerminal",
          "comment": "the symbol (column) in the table"
        },
        {
          "name": "newState",
          "type_long": "int",
          "type_short": "int",
          "comment": "the state (n) after the shift is applied"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true, if the given entry was not already present"
      },
      "throws": []
    },
    {
      "name": "putReduce",
      "comment": "Add a REDUCE (Rn) entry to the given cell",
      "javadoc": "Add a REDUCE (R\u003ci\u003en\u003c/i\u003e) entry to the given cell\n@param fromState the state (row) in the table\n@param next the symbol (column) in the table\n@param prod the production (having index \u003ci\u003en\u003c/i\u003e) associated with the reduction\n@return true, if the given entry was not already present",
      "static": false,
      "params": [
        {
          "name": "fromState",
          "type_long": "int",
          "type_short": "int",
          "comment": "the state (row) in the table"
        },
        {
          "name": "next",
          "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal",
          "type_short": "AssemblyTerminal",
          "comment": "the symbol (column) in the table"
        },
        {
          "name": "prod",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction",
          "type_short": "AssemblyProduction",
          "comment": "the production (having index n) associated with the reduction"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true, if the given entry was not already present"
      },
      "throws": []
    },
    {
      "name": "putGoto",
      "comment": "Add a GOTO entry to the given cell",
      "javadoc": "Add a GOTO entry to the given cell\n@param fromState the state (row) in the table\n@param next the symbol (column) in the table\n@param newState the target state\n@return true, if the given entry was not already present",
      "static": false,
      "params": [
        {
          "name": "fromState",
          "type_long": "int",
          "type_short": "int",
          "comment": "the state (row) in the table"
        },
        {
          "name": "next",
          "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal",
          "type_short": "AssemblyNonTerminal",
          "comment": "the symbol (column) in the table"
        },
        {
          "name": "newState",
          "type_long": "int",
          "type_short": "int",
          "comment": "the target state"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true, if the given entry was not already present"
      },
      "throws": []
    },
    {
      "name": "putAccept",
      "comment": "Add an ACCEPT entry for the given state at the end of input",
      "javadoc": "Add an ACCEPT entry for the given state at the end of input\n@param fromState the state (row) in the table\n@return true, if the state does not already accept on end of input",
      "static": false,
      "params": [
        {
          "name": "fromState",
          "type_long": "int",
          "type_short": "int",
          "comment": "the state (row) in the table"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true, if the state does not already accept on end of input"
      },
      "throws": []
    },
    {
      "name": "getExpected",
      "comment": "Get the terminals that are expected, i.e., have entries for the given state",
      "javadoc": "Get the terminals that are expected, i.e., have entries for the given state\n@param fromState the state (row) in the table\n@return the collection of populated columns (terminals) for the given state",
      "static": false,
      "params": [
        {
          "name": "fromState",
          "type_long": "int",
          "type_short": "int",
          "comment": "the state (row) in the table"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal\u003e",
        "type_short": "Collection",
        "comment": "the collection of populated columns (terminals) for the given state"
      },
      "throws": []
    },
    {
      "name": "get",
      "comment": "Get all entries in a given cell",
      "javadoc": "Get all entries in a given cell\n@param fromState the state (row) in the table\n@param next the symbol (column) in the table\n@return all action entries in the given cell",
      "static": false,
      "params": [
        {
          "name": "fromState",
          "type_long": "int",
          "type_short": "int",
          "comment": "the state (row) in the table"
        },
        {
          "name": "next",
          "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol",
          "type_short": "AssemblySymbol",
          "comment": "the symbol (column) in the table"
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.parse.AssemblyParseActionGotoTable.Action\u003e",
        "type_short": "Collection",
        "comment": "all action entries in the given cell"
      },
      "throws": []
    }
  ]
}
