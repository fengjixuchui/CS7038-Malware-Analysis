{
  "name": "DbgTimer",
  "comment": "A debugging, timing, and diagnostic tool\n \n TODO: I should probably remove this and rely on the Msg.trace() method, or at the very least,\n refactor this to use that.",
  "javadoc": "A debugging, timing, and diagnostic tool\n \n TODO: I should probably remove this and rely on the Msg.trace() method, or at the very least,\n refactor this to use that.",
  "static": false,
  "implements": [],
  "extends": "java.io.PrintStream",
  "fields": [
    {
      "name": "timeStack",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Stack\u003cjava.lang.Long\u003e",
      "type_short": "Stack",
      "constant_value": null
    },
    {
      "name": "ACTIVE",
      "comment": "An instance that prints to standard out",
      "javadoc": "An instance that prints to standard out",
      "static": true,
      "type_long": "ghidra.app.plugin.assembler.sleigh.util.DbgTimer",
      "type_short": "DbgTimer",
      "constant_value": null
    },
    {
      "name": "INACTIVE",
      "comment": "An instance that prints to /dev/null",
      "javadoc": "An instance that prints to /dev/null",
      "static": true,
      "type_long": "ghidra.app.plugin.assembler.sleigh.util.DbgTimer",
      "type_short": "DbgTimer",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new debugging timer, wrapping the given output stream",
      "javadoc": "Create a new debugging timer, wrapping the given output stream\n@param out the stream",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": "the stream"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new debugging timer, wrapping standard out",
      "javadoc": "Create a new debugging timer, wrapping standard out",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "start",
      "comment": "Start a new, possibly long-running, task",
      "javadoc": "Start a new, possibly long-running, task\n@param message the message to print when the task begins\n@return a context to close when the task ends\n \n This is meant to be used idiomatically, as in a try-with-resources block:\n \u003cpre\u003e\n {@code\n try (DbgCtx dc \u003d dbg.start(\"Twiddling the frobs:\")) {\n     // do some classy twiddling\n } // this will automatically print done and the time elapsed within the try block\n }\n \u003c/pre\u003e\n \n This idiom is preferred because the task will be stopped even if an error occurs, if the\n method returns from within the block, etc.",
      "static": false,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the message to print when the task begins"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.util.DbgTimer.DbgCtx",
        "type_short": "DbgCtx",
        "comment": "a context to close when the task ends\n \n This is meant to be used idiomatically, as in a try-with-resources block:\n \n \n \n \n This idiom is preferred because the task will be stopped even if an error occurs, if the\n method returns from within the block, etc."
      },
      "throws": []
    },
    {
      "name": "stop",
      "comment": "Stop the current task\n \n This will print done and the elapsed time since the start of the task. The \"current task\" is\n determined from the stack.",
      "javadoc": "Stop the current task\n \n This will print done and the elapsed time since the start of the task. The \"current task\" is\n determined from the stack.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setOutputStream",
      "comment": "Replace the wrapped output stream (usually temporarily)",
      "javadoc": "Replace the wrapped output stream (usually temporarily)\n@see #resetOutputStream(TabbingOutputStream)\n@param s the replacement stream\n@return the original stream, wrapped in a tabbing stream",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": "the replacement stream"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.util.DbgTimer.TabbingOutputStream",
        "type_short": "TabbingOutputStream",
        "comment": "the original stream, wrapped in a tabbing stream"
      },
      "throws": []
    },
    {
      "name": "resetOutputStream",
      "comment": "Put the original tabbing stream back",
      "javadoc": "Put the original tabbing stream back\n@see #setOutputStream(OutputStream)\n@param s the original wrapped stream\n@return the replacement stream, wrapped in a tabbing stream",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.app.plugin.assembler.sleigh.util.DbgTimer.TabbingOutputStream",
          "type_short": "TabbingOutputStream",
          "comment": "the original wrapped stream"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.util.DbgTimer.TabbingOutputStream",
        "type_short": "TabbingOutputStream",
        "comment": "the replacement stream, wrapped in a tabbing stream"
      },
      "throws": []
    }
  ]
}
