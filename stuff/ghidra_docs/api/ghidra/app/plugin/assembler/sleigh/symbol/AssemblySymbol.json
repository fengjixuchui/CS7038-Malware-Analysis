{
  "name": "AssemblySymbol",
  "comment": "A symbol in a context-free grammar\n \n Symbols can be either terminals or non-terminals. Non-terminals must have a defining production,\n i.e., it must appear as the left-hand side of some production in the grammar. \n \n Traditionally, when displayed, non-terminals should be immediately distinguishable from\n terminals. In classic CS literature, this usually means non-terminals are in CAPS, and terminals\n are in lower-case. Because the assembler doesn\u0027t control the names provided by SLEIGH, we\n surround non-terminals in [brackets].",
  "javadoc": "A symbol in a context-free grammar\n \n Symbols can be either terminals or non-terminals. Non-terminals must have a defining production,\n i.e., it must appear as the left-hand side of some production in the grammar. \n \n Traditionally, when displayed, non-terminals should be immediately distinguishable from\n terminals. In classic CS literature, this usually means non-terminals are in CAPS, and terminals\n are in lower-case. Because the assembler doesn\u0027t control the names provided by SLEIGH, we\n surround non-terminals in [brackets].\n@see AbstractAssemblyGrammar",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a new symbol with the given name",
      "javadoc": "Construct a new symbol with the given name\n@param name the name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Get the name of this symbol",
      "javadoc": "Get the name of this symbol\n@return the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "that",
          "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol",
          "type_short": "AssemblySymbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "that",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "takesOperandIndex",
      "comment": "Check if this symbol consumes an operand index of its constructor",
      "javadoc": "Check if this symbol consumes an operand index of its constructor\n@return true if the symbol represents an operand",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the symbol represents an operand"
      },
      "throws": []
    }
  ]
}
