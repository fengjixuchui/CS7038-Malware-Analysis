{
  "name": "OperandValueSolver",
  "comment": "Solves expressions of an operand value\n \n These are a sort of named sub-expression, but they may also specify a shift in encoding.",
  "javadoc": "Solves expressions of an operand value\n \n These are a sort of named sub-expression, but they may also specify a shift in encoding.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.assembler.sleigh.expr.AbstractExpressionSolver",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefiningExpression",
      "comment": "Obtains the \"defining expression\"\n \n This is either the symbols assigned defining expression, or the expression associated with\n its defining symbol.",
      "javadoc": "Obtains the \"defining expression\"\n \n This is either the symbols assigned defining expression, or the expression associated with\n its defining symbol.\n@return the defining expression, or null if neither is available",
      "static": false,
      "params": [
        {
          "name": "sym",
          "type_long": "ghidra.app.plugin.processors.sleigh.symbol.OperandSymbol",
          "type_short": "OperandSymbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.processors.sleigh.expression.PatternExpression",
        "type_short": "PatternExpression",
        "comment": "the defining expression, or null if neither is available"
      },
      "throws": []
    },
    {
      "name": "solve",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ov",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.OperandValue",
          "type_short": "OperandValue",
          "comment": ""
        },
        {
          "name": "goal",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "cur",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        },
        {
          "name": "hints",
          "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.expr.SolverHint\u003e",
          "type_short": "Set",
          "comment": ""
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution",
        "type_short": "AssemblyResolution",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.NeedsBackfillException",
          "type_short": "NeedsBackfillException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ov",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.OperandValue",
          "type_short": "OperandValue",
          "comment": ""
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "cur",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
        "type_short": "MaskedLong",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.NeedsBackfillException",
          "type_short": "NeedsBackfillException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getInstructionLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ov",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.OperandValue",
          "type_short": "OperandValue",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "valueForResolution",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ov",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.OperandValue",
          "type_short": "OperandValue",
          "comment": ""
        },
        {
          "name": "rc",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
        "type_short": "MaskedLong",
        "comment": ""
      },
      "throws": []
    }
  ]
}
