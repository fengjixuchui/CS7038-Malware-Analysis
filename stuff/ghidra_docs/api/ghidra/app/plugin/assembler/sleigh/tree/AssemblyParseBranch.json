{
  "name": "AssemblyParseBranch",
  "comment": "A branch in a parse tree, corresponding to the application of a production",
  "javadoc": "A branch in a parse tree, corresponding to the application of a production",
  "static": false,
  "implements": [
    "java.lang.Iterable"
  ],
  "extends": "ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseTreeNode",
  "fields": [
    {
      "name": "substs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.plugin.assembler.sleigh.tree.AssemblyParseTreeNode\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "prod",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction",
      "type_short": "AssemblyProduction",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a branch from the given grammar and production",
      "javadoc": "Construct a branch from the given grammar and production\n@param grammar the grammar containing the production\n@param prod the production applied to create this branch",
      "static": false,
      "params": [
        {
          "name": "grammar",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar",
          "type_short": "AssemblyGrammar",
          "comment": "the grammar containing the production"
        },
        {
          "name": "prod",
          "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction",
          "type_short": "AssemblyProduction",
          "comment": "the production applied to create this branch"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addChild",
      "comment": "Prepend a child to this branch",
      "javadoc": "Prepend a child to this branch\n@param child the child\n \n Because LR parsers produce rightmost derivations, they necessarily populate the branches\n right to left. During reduction, each child is popped from the stack, traversing them in\n reverse order. This method prepends children so that when reduction is complete, the\n children are aligned to the corresponding symbols from the RHS of the production.",
      "static": false,
      "params": [
        {
          "name": "child",
          "type_long": "ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseTreeNode",
          "type_short": "AssemblyParseTreeNode",
          "comment": "the child\n \n Because LR parsers produce rightmost derivations, they necessarily populate the branches\n right to left. During reduction, each child is popped from the stack, traversing them in\n reverse order. This method prepends children so that when reduction is complete, the\n children are aligned to the corresponding symbols from the RHS of the production."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "expects",
      "comment": "See what symbol is expected next\n \n The child added next must be associated with the token expected next.",
      "javadoc": "See what symbol is expected next\n \n The child added next must be associated with the token expected next.\n@return the symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol",
        "type_short": "AssemblySymbol",
        "comment": "the symbol"
      },
      "throws": []
    },
    {
      "name": "isComplete",
      "comment": "Check if the branch is full",
      "javadoc": "Check if the branch is full\n@return true if every symbol on the RHS has a corresonding child",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if every symbol on the RHS has a corresonding child"
      },
      "throws": []
    },
    {
      "name": "getSym",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal",
        "type_short": "AssemblyNonTerminal",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "print",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "java.io.PrintStream",
          "type_short": "PrintStream",
          "comment": ""
        },
        {
          "name": "indent",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProduction",
      "comment": "Get the production applied to create this branch",
      "javadoc": "Get the production applied to create this branch\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction",
        "type_short": "AssemblyProduction",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSubstitutions",
      "comment": "Get the list of children, indexed by corresponding symbol from the RHS",
      "javadoc": "Get the list of children, indexed by corresponding symbol from the RHS\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.plugin.assembler.sleigh.tree.AssemblyParseTreeNode\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "iterator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cghidra.app.plugin.assembler.sleigh.tree.AssemblyParseTreeNode\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSubstitution",
      "comment": "Get the ith child, corresponding to the ith symbol from the RHS",
      "javadoc": "Get the \u003cem\u003ei\u003c/em\u003eth child, corresponding to the \u003cem\u003ei\u003c/em\u003eth symbol from the RHS\n@param i the position\n@return the child",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": "the position"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseTreeNode",
        "type_short": "AssemblyParseTreeNode",
        "comment": "the child"
      },
      "throws": []
    },
    {
      "name": "isConstructor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generateString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
