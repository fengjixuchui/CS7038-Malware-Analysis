{
  "name": "NeedsBackfillException",
  "comment": "An exception to indicate that the solution of an expression is not yet known\n \n Furthermore, it cannot be determined whether or not the expression is even solvable. When this\n exception is thrown, a backfill record is placed on the encoded resolution indicating that\n resolver must attempt to solve the expression again, once the encoding is otherwise complete.\n This is needed, most notably, when an encoding depends on the address of the next\n instruction, because the length of the current instruction is not known until resolution has\n finished.\n \n Backfill becomes a possibility when an expression depends on a symbol that is not (yet) defined.\n Thus, as a matter of good record keeping, the exception takes the name of the missing symbol.",
  "javadoc": "An exception to indicate that the solution of an expression is not yet known\n \n Furthermore, it cannot be determined whether or not the expression is even solvable. When this\n exception is thrown, a backfill record is placed on the encoded resolution indicating that\n resolver must attempt to solve the expression again, once the encoding is otherwise complete.\n This is needed, most notably, when an encoding depends on the address of the \u003cem\u003enext\u003c/em\u003e\n instruction, because the length of the current instruction is not known until resolution has\n finished.\n \n Backfill becomes a possibility when an expression depends on a symbol that is not (yet) defined.\n Thus, as a matter of good record keeping, the exception takes the name of the missing symbol.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.assembler.sleigh.expr.SolverException",
  "fields": [
    {
      "name": "symbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a backfill exception, resulting from the given missing symbol name",
      "javadoc": "Construct a backfill exception, resulting from the given missing symbol name\n@param symbol the missing symbol name",
      "static": false,
      "params": [
        {
          "name": "symbol",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the missing symbol name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbol",
      "comment": "Retrieve the missing symbol name from the original solution attempt",
      "javadoc": "Retrieve the missing symbol name from the original solution attempt\n@return the missing symbol name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the missing symbol name"
      },
      "throws": []
    }
  ]
}
