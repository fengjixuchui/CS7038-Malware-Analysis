{
  "name": "AssemblyConstructorSemantic",
  "comment": "Describes a SLEIGH constructor semantic\n \n These are collected and associated with productions in the grammar based on the given\n constructor\u0027s print pieces.",
  "javadoc": "Describes a SLEIGH constructor semantic\n \n These are collected and associated with productions in the grammar based on the given\n constructor\u0027s print pieces.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "solver",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.app.plugin.assembler.sleigh.expr.RecursiveDescentSolver",
      "type_short": "RecursiveDescentSolver",
      "constant_value": null
    },
    {
      "name": "dbg",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.app.plugin.assembler.sleigh.util.DbgTimer",
      "type_short": "DbgTimer",
      "constant_value": null
    },
    {
      "name": "patterns",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "cons",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.Constructor",
      "type_short": "Constructor",
      "constant_value": null
    },
    {
      "name": "indices",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cjava.lang.Integer\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "upatterns",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor\u003e",
      "type_short": "Set",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Build a new SLEIGH constructor semantic",
      "javadoc": "Build a new SLEIGH constructor semantic\n@param cons the SLEIGH constructor\n@param indices the indices of RHS non-terminals in the associated production that represent\n            an operand in the SLEIGH constructor",
      "static": false,
      "params": [
        {
          "name": "cons",
          "type_long": "ghidra.app.plugin.processors.sleigh.Constructor",
          "type_short": "Constructor",
          "comment": "the SLEIGH constructor"
        },
        {
          "name": "indices",
          "type_long": "java.util.List\u003cjava.lang.Integer\u003e",
          "type_short": "List",
          "comment": "the indices of RHS non-terminals in the associated production that represent\n            an operand in the SLEIGH constructor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPattern",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pat",
          "type_long": "ghidra.app.plugin.processors.sleigh.pattern.DisjointPattern",
          "type_short": "DisjointPattern",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPattern",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pat",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConstructor",
      "comment": "Get the SLEIGH constructor",
      "javadoc": "Get the SLEIGH constructor\n@return the constructor",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.processors.sleigh.Constructor",
        "type_short": "Constructor",
        "comment": "the constructor"
      },
      "throws": []
    },
    {
      "name": "getPatterns",
      "comment": "Get the associated encoding patterns for the constructor",
      "javadoc": "Get the associated encoding patterns for the constructor\n@return the patterns",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor\u003e",
        "type_short": "Collection",
        "comment": "the patterns"
      },
      "throws": []
    },
    {
      "name": "getOperandIndex",
      "comment": "Convert the index of a print piece to its associated operand index",
      "javadoc": "Convert the index of a print piece to its associated operand index\n@param printpos position excluding whitespace and string tokens.\n@return the operand index",
      "static": false,
      "params": [
        {
          "name": "printpos",
          "type_long": "int",
          "type_short": "int",
          "comment": "position excluding whitespace and string tokens."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the operand index"
      },
      "throws": []
    },
    {
      "name": "getOperandIndices",
      "comment": "Get the list of operand indices in print piece order",
      "javadoc": "Get the list of operand indices in print piece order\n@return the list",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.Integer\u003e",
        "type_short": "List",
        "comment": "the list"
      },
      "throws": []
    },
    {
      "name": "getOperandIndexIterator",
      "comment": "Get an iterator over the operand indices\n \n If this iterator is advanced for each non-terminal, while simultaneously iterating over the\n RHS of the associated production, then this will identify the corresponding operand index for\n each non-terminal",
      "javadoc": "Get an iterator over the operand indices\n \n If this iterator is advanced for each non-terminal, while simultaneously iterating over the\n RHS of the associated production, then this will identify the corresponding operand index for\n each non-terminal\n@return the iterator",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cjava.lang.Integer\u003e",
        "type_short": "Iterator",
        "comment": "the iterator"
      },
      "throws": []
    },
    {
      "name": "computeAllForbids",
      "comment": "Initialize upatterns with an unmodifiable copy of patterns, with forbidden patterns added",
      "javadoc": "Initialize upatterns with an unmodifiable copy of patterns, with forbidden patterns added",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "withComputedForbids",
      "comment": "Add the list of forbidden patterns to one of the constructor\u0027s patterns\n \n SLEIGH disambiguates multiple matching pattern by two rules. First, if one is more specific\n than (\"specializes\") another, i.e., it matches on more bits than another pattern, the more\n specific pattern is chosen. Second, if the two are equally special, then the one that occurs\n first in the SLEIGH specification is taken. So, during resolution, if a less-special or\n later-occurring constructor is chosen, we must prevent continued resolution from matching the\n more-special or earlier-occurring pattern(s).\n \n Essentially, this states, \"you may choose any value matching my pattern, except those that\n match these forbidden patterns.\"\n \n This takes a given pattern, and searches the rest of the language for any patterns that would\n take precedence, and combines them as forbidden patterns with the given pattern.",
      "javadoc": "Add the list of forbidden patterns to one of the constructor\u0027s patterns\n \n SLEIGH disambiguates multiple matching pattern by two rules. First, if one is more specific\n than (\"specializes\") another, i.e., it matches on more bits than another pattern, the more\n specific pattern is chosen. Second, if the two are equally special, then the one that occurs\n first in the SLEIGH specification is taken. So, during resolution, if a less-special or\n later-occurring constructor is chosen, we must prevent continued resolution from matching the\n more-special or earlier-occurring pattern(s).\n \n Essentially, this states, \"you may choose any value matching my pattern, except those that\n match these forbidden patterns.\"\n \n This takes a given pattern, and searches the rest of the language for any patterns that would\n take precedence, and combines them as forbidden patterns with the given pattern.\n@param pat the given pattern\n@return the same pattern with forbidden records added",
      "static": false,
      "params": [
        {
          "name": "pat",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": "the given pattern"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the same pattern with forbidden records added"
      },
      "throws": []
    },
    {
      "name": "solveContextChanges",
      "comment": "Solve this constructor\u0027s context changes",
      "javadoc": "Solve this constructor\u0027s context changes\n@param res the combined resolution requirements derived from the subconstructors\n@param vals any defined symbols (usually {@code inst_start}, and {@code inst_next})\n@param opvals a map from operand index to operand value\n@return the resolution with context changes applied in reverse, or an error\n \n         Each value in {@code opvals} must either be a numeric value, e.g., an index from a\n         varnode list, or another {@link AssemblyResolvedConstructor} for a subconstructor\n         operand.\n \n         It\u0027s helpful to think of the SLEIGH disassembly process here. Normally, once the\n         appropriate constructor has been identified (by matching patterns), its context\n         changes are applied, and then its operands parsed (possibly parsing subconstructor\n         operands). Thus, {@code res} can be thought of as the intermediate result between\n         applying context changes and parsing operands, except in reverse. The output of this\n         method corresponds to the state before context changes were applied, i.e.,\n         immediately after selecting the constructor. Thus, in reverse, the context is solved\n         immediately before applying the selected constructor patterns.\n@see AssemblyTreeResolver#resolveSelectedChildren(AssemblyProduction, List, List, Collection)",
      "static": false,
      "params": [
        {
          "name": "res",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": "the combined resolution requirements derived from the subconstructors"
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": "any defined symbols (usually , and )"
        },
        {
          "name": "opvals",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": "a map from operand index to operand value"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution",
        "type_short": "AssemblyResolution",
        "comment": "the resolution with context changes applied in reverse, or an error\n \n         Each value in  must either be a numeric value, e.g., an index from a\n         varnode list, or another AssemblyResolvedConstructor for a subconstructor\n         operand.\n \n         It\u0027s helpful to think of the SLEIGH disassembly process here. Normally, once the\n         appropriate constructor has been identified (by matching patterns), its context\n         changes are applied, and then its operands parsed (possibly parsing subconstructor\n         operands). Thus,  can be thought of as the intermediate result between\n         applying context changes and parsing operands, except in reverse. The output of this\n         method corresponds to the state before context changes were applied, i.e.,\n         immediately after selecting the constructor. Thus, in reverse, the context is solved\n         immediately before applying the selected constructor patterns."
      },
      "throws": []
    },
    {
      "name": "applyForward",
      "comment": "Apply just context transformations in the forward (disassembly) direction",
      "javadoc": "Apply just context transformations in the forward (disassembly) direction\n@param outer the state before context changes\n@return the state after context changes\n \n         Unlike the usual disassembly process, this method does not take into account any\n         information from the instruction encoding. Any context bits that depend on it are set\n         to unknown ({@code x}) in the output. This method is used to pre-compute a context\n         transition graph in order to quickly resolve purely-recursive semantics on the root\n         constructor table.",
      "static": false,
      "params": [
        {
          "name": "outer",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": "the state before context changes"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
        "type_short": "AssemblyResolvedConstructor",
        "comment": "the state after context changes\n \n         Unlike the usual disassembly process, this method does not take into account any\n         information from the instruction encoding. Any context bits that depend on it are set\n         to unknown () in the output. This method is used to pre-compute a context\n         transition graph in order to quickly resolve purely-recursive semantics on the root\n         constructor table."
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "that",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyConstructorSemantic",
          "type_short": "AssemblyConstructorSemantic",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
