{
  "name": "OrExpressionSolver",
  "comment": "Solves expressions of the form A | B",
  "javadoc": "Solves expressions of the form A | B",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.assembler.sleigh.expr.AbstractBinaryExpressionSolver",
  "fields": [
    {
      "name": "DUMMY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.app.plugin.processors.sleigh.expression.PatternExpression",
      "type_short": "PatternExpression",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compute",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "lval",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        },
        {
          "name": "rval",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
        "type_short": "MaskedLong",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "computeLeft",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rval",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        },
        {
          "name": "goal",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
        "type_short": "MaskedLong",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.SolverException",
          "type_short": "SolverException",
          "comment": ""
        }
      ]
    },
    {
      "name": "tryCatenationExpression",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "exp",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.OrExpression",
          "type_short": "OrExpression",
          "comment": ""
        },
        {
          "name": "goal",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "cur",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        },
        {
          "name": "hints",
          "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.expr.SolverHint\u003e",
          "type_short": "Set",
          "comment": ""
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution",
        "type_short": "AssemblyResolution",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.SolverException",
          "type_short": "SolverException",
          "comment": ""
        }
      ]
    },
    {
      "name": "tryCircularShiftExpression",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "exp",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.OrExpression",
          "type_short": "OrExpression",
          "comment": ""
        },
        {
          "name": "goal",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "cur",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        },
        {
          "name": "hints",
          "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.expr.SolverHint\u003e",
          "type_short": "Set",
          "comment": ""
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution",
        "type_short": "AssemblyResolution",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.SolverException",
          "type_short": "SolverException",
          "comment": ""
        }
      ]
    },
    {
      "name": "solveLeftCircularShift",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "expValue",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.PatternExpression",
          "type_short": "PatternExpression",
          "comment": ""
        },
        {
          "name": "expShift",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.PatternExpression",
          "type_short": "PatternExpression",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dir",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "goal",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "cur",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        },
        {
          "name": "hints",
          "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.expr.SolverHint\u003e",
          "type_short": "Set",
          "comment": ""
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution",
        "type_short": "AssemblyResolution",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.NeedsBackfillException",
          "type_short": "NeedsBackfillException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.SolverException",
          "type_short": "SolverException",
          "comment": ""
        }
      ]
    },
    {
      "name": "computeCircShiftG",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fval",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dir",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "goal",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
        "type_short": "MaskedLong",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.SolverException",
          "type_short": "SolverException",
          "comment": ""
        }
      ]
    },
    {
      "name": "computeCircShiftF",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "gval",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dir",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "goal",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
        "type_short": "MaskedLong",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "solveTwoSided",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "exp",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.OrExpression",
          "type_short": "OrExpression",
          "comment": ""
        },
        {
          "name": "goal",
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.MaskedLong",
          "type_short": "MaskedLong",
          "comment": ""
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "cur",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        },
        {
          "name": "hints",
          "type_long": "java.util.Set\u003cghidra.app.plugin.assembler.sleigh.expr.SolverHint\u003e",
          "type_short": "Set",
          "comment": ""
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution",
        "type_short": "AssemblyResolution",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.NeedsBackfillException",
          "type_short": "NeedsBackfillException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.SolverException",
          "type_short": "SolverException",
          "comment": ""
        }
      ]
    },
    {
      "name": "collectComponents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "exp",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.PatternExpression",
          "type_short": "PatternExpression",
          "comment": ""
        },
        {
          "name": "shift",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "components",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.app.plugin.processors.sleigh.expression.PatternExpression\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "cur",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.SolverException",
          "type_short": "SolverException",
          "comment": ""
        }
      ]
    },
    {
      "name": "collectComponentsOr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "exp",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.OrExpression",
          "type_short": "OrExpression",
          "comment": ""
        },
        {
          "name": "shift",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "components",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.app.plugin.processors.sleigh.expression.PatternExpression\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "cur",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.SolverException",
          "type_short": "SolverException",
          "comment": ""
        }
      ]
    },
    {
      "name": "collectComponentsLeft",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "exp",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.LeftShiftExpression",
          "type_short": "LeftShiftExpression",
          "comment": ""
        },
        {
          "name": "shift",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "components",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.app.plugin.processors.sleigh.expression.PatternExpression\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "cur",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.SolverException",
          "type_short": "SolverException",
          "comment": ""
        }
      ]
    },
    {
      "name": "collectComponentsRight",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "exp",
          "type_long": "ghidra.app.plugin.processors.sleigh.expression.RightShiftExpression",
          "type_short": "RightShiftExpression",
          "comment": ""
        },
        {
          "name": "shift",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "components",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.app.plugin.processors.sleigh.expression.PatternExpression\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "vals",
          "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.Object\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "cur",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.sleigh.expr.SolverException",
          "type_short": "SolverException",
          "comment": ""
        }
      ]
    }
  ]
}
