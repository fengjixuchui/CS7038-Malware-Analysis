{
  "name": "SleighAssembler",
  "comment": "An Assembler for a SleighLanguage.\n \n To obtain one of these, please use SleighAssemblerBuilder, or better yet, the static\n methods of Assemblers.",
  "javadoc": "An {@link Assembler} for a {@link SleighLanguage}.\n \n To obtain one of these, please use {@link SleighAssemblerBuilder}, or better yet, the static\n methods of {@link Assemblers}.",
  "static": false,
  "implements": [
    "ghidra.app.plugin.assembler.Assembler"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DEFAULT_MAX_RECURSION_DEPTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "dbg",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.app.plugin.assembler.sleigh.util.DbgTimer",
      "type_short": "DbgTimer",
      "constant_value": null
    },
    {
      "name": "selector",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.AssemblySelector",
      "type_short": "AssemblySelector",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "listing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Listing",
      "type_short": "Listing",
      "constant_value": null
    },
    {
      "name": "memory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.mem.Memory",
      "type_short": "Memory",
      "constant_value": null
    },
    {
      "name": "parser",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.parse.AssemblyParser",
      "type_short": "AssemblyParser",
      "constant_value": null
    },
    {
      "name": "defaultContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyDefaultContext",
      "type_short": "AssemblyDefaultContext",
      "constant_value": null
    },
    {
      "name": "ctxGraph",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyContextGraph",
      "type_short": "AssemblyContextGraph",
      "constant_value": null
    },
    {
      "name": "lang",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.processors.sleigh.SleighLanguage",
      "type_short": "SleighLanguage",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a SleighAssembler.",
      "javadoc": "Construct a SleighAssembler.\n@param selector a method of selecting one result from many\n@param program the program to bind to (must have same language as parser)\n@param parser the parser for the SLEIGH language\n@param defaultContext the default context for the language\n@param ctxGraph the context graph",
      "static": false,
      "params": [
        {
          "name": "selector",
          "type_long": "ghidra.app.plugin.assembler.AssemblySelector",
          "type_short": "AssemblySelector",
          "comment": "a method of selecting one result from many"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to bind to (must have same language as parser)"
        },
        {
          "name": "parser",
          "type_long": "ghidra.app.plugin.assembler.sleigh.parse.AssemblyParser",
          "type_short": "AssemblyParser",
          "comment": "the parser for the SLEIGH language"
        },
        {
          "name": "defaultContext",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyDefaultContext",
          "type_short": "AssemblyDefaultContext",
          "comment": "the default context for the language"
        },
        {
          "name": "ctxGraph",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyContextGraph",
          "type_short": "AssemblyContextGraph",
          "comment": "the context graph"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a SleighAssembler.\n \n NOTE: This variant does not permit #assemble(Address, String...).",
      "javadoc": "Construct a SleighAssembler.\n \n NOTE: This variant does not permit {@link #assemble(Address, String...)}.\n@param selector a method of selecting one result from many\n@param lang the SLEIGH language (must be same as to create the parser)\n@param parser the parser for the SLEIGH language\n@param defaultContext the default context for the language\n@param ctxGraph the context graph",
      "static": false,
      "params": [
        {
          "name": "selector",
          "type_long": "ghidra.app.plugin.assembler.AssemblySelector",
          "type_short": "AssemblySelector",
          "comment": "a method of selecting one result from many"
        },
        {
          "name": "lang",
          "type_long": "ghidra.app.plugin.processors.sleigh.SleighLanguage",
          "type_short": "SleighLanguage",
          "comment": "the SLEIGH language (must be same as to create the parser)"
        },
        {
          "name": "parser",
          "type_long": "ghidra.app.plugin.assembler.sleigh.parse.AssemblyParser",
          "type_short": "AssemblyParser",
          "comment": "the parser for the SLEIGH language"
        },
        {
          "name": "defaultContext",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyDefaultContext",
          "type_short": "AssemblyDefaultContext",
          "comment": "the default context for the language"
        },
        {
          "name": "ctxGraph",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyContextGraph",
          "type_short": "AssemblyContextGraph",
          "comment": "the context graph"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "patchProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "res",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor",
          "type_short": "AssemblyResolvedConstructor",
          "comment": ""
        },
        {
          "name": "at",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "patchProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "insbytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "at",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.InstructionIterator",
        "type_short": "InstructionIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "assemble",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "at",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "assembly",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.InstructionIterator",
        "type_short": "InstructionIterator",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.AssemblySyntaxException",
          "type_short": "AssemblySyntaxException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.plugin.assembler.AssemblySemanticException",
          "type_short": "AssemblySemanticException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": ""
        }
      ]
    },
    {
      "name": "assembleLine",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "at",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "line",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.AssemblySyntaxException",
          "type_short": "AssemblySyntaxException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.plugin.assembler.AssemblySemanticException",
          "type_short": "AssemblySemanticException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parseLine",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "line",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.plugin.assembler.sleigh.parse.AssemblyParseResult\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveTree",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parse",
          "type_long": "ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseResult",
          "type_short": "AssemblyParseResult",
          "comment": ""
        },
        {
          "name": "at",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolutionResults",
        "type_short": "AssemblyResolutionResults",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveTree",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parse",
          "type_long": "ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseResult",
          "type_short": "AssemblyParseResult",
          "comment": ""
        },
        {
          "name": "at",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "ctx",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock",
          "type_short": "AssemblyPatternBlock",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolutionResults",
        "type_short": "AssemblyResolutionResults",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveLine",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "at",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "line",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolutionResults",
        "type_short": "AssemblyResolutionResults",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.AssemblySyntaxException",
          "type_short": "AssemblySyntaxException",
          "comment": ""
        }
      ]
    },
    {
      "name": "resolveLine",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "at",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "line",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "ctx",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock",
          "type_short": "AssemblyPatternBlock",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolutionResults",
        "type_short": "AssemblyResolutionResults",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.AssemblySyntaxException",
          "type_short": "AssemblySyntaxException",
          "comment": ""
        }
      ]
    },
    {
      "name": "assembleLine",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "at",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "line",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "ctx",
          "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock",
          "type_short": "AssemblyPatternBlock",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.assembler.AssemblySemanticException",
          "type_short": "AssemblySemanticException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.plugin.assembler.AssemblySyntaxException",
          "type_short": "AssemblySyntaxException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getProgramLabels",
      "comment": "A convenience to obtain a map of program labels strings to long values",
      "javadoc": "A convenience to obtain a map of program labels strings to long values\n@return the map\n \n         {@literal TODO Use a Map\u003cString, Address\u003e instead so that, if possible, symbol values can be checked}\n         lest they be an invalid substitution for a given operand.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Long\u003e",
        "type_short": "Map",
        "comment": "the map\n \n         \n         lest they be an invalid substitution for a given operand."
      },
      "throws": []
    },
    {
      "name": "getContextAt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.sleigh.sem.AssemblyPatternBlock",
        "type_short": "AssemblyPatternBlock",
        "comment": ""
      },
      "throws": []
    }
  ]
}
