{
  "name": "Assemblers",
  "comment": "The primary class for obtaining an Assembler for a Ghidra-supported language.\n \n \n The general flow is: First, obtain an assembler for a language or program. Second, call its\n Assembler#assemble(Address, String...) and related methods to perform assembly. More\n advanced uses pass a AssemblySelector to control certain aspects of assembly instruction\n selection, and to obtain advanced diagnostics, like detailed errors and code completion.\n \n \n Assembler asm \u003d Assemblers.getAssembler(currentProgram);\n asm.assemble(currentAddress, \"ADD ...\");\n ",
  "javadoc": "The primary class for obtaining an {@link Assembler} for a Ghidra-supported language.\n \n \u003cp\u003e\n The general flow is: First, obtain an assembler for a language or program. Second, call its\n {@link Assembler#assemble(Address, String...)} and related methods to perform assembly. More\n advanced uses pass a {@link AssemblySelector} to control certain aspects of assembly instruction\n selection, and to obtain advanced diagnostics, like detailed errors and code completion.\n \n \u003cpre\u003e\n Assembler asm \u003d Assemblers.getAssembler(currentProgram);\n asm.assemble(currentAddress, \"ADD ...\");\n \u003c/pre\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "builders",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Map\u003cghidra.program.model.lang.LanguageID,ghidra.app.plugin.assembler.AssemblerBuilder\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBuilderForLang",
      "comment": "Get a builder for the given language, possibly using a cached one.",
      "javadoc": "Get a builder for the given language, possibly using a cached one.\n@param lang the language\n@return the builder for that language, if successful",
      "static": true,
      "params": [
        {
          "name": "lang",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "the language"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.AssemblerBuilder",
        "type_short": "AssemblerBuilder",
        "comment": "the builder for that language, if successful"
      },
      "throws": []
    },
    {
      "name": "getAssembler",
      "comment": "Get an assembler for the given program.\n \n \n Provides an assembler suitable for the program\u0027s language, and bound to the program. Calls to\n its Assembler#assemble() function will cause modifications to the bound program. If this is\n the first time an assembler for the program\u0027s language has been requested, this function may\n take some time to build the assembler.",
      "javadoc": "Get an assembler for the given program.\n \n \u003cp\u003e\n Provides an assembler suitable for the program\u0027s language, and bound to the program. Calls to\n its Assembler#assemble() function will cause modifications to the bound program. If this is\n the first time an assembler for the program\u0027s language has been requested, this function may\n take some time to build the assembler.\n@param selector a method to select a single result from many\n@param program the program for which an assembler is requested\n@return the assembler bound to the given program",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for which an assembler is requested"
        },
        {
          "name": "selector",
          "type_long": "ghidra.app.plugin.assembler.AssemblySelector",
          "type_short": "AssemblySelector",
          "comment": "a method to select a single result from many"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.Assembler",
        "type_short": "Assembler",
        "comment": "the assembler bound to the given program"
      },
      "throws": []
    },
    {
      "name": "getAssembler",
      "comment": "Get an assembler for the given language.\n \n \n Provides a suitable assembler for the given language. Only calls to its\n Assembler#assembleLine() method are valid. If this is the first time a language has been\n requested, this function may take some time to build the assembler. Otherwise, it returns a\n cached assembler.",
      "javadoc": "Get an assembler for the given language.\n \n \u003cp\u003e\n Provides a suitable assembler for the given language. Only calls to its\n Assembler#assembleLine() method are valid. If this is the first time a language has been\n requested, this function may take some time to build the assembler. Otherwise, it returns a\n cached assembler.\n@param selector a method to select a single result from many\n@param lang the language for which an assembler is requested\n@return the assembler for the given language",
      "static": true,
      "params": [
        {
          "name": "lang",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "the language for which an assembler is requested"
        },
        {
          "name": "selector",
          "type_long": "ghidra.app.plugin.assembler.AssemblySelector",
          "type_short": "AssemblySelector",
          "comment": "a method to select a single result from many"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.Assembler",
        "type_short": "Assembler",
        "comment": "the assembler for the given language"
      },
      "throws": []
    },
    {
      "name": "getAssembler",
      "comment": "Get an assembler for the given program.",
      "javadoc": "Get an assembler for the given program.\n@see #getAssembler(Program, AssemblySelector)\n@param program the program\n@return a suitable assembler",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.Assembler",
        "type_short": "Assembler",
        "comment": "a suitable assembler"
      },
      "throws": []
    },
    {
      "name": "getAssembler",
      "comment": "Get an assembler for the given language.",
      "javadoc": "Get an assembler for the given language.\n@see #getAssembler(Language, AssemblySelector)\n@param lang the language\n@return a suitable assembler",
      "static": true,
      "params": [
        {
          "name": "lang",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "the language"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.assembler.Assembler",
        "type_short": "Assembler",
        "comment": "a suitable assembler"
      },
      "throws": []
    }
  ]
}
