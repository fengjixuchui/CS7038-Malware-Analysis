{
  "name": "GccAnalysisUtils",
  "comment": "Utility methods for use by the gcc exception handling analysis.",
  "javadoc": "Utility methods for use by the gcc exception handling analysis.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readByte",
      "comment": "Reads a byte from the program\u0027s memory at the indicated address.",
      "javadoc": "Reads a byte from the program\u0027s memory at the indicated address.\n@param program the program containing the byte to read\n@param addr the address to start reading\n@return the byte\n@throws MemoryAccessException if the byte can\u0027t be read.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the byte to read"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to start reading"
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the byte"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the byte can\u0027t be read."
        }
      ]
    },
    {
      "name": "readWord",
      "comment": "Reads a word from the program\u0027s memory starting at the indicated address.",
      "javadoc": "Reads a word from the program\u0027s memory starting at the indicated address.\n@param program the program containing the bytes to read\n@param addr the address to start reading\n@return the word\n@throws MemoryAccessException if 2 bytes can\u0027t be read.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the bytes to read"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to start reading"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the word"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if 2 bytes can\u0027t be read."
        }
      ]
    },
    {
      "name": "readDWord",
      "comment": "Reads a double word from the program\u0027s memory starting at the indicated address.",
      "javadoc": "Reads a double word from the program\u0027s memory starting at the indicated address.\n@param program the program containing the bytes to read\n@param addr the address to start reading\n@return the double word\n@throws MemoryAccessException if 4 bytes can\u0027t be read.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the bytes to read"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to start reading"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the double word"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if 4 bytes can\u0027t be read."
        }
      ]
    },
    {
      "name": "readQWord",
      "comment": "Reads a quad word from the program\u0027s memory starting at the indicated address.",
      "javadoc": "Reads a quad word from the program\u0027s memory starting at the indicated address.\n@param program the program containing the bytes to read\n@param addr the address to start reading\n@return the quad word\n@throws MemoryAccessException if 8 bytes can\u0027t be read.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the bytes to read"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to start reading"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the quad word"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if 8 bytes can\u0027t be read."
        }
      ]
    },
    {
      "name": "readBytes",
      "comment": "Reads buffer.length number of bytes from the program\u0027s memory starting at the indicated address.",
      "javadoc": "Reads buffer.length number of bytes from the program\u0027s memory starting at the indicated address.\n@param program the program containing the bytes to read\n@param addr the address to start reading\n@param buffer the array to save the bytes that were read.\n@throws MemoryAccessException if the expected number of bytes can\u0027t be read.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the bytes to read"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to start reading"
        },
        {
          "name": "buffer",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the array to save the bytes that were read."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the expected number of bytes can\u0027t be read."
        }
      ]
    },
    {
      "name": "readULEB128",
      "comment": "Reads an unsigned little endian base 128 integer from memory.",
      "javadoc": "Reads an unsigned little endian base 128 integer from memory.\n@param program the program with memory to be read.\n@param addr the address in memory to begin reading the unsigned LEB128.\n@return the unsigned LEB128 integer.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program with memory to be read."
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address in memory to begin reading the unsigned LEB128."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the unsigned LEB128 integer."
      },
      "throws": []
    },
    {
      "name": "getULEB128Length",
      "comment": "Gets the size of an unsigned little endian base 128 integer.",
      "javadoc": "Gets the size of an unsigned little endian base 128 integer.\n@param program the program with memory to be read.\n@param addr the address in memory to begin reading the unsigned LEB128.\n@return the length of the unsigned LEB128 integer.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program with memory to be read."
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address in memory to begin reading the unsigned LEB128."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of the unsigned LEB128 integer."
      },
      "throws": []
    },
    {
      "name": "readSLEB128",
      "comment": "Reads an signed little endian base 128 integer from memory.",
      "javadoc": "Reads an signed little endian base 128 integer from memory.\n@param program the program with memory to be read.\n@param addr the address in memory to begin reading the signed LEB128.\n@return the signed LEB128 integer.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program with memory to be read."
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address in memory to begin reading the signed LEB128."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the signed LEB128 integer."
      },
      "throws": []
    },
    {
      "name": "getSLEB128Length",
      "comment": "Gets the size of a signed little endian base 128 integer.",
      "javadoc": "Gets the size of a signed little endian base 128 integer.\n@param program the program with memory to be read.\n@param addr the address in memory to begin reading the signed LEB128.\n@return the length of the signed LEB128 integer.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program with memory to be read."
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address in memory to begin reading the signed LEB128."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of the signed LEB128 integer."
      },
      "throws": []
    }
  ]
}
