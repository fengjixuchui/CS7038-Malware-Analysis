{
  "name": "EhFrameHeaderSection",
  "comment": "Parses the exception handling structures within an \u0027.eh_frame_hdr\u0027 memory section; contains \n the frame header record and the FDE table.",
  "javadoc": "Parses the exception handling structures within an \u0027.eh_frame_hdr\u0027 memory section; contains \n the frame header record and the FDE table.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "EH_FRAME_HEADER_BLOCK_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\".eh_frame_hdr\""
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for an eh frame header section.",
      "javadoc": "Constructor for an eh frame header section.\n@param program the program containing this eh frame header.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing this eh frame header."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "analyze",
      "comment": "Analyzes and annotates the eh frame header.",
      "javadoc": "Analyzes and annotates the eh frame header.\n@param monitor a status monitor for indicating progress or allowing a task to be cancelled.\n@return the number of records in the FDE table or 0 if there was no EH frame header to analyze.\n@throws MemoryAccessException if memory couldn\u0027t be read/written while processing the header.\n@throws AddressOutOfBoundsException if one or more expected addresses weren\u0027t in the program.\n@throws ExceptionHandlerFrameException if the FDE table can\u0027t be decoded.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a status monitor for indicating progress or allowing a task to be cancelled."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of records in the FDE table or 0 if there was no EH frame header to analyze."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory couldn\u0027t be read/written while processing the header."
        },
        {
          "type_long": "ghidra.program.model.address.AddressOutOfBoundsException",
          "type_short": "AddressOutOfBoundsException",
          "comment": "if one or more expected addresses weren\u0027t in the program."
        },
        {
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameException",
          "type_short": "ExceptionHandlerFrameException",
          "comment": "if the FDE table can\u0027t be decoded."
        }
      ]
    },
    {
      "name": "analyzeSection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "curMemBlock",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.address.AddressOutOfBoundsException",
          "type_short": "AddressOutOfBoundsException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameException",
          "type_short": "ExceptionHandlerFrameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processEncodedFdeCount",
      "comment": "Create the data field for the number of entries in the FDE table \n and add an identifying comment.",
      "javadoc": "Create the data field for the number of entries in the FDE table \n and add an identifying comment.\n@param curAddress address of the FDE count field\n@param fdeDecoder decoder to use in determining data type for this field\n@return the next address after the FDE count field",
      "static": false,
      "params": [
        {
          "name": "curAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of the FDE count field"
        },
        {
          "name": "fdeDecoder",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDecoder",
          "type_short": "DwarfEHDecoder",
          "comment": "decoder to use in determining data type for this field"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the next address after the FDE count field"
      },
      "throws": []
    },
    {
      "name": "getFdeCountDecoder",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "eh_frame_hdr",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameHeader",
          "type_short": "ExceptionHandlerFrameHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDecoder",
        "type_short": "DwarfEHDecoder",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processEncodedFramePointer",
      "comment": "Create the data field for the exception handler frame pointer. Also create the associated \n reference, and add an identifying comment.",
      "javadoc": "Create the data field for the exception handler frame pointer. Also create the associated \n reference, and add an identifying comment.\n@param curAddress address of the frame pointer field\n@param eh_frame_hdr the frame header with encoding information\n@param curMemBlock the memory block containing this header\n@return the next address after the frame pointer field\n@throws MemoryAccessException if the field\u0027s memory can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "curAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of the frame pointer field"
        },
        {
          "name": "eh_frame_hdr",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameHeader",
          "type_short": "ExceptionHandlerFrameHeader",
          "comment": "the frame header with encoding information"
        },
        {
          "name": "curMemBlock",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": "the memory block containing this header"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the next address after the frame pointer field"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the field\u0027s memory can\u0027t be read"
        }
      ]
    },
    {
      "name": "getFdeTableCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "countAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "curMemBlock",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": ""
        },
        {
          "name": "fdeDecoder",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDecoder",
          "type_short": "DwarfEHDecoder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFdeTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "curAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "eh_frame_hdr",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameHeader",
          "type_short": "ExceptionHandlerFrameHeader",
          "comment": ""
        },
        {
          "name": "fdeTableCnt",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameException",
          "type_short": "ExceptionHandlerFrameException",
          "comment": ""
        }
      ]
    }
  ]
}
