{
  "name": "GccAnalysisClass",
  "comment": "An abstract class that can be extended by other classes that perform part of the gcc analysis.\n It provides some basic data types and methods for use by the extending class.",
  "javadoc": "An abstract class that can be extended by other classes that perform part of the gcc analysis.\n It provides some basic data types and methods for use by the extending class.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NEWLINE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "monitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "ptrSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "ptrDT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.Pointer",
      "type_short": "Pointer",
      "constant_value": null
    },
    {
      "name": "dwordDT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DWordDataType",
      "type_short": "DWordDataType",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates an abstract GccAnalysisClass object. Subclasses should call this constructor\n to initialize the program and task monitor.",
      "javadoc": "Creates an abstract GccAnalysisClass object. Subclasses should call this constructor\n to initialize the program and task monitor.\n@param monitor task monitor to see if the user has cancelled analysis.\n@param program the program being analyzed.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor to see if the user has cancelled analysis."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program being analyzed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "init",
      "comment": "Method that initializes the various pieces\n of information that are used throughout the\n program.",
      "javadoc": "Method that initializes the various pieces\n of information that are used throughout the\n program.\n@param program the program being analyzed",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program being analyzed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initPointerInfo",
      "comment": "Method that initializes information about the\n program\u0027s pointer size and creates an appropriate\n pointer data type (i.e. ptrDT)",
      "javadoc": "Method that initializes information about the\n program\u0027s pointer size and creates an appropriate\n pointer data type (i.e. ptrDT)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createData",
      "comment": "Creates the specified DataType at the supplied address.",
      "javadoc": "Creates the specified DataType at the supplied address.\n@param program the program being analyzed\n@param addr the address where data is created\n@param dt the type for the data",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program being analyzed"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address where data is created"
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the type for the data"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createAndCommentData",
      "comment": "Creates the specified DataType at the supplied address. In\n addition, a comment of the specified type is also created at the address.",
      "javadoc": "Creates the specified DataType at the supplied address. In\n addition, a comment of the specified type is also created at the address.\n@param program the program being analyzed\n@param addr the address where data is created\n@param dt the type for the data\n@param comment the comment about the data\n@param commentType the type of comment ({@link CodeUnit#PLATE_COMMENT}, \n {@link CodeUnit#PRE_COMMENT}, {@link CodeUnit#EOL_COMMENT}, {@link CodeUnit#POST_COMMENT},\n {@link CodeUnit#REPEATABLE_COMMENT})",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program being analyzed"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address where data is created"
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the type for the data"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the comment about the data"
        },
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": "the type of comment (CodeUnit#PLATE_COMMENT, \n CodeUnit#PRE_COMMENT, CodeUnit#EOL_COMMENT, CodeUnit#POST_COMMENT,\n CodeUnit#REPEATABLE_COMMENT)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
