{
  "name": "FrameDescriptionEntry",
  "comment": "A Frame Description Entry (FDE) describes the \n stack call frame, in particular, how to restore\n registers.\n \n Taken from binutils-2.14.90.0.4/bfd/elf-bfd.h\n \n struct eh_cie_fde { \n \t\tunsigned int offset; \n \t\tunsigned int size; \n \t\tasection *sec;\n \t\tunsigned int new_offset; \n \t\tunsigned char fde_encoding; \n \t\tunsigned char *lsda_encoding; \n \t\tunsigned char lsda_offset; \n \t\tunsigned char cie : 1; \n \t\tunsigned char removed : 1; \n \t\tunsigned char make_relative : 1; \n \t\tunsigned char make_lsda_relative : 1; \n \t\tunsigned char per_encoding_relative : 1; \n };\n \n \n ACTUAL: struct eh_cie_fde { \n \t\tdword fde.length \n \t\tdword fde.ciePointer (Offset to this FDEs CIE) \n \t\tdword fde.pcBegin \n \t\tdword fde.pcRange \n \t\tdword fde.augmentationLength \n \t\tdword fde.augmentationData \n \t\tdword Call Frame Instructions dword \n \t\t!!! NO IDEA !!! \n }\n ",
  "javadoc": "A Frame Description Entry (FDE) describes the \n stack call frame, in particular, how to restore\n registers.\n \u003cp\u003e\n Taken from binutils-2.14.90.0.4/bfd/elf-bfd.h\n \u003cpre\u003e\n struct eh_cie_fde { \n \t\tunsigned int offset; \n \t\tunsigned int size; \n \t\tasection *sec;\n \t\tunsigned int new_offset; \n \t\tunsigned char fde_encoding; \n \t\tunsigned char *lsda_encoding; \n \t\tunsigned char lsda_offset; \n \t\tunsigned char cie : 1; \n \t\tunsigned char removed : 1; \n \t\tunsigned char make_relative : 1; \n \t\tunsigned char make_lsda_relative : 1; \n \t\tunsigned char per_encoding_relative : 1; \n };\n \u003c/pre\u003e\n \u003cpre\u003e\n ACTUAL: struct eh_cie_fde { \n \t\tdword fde.length \n \t\tdword fde.ciePointer (Offset to this FDEs CIE) \n \t\tdword fde.pcBegin \n \t\tdword fde.pcRange \n \t\tdword fde.augmentationLength \n \t\tdword fde.augmentationData \n \t\tdword Call Frame Instructions dword \n \t\t!!! NO IDEA !!! \n }\n \u003c/pre\u003e",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.exceptionhandlers.gcc.GccAnalysisClass",
  "fields": [
    {
      "name": "DWORD_LEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "QWORD_LEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "BYTE_LEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "augmentationData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "augmentationDataEx",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "callFrameInstructions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "hasExtLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "endOfFrame",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "intLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "intPtr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "intAugmentationDataLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "intAugmentationDataExLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "intPcRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "curSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "cieSource",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.sections.CieSource",
      "type_short": "CieSource",
      "constant_value": null
    },
    {
      "name": "cie",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.Cie",
      "type_short": "Cie",
      "constant_value": null
    },
    {
      "name": "baseAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "cieAugmentationString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "nextAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "pcBeginAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "pcEndAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "augmentationDataAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "augmentationDataExAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for a frame descriptor entry.\n Note: The create(Address) method must be called after constructing a \n FrameDescriptionEntry to associate it with an address before any of its \n \"get...\" methods are called.",
      "javadoc": "Constructor for a frame descriptor entry.\n \u003cbr\u003eNote: The \u003ccode\u003ecreate(Address)\u003c/code\u003e method must be called after constructing a \n \u003ccode\u003eFrameDescriptionEntry\u003c/code\u003e to associate it with an address before any of its \n \"get...\" methods are called.\n@param monitor a status monitor for tracking progress and allowing cancelling when creating\n an FDE.\n@param program the program where this will create an FDE.\n@param cieSource the call frame information entry for this FDE.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a status monitor for tracking progress and allowing cancelling when creating\n an FDE."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program where this will create an FDE."
        },
        {
          "name": "cieSource",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.sections.CieSource",
          "type_short": "CieSource",
          "comment": "the call frame information entry for this FDE."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPointerDecodeSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "theProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressSizeDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createFdeLength",
      "comment": "Creates the FDE Length field at the specified address.",
      "javadoc": "Creates the FDE Length field at the specified address.\n@param addr Address at which the FDE length field should be created.\n@return Address immediately following the FDE Length field.\n@throws MemoryAccessException if the required memory can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the FDE length field should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the FDE Length field."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the required memory can\u0027t be read"
        }
      ]
    },
    {
      "name": "createCiePointer",
      "comment": "Creates the pointer to this FDE\u0027s associated CIE",
      "javadoc": "Creates the pointer to this FDE\u0027s associated CIE\n@param addr Address at which the CIE Pointer should be created.\n@return Address immediately following the CIE Pointer field.\n@throws MemoryAccessException if the required memory can\u0027t be read\n@throws ExceptionHandlerFrameException if there is an error creating the information.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the CIE Pointer should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the CIE Pointer field."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the required memory can\u0027t be read"
        },
        {
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameException",
          "type_short": "ExceptionHandlerFrameException",
          "comment": "if there is an error creating the information."
        }
      ]
    },
    {
      "name": "isInDebugFrame",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createPcBegin",
      "comment": "Creates the PcBegin field at the specified Address.",
      "javadoc": "Creates the PcBegin field at the specified Address.\n@param addr Address at which the PcBegin field should be created.\n@param region the region descriptor for this FDE\n@return Address immediately following the PcBegin field.\n@throws ExceptionHandlerFrameException if there is an error creating the information.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the PcBegin field should be created."
        },
        {
          "name": "region",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
          "type_short": "RegionDescriptor",
          "comment": "the region descriptor for this FDE"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the PcBegin field."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameException",
          "type_short": "ExceptionHandlerFrameException",
          "comment": "if there is an error creating the information."
        }
      ]
    },
    {
      "name": "createPcRange",
      "comment": "Creates the PcRange field at the specified Address.",
      "javadoc": "Creates the PcRange field at the specified Address.\n@param addr Address at which the PcRange field should be created.\n@return Address immediately following the PcRange field\n or null if next address would be out of bounds.\n@throws ExceptionHandlerFrameException if there is an error creating the information.\n@throws MemoryAccessException if the required memory can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the PcRange field should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the PcRange field\n or null if next address would be out of bounds."
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameException",
          "type_short": "ExceptionHandlerFrameException",
          "comment": "if there is an error creating the information."
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the required memory can\u0027t be read"
        }
      ]
    },
    {
      "name": "createAugmentationDataLength",
      "comment": "Creates the Augmentation Data Length field at the specified Address.",
      "javadoc": "Creates the Augmentation Data Length field at the specified Address.\n@param addr Address at which the Augmentation Data length should be created.\n@return Address immediately following the Augmentation Data length field.\n@throws MemoryAccessException if the required memory can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the Augmentation Data length should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the Augmentation Data length field."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the required memory can\u0027t be read"
        }
      ]
    },
    {
      "name": "createAugmentationData",
      "comment": "Creates the Augmentation Data at the specified Address.",
      "javadoc": "Creates the Augmentation Data at the specified Address.\n@param addr Address at which the Augmentation Data should be created.\n@return Address immediately following the Augmentation Data field.\n@throws MemoryAccessException if the required memory can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the Augmentation Data should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the Augmentation Data field."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the required memory can\u0027t be read"
        }
      ]
    },
    {
      "name": "createCallFrameInstructions",
      "comment": "Creates the Call Frame Instructions at the specified Address.",
      "javadoc": "Creates the Call Frame Instructions at the specified Address.\n@param addr Address at which the Call Frame Instructions should be created.\n@return Address immediately following the Call Frame Instructions.\n@throws MemoryAccessException if the required memory can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the Call Frame Instructions should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the Call Frame Instructions."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the required memory can\u0027t be read"
        }
      ]
    },
    {
      "name": "create",
      "comment": "Creates a Frame Description Entry (FDE) at the address\n specified.\n Note: This method must get called before any of the \"get...\" methods.",
      "javadoc": "Creates a Frame Description Entry (FDE) at the address\n specified.\n \u003cbr\u003eNote: This method must get called before any of the \"get...\" methods.\n@param fdeBaseAddress Address where the FDE should be created.\n@return a region descriptor which holds information about this FDE. Otherwise, null.\n@throws MemoryAccessException if memory for the FDE or its associated data can\u0027t be accessed\n@throws ExceptionHandlerFrameException if there is an error creating the FDE information.",
      "static": false,
      "params": [
        {
          "name": "fdeBaseAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address where the FDE should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
        "type_short": "RegionDescriptor",
        "comment": "a region descriptor which holds information about this FDE. Otherwise, null."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the FDE or its associated data can\u0027t be accessed"
        },
        {
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameException",
          "type_short": "ExceptionHandlerFrameException",
          "comment": "if there is an error creating the FDE information."
        }
      ]
    },
    {
      "name": "markEndOfFrame",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createExtendedLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createAugmentationFields",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFdeLabel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fdeBase",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createAugmentationInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ehblock",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": ""
        },
        {
          "name": "region",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
          "type_short": "RegionDescriptor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createLsda",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ehblock",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": ""
        },
        {
          "name": "region",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
          "type_short": "RegionDescriptor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getNextAddress",
      "comment": "Gets the next address in memory after this FDE record.",
      "javadoc": "Gets the next address in memory after this FDE record.\n@return the next address after this FDE or null if at the end of the section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the next address after this FDE or null if at the end of the section"
      },
      "throws": []
    },
    {
      "name": "isEndOfFrame",
      "comment": "Determines if this FDE encountered a zero length record, which indicates the end of \n the frame.",
      "javadoc": "Determines if this FDE encountered a zero length record, which indicates the end of \n the frame.\n@return true if we are at end of frame due to encountering a zero length record.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if we are at end of frame due to encountering a zero length record."
      },
      "throws": []
    },
    {
      "name": "getProtectionRange",
      "comment": "Get the address range that contains the program instructions.",
      "javadoc": "Get the address range that contains the program instructions.\n@return the address range",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": "the address range"
      },
      "throws": []
    },
    {
      "name": "getAugmentationDataAddress",
      "comment": "Get the address of the augmentation data in this FDE record.",
      "javadoc": "Get the address of the augmentation data in this FDE record.\n@return the augmentation data field\u0027s address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the augmentation data field\u0027s address"
      },
      "throws": []
    },
    {
      "name": "getAugmentationData",
      "comment": "Gets the bytes which specify the FDE field that refers to the augmentation data.",
      "javadoc": "Gets the bytes which specify the FDE field that refers to the augmentation data.\n@return the FDE record\u0027s augmentation data.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the FDE record\u0027s augmentation data."
      },
      "throws": []
    },
    {
      "name": "getAugmentationExDataAddress",
      "comment": "Gets the start address for the call frame augmentation data.",
      "javadoc": "Gets the start address for the call frame augmentation data.\n@return the address of the call frame augmentation data",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address of the call frame augmentation data"
      },
      "throws": []
    },
    {
      "name": "setAugmentationDataExLength",
      "comment": "Sets the value this region descriptor maintains to indicate the length of the \n augmentation data.",
      "javadoc": "Sets the value this region descriptor maintains to indicate the length of the \n augmentation data.\n@param len number of bytes that compose the augmentation data\n@return the length of the augmentation data or -1 if it has already been set.",
      "static": false,
      "params": [
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes that compose the augmentation data"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of the augmentation data or -1 if it has already been set."
      },
      "throws": []
    },
    {
      "name": "updateAugmentationDataEx",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getAugmentationExData",
      "comment": "Gets the call frame augmentation data that indicates how registers are saved and restored.",
      "javadoc": "Gets the call frame augmentation data that indicates how registers are saved and restored.\n@return the augmentation data",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the augmentation data"
      },
      "throws": []
    }
  ]
}
