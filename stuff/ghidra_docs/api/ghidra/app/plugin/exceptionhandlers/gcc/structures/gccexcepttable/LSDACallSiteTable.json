{
  "name": "LSDACallSiteTable",
  "comment": "Defines the specific program regions that may throw an exception within the \n context of the LSDA.",
  "javadoc": "Defines the specific program regions that may throw an exception within the \n context of the LSDA.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.exceptionhandlers.gcc.GccAnalysisClass",
  "fields": [
    {
      "name": "bounds",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressRange",
      "type_short": "AddressRange",
      "constant_value": null
    },
    {
      "name": "nextAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "region",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
      "type_short": "RegionDescriptor",
      "constant_value": null
    },
    {
      "name": "records",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDACallSiteRecord\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for a call site table.\n Note: The create(Address) method must be called after constructing an \n LSDACallSiteTable to associate it with an address before any of its \"get...\" methods are called.",
      "javadoc": "Constructor for a call site table.\n \u003cbr\u003eNote: The \u003ccode\u003ecreate(Address)\u003c/code\u003e method must be called after constructing an \n LSDACallSiteTable to associate it with an address before any of its \"get...\" methods are called.\n@param monitor task monitor to see if the user has cancelled analysis.\n@param program the program containing the call site table.\n@param region the region of the program associated with the call site table.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor to see if the user has cancelled analysis."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the call site table."
        },
        {
          "name": "region",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
          "type_short": "RegionDescriptor",
          "comment": "the region of the program associated with the call site table."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "create",
      "comment": "Create a LSDA Call Site Table from the bytes at addr.\n Note: This method must get called before any of the \"get...\" methods.",
      "javadoc": "Create a LSDA Call Site Table from the bytes at \u003ccode\u003eaddr\u003c/code\u003e.\n \u003cbr\u003eNote: This method must get called before any of the \"get...\" methods.\n@param addr the start (minimum address) of this call site table.\n@throws MemoryAccessException if memory couldn\u0027t be accessed for the call site table",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start (minimum address) of this call site table."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory couldn\u0027t be accessed for the call site table"
        }
      ]
    },
    {
      "name": "getTableEndAddress",
      "comment": "Gets the end address of this call site table.",
      "javadoc": "Gets the end address of this call site table.\n@return the table\u0027s end address.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the table\u0027s end address."
      },
      "throws": []
    },
    {
      "name": "getNextAddress",
      "comment": "Gets the next address indicating the address after this call site table.",
      "javadoc": "Gets the next address indicating the address after this call site table.\n@return the next address after this call site table or null if this table hasn\u0027t been \n created at any address yet.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the next address after this call site table or null if this table hasn\u0027t been \n created at any address yet."
      },
      "throws": []
    },
    {
      "name": "getCallSiteRecords",
      "comment": "Gets all of the call site records in this table.",
      "javadoc": "Gets all of the call site records in this table.\n@return the call site records in this table or empty if no address has been established for \n this table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDACallSiteRecord\u003e",
        "type_short": "List",
        "comment": "the call site records in this table or empty if no address has been established for \n this table."
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "container",
          "type_long": "ghidra.program.model.address.AddressRange",
          "type_short": "AddressRange",
          "comment": ""
        },
        {
          "name": "child",
          "type_long": "ghidra.program.model.address.AddressRange",
          "type_short": "AddressRange",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "verifyCallSiteRecord",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rec",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDACallSiteRecord",
          "type_short": "LSDACallSiteRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
