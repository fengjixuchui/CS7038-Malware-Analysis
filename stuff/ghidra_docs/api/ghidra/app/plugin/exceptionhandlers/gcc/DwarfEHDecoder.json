{
  "name": "DwarfEHDecoder",
  "comment": "Decodes a sequence of program bytes to Ghidra addressing types.",
  "javadoc": "Decodes a sequence of program bytes to Ghidra addressing types.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getDataFormat",
      "comment": "Gets the exception handling data decoding format.",
      "javadoc": "Gets the exception handling data decoding format.\n@return the data decoding format",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDataDecodeFormat",
        "type_short": "DwarfEHDataDecodeFormat",
        "comment": "the data decoding format"
      },
      "throws": []
    },
    {
      "name": "getDataApplicationMode",
      "comment": "Gets the data application mode.",
      "javadoc": "Gets the data application mode.\n@return the data application mode",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDataApplicationMode",
        "type_short": "DwarfEHDataApplicationMode",
        "comment": "the data application mode"
      },
      "throws": []
    },
    {
      "name": "isSigned",
      "comment": "Whether or not this decoder is for decoding signed or unsigned data.",
      "javadoc": "Whether or not this decoder is for decoding signed or unsigned data.\n@return true if the decoder is for signed data. false for unsigned",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the decoder is for signed data. false for unsigned"
      },
      "throws": []
    },
    {
      "name": "getDecodeSize",
      "comment": "Gets the size of the encoded data.",
      "javadoc": "Gets the size of the encoded data.\n@param program the program containing the data to be decoded.\n@return the size of the encoded data",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the data to be decoded."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of the encoded data"
      },
      "throws": []
    },
    {
      "name": "decode",
      "comment": "Decodes an integer value which is indicated by the context.",
      "javadoc": "Decodes an integer value which is indicated by the context.\n@param context Stores program location and decode parameters\n@return the value\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfDecodeContext",
          "type_short": "DwarfDecodeContext",
          "comment": "Stores program location and decode parameters"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the value"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "decodeAddress",
      "comment": "Decodes the address which is indicated by the context.",
      "javadoc": "Decodes the address which is indicated by the context.\n@param context Stores program location and decode parameters\n@return the address\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfDecodeContext",
          "type_short": "DwarfDecodeContext",
          "comment": "Stores program location and decode parameters"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "getDataType",
      "comment": "Gets this decoder\u0027s encoded data type.",
      "javadoc": "Gets this decoder\u0027s encoded data type.\n@param program the program containing the data to be decoded.\n@return the data type.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the data to be decoded."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the data type."
      },
      "throws": []
    }
  ]
}
