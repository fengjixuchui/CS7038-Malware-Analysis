{
  "name": "Cie",
  "comment": "A Common Information Entry (CIE) holds information that is shared among many\n Frame Description Entries (FDEs). There is at least one CIE in every\n non-empty .debug_frame section.\n \n The structures modeled here are described in detail in the C++ ABI.",
  "javadoc": "A Common Information Entry (CIE) holds information that is shared among many\n Frame Description Entries (FDEs). There is at least one CIE in every\n non-empty .debug_frame section.\n \u003cp\u003e\n The structures modeled here are described in detail in the C++ ABI.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.exceptionhandlers.gcc.GccAnalysisClass",
  "fields": [
    {
      "name": "DWORD_LEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "QWORD_LEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "BYTE_LEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "isInDebugFrame",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "endOfFrame",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "enc_length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "intLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "enc_extLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "hasExtLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "enc_cieId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "cieId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "version",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "augmentationString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "segmentSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "codeAlignFactor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "dataAlignFactor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "returnAddrRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "augmentationDataLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "augmentationData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "initialInstructions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "curSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "baseAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "nextAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "fdeEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "lsdaEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "personalityFuncAddrEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "personalityFuncAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "initialInstructionCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a common information entry object that is not in the debug frame section.\n Note: The create(Address) method must be called after constructing a \n Cie to associate it with an address before any of its \"process...\" methods are called.",
      "javadoc": "Creates a common information entry object that is not in the debug frame section.\n \u003cp\u003eNote: The \u003ccode\u003ecreate(Address)\u003c/code\u003e method must be called after constructing a \n \u003ccode\u003eCie\u003c/code\u003e to associate it with an address before any of its \"process...\" methods are called.\n@param monitor task monitor to see if the user has cancelled analysis.\n@param program the program containing the CIE.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor to see if the user has cancelled analysis."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the CIE."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a common information entry object.\n Note: The create(Address) method must be called after constructing a \n Cie to associate it with an address before any of its \"process...\" methods are called.",
      "javadoc": "Creates a common information entry object.\n \u003cp\u003eNote: The \u003ccode\u003ecreate(Address)\u003c/code\u003e method must be called after constructing a \n \u003ccode\u003eCie\u003c/code\u003e to associate it with an address before any of its \"process...\" methods are called.\n@param monitor task monitor to see if the user has cancelled analysis.\n@param program the program containing the CIE.\n@param isInDebugFrame true if this CIE is in the debug frame section",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor to see if the user has cancelled analysis."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the CIE."
        },
        {
          "name": "isInDebugFrame",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if this CIE is in the debug frame section"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInDebugFrame",
      "comment": "Determines if this CIE is in the debug frame section.",
      "javadoc": "Determines if this CIE is in the debug frame section.\n@return true if in the debug frame section.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if in the debug frame section."
      },
      "throws": []
    },
    {
      "name": "processCieLength",
      "comment": "Creates the CIE Length field at the specified location.",
      "javadoc": "Creates the CIE Length field at the specified location.\n@param addr Address at which the CIE Length field should be created.\n@return Address immediately following the CIE length field.\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the CIE Length field should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the CIE length field."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read."
        }
      ]
    },
    {
      "name": "processCieId",
      "comment": "Creates the CIE ID field at the specified Address.",
      "javadoc": "Creates the CIE ID field at the specified Address.\n@param addr Address at which the CIE ID field should be created.\n@return Address immediately following the CIE ID field.\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the CIE ID field should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the CIE ID field."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read."
        }
      ]
    },
    {
      "name": "processVersion",
      "comment": "Creates the CIE Version field at the specified location.",
      "javadoc": "Creates the CIE Version field at the specified location.\n@param addr Address at which the CIE version field should be created.\n@return Address immediately following the CIE version field.\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the CIE version field should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the CIE version field."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read."
        }
      ]
    },
    {
      "name": "processAugmentationString",
      "comment": "Creates the CIE Augmentation String. This is a\n case-sensitive, NUL terminated string that identifies the augmentation\n to the CIE or to the FDEs associated with this CIE. A zero length string\n indicates that no augmentation data is present.",
      "javadoc": "Creates the CIE Augmentation String. This is a\n case-sensitive, NUL terminated string that identifies the augmentation\n to the CIE or to the FDEs associated with this CIE. A zero length string\n indicates that no augmentation data is present.\n@param addr Address at which the Augmentation String should be created.\n@return Address immediately following the Augmentation String.\n@throws ExceptionHandlerFrameException if the augmentation string couldn\u0027t be created.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the Augmentation String should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the Augmentation String."
      },
      "throws": [
        {
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameException",
          "type_short": "ExceptionHandlerFrameException",
          "comment": "if the augmentation string couldn\u0027t be created."
        }
      ]
    },
    {
      "name": "processPointerSize",
      "comment": "Creates the CIE Pointer Size field at the specified location\n (CIE version 4+).",
      "javadoc": "Creates the CIE Pointer Size field at the specified location\n (CIE version 4+).\n@param addr Address at which the CIE pointer size field should be created.\n@return Address immediately following the CIE pointer size field.\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the CIE pointer size field should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the CIE pointer size field."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read."
        }
      ]
    },
    {
      "name": "processSegmentSize",
      "comment": "Creates the CIE Segment Size field at the specified location\n (CIE version 4+).",
      "javadoc": "Creates the CIE Segment Size field at the specified location\n (CIE version 4+).\n@param addr Address at which the CIE segment size field should be created.\n@return Address immediately following the CIE segment size field.\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the CIE segment size field should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the CIE segment size field."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read."
        }
      ]
    },
    {
      "name": "processCodeAlign",
      "comment": "Creates the CIE Code Alignment Factor Field.",
      "javadoc": "Creates the CIE Code Alignment Factor Field.\n@param addr Address at which the Code Alignment Factor field should be created.\n@return Address immediately following the Code Alignment Factor field.\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the Code Alignment Factor field should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the Code Alignment Factor field."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read."
        }
      ]
    },
    {
      "name": "processDataAlign",
      "comment": "Creates the CIE Data Alignment Factor field.",
      "javadoc": "Creates the CIE Data Alignment Factor field.\n@param addr Address at which the Data Alignment Factor field should be created.\n@return Address immediately following the Data Alignment Factor field.\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the Data Alignment Factor field should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the Data Alignment Factor field."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read."
        }
      ]
    },
    {
      "name": "processReturnAddrRegister",
      "comment": "Creates the CIE Return Address Register field.",
      "javadoc": "Creates the CIE Return Address Register field.\n@param addr Address at which the Return Address Register field should be created.\n@return Address immediately following the Return Address field.\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the Return Address Register field should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the Return Address field."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read."
        }
      ]
    },
    {
      "name": "processAugmentationDataLength",
      "comment": "Creates the CIE augmentation data length.",
      "javadoc": "Creates the CIE augmentation data length.\n@param addr Address at which the augmentation data length field should be created.\n@return Address immediately following the augmentation data length.\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the augmentation data length field should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the augmentation data length."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read."
        }
      ]
    },
    {
      "name": "grabAugmentationData",
      "comment": "Reads the CIE Augmentation Data and holds it in this class. This block of data is\n defined by the contents of the Augmentation String and is only present if\n the Augmentation string contains the character \u0027z\u0027. Length of this string\n is given by the Augmentation length.",
      "javadoc": "Reads the CIE Augmentation Data and holds it in this class. This block of data is\n defined by the contents of the Augmentation String and is only present if\n the Augmentation string contains the character \u0027z\u0027. Length of this string\n is given by the Augmentation length.\n@param addr Address at which the Augmentation Data array should be created.\n@return Address immediately following the Augmentation Data\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the Augmentation Data array should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the Augmentation Data"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read."
        }
      ]
    },
    {
      "name": "processInitialInstructions",
      "comment": "Creates the initial set of Call Frame instructions. The\n number of instructions is determined by the remaining space in the CIE\n record.",
      "javadoc": "Creates the initial set of Call Frame instructions. The\n number of instructions is determined by the remaining space in the CIE\n record.\n@param addr Address at which the initial instructions array should be created.\n@return Address immediately following the initial instructions array\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address at which the initial instructions array should be created."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the initial instructions array"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read."
        }
      ]
    },
    {
      "name": "create",
      "comment": "Creates a Common Information Entry (CIE) at cieAddress. \n Note: This method must get called before any of the \"get...\" methods.",
      "javadoc": "Creates a Common Information Entry (CIE) at \u003ccode\u003ecieAddress\u003c/code\u003e. \n \u003cbr\u003eNote: This method must get called before any of the \"get...\" methods.\n@param cieAddress the address where the CIE should be created.\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read.\n@throws ExceptionHandlerFrameException if some of the CIE information couldn\u0027t be created.",
      "static": false,
      "params": [
        {
          "name": "cieAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address where the CIE should be created."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read."
        },
        {
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameException",
          "type_short": "ExceptionHandlerFrameException",
          "comment": "if some of the CIE information couldn\u0027t be created."
        }
      ]
    },
    {
      "name": "markEndOfFrame",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIntegerLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processExtendedLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processAugmentationInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processLsdaEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "augmentationDataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "augmentationDataIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "augData",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processFdeEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "augmentationDataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "augmentationDataIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "augData",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processPersonalityEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "augmentationDataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "augmentationDataIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "augData",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDecoder",
        "type_short": "DwarfEHDecoder",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processPersonalityFunctionPointer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "augmentationDataAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "augmentationDataIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "personalityDecoder",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDecoder",
          "type_short": "DwarfEHDecoder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfDecodeContext",
        "type_short": "DwarfDecodeContext",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getNextAddress",
      "comment": "Method that returns the address immediately following the Common Information Entry",
      "javadoc": "Method that returns the address immediately following the Common Information Entry\n@return Address immediately following the CIE",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address immediately following the CIE"
      },
      "throws": []
    },
    {
      "name": "getAugmentationString",
      "comment": "Gets the augmentation string which indicates optional fields and how to interpret them.",
      "javadoc": "Gets the augmentation string which indicates optional fields and how to interpret them.\n@return the augmentation string.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the augmentation string."
      },
      "throws": []
    },
    {
      "name": "getFDEEncoding",
      "comment": "Gets the indicator for the FDE address pointer encoding.",
      "javadoc": "Gets the indicator for the FDE address pointer encoding.\n@return the FDE address pointer encoding.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the FDE address pointer encoding."
      },
      "throws": []
    },
    {
      "name": "getFDEDecoder",
      "comment": "Gets the decoder for the FDE that is associated with this CIE.",
      "javadoc": "Gets the decoder for the FDE that is associated with this CIE.\n@return the decoder for the FDE",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDecoder",
        "type_short": "DwarfEHDecoder",
        "comment": "the decoder for the FDE"
      },
      "throws": []
    },
    {
      "name": "getLSDAEncoding",
      "comment": "Gets the indicator for the LSDA pointer encoding.",
      "javadoc": "Gets the indicator for the LSDA pointer encoding.\n@return the LSDA pointer encoding.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the LSDA pointer encoding."
      },
      "throws": []
    },
    {
      "name": "getLSDADecoder",
      "comment": "Gets the decoder for the LSDA that is associated with this CIE.",
      "javadoc": "Gets the decoder for the LSDA that is associated with this CIE.\n@return the decoder for the LSDA",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDecoder",
        "type_short": "DwarfEHDecoder",
        "comment": "the decoder for the LSDA"
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Gets the address where this CIE is located in the program.",
      "javadoc": "Gets the address where this CIE is located in the program.\n@return the address of this CIE.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address of this CIE."
      },
      "throws": []
    },
    {
      "name": "getDataAlignment",
      "comment": "Gets the value of the data alignment factor for this CIE record.",
      "javadoc": "Gets the value of the data alignment factor for this CIE record.\n@return the data alignment factor",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the data alignment factor"
      },
      "throws": []
    },
    {
      "name": "getCodeAlignment",
      "comment": "Gets the value of the code alignment factor for this CIE record.",
      "javadoc": "Gets the value of the code alignment factor for this CIE record.\n@return the code alignment factor",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the code alignment factor"
      },
      "throws": []
    },
    {
      "name": "isEndOfFrame",
      "comment": "Determines if this CIE encountered a zero length record, which indicates the end of \n the frame.",
      "javadoc": "Determines if this CIE encountered a zero length record, which indicates the end of \n the frame.\n@return true if we are at end of frame due to encountering a zero length record.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if we are at end of frame due to encountering a zero length record."
      },
      "throws": []
    },
    {
      "name": "getSegmentSize",
      "comment": "Gets the segment size for this CIE record.",
      "javadoc": "Gets the segment size for this CIE record.\n@return the segment size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the segment size"
      },
      "throws": []
    },
    {
      "name": "getReturnAddressRegisterColumn",
      "comment": "Gets the return address register column for this CIE record.",
      "javadoc": "Gets the return address register column for this CIE record.\n@return the return address register column",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the return address register column"
      },
      "throws": []
    },
    {
      "name": "getCieId",
      "comment": "Gets the ID for this CIE record.",
      "javadoc": "Gets the ID for this CIE record.\n@return the CIE identifier",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the CIE identifier"
      },
      "throws": []
    }
  ]
}
