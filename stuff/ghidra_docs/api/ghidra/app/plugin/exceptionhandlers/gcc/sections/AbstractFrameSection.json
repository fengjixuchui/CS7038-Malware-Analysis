{
  "name": "AbstractFrameSection",
  "comment": "Extend this class to parse the call frame information exception handling structures within a \n particular frame memory section.",
  "javadoc": "Extend this class to parse the call frame information exception handling structures within a \n particular frame memory section.",
  "static": false,
  "implements": [
    "ghidra.app.plugin.exceptionhandlers.gcc.sections.CieSource"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "monitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "cieMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cghidra.program.model.address.Address,ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.Cie\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for an individual frame section.",
      "javadoc": "Constructor for an individual frame section.\n@param monitor a status monitor for indicating progress or allowing a task to be cancelled.\n@param program the program containing this particular frame section.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "a status monitor for indicating progress or allowing a task to be cancelled."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing this particular frame section."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createAugmentationData",
      "comment": "Creates data structures for the specified Common Information Entry (CIE) \n and its Frame Description Entries (FDEs) as indicated by the regions.",
      "javadoc": "Creates data structures for the specified Common Information Entry (CIE) \n and its Frame Description Entries (FDEs) as indicated by the regions.\n@param regions the region descriptors for the FDEs.\n@param cie the CIE for the FDEs.",
      "static": false,
      "params": [
        {
          "name": "regions",
          "type_long": "java.util.List\u003cghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor\u003e",
          "type_short": "List",
          "comment": "the region descriptors for the FDEs."
        },
        {
          "name": "cie",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.Cie",
          "type_short": "Cie",
          "comment": "the CIE for the FDEs."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createCie",
      "comment": "Creates the data for a common information entry (CIE) at the address and puts a label and\n comment on it.",
      "javadoc": "Creates the data for a common information entry (CIE) at the address and puts a label and\n comment on it.\n@param curAddress the address with the CIE\n@param isInDebugFrame true indicates the frame containing this CIE is a debug frame.\n@return the \u003ccode\u003eCie\u003c/code\u003e that was created\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read\n@throws ExceptionHandlerFrameException if a problem was encountered",
      "static": false,
      "params": [
        {
          "name": "curAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address with the CIE"
        },
        {
          "name": "isInDebugFrame",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates the frame containing this CIE is a debug frame."
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.Cie",
        "type_short": "Cie",
        "comment": "the Cie that was created"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read"
        },
        {
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameException",
          "type_short": "ExceptionHandlerFrameException",
          "comment": "if a problem was encountered"
        }
      ]
    },
    {
      "name": "getCieOrCreateIfMissing",
      "comment": "This class maintains a lookup of common information entry (CIE) objects; this \n retrieves an existing object (by address), and creates a new CIE if not found.",
      "javadoc": "This class maintains a lookup of common information entry (CIE) objects; this \n retrieves an existing object (by address), and creates a new CIE if not found.\n@param curAddress the address with the CIE\n@param isInDebugFrame true indicates the frame containing this CIE is a debug frame.\n@return the \u003ccode\u003eCie\u003c/code\u003e that was either previously created, or a newly minted object.\n@throws MemoryAccessException if memory for the CIE couldn\u0027t be read\n@throws ExceptionHandlerFrameException if a problem was encountered",
      "static": false,
      "params": [
        {
          "name": "currAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "isInDebugFrame",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates the frame containing this CIE is a debug frame."
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.Cie",
        "type_short": "Cie",
        "comment": "the Cie that was either previously created, or a newly minted object."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the CIE couldn\u0027t be read"
        },
        {
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.ExceptionHandlerFrameException",
          "type_short": "ExceptionHandlerFrameException",
          "comment": "if a problem was encountered"
        }
      ]
    },
    {
      "name": "createCieLabel",
      "comment": "Creates a label indicating there is an CIE at the address.",
      "javadoc": "Creates a label indicating there is an CIE at the address.\n@param curAddress the address with the CIE",
      "static": false,
      "params": [
        {
          "name": "curAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address with the CIE"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createCieComment",
      "comment": "Creates a comment indicating there is an CIE at the address.",
      "javadoc": "Creates a comment indicating there is an CIE at the address.\n@param curAddress the address with the CIE",
      "static": false,
      "params": [
        {
          "name": "curAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address with the CIE"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createFdeComment",
      "comment": "Creates a comment indicating there is an FDE at the address.",
      "javadoc": "Creates a comment indicating there is an FDE at the address.\n@param curAddress the address with the FDE",
      "static": false,
      "params": [
        {
          "name": "curAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address with the FDE"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createPlateComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "curAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "fdeComment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
