{
  "name": "LSDATable",
  "comment": "The Language Specific Data Area (LSDA) serves as a reference to the runtime for how to \n respond to an exception. Each function that handles an exception (that is, has a \u0027catch\u0027 \n block) has an LSDA, and each exception-prone fragment has a record within the LSDA.\n The runtime will walk up the call stack as part of the Unwind routines, asking the LSDA \n if a function knows how to handle the thrown exception;the default handler typically \n terminates the program. \n \n Unwind uses the personality function and the LSDA -- the return value tells Unwind whether \n the function can handle the exception or not.\n \n   The LSDA is comprised of:\n   \n   A header that describes the bounds of exception handling support and encoding\n     modes for values found later in the LSDA table\n   A call site table that describes each location a \u0027throws\u0027 occurs and where\n     a corresponding catch block resides, and the actions to take.\n   An action table, that describes what the runtime needs to do during unwind\n   \n   \n The structures modeled here are described in detail in the C++ ABI.",
  "javadoc": "The Language Specific Data Area (LSDA) serves as a reference to the runtime for how to \n respond to an exception. Each function that handles an exception (that is, has a \u0027catch\u0027 \n block) has an LSDA, and each exception-prone fragment has a record within the LSDA.\n The runtime will walk up the call stack as part of the Unwind routines, asking the LSDA \n if a function knows how to handle the thrown exception;the default handler typically \n terminates the program. \n \u003cp\u003e\n Unwind uses the personality function and the LSDA -- the return value tells Unwind whether \n the function can handle the exception or not.\n \u003cp\u003e\n   The LSDA is comprised of:\n   \u003cul\u003e\n   \u003cli\u003eA header that describes the bounds of exception handling support and encoding\n     modes for values found later in the LSDA table\n   \u003cli\u003eA call site table that describes each location a \u0027throws\u0027 occurs and where\n     a corresponding catch block resides, and the actions to take.\n   \u003cli\u003eAn action table, that describes what the runtime needs to do during unwind\n   \u003c/ul\u003e\n \u003cp\u003e  \n The structures modeled here are described in detail in the C++ ABI.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "monitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "header",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAHeader",
      "type_short": "LSDAHeader",
      "constant_value": null
    },
    {
      "name": "callSiteTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDACallSiteTable",
      "type_short": "LSDACallSiteTable",
      "constant_value": null
    },
    {
      "name": "actionTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAActionTable",
      "type_short": "LSDAActionTable",
      "constant_value": null
    },
    {
      "name": "typeTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDATypeTable",
      "type_short": "LSDATypeTable",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for an LSDA exception table.\n Note: The create(Address, DwarfEHDecoder, RegionDescriptor) method must be \n called after constructing an LSDATable to associate it with an address before any of \n its \"get...\" methods are called.",
      "javadoc": "Constructor for an LSDA exception table.\n \u003cbr\u003eNote: The \u003ccode\u003ecreate(Address, DwarfEHDecoder, RegionDescriptor)\u003c/code\u003e method must be \n called after constructing an LSDATable to associate it with an address before any of \n its \"get...\" methods are called.\n@param monitor task monitor to see if the user has cancelled analysis\n@param program the program containing the table",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor to see if the user has cancelled analysis"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the table"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "create",
      "comment": "Create a LSDA Table from the bytes at addr. Parses the header, call site table,\n action table, and type table.\n Note: This method must get called before any of the \"get...\" methods.",
      "javadoc": "Create a LSDA Table from the bytes at \u003ccode\u003eaddr\u003c/code\u003e. Parses the header, call site table,\n action table, and type table.\n \u003cbr\u003eNote: This method must get called before any of the \"get...\" methods.\n@param tableAddr the start (minimum address) of this LSDA table.\n@param region the region of the program associated with this table\n@throws MemoryAccessException if memory couldn\u0027t be accessed for the LSDA table",
      "static": false,
      "params": [
        {
          "name": "tableAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start (minimum address) of this LSDA table."
        },
        {
          "name": "region",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
          "type_short": "RegionDescriptor",
          "comment": "the region of the program associated with this table"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory couldn\u0027t be accessed for the LSDA table"
        }
      ]
    },
    {
      "name": "getHeader",
      "comment": "",
      "javadoc": "@return the LSDA header",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAHeader",
        "type_short": "LSDAHeader",
        "comment": "the LSDA header"
      },
      "throws": []
    },
    {
      "name": "getCallSiteTable",
      "comment": "",
      "javadoc": "@return the call site table for this LSDA",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDACallSiteTable",
        "type_short": "LSDACallSiteTable",
        "comment": "the call site table for this LSDA"
      },
      "throws": []
    },
    {
      "name": "getActionTable",
      "comment": "",
      "javadoc": "@return the action table for this LSDA",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAActionTable",
        "type_short": "LSDAActionTable",
        "comment": "the action table for this LSDA"
      },
      "throws": []
    },
    {
      "name": "getTypeTable",
      "comment": "",
      "javadoc": "@return the type table for this LSDA",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDATypeTable",
        "type_short": "LSDATypeTable",
        "comment": "the type table for this LSDA"
      },
      "throws": []
    }
  ]
}
