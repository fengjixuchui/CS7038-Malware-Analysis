{
  "name": "LSDATypeTable",
  "comment": "Stores addresses of __type_info structures for thrown values. Used by the Unwind routines\n to determine if a given catch block appropriately handles a given exception-of-type.",
  "javadoc": "Stores addresses of __type_info structures for thrown values. Used by the Unwind routines\n to determine if a given catch block appropriately handles a given exception-of-type.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.exceptionhandlers.gcc.GccAnalysisClass",
  "fields": [
    {
      "name": "region",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
      "type_short": "RegionDescriptor",
      "constant_value": null
    },
    {
      "name": "nextAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "typeInfoAddrs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for a table of references to types that are associated with catch actions.\n Note: The create(Address, Address) method must be called after constructing \n an LSDATypeTable to associate it with an address before any of its \"get...\" methods \n are called.",
      "javadoc": "Constructor for a table of references to types that are associated with catch actions.\n \u003cbr\u003eNote: The \u003ccode\u003ecreate(Address, Address)\u003c/code\u003e method must be called after constructing \n an LSDATypeTable to associate it with an address before any of its \"get...\" methods \n are called.\n@param monitor task monitor to see if the user has cancelled analysis.\n@param program the program containing the type table.\n@param region the region of the program associated with this type table.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor to see if the user has cancelled analysis."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the type table."
        },
        {
          "name": "region",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
          "type_short": "RegionDescriptor",
          "comment": "the region of the program associated with this type table."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "create",
      "comment": "Create a LSDA Type Table from the bytes between bottom and top. \n This table is built from bottom-to-top.\n Note: This method must get called before any of the \"get...\" methods.",
      "javadoc": "Create a LSDA Type Table from the bytes between \u003ccode\u003ebottom\u003c/code\u003e and \u003ccode\u003etop\u003c/code\u003e. \n This table is built from bottom-to-top.\n \u003cbr\u003eNote: This method must get called before any of the \"get...\" methods.\n@param bottom the bottom address of the type table\n@param top the top address of the type table",
      "static": false,
      "params": [
        {
          "name": "bottom",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the bottom address of the type table"
        },
        {
          "name": "top",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the top address of the type table"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "align4",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTypeInfoAddress",
      "comment": "Gets the address of the type information from the reference record at the specified index in \n the table.",
      "javadoc": "Gets the address of the type information from the reference record at the specified index in \n the table.\n@param index the index (1-based) of the type info table record.\n@return the address of the type info.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index (1-based) of the type info table record."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address of the type info."
      },
      "throws": []
    },
    {
      "name": "getNextAddress",
      "comment": "Gets the address after this type table.",
      "javadoc": "Gets the address after this type table.\n@return the next address after this type table or null if this type table hasn\u0027t been \n created at any address yet.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the next address after this type table or null if this type table hasn\u0027t been \n created at any address yet."
      },
      "throws": []
    }
  ]
}
