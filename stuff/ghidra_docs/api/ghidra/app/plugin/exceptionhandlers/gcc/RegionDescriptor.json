{
  "name": "RegionDescriptor",
  "comment": "RegionDescriptor holds information about a call frame.",
  "javadoc": "RegionDescriptor holds information about a call frame.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "lsdaAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "lsdaTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDATable",
      "type_short": "LSDATable",
      "constant_value": null
    },
    {
      "name": "fde",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.FrameDescriptionEntry",
      "type_short": "FrameDescriptionEntry",
      "constant_value": null
    },
    {
      "name": "ipRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressRange",
      "type_short": "AddressRange",
      "constant_value": null
    },
    {
      "name": "ehMemory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.mem.MemoryBlock",
      "type_short": "MemoryBlock",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for a region descriptor.",
      "javadoc": "Constructor for a region descriptor.\n@param ehblock the exception handling memory block for the region to be described.",
      "static": false,
      "params": [
        {
          "name": "ehblock",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": "the exception handling memory block for the region to be described."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEHMemoryBlock",
      "comment": "Gets the exception handling memory block associated with this region.",
      "javadoc": "Gets the exception handling memory block associated with this region.\n@return the memory block",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.mem.MemoryBlock",
        "type_short": "MemoryBlock",
        "comment": "the memory block"
      },
      "throws": []
    },
    {
      "name": "setIPRange",
      "comment": "Sets the address range of the IP (instructions) for this region.",
      "javadoc": "Sets the address range of the IP (instructions) for this region.\n@param range the address range to associate with this region.",
      "static": false,
      "params": [
        {
          "name": "range",
          "type_long": "ghidra.program.model.address.AddressRange",
          "type_short": "AddressRange",
          "comment": "the address range to associate with this region."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRange",
      "comment": "Gets the address range of the IP (instructions) for this region.",
      "javadoc": "Gets the address range of the IP (instructions) for this region.\n@return the instruction addresses",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": "the instruction addresses"
      },
      "throws": []
    },
    {
      "name": "getRangeStart",
      "comment": "Gets the start (minimum address) of the IP range for this region.",
      "javadoc": "Gets the start (minimum address) of the IP range for this region.\n@return the IP range start address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the IP range start address"
      },
      "throws": []
    },
    {
      "name": "getRangeSize",
      "comment": "Gets the size of the address range for the IP.",
      "javadoc": "Gets the size of the address range for the IP.\n@return the IP address range size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the IP address range size"
      },
      "throws": []
    },
    {
      "name": "setLSDAAddress",
      "comment": "Sets the address of the start of the LSDA.",
      "javadoc": "Sets the address of the start of the LSDA.\n@param addr the LSDA address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the LSDA address."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLSDAAddress",
      "comment": "Gets the address of the start of the LSDA.",
      "javadoc": "Gets the address of the start of the LSDA.\n@return the LSDA address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the LSDA address."
      },
      "throws": []
    },
    {
      "name": "setLSDATable",
      "comment": "Sets the LSDA table for this frame region.",
      "javadoc": "Sets the LSDA table for this frame region.\n@param lsdaTable the LSDA table",
      "static": false,
      "params": [
        {
          "name": "lsdaTable",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDATable",
          "type_short": "LSDATable",
          "comment": "the LSDA table"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLSDATable",
      "comment": "Gets the LSDA table for this frame region.",
      "javadoc": "Gets the LSDA table for this frame region.\n@return the LSDA table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDATable",
        "type_short": "LSDATable",
        "comment": "the LSDA table"
      },
      "throws": []
    },
    {
      "name": "getCallSiteTable",
      "comment": "Gets the call site table for this region\u0027s frame.",
      "javadoc": "Gets the call site table for this region\u0027s frame.\n@return the call site table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDACallSiteTable",
        "type_short": "LSDACallSiteTable",
        "comment": "the call site table"
      },
      "throws": []
    },
    {
      "name": "getActionTable",
      "comment": "Gets the action table for this region\u0027s frame.",
      "javadoc": "Gets the action table for this region\u0027s frame.\n@return the action table or null if it hasn\u0027t been set for this region",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAActionTable",
        "type_short": "LSDAActionTable",
        "comment": "the action table or null if it hasn\u0027t been set for this region"
      },
      "throws": []
    },
    {
      "name": "getTypeTable",
      "comment": "Gets the type table for this region\u0027s frame.",
      "javadoc": "Gets the type table for this region\u0027s frame.\n@return the LSDA type table or null if it hasn\u0027t been set for this region",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDATypeTable",
        "type_short": "LSDATypeTable",
        "comment": "the LSDA type table or null if it hasn\u0027t been set for this region"
      },
      "throws": []
    },
    {
      "name": "setFrameDescriptorEntry",
      "comment": "Sets the FDE associated with the region.",
      "javadoc": "Sets the FDE associated with the region.\n@param frameDescriptionEntry the FDE",
      "static": false,
      "params": [
        {
          "name": "frameDescriptionEntry",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.FrameDescriptionEntry",
          "type_short": "FrameDescriptionEntry",
          "comment": "the FDE"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFrameDescriptorEntry",
      "comment": "Gets the FDE associated with this region.",
      "javadoc": "Gets the FDE associated with this region.\n@return the FDE",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.ehFrame.FrameDescriptionEntry",
        "type_short": "FrameDescriptionEntry",
        "comment": "the FDE"
      },
      "throws": []
    }
  ]
}
