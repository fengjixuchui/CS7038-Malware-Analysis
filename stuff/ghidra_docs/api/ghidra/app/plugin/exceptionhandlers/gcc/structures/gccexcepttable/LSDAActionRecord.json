{
  "name": "LSDAActionRecord",
  "comment": "A record that associates the type info with a catch action.",
  "javadoc": "A record that associates the type info with a catch action.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.exceptionhandlers.gcc.GccAnalysisClass",
  "fields": [
    {
      "name": "NO_ACTION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "0"
    },
    {
      "name": "lsdaActionTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAActionTable",
      "type_short": "LSDAActionTable",
      "constant_value": null
    },
    {
      "name": "recordAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "nextAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "typeFilter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "displacementToNext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "nextActionAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for an action record.\n Note: The create(Address) method must be called after constructing an \n LSDAActionRecord to associate it with an address before any of its \"get...\" methods are called.",
      "javadoc": "Constructor for an action record.\n \u003cbr\u003eNote: The \u003ccode\u003ecreate(Address)\u003c/code\u003e method must be called after constructing an \n LSDAActionRecord to associate it with an address before any of its \"get...\" methods are called.\n@param monitor task monitor to see if the user has cancelled analysis.\n@param program the program containing the action record.\n@param region the region of the program associated with the action record.\n@param lsdaActionTable the action table containing the action record.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor to see if the user has cancelled analysis."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the action record."
        },
        {
          "name": "region",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
          "type_short": "RegionDescriptor",
          "comment": "the region of the program associated with the action record."
        },
        {
          "name": "lsdaActionTable",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAActionTable",
          "type_short": "LSDAActionTable",
          "comment": "the action table containing the action record."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "create",
      "comment": "Creates data for an action record at the indicated address and creates a comment to identify\n it as an action record.\n Note: This method must get called before any of the \"get...\" methods.",
      "javadoc": "Creates data for an action record at the indicated address and creates a comment to identify\n it as an action record.\n \u003cbr\u003eNote: This method must get called before any of the \"get...\" methods.\n@param address the start (minimum address) of this action record.",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start (minimum address) of this action record."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createTypeFilter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createNextActionRef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getActionTypeFilter",
      "comment": "Gets the filter value indicating which type is associated with this action record.",
      "javadoc": "Gets the filter value indicating which type is associated with this action record.\n@return the value for this action\u0027s type.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the value for this action\u0027s type."
      },
      "throws": []
    },
    {
      "name": "getNextActionAddress",
      "comment": "Gets the base address of the next action record to consider in the action table.",
      "javadoc": "Gets the base address of the next action record to consider in the action table.\n@return the address of the next action record or null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address of the next action record or null."
      },
      "throws": []
    },
    {
      "name": "getNextAddress",
      "comment": "Gets the next address indicating the address after this action record.",
      "javadoc": "Gets the next address indicating the address after this action record.\n@return the next address after this action record or null if this action record hasn\u0027t been \n created at any address yet.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the next address after this action record or null if this action record hasn\u0027t been \n created at any address yet."
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Gets the base address (minimum address) indicating the start of this action record.",
      "javadoc": "Gets the base address (minimum address) indicating the start of this action record.\n@return the address of this action record or null if this action record hasn\u0027t been \n created at any address yet.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address of this action record or null if this action record hasn\u0027t been \n created at any address yet."
      },
      "throws": []
    },
    {
      "name": "getNextAction",
      "comment": "Gets the record for the next action that the catch should fall to if the type isn\u0027t \n the one for this action.",
      "javadoc": "Gets the record for the next action that the catch should fall to if the type isn\u0027t \n the one for this action.\n@return the next action\u0027s record or null if there isn\u0027t another specific type of \n exception for this try.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAActionRecord",
        "type_short": "LSDAActionRecord",
        "comment": "the next action\u0027s record or null if there isn\u0027t another specific type of \n exception for this try."
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "Gets the size of the action record or 0 if this action record hasn\u0027t been created at any \n address yet.",
      "javadoc": "Gets the size of the action record or 0 if this action record hasn\u0027t been created at any \n address yet.\n@return the size of the action record or 0;",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of the action record or 0;"
      },
      "throws": []
    }
  ]
}
