{
  "name": "LSDAHeader",
  "comment": "Defines the bounds of exception unwinding support, within a function, \n and unwind procedures.\n * lpStartAddr is the program address where support begins. This value is \n   encoded according to lpStartEncoding.\n * ttypeAddr is the location-relative program address, encoded per \n   ttypeEncoding, of the associated C++ types table (types of thrown values).",
  "javadoc": "Defines the bounds of exception unwinding support, within a function, \n and unwind procedures.\n * lpStartAddr is the program address where support begins. This value is \n   encoded according to lpStartEncoding.\n * ttypeAddr is the location-relative program address, encoded per \n   ttypeEncoding, of the associated C++ types table (types of thrown values).",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.exceptionhandlers.gcc.GccAnalysisClass",
  "fields": [
    {
      "name": "OMITTED_ENCODING_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "255"
    },
    {
      "name": "region",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
      "type_short": "RegionDescriptor",
      "constant_value": null
    },
    {
      "name": "BYTE_LEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "lpStartEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "lpStartAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "hasTypeTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "ttypeEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "ttypeOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "ttypeAddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "callSiteTableEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "callSiteTableLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "headerSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "tableBounds",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressRange",
      "type_short": "AddressRange",
      "constant_value": null
    },
    {
      "name": "nextAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "LPSTART_PTR_TYPETABLE_FLAG",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "curSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "callSiteTableHeaderSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for the LSDA header which indicates encoding for the LSDA tables.\n Note: The create(Address) method must be called after constructing an \n LSDAHeader to associate it with an address before any of its \"get...\" methods are called.",
      "javadoc": "Constructor for the LSDA header which indicates encoding for the LSDA tables.\n \u003cbr\u003eNote: The \u003ccode\u003ecreate(Address)\u003c/code\u003e method must be called after constructing an \n LSDAHeader to associate it with an address before any of its \"get...\" methods are called.\n@param monitor task monitor to see if the user has cancelled analysis.\n@param program the program containing this header.\n@param region the region of the program associated with this header.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor to see if the user has cancelled analysis."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing this header."
        },
        {
          "name": "region",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
          "type_short": "RegionDescriptor",
          "comment": "the region of the program associated with this header."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createLPStartEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "makeAddress",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createLPStartPointer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createTTypeEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createTTypeOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createCallSiteTableEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createCallSiteTableLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "create",
      "comment": "Create a LSDA Header from the bytes at addr.\n Note: This method must get called before any of the \"get...\" methods.",
      "javadoc": "Create a LSDA Header from the bytes at \u003ccode\u003eaddr\u003c/code\u003e.\n \u003cbr\u003eNote: This method must get called before any of the \"get...\" methods.\n@param addr the start (minimum address) of this LSDA header.\n@throws MemoryAccessException if memory for the header couldn\u0027t be read.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start (minimum address) of this LSDA header."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory for the header couldn\u0027t be read."
        }
      ]
    },
    {
      "name": "getNextAddress",
      "comment": "Gets the next address indicating the address after this LSDA header.",
      "javadoc": "Gets the next address indicating the address after this LSDA header.\n@return the next address after this LSDA header or null if this LSDA header hasn\u0027t been \n created at any address yet.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the next address after this LSDA header or null if this LSDA header hasn\u0027t been \n created at any address yet."
      },
      "throws": []
    },
    {
      "name": "getBody",
      "comment": "Gets the address range containing the LSDA header.",
      "javadoc": "Gets the address range containing the LSDA header.\n@return the address range of the header",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": "the address range of the header"
      },
      "throws": []
    },
    {
      "name": "getHeaderSize",
      "comment": "Gets the size of this LSDA header.",
      "javadoc": "Gets the size of this LSDA header.\n@return the header size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the header size"
      },
      "throws": []
    },
    {
      "name": "getLPStartEncoding",
      "comment": "Gets the indicator of the encoding used for the landing pad start.",
      "javadoc": "Gets the indicator of the encoding used for the landing pad start.\n@return the LP start encoding",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the LP start encoding"
      },
      "throws": []
    },
    {
      "name": "getLPStartAddress",
      "comment": "Gets the landing pad start address.",
      "javadoc": "Gets the landing pad start address.\n@return the LP start address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the LP start address"
      },
      "throws": []
    },
    {
      "name": "hasTypeTable",
      "comment": "Determines if this LSDA has a type table.",
      "javadoc": "Determines if this LSDA has a type table.\n@return true if there is a type table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there is a type table"
      },
      "throws": []
    },
    {
      "name": "getTTypeEncoding",
      "comment": "Gets the encoding used for the type table.",
      "javadoc": "Gets the encoding used for the type table.\n@return the value indicating the type table\u0027s encoding",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the value indicating the type table\u0027s encoding"
      },
      "throws": []
    },
    {
      "name": "getTTypeOffset",
      "comment": "The offset from the type offset field to get to the base address of the type table.",
      "javadoc": "The offset from the type offset field to get to the base address of the type table.\n@return the type table offset",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the type table offset"
      },
      "throws": []
    },
    {
      "name": "getTTypeBaseAddress",
      "comment": "Gets the base address of the type table. The base address is the last byte (maximum address) \n of the type table. The type table is ordered in reverse.",
      "javadoc": "Gets the base address of the type table. The base address is the last byte (maximum address) \n of the type table. The type table is ordered in reverse.\n@return the type table\u0027s base address or \u003ccode\u003eAddress.NO_ADDRESS\u003c/code\u003e",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the type table\u0027s base address or Address.NO_ADDRESS"
      },
      "throws": []
    },
    {
      "name": "getCallSiteTableEncoding",
      "comment": "Gets the dwarf encoding used for the call site table.",
      "javadoc": "Gets the dwarf encoding used for the call site table.\n@return the encoding value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the encoding value"
      },
      "throws": []
    },
    {
      "name": "getCallSiteTableLength",
      "comment": "Gets the length of the call site table.",
      "javadoc": "Gets the length of the call site table.\n@return the table length",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the table length"
      },
      "throws": []
    },
    {
      "name": "getCallSiteTableHeaderSize",
      "comment": "Get the size of the header in the call site table.",
      "javadoc": "Get the size of the header in the call site table.\n@return the header size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the header size"
      },
      "throws": []
    }
  ]
}
