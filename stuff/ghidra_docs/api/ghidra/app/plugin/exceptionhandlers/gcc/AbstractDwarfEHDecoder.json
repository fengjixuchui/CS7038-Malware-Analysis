{
  "name": "AbstractDwarfEHDecoder",
  "comment": "Extended by each of the various Dwarf exception handling decoders. Provides basic types and \n methods for maintaining and retrieving information specific to that decoder.",
  "javadoc": "Extended by each of the various Dwarf exception handling decoders. Provides basic types and \n methods for maintaining and retrieving information specific to that decoder.",
  "static": false,
  "implements": [
    "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDecoder"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "BYTE_DATA_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.ByteDataType",
      "type_short": "ByteDataType",
      "constant_value": null
    },
    {
      "name": "WORD_DATA_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.WordDataType",
      "type_short": "WordDataType",
      "constant_value": null
    },
    {
      "name": "DWORD_DATA_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.DWordDataType",
      "type_short": "DWordDataType",
      "constant_value": null
    },
    {
      "name": "QWORD_DATA_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.data.QWordDataType",
      "type_short": "QWordDataType",
      "constant_value": null
    },
    {
      "name": "SLEB_DATA_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.datatype.SignedLeb128DataType",
      "type_short": "SignedLeb128DataType",
      "constant_value": null
    },
    {
      "name": "ULEB_DATA_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.datatype.UnsignedLeb128DataType",
      "type_short": "UnsignedLeb128DataType",
      "constant_value": null
    },
    {
      "name": "appMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDataApplicationMode",
      "type_short": "DwarfEHDataApplicationMode",
      "constant_value": null
    },
    {
      "name": "isIndirect",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "mode",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDataApplicationMode",
          "type_short": "DwarfEHDataApplicationMode",
          "comment": ""
        },
        {
          "name": "isIndirect",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataApplicationMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDataApplicationMode",
        "type_short": "DwarfEHDataApplicationMode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "ptrval",
      "comment": "Reads a pointer-size value from program at addr",
      "javadoc": "Reads a pointer-size value from \u003ccode\u003eprogram\u003c/code\u003e at \u003ccode\u003eaddr\u003c/code\u003e\n@param program Program to read from\n@param addr Address to read from\n@return The value of the pointer reference\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "Program to read from"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address to read from"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The value of the pointer reference"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "ptrval",
      "comment": "Reads a ptrSize integer value at the address of buf",
      "javadoc": "Reads a \u003ccode\u003eptrSize\u003c/code\u003e integer value at the address of \u003ccode\u003ebuf\u003c/code\u003e\n@param buf Buffer to read from\n@param ptrSize the size of the pointer to be read.\n@return The value of the pointer reference\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "Buffer to read from"
        },
        {
          "name": "ptrSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of the pointer to be read."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The value of the pointer reference"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "readByte",
      "comment": "Reads an 8-bit value from program at addr",
      "javadoc": "Reads an 8-bit value from \u003ccode\u003eprogram\u003c/code\u003e at \u003ccode\u003eaddr\u003c/code\u003e\n@param program Program to read from\n@param addr Address to read from\n@return The value of the byte\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "Program to read from"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address to read from"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The value of the byte"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "readByte",
      "comment": "Reads an 8-bit value from program at the address of buf",
      "javadoc": "Reads an 8-bit value from \u003ccode\u003eprogram\u003c/code\u003e at the address of \u003ccode\u003ebuf\u003c/code\u003e\n@param buf Buffer to read from\n@param length Unused\n@return The value of the byte\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "Buffer to read from"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "Unused"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The value of the byte"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "readWord",
      "comment": "Reads a 16-bit value from program at addr",
      "javadoc": "Reads a 16-bit value from \u003ccode\u003eprogram\u003c/code\u003e at \u003ccode\u003eaddr\u003c/code\u003e\n@param program Program to read from\n@param addr Address to read from\n@return The value of the word\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "Program to read from"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address to read from"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The value of the word"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "readWord",
      "comment": "Reads a 16-bit value at the address of buf",
      "javadoc": "Reads a 16-bit value at the address of \u003ccode\u003ebuf\u003c/code\u003e\n@param buf Buffer to read from\n@return The value of the word\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "Buffer to read from"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The value of the word"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "readDWord",
      "comment": "Reads a 32-bit value from program at addr",
      "javadoc": "Reads a 32-bit value from \u003ccode\u003eprogram\u003c/code\u003e at \u003ccode\u003eaddr\u003c/code\u003e\n@param program Program to read from\n@param addr Address to read from\n@return The value of the dword\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "Program to read from"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address to read from"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The value of the dword"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "readDWord",
      "comment": "Reads a 32-bit value at the address of buf",
      "javadoc": "Reads a 32-bit value at the address of \u003ccode\u003ebuf\u003c/code\u003e\n@param buf Buffer to read from\n@return The value of the dword\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "Buffer to read from"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The value of the dword"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "readQWord",
      "comment": "Reads a 64-bit value from program at addr",
      "javadoc": "Reads a 64-bit value from \u003ccode\u003eprogram\u003c/code\u003e at \u003ccode\u003eaddr\u003c/code\u003e\n@param program Program to read from\n@param addr Address to read from\n@return The value of the qword\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "Program to read from"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address to read from"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The value of the qword"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "readQWord",
      "comment": "Reads a 64-bit value at the address of buf",
      "javadoc": "Reads a 64-bit value at the address of \u003ccode\u003ebuf\u003c/code\u003e\n@param buf Buffer to read from\n@return The value of the qword\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "Buffer to read from"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The value of the qword"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "readBytes",
      "comment": "Reads bytes from program at addr",
      "javadoc": "Reads bytes from \u003ccode\u003eprogram\u003c/code\u003e at \u003ccode\u003eaddr\u003c/code\u003e\n@param program Program to read from\n@param addr Address to read from\n@param buffer Destination buffer to read into\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "Program to read from"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address to read from"
        },
        {
          "name": "buffer",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "Destination buffer to read into"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "readBytes",
      "comment": "Reads bytes at the address of buf into buffer up to the length of \n buffer.",
      "javadoc": "Reads bytes at the address of \u003ccode\u003ebuf\u003c/code\u003e into \u003ccode\u003ebuffer\u003c/code\u003e up to the length of \n \u003ccode\u003ebuffer\u003c/code\u003e.\n@param buf Buffer to read from\n@param buffer Destination buffer to read into\n@return the number of bytes read into the buffer\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "Buffer to read from"
        },
        {
          "name": "buffer",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "Destination buffer to read into"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of bytes read into the buffer"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "read_leb128",
      "comment": "Reads an unsigned LEB128-encoded value from program at addr",
      "javadoc": "Reads an unsigned LEB128-encoded value from \u003ccode\u003eprogram\u003c/code\u003e at \u003ccode\u003eaddr\u003c/code\u003e\n@param program Program to read from\n@param addr Address to read from\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "Program to read from"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address to read from"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "read_leb128",
      "comment": "Reads an unsigned LEB128-encoded value from program at the address of buf",
      "javadoc": "Reads an unsigned LEB128-encoded value from \u003ccode\u003eprogram\u003c/code\u003e at the address of \u003ccode\u003ebuf\u003c/code\u003e\n@param buf Buffer to read from\n@param length Unused\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "Buffer to read from"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "Unused"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "read_sleb128",
      "comment": "Reads a signed LEB128-encoded value from program at addr",
      "javadoc": "Reads a signed LEB128-encoded value from \u003ccode\u003eprogram\u003c/code\u003e at \u003ccode\u003eaddr\u003c/code\u003e\n@param program Program to read from\n@param addr Address to read from\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "Program to read from"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "Address to read from"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "read_sleb128",
      "comment": "Reads a signed LEB128-encoded value from program at the address of buf",
      "javadoc": "Reads a signed LEB128-encoded value from \u003ccode\u003eprogram\u003c/code\u003e at the address of \u003ccode\u003ebuf\u003c/code\u003e\n@param buf Buffer to read from\n@param length Number of bytes to read\n@param buffer Destination buffer to read into\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "Buffer to read from"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "Number of bytes to read"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "decodeAddress",
      "comment": "Get the DWARF-encoded address value as stored by the context",
      "javadoc": "Get the DWARF-encoded address value as stored by the context\n@param context Stores program location and decode parameters\n@return the address\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfDecodeContext",
          "type_short": "DwarfDecodeContext",
          "comment": "Stores program location and decode parameters"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "decode",
      "comment": "Get the DWARF-encoded integer value as stored by the context",
      "javadoc": "Get the DWARF-encoded integer value as stored by the context\n@param context Stores program location and decode parameters\n@return the integer value\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfDecodeContext",
          "type_short": "DwarfDecodeContext",
          "comment": "Stores program location and decode parameters"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the integer value"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    },
    {
      "name": "resolveRelativeOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "val",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "context",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfDecodeContext",
          "type_short": "DwarfDecodeContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "doDecode",
      "comment": "Decode an integer value according to parameters stored in the context object.",
      "javadoc": "Decode an integer value according to parameters stored in the \u003ccode\u003econtext\u003c/code\u003e object.\n@param context Stores program location and decode parameters\n@return the integer value\n@throws MemoryAccessException if the data can\u0027t be read",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfDecodeContext",
          "type_short": "DwarfDecodeContext",
          "comment": "Stores program location and decode parameters"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the integer value"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the data can\u0027t be read"
        }
      ]
    }
  ]
}
