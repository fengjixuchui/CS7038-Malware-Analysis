{
  "name": "LSDAActionTable",
  "comment": "Defines the follow-on behavior of how to handle an exception in the context\n of the exceptions\u0027 C++ type.",
  "javadoc": "Defines the follow-on behavior of how to handle an exception in the context\n of the exceptions\u0027 C++ type.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "monitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "region",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
      "type_short": "RegionDescriptor",
      "constant_value": null
    },
    {
      "name": "tableAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "nextAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "records",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAActionRecord\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for an action table.\n Note: The create(Address) method must be called after constructing an \n LSDAActionTable to associate it with an address before any of its \"get...\" methods are called.",
      "javadoc": "Constructor for an action table.\n \u003cbr\u003eNote: The \u003ccode\u003ecreate(Address)\u003c/code\u003e method must be called after constructing an \n LSDAActionTable to associate it with an address before any of its \"get...\" methods are called.\n@param monitor task monitor to see if the user has cancelled analysis.\n@param program the program containing the action table.\n@param region the region or section of the program containing the action table.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor to see if the user has cancelled analysis."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the action table."
        },
        {
          "name": "region",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.RegionDescriptor",
          "type_short": "RegionDescriptor",
          "comment": "the region or section of the program containing the action table."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "create",
      "comment": "Create an LSDA Action Table from the bytes at address.\n Note: This method must get called before any of the \"get...\" methods.",
      "javadoc": "Create an LSDA Action Table from the bytes at \u003ccode\u003eaddress\u003c/code\u003e.\n \u003cbr\u003eNote: This method must get called before any of the \"get...\" methods.\n@param address the start (minimum address) of this action table.\n@param maxddress the end (maximum address) of this action table.",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start (minimum address) of this action table."
        },
        {
          "name": "maxAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Gets the base address (minimum address) indicating the start of this action table.",
      "javadoc": "Gets the base address (minimum address) indicating the start of this action table.\n@return the address of this action table or null if this action table hasn\u0027t been \n created at any address yet.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the address of this action table or null if this action table hasn\u0027t been \n created at any address yet."
      },
      "throws": []
    },
    {
      "name": "getNextAddress",
      "comment": "Gets the next address indicating the address after this action table.",
      "javadoc": "Gets the next address indicating the address after this action table.\n@return the next address after this action table or null if this action table hasn\u0027t been \n created at any address yet.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the next address after this action table or null if this action table hasn\u0027t been \n created at any address yet."
      },
      "throws": []
    },
    {
      "name": "getActionRecords",
      "comment": "Gets all of the action records in this action table.",
      "javadoc": "Gets all of the action records in this action table.\n@return the action records in this table or empty if no address has been established for \n this table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAActionRecord\u003e",
        "type_short": "List",
        "comment": "the action records in this table or empty if no address has been established for \n this table."
      },
      "throws": []
    },
    {
      "name": "getActionRecord",
      "comment": "Gets the action record from the table by its index.",
      "javadoc": "Gets the action record from the table by its index.\n@param actionIndex indicates which action record (0 based) to get from the table.\n@return the action record or null if the index is invalid or an address hasn\u0027t been \n established for this table yet.",
      "static": false,
      "params": [
        {
          "name": "actionIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "indicates which action record (0 based) to get from the table."
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAActionRecord",
        "type_short": "LSDAActionRecord",
        "comment": "the action record or null if the index is invalid or an address hasn\u0027t been \n established for this table yet."
      },
      "throws": []
    },
    {
      "name": "getActionRecordAtOffset",
      "comment": "Gets the action record from the table for the indicated offset.",
      "javadoc": "Gets the action record from the table for the indicated offset.\n@param actionOffset the byte offset into the table for the desired record\n@return the action record for the specified offset or null",
      "static": false,
      "params": [
        {
          "name": "actionOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the byte offset into the table for the desired record"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.structures.gccexcepttable.LSDAActionRecord",
        "type_short": "LSDAActionRecord",
        "comment": "the action record for the specified offset or null"
      },
      "throws": []
    }
  ]
}
