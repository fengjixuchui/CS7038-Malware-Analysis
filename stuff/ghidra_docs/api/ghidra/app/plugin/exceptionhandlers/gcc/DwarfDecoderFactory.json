{
  "name": "DwarfDecoderFactory",
  "comment": "Generate instances of DwarfEHDecoder suitable for various pointer-encodings.",
  "javadoc": "Generate instances of DwarfEHDecoder suitable for various pointer-encodings.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "decoderMap",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.concurrent.ConcurrentHashMap\u003cjava.lang.Integer,ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDecoder\u003e",
      "type_short": "ConcurrentHashMap",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDecoder",
      "comment": "Get the appropriate decoder for the given 8-bit mode; mode is parsed into\n decode format, application mode, and indirection flag.",
      "javadoc": "Get the appropriate decoder for the given 8-bit mode; mode is parsed into\n decode format, application mode, and indirection flag.\n@see #getDecoder(DwarfEHDataDecodeFormat, DwarfEHDataApplicationMode, boolean)\n@param mode a byte that indicates an encoding\n@return the decoder for the indicated mode of encoding",
      "static": true,
      "params": [
        {
          "name": "mode",
          "type_long": "int",
          "type_short": "int",
          "comment": "a byte that indicates an encoding"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDecoder",
        "type_short": "DwarfEHDecoder",
        "comment": "the decoder for the indicated mode of encoding"
      },
      "throws": []
    },
    {
      "name": "createDecoder",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "style",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDataDecodeFormat",
          "type_short": "DwarfEHDataDecodeFormat",
          "comment": ""
        },
        {
          "name": "mod",
          "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDataApplicationMode",
          "type_short": "DwarfEHDataApplicationMode",
          "comment": ""
        },
        {
          "name": "isIndirect",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.exceptionhandlers.gcc.DwarfEHDecoder",
        "type_short": "DwarfEHDecoder",
        "comment": ""
      },
      "throws": []
    }
  ]
}
