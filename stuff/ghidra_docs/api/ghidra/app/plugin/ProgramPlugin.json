{
  "name": "ProgramPlugin",
  "comment": "Base class to handle common program events: Program Open/Close,\n Program Location, Program Selection, and Program Highlight. \n \n Subclasses should override the following methods if they are interested\n in the corresponding events:\n \n  programOpened(Program) \n  programClosed(Program) \n  locationChanged(ProgramLocation)\n  selectionChanged(ProgramSelection) \n  highlightChanged(ProgramSelection) \n \n \n \n This class will handle the enablement and add to popup state for\n plugin actions when subclasses call any of the following methods:\n \n enableOnHighlight(PluginAction)\n enableOnLocation(PluginAction)\n enableOnProgram(PluginAction)\n enableOnSelection(PluginAction)\n \n ",
  "javadoc": "Base class to handle common program events: Program Open/Close,\n Program Location, Program Selection, and Program Highlight. \n \u003cp\u003e\n Subclasses should override the following methods if they are interested\n in the corresponding events:\n \u003cul\u003e\n \u003cLI\u003e \u003ccode\u003eprogramOpened(Program)\u003c/code\u003e \n \u003cLI\u003e \u003ccode\u003eprogramClosed(Program)\u003c/code\u003e \n \u003cLI\u003e \u003ccode\u003elocationChanged(ProgramLocation)\u003c/code\u003e\n \u003cLI\u003e \u003ccode\u003eselectionChanged(ProgramSelection) \u003c/code\u003e\n \u003cLI\u003e \u003ccode\u003ehighlightChanged(ProgramSelection) \u003c/code\u003e\n \u003c/LI\u003e\n \u003c/ul\u003e\n \u003cbr\u003e\n This class will handle the enablement and add to popup state for\n plugin actions when subclasses call any of the following methods:\n \u003cul\u003e\n \u003cLI\u003e\u003ccode\u003eenableOnHighlight(PluginAction)\u003c/code\u003e\n \u003cLI\u003e\u003ccode\u003eenableOnLocation(PluginAction)\u003c/code\u003e\n \u003cLI\u003e\u003ccode\u003eenableOnProgram(PluginAction)\u003c/code\u003e\n \u003cLI\u003e\u003ccode\u003eenableOnSelection(PluginAction)\u003c/code\u003e\n \u003c/LI\u003e\n \u003c/ul\u003e",
  "static": false,
  "implements": [],
  "extends": "ghidra.framework.plugintool.Plugin",
  "fields": [
    {
      "name": "currentProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "currentLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.ProgramLocation",
      "type_short": "ProgramLocation",
      "constant_value": null
    },
    {
      "name": "currentSelection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.ProgramSelection",
      "type_short": "ProgramSelection",
      "constant_value": null
    },
    {
      "name": "currentHighlight",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.ProgramSelection",
      "type_short": "ProgramSelection",
      "constant_value": null
    },
    {
      "name": "programActionList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cdocking.action.DockingAction\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "locationActionList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cdocking.action.DockingAction\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "selectionActionList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cdocking.action.DockingAction\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "highlightActionList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cdocking.action.DockingAction\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new program plugin",
      "javadoc": "Constructs a new program plugin\n@param plugintool tool        the parent tool for this plugin\n@param consumeLocationChange true if this plugin should consume ProgramLocation events\n@param consumeSelectionChange true if this plugin should consume ProgramSelection events\n@param consumeHighlightChange true if this plugin should consume ProgramHighlight events",
      "static": false,
      "params": [
        {
          "name": "plugintool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "tool        the parent tool for this plugin"
        },
        {
          "name": "consumeLocationChange",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if this plugin should consume ProgramLocation events"
        },
        {
          "name": "consumeSelectionChange",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if this plugin should consume ProgramSelection events"
        },
        {
          "name": "consumeHighlightChange",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if this plugin should consume ProgramHighlight events"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "consumeLocationChange",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "consumeSelectionChange",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processEvent",
      "comment": "Process the plugin event.\n When a program closed event or focus changed event comes in,\n the locationChanged() and selectionChanged() methods are called\n with null arguments; currentProgram and currentLocation are cleared.\n Note: if the subclass overrides processEvent(), it should call\n super.processEvent().",
      "javadoc": "Process the plugin event.\n When a program closed event or focus changed event comes in,\n the locationChanged() and selectionChanged() methods are called\n with null arguments; currentProgram and currentLocation are cleared.\n \u003cp\u003eNote: if the subclass overrides processEvent(), it should call\n super.processEvent().",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "ghidra.framework.plugintool.PluginEvent",
          "type_short": "PluginEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "enableOnProgram",
      "comment": "Enable the action when the program is opened; disable it when\n the program is closed.",
      "javadoc": "Enable the action when the program is opened; disable it when\n the program is closed.\n@throws IllegalArgumentException if this action was called for\n another enableOnXXX(PlugAction) method.\n@deprecated {@link ActionContext} is now used for action enablement.  Deprecated in 9.1; to\n             be removed no sooner than two versions after that.",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingAction",
          "type_short": "DockingAction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "enableOnLocation",
      "comment": "Enable the action when a program location event comes in; disable it\n if either the location is null, or if the address in the location\n is null.",
      "javadoc": "Enable the action when a program location event comes in; disable it\n if either the location is null, or if the address in the location\n is null.\n@throws IllegalArgumentException if this action was called for\n another enableOnXXX(PlugAction) method.\n@deprecated {@link ActionContext} is now used for action enablement.  Deprecated in 9.1; to\n             be removed no sooner than two versions after that.",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingAction",
          "type_short": "DockingAction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "enableOnSelection",
      "comment": "Enable the action when a selection event comes in; disable it if\n the selection is null or empty.",
      "javadoc": "Enable the action when a selection event comes in; disable it if\n the selection is null or empty.\n@throws IllegalArgumentException if this action was called for\n another enableOnXXX(PlugAction) method.\n@deprecated {@link ActionContext} is now used for action enablement.  Deprecated in 9.1; to\n             be removed no sooner than two versions after that.",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingAction",
          "type_short": "DockingAction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "enableOnHighlight",
      "comment": "Enable the action when a highlight event comes in; disable it if\n the highlight is null or empty.",
      "javadoc": "Enable the action when a highlight event comes in; disable it if\n the highlight is null or empty.\n@throws IllegalArgumentException if this action was called for\n another enableOnXXX(PlugAction) method.\n@deprecated {@link ActionContext} is now used for action enablement.  Deprecated in 9.1; to\n             be removed no sooner than two versions after that.",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingAction",
          "type_short": "DockingAction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "programActivated",
      "comment": "Subclass should override this method if it is interested when programs become active.\n Note: this method is called in response to a ProgramActivatedPluginEvent. \n \n At the time this method is called, \n the \"currentProgram\" variable will be set the new active program.",
      "javadoc": "Subclass should override this method if it is interested when programs become active.\n Note: this method is called in response to a ProgramActivatedPluginEvent. \n \n At the time this method is called, \n the \"currentProgram\" variable will be set the new active program.\n@param program the new program going active.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the new program going active."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "programClosed",
      "comment": "Subclasses should override this method if it is interested when a program is closed.\n \n This event has no affect on the \"current Program\".  A \"programDeactivated\" call will\n occur that affects the active program.",
      "javadoc": "Subclasses should override this method if it is interested when a program is closed.\n \n This event has no affect on the \"current Program\".  A \"programDeactivated\" call will\n occur that affects the active program.\n@param program the program being closed.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program being closed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "programOpened",
      "comment": "Subclasses should override this method if it is interested when a program is opened.\n \n This event has no affect on the \"current Program\".  A \"programActivated\" call will\n occur that affects the active program.",
      "javadoc": "Subclasses should override this method if it is interested when a program is opened.\n \n This event has no affect on the \"current Program\".  A \"programActivated\" call will\n occur that affects the active program.\n@param program the program being opened.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program being opened."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "programDeactivated",
      "comment": "Subclass should override this method if it is interested when programs become inactive.\n Note: this method is called in response to a ProgramActivatedPluginEvent and there is \n a currently active program.\n \n At the time this method is called, \n the \"currentProgram\" variable will be set the \n new active program or null if there is no new active program.",
      "javadoc": "Subclass should override this method if it is interested when programs become inactive.\n Note: this method is called in response to a ProgramActivatedPluginEvent and there is \n a currently active program.\n \n At the time this method is called, \n the \"currentProgram\" variable will be set the \n new active program or null if there is no new active program.\n@param program the old program going inactive.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the old program going inactive."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "locationChanged",
      "comment": "Subclass should override this method if it is interested in\n program location events.",
      "javadoc": "Subclass should override this method if it is interested in\n program location events.\n@param loc location could be null",
      "static": false,
      "params": [
        {
          "name": "loc",
          "type_long": "ghidra.program.util.ProgramLocation",
          "type_short": "ProgramLocation",
          "comment": "location could be null"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "selectionChanged",
      "comment": "Subclass should override this method if it is interested in\n program selection events.",
      "javadoc": "Subclass should override this method if it is interested in\n program selection events.\n@param sel selection could be null",
      "static": false,
      "params": [
        {
          "name": "sel",
          "type_long": "ghidra.program.util.ProgramSelection",
          "type_short": "ProgramSelection",
          "comment": "selection could be null"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "highlightChanged",
      "comment": "Subclass should override this method if it is interested in\n program highlight events.",
      "javadoc": "Subclass should override this method if it is interested in\n program highlight events.\n@param hl highlight could be null",
      "static": false,
      "params": [
        {
          "name": "hl",
          "type_long": "ghidra.program.util.ProgramSelection",
          "type_short": "ProgramSelection",
          "comment": "highlight could be null"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "goTo",
      "comment": "Convenience method to go to the specified address.",
      "javadoc": "Convenience method to go to the specified address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "goTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "cu",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSelection",
      "comment": "Convenience method to fire a program selection event.",
      "javadoc": "Convenience method to fire a program selection event.\n@param set address set for the selection.",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "address set for the selection."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setBookmark",
      "comment": "Convenience method to set a bookmark;",
      "javadoc": "Convenience method to set a bookmark;\n@param addr address of where the bookmark will be placed\n@param type type of bookmark: BookMarkType.NOTE, BookmarkType.INFO,\n BookmarkType.ANALYSIS, or BookmarkType.ERROR.\n@param category category for the bookmark\n@param comment bookmark comment",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of where the bookmark will be placed"
        },
        {
          "name": "type",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "type of bookmark: BookMarkType.NOTE, BookmarkType.INFO,\n BookmarkType.ANALYSIS, or BookmarkType.ERROR."
        },
        {
          "name": "category",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "category for the bookmark"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "bookmark comment"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "enableActions",
      "comment": "Enable actions in the list according to the enabled param.",
      "javadoc": "Enable actions in the list according to the enabled param.\n@param enabled true means to enable the action AND set the\n add to popup as true; false means disable the action and set\n add to popup according to the removeFromPopup\n@param removeFromPopup only used if enabled is false",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.ArrayList\u003cdocking.action.DockingAction\u003e",
          "type_short": "ArrayList",
          "comment": ""
        },
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to enable the action AND set the\n add to popup as true; false means disable the action and set\n add to popup according to the removeFromPopup"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgramLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.util.ProgramLocation",
        "type_short": "ProgramLocation",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCurrentProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgramSelection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.util.ProgramSelection",
        "type_short": "ProgramSelection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgramHighlight",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.util.ProgramSelection",
        "type_short": "ProgramSelection",
        "comment": ""
      },
      "throws": []
    }
  ]
}
