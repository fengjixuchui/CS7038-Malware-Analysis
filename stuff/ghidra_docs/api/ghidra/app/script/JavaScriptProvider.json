{
  "name": "JavaScriptProvider",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.script.GhidraScriptProvider",
  "fields": [
    {
      "name": "BLOCK_COMMENT_START",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.regex.Pattern",
      "type_short": "Pattern",
      "constant_value": null
    },
    {
      "name": "BLOCK_COMMENT_END",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.regex.Pattern",
      "type_short": "Pattern",
      "constant_value": null
    },
    {
      "name": "bundleHost",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.core.osgi.BundleHost",
      "type_short": "BundleHost",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new JavaScriptProvider associated with the current bundle host used by scripting.",
      "javadoc": "Create a new {@link JavaScriptProvider} associated with the current bundle host used by scripting.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBundleForSource",
      "comment": "Get the GhidraSourceBundle containing the given source file, assuming it already exists.",
      "javadoc": "Get the {@link GhidraSourceBundle} containing the given source file, assuming it already exists.\n@param sourceFile the source file\n@return the bundle",
      "static": false,
      "params": [
        {
          "name": "sourceFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the source file"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.core.osgi.GhidraSourceBundle",
        "type_short": "GhidraSourceBundle",
        "comment": "the bundle"
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExtension",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteScript",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getScriptInstance",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": ""
        },
        {
          "name": "writer",
          "type_long": "java.io.PrintWriter",
          "type_short": "PrintWriter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.script.GhidraScript",
        "type_short": "GhidraScript",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.ClassNotFoundException",
          "type_short": "ClassNotFoundException",
          "comment": ""
        },
        {
          "type_long": "java.lang.InstantiationException",
          "type_short": "InstantiationException",
          "comment": ""
        },
        {
          "type_long": "java.lang.IllegalAccessException",
          "type_short": "IllegalAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "loadClass",
      "comment": "Activate and build the GhidraSourceBundle containing  \n then load the script\u0027s class from its class loader.",
      "javadoc": "Activate and build the {@link GhidraSourceBundle} containing {@code sourceFile} \n then load the script\u0027s class from its class loader.\n@param sourceFile the source file\n@param writer the target for build messages\n@return the loaded {@link Class} object\n@throws Exception if build, activation, or class loading fail",
      "static": false,
      "params": [
        {
          "name": "sourceFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the source file"
        },
        {
          "name": "writer",
          "type_long": "java.io.PrintWriter",
          "type_short": "PrintWriter",
          "comment": "the target for build messages"
        }
      ],
      "return": {
        "type_long": "java.lang.Class\u003c?\u003e",
        "type_short": "Class",
        "comment": "the loaded Class object"
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if build, activation, or class loading fail"
        }
      ]
    },
    {
      "name": "createNewScript",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newScript",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBlockCommentStart",
      "comment": "Returns a Pattern that matches block comment openings.\n For Java this is \"/*\".",
      "javadoc": "Returns a Pattern that matches block comment openings.\n For Java this is \"/*\".\n@return the Pattern for Java block comment openings",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.regex.Pattern",
        "type_short": "Pattern",
        "comment": "the Pattern for Java block comment openings"
      },
      "throws": []
    },
    {
      "name": "getBlockCommentEnd",
      "comment": "Returns a Pattern that matches block comment closings.\n In Java this is an asterisk followed by a forward slash.",
      "javadoc": "Returns a Pattern that matches block comment closings.\n In Java this is an asterisk followed by a forward slash.\n@return the Pattern for Java block comment closings",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.regex.Pattern",
        "type_short": "Pattern",
        "comment": "the Pattern for Java block comment closings"
      },
      "throws": []
    },
    {
      "name": "getCommentCharacter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCertifyHeaderStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCertifyHeaderEnd",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCertificationBodyPrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixupName",
      "comment": "Fix script name for search in script directories, such as Java package parts in the name and inner class names.\n\n This method can handle names with \u0027$\u0027 (inner classes) and names with \u0027.\u0027 \n characters for package separators\n\n It is part of a poorly specified behavior that is due for future amendment, \n see GhidraScriptUtil#fixupName(String).",
      "javadoc": "Fix script name for search in script directories, such as Java package parts in the name and inner class names.\n\n \u003cp\u003eThis method can handle names with \u0027$\u0027 (inner classes) and names with \u0027.\u0027 \n characters for package separators\n\n \u003cp\u003eIt is part of a poorly specified behavior that is due for future amendment, \n see {@link GhidraScriptUtil#fixupName(String)}.\n@param scriptName the name of the script\n@return the name as a \u0027.java\u0027 file path (with \u0027/\u0027s and not \u0027.\u0027s)",
      "static": false,
      "params": [
        {
          "name": "scriptName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the script"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name as a \u0027.java\u0027 file path (with \u0027/\u0027s and not \u0027.\u0027s)"
      },
      "throws": []
    }
  ]
}
