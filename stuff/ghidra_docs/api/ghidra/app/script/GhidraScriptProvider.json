{
  "name": "GhidraScriptProvider",
  "comment": "NOTE:  ALL GhidraScriptProvider CLASSES MUST END IN \"ScriptProvider\".  If not,\n the ClassSearcher will not find them.",
  "javadoc": "NOTE:  ALL GhidraScriptProvider CLASSES MUST END IN \"ScriptProvider\".  If not,\n the ClassSearcher will not find them.",
  "static": false,
  "implements": [
    "ghidra.util.classfinder.ExtensionPoint",
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "that",
          "type_long": "ghidra.app.script.GhidraScriptProvider",
          "type_short": "GhidraScriptProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deleteScript",
      "comment": "Deletes the script file and unloads the script from the script manager.",
      "javadoc": "Deletes the script file and unloads the script from the script manager.\n@param scriptSource the script source file\n@return true if the script was completely deleted and cleaned up",
      "static": false,
      "params": [
        {
          "name": "scriptSource",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the script source file"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the script was completely deleted and cleaned up"
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "Returns a description for this type of script.",
      "javadoc": "Returns a description for this type of script.\n@return a description for this type of script",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a description for this type of script"
      },
      "throws": []
    },
    {
      "name": "getExtension",
      "comment": "Returns the file extension for this type of script.\n For example, \".java\" or \".py\".",
      "javadoc": "Returns the file extension for this type of script.\n For example, \".java\" or \".py\".\n@return the file extension for this type of script",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the file extension for this type of script"
      },
      "throws": []
    },
    {
      "name": "getScriptInstance",
      "comment": "Returns a GhidraScript instance for the specified source file.",
      "javadoc": "Returns a GhidraScript instance for the specified source file.\n@param sourceFile the source file\n@param writer the print writer to write warning/error messages\n@return a GhidraScript instance for the specified source file\n@throws ClassNotFoundException if the script class cannot be found\n@throws InstantiationException if the construction of the script fails for some reason\n@throws IllegalAccessException if the class constructor is not accessible",
      "static": false,
      "params": [
        {
          "name": "sourceFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the source file"
        },
        {
          "name": "writer",
          "type_long": "java.io.PrintWriter",
          "type_short": "PrintWriter",
          "comment": "the print writer to write warning/error messages"
        }
      ],
      "return": {
        "type_long": "ghidra.app.script.GhidraScript",
        "type_short": "GhidraScript",
        "comment": "a GhidraScript instance for the specified source file"
      },
      "throws": [
        {
          "type_long": "java.lang.ClassNotFoundException",
          "type_short": "ClassNotFoundException",
          "comment": "if the script class cannot be found"
        },
        {
          "type_long": "java.lang.InstantiationException",
          "type_short": "InstantiationException",
          "comment": "if the construction of the script fails for some reason"
        },
        {
          "type_long": "java.lang.IllegalAccessException",
          "type_short": "IllegalAccessException",
          "comment": "if the class constructor is not accessible"
        }
      ]
    },
    {
      "name": "createNewScript",
      "comment": "Creates a new script using the specified file.",
      "javadoc": "Creates a new script using the specified file.\n@param newScript the new script file\n@param category the script category\n@throws IOException if an error occurs writing the file",
      "static": false,
      "params": [
        {
          "name": "newScript",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the new script file"
        },
        {
          "name": "category",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the script category"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an error occurs writing the file"
        }
      ]
    },
    {
      "name": "getBlockCommentStart",
      "comment": "Returns a Pattern that matches block comment openings.\n If block comments are not supported by this provider, then this returns null.",
      "javadoc": "Returns a Pattern that matches block comment openings.\n If block comments are not supported by this provider, then this returns null.\n@return the Pattern for block comment openings, null if block comments are not supported",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.regex.Pattern",
        "type_short": "Pattern",
        "comment": "the Pattern for block comment openings, null if block comments are not supported"
      },
      "throws": []
    },
    {
      "name": "getBlockCommentEnd",
      "comment": "Returns a Pattern that matches block comment closings.\n If block comments are not supported by this provider, then this returns null.",
      "javadoc": "Returns a Pattern that matches block comment closings.\n If block comments are not supported by this provider, then this returns null.\n@return the Pattern for block comment closings, null if block comments are not supported",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.regex.Pattern",
        "type_short": "Pattern",
        "comment": "the Pattern for block comment closings, null if block comments are not supported"
      },
      "throws": []
    },
    {
      "name": "getCommentCharacter",
      "comment": "Returns the comment character.\n For example, \"//\" or \"#\".",
      "javadoc": "Returns the comment character.\n For example, \"//\" or \"#\".\n@return the comment character",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the comment character"
      },
      "throws": []
    },
    {
      "name": "writeHeader",
      "comment": "Writes the script header. \n Include a place holder for each meta-data item.",
      "javadoc": "Writes the script header. \n Include a place holder for each meta-data item.\n@param writer the print writer\n@param category the default category",
      "static": false,
      "params": [
        {
          "name": "writer",
          "type_long": "java.io.PrintWriter",
          "type_short": "PrintWriter",
          "comment": "the print writer"
        },
        {
          "name": "category",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the default category"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "writeBody",
      "comment": "Writes the script body template.",
      "javadoc": "Writes the script body template.\n@param writer the print writer",
      "static": false,
      "params": [
        {
          "name": "writer",
          "type_long": "java.io.PrintWriter",
          "type_short": "PrintWriter",
          "comment": "the print writer"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixupName",
      "comment": "Fixup a script name for searching in script directories.\n\n This method is part of a poorly specified behavior that is due for future amendment, \n see GhidraScriptUtil#fixupName(String).",
      "javadoc": "Fixup a script name for searching in script directories.\n\n \u003cp\u003eThis method is part of a poorly specified behavior that is due for future amendment, \n see {@link GhidraScriptUtil#fixupName(String)}.\n@param scriptName the name of the script, must end with this provider\u0027s extension\n@return a (relative) file path to the corresponding script",
      "static": false,
      "params": [
        {
          "name": "scriptName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the script, must end with this provider\u0027s extension"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a (relative) file path to the corresponding script"
      },
      "throws": []
    },
    {
      "name": "getCertifyHeaderStart",
      "comment": "Return the start of certification header line if this file type is subject to certification.",
      "javadoc": "Return the start of certification header line if this file type is subject to certification.\n@return start of certification header or null if not supported",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "start of certification header or null if not supported"
      },
      "throws": []
    },
    {
      "name": "getCertificationBodyPrefix",
      "comment": "Return the prefix for each certification header body line if this file is subject to \n certification.",
      "javadoc": "Return the prefix for each certification header body line if this file is subject to \n certification.\n@return certification header body prefix or null if not supported",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "certification header body prefix or null if not supported"
      },
      "throws": []
    },
    {
      "name": "getCertifyHeaderEnd",
      "comment": "Return the end of certification header line if this file type is subject to certification.",
      "javadoc": "Return the end of certification header line if this file type is subject to certification.\n@return end of certification header or null if not supported",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "end of certification header or null if not supported"
      },
      "throws": []
    }
  ]
}
