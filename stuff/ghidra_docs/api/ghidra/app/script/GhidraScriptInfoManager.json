{
  "name": "GhidraScriptInfoManager",
  "comment": "A utility class for managing script directories and ScriptInfo objects.",
  "javadoc": "A utility class for managing script directories and ScriptInfo objects.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "scriptFileToInfoMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cgeneric.jar.ResourceFile,ghidra.app.script.ScriptInfo\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "scriptNameToFilesMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,java.util.List\u003cgeneric.jar.ResourceFile\u003e\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "clear stored metadata",
      "javadoc": "clear stored metadata",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearMetadata",
      "comment": "clear ScriptInfo metadata cached by GhidraScriptUtil",
      "javadoc": "clear ScriptInfo metadata cached by GhidraScriptUtil",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeMetadata",
      "comment": "Removes the ScriptInfo object for the specified file",
      "javadoc": "Removes the ScriptInfo object for the specified file\n@param scriptFile the script file",
      "static": false,
      "params": [
        {
          "name": "scriptFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the script file"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getScriptInfoIterable",
      "comment": "get all scripts",
      "javadoc": "get all scripts\n@return an iterable over all script info objects",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Iterable\u003cghidra.app.script.ScriptInfo\u003e",
        "type_short": "Iterable",
        "comment": "an iterable over all script info objects"
      },
      "throws": []
    },
    {
      "name": "getScriptInfo",
      "comment": "Returns the script info object for the specified script file,\n construct a new one if necessary.\n \n Only call this method if you expect to be creating ScriptInfo objects.\n Prefer getExistingScriptInfo instead.",
      "javadoc": "Returns the script info object for the specified script file,\n construct a new one if necessary.\n \n \u003cp\u003eOnly call this method if you expect to be creating ScriptInfo objects.\n Prefer getExistingScriptInfo instead.\n@param scriptFile the script file\n@return the script info object for the specified script file",
      "static": false,
      "params": [
        {
          "name": "scriptFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the script file"
        }
      ],
      "return": {
        "type_long": "ghidra.app.script.ScriptInfo",
        "type_short": "ScriptInfo",
        "comment": "the script info object for the specified script file"
      },
      "throws": []
    },
    {
      "name": "containsMetadata",
      "comment": "Returns true if a ScriptInfo object exists for\n the specified script file.",
      "javadoc": "Returns true if a ScriptInfo object exists for\n the specified script file.\n@param scriptFile the script file\n@return true if a ScriptInfo object exists",
      "static": false,
      "params": [
        {
          "name": "scriptFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the script file"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a ScriptInfo object exists"
      },
      "throws": []
    },
    {
      "name": "getExistingScriptInfo",
      "comment": "Get ScriptInfo for  under the assumption that it\u0027s already managed.",
      "javadoc": "Get {@link ScriptInfo} for {@code script} under the assumption that it\u0027s already managed.\n@param script the script\n@return info or null if the assumption was wrong. If null is returned, an error dialog is shown",
      "static": false,
      "params": [
        {
          "name": "script",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the script"
        }
      ],
      "return": {
        "type_long": "ghidra.app.script.ScriptInfo",
        "type_short": "ScriptInfo",
        "comment": "info or null if the assumption was wrong. If null is returned, an error dialog is shown"
      },
      "throws": []
    },
    {
      "name": "getExistingScriptInfo",
      "comment": "Returns the existing script info for the given name.  The script environment limits \n scripts such that names are unique.  If this method returns a non-null value, then the \n name given name is taken.",
      "javadoc": "Returns the existing script info for the given name.  The script environment limits \n scripts such that names are unique.  If this method returns a non-null value, then the \n name given name is taken.\n@param scriptName the name of the script for which to get a ScriptInfo\n@return a ScriptInfo matching the given name; null if no script by that name is known to\n         the script manager",
      "static": false,
      "params": [
        {
          "name": "scriptName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the script for which to get a ScriptInfo"
        }
      ],
      "return": {
        "type_long": "ghidra.app.script.ScriptInfo",
        "type_short": "ScriptInfo",
        "comment": "a ScriptInfo matching the given name; null if no script by that name is known to\n         the script manager"
      },
      "throws": []
    },
    {
      "name": "alreadyExists",
      "comment": "Looks through all of the current ScriptInfos to see if one already exists with \n the given name.",
      "javadoc": "Looks through all of the current {@link ScriptInfo}s to see if one already exists with \n the given name.\n@param scriptName The name to check\n@return true if the name is not taken by an existing {@link ScriptInfo}.",
      "static": false,
      "params": [
        {
          "name": "scriptName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the name is not taken by an existing ScriptInfo."
      },
      "throws": []
    },
    {
      "name": "markAnyDuplicates",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "files",
          "type_long": "java.util.List\u003cgeneric.jar.ResourceFile\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "refreshDuplicates",
      "comment": "Updates every known script\u0027s duplicate value.",
      "javadoc": "Updates every known script\u0027s duplicate value.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findScriptInfoByName",
      "comment": "Uses the given name to find a matching script.  This method only works because of the\n limitation that all script names in Ghidra must be unique.  If the given name has multiple\n script matches, then a warning will be logged.",
      "javadoc": "Uses the given name to find a matching script.  This method only works because of the\n limitation that all script names in Ghidra must be unique.  If the given name has multiple\n script matches, then a warning will be logged.\n@param scriptName The name for which to find a script\n@return The ScriptInfo that has the given name",
      "static": false,
      "params": [
        {
          "name": "scriptName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name for which to find a script"
        }
      ],
      "return": {
        "type_long": "ghidra.app.script.ScriptInfo",
        "type_short": "ScriptInfo",
        "comment": "The ScriptInfo that has the given name"
      },
      "throws": []
    }
  ]
}
