{
  "name": "GhidraScriptProperties",
  "comment": "Handles processing for .properties files associated with a GhidraScript (.properties file and\n script should share the same basename).\n \n This should only be called/used by the GhidraScript class.",
  "javadoc": "Handles processing for .properties files associated with a GhidraScript (.properties file and\n script should share the same basename).\n \n \u003cp\u003eThis should only be called/used by the GhidraScript class.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "propertiesMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cjava.lang.String,java.lang.String\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "baseName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadGhidraScriptProperties",
      "comment": "Load a .properties file given a directory (ResourceFile) and the basename (i.e., name of the\n GhidraScript without the extension).",
      "javadoc": "Load a .properties file given a directory (ResourceFile) and the basename (i.e., name of the\n GhidraScript without the extension).\n@param scriptLocation location of the GhidraScript\n@param newBaseName name of the GhidraScript (without the extension)\n@throws IOException if there is an exception loading the properties file",
      "static": false,
      "params": [
        {
          "name": "scriptLocation",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "location of the GhidraScript"
        },
        {
          "name": "newBaseName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the GhidraScript (without the extension)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception loading the properties file"
        }
      ]
    },
    {
      "name": "getFilename",
      "comment": "",
      "javadoc": "@return the properties file name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the properties file name"
      },
      "throws": []
    },
    {
      "name": "loadGhidraScriptProperties",
      "comment": "Look for a .properties file corresponding to the basename in the given locations.",
      "javadoc": "Look for a .properties file corresponding to the basename in the given locations.\n@param possibleLocations possible locations where the .properties file can be found\n@param newBaseName name of the GhidraScript (without the extension)\n@throws IOException if there is an exception loading the properties file",
      "static": false,
      "params": [
        {
          "name": "possibleLocations",
          "type_long": "java.util.List\u003cgeneric.jar.ResourceFile\u003e",
          "type_short": "List",
          "comment": "possible locations where the .properties file can be found"
        },
        {
          "name": "newBaseName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the GhidraScript (without the extension)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception loading the properties file"
        }
      ]
    },
    {
      "name": "loadGhidraScriptProperties",
      "comment": "Load a .properties file.",
      "javadoc": "Load a .properties file.\n@param file the .properties file\n@throws IOException if there is an exception loading the properties file",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "the .properties file"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is an exception loading the properties file"
        }
      ]
    },
    {
      "name": "put",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "",
      "javadoc": "@param keyString the property name\n@return the value of the key in the properties file, or an empty string if no property exists",
      "static": false,
      "params": [
        {
          "name": "keyString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the property name"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the value of the key in the properties file, or an empty string if no property exists"
      },
      "throws": []
    },
    {
      "name": "isEmpty",
      "comment": "",
      "javadoc": "@return true if there are no properties",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there are no properties"
      },
      "throws": []
    },
    {
      "name": "remove",
      "comment": "Remove the named property",
      "javadoc": "Remove the named property\n@param keyString the property name\n@return the previous value or null",
      "static": false,
      "params": [
        {
          "name": "keyString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the property name"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the previous value or null"
      },
      "throws": []
    },
    {
      "name": "clearProperties",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "containsKey",
      "comment": "",
      "javadoc": "@param keyString a property name\n@return true if the key exists in the property file",
      "static": false,
      "params": [
        {
          "name": "keyString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a property name"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the key exists in the property file"
      },
      "throws": []
    },
    {
      "name": "containsValue",
      "comment": "",
      "javadoc": "@param valueString a value string\n@return true if any property has the given value",
      "static": false,
      "params": [
        {
          "name": "valueString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a value string"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if any property has the given value"
      },
      "throws": []
    },
    {
      "name": "keySet",
      "comment": "",
      "javadoc": "@return the property names for all properties",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cjava.lang.String\u003e",
        "type_short": "Set",
        "comment": "the property names for all properties"
      },
      "throws": []
    },
    {
      "name": "values",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cjava.lang.String\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": []
    }
  ]
}
