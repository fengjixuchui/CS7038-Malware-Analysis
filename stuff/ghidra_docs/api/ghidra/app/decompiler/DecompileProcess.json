{
  "name": "DecompileProcess",
  "comment": "Class for communicating with a single decompiler process.\n The process controls decompilation for a single Program.\n The process is initiated by the registerProgram method.\n If the process is ready, the statusGood flag will be set\n to true.  This flag must be checked via the isReady method\n prior to invoking any of the public methods.  If the\n process isn\u0027t ready, the only way to recover is by\n reissuing the registerProgram call and making any other\n necessary initialization calls.",
  "javadoc": "Class for communicating with a single decompiler process.\n The process controls decompilation for a single Program.\n The process is initiated by the registerProgram method.\n If the process is ready, the statusGood flag will be set\n to true.  This flag must be checked via the isReady method\n prior to invoking any of the public methods.  If the\n process isn\u0027t ready, the only way to recover is by\n reissuing the registerProgram call and making any other\n necessary initialization calls.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "command_start",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "command_end",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "query_response_start",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "query_response_end",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "string_start",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "string_end",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "exception_start",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "exception_end",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "byte_start",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "byte_end",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "runtime",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Runtime",
      "type_short": "Runtime",
      "constant_value": null
    },
    {
      "name": "exepath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "timeoutRunnable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Runnable",
      "type_short": "Runnable",
      "constant_value": null
    },
    {
      "name": "nativeProcess",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Process",
      "type_short": "Process",
      "constant_value": null
    },
    {
      "name": "nativeIn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.InputStream",
      "type_short": "InputStream",
      "constant_value": null
    },
    {
      "name": "nativeOut",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.OutputStream",
      "type_short": "OutputStream",
      "constant_value": null
    },
    {
      "name": "statusGood",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "archId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "callback",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.decompiler.DecompileCallback",
      "type_short": "DecompileCallback",
      "constant_value": null
    },
    {
      "name": "maxResultSizeMBYtes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "disposestate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.decompiler.DecompileProcess.DisposeState",
      "type_short": "DisposeState",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDisposeState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.decompiler.DecompileProcess.DisposeState",
        "type_short": "DisposeState",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readToBurst",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readToResponse",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.decompiler.DecompileException",
          "type_short": "DecompileException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readToBuffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.app.decompiler.LimitedByteBuffer",
          "type_short": "LimitedByteBuffer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readQueryString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "msg",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeBytes",
      "comment": "Transfer bytes written to -out- to decompiler process",
      "javadoc": "Transfer bytes written to -out- to decompiler process\n@param out has the collected byte for this write\n@throws IOException for any problems with the output stream",
      "static": false,
      "params": [
        {
          "name": "out",
          "type_long": "ghidra.program.model.lang.PackedBytes",
          "type_short": "PackedBytes",
          "comment": "has the collected byte for this write"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for any problems with the output stream"
        }
      ]
    },
    {
      "name": "generateException",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.decompiler.DecompileException",
          "type_short": "DecompileException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readResponse",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.decompiler.LimitedByteBuffer",
        "type_short": "LimitedByteBuffer",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.decompiler.DecompileException",
          "type_short": "DecompileException",
          "comment": ""
        }
      ]
    },
    {
      "name": "registerProgram",
      "comment": "Initialize decompiler for a particular platform",
      "javadoc": "Initialize decompiler for a particular platform\n@param cback \u003d callback object for decompiler\n@param pspecxml \u003d string containing .pspec xml\n@param cspecxml \u003d string containing .cspec xml\n@param tspecxml \u003d XML string containing translator spec\n@param coretypesxml \u003d XML description of core data-types\n@throws IOException for problems with the pipe to the decompiler process\n@throws DecompileException for problems executing the command",
      "static": false,
      "params": [
        {
          "name": "cback",
          "type_long": "ghidra.app.decompiler.DecompileCallback",
          "type_short": "DecompileCallback",
          "comment": "\u003d callback object for decompiler"
        },
        {
          "name": "pspecxml",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "\u003d string containing .pspec xml"
        },
        {
          "name": "cspecxml",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "\u003d string containing .cspec xml"
        },
        {
          "name": "tspecxml",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "\u003d XML string containing translator spec"
        },
        {
          "name": "coretypesxml",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "\u003d XML description of core data-types"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for problems with the pipe to the decompiler process"
        },
        {
          "type_long": "ghidra.app.decompiler.DecompileException",
          "type_short": "DecompileException",
          "comment": "for problems executing the command"
        }
      ]
    },
    {
      "name": "deregisterProgram",
      "comment": "Free decompiler resources",
      "javadoc": "Free decompiler resources\n@return 1 if a program was actively deregistered, 0 otherwise\n@throws IOException for problems with the pipe to the decompiler\n@throws DecompileException for problems executing the command",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "1 if a program was actively deregistered, 0 otherwise"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for problems with the pipe to the decompiler"
        },
        {
          "type_long": "ghidra.app.decompiler.DecompileException",
          "type_short": "DecompileException",
          "comment": "for problems executing the command"
        }
      ]
    },
    {
      "name": "sendCommand",
      "comment": "Send a single command to the decompiler with no parameters and return response",
      "javadoc": "Send a single command to the decompiler with no parameters and return response\n@param command is the name of the command to execute\n@return the response String\n@throws IOException for any problems with the pipe to the decompiler process\n@throws DecompileException for any problems executing the command",
      "static": false,
      "params": [
        {
          "name": "command",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the name of the command to execute"
        }
      ],
      "return": {
        "type_long": "ghidra.app.decompiler.LimitedByteBuffer",
        "type_short": "LimitedByteBuffer",
        "comment": "the response String"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for any problems with the pipe to the decompiler process"
        },
        {
          "type_long": "ghidra.app.decompiler.DecompileException",
          "type_short": "DecompileException",
          "comment": "for any problems executing the command"
        }
      ]
    },
    {
      "name": "isReady",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sendCommand1ParamTimeout",
      "comment": "",
      "javadoc": "@param command the decompiler should execute\n@param param an additional parameter for the command\n@param timeoutSecs the number of seconds to run before timing out\n@return the response string\n@throws IOException for any problems with the pipe to the decompiler process\n@throws DecompileException for any problems while executing the command",
      "static": false,
      "params": [
        {
          "name": "command",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the decompiler should execute"
        },
        {
          "name": "param",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "an additional parameter for the command"
        },
        {
          "name": "timeoutSecs",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of seconds to run before timing out"
        }
      ],
      "return": {
        "type_long": "ghidra.app.decompiler.LimitedByteBuffer",
        "type_short": "LimitedByteBuffer",
        "comment": "the response string"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for any problems with the pipe to the decompiler process"
        },
        {
          "type_long": "ghidra.app.decompiler.DecompileException",
          "type_short": "DecompileException",
          "comment": "for any problems while executing the command"
        }
      ]
    },
    {
      "name": "getTimeoutMs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "timeoutSecs",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sendCommand2Params",
      "comment": "Send a command with 2 parameters to the decompiler and read the result",
      "javadoc": "Send a command with 2 parameters to the decompiler and read the result\n@param command string to send\n@param param1 is the first parameter string\n@param param2 is the second parameter string\n@return the result string\n@throws IOException for any problems with the pipe to the decompiler process\n@throws DecompileException for problems executing the command",
      "static": false,
      "params": [
        {
          "name": "command",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string to send"
        },
        {
          "name": "param1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the first parameter string"
        },
        {
          "name": "param2",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the second parameter string"
        }
      ],
      "return": {
        "type_long": "ghidra.app.decompiler.LimitedByteBuffer",
        "type_short": "LimitedByteBuffer",
        "comment": "the result string"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for any problems with the pipe to the decompiler process"
        },
        {
          "type_long": "ghidra.app.decompiler.DecompileException",
          "type_short": "DecompileException",
          "comment": "for problems executing the command"
        }
      ]
    },
    {
      "name": "setMaxResultSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "maxResultSizeMBytes",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sendCommand1Param",
      "comment": "Send a command to the decompiler with one parameter and return the result",
      "javadoc": "Send a command to the decompiler with one parameter and return the result\n@param command is the command string\n@param param1 is the parameter as a string\n@return the result string\n@throws IOException for problems with the pipe to the decompiler process\n@throws DecompileException for problems executing the command",
      "static": false,
      "params": [
        {
          "name": "command",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the command string"
        },
        {
          "name": "param1",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the parameter as a string"
        }
      ],
      "return": {
        "type_long": "ghidra.app.decompiler.LimitedByteBuffer",
        "type_short": "LimitedByteBuffer",
        "comment": "the result string"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for problems with the pipe to the decompiler process"
        },
        {
          "type_long": "ghidra.app.decompiler.DecompileException",
          "type_short": "DecompileException",
          "comment": "for problems executing the command"
        }
      ]
    },
    {
      "name": "getRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRegisterName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getTrackedRegisters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getUserOpName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getPcodePacked",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getPcodeInject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getCPoolRef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getMappedSymbolsXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getNamespacePath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isNameUsed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getExternalRefXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getComments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getStringData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "write",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "write",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
