{
  "name": "ClangToken",
  "comment": "Class representing a C code language token\n May contain links back to pcode object",
  "javadoc": "Class representing a C code language token\n May contain links back to pcode object",
  "static": false,
  "implements": [
    "ghidra.app.decompiler.ClangNode"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "KEYWORD_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "TYPE_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "FUNCTION_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "COMMENT_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "VARIABLE_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "CONST_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "PARAMETER_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "GLOBAL_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "7"
    },
    {
      "name": "DEFAULT_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "parent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.decompiler.ClangNode",
      "type_short": "ClangNode",
      "constant_value": null
    },
    {
      "name": "lineparent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.decompiler.ClangLine",
      "type_short": "ClangLine",
      "constant_value": null
    },
    {
      "name": "text",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "syntax_type",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "highlight",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "matchingToken",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "par",
          "type_long": "ghidra.app.decompiler.ClangNode",
          "type_short": "ClangNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "par",
          "type_long": "ghidra.app.decompiler.ClangNode",
          "type_short": "ClangNode",
          "comment": ""
        },
        {
          "name": "txt",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "par",
          "type_long": "ghidra.app.decompiler.ClangNode",
          "type_short": "ClangNode",
          "comment": ""
        },
        {
          "name": "txt",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "col",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "Parent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.decompiler.ClangNode",
        "type_short": "ClangNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLineParent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.decompiler.ClangLine",
        "type_short": "ClangLine",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLineParent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "line",
          "type_long": "ghidra.app.decompiler.ClangLine",
          "type_short": "ClangLine",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaxAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "numChildren",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "Child",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.decompiler.ClangNode",
        "type_short": "ClangNode",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getClangFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.decompiler.ClangFunction",
        "type_short": "ClangFunction",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setHighlight",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "val",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHighlight",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMatchingToken",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "matchingToken",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isMatchingToken",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isVariableRef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSyntaxType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSyntaxType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "syntax_type",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getText",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setText",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreFromXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "el",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": ""
        },
        {
          "name": "pfactory",
          "type_long": "ghidra.program.model.pcode.PcodeFactory",
          "type_short": "PcodeFactory",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "flatten",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cghidra.app.decompiler.ClangNode\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildToken",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "par",
          "type_long": "ghidra.app.decompiler.ClangNode",
          "type_short": "ClangNode",
          "comment": ""
        },
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "pfactory",
          "type_long": "ghidra.program.model.pcode.PcodeFactory",
          "type_short": "PcodeFactory",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.decompiler.ClangToken",
        "type_short": "ClangToken",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColor",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "col",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildSpacer",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "par",
          "type_long": "ghidra.app.decompiler.ClangNode",
          "type_short": "ClangNode",
          "comment": ""
        },
        {
          "name": "indent",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "indentStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.decompiler.ClangToken",
        "type_short": "ClangToken",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHighVariable",
      "comment": "Get the high-level variable associate with this\n token or null otherwise",
      "javadoc": "Get the high-level variable associate with this\n token or null otherwise\n@return HighVariable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighVariable",
        "type_short": "HighVariable",
        "comment": "HighVariable"
      },
      "throws": []
    },
    {
      "name": "getVarnode",
      "comment": "Many tokens directly represent a variable in the data-flow",
      "javadoc": "Many tokens directly represent a variable in the data-flow\n@return the variable (Varnode) associated with this token or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "the variable (Varnode) associated with this token or null"
      },
      "throws": []
    },
    {
      "name": "getPcodeOp",
      "comment": "Many tokens directly represent a pcode operator in the data-flow",
      "javadoc": "Many tokens directly represent a pcode operator in the data-flow\n@return the operation (PcodeOp) associated with this token or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp",
        "type_short": "PcodeOp",
        "comment": "the operation (PcodeOp) associated with this token or null"
      },
      "throws": []
    }
  ]
}
