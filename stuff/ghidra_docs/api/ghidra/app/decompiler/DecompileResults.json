{
  "name": "DecompileResults",
  "comment": "Class for getting at the various structures returned\n by the decompiler.  Depending on how the DecompInterface\n was called, you can get C code (with markup), the\n function\u0027 syntax tree, the prototype, etc.\n \n To check if the decompileFunction call completed normally\n use the decompileCompleted method.  If this returns false,\n the getErrorMessage method may contain a useful error\n message.  Its also possible that getErrorMessage will\n return warning messages, even if decompileFunction did\n complete.\n \n To get the resulting C code, marked up with XML in terms\n of the lines and tokens, use the getCCodeMarkup method.\n \n To get the resulting C code just as a straight String,\n use the getDecompiledFunction method which returns a\n DecompiledFunction.  Off of this, you can use the getC\n method to get the raw C code as a String or use the\n getSignature method to get the functions prototype as\n a String.\n \n To get the syntax tree use the getHighFunction method.",
  "javadoc": "Class for getting at the various structures returned\n by the decompiler.  Depending on how the DecompInterface\n was called, you can get C code (with markup), the\n function\u0027 syntax tree, the prototype, etc.\n \n To check if the decompileFunction call completed normally\n use the decompileCompleted method.  If this returns false,\n the getErrorMessage method may contain a useful error\n message.  Its also possible that getErrorMessage will\n return warning messages, even if decompileFunction did\n complete.\n \n To get the resulting C code, marked up with XML in terms\n of the lines and tokens, use the getCCodeMarkup method.\n \n To get the resulting C code just as a straight String,\n use the getDecompiledFunction method which returns a\n DecompiledFunction.  Off of this, you can use the getC\n method to get the raw C code as a String or use the\n getSignature method to get the functions prototype as\n a String.\n \n To get the syntax tree use the getHighFunction method.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "function",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Function",
      "type_short": "Function",
      "constant_value": null
    },
    {
      "name": "language",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Language",
      "type_short": "Language",
      "constant_value": null
    },
    {
      "name": "compilerSpec",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.CompilerSpec",
      "type_short": "CompilerSpec",
      "constant_value": null
    },
    {
      "name": "dtmanage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
      "type_short": "PcodeDataTypeManager",
      "constant_value": null
    },
    {
      "name": "hfunc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.HighFunction",
      "type_short": "HighFunction",
      "constant_value": null
    },
    {
      "name": "hparamid",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.HighParamID",
      "type_short": "HighParamID",
      "constant_value": null
    },
    {
      "name": "docroot",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.decompiler.ClangTokenGroup",
      "type_short": "ClangTokenGroup",
      "constant_value": null
    },
    {
      "name": "errMsg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "processState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.decompiler.DecompileProcess.DisposeState",
      "type_short": "DisposeState",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "f",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        },
        {
          "name": "compilerSpec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": ""
        },
        {
          "name": "d",
          "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
          "type_short": "PcodeDataTypeManager",
          "comment": ""
        },
        {
          "name": "e",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "raw",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": ""
        },
        {
          "name": "processState",
          "type_long": "ghidra.app.decompiler.DecompileProcess.DisposeState",
          "type_short": "DisposeState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decompileCompleted",
      "comment": "Returns true if the decompilation producing these\n results completed without aborting.  If it was\n aborted, there will be no real results in this\n object, and an error message should be available via\n getErrorMessage.",
      "javadoc": "Returns true if the decompilation producing these\n results completed without aborting.  If it was\n aborted, there will be no real results in this\n object, and an error message should be available via\n getErrorMessage.\n@return true if the decompilation completed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the decompilation completed."
      },
      "throws": []
    },
    {
      "name": "getFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isTimedOut",
      "comment": "If the action producing this set of decompiler results\n didn\u0027t complete, this method can be used to determine\n if the action was halted because its timer expired\n (as opposed to an error, a crash, or being explicitly\n cancelled).",
      "javadoc": "If the action producing this set of decompiler results\n didn\u0027t complete, this method can be used to determine\n if the action was halted because its timer expired\n (as opposed to an error, a crash, or being explicitly\n cancelled).\n@return true if the timer cancelled these results",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the timer cancelled these results"
      },
      "throws": []
    },
    {
      "name": "isCancelled",
      "comment": "If the action producing this set of decompiler results\n didn\u0027t complete, this method can be used to determine\n if the action was explicitly cancelled (as opposed\n to an error, a timeout, or a crash).",
      "javadoc": "If the action producing this set of decompiler results\n didn\u0027t complete, this method can be used to determine\n if the action was explicitly cancelled (as opposed\n to an error, a timeout, or a crash).\n@return true if these results were explicitly cancelled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if these results were explicitly cancelled"
      },
      "throws": []
    },
    {
      "name": "failedToStart",
      "comment": "If the action producing this set of decompiler results\n didn\u0027t complete, this method can be used to determine\n if the decompiler executable was not found or failed to start properly.",
      "javadoc": "If the action producing this set of decompiler results\n didn\u0027t complete, this method can be used to determine\n if the decompiler executable was not found or failed to start properly.\n@return true if the decompiler executable was not found.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the decompiler executable was not found."
      },
      "throws": []
    },
    {
      "name": "getErrorMessage",
      "comment": "Return any error message associated with the\n decompilation producing these results.  Generally,\n there will only be an error if the decompilation was\n aborted for some reason, but there could conceivably\n be warnings obtainable via this method, even if the\n decompilation did complete.",
      "javadoc": "Return any error message associated with the\n decompilation producing these results.  Generally,\n there will only be an error if the decompilation was\n aborted for some reason, but there could conceivably\n be warnings obtainable via this method, even if the\n decompilation did complete.\n@return any error message associated with these results",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "any error message associated with these results"
      },
      "throws": []
    },
    {
      "name": "getHighFunction",
      "comment": "Get the high-level function structure associated\n with these decompilation results, or null if there\n was an error during decompilation",
      "javadoc": "Get the high-level function structure associated\n with these decompilation results, or null if there\n was an error during decompilation\n@return the resulting HighFunction object",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighFunction",
        "type_short": "HighFunction",
        "comment": "the resulting HighFunction object"
      },
      "throws": []
    },
    {
      "name": "getHighParamID",
      "comment": "Get the high-level function structure associated\n with these decompilation results, or null if there\n was an error during decompilation",
      "javadoc": "Get the high-level function structure associated\n with these decompilation results, or null if there\n was an error during decompilation\n@return the resulting HighParamID object",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.HighParamID",
        "type_short": "HighParamID",
        "comment": "the resulting HighParamID object"
      },
      "throws": []
    },
    {
      "name": "getCCodeMarkup",
      "comment": "Get the marked up C code associated with these\n decompilation results. If there was an error, or\n code generation was turned off, retur null",
      "javadoc": "Get the marked up C code associated with these\n decompilation results. If there was an error, or\n code generation was turned off, retur null\n@return the resulting root of C markup",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.decompiler.ClangTokenGroup",
        "type_short": "ClangTokenGroup",
        "comment": "the resulting root of C markup"
      },
      "throws": []
    },
    {
      "name": "getDecompiledFunction",
      "comment": "Converts the C code results into an unadorned string.\n The returned object contains both the whole function\n and just the prototype as separate strings containing\n raw C code",
      "javadoc": "Converts the C code results into an unadorned string.\n The returned object contains both the whole function\n and just the prototype as separate strings containing\n raw C code\n@return a DecompiledFunction object",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.decompiler.DecompiledFunction",
        "type_short": "DecompiledFunction",
        "comment": "a DecompiledFunction object"
      },
      "throws": []
    },
    {
      "name": "parseRawString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rawxml",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
