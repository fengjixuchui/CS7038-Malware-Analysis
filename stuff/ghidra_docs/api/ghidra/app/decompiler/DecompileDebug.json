{
  "name": "DecompileDebug",
  "comment": "A container for collecting communication between the decompiler and the Ghidra database,\n as serviced through DecompileCallback during decompilation of a function.\n The query results can then be dumped as an XML document.\n The container is populated through methods that mirror the various methods in DecompileCallback.",
  "javadoc": "A container for collecting communication between the decompiler and the Ghidra database,\n as serviced through DecompileCallback during decompilation of a function.\n The query results can then be dumped as an XML document.\n The container is populated through methods that mirror the various methods in DecompileCallback.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "func",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Function",
      "type_short": "Function",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "debugFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.File",
      "type_short": "File",
      "constant_value": null
    },
    {
      "name": "specExtensions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "dbscope",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.program.model.symbol.Namespace\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "database",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "dtypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.program.model.data.DataType\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "context",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "cpool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "flowoverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "inject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "byteset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.TreeSet\u003cghidra.app.decompiler.DecompileDebug.ByteChunk\u003e",
      "type_short": "TreeSet",
      "constant_value": null
    },
    {
      "name": "contextchange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.TreeSet\u003cghidra.program.model.address.Address\u003e",
      "type_short": "TreeSet",
      "constant_value": null
    },
    {
      "name": "stringmap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.TreeMap\u003cghidra.program.model.address.Address,ghidra.app.decompiler.DecompileCallback.StringData\u003e",
      "type_short": "TreeMap",
      "constant_value": null
    },
    {
      "name": "contextRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Register",
      "type_short": "Register",
      "constant_value": null
    },
    {
      "name": "progctx",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.ProgramContext",
      "type_short": "ProgramContext",
      "constant_value": null
    },
    {
      "name": "comments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "globalnamespace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.symbol.Namespace",
      "type_short": "Namespace",
      "constant_value": null
    },
    {
      "name": "readonlycache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressRange",
      "type_short": "AddressRange",
      "constant_value": null
    },
    {
      "name": "readonlycacheval",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "dtmanage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
      "type_short": "PcodeDataTypeManager",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugf",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "f",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPcodeDataTypeManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
          "type_short": "PcodeDataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "shutdown",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pcodelanguage",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        },
        {
          "name": "xmlOptions",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpImage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": ""
        },
        {
          "name": "pcodelanguage",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isReadOnly",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "dumpStringData",
      "comment": "Dump information on strings that were queried by the decompiler.",
      "javadoc": "Dump information on strings that were queried by the decompiler.\n@param debugStream is the stream to write to\n@throws IOException if any i/o error occurs",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": "is the stream to write to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if any i/o error occurs"
        }
      ]
    },
    {
      "name": "dumpDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "dumpTrackedContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getContextSymbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.ArrayList\u003cghidra.app.plugin.processors.sleigh.symbol.ContextSymbol\u003e",
        "type_short": "ArrayList",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContextChangePoints",
      "comment": "Add the starting address of the range of addresses over which all of context remains\n constant and has the same value as the value at -addr-",
      "javadoc": "Add the starting address of the range of addresses over which all of context remains\n constant and has the same value as the value at -addr-\n@param addr is an Address contained in the constant range",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is an Address contained in the constant range"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpPointsetContext",
      "comment": "This routine collects all the context register changes across the\n body of the function. Right now we only get the context at the\n beginning of the function because its difficult to tell where the\n context changes.",
      "javadoc": "This routine collects all the context register changes across the\n body of the function. Right now we only get the context at the\n beginning of the function because its difficult to tell where the\n context changes.\n@param debugStream is the stream being written to\n@throws IOException for any i/o error",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": "is the stream being written to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for any i/o error"
        }
      ]
    },
    {
      "name": "dumpCPool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "dumpComments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "dumpConfiguration",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": ""
        },
        {
          "name": "xmlOptions",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "dumpFlowOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "dumpInject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "orderNamespaces",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.ArrayList\u003cghidra.program.model.symbol.Namespace\u003e",
        "type_short": "ArrayList",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dumpDatabases",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "dumpExtensions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "dumpCoretypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugStream",
          "type_long": "java.io.OutputStream",
          "type_short": "OutputStream",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getPcode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStringData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "stringData",
          "type_long": "ghidra.app.decompiler.DecompileCallback.StringData",
          "type_short": "StringData",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "comm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCodeSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "namespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNamespacePath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "namespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMapped",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "namespc",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFNTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "hfunc",
          "type_long": "ghidra.program.model.pcode.HighFunction",
          "type_short": "HighFunction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTrackedRegisters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "doc",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCPoolRef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rec",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "refs",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "nameIsUsed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "spc",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        },
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addFlowOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "fo",
          "type_long": "ghidra.program.model.listing.FlowOverride",
          "type_short": "FlowOverride",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addInject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "injectType",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "payload",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addPossiblePrototypeExtension",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "testFunc",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
