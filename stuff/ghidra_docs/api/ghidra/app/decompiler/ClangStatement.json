{
  "name": "ClangStatement",
  "comment": "A C code statement. What typically appears between the \u0027;\u0027 \u0027{\u0027 and \u0027}\u0027 characters.\n A statement must have a pcode operation associated with it. In the case of conditional\n flow control operations, there are usually two lines associated with the statement one\n containing the \u0027{\u0027 and one containing \u0027}\u0027. The one containing the actual conditional branch\n is considered a C statement, while the other one is just considered a blank line.\n I.e.\n \tif (expression) {\n is a C statement, while the line containing the closing \u0027}\u0027 by itself is considered blank",
  "javadoc": "A C code statement. What typically appears between the \u0027;\u0027 \u0027{\u0027 and \u0027}\u0027 characters.\n A statement must have a pcode operation associated with it. In the case of conditional\n flow control operations, there are usually two lines associated with the statement one\n containing the \u0027{\u0027 and one containing \u0027}\u0027. The one containing the actual conditional branch\n is considered a C statement, while the other one is just considered a blank line.\n I.e.\n \tif (expression) {\n is a C statement, while the line containing the closing \u0027}\u0027 by itself is considered blank",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.decompiler.ClangTokenGroup",
  "fields": [
    {
      "name": "op",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.PcodeOp",
      "type_short": "PcodeOp",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "par",
          "type_long": "ghidra.app.decompiler.ClangNode",
          "type_short": "ClangNode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPcodeOp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.pcode.PcodeOp",
        "type_short": "PcodeOp",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreFromXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "pfactory",
          "type_long": "ghidra.program.model.pcode.PcodeFactory",
          "type_short": "PcodeFactory",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
