{
  "name": "ParallelDecompiler",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "THREAD_POOL_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Parallel Decompiler\""
    }
  ],
  "methods": [
    {
      "name": "decompileFunctions",
      "comment": "Decompile the given functions using multiple decompilers",
      "javadoc": "Decompile the given functions using multiple decompilers\n@param callback the callback to be called for each that is processed\n@param program the program\n@param addresses the addresses restricting which functions to decompile\n@param monitor the task monitor\n@return the list of client results\n@throws InterruptedException if interrupted\n@throws Exception if any other exception occurs",
      "static": true,
      "params": [
        {
          "name": "callback",
          "type_long": "generic.concurrent.QCallback\u003cghidra.program.model.listing.Function,R\u003e",
          "type_short": "QCallback",
          "comment": "the callback to be called for each that is processed"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "addresses",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the addresses restricting which functions to decompile"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cR\u003e",
        "type_short": "List",
        "comment": "the list of client results"
      },
      "throws": [
        {
          "type_long": "java.lang.InterruptedException",
          "type_short": "InterruptedException",
          "comment": "if interrupted"
        },
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if any other exception occurs"
        }
      ]
    },
    {
      "name": "decompileFunctions",
      "comment": "Decompile the given functions using multiple decompilers",
      "javadoc": "Decompile the given functions using multiple decompilers\n@param callback the callback to be called for each that is processed\n@param functions the functions to decompile\n@param monitor the task monitor\n@return the list of client results\n@throws InterruptedException if interrupted\n@throws Exception if any other exception occurs",
      "static": true,
      "params": [
        {
          "name": "callback",
          "type_long": "generic.concurrent.QCallback\u003cghidra.program.model.listing.Function,R\u003e",
          "type_short": "QCallback",
          "comment": "the callback to be called for each that is processed"
        },
        {
          "name": "functions",
          "type_long": "java.util.Collection\u003cghidra.program.model.listing.Function\u003e",
          "type_short": "Collection",
          "comment": "the functions to decompile"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cR\u003e",
        "type_short": "List",
        "comment": "the list of client results"
      },
      "throws": [
        {
          "type_long": "java.lang.InterruptedException",
          "type_short": "InterruptedException",
          "comment": "if interrupted"
        },
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if any other exception occurs"
        }
      ]
    },
    {
      "name": "decompileFunctions",
      "comment": "Decompile the given functions using multiple decompilers.\n \n Results will be passed to the given consumer as they are produced.  Calling this\n method allows you to handle results as they are discovered.  \n \n This method will wait for all processing before returning.",
      "javadoc": "Decompile the given functions using multiple decompilers.\n \n \u003cp\u003eResults will be passed to the given consumer as they are produced.  Calling this\n method allows you to handle results as they are discovered.  \n \n \u003cp\u003e\u003cstrong\u003eThis method will wait for all processing before returning.\u003c/strong\u003e\n@param callback the callback to be called for each that is processed\n@param program the program\n@param functions the functions to decompile\n@param resultsConsumer the consumer to which results will be passed\n@param monitor the task monitor\n@throws InterruptedException if interrupted\n@throws Exception if any other exception occurs",
      "static": true,
      "params": [
        {
          "name": "callback",
          "type_long": "generic.concurrent.QCallback\u003cghidra.program.model.listing.Function,R\u003e",
          "type_short": "QCallback",
          "comment": "the callback to be called for each that is processed"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "functions",
          "type_long": "java.util.Iterator\u003cghidra.program.model.listing.Function\u003e",
          "type_short": "Iterator",
          "comment": "the functions to decompile"
        },
        {
          "name": "resultsConsumer",
          "type_long": "java.util.function.Consumer\u003cR\u003e",
          "type_short": "Consumer",
          "comment": "the consumer to which results will be passed"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.InterruptedException",
          "type_short": "InterruptedException",
          "comment": "if interrupted"
        },
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if any other exception occurs"
        }
      ]
    },
    {
      "name": "doDecompileFunctions",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "callback",
          "type_long": "generic.concurrent.QCallback\u003cghidra.program.model.listing.Function,R\u003e",
          "type_short": "QCallback",
          "comment": ""
        },
        {
          "name": "functions",
          "type_long": "java.util.Iterator\u003cghidra.program.model.listing.Function\u003e",
          "type_short": "Iterator",
          "comment": ""
        },
        {
          "name": "count",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cR\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.InterruptedException",
          "type_short": "InterruptedException",
          "comment": ""
        },
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "createChunkingParallelDecompiler",
      "comment": "Creates an object that can be used to perform decompilation of a limited number of \n functions at a time, as opposed to working over an entire range of functions at once.\n #decompileFunctions(QCallback, Program, AddressSetView, TaskMonitor) will create\n and tear down concurrent data structures on each use, making repeated calls less efficient.\n You would use this method when you wish to perform periodic work as results are returned \n and when using the callback mechanism is not sufficient such as when ordering of\n results is required.",
      "javadoc": "Creates an object that can be used to perform decompilation of a limited number of \n functions at a time, as opposed to working over an entire range of functions at once.\n {@link #decompileFunctions(QCallback, Program, AddressSetView, TaskMonitor)} will create\n and tear down concurrent data structures on each use, making repeated calls less efficient.\n You would use this method when you wish to perform periodic work as results are returned \n \u003cb\u003eand when using the callback mechanism is not sufficient\u003c/b\u003e such as when ordering of\n results is required.\n@param callback the callback required to perform work.\n@param monitor the monitor used to report progress and to cancel\n@return the parallel decompiler used for decompiling.",
      "static": true,
      "params": [
        {
          "name": "callback",
          "type_long": "generic.concurrent.QCallback\u003cghidra.program.model.listing.Function,R\u003e",
          "type_short": "QCallback",
          "comment": "the callback required to perform work."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the monitor used to report progress and to cancel"
        }
      ],
      "return": {
        "type_long": "ghidra.app.decompiler.parallel.ChunkingParallelDecompiler\u003cR\u003e",
        "type_short": "ChunkingParallelDecompiler",
        "comment": "the parallel decompiler used for decompiling."
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
