{
  "name": "ChunkingParallelDecompiler",
  "comment": "A class that simplifies some the concurrent datastructure setup required for decompiling \n functions.  This class is meant to be used when you wish to decompile functions in groups \n (or chunks) rather than decompiling all functions at once.",
  "javadoc": "A class that simplifies some the concurrent datastructure setup required for decompiling \n functions.  This class is meant to be used when you wish to decompile functions in groups \n (or chunks) rather than decompiling all functions at once.\n@param \u003cR\u003e The result type",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "queue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.DecompilerConcurrentQ\u003cghidra.program.model.listing.Function,R\u003e",
      "type_short": "DecompilerConcurrentQ",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "callback",
          "type_long": "generic.concurrent.QCallback\u003cghidra.program.model.listing.Function,R\u003e",
          "type_short": "QCallback",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decompileFunctions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "functions",
          "type_long": "java.util.List\u003cghidra.program.model.listing.Function\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cR\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.InterruptedException",
          "type_short": "InterruptedException",
          "comment": ""
        },
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
