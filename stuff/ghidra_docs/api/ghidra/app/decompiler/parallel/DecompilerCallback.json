{
  "name": "DecompilerCallback",
  "comment": "An implementation of QCallback that performs the management of the \n DecompInterface instances using a Pool.\n \n Clients will get a chance to configure each newly created decompiler via the passed-in\n DecompileConfigurer.\n \n Clients must implement #process(DecompileResults, TaskMonitor), which will be\n called for each function that is decompiled.",
  "javadoc": "An implementation of {@link QCallback} that performs the management of the \n {@link DecompInterface} instances using a Pool.\n \n \u003cP\u003eClients will get a chance to configure each newly created decompiler via the passed-in\n {@link DecompileConfigurer}.\n \n \u003cP\u003eClients must implement {@link #process(DecompileResults, TaskMonitor)}, which will be\n called for each function that is decompiled.\n@param \u003cR\u003e the return type",
  "static": false,
  "implements": [
    "generic.concurrent.QCallback"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "pool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.cache.CachingPool\u003cghidra.app.decompiler.DecompInterface\u003e",
      "type_short": "CachingPool",
      "constant_value": null
    },
    {
      "name": "timeout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "configurer",
          "type_long": "ghidra.app.decompiler.parallel.DecompileConfigurer",
          "type_short": "DecompileConfigurer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "process",
      "comment": "This is called when a function is decompiled.",
      "javadoc": "This is called when a function is decompiled.\n@param results the decompiled results\n@param monitor the task monitor\n@return the client result\n@throws Exception if there is any issue processing the given results",
      "static": false,
      "params": [
        {
          "name": "results",
          "type_long": "ghidra.app.decompiler.DecompileResults",
          "type_short": "DecompileResults",
          "comment": "the decompiled results"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        }
      ],
      "return": {
        "type_long": "R",
        "type_short": "R",
        "comment": "the client result"
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if there is any issue processing the given results"
        }
      ]
    },
    {
      "name": "process",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "f",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "R",
        "type_short": "R",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "setTimeout",
      "comment": "Sets the timeout for each decompile",
      "javadoc": "Sets the timeout for each decompile\n@param timeoutSecs the timeout in seconds",
      "static": false,
      "params": [
        {
          "name": "timeoutSecs",
          "type_long": "int",
          "type_short": "int",
          "comment": "the timeout in seconds"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "Call this when all work is done so that the pooled decompilers can be disposed",
      "javadoc": "Call this when all work is done so that the pooled decompilers can be disposed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
