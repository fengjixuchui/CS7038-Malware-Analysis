{
  "name": "DecompileCallback",
  "comment": "Routines that the decompiler invokes to gather info during decompilation of a\n function.",
  "javadoc": "Routines that the decompiler invokes to gather info during decompilation of a\n function.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "MAX_SYMBOL_COUNT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16"
    },
    {
      "name": "debug",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.decompiler.DecompileDebug",
      "type_short": "DecompileDebug",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "listing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Listing",
      "type_short": "Listing",
      "constant_value": null
    },
    {
      "name": "uniqueFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.UniqueAddressFactory",
      "type_short": "UniqueAddressFactory",
      "constant_value": null
    },
    {
      "name": "cachedFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Function",
      "type_short": "Function",
      "constant_value": null
    },
    {
      "name": "undefinedBody",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "funcEntry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "overlaySpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    },
    {
      "name": "default_extrapop",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "pcodelanguage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Language",
      "type_short": "Language",
      "constant_value": null
    },
    {
      "name": "pcodecompilerspec",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.CompilerSpec",
      "type_short": "CompilerSpec",
      "constant_value": null
    },
    {
      "name": "addrfactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressFactory",
      "type_short": "AddressFactory",
      "constant_value": null
    },
    {
      "name": "cpool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.ConstantPool",
      "type_short": "ConstantPool",
      "constant_value": null
    },
    {
      "name": "dtmanage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
      "type_short": "PcodeDataTypeManager",
      "constant_value": null
    },
    {
      "name": "utf8Charset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.nio.charset.Charset",
      "type_short": "Charset",
      "constant_value": null
    },
    {
      "name": "nativeMessage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "lastPseudoInstructionBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.InstructionBlock",
      "type_short": "InstructionBlock",
      "constant_value": null
    },
    {
      "name": "pseudoDisassembler",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.disassemble.Disassembler",
      "type_short": "Disassembler",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        },
        {
          "name": "compilerSpec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": ""
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.pcode.PcodeDataTypeManager",
          "type_short": "PcodeDataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSAXParser",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "javax.xml.parsers.SAXParser",
        "type_short": "SAXParser",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setFunction",
      "comment": "Establish function and debug context for next decompilation",
      "javadoc": "Establish function and debug context for next decompilation\n@param func is the function to be decompiled\n@param entry is the function\u0027s entry address\n@param dbg is the debugging context (or null)",
      "static": false,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "is the function to be decompiled"
        },
        {
          "name": "entry",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is the function\u0027s entry address"
        },
        {
          "name": "dbg",
          "type_long": "ghidra.app.decompiler.DecompileDebug",
          "type_short": "DecompileDebug",
          "comment": "is the debugging context (or null)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNativeMessage",
      "comment": "",
      "javadoc": "@return the last message from the decompiler",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the last message from the decompiler"
      },
      "throws": []
    },
    {
      "name": "setNativeMessage",
      "comment": "Cache a message returned by the decompiler process",
      "javadoc": "Cache a message returned by the decompiler process\n@param msg is the message",
      "static": false,
      "params": [
        {
          "name": "msg",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the message"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readXMLNameList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "xml",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
        "type_short": "ArrayList",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.pcode.PcodeXMLException",
          "type_short": "PcodeXMLException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrxml",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComments",
      "comment": "Collect any/all comments for the function starting at the indicated\n address",
      "javadoc": "Collect any/all comments for the function starting at the indicated\n address\n@param addrstring is the XML rep of function address\n@param types is the string encoding of the comment type flags\n@return XML document describing comments",
      "static": false,
      "params": [
        {
          "name": "addrstring",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the XML rep of function address"
        },
        {
          "name": "types",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the string encoding of the comment type flags"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "XML document describing comments"
      },
      "throws": []
    },
    {
      "name": "getPcodePacked",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrstring",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.PackedBytes",
        "type_short": "PackedBytes",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildInstruction",
      "comment": "Build an XML representation of all the pcode op\u0027s a given Instruction is\n defined to perform.",
      "javadoc": "Build an XML representation of all the pcode op\u0027s a given Instruction is\n defined to perform.\n@param ops pcode ops\n@param fallthruoffset number of bytes after instruction start that pcode\n            flow falls into\n@param paramshift special instructions for injection use\n@param addrFactory is the address factory for recovering address space names\n@return XML document as string representing all the p-code",
      "static": true,
      "params": [
        {
          "name": "ops",
          "type_long": "ghidra.program.model.pcode.PcodeOp[]",
          "type_short": "ghidra.program.model.pcode.PcodeOp[]",
          "comment": "pcode ops"
        },
        {
          "name": "fallthruoffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes after instruction start that pcode\n            flow falls into"
        },
        {
          "name": "paramshift",
          "type_long": "int",
          "type_short": "int",
          "comment": "special instructions for injection use"
        },
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": "is the address factory for recovering address space names"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "XML document as string representing all the p-code"
      },
      "throws": []
    },
    {
      "name": "getPcodeInject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "context",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCPoolRef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "refs",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getInstruction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.UnknownInstructionException",
          "type_short": "UnknownInstructionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "pseudoDisassemble",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.lang.UnknownInstructionException",
          "type_short": "UnknownInstructionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrstring",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbolName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sym",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNameSpaceByID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Namespace",
        "type_short": "Namespace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNamespacePrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ns",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isNameUsed",
      "comment": "Decide if a given name is used by any namespace between a starting namespace\n and a stopping namespace.  I.e. check for a name collision along a specific namespace path.\n Currently, Ghidra is inefficient at calculating this perfectly, so this routine calculates\n an approximation that can occasionally indicate a collision when there isn\u0027t.",
      "javadoc": "Decide if a given name is used by any namespace between a starting namespace\n and a stopping namespace.  I.e. check for a name collision along a specific namespace path.\n Currently, Ghidra is inefficient at calculating this perfectly, so this routine calculates\n an approximation that can occasionally indicate a collision when there isn\u0027t.\n@param name is the given name to check for collisions\n@param startId is the id specifying the starting namespace\n@param stopId is the id specifying the stopping namespace\n@return true if the name (likely) occurs in one of the namespaces on the path",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the given name to check for collisions"
        },
        {
          "name": "startId",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the id specifying the starting namespace"
        },
        {
          "name": "stopId",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the id specifying the stopping namespace"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the name (likely) occurs in one of the namespaces on the path"
      },
      "throws": []
    },
    {
      "name": "getNamespacePath",
      "comment": "Return an XML description of the formal namespace path to the given namespace",
      "javadoc": "Return an XML description of the formal namespace path to the given namespace\n@param id is the ID of the given namespace\n@return a parent XML tag",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the ID of the given namespace"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a parent XML tag"
      },
      "throws": []
    },
    {
      "name": "generateHeaderCommentXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generateCommentXML",
      "comment": "Generate XML for comments of a certain type",
      "javadoc": "Generate XML for comments of a certain type\n@param addrset \u003d addresses over which to search for comments\n@param buf \u003d StringBuilder where XML should be written\n@param commenttype \u003d type of comment",
      "static": false,
      "params": [
        {
          "name": "addrset",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "\u003d addresses over which to search for comments"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "\u003d StringBuilder where XML should be written"
        },
        {
          "name": "commenttype",
          "type_long": "int",
          "type_short": "int",
          "comment": "\u003d type of comment"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMappedSymbolsXML",
      "comment": "Called by the native decompiler to query the GHIDRA database about any\n symbols at the given address.",
      "javadoc": "Called by the native decompiler to query the GHIDRA database about any\n symbols at the given address.\n@param addrstring XML encoded address to query\n@return XML encoded result. Either function, reference, datatype, or hole",
      "static": false,
      "params": [
        {
          "name": "addrstring",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "XML encoded address to query"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "XML encoded result. Either function, reference, datatype, or hole"
      },
      "throws": []
    },
    {
      "name": "getExternalRefXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrstring",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "idstr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRegisterName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrstring",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTrackedRegisters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrstring",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUserOpName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "indexStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildResult",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "highSymbol",
          "type_long": "ghidra.program.model.pcode.HighSymbol",
          "type_short": "HighSymbol",
          "comment": ""
        },
        {
          "name": "namespc",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.StringBuilder",
        "type_short": "StringBuilder",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildLabel",
      "comment": "Generate description of a non-data symbol, probably a code label",
      "javadoc": "Generate description of a non-data symbol, probably a code label\n@param sym is the symbol\n@return the XML description",
      "static": false,
      "params": [
        {
          "name": "sym",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "is the symbol"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the XML description"
      },
      "throws": []
    },
    {
      "name": "isReadOnlyNoData",
      "comment": "Check address is read only. This only checks whether the block containing\n the address is read-only. It does not, and should not, check if there is\n a data object that has been set to constant",
      "javadoc": "Check address is read only. This only checks whether the block containing\n the address is read-only. It does not, and should not, check if there is\n a data object that has been set to constant\n@param addr - address to check\n@return true if the block is read_only, and there are no write\n         references.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "- address to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the block is read_only, and there are no write\n         references."
      },
      "throws": []
    },
    {
      "name": "buildFunctionXML",
      "comment": "This function deals with the vagaries of the getMappedSymbolsXML\n interface when the queried address is in the body of a function.\n Basically, if the address is the entry point of the function, all the\n function data is sent. Otherwise a hole is sent back of the biggest\n contiguous block in the body of the function containing the queried\n address",
      "javadoc": "This function deals with the vagaries of the getMappedSymbolsXML\n interface when the queried address is in the body of a function.\n Basically, if the address is the entry point of the function, all the\n function data is sent. Otherwise a hole is sent back of the biggest\n contiguous block in the body of the function containing the queried\n address\n@param func Function whose body contains the address\n@param addr The queried address\n@param includeDefaultNames true if default parameter names should be\n            included\n@return XML string describing the function or the hole",
      "static": false,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "Function whose body contains the address"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The queried address"
        },
        {
          "name": "includeDefaultNames",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if default parameter names should be\n            included"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "XML string describing the function or the hole"
      },
      "throws": []
    },
    {
      "name": "getExtraPopOverride",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildHoleXML",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "nm",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "first",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "last",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "readonly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "isVolatile",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildHole",
      "comment": "Calculate the beginning and ending address of the biggest region around\n addr that does not contain any symbol.\n \n This was not working correctly and it is too difficult to find the\n biggest region for which there is no codeunit, and where the volatile and\n readonly properties don\u0027t vary\n \n So now we assume that biggest hole we can find is just 1 byte",
      "javadoc": "Calculate the beginning and ending address of the biggest region around\n addr that does not contain any symbol.\n \n This was not working correctly and it is too difficult to find the\n biggest region for which there is no codeunit, and where the volatile and\n readonly properties don\u0027t vary\n \n So now we assume that biggest hole we can find is just 1 byte\n@param addr \u003d Address around which to find region\n@return String \u003chole\u003e tag",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "\u003d Address around which to find region"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String  tag"
      },
      "throws": []
    },
    {
      "name": "buildExternalRef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.ExternalReference",
          "type_short": "ExternalReference",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildTrackSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "val",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExternalReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalReference",
        "type_short": "ExternalReference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lookupSymbol",
      "comment": "Return the global object being referred to by addr",
      "javadoc": "Return the global object being referred to by addr\n@param addr \u003d Address being queried\n@return the global object",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "\u003d Address being queried"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "the global object"
      },
      "throws": []
    },
    {
      "name": "isVolatileNoData",
      "comment": "Check whether the address is volatile. Do not check the data object.",
      "javadoc": "Check whether the address is volatile. Do not check the data object.\n@param addr is address to check for volatility\n@return true if the address is volatile",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "is address to check for volatility"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the address is volatile"
      },
      "throws": []
    },
    {
      "name": "getFunctionContaining",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionAt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValidChars",
      "comment": "Return true if there are no \"replacement\" characters in the string",
      "javadoc": "Return true if there are no \"replacement\" characters in the string\n@param string is the string to test\n@return true if no replacements",
      "static": false,
      "params": [
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the string to test"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if no replacements"
      },
      "throws": []
    },
    {
      "name": "getStringData",
      "comment": "Check for a string at an address and return a UTF8 encoded byte array.\n If there is already data present at the address, use this to determine the\n string encoding. Otherwise use the data-type info passed in to determine the encoding.\n Check that the bytes at the address represent a valid string encoding that doesn\u0027t\n exceed the maximum character limit passed in.  Return null if the string is invalid.\n Return the string translated into a UTF8 byte array otherwise.  A (valid) empty\n string is returned as a zero length array.",
      "javadoc": "Check for a string at an address and return a UTF8 encoded byte array.\n If there is already data present at the address, use this to determine the\n string encoding. Otherwise use the data-type info passed in to determine the encoding.\n Check that the bytes at the address represent a valid string encoding that doesn\u0027t\n exceed the maximum character limit passed in.  Return null if the string is invalid.\n Return the string translated into a UTF8 byte array otherwise.  A (valid) empty\n string is returned as a zero length array.\n@param addrString is the XML encoded address and maximum byte limit\n@param dtName is the name of a character data-type\n@param dtId is the id associated with the character data-type\n@return the UTF8 encoded byte array or null",
      "static": false,
      "params": [
        {
          "name": "addrString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the XML encoded address and maximum byte limit"
        },
        {
          "name": "dtName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the name of a character data-type"
        },
        {
          "name": "dtId",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "is the id associated with the character data-type"
        }
      ],
      "return": {
        "type_long": "ghidra.app.decompiler.DecompileCallback.StringData",
        "type_short": "StringData",
        "comment": "the UTF8 encoded byte array or null"
      },
      "throws": []
    }
  ]
}
