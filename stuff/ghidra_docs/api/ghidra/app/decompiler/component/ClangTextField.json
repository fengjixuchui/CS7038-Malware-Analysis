{
  "name": "ClangTextField",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "docking.widgets.fieldpanel.field.WrappingVerticalLayoutTextField",
  "fields": [
    {
      "name": "tokenList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.decompiler.ClangToken\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "lineNumberFieldElement",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.fieldpanel.field.FieldElement",
      "type_short": "FieldElement",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createSingleLineElement",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "textElements",
          "type_long": "docking.widgets.fieldpanel.field.FieldElement[]",
          "type_short": "docking.widgets.fieldpanel.field.FieldElement[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "docking.widgets.fieldpanel.field.FieldElement",
        "type_short": "FieldElement",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "calculateXPositionWithLineNumberOffset",
      "comment": "Calculates the offset of the x position for the given line number element.  The line\n numbers of the decompiler appear to the left of the data and thus offset the actual data\n by the width of the line numbers.  The line numbers may be disabled, in which case the\n given FieldElement will have no width.",
      "javadoc": "Calculates the offset of the x position for the given line number element.  The line\n numbers of the decompiler appear to the left of the data and thus offset the actual data\n by the width of the line numbers.  The line numbers may be disabled, in which case the\n given FieldElement will have no width.\n@param initialX The original x value passed to the constructor of this class\n@param lineNumberElement he line number element for this field from which we get a width\n@return the calculated offset",
      "static": true,
      "params": [
        {
          "name": "initialX",
          "type_long": "int",
          "type_short": "int",
          "comment": "The original x value passed to the constructor of this class"
        },
        {
          "name": "lineNumberElement",
          "type_long": "docking.widgets.fieldpanel.field.FieldElement",
          "type_short": "FieldElement",
          "comment": "he line number element for this field from which we get a width"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the calculated offset"
      },
      "throws": []
    },
    {
      "name": "calculateWidthFromXPosition",
      "comment": "Calculates the modified width for this field.  This is a factor of line numbers and any\n x offset given to this field element.",
      "javadoc": "Calculates the modified width for this field.  This is a factor of line numbers and any\n x offset given to this field element.\n@param initialX The original x value passed to the constructor of this class\n@param lineNumberElement The line number element for this field from which we get a width\n@param initialWidth The initial width we are allowed to take up\n@return the modified width for this field.  This is a factor of line numbers and any\n         x offset given to this field element.",
      "static": true,
      "params": [
        {
          "name": "initialX",
          "type_long": "int",
          "type_short": "int",
          "comment": "The original x value passed to the constructor of this class"
        },
        {
          "name": "lineNumberElement",
          "type_long": "docking.widgets.fieldpanel.field.FieldElement",
          "type_short": "FieldElement",
          "comment": "The line number element for this field from which we get a width"
        },
        {
          "name": "initialWidth",
          "type_long": "int",
          "type_short": "int",
          "comment": "The initial width we are allowed to take up"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the modified width for this field.  This is a factor of line numbers and any\n         x offset given to this field element."
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tokenList",
          "type_long": "java.util.List\u003cghidra.app.decompiler.ClangToken\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "fieldElements",
          "type_long": "docking.widgets.fieldpanel.field.FieldElement[]",
          "type_short": "docking.widgets.fieldpanel.field.FieldElement[]",
          "comment": ""
        },
        {
          "name": "lineNumberFieldElement",
          "type_long": "docking.widgets.fieldpanel.field.FieldElement",
          "type_short": "FieldElement",
          "comment": ""
        },
        {
          "name": "x",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "width",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "hlFactory",
          "type_long": "docking.widgets.fieldpanel.support.HighlightFactory",
          "type_short": "HighlightFactory",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getToken",
      "comment": "Gets the C language token at the indicated location.",
      "javadoc": "Gets the C language token at the indicated location.\n@param loc the field location\n@return the token",
      "static": false,
      "params": [
        {
          "name": "loc",
          "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
          "type_short": "FieldLocation",
          "comment": "the field location"
        }
      ],
      "return": {
        "type_long": "ghidra.app.decompiler.ClangToken",
        "type_short": "ClangToken",
        "comment": "the token"
      },
      "throws": []
    },
    {
      "name": "getNextTokenIndexStartingAfter",
      "comment": "Returns the token that is completely after the token that contains the given column\n location.  In this case, \u0027contains\u0027 means any position inside of a token, but\n not at the beginning.  So, if the column location is in the middle of a\n token, it will return the index of next token. But if the column location is at\n the beginning (just before the start) of a token, it will return the index of that token.",
      "javadoc": "Returns the token that is completely after the token that contains the given column\n location.  In this case, \u0027contains\u0027 means any position \u003cb\u003einside\u003c/b\u003e of a token, but\n not at the beginning.  So, if the column location is in the middle of a\n token, it will return the index of next token. But if the column location is at\n the beginning (just before the start) of a token, it will return the index of that token.\n@param location containing the column at which to beginning searching\n@return the next token starting after the given column",
      "static": false,
      "params": [
        {
          "name": "location",
          "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
          "type_short": "FieldLocation",
          "comment": "containing the column at which to beginning searching"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the next token starting after the given column"
      },
      "throws": []
    },
    {
      "name": "getTokenIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "location",
          "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
          "type_short": "FieldLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getClickedObject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "fieldLocation",
          "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
          "type_short": "FieldLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "docking.widgets.fieldpanel.field.FieldElement",
        "type_short": "FieldElement",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTokens",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.decompiler.ClangToken\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "paint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": ""
        },
        {
          "name": "g",
          "type_long": "java.awt.Graphics",
          "type_short": "Graphics",
          "comment": ""
        },
        {
          "name": "context",
          "type_long": "docking.widgets.fieldpanel.internal.PaintContext",
          "type_short": "PaintContext",
          "comment": ""
        },
        {
          "name": "clip",
          "type_long": "java.awt.Rectangle",
          "type_short": "Rectangle",
          "comment": ""
        },
        {
          "name": "selectionMap",
          "type_long": "docking.widgets.fieldpanel.internal.FieldBackgroundColorManager",
          "type_short": "FieldBackgroundColorManager",
          "comment": ""
        },
        {
          "name": "cursorLoc",
          "type_long": "docking.widgets.fieldpanel.support.RowColLocation",
          "type_short": "RowColLocation",
          "comment": ""
        },
        {
          "name": "rowHeight",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "printTextWithoutLineNumbers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": ""
        },
        {
          "name": "g",
          "type_long": "java.awt.Graphics",
          "type_short": "Graphics",
          "comment": ""
        },
        {
          "name": "context",
          "type_long": "docking.widgets.fieldpanel.internal.PaintContext",
          "type_short": "PaintContext",
          "comment": ""
        },
        {
          "name": "clip",
          "type_long": "java.awt.Rectangle",
          "type_short": "Rectangle",
          "comment": ""
        },
        {
          "name": "selectionMap",
          "type_long": "docking.widgets.fieldpanel.internal.FieldBackgroundColorManager",
          "type_short": "FieldBackgroundColorManager",
          "comment": ""
        },
        {
          "name": "cursorLoc",
          "type_long": "docking.widgets.fieldpanel.support.RowColLocation",
          "type_short": "RowColLocation",
          "comment": ""
        },
        {
          "name": "rowHeight",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "stripLineNumbersAndLayoutText",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "reapplyLineNumbersAndLayoutText",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "originalStartX",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLineNumberWidth",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLineNumber",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
