{
  "name": "DecompilerUtils",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVarnodeRef",
      "comment": "If the token refers to an individual Varnode, return it. Otherwise return null",
      "javadoc": "If the token refers to an individual Varnode, return it. Otherwise return null\n@param token the token to check\n@return the Varnode or null otherwise",
      "static": true,
      "params": [
        {
          "name": "token",
          "type_long": "ghidra.app.decompiler.ClangToken",
          "type_short": "ClangToken",
          "comment": "the token to check"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "the Varnode or null otherwise"
      },
      "throws": []
    },
    {
      "name": "getForwardSlice",
      "comment": "Construct the set of varnodes making up a simple forward slice of seed",
      "javadoc": "Construct the set of varnodes making up a simple forward slice of seed\n@param seed Varnode where the slice starts\n@return set of Varnodes in the slice",
      "static": true,
      "params": [
        {
          "name": "seed",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "Varnode where the slice starts"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.pcode.Varnode\u003e",
        "type_short": "Set",
        "comment": "set of Varnodes in the slice"
      },
      "throws": []
    },
    {
      "name": "getBackwardSlice",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "seed",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.pcode.Varnode\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getForwardSliceToPCodeOps",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "seed",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.pcode.PcodeOp\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBackwardSliceToPCodeOps",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "seed",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.pcode.PcodeOp\u003e",
        "type_short": "Set",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunction",
      "comment": "Returns the function represented by the given token.  This will be either the \n decompiled function or a function referenced within the decompiled function.",
      "javadoc": "Returns the function represented by the given token.  This will be either the \n decompiled function or a function referenced within the decompiled function.\n@param program the program\n@param token the token\n@return the function",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "token",
          "type_long": "ghidra.app.decompiler.ClangFuncNameToken",
          "type_short": "ClangFuncNameToken",
          "comment": "the token"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "the function"
      },
      "throws": []
    },
    {
      "name": "findIndexOfFirstField",
      "comment": "Find index of first field containing a ClangNode in tokenList",
      "javadoc": "Find index of first field containing a ClangNode in tokenList\n@param queryTokens the list of tokens of interest\n@param fields the universe of fields to check\n@return index of field, or -1",
      "static": true,
      "params": [
        {
          "name": "queryTokens",
          "type_long": "java.util.List\u003cghidra.app.decompiler.ClangToken\u003e",
          "type_short": "List",
          "comment": "the list of tokens of interest"
        },
        {
          "name": "fields",
          "type_long": "docking.widgets.fieldpanel.field.Field[]",
          "type_short": "docking.widgets.fieldpanel.field.Field[]",
          "comment": "the universe of fields to check"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "index of field, or -1"
      },
      "throws": []
    },
    {
      "name": "getTokensFromView",
      "comment": "Similar to #getTokens(ClangNode, AddressSetView), but uses the tokens from\n the given view fields.  Sometimes the tokens in the model (represented by the \n ClangNode) are different than the fields in the view (such as when a list of \n comment tokens are condensed into a single comment token).",
      "javadoc": "Similar to {@link #getTokens(ClangNode, AddressSetView)}, but uses the tokens from\n the given view fields.  Sometimes the tokens in the model (represented by the \n {@link ClangNode}) are different than the fields in the view (such as when a list of \n comment tokens are condensed into a single comment token).\n@param fields the fields to check\n@param address the address each returned token must match\n@return the matching tokens",
      "static": true,
      "params": [
        {
          "name": "fields",
          "type_long": "docking.widgets.fieldpanel.field.Field[]",
          "type_short": "docking.widgets.fieldpanel.field.Field[]",
          "comment": "the fields to check"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address each returned token must match"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.decompiler.ClangToken\u003e",
        "type_short": "List",
        "comment": "the matching tokens"
      },
      "throws": []
    },
    {
      "name": "getTokens",
      "comment": "Find all ClangNodes that have a minimum address in the AddressSetView",
      "javadoc": "Find all ClangNodes that have a minimum address in the AddressSetView\n@param root the root of the token tree\n@param addressSet the addresses to restrict\n@return the list of tokens",
      "static": true,
      "params": [
        {
          "name": "root",
          "type_long": "ghidra.app.decompiler.ClangNode",
          "type_short": "ClangNode",
          "comment": "the root of the token tree"
        },
        {
          "name": "addressSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the addresses to restrict"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.decompiler.ClangToken\u003e",
        "type_short": "List",
        "comment": "the list of tokens"
      },
      "throws": []
    },
    {
      "name": "getTokens",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "root",
          "type_long": "ghidra.app.decompiler.ClangNode",
          "type_short": "ClangNode",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.decompiler.ClangToken\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "collectTokens",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tokenList",
          "type_long": "java.util.List\u003cghidra.app.decompiler.ClangToken\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "parentNode",
          "type_long": "ghidra.app.decompiler.ClangNode",
          "type_short": "ClangNode",
          "comment": ""
        },
        {
          "name": "addressSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "token",
          "type_long": "ghidra.app.decompiler.ClangToken",
          "type_short": "ClangToken",
          "comment": ""
        },
        {
          "name": "addressSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getClosestAddress",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "token",
          "type_long": "ghidra.app.decompiler.ClangToken",
          "type_short": "ClangToken",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findClosestAddressSet",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "functionSpace",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": ""
        },
        {
          "name": "tokenList",
          "type_long": "java.util.List\u003cghidra.app.decompiler.ClangToken\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addTokenAddressRangeToSet",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "addrs",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": ""
        },
        {
          "name": "token",
          "type_long": "ghidra.app.decompiler.ClangToken",
          "type_short": "ClangToken",
          "comment": ""
        },
        {
          "name": "space",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findClosestAddressedToken",
      "comment": "Find closest addressed token to a specified token or null if one is not found.\n Only adjacent tokens on the same line are examined.",
      "javadoc": "Find closest addressed token to a specified token or null if one is not found.\n Only adjacent tokens on the same line are examined.\n@param token the query token\n@return closest addressed token",
      "static": true,
      "params": [
        {
          "name": "token",
          "type_long": "ghidra.app.decompiler.ClangToken",
          "type_short": "ClangToken",
          "comment": "the query token"
        }
      ],
      "return": {
        "type_long": "ghidra.app.decompiler.ClangToken",
        "type_short": "ClangToken",
        "comment": "closest addressed token"
      },
      "throws": []
    },
    {
      "name": "getFieldSelection",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tokens",
          "type_long": "java.util.List\u003cghidra.app.decompiler.ClangToken\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "docking.widgets.fieldpanel.support.FieldSelection",
        "type_short": "FieldSelection",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTokensInSelection",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "selection",
          "type_long": "docking.widgets.fieldpanel.support.FieldSelection",
          "type_short": "FieldSelection",
          "comment": ""
        },
        {
          "name": "lines",
          "type_long": "docking.widgets.fieldpanel.field.Field[]",
          "type_short": "docking.widgets.fieldpanel.field.Field[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.decompiler.ClangToken\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addTokensInSelectionRange",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tokenList",
          "type_long": "java.util.List\u003cghidra.app.decompiler.ClangToken\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "selectionRange",
          "type_long": "docking.widgets.fieldpanel.support.FieldRange",
          "type_short": "FieldRange",
          "comment": ""
        },
        {
          "name": "lines",
          "type_long": "docking.widgets.fieldpanel.field.Field[]",
          "type_short": "docking.widgets.fieldpanel.field.Field[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addTokens",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "tokenList",
          "type_long": "java.util.List\u003cghidra.app.decompiler.ClangToken\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "lines",
          "type_long": "docking.widgets.fieldpanel.field.Field[]",
          "type_short": "docking.widgets.fieldpanel.field.Field[]",
          "comment": ""
        },
        {
          "name": "lineNumber",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "start",
          "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
          "type_short": "FieldLocation",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
          "type_short": "FieldLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStartIndex",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "textLine",
          "type_long": "ghidra.app.decompiler.component.ClangTextField",
          "type_short": "ClangTextField",
          "comment": ""
        },
        {
          "name": "location",
          "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
          "type_short": "FieldLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEndIndex",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "textLine",
          "type_long": "ghidra.app.decompiler.component.ClangTextField",
          "type_short": "ClangTextField",
          "comment": ""
        },
        {
          "name": "location",
          "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
          "type_short": "FieldLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findAddressBefore",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "lines",
          "type_long": "docking.widgets.fieldpanel.field.Field[]",
          "type_short": "docking.widgets.fieldpanel.field.Field[]",
          "comment": ""
        },
        {
          "name": "token",
          "type_long": "ghidra.app.decompiler.ClangToken",
          "type_short": "ClangToken",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGoToTargetToken",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "root",
          "type_long": "ghidra.app.decompiler.ClangTokenGroup",
          "type_short": "ClangTokenGroup",
          "comment": ""
        },
        {
          "name": "label",
          "type_long": "ghidra.app.decompiler.ClangLabelToken",
          "type_short": "ClangLabelToken",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.decompiler.ClangLabelToken",
        "type_short": "ClangLabelToken",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMatchingBrace",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "startToken",
          "type_long": "ghidra.app.decompiler.ClangSyntaxToken",
          "type_short": "ClangSyntaxToken",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.decompiler.ClangSyntaxToken",
        "type_short": "ClangSyntaxToken",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isMatchingBrace",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "braceToken",
          "type_long": "ghidra.app.decompiler.ClangSyntaxToken",
          "type_short": "ClangSyntaxToken",
          "comment": ""
        },
        {
          "name": "otherBraceToken",
          "type_long": "ghidra.app.decompiler.ClangSyntaxToken",
          "type_short": "ClangSyntaxToken",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isBrace",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "token",
          "type_long": "ghidra.app.decompiler.ClangSyntaxToken",
          "type_short": "ClangSyntaxToken",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isGoToStatement",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "token",
          "type_long": "ghidra.app.decompiler.ClangToken",
          "type_short": "ClangToken",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isGoToStatement",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "statement",
          "type_long": "ghidra.app.decompiler.ClangStatement",
          "type_short": "ClangStatement",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "consumeCommentTokens",
      "comment": "Within a token stream, after seeing an initial comment token, collect the contiguous\n sequence of tokens that are part of the comment and group them into a single\n ClangCommentToken.  This makes post processing on the full comment string easier.\n A single comment string can contain white space that manifests as ClangSyntaxTokens\n with white space as text.",
      "javadoc": "Within a token stream, after seeing an initial comment token, collect the contiguous\n sequence of tokens that are part of the comment and group them into a single\n ClangCommentToken.  This makes post processing on the full comment string easier.\n A single comment string can contain white space that manifests as ClangSyntaxTokens\n with white space as text.\n@param alltoks is the token stream\n@param i is the position of the initial comment token\n@param first is the initial comment token\n@param current is the ClangLine object currently being scanned\n@param builder is used to collect the full comment string\n@return the position of the first token after the comment string",
      "static": true,
      "params": [
        {
          "name": "alltoks",
          "type_long": "java.util.List\u003cghidra.app.decompiler.ClangNode\u003e",
          "type_short": "List",
          "comment": "is the token stream"
        },
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the position of the initial comment token"
        },
        {
          "name": "first",
          "type_long": "ghidra.app.decompiler.ClangCommentToken",
          "type_short": "ClangCommentToken",
          "comment": "is the initial comment token"
        },
        {
          "name": "current",
          "type_long": "ghidra.app.decompiler.ClangLine",
          "type_short": "ClangLine",
          "comment": "is the ClangLine object currently being scanned"
        },
        {
          "name": "builder",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": "is used to collect the full comment string"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the position of the first token after the comment string"
      },
      "throws": []
    },
    {
      "name": "toLines",
      "comment": "A token hierarchy is flattened and then split into individual lines at the\n ClangBreak tokens.  An array of the lines, each as a ClangLine object that owns\n its respective tokens, is returned.  Sequences of comment tokens are collapsed into\n a single ClangCommentToken.",
      "javadoc": "A token hierarchy is flattened and then split into individual lines at the\n ClangBreak tokens.  An array of the lines, each as a ClangLine object that owns\n its respective tokens, is returned.  Sequences of comment tokens are collapsed into\n a single ClangCommentToken.\n@param group is the token hierarchy\n@return the array of ClangLine objects",
      "static": true,
      "params": [
        {
          "name": "group",
          "type_long": "ghidra.app.decompiler.ClangTokenGroup",
          "type_short": "ClangTokenGroup",
          "comment": "is the token hierarchy"
        }
      ],
      "return": {
        "type_long": "java.util.ArrayList\u003cghidra.app.decompiler.ClangLine\u003e",
        "type_short": "ArrayList",
        "comment": "the array of ClangLine objects"
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "Returns the data type for the given context if the context pertains to a data type",
      "javadoc": "Returns the data type for the given context if the context pertains to a data type\n@param context the context\n@return the data type or null",
      "static": true,
      "params": [
        {
          "name": "context",
          "type_long": "ghidra.app.plugin.core.decompile.DecompilerActionContext",
          "type_short": "DecompilerActionContext",
          "comment": "the context"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the data type or null"
      },
      "throws": []
    }
  ]
}
