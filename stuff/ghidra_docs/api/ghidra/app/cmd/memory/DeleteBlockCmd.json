{
  "name": "DeleteBlockCmd",
  "comment": "Command that runs in the background to delete a memory block, as \n the delete may be a time consuming operation.",
  "javadoc": "Command that runs in the background to delete a memory block, as \n the delete may be a time consuming operation.",
  "static": false,
  "implements": [],
  "extends": "ghidra.framework.cmd.BackgroundCommand",
  "fields": [
    {
      "name": "blockAddresses",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address[]",
      "type_short": "ghidra.program.model.address.Address[]",
      "constant_value": null
    },
    {
      "name": "listener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.cmd.memory.DeleteBlockListener",
      "type_short": "DeleteBlockListener",
      "constant_value": null
    },
    {
      "name": "status",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a background command for deleting memory blocks. Each address in\n the array of block addresses indicates that the block containing that\n address should be removed.\n After the command has completed, getStatus() can be called to check the success.\n If unsuccessful, getStatusMsg() can be called to get a message \n indicating why the command failed.",
      "javadoc": "Creates a background command for deleting memory blocks. Each address in\n the array of block addresses indicates that the block containing that\n address should be removed.\n After the command has completed, getStatus() can be called to check the success.\n If unsuccessful, getStatusMsg() can be called to get a message \n indicating why the command failed.\n@param blockAddresses addresses indicating each block to be removed.\n@param listener listener that will be notified when the delete block has completed.",
      "static": false,
      "params": [
        {
          "name": "blockAddresses",
          "type_long": "ghidra.program.model.address.Address[]",
          "type_short": "ghidra.program.model.address.Address[]",
          "comment": "addresses indicating each block to be removed."
        },
        {
          "name": "listener",
          "type_long": "ghidra.app.cmd.memory.DeleteBlockListener",
          "type_short": "DeleteBlockListener",
          "comment": "listener that will be notified when the delete block has completed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStatus",
      "comment": "Return whether the delete block was successful.",
      "javadoc": "Return whether the delete block was successful.\n@return true if the block was deleted",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the block was deleted"
      },
      "throws": []
    },
    {
      "name": "taskCompleted",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.BackgroundCommand#taskCompleted()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
