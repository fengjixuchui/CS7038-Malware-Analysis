{
  "name": "AddByteMappedMemoryBlockCmd",
  "comment": "Command for adding byte-mapped memory blocks",
  "javadoc": "Command for adding byte-mapped memory blocks",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.cmd.memory.AbstractAddMemoryBlockCmd",
  "fields": [
    {
      "name": "mappedAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "byteMappingScheme",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.mem.ByteMappingScheme",
      "type_short": "ByteMappingScheme",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new AddByteMappedMemoryBlockCmd with a specified byte mapping scheme.\n Byte mapping scheme is specified by two values schemeDestByteCount and schemeSrcByteCount which\n may be viewed as a ratio of number of destination bytes to number of mapped source bytes. \n When the destination consumes bytes from the mapped source it consume schemeDestByteCount bytes then \n skips (schemeSrcByteCount - schemeDestByteCount) bytes before repeating the mapping sequence over \n the extent of the destination block.  The block start address and source mappedAddress must\n be chosen carefully as they relate to the mapping scheme when it is anything other than 1:1.",
      "javadoc": "Create a new AddByteMappedMemoryBlockCmd with a specified byte mapping scheme.\n Byte mapping scheme is specified by two values schemeDestByteCount and schemeSrcByteCount which\n may be viewed as a ratio of number of destination bytes to number of mapped source bytes. \n When the destination consumes bytes from the mapped source it consume schemeDestByteCount bytes then \n skips (schemeSrcByteCount - schemeDestByteCount) bytes before repeating the mapping sequence over \n the extent of the destination block.  The block start address and source mappedAddress must\n be chosen carefully as they relate to the mapping scheme when it is anything other than 1:1.\n@param name the name for the new memory block.\n@param comment the comment for the block\n@param source indicates what is creating the block\n@param start the start address for the the block\n@param length the length of the new block\n@param read sets the block\u0027s read permission flag\n@param write sets the block\u0027s write permission flag\n@param execute sets the block\u0027s execute permission flag\n@param isVolatile sets the block\u0027s volatile flag\n@param mappedAddress the address in memory that will serve as the bytes source for the block\n@param byteMappingScheme byte mapping scheme (may be null for 1:1 mapping)\n@param isOverlay if true, the block will be created in a new overlay address space.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name for the new memory block."
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the comment for the block"
        },
        {
          "name": "source",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "indicates what is creating the block"
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address for the the block"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the length of the new block"
        },
        {
          "name": "read",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "sets the block\u0027s read permission flag"
        },
        {
          "name": "write",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "sets the block\u0027s write permission flag"
        },
        {
          "name": "execute",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "sets the block\u0027s execute permission flag"
        },
        {
          "name": "isVolatile",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "sets the block\u0027s volatile flag"
        },
        {
          "name": "mappedAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address in memory that will serve as the bytes source for the block"
        },
        {
          "name": "byteMappingScheme",
          "type_long": "ghidra.program.database.mem.ByteMappingScheme",
          "type_short": "ByteMappingScheme",
          "comment": "byte mapping scheme (may be null for 1:1 mapping)"
        },
        {
          "name": "isOverlay",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the block will be created in a new overlay address space."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new AddByteMappedMemoryBlockCmd with 1:1 byte mapping scheme",
      "javadoc": "Create a new AddByteMappedMemoryBlockCmd with 1:1 byte mapping scheme\n@param name the name for the new memory block.\n@param comment the comment for the block\n@param source indicates what is creating the block\n@param start the start address for the the block\n@param length the length of the new block\n@param read sets the block\u0027s read permission flag\n@param write sets the block\u0027s write permission flag\n@param execute sets the block\u0027s execute permission flag\n@param isVolatile sets the block\u0027s volatile flag\n@param mappedAddress the address in memory that will serve as the bytes source for the block\n@param isOverlay if true, the block will be created in a new overlay address space.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name for the new memory block."
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the comment for the block"
        },
        {
          "name": "source",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "indicates what is creating the block"
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address for the the block"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the length of the new block"
        },
        {
          "name": "read",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "sets the block\u0027s read permission flag"
        },
        {
          "name": "write",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "sets the block\u0027s write permission flag"
        },
        {
          "name": "execute",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "sets the block\u0027s execute permission flag"
        },
        {
          "name": "isVolatile",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "sets the block\u0027s volatile flag"
        },
        {
          "name": "mappedAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address in memory that will serve as the bytes source for the block"
        },
        {
          "name": "isOverlay",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the block will be created in a new overlay address space."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createMemoryBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "memory",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.mem.MemoryBlock",
        "type_short": "MemoryBlock",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.framework.store.LockException",
          "type_short": "LockException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryConflictException",
          "type_short": "MemoryConflictException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": ""
        },
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": ""
        }
      ]
    }
  ]
}
