{
  "name": "AddBitMappedMemoryBlockCmd",
  "comment": "Command for adding Bit-mapped memory blocks.\n The resulting mapped block will derive its\u0027 byte values (1 or 0) from the mapped source bits.\n Example: 8 bytes in the resulting block will be derived from 1-byte\n in the underlying source region.",
  "javadoc": "Command for adding Bit-mapped memory blocks.\n The resulting mapped block will derive its\u0027 byte values (1 or 0) from the mapped source bits.\n Example: 8 bytes in the resulting block will be derived from 1-byte\n in the underlying source region.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.cmd.memory.AbstractAddMemoryBlockCmd",
  "fields": [
    {
      "name": "mappedAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new AddBitMappedMemoryBlockCmd",
      "javadoc": "Create a new AddBitMappedMemoryBlockCmd\n@param name the name for the new memory block.\n@param comment the comment for the block\n@param source indicates what is creating the block\n@param start the start address for the the block\n@param length the length of the new block in number of bits to be mapped\n@param read sets the block\u0027s read permission flag\n@param write sets the block\u0027s write permission flag\n@param execute sets the block\u0027s execute permission flag\n@param isVolatile sets the block\u0027s volatile flag\n@param mappedAddress the address in memory that will serve as the bytes source for the block\n@param isOverlay if true, the block will be created in a new overlay address space.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name for the new memory block."
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the comment for the block"
        },
        {
          "name": "source",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "indicates what is creating the block"
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address for the the block"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the length of the new block in number of bits to be mapped"
        },
        {
          "name": "read",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "sets the block\u0027s read permission flag"
        },
        {
          "name": "write",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "sets the block\u0027s write permission flag"
        },
        {
          "name": "execute",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "sets the block\u0027s execute permission flag"
        },
        {
          "name": "isVolatile",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "sets the block\u0027s volatile flag"
        },
        {
          "name": "mappedAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address in memory that will serve as the bytes source for the block"
        },
        {
          "name": "isOverlay",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the block will be created in a new overlay address space."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createMemoryBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "memory",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.mem.MemoryBlock",
        "type_short": "MemoryBlock",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.framework.store.LockException",
          "type_short": "LockException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryConflictException",
          "type_short": "MemoryConflictException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": ""
        },
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": ""
        }
      ]
    }
  ]
}
