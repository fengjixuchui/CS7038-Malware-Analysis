{
  "name": "CreateDataInStructureBackgroundCmd",
  "comment": "Background command to create data across a selection inside of a structure.",
  "javadoc": "Background command to create data across a selection inside of a structure.",
  "static": false,
  "implements": [],
  "extends": "ghidra.framework.cmd.BackgroundCommand",
  "fields": [
    {
      "name": "addr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "startPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "newDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "stackPointers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a command for applying dataTypes within an existing structure\n across a range of components.\n Simple pointer conversion will NOT be performed.",
      "javadoc": "Constructs a command for applying dataTypes within an existing structure\n across a range of components.\n Simple pointer conversion will NOT be performed.\n@param addr The address of the existing structure.\n@param startPath the componentPath where to begin applying the datatype.\n@param length the number of bytes to apply the data type to.\n@param dt the datatype to be applied to the range of components.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The address of the existing structure."
        },
        {
          "name": "startPath",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "the componentPath where to begin applying the datatype."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to apply the data type to."
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to be applied to the range of components."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "This is the same as #CreateDataInStructureBackgroundCmd(Address, int[], int, DataType ) except that\n it allows the caller to control whether or not a pointer data type is created when a \n non-pointer data type is applied at a location that previously contained a pointer data\n type.",
      "javadoc": "This is the same as {@link #CreateDataInStructureBackgroundCmd(Address, int[], int, DataType )} except that\n it allows the caller to control whether or not a pointer data type is created when a \n non-pointer data type is applied at a location that previously contained a pointer data\n type.\n@param addr The address of the existing structure.\n@param startPath the componentPath where to begin applying the datatype.\n@param length the number of bytes to apply the data type to.\n@param dt the datatype to be applied to the range of components.\n@param stackPointers True will convert the given data type to a pointer if it is not one\n and the previous type was a pointer; false will not make this conversion",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The address of the existing structure."
        },
        {
          "name": "startPath",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "the componentPath where to begin applying the datatype."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to apply the data type to."
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to be applied to the range of components."
        },
        {
          "name": "stackPointers",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True will convert the given data type to a pointer if it is not one\n and the previous type was a pointer; false will not make this conversion"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.BackgroundCommand#applyTo(ghidra.framework.model.DomainObject, ghidra.util.task.TaskMonitor)",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
