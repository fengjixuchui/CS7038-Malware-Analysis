{
  "name": "CreateDataInStructureCmd",
  "comment": "Command to Create data inside of a structure.",
  "javadoc": "Command to Create data inside of a structure.",
  "static": false,
  "implements": [
    "ghidra.framework.cmd.Command"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "addr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "componentPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "newDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "msg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "stackPointers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new command for creating data inside a structure.\n Simple pointer conversion will NOT be performed.",
      "javadoc": "Constructs a new command for creating data inside a structure.\n Simple pointer conversion will NOT be performed.\n@param addr the address of the structure in which to apply the given datatype.\n@param componentPath the component path of the component where the datatype\n will be applied.\n@param dt the datatype to apply in the structure.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the structure in which to apply the given datatype."
        },
        {
          "name": "componentPath",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "the component path of the component where the datatype\n will be applied."
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to apply in the structure."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "This is the same as #CreateDataInStructureCmd(Address, int[], DataType) except that\n it allows the caller to control whether or not a pointer data type is created when a \n non-pointer data type is applied at a location that previously contained a pointer data\n type.",
      "javadoc": "This is the same as {@link #CreateDataInStructureCmd(Address, int[], DataType)} except that\n it allows the caller to control whether or not a pointer data type is created when a \n non-pointer data type is applied at a location that previously contained a pointer data\n type.\n@param addr the address of the structure in which to apply the given datatype.\n@param componentPath the component path of the component where the datatype\n will be applied.\n@param dt the datatype to apply in the structure.\n@param stackPointers if true simple pointer conversion is enabled \n (see {@link DataUtilities#reconcileAppliedDataType(DataType, DataType, boolean)}).",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the structure in which to apply the given datatype."
        },
        {
          "name": "componentPath",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "the component path of the component where the datatype\n will be applied."
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to apply in the structure."
        },
        {
          "name": "stackPointers",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true simple pointer conversion is enabled \n (see DataUtilities#reconcileAppliedDataType(DataType, DataType, boolean))."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.Command#applyTo(ghidra.framework.model.DomainObject)",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStatusMsg",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.Command#getStatusMsg()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.Command#getName()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
