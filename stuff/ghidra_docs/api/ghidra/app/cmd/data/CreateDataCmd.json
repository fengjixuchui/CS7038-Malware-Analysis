{
  "name": "CreateDataCmd",
  "comment": "This command will create a data of type dataType at the given address.  This\n command will only work for fixed length dataTypes.  If there are any existing\n instructions in the area to be made into data, the command will fail.  Existing data\n in the area may be replaced with the new dataType (with optional pointer conversion).  \n If the existing dataType is a pointer, then\n the existing data will be changed into a pointer to the given dataType.  If the given dataType\n is a default-pointer, it will become a pointer to the existing type.",
  "javadoc": "This command will create a data of type dataType at the given address.  This\n command will only work for fixed length dataTypes.  If there are any existing\n instructions in the area to be made into data, the command will fail.  Existing data\n in the area may be replaced with the new dataType (with optional pointer conversion).  \n If the existing dataType is a pointer, then\n the existing data will be changed into a pointer to the given dataType.  If the given dataType\n is a default-pointer, it will become a pointer to the existing type.\n@see DataUtilities#createData(Program, Address, DataType, int, boolean, DataUtilities.ClearDataMode)",
  "static": false,
  "implements": [
    "ghidra.framework.cmd.Command"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "addr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "newDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "cmdName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "msg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "clearMode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataUtilities.ClearDataMode",
      "type_short": "ClearDataMode",
      "constant_value": null
    },
    {
      "name": "stackPointers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a command for creating data at an address.\n Simple pointer conversion will NOT be performed.\n Existing Undefined data will always be cleared even when force is false.",
      "javadoc": "Constructs a command for creating data at an address.\n Simple pointer conversion will NOT be performed.\n Existing Undefined data will always be cleared even when force is false.\n@param addr the address at which to apply the datatype.  Offcut data\n address allowed, provided force\u003d\u003dtrue.\n@param force if true any existing conflicting data will be cleared\n@param dataType the datatype to be applied at the given address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to apply the datatype.  Offcut data\n address allowed, provided force\u003d\u003dtrue."
        },
        {
          "name": "force",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true any existing conflicting data will be cleared"
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to be applied at the given address."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "This is the same as #CreateDataCmd(Address, boolean, DataType) except that\n it allows the caller to control whether or not pointer conversion should be handled.",
      "javadoc": "This is the same as {@link #CreateDataCmd(Address, boolean, DataType)} except that\n it allows the caller to control whether or not pointer conversion should be handled.\n@param addr the address at which to apply the datatype.  Offcut data\n address allowed, provided force\u003d\u003dtrue.\n@param force if true any existing conflicting data will be cleared\n@param stackPointers if true simple pointer conversion is enabled \n (see {@link DataUtilities#reconcileAppliedDataType(DataType, DataType, boolean)}).\n@param dataType the datatype to be applied at the given address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to apply the datatype.  Offcut data\n address allowed, provided force\u003d\u003dtrue."
        },
        {
          "name": "force",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true any existing conflicting data will be cleared"
        },
        {
          "name": "stackPointers",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true simple pointer conversion is enabled \n (see DataUtilities#reconcileAppliedDataType(DataType, DataType, boolean))."
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to be applied at the given address."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a command for creating data at an address.\n Simple pointer conversion will NOT be performed and existing \n defined data will not be cleared, however existing Undefined data will\n be cleared.",
      "javadoc": "Constructs a command for creating data at an address.\n Simple pointer conversion will NOT be performed and existing \n defined data will not be cleared, however existing Undefined data will\n be cleared.\n@param addr the address at which to apply the datatype.\n@param dataType the datatype to be applied at the given address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to apply the datatype."
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to be applied at the given address."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "This is the same as #CreateDataCmd(Address, DataType) except that\n it allows the caller to control whether or not pointer conversion should be handled.\n Existing Undefined data will always be cleared.",
      "javadoc": "This is the same as {@link #CreateDataCmd(Address, DataType)} except that\n it allows the caller to control whether or not pointer conversion should be handled.\n Existing Undefined data will always be cleared.\n@param addr the address at which to apply the datatype.\n@param dataType the datatype to be applied at the given address.\n@param isCycle true indicates this is from a cycle group action.\n@param stackPointers if true simple pointer conversion is enabled \n (see {@link DataUtilities#reconcileAppliedDataType(DataType, DataType, boolean)}).",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to apply the datatype."
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to be applied at the given address."
        },
        {
          "name": "isCycle",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates this is from a cycle group action."
        },
        {
          "name": "stackPointers",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true simple pointer conversion is enabled \n (see DataUtilities#reconcileAppliedDataType(DataType, DataType, boolean))."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "This constructor provides the most flexibility when creating data, allowing optional pointer conversion and\n various clearing options for conflicting data.",
      "javadoc": "This constructor provides the most flexibility when creating data, allowing optional pointer conversion and\n various clearing options for conflicting data.\n@param addr the address at which to apply the datatype.\n@param dataType the datatype to be applied at the given address.\n@param stackPointers if true simple pointer conversion is enabled \n (see {@link DataUtilities#reconcileAppliedDataType(DataType, DataType, boolean)}).\n@param clearMode indicates how conflicting data should be cleared",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address at which to apply the datatype."
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to be applied at the given address."
        },
        {
          "name": "stackPointers",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true simple pointer conversion is enabled \n (see DataUtilities#reconcileAppliedDataType(DataType, DataType, boolean))."
        },
        {
          "name": "clearMode",
          "type_long": "ghidra.program.model.data.DataUtilities.ClearDataMode",
          "type_short": "ClearDataMode",
          "comment": "indicates how conflicting data should be cleared"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStatusMsg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
