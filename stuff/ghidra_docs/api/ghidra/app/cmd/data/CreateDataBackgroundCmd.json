{
  "name": "CreateDataBackgroundCmd",
  "comment": "This command will create a data of type dataType throughout an addressSet. \n If there are any existing\n instructions in the area to be made into data, the command will fail.  Any data\n in the area will be replaced with the new dataType, except when the existing data\n or the given dataType is a pointer.  If the existing dataType is a pointer, then\n it will be changed into a pointer to the given dataType.  If the given dataType\n is a pointer and the existing data is \u003d to the size of a pointer, it will become\n a pointer to the existing type.  If the existing dataType is less than the size\n of a pointer, then a pointer to dataType will only be created if there are\n enough undefined bytes following to make a pointer.",
  "javadoc": "This command will create a data of type dataType throughout an addressSet. \n If there are any existing\n instructions in the area to be made into data, the command will fail.  Any data\n in the area will be replaced with the new dataType, except when the existing data\n or the given dataType is a pointer.  If the existing dataType is a pointer, then\n it will be changed into a pointer to the given dataType.  If the given dataType\n is a pointer and the existing data is \u0026gt;\u003d to the size of a pointer, it will become\n a pointer to the existing type.  If the existing dataType is less than the size\n of a pointer, then a pointer to dataType will only be created if there are\n enough undefined bytes following to make a pointer.",
  "static": false,
  "implements": [],
  "extends": "ghidra.framework.cmd.BackgroundCommand",
  "fields": [
    {
      "name": "EVENT_LIMIT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1000"
    },
    {
      "name": "addrSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSetView",
      "type_short": "AddressSetView",
      "constant_value": null
    },
    {
      "name": "newDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "bytesApplied",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "numDataCreated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "stackPointers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a command for applying a dataType to a set of addresses.\n Simple pointer conversion will NOT be performed.",
      "javadoc": "Constructs a command for applying a dataType to a set of addresses.\n Simple pointer conversion will NOT be performed.\n@param addrSet The address set to fill with the given dataType.\n@param dataType the dataType to be applied to the address set.",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "The address set to fill with the given dataType."
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the dataType to be applied to the address set."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "This is the same as #CreateDataBackgroundCmd(AddressSetView, DataType) except that\n it allows the caller to control whether or not a pointer data type is created when a \n non-pointer data type is applied at a location that previously contained a pointer data\n type.",
      "javadoc": "This is the same as {@link #CreateDataBackgroundCmd(AddressSetView, DataType)} except that\n it allows the caller to control whether or not a pointer data type is created when a \n non-pointer data type is applied at a location that previously contained a pointer data\n type.\n@param addrSet The address set to fill with the given dataType.\n@param dataType the dataType to be applied to the address set.\n@param stackPointers if true simple pointer conversion is enabled \n (see {@link DataUtilities#reconcileAppliedDataType(DataType, DataType, boolean)}).",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "The address set to fill with the given dataType."
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the dataType to be applied to the address set."
        },
        {
          "name": "stackPointers",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true simple pointer conversion is enabled \n (see DataUtilities#reconcileAppliedDataType(DataType, DataType, boolean))."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doApplyTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.data.DataTypeConflictException",
          "type_short": "DataTypeConflictException",
          "comment": ""
        }
      ]
    }
  ]
}
