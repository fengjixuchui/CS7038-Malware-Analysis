{
  "name": "CreateNamespacesCmd",
  "comment": "This class attempts to create a namespace for each token in the provided\n string.  Thus, when providing a namespace string, do not include the name\n of anything other than namespaces, such as the name of a symbol.\n \n \n Example strings:\n \n     globalNamespace#DELIMITERchild1Namespace#DELIMITERchild2\n     child1\n \n \n \n To view the assumptions for creating namespaces from a path string, see\n the NamespaceUtils class.",
  "javadoc": "This class attempts to create a namespace for each token in the provided\n string.  Thus, when providing a namespace string, do not include the name\n of anything other than namespaces, such as the name of a symbol.\n \u003cp\u003e\n \u003ca id\u003d\"examples\"\u003e\u003c/a\u003e\n Example strings:\n \u003cul\u003e\n     \u003cli\u003eglobal{@link Namespace#DELIMITER ::}child1{@link Namespace#DELIMITER ::}child2\n     \u003cli\u003echild1\n \u003c/ul\u003e\n \u003cp\u003e\n \u003ca id\u003d\"assumptions\"\u003e\u003c/a\u003e\n To view the assumptions for creating namespaces from a path string, see\n the {@link NamespaceUtils} class.\n@since Tracker Id 619\n@see NamespaceUtils",
  "static": false,
  "implements": [
    "ghidra.framework.cmd.Command"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "statusMsg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "rootNamespace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.symbol.Namespace",
      "type_short": "Namespace",
      "constant_value": null
    },
    {
      "name": "namespacesString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "source",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.symbol.SourceType",
      "type_short": "SourceType",
      "constant_value": null
    },
    {
      "name": "leafNamespace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.symbol.Namespace",
      "type_short": "Namespace",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Takes a namespace string that will be parsed and the results of which\n will be used for creating the namespaces if they do not exist.\n \n Calling this constructor is equivalent to calling:\n \n Command command \u003d new CreateNamespacesCmd( namespaceString, null );\n ",
      "javadoc": "Takes a namespace string that will be parsed and the results of which\n will be used for creating the namespaces if they do not exist.\n \u003cp\u003e\n Calling this constructor is equivalent to calling:\n \u003cpre\u003e\n Command command \u003d new CreateNamespacesCmd( namespaceString, null );\n \u003c/pre\u003e\n@param namespacesString The string to be parsed.\n@param source the source of the namespace\n@see \u003ca href\u003d\"#examples\"\u003eexample format\u003c/a\u003e\n@see \u003ca href\u003d\"#assumptions\"\u003eassumptions\u003c/a\u003e",
      "static": false,
      "params": [
        {
          "name": "namespacesString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The string to be parsed."
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of the namespace"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Takes a namespace string that will be parsed and the results of which\n will be used for creating the namespaces if they do not exist.",
      "javadoc": "Takes a namespace string that will be parsed and the results of which\n will be used for creating the namespaces if they do not exist.\n@param namespacesString The string to be parsed.\n@param parentNamespace The namespace to be used as the starting parent\n        of the namespaces that will be created.\n@param source the source of the namespace\n@throws NullPointerException if \u003ccode\u003enamespaceString\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n@see \u003ca href\u003d\"#examples\"\u003eexample format\u003c/a\u003e\n@see \u003ca href\u003d\"#assumptions\"\u003eassumptions\u003c/a\u003e",
      "static": false,
      "params": [
        {
          "name": "namespacesString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The string to be parsed."
        },
        {
          "name": "parentNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "The namespace to be used as the starting parent\n        of the namespaces that will be created."
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of the namespace"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.Command#applyTo(ghidra.framework.model.DomainObject)",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNamespace",
      "comment": "Returns the newly created namespace or null if one was not created.",
      "javadoc": "Returns the newly created namespace or null if one was not created.\n@return the newly created namespace or null if one was not created.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Namespace",
        "type_short": "Namespace",
        "comment": "the newly created namespace or null if one was not created."
      },
      "throws": []
    },
    {
      "name": "getStatusMsg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
