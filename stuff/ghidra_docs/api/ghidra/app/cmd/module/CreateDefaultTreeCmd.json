{
  "name": "CreateDefaultTreeCmd",
  "comment": "Command to create a root in the program; the root module has\n fragments named the same as the memory blocks.",
  "javadoc": "Command to create a root in the program; the root module has\n fragments named the same as the memory blocks.",
  "static": false,
  "implements": [
    "ghidra.framework.cmd.Command"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "treeName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "statusMsg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for CreateDefaultTreeCmd.",
      "javadoc": "Constructor for CreateDefaultTreeCmd.\n@param treeName name of the tree to create",
      "static": false,
      "params": [
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the tree to create"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.Command#applyTo(ghidra.framework.model.DomainObject)",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createRootModule",
      "comment": "Create a tree in the program with the given tree name.",
      "javadoc": "Create a tree in the program with the given tree name.\n@param program program\n@param treeName tree name\n@return Module root module for the new tree\n@throws DuplicateNameException if treeName already exists",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program"
        },
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "tree name"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramModule",
        "type_short": "ProgramModule",
        "comment": "Module root module for the new tree"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "if treeName already exists"
        }
      ]
    },
    {
      "name": "renameFragments",
      "comment": "Method renameFragments.",
      "javadoc": "Method renameFragments.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "treeName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStatusMsg",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.Command#getStatusMsg()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.Command#getName()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
