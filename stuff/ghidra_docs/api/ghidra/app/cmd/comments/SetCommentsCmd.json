{
  "name": "SetCommentsCmd",
  "comment": "Command for editing and removing comments at an address.",
  "javadoc": "Command for editing and removing comments at an address.",
  "static": false,
  "implements": [
    "ghidra.framework.cmd.Command"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "address",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "preComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "postComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "eolComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "plateComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "repeatableComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "msg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct command for setting all the different types of comments at an\n address.",
      "javadoc": "Construct command for setting all the different types of comments at an\n address.\n@param addr address of code unit where comment will edited\n@param newPreComment new pre comment\n@param newPostComment new post comment\n@param newEolComment new eol comment\n@param newPlateComment new plate comment\n@param newRepeatableComment new repeatable comment",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of code unit where comment will edited"
        },
        {
          "name": "newPreComment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new pre comment"
        },
        {
          "name": "newPostComment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new post comment"
        },
        {
          "name": "newEolComment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new eol comment"
        },
        {
          "name": "newPlateComment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new plate comment"
        },
        {
          "name": "newRepeatableComment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "new repeatable comment"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "The name of the edit action.",
      "javadoc": "The name of the edit action.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "commentChanged",
      "comment": "return true if the newValue and oldValue are different",
      "javadoc": "return true if the newValue and oldValue are different\n@param newValue the value that we desire to set\n@param oldValue the existing value\n@return boolean",
      "static": false,
      "params": [
        {
          "name": "newValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the value that we desire to set"
        },
        {
          "name": "oldValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the existing value"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean"
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.Command#applyTo(ghidra.framework.model.DomainObject)",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCodeUnit",
      "comment": "Get the code unit from the program location provider.",
      "javadoc": "Get the code unit from the program location provider.\n@return CodeUnit null if there is no location provider.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnit",
        "type_short": "CodeUnit",
        "comment": "CodeUnit null if there is no location provider."
      },
      "throws": []
    },
    {
      "name": "getStatusMsg",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.Command#getStatusMsg()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
