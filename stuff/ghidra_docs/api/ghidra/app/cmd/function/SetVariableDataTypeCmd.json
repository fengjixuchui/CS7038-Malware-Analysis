{
  "name": "SetVariableDataTypeCmd",
  "comment": "Command to set the datatype on a stack variable.",
  "javadoc": "Command to set the datatype on a stack variable.",
  "static": false,
  "implements": [
    "ghidra.framework.cmd.Command"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "fnEntry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "varName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "dataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "source",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.symbol.SourceType",
      "type_short": "SourceType",
      "constant_value": null
    },
    {
      "name": "align",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "force",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isParm",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "status",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new command for setting the datatype on a stack/reg variable.\n Conflicting stack variables will be removed.",
      "javadoc": "Constructs a new command for setting the datatype on a stack/reg variable.\n Conflicting stack variables will be removed.\n@param var the variable for which to set the datatype.\n@param dataType the datatype to apply to the stack variable.\n@param source signature source",
      "static": false,
      "params": [
        {
          "name": "var",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": "the variable for which to set the datatype."
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the datatype to apply to the stack variable."
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "signature source"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new command for setting the datatype on a stack/reg variable.\n Conflicting stack variables will be removed.",
      "javadoc": "Constructs a new command for setting the datatype on a stack/reg variable.\n Conflicting stack variables will be removed.\n@param fnEntry\n@param varName\n@param dataType\n@param source signature source",
      "static": false,
      "params": [
        {
          "name": "fnEntry",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "varName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "signature source"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new command for setting the datatype on a stack/reg variable",
      "javadoc": "Constructs a new command for setting the datatype on a stack/reg variable\n@param fnEntry\n@param varName\n@param dataType\n@param align maintain proper alignment/justification if supported by implementation (ignored for non-stack variables).\n \t\t\tIf false and this is a stack variable, the current stack address/offset will not change.\n \t\t\tIf true, the affect is implementation dependent since alignment can\n \t\t\tnot be performed without access to a compiler specification.\n@param force overwrite conflicting stack variables\n@param source signature source",
      "static": false,
      "params": [
        {
          "name": "fnEntry",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "varName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "align",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "maintain proper alignment/justification if supported by implementation (ignored for non-stack variables).\n \t\t\tIf false and this is a stack variable, the current stack address/offset will not change.\n \t\t\tIf true, the affect is implementation dependent since alignment can\n \t\t\tnot be performed without access to a compiler specification."
        },
        {
          "name": "force",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "overwrite conflicting stack variables"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "signature source"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.Command#getName()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.Command#applyTo(ghidra.framework.model.DomainObject)",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStatusMsg",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.Command#getStatusMsg()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
