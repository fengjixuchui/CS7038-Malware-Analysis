{
  "name": "FunctionPurgeAnalysisCmd",
  "comment": "Command for analyzing the Stack; the command is run in the background.",
  "javadoc": "Command for analyzing the Stack; the command is run in the background.",
  "static": false,
  "implements": [],
  "extends": "ghidra.framework.cmd.BackgroundCommand",
  "fields": [
    {
      "name": "entryPoints",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSetView",
      "type_short": "AddressSetView",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "nearFarModels",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.PrototypeModel[]",
      "type_short": "ghidra.program.model.lang.PrototypeModel[]",
      "constant_value": null
    },
    {
      "name": "STDCALL_FAR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "CDECL_FAR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "STDCALL_NEAR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "CDECL_NEAR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new command for analyzing the Stack.",
      "javadoc": "Constructs a new command for analyzing the Stack.\n@param entries and address set indicating the entry points of functions that have \n stacks to be analyzed.",
      "static": false,
      "params": [
        {
          "name": "entries",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "and address set indicating the entry points of functions that have \n stacks to be analyzed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.BackgroundCommand#applyTo(ghidra.framework.model.DomainObject, ghidra.util.task.TaskMonitor)",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setupNearFarModels",
      "comment": "For x86 16-bit find the models stdcallnear, stdcallfar, cdeclnear, and cdeclfar so they can\n be applied at the same time function purge is set.",
      "javadoc": "For x86 16-bit find the models stdcallnear, stdcallfar, cdeclnear, and cdeclfar so they can\n be applied at the same time function purge is set.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "analyzeFunction",
      "comment": "Analyze a function to build a stack frame based on stack references.",
      "javadoc": "Analyze a function to build a stack frame based on stack references.\n@param function function to be analyzed\n@param monitor the task monitor that is checked to see if the command has\n been cancelled.\n@throws CancelledException if the user canceled this command",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "function to be analyzed"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor that is checked to see if the command has\n been cancelled."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user canceled this command"
        }
      ]
    },
    {
      "name": "setPrototypeModel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "purgeInstruction",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "locatePurgeInstruction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPurgeValue",
      "comment": "Given a terminating instruction, discover the purge value encoded in it",
      "javadoc": "Given a terminating instruction, discover the purge value encoded in it\n@param instr is the terminating instruction\n@return the purge value (or -1 if a value can\u0027t be found)",
      "static": false,
      "params": [
        {
          "name": "instr",
          "type_long": "ghidra.program.model.listing.Instruction",
          "type_short": "Instruction",
          "comment": "is the terminating instruction"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the purge value (or -1 if a value can\u0027t be found)"
      },
      "throws": []
    },
    {
      "name": "findPurgeInstruction",
      "comment": "Find a terminating instruction in the given set of addresses with a purge encoded in it.\n This routine prefers a RET instruction, but if none is available, it will use a\n terminating CALL.",
      "javadoc": "Find a terminating instruction in the given set of addresses with a purge encoded in it.\n This routine prefers a RET instruction, but if none is available, it will use a\n terminating CALL.\n@param body is the set of addresses to look through\n@return a terminating instruction or null",
      "static": false,
      "params": [
        {
          "name": "body",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "is the set of addresses to look through"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": "a terminating instruction or null"
      },
      "throws": []
    }
  ]
}
