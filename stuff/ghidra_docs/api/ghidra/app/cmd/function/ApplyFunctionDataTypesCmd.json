{
  "name": "ApplyFunctionDataTypesCmd",
  "comment": "Apply all function signature data types in a data type manager to\n any user defined label that has the same name as the function\n signature.",
  "javadoc": "Apply all function signature data types in a data type manager to\n any user defined label that has the same name as the function\n signature.",
  "static": false,
  "implements": [],
  "extends": "ghidra.framework.cmd.BackgroundCommand",
  "fields": [
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "bookmarkMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.BookmarkManager",
      "type_short": "BookmarkManager",
      "constant_value": null
    },
    {
      "name": "managers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.program.model.data.DataTypeManager\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "addresses",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSetView",
      "type_short": "AddressSetView",
      "constant_value": null
    },
    {
      "name": "source",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.symbol.SourceType",
      "type_short": "SourceType",
      "constant_value": null
    },
    {
      "name": "alwaysReplace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "createBookmarksEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "functionNameMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.program.model.data.FunctionDefinition\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new command to apply all function signature data types\n in the given data type manager.",
      "javadoc": "Constructs a new command to apply all function signature data types\n in the given data type manager.\n@param managers list of data type managers containing the function signature data types\n@param set set of addresses containing labels to match against function names.\n \t\t\t  The addresses must not already be included in the body of any existing function.\n  \t\t  If null, all symbols will be processed\n@param source the source of this command.\n@param alwaysReplace true to always replace the existing function signature with the\n \t\t\t\t\t\tfunction signature data type.\n@param createBookmarksEnabled true to create a bookmark when a function signature\n \t\t\t\t\t\t\t\t has been applied.",
      "static": false,
      "params": [
        {
          "name": "managers",
          "type_long": "java.util.List\u003cghidra.program.model.data.DataTypeManager\u003e",
          "type_short": "List",
          "comment": "list of data type managers containing the function signature data types"
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "set of addresses containing labels to match against function names.\n \t\t\t  The addresses must not already be included in the body of any existing function.\n  \t\t  If null, all symbols will be processed"
        },
        {
          "name": "source",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": "the source of this command."
        },
        {
          "name": "alwaysReplace",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to always replace the existing function signature with the\n \t\t\t\t\t\tfunction signature data type."
        },
        {
          "name": "createBookmarksEnabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to create a bookmark when a function signature\n \t\t\t\t\t\t\t\t has been applied."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createSymMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Map\u003cjava.lang.String,java.util.List\u003cghidra.program.model.symbol.Symbol\u003e\u003e",
        "type_short": "Map",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "symbolMap",
          "type_long": "java.util.Map\u003cjava.lang.String,java.util.List\u003cghidra.program.model.symbol.Symbol\u003e\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "symbols",
          "type_long": "ghidra.program.model.symbol.SymbolIterator",
          "type_short": "SymbolIterator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValidName",
      "comment": "Strip off the last name of the string",
      "javadoc": "Strip off the last name of the string\n@param name the original string\n@return the last name in the string",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the original string"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the last name in the string"
      },
      "throws": []
    },
    {
      "name": "applyDataTypes",
      "comment": "Apply all descendants starting at node.",
      "javadoc": "Apply all descendants starting at node.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "symbolMap",
          "type_long": "java.util.Map\u003cjava.lang.String,java.util.List\u003cghidra.program.model.symbol.Symbol\u003e\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkForSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "functionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "fdef",
          "type_long": "ghidra.program.model.data.FunctionDefinition",
          "type_short": "FunctionDefinition",
          "comment": ""
        },
        {
          "name": "symbolMap",
          "type_long": "java.util.Map\u003cjava.lang.String,java.util.List\u003cghidra.program.model.symbol.Symbol\u003e\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "prefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkDoApplyFunctionDefinition",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "functionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "fdef",
          "type_long": "ghidra.program.model.data.FunctionDefinition",
          "type_short": "FunctionDefinition",
          "comment": ""
        },
        {
          "name": "sym",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValidFunctionStart",
      "comment": "Check that the symbol looks like it is at the start of a function.\n There can be internal symbols that may match a function name.",
      "javadoc": "Check that the symbol looks like it is at the start of a function.\n There can be internal symbols that may match a function name.\n@param monitor if need to cancel\n@param address location of the potential symbol\n@return true if the symbol is at the start of a function flow",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "if need to cancel"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "location of the potential symbol"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the symbol is at the start of a function flow"
      },
      "throws": []
    },
    {
      "name": "getInstructionBefore",
      "comment": "Get the instruction directly before this address, makeing sure it is the\n head instruction in a delayslot",
      "javadoc": "Get the instruction directly before this address, makeing sure it is the\n head instruction in a delayslot\n@param address to get instruction before\n@return instruction if found, null otherwise",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "to get instruction before"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Instruction",
        "type_short": "Instruction",
        "comment": "instruction if found, null otherwise"
      },
      "throws": []
    },
    {
      "name": "applyFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sym",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        },
        {
          "name": "fdef",
          "type_long": "ghidra.program.model.data.FunctionDefinition",
          "type_short": "FunctionDefinition",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMostTrustedParameterSource",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.SourceType",
        "type_short": "SourceType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "lookupSymbol",
      "comment": "Lookup any program symbol with the same name as the function signature.\n Also allow for a single \u0027_\u0027 in front of the symbol name.",
      "javadoc": "Lookup any program symbol with the same name as the function signature.\n Also allow for a single \u0027_\u0027 in front of the symbol name.\n@param symbolMap map of symbol names to all matching symbols\n@param prefix optional prefix on symbol to lookup\n@param fdef function definition\n@return symbol definition; null if no symbol is found for the given name",
      "static": false,
      "params": [
        {
          "name": "symbolMap",
          "type_long": "java.util.Map\u003cjava.lang.String,java.util.List\u003cghidra.program.model.symbol.Symbol\u003e\u003e",
          "type_short": "Map",
          "comment": "map of symbol names to all matching symbols"
        },
        {
          "name": "prefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "optional prefix on symbol to lookup"
        },
        {
          "name": "functionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.symbol.Symbol\u003e",
        "type_short": "List",
        "comment": "symbol definition; null if no symbol is found for the given name"
      },
      "throws": []
    }
  ]
}
