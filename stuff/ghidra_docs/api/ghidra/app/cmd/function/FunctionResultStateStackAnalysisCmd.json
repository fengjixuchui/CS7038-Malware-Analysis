{
  "name": "FunctionResultStateStackAnalysisCmd",
  "comment": "Command for analyzing the Stack; the command is run in the background.",
  "javadoc": "Command for analyzing the Stack; the command is run in the background.",
  "static": false,
  "implements": [],
  "extends": "ghidra.framework.cmd.BackgroundCommand",
  "fields": [
    {
      "name": "entryPoints",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "forceProcessing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "dontCreateNewVariables",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new command for analyzing the Stack.",
      "javadoc": "Constructs a new command for analyzing the Stack.\n@param entries and address set indicating the entry points of functions that have \n stacks to be analyzed.\n@param forceProcessing flag to force processing of stack references even if the stack\n           has already been defined.",
      "static": false,
      "params": [
        {
          "name": "entries",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "and address set indicating the entry points of functions that have \n stacks to be analyzed."
        },
        {
          "name": "forceProcessing",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "flag to force processing of stack references even if the stack\n           has already been defined."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new command for analyzing the Stack.",
      "javadoc": "Constructs a new command for analyzing the Stack.\n@param entry the entry point of the function that contains the stack to\n           be analyzed.\n@param forceProcessing flag to force processing of stack references even if the stack\n           has already been defined.",
      "static": false,
      "params": [
        {
          "name": "entry",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the entry point of the function that contains the stack to\n           be analyzed."
        },
        {
          "name": "forceProcessing",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "flag to force processing of stack references even if the stack\n           has already been defined."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "@see ghidra.framework.cmd.BackgroundCommand#applyTo(ghidra.framework.model.DomainObject, ghidra.util.task.TaskMonitor)",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "analyzeFunction",
      "comment": "Analyze a function to build a stack frame based on stack references.",
      "javadoc": "Analyze a function to build a stack frame based on stack references.\n@param entry The address of the entry point for the new function\n@param monitor the task monitor that is checked to see if the command has\n been cancelled.\n@throws CancelledException if the user canceled this command",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "entry",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The address of the entry point for the new function"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor that is checked to see if the command has\n been cancelled."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user canceled this command"
        }
      ]
    },
    {
      "name": "createStackPointerVariables",
      "comment": "Create locals and parameters based on references involving purely the stack pointer.\n Pushes, Pops, and arithmetic manipulation of the stack pointer must be tracked.",
      "javadoc": "Create locals and parameters based on references involving purely the stack pointer.\n Pushes, Pops, and arithmetic manipulation of the stack pointer must be tracked.\n@param func - function to analyze stack pointer references",
      "static": false,
      "params": [
        {
          "name": "func",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "- function to analyze stack pointer references"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "simplifyVarnode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": ""
        },
        {
          "name": "addrFactory",
          "type_long": "ghidra.program.model.address.AddressFactory",
          "type_short": "AddressFactory",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "replaceInputVarnodes",
      "comment": "Replace all occurrences of vn within exp with value",
      "javadoc": "Replace all occurrences of vn within exp with value\n@param exp expression within which vn should be replaced with value\n@param vn a simple varnode to be replaced (e.g., register), must not be a VarnodeOperation\n@param value replacement value (e.g., constant varnode), must not be a VarnodeOperation\n@param maxComplexity maximum expression complexity (i.e., depth) allowed for exp\n@param monitor\n@return updated expression or null if maxComplexity exceeded\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "exp",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "expression within which vn should be replaced with value"
        },
        {
          "name": "vn",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "a simple varnode to be replaced (e.g., register), must not be a VarnodeOperation"
        },
        {
          "name": "value",
          "type_long": "ghidra.program.model.pcode.Varnode",
          "type_short": "Varnode",
          "comment": "replacement value (e.g., constant varnode), must not be a VarnodeOperation"
        },
        {
          "name": "maxComplexity",
          "type_long": "int",
          "type_short": "int",
          "comment": "maximum expression complexity (i.e., depth) allowed for exp"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.pcode.Varnode",
        "type_short": "Varnode",
        "comment": "updated expression or null if maxComplexity exceeded"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    }
  ]
}
