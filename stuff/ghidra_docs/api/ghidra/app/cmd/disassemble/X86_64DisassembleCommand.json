{
  "name": "X86_64DisassembleCommand",
  "comment": "Command object for performing 64-/32-bit x86 disassembly\n \n \n This generally only comes up when debugging, since there can be multiple images loaded by an\n x86-64 target. For WoW64, the images may be mixed. Thus, this command allows you to disassemble\n 64-bit or 32-bit instructions whenever the language is set to 64-bit x86.\n \n \n WARNING: If used in static programs, i.e., not debug traces, there are some potential\n remaining issues, particularly dealing with stored context and follow-on disassembly -- typically\n called for by the analyzers. In most cases, this does not matter, since mixed 64- and 32-bit code\n in a single image is likely a niche case and can be handled via careful commands from the user.\n Nevertheless, TODO: Rework x86-64 analyzers to call the correct mode of disassembly.",
  "javadoc": "Command object for performing 64-/32-bit x86 disassembly\n \n \u003cp\u003e\n This generally only comes up when debugging, since there can be multiple images loaded by an\n x86-64 target. For WoW64, the images may be mixed. Thus, this command allows you to disassemble\n 64-bit or 32-bit instructions whenever the language is set to 64-bit x86.\n \n \u003cp\u003e\n \u003cb\u003eWARNING:\u003c/b\u003e If used in static programs, i.e., not debug traces, there are some potential\n remaining issues, particularly dealing with stored context and follow-on disassembly -- typically\n called for by the analyzers. In most cases, this does not matter, since mixed 64- and 32-bit code\n in a single image is likely a niche case and can be handled via careful commands from the user.\n Nevertheless, TODO: Rework x86-64 analyzers to call the correct mode of disassembly.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.cmd.disassemble.DisassembleCommand",
  "fields": [
    {
      "name": "size32Mode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for X86_64DisassembleCommand.",
      "javadoc": "Constructor for X86_64DisassembleCommand.\n@param startSet set of addresses to be the start of disassembly. The Command object will\n            attempt to start a disassembly at each address in this set.\n@param restrictedSet addresses that can be disassembled. a null set implies no restrictions.\n@param size32Mode pass true if disassembling in 32-bit compatibility mode, otherwise normal\n            64-bit disassembly will be performed.",
      "static": false,
      "params": [
        {
          "name": "startSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "set of addresses to be the start of disassembly. The Command object will\n            attempt to start a disassembly at each address in this set."
        },
        {
          "name": "restrictedSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "addresses that can be disassembled. a null set implies no restrictions."
        },
        {
          "name": "size32Mode",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "pass true if disassembling in 32-bit compatibility mode, otherwise normal\n            64-bit disassembly will be performed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for X86_64DisassembleCommand.",
      "javadoc": "Constructor for X86_64DisassembleCommand.\n@param start address to be the start of a disassembly.\n@param restrictedSet addresses that can be disassembled. a null set implies no restrictions.\n@param size32Mode pass true if disassembling in 32-bit compatibility mode, otherwise normal\n            64-bit disassembly will be performed.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address to be the start of a disassembly."
        },
        {
          "name": "restrictedSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "addresses that can be disassembled. a null set implies no restrictions."
        },
        {
          "name": "size32Mode",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "pass true if disassembling in 32-bit compatibility mode, otherwise normal\n            64-bit disassembly will be performed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSeedContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "seedContext",
          "type_long": "ghidra.program.disassemble.DisassemblerContextImpl",
          "type_short": "DisassemblerContextImpl",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setInitialContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "initialContextValue",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "alignSet",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
