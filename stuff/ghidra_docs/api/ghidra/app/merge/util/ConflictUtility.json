{
  "name": "ConflictUtility",
  "comment": "ConflictUtility provides some constants and static methods \n used by the Listing Merge portion of the multi-user merge.\n For now, the VariousChoicesPanel and VerticalChoicesPanel use HTML in\n JLabels to display color etc. This is because they also show radiobuttons\n and checkboxes.",
  "javadoc": "\u003ccode\u003eConflictUtility\u003c/code\u003e provides some constants and static methods \n used by the Listing Merge portion of the multi-user merge.\n For now, the VariousChoicesPanel and VerticalChoicesPanel use HTML in\n JLabels to display color etc. This is because they also show radiobuttons\n and checkboxes.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "MAROON",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "GREEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "BLUE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "PURPLE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "DARK_CYAN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "OLIVE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "ORANGE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "PINK",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "YELLOW",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "GRAY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "ADDRESS_COLOR",
      "comment": "Color to use for displaying addresses.",
      "javadoc": "Color to use for displaying addresses.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "NUMBER_COLOR",
      "comment": "Color to use for displaying numeric values.",
      "javadoc": "Color to use for displaying numeric values.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "EMPHASIZE_COLOR",
      "comment": "Color to use for displaying emphasized text. (for example, this is used when displaying symbols.)",
      "javadoc": "Color to use for displaying emphasized text. (for example, this is used when displaying symbols.)",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "OFFSET_COLOR",
      "comment": "Color to use for displaying offsets.",
      "javadoc": "Color to use for displaying offsets.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "NO_VALUE",
      "comment": "String to display when a version doesn\u0027t have a value for an element of the program.",
      "javadoc": "String to display when a version doesn\u0027t have a value for an element of the program.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "wrapAsHTML",
      "comment": "Puts HTML and BODY tags around the string.",
      "javadoc": "Puts HTML and BODY tags around the string.",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "colorString",
      "comment": "This creates color text by wrapping a text string with an HTML font tag \n that has a color attribute.",
      "javadoc": "This creates color text by wrapping a text string with an HTML font tag \n that has a color attribute.\n@param rgbColor (eg. \"#8c0000\")\n@param text the text to be colored\n@return the tagged string.",
      "static": true,
      "params": [
        {
          "name": "rgbColor",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "(eg. \"#8c0000\")"
        },
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to be colored"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the tagged string."
      },
      "throws": []
    },
    {
      "name": "colorString",
      "comment": "This creates a colored number by converting the number to a string and \n wrapping it with an HTML font tag that has a color attribute.",
      "javadoc": "This creates a colored number by converting the number to a string and \n wrapping it with an HTML font tag that has a color attribute.\n@param rgbColor (eg. \"#8c0000\")\n@param value the integer number\n@return the tagged string.",
      "static": true,
      "params": [
        {
          "name": "rgbColor",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "(eg. \"#8c0000\")"
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the integer number"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the tagged string."
      },
      "throws": []
    },
    {
      "name": "spaces",
      "comment": "Creates a string for the number of spaces indicated that can be used in HTML.\n This string can be used to preserve spacing.",
      "javadoc": "Creates a string for the number of spaces indicated that can be used in HTML.\n This string can be used to preserve spacing.\n@param num the number of spaces\n@return the string representing that many spaces in HTML.",
      "static": true,
      "params": [
        {
          "name": "num",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of spaces"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string representing that many spaces in HTML."
      },
      "throws": []
    },
    {
      "name": "addCount",
      "comment": "Adds a color number to the indicated string  buffer.",
      "javadoc": "Adds a color number to the indicated string  buffer.\n@param buf the string buffer\n@param value the integer number",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuffer",
          "type_short": "StringBuffer",
          "comment": "the string buffer"
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the integer number"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addAddress",
      "comment": "Adds a color program address to the indicated string buffer.",
      "javadoc": "Adds a color program address to the indicated string buffer.\n@param buf the string buffer\n@param addr the program address",
      "static": true,
      "params": [
        {
          "name": "buf",
          "type_long": "java.lang.StringBuffer",
          "type_short": "StringBuffer",
          "comment": "the string buffer"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the program address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConflictCount",
      "comment": "Creates a standard conflict count message. This indicates which conflict\n you are resolving of some total number of conflicts.",
      "javadoc": "Creates a standard conflict count message. This indicates which conflict\n you are resolving of some total number of conflicts.\n@param conflictNum the current conflict number.\n@param totalConflicts the total number of conflicts\n@return the message string containing HTML tags.",
      "static": true,
      "params": [
        {
          "name": "conflictNum",
          "type_long": "int",
          "type_short": "int",
          "comment": "the current conflict number."
        },
        {
          "name": "totalConflicts",
          "type_long": "int",
          "type_short": "int",
          "comment": "the total number of conflicts"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the message string containing HTML tags."
      },
      "throws": []
    },
    {
      "name": "getConflictCount",
      "comment": "Creates a standard conflict count message for an address. This indicates which conflict\n you are resolving of some total number of conflicts at a given address.",
      "javadoc": "Creates a standard conflict count message for an address. This indicates which conflict\n you are resolving of some total number of conflicts at a given address.\n@param conflictNum the current conflict number.\n@param totalConflicts the total number of conflicts\n@param addr the address for the indicated conflicts.\n@return the message string containing HTML tags.",
      "static": true,
      "params": [
        {
          "name": "conflictNum",
          "type_long": "int",
          "type_short": "int",
          "comment": "the current conflict number."
        },
        {
          "name": "totalConflicts",
          "type_long": "int",
          "type_short": "int",
          "comment": "the total number of conflicts"
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address for the indicated conflicts."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the message string containing HTML tags."
      },
      "throws": []
    },
    {
      "name": "getConflictCount",
      "comment": "Creates a standard conflict count message for an address range. This indicates which conflict\n you are resolving of some total number of conflicts for a given address range.",
      "javadoc": "Creates a standard conflict count message for an address range. This indicates which conflict\n you are resolving of some total number of conflicts for a given address range.\n@param conflictNum the current conflict number.\n@param totalConflicts the total number of conflicts\n@param range the address range for the indicated conflicts.\n@return the message string containing HTML tags.",
      "static": true,
      "params": [
        {
          "name": "conflictNum",
          "type_long": "int",
          "type_short": "int",
          "comment": "the current conflict number."
        },
        {
          "name": "totalConflicts",
          "type_long": "int",
          "type_short": "int",
          "comment": "the total number of conflicts"
        },
        {
          "name": "range",
          "type_long": "ghidra.program.model.address.AddressRange",
          "type_short": "AddressRange",
          "comment": "the address range for the indicated conflicts."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the message string containing HTML tags."
      },
      "throws": []
    },
    {
      "name": "getAddressConflictCount",
      "comment": "Creates a standard address set conflict count message. This indicates \n which address or address range with conflicts you are resolving of some \n total number of addresses or address ranges with conflicts.",
      "javadoc": "Creates a standard address set conflict count message. This indicates \n which address or address range with conflicts you are resolving of some \n total number of addresses or address ranges with conflicts.\n@param addressNum the current conflicting address number.\n@param totalAddresses the total number of conflicting addresses.\n@param isRange true if the current conflict is for an address range.\n@return the message string containing HTML tags.",
      "static": true,
      "params": [
        {
          "name": "addressNum",
          "type_long": "int",
          "type_short": "int",
          "comment": "the current conflicting address number."
        },
        {
          "name": "totalAddresses",
          "type_long": "int",
          "type_short": "int",
          "comment": "the total number of conflicting addresses."
        },
        {
          "name": "isRange",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the current conflict is for an address range."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the message string containing HTML tags."
      },
      "throws": []
    },
    {
      "name": "getTruncatedHTMLString",
      "comment": "Surrounds the originalString with HTML tags. It truncates the string at\n truncLength number of characters and adds \"...\" if it is longer than truncLength.\n It also replaces newline characters with HTML break tags.\n \n Warning: The originalString should not contain special HTML tags. If it does,\n they may get truncated in the middle of a tag.",
      "javadoc": "Surrounds the originalString with HTML tags. It truncates the string at\n truncLength number of characters and adds \"...\" if it is longer than truncLength.\n It also replaces newline characters with HTML break tags.\n \u003cbr\u003e\n Warning: The originalString should not contain special HTML tags. If it does,\n they may get truncated in the middle of a tag.\n@param originalString\n@param truncLength truncate at this length\n@return the truncated message string containing HTML tags.",
      "static": true,
      "params": [
        {
          "name": "originalString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "truncLength",
          "type_long": "int",
          "type_short": "int",
          "comment": "truncate at this length"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the truncated message string containing HTML tags."
      },
      "throws": []
    },
    {
      "name": "replaceNewLines",
      "comment": "Replaces new lines in the given string with HTML break tags.",
      "javadoc": "Replaces new lines in the given string with HTML break tags.\n@param text the original string containing new lines.\n@return the new string containing break tags.",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the original string containing new lines."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the new string containing break tags."
      },
      "throws": []
    },
    {
      "name": "getAddressString",
      "comment": "Creates a string containing HTML tags to represent the address in color.",
      "javadoc": "Creates a string containing HTML tags to represent the address in color.\n@param address the program address.\n@return the message string containing HTML tags.",
      "static": true,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the program address."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the message string containing HTML tags."
      },
      "throws": []
    },
    {
      "name": "getAddressString",
      "comment": "Creates a string containing HTML tags to represent the address in color.",
      "javadoc": "Creates a string containing HTML tags to represent the address in color.\n@param address the program address.\n@param showAddressSpace true indicates the address string should show the address space.\n@return the message string containing HTML tags.",
      "static": true,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the program address."
        },
        {
          "name": "showAddressSpace",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates the address string should show the address space."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the message string containing HTML tags."
      },
      "throws": []
    },
    {
      "name": "getNumberString",
      "comment": "Creates a string containing HTML tags to represent the integer number in color.",
      "javadoc": "Creates a string containing HTML tags to represent the integer number in color.\n@param count the integer number\n@return the message string containing HTML tags.",
      "static": true,
      "params": [
        {
          "name": "count",
          "type_long": "int",
          "type_short": "int",
          "comment": "the integer number"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the message string containing HTML tags."
      },
      "throws": []
    },
    {
      "name": "getEmphasizeString",
      "comment": "Creates a string containing HTML tags to represent the text in color for emphasis.",
      "javadoc": "Creates a string containing HTML tags to represent the text in color for emphasis.\n@param text the text to be emphasized.\n@return the message string containing HTML tags.",
      "static": true,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text to be emphasized."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the message string containing HTML tags."
      },
      "throws": []
    },
    {
      "name": "getOffsetString",
      "comment": "Creates a string containing HTML tags to represent the offset value in \n color as a hexadecimal value.",
      "javadoc": "Creates a string containing HTML tags to represent the offset value in \n color as a hexadecimal value.\n@param offset the offset to be displayed in hexadecimal\n@return the message string containing HTML tags.",
      "static": true,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset to be displayed in hexadecimal"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the message string containing HTML tags."
      },
      "throws": []
    },
    {
      "name": "getHashString",
      "comment": "Creates a string containing HTML tags to represent the hash value in \n color as an unsigned hexadecimal value.",
      "javadoc": "Creates a string containing HTML tags to represent the hash value in \n color as an unsigned hexadecimal value.\n@param hash the hash to be displayed in hexadecimal\n@return the message string containing HTML tags.",
      "static": true,
      "params": [
        {
          "name": "hash",
          "type_long": "long",
          "type_short": "long",
          "comment": "the hash to be displayed in hexadecimal"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the message string containing HTML tags."
      },
      "throws": []
    }
  ]
}
