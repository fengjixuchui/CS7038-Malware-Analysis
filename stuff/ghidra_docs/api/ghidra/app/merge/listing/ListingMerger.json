{
  "name": "ListingMerger",
  "comment": "ListingMerger is an interface implemented by an individual \n listing merge manager. It defines methods that the overall ListingMergeManager\n can call on the individual listing merge managers.",
  "javadoc": "\u003ccode\u003eListingMerger\u003c/code\u003e is an interface implemented by an individual \n listing merge manager. It defines methods that the overall ListingMergeManager\n can call on the individual listing merge managers.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "autoMerge",
      "comment": "Performs the automatic merge for all changes in my Checked Out program version.\n It also determines the conflicts requiring manual resolution.",
      "javadoc": "Performs the automatic merge for all changes in my Checked Out program version.\n It also determines the conflicts requiring manual resolution.\n@param monitor task monitor for informing the user of progress.\n@param progressMin minimum progress value, between 0 and 100, for this auto merge. \n The merge manager\u0027s progress should be updated from progressMin to progressMax \n as the autoMerge occurs.\n@param progressMax maximum progress value, between 0 and 100, for this auto merge.\n@throws ProgramConflictException if the programs for different versions are not compatible.\n@throws MemoryAccessException if memory can\u0027t be accessed to get/set byte values.\n@throws CancelledException if the user cancels the merge.",
      "static": false,
      "params": [
        {
          "name": "progressMin",
          "type_long": "int",
          "type_short": "int",
          "comment": "minimum progress value, between 0 and 100, for this auto merge. \n The merge manager\u0027s progress should be updated from progressMin to progressMax \n as the autoMerge occurs."
        },
        {
          "name": "progressMax",
          "type_long": "int",
          "type_short": "int",
          "comment": "maximum progress value, between 0 and 100, for this auto merge."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor for informing the user of progress."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.util.ProgramConflictException",
          "type_short": "ProgramConflictException",
          "comment": "if the programs for different versions are not compatible."
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory can\u0027t be accessed to get/set byte values."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels the merge."
        }
      ]
    },
    {
      "name": "apply",
      "comment": "Method called when the Apply button is pressed on the GUI conflict resolution window.",
      "javadoc": "Method called when the Apply button is pressed on the GUI conflict resolution window.\n@return true if apply succeeded.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if apply succeeded."
      },
      "throws": []
    },
    {
      "name": "cancel",
      "comment": "Method called when the Cancel button is pressed on the GUI conflict resolution window.",
      "javadoc": "Method called when the Cancel button is pressed on the GUI conflict resolution window.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConflictType",
      "comment": "Returns a string indicating the type of listing conflict this merger handles.\n For example, Function, Symbol, etc.",
      "javadoc": "Returns a string indicating the type of listing conflict this merger handles.\n \u003cbr\u003eFor example, Function, Symbol, etc.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumConflictsResolved",
      "comment": "Determines the number of conflicts that have currently been resolved on \n the conflict resolution window.",
      "javadoc": "Determines the number of conflicts that have currently been resolved on \n the conflict resolution window.\n@return the number of conflicts resolved by the user selecting buttons or checkboxes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of conflicts resolved by the user selecting buttons or checkboxes."
      },
      "throws": []
    },
    {
      "name": "hasConflict",
      "comment": "Determines if there is a conflict at the specified address.",
      "javadoc": "Determines if there is a conflict at the specified address.\n@param addr\n@return true if there is one or more conflicts at the address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there is one or more conflicts at the address."
      },
      "throws": []
    },
    {
      "name": "getConflictCount",
      "comment": "Determines the number of conflicts at the indicated address.",
      "javadoc": "Determines the number of conflicts at the indicated address.\n@param addr the address\n@return the number of conflicts at the indicated address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of conflicts at the indicated address."
      },
      "throws": []
    },
    {
      "name": "mergeConflicts",
      "comment": "Performs a manual merge of all conflicts at the indicated address for \n the type of conflicts that this merge manager handles.",
      "javadoc": "Performs a manual merge of all conflicts at the indicated address for \n the type of conflicts that this merge manager handles.\n@param listingPanel the listing merge panel with the 4 version listings.\n@param addr\n@param conflictOption ASK_USER means interactively resolve conflicts. \n JUnit testing also allows setting this to LATEST, MY, or ORIGINAL to force\n selection of a particular version change.\n@param monitor task monitor for informing the user of progress.\n@throws CancelledException if the user cancels the merge.\n@throws MemoryAccessException if memory can\u0027t be accessed to get/set byte values.",
      "static": false,
      "params": [
        {
          "name": "listingPanel",
          "type_long": "ghidra.app.merge.tool.ListingMergePanel",
          "type_short": "ListingMergePanel",
          "comment": "the listing merge panel with the 4 version listings."
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "conflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": "ASK_USER means interactively resolve conflicts. \n JUnit testing also allows setting this to LATEST, MY, or ORIGINAL to force\n selection of a particular version change."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor for informing the user of progress."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels the merge."
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory can\u0027t be accessed to get/set byte values."
        }
      ]
    },
    {
      "name": "getConflicts",
      "comment": "",
      "javadoc": "@return an address set indicating where there are conflicts to resolve.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "an address set indicating where there are conflicts to resolve."
      },
      "throws": []
    }
  ]
}
