{
  "name": "VariousChoicesPanel",
  "comment": "VariousChoicesPanel provides a table type of format for resolving\n multiple conflicts in one panel. Each row that has choices represents the\n choices for a single conflict. \n So each row can have multiple radio buttons or multiple check boxes.\n At least one choice must be made in each row that provides choices before \n this panel will indicate that all choices are resolved.",
  "javadoc": "\u003ccode\u003eVariousChoicesPanel\u003c/code\u003e provides a table type of format for resolving\n multiple conflicts in one panel. Each row that has choices represents the\n choices for a single conflict. \n So each row can have multiple radio buttons or multiple check boxes.\n At least one choice must be made in each row that provides choices before \n this panel will indicate that all choices are resolved.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.merge.listing.ConflictPanel",
  "fields": [
    {
      "name": "serialVersionUID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "UNDERLINE_BORDER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.border.Border",
      "type_short": "Border",
      "constant_value": null
    },
    {
      "name": "rowPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JPanel",
      "type_short": "JPanel",
      "constant_value": null
    },
    {
      "name": "headerLabel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.label.GDHtmlLabel",
      "type_short": "GDHtmlLabel",
      "constant_value": null
    },
    {
      "name": "rows",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.merge.listing.VariousChoicesPanel.ChoiceRow\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "radioButtonBorder",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.border.Border",
      "type_short": "Border",
      "constant_value": null
    },
    {
      "name": "checkBoxBorder",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.border.Border",
      "type_short": "Border",
      "constant_value": null
    },
    {
      "name": "columnCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "layout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.layout.MaximizeSpecificColumnGridLayout",
      "type_short": "MaximizeSpecificColumnGridLayout",
      "constant_value": null
    },
    {
      "name": "indent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for a various choices panel.",
      "javadoc": "Constructor for a various choices panel.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for a various choices panel.",
      "javadoc": "Constructor for a various choices panel.\n@param isDoubleBuffered",
      "static": false,
      "params": [
        {
          "name": "isDoubleBuffered",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "init",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTitle",
      "comment": "This sets the text that appears as the border title of this panel.",
      "javadoc": "This sets the text that appears as the border title of this panel.\n@param conflictType the type of conflict being resolved.",
      "static": false,
      "params": [
        {
          "name": "conflictType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the type of conflict being resolved."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setHeader",
      "comment": "This sets the header text that appears above the table.",
      "javadoc": "This sets the header text that appears above the table.\n@param text the text",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustColumnCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "numberOfColumns",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addInfoRow",
      "comment": "Adds a row to the table that doesn\u0027t provide any choices. \n Instead this row just provides information.",
      "javadoc": "Adds a row to the table that doesn\u0027t provide any choices. \n Instead this row just provides information.\n@param title title the is placed at the beginning of the row\n@param info the text for each table column in the row\n@param underline true indicates each info string should be underlined \n when it appears. (Underlining is done on the header row (row 0) of the table.",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "title the is placed at the beginning of the row"
        },
        {
          "name": "info",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "the text for each table column in the row"
        },
        {
          "name": "underline",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates each info string should be underlined \n when it appears. (Underlining is done on the header row (row 0) of the table."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addSingleChoice",
      "comment": "Adds radiobutton choices as a row of the table.\n Radiobuttons allow you to select only one choice in the row.",
      "javadoc": "Adds radiobutton choices as a row of the table.\n Radiobuttons allow you to select only one choice in the row.\n@param title title the is placed at the beginning of the row\n@param choices the text for each choice in the row\n@param listener listener that gets notified whenever the state of \n one of the radiobuttons in this row changes.",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "title the is placed at the beginning of the row"
        },
        {
          "name": "choices",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "the text for each choice in the row"
        },
        {
          "name": "listener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "listener that gets notified whenever the state of \n one of the radiobuttons in this row changes."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addMultipleChoice",
      "comment": "Adds checkbox choices as a row of the table.\n Check boxes allow you to select one or more choices in the row.",
      "javadoc": "Adds checkbox choices as a row of the table.\n Check boxes allow you to select one or more choices in the row.\n@param title title the is placed at the beginning of the row\n@param choices the text for each choice in the row\n@param listener listener that gets notified whenever the state of \n one of the checkboxes in this row changes.",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "title the is placed at the beginning of the row"
        },
        {
          "name": "choices",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "the text for each choice in the row"
        },
        {
          "name": "listener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "listener that gets notified whenever the state of \n one of the checkboxes in this row changes."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponentName",
      "comment": "Gets a generic name for a component in the table.",
      "javadoc": "Gets a generic name for a component in the table.\n@param row the row of the table\n@param column the column of the table\n@return the default name of the indicated component in the table.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row of the table"
        },
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column of the table"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the default name of the indicated component in the table."
      },
      "throws": []
    },
    {
      "name": "addRow",
      "comment": "",
      "javadoc": "@param choiceRow",
      "static": false,
      "params": [
        {
          "name": "choiceRow",
          "type_long": "ghidra.app.merge.listing.VariousChoicesPanel.ChoiceRow",
          "type_short": "ChoiceRow",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeRow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rowNum",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUseForAllChoice",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "allChoicesAreResolved",
      "comment": "Returns true if the user made a selection for every conflict in the table.",
      "javadoc": "Returns true if the user made a selection for every conflict in the table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "allChoicesAreSame",
      "comment": "Returns true if the user made a selection for every conflict in the table and \n made the same choice for every row.",
      "javadoc": "Returns true if the user made a selection for every conflict in the table and \n made the same choice for every row.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumConflictsResolved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAllListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "cr",
          "type_long": "ghidra.app.merge.listing.VariousChoicesPanel.ChoiceRow",
          "type_short": "ChoiceRow",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Removes header text for this panel and all table/row information.",
      "javadoc": "Removes header text for this panel and all table/row information.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustUseForAllEnablement",
      "comment": "Adjusts the enablement of the Use For All checkbox based on whether choices have been made \n for all the conflicts currently on the screen and whether the same choice was made for all \n conflicts on the screen.",
      "javadoc": "Adjusts the enablement of the Use For All checkbox based on whether choices have been made \n for all the conflicts currently on the screen and whether the same choice was made for all \n conflicts on the screen.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasChoice",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
