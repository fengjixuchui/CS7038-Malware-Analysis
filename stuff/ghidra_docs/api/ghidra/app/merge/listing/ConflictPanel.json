{
  "name": "ConflictPanel",
  "comment": "Abstract class that should be implemented by the conflict panel that appears \n below the 4 listings in the merge window.",
  "javadoc": "Abstract class that should be implemented by the conflict panel that appears \n below the 4 listings in the merge window.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.merge.listing.ChoiceComponent",
  "fields": [
    {
      "name": "USE_FOR_ALL_CHECKBOX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"UseForAllPropertyConflictCheckBox\""
    },
    {
      "name": "useForAllCB",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JCheckBox",
      "type_short": "JCheckBox",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "isDoubleBuffered",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "layout",
          "type_long": "java.awt.LayoutManager",
          "type_short": "LayoutManager",
          "comment": ""
        },
        {
          "name": "isDoubleBuffered",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "layout",
          "type_long": "java.awt.LayoutManager",
          "type_short": "LayoutManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUseForAllChoice",
      "comment": "Returns an int value that indicates the choices currently selected for \n the Use For All choice in the conflict resolution table. If there are\n multiple rows of choices, then all selected choices must be the same for each\n row or 0 is returned.\n Each button or check box has an associated value that can be bitwise \u0027OR\u0027ed together\n to get the entire choice for the row.",
      "javadoc": "Returns an int value that indicates the choices currently selected for \n the Use For All choice in the conflict resolution table. If there are\n multiple rows of choices, then all selected choices must be the same for each\n row or 0 is returned.\n Each button or check box has an associated value that can be bitwise \u0027OR\u0027ed together\n to get the entire choice for the row.\n@return the choice(s) currently selected.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the choice(s) currently selected."
      },
      "throws": []
    },
    {
      "name": "hasChoice",
      "comment": "Returns true if the conflict panel currently provides at least one choice\n to the user.",
      "javadoc": "Returns true if the conflict panel currently provides at least one choice\n to the user.\n@return true if the panel has a choice the user can select.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the panel has a choice the user can select."
      },
      "throws": []
    },
    {
      "name": "removeAllListeners",
      "comment": "Removes all listeners that were set on this panel for indicating user\n choices were being made or changed.",
      "javadoc": "Removes all listeners that were set on this panel for indicating user\n choices were being made or changed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Called to reset the panel back to an empty state so it can be reused.",
      "javadoc": "Called to reset the panel back to an empty state so it can be reused.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createUseForAllCheckBox",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JCheckBox",
        "type_short": "JCheckBox",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUseAllString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "conflictType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setConflictType",
      "comment": "Sets the name of the conflict type that is displayed as part of the text for the checkbox.",
      "javadoc": "Sets the name of the conflict type that is displayed as part of the text for the checkbox.\n@param conflictType the type of markup that is in conflict.",
      "static": false,
      "params": [
        {
          "name": "conflictType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the type of markup that is in conflict."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setUseForAll",
      "comment": "Selects or deselects the checkbox.",
      "javadoc": "Selects or deselects the checkbox.\n@param useForAll true means select the checkbox.",
      "static": false,
      "params": [
        {
          "name": "useForAll",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means select the checkbox."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUseForAll",
      "comment": "Returns whether or not the checkbox is selected.",
      "javadoc": "Returns whether or not the checkbox is selected.\n@return true if the checkbox is selected.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the checkbox is selected."
      },
      "throws": []
    }
  ]
}
