{
  "name": "FunctionMerger",
  "comment": "Class for merging function changes. This class can merge function changes\n that were made to the checked out version. It can determine\n where there are conflicts between the latest checked in version and my\n checked out version. It can then manually merge the conflicting functions.\n The FunctionMerger merges entire functions wherever the function bodies are\n potentially in conflict between Latest and My. It then merges individual\n parts that make up functions with matching bodies.\n Note: Function name differences are not resolved by this merger. Instead,\n they are resolved by the SymbolMerger.\n Important: This class is intended to be used only for a single program\n version merge. It should be constructed, followed by an autoMerge(), and lastly\n each address with a conflict should have mergeConflicts() called on it.",
  "javadoc": "Class for merging function changes. This class can merge function changes\n that were made to the checked out version. It can determine\n where there are conflicts between the latest checked in version and my\n checked out version. It can then manually merge the conflicting functions.\n The FunctionMerger merges entire functions wherever the function bodies are\n potentially in conflict between Latest and My. It then merges individual\n parts that make up functions with matching bodies.\n \u003cbr\u003eNote: Function name differences are not resolved by this merger. Instead,\n they are resolved by the SymbolMerger.\n \u003cbr\u003eImportant: This class is intended to be used only for a single program\n version merge. It should be constructed, followed by an autoMerge(), and lastly\n each address with a conflict should have mergeConflicts() called on it.",
  "static": false,
  "implements": [
    "ghidra.app.merge.listing.ListingMerger"
  ],
  "extends": "ghidra.app.merge.listing.AbstractFunctionMerger",
  "fields": [
    {
      "name": "MERGE_HIGHLIGHT_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "conflictOption",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "currentAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "diffOriginalLatest",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.ProgramDiff",
      "type_short": "ProgramDiff",
      "constant_value": null
    },
    {
      "name": "diffOriginalMy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.ProgramDiff",
      "type_short": "ProgramDiff",
      "constant_value": null
    },
    {
      "name": "diffLatestMy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.ProgramDiff",
      "type_short": "ProgramDiff",
      "constant_value": null
    },
    {
      "name": "totalChanges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "changeNum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "minPhaseProgressPercentage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "maxPhaseProgressPercentage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "numConflictsResolved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "FUNCTIONS_PHASE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Functions\""
    },
    {
      "name": "CONFLICT_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Function\""
    },
    {
      "name": "INFO_TITLE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Function Merge Information\""
    },
    {
      "name": "ERROR_TITLE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Function Merge Errors\""
    },
    {
      "name": "latestEntireDetailSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSetView",
      "type_short": "AddressSetView",
      "constant_value": null
    },
    {
      "name": "latestDetailSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSetView",
      "type_short": "AddressSetView",
      "constant_value": null
    },
    {
      "name": "myDetailSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSetView",
      "type_short": "AddressSetView",
      "constant_value": null
    },
    {
      "name": "onlyMyChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "bothChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "addEntireLatest",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "changeEntireLatest",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "removeEntireLatest",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "addLatest",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "changeLatest",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "removeLatest",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "addMy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "changeMy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "removeMy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "autoRemoveSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "addLatestExternals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "removeLatestExternals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "changeLatestExternals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "overlapConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Hashtable\u003cghidra.program.model.address.Address,ghidra.program.model.address.AddressSet\u003e",
      "type_short": "Hashtable",
      "constant_value": null
    },
    {
      "name": "overlapConflictSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "overlapAddressSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "bodySet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "thunkConflictSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "conflictSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "thunkAutoMergeSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "currentConflictType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.merge.listing.FunctionMerger.FunctionConflictType",
      "type_short": "FunctionConflictType",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a function merger.",
      "javadoc": "Constructs a function merger.\n@param listingMergeMgr the listing merge manager that owns this merger.",
      "static": false,
      "params": [
        {
          "name": "listingMergeMgr",
          "type_long": "ghidra.app.merge.listing.ListingMergeManager",
          "type_short": "ListingMergeManager",
          "comment": "the listing merge manager that owns this merger."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "init",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConflictType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "autoMerge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "progressMin",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "progressMax",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.util.ProgramConflictException",
          "type_short": "ProgramConflictException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getThunkEntrySet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addressSetToCheck",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "determineConflictSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLatestChangeTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getLatestEntireChangeTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getMyChangeTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "determineOverlapConflicts",
      "comment": "",
      "javadoc": "@param changeSet address set indicating where either Latest or My changed a function.\n@param monitor\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "changeSet",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": "address set indicating where either Latest or My changed a function."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBodies",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "funcMgr",
          "type_long": "ghidra.program.model.listing.FunctionManager",
          "type_short": "FunctionManager",
          "comment": ""
        },
        {
          "name": "conflictingEntries",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "determineBodyConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrs",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "determineBodyConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "entry",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "original",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "latest",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "my",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "determineRemoveConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "possibleConflicts",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "determineThunkConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "functions",
          "type_long": "ghidra.program.model.listing.Function[]",
          "type_short": "ghidra.program.model.listing.Function[]",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "determineThunkNameConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "functions",
          "type_long": "ghidra.program.model.listing.Function[]",
          "type_short": "ghidra.program.model.listing.Function[]",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "determineThunkedFunctionConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "functions",
          "type_long": "ghidra.program.model.listing.Function[]",
          "type_short": "ghidra.program.model.listing.Function[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveThunkConflict",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "result",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveFunctionDetailConflict",
      "comment": "",
      "javadoc": "@param entry\n@param type (FUNC_RETURN_TYPE, FUNC_RETURN_ADDRESS_OFFSET,\n FUNC_PARAMETER_OFFSET, FUNC_LOCAL_SIZE, FUNC_STACK_PURGE_SIZE, FUNC_NAME, FUNC_INLINE,\n FUNC_NO_RETURN, FUNC_CALLING_CONVENTION)",
      "static": false,
      "params": [
        {
          "name": "functions",
          "type_long": "ghidra.program.model.listing.Function[]",
          "type_short": "ghidra.program.model.listing.Function[]",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "(FUNC_RETURN_TYPE, FUNC_RETURN_ADDRESS_OFFSET,\n FUNC_PARAMETER_OFFSET, FUNC_LOCAL_SIZE, FUNC_STACK_PURGE_SIZE, FUNC_NAME, FUNC_INLINE,\n FUNC_NO_RETURN, FUNC_CALLING_CONVENTION)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasConflict",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConflictCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "merge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "entryPt",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "chosenConflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "mergeOverlap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "chosenConflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "mergeEntireFunctions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addressSet",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": ""
        },
        {
          "name": "chosenConflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "mergeFunctions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pgmMerge",
          "type_long": "ghidra.program.util.ProgramMerge",
          "type_short": "ProgramMerge",
          "comment": ""
        },
        {
          "name": "addressSet",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setFunctionsNamespaces",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pgmMerge",
          "type_long": "ghidra.program.util.ProgramMerge",
          "type_short": "ProgramMerge",
          "comment": ""
        },
        {
          "name": "addressSet",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleProgramMergeMessages",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pm",
          "type_long": "ghidra.program.util.ProgramMerge",
          "type_short": "ProgramMerge",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mergeConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listingPanel",
          "type_long": "ghidra.app.merge.tool.ListingMergePanel",
          "type_short": "ListingMergePanel",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "currentConflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "handleOverlappingFunctionsConflict",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listingPanel",
          "type_long": "ghidra.app.merge.tool.ListingMergePanel",
          "type_short": "ListingMergePanel",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "currentConflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "handleFunctionBodyConflict",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listingPanel",
          "type_long": "ghidra.app.merge.tool.ListingMergePanel",
          "type_short": "ListingMergePanel",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "currentConflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "handleFunctionRemovalConflict",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listingPanel",
          "type_long": "ghidra.app.merge.tool.ListingMergePanel",
          "type_short": "ListingMergePanel",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "currentConflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "handleFunctionDetailConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listingPanel",
          "type_long": "ghidra.app.merge.tool.ListingMergePanel",
          "type_short": "ListingMergePanel",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "functions",
          "type_long": "ghidra.program.model.listing.Function[]",
          "type_short": "ghidra.program.model.listing.Function[]",
          "comment": ""
        },
        {
          "name": "currentConflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "mergeThunks",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listingPanel",
          "type_long": "ghidra.app.merge.tool.ListingMergePanel",
          "type_short": "ListingMergePanel",
          "comment": ""
        },
        {
          "name": "currentConflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFunctions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function[]",
        "type_short": "ghidra.program.model.listing.Function[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBodySet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createOverlapConflictPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.merge.listing.VariousChoicesPanel",
        "type_short": "VariousChoicesPanel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createBodyConflictPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.merge.listing.VerticalChoicesPanel",
        "type_short": "VerticalChoicesPanel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createThunkConflictPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.merge.listing.VerticalChoicesPanel",
        "type_short": "VerticalChoicesPanel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mergeParameters",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "entryPtAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "chosenConflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setupAddressSetConflictPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listingPanel",
          "type_long": "ghidra.app.merge.tool.ListingMergePanel",
          "type_short": "ListingMergePanel",
          "comment": ""
        },
        {
          "name": "conflictPanel",
          "type_long": "javax.swing.JPanel",
          "type_short": "JPanel",
          "comment": ""
        },
        {
          "name": "entryPt",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showOverlapException",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "entryPt",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "e",
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createParamInfoConflictPanel",
      "comment": "",
      "javadoc": "@param entryPt\n@return ",
      "static": false,
      "params": [
        {
          "name": "pc",
          "type_long": "ghidra.app.merge.listing.AbstractFunctionMerger.ParamInfoConflict",
          "type_short": "ParamInfoConflict",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.merge.listing.VariousChoicesPanel",
        "type_short": "VariousChoicesPanel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMergeLatest",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.util.ProgramMerge",
        "type_short": "ProgramMerge",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMergeMy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.util.ProgramMerge",
        "type_short": "ProgramMerge",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMergeOriginal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.util.ProgramMerge",
        "type_short": "ProgramMerge",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initListingMerge",
      "comment": "Initializes the four programs and each of the ProgramDiffs\n typically needed to perform the merge.\n Note: If you override this method, it should be the first method you call\n as \"super.init()\" to setup the common listing merge information.",
      "javadoc": "Initializes the four programs and each of the ProgramDiffs\n typically needed to perform the merge.\n \u003cbr\u003eNote: If you override this method, it should be the first method you call\n as \"super.init()\" to setup the common listing merge information.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeAutoMerge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "progressMessage",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "progressMin",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "progressMax",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgramIndex",
      "comment": "Gets the merge constant associated with the indicated program.",
      "javadoc": "Gets the merge constant associated with the indicated program.\n@param pgm the program\n@return RESULT, LATEST, MY, ORIGINAL, or -1.\n A value of -1 indicates the program is not one of the four versioned programs.\n@see MergeConstants",
      "static": false,
      "params": [
        {
          "name": "pgm",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "RESULT, LATEST, MY, ORIGINAL, or -1.\n A value of -1 indicates the program is not one of the four versioned programs."
      },
      "throws": []
    },
    {
      "name": "getProgramForConflictOption",
      "comment": "Gets the program associated with the indicated conflictOption",
      "javadoc": "Gets the program associated with the indicated conflictOption\n@param chosenConflictOption PICK_LATEST, PICK_MY or PICK_ORIGINAL\n@return the program for the option or null",
      "static": false,
      "params": [
        {
          "name": "chosenConflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": "PICK_LATEST, PICK_MY or PICK_ORIGINAL"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the program for the option or null"
      },
      "throws": []
    },
    {
      "name": "limitToStartofCodeUnits",
      "comment": "Gets an address set indicating all addresses in the initial set that are the\n minimum address of a code unit in the specified program\u0027s listing.",
      "javadoc": "Gets an address set indicating all addresses in the initial set that are the\n minimum address of a code unit in the specified program\u0027s listing.\n@param program the program to check for the start of each code unit.\n@param initialSet the initial address set to be checked for the starts of code units.\n@return the address set of all code unit min addresses in the initial set.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to check for the start of each code unit."
        },
        {
          "name": "initialSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the initial address set to be checked for the starts of code units."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": "the address set of all code unit min addresses in the initial set."
      },
      "throws": []
    },
    {
      "name": "getCodeUnitAddressSet",
      "comment": "Return an address set that contains all addresses that make up the code\n units containing the indicated address in the LATEST, MY, and ORIGINAL programs.",
      "javadoc": "Return an address set that contains all addresses that make up the code\n units containing the indicated address in the LATEST, MY, and ORIGINAL programs.\n@param addr the address\n@return the code unit address set",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "the code unit address set"
      },
      "throws": []
    },
    {
      "name": "getCodeUnitAddressSet",
      "comment": "Return an address set that contains all addresses that make up the code\n units containing the indicated addresses in the LATEST, MY, and ORIGINAL programs.",
      "javadoc": "Return an address set that contains all addresses that make up the code\n units containing the indicated addresses in the LATEST, MY, and ORIGINAL programs.\n@param addrs the addresses\n@return the code unit address set",
      "static": false,
      "params": [
        {
          "name": "addrs",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": "the addresses"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "the code unit address set"
      },
      "throws": []
    },
    {
      "name": "apply",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setChoiceForFunctionConflictType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "functionConflictType",
          "type_long": "ghidra.app.merge.listing.FunctionMerger.FunctionConflictType",
          "type_short": "FunctionConflictType",
          "comment": ""
        },
        {
          "name": "choiceForFunctionConflict",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cancel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumConflictsResolved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "incrementProgress",
      "comment": "Updates the progress bar associated with this phase of the merge.\n Before beginning to auto-merge the totalChanges and changeNum must be set.\n This method should then be called as changes are made to update the change bar.\n This assumes that each change is equivalent in terms of shown progress.",
      "javadoc": "Updates the progress bar associated with this phase of the merge.\n Before beginning to auto-merge the \u003ccode\u003etotalChanges\u003c/code\u003e and \u003ccode\u003echangeNum\u003c/code\u003e must be set.\n This method should then be called as changes are made to update the change bar.\n This assumes that each change is equivalent in terms of shown progress.\n@param increment the number of changes completed relative to the total\n number of changes for this auto-merger.",
      "static": false,
      "params": [
        {
          "name": "increment",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of changes completed relative to the total\n number of changes for this auto-merger."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateProgress",
      "comment": "Updates the progress bar associated with this phase of the merge.",
      "javadoc": "Updates the progress bar associated with this phase of the merge.\n@param myPercentComplete the progress percentage completed for this merger.\n This should be a value from 0 to 100.",
      "static": false,
      "params": [
        {
          "name": "myPercentComplete",
          "type_long": "int",
          "type_short": "int",
          "comment": "the progress percentage completed for this merger.\n This should be a value from 0 to 100."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateProgress",
      "comment": "Updates the progress bar and the progress message details associated with this\n phase of the merge.",
      "javadoc": "Updates the progress bar and the progress message details associated with this\n phase of the merge.\n@param myPercentComplete the progress percentage completed for this merger.\n This should be a value from 0 to 100.\n@param message a message indicating what is currently occurring in this phase.\n Null indicates to use the default message.",
      "static": false,
      "params": [
        {
          "name": "myPercentComplete",
          "type_long": "int",
          "type_short": "int",
          "comment": "the progress percentage completed for this merger.\n This should be a value from 0 to 100."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a message indicating what is currently occurring in this phase.\n Null indicates to use the default message."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInfoTitle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getErrorTitle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEquivalent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "function1",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "function2",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
