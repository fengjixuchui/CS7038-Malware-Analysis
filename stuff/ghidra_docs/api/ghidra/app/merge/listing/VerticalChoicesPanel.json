{
  "name": "VerticalChoicesPanel",
  "comment": "VerticalChoicesPanel is a conflict panel for the Listing Merge.\n It lays out rows of information vertically in a table format. \n Each row can be a header row, an information row, a single choice row, \n or a multiple choice row.\n Single choice rows provide a radio button and are used when a single \n choice must be made from multiple rows of choices.\n Multiple choice rows provide a check box and are used when more than one \n choice can be made from multiple rows of choices.\n Note: Single choice and multiple choice rows are not intended to be \n intermixed on the same panel.\n A header label can be set. This appears above the row table. The text\n for the header label should be HTML.",
  "javadoc": "\u003cCODE\u003eVerticalChoicesPanel\u003c/CODE\u003e is a conflict panel for the Listing Merge.\n It lays out rows of information vertically in a table format. \n Each row can be a header row, an information row, a single choice row, \n or a multiple choice row.\n \u003cBR\u003eSingle choice rows provide a radio button and are used when a single \n choice must be made from multiple rows of choices.\n \u003cBR\u003eMultiple choice rows provide a check box and are used when more than one \n choice can be made from multiple rows of choices.\n \u003cBR\u003eNote: Single choice and multiple choice rows are not intended to be \n intermixed on the same panel.\n \u003cBR\u003eA header label can be set. This appears above the row table. The text\n for the header label should be HTML.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.merge.listing.ConflictPanel",
  "fields": [
    {
      "name": "serialVersionUID",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "HEADER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "INFORMATION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "RADIO_BUTTON",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "CHECK_BOX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "headerLabel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.widgets.label.GDHtmlLabel",
      "type_short": "GDHtmlLabel",
      "constant_value": null
    },
    {
      "name": "rowPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JPanel",
      "type_short": "JPanel",
      "constant_value": null
    },
    {
      "name": "rowComps",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.util.ArrayList\u003cjavax.swing.JComponent\u003e\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "rows",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.String[]\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "rowTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.datastruct.LongArrayList",
      "type_short": "LongArrayList",
      "constant_value": null
    },
    {
      "name": "group",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.ButtonGroup",
      "type_short": "ButtonGroup",
      "constant_value": null
    },
    {
      "name": "columnCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "layout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.layout.MaximizeSpecificColumnGridLayout",
      "type_short": "MaximizeSpecificColumnGridLayout",
      "constant_value": null
    },
    {
      "name": "indent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "DEFAULT_TOP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "DEFAULT_LEFT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "DEFAULT_BOTTOM",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "DEFAULT_RIGHT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "defaultInsets",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Insets",
      "type_short": "Insets",
      "constant_value": null
    },
    {
      "name": "textVsButtonInsets",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Insets",
      "type_short": "Insets",
      "constant_value": null
    },
    {
      "name": "textVsCheckBoxInsets",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Insets",
      "type_short": "Insets",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates an empty VerticalChoicesPanel",
      "javadoc": "Creates an empty \u003cCODE\u003eVerticalChoicesPanel\u003c/CODE\u003e",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "@param isDoubleBuffered",
      "static": false,
      "params": [
        {
          "name": "isDoubleBuffered",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "init",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTitle",
      "comment": "This sets the text that appears as the border title of this panel.",
      "javadoc": "This sets the text that appears as the border title of this panel.\n@param conflictType the type of conflict being resolved.",
      "static": false,
      "params": [
        {
          "name": "conflictType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the type of conflict being resolved."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setHeader",
      "comment": "This sets the header text that appears above the table.",
      "javadoc": "This sets the header text that appears above the table.\n@param text the text",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRowHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "items",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustColumnCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "numberOfColumns",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRowComponents",
      "comment": "Gets the GUI components in order from left to right for the indicated row of the display table.",
      "javadoc": "Gets the GUI components in order from left to right for the indicated row of the display table.\n@param row the row index (0 based).\n@return the components.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row index (0 based)."
        }
      ],
      "return": {
        "type_long": "javax.swing.JComponent[]",
        "type_short": "javax.swing.JComponent[]",
        "comment": "the components."
      },
      "throws": []
    },
    {
      "name": "setRowComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "comp",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": ""
        },
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "insets",
          "type_long": "java.awt.Insets",
          "type_short": "Insets",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addRadioButtonRow",
      "comment": "Adds a row with the items in each column. The first item\u0027s component is a radio button.",
      "javadoc": "Adds a row with the items in each column. The first item\u0027s component is a radio button.\n@param items the text for each column.\n@param name the name for the radio button component.\n@param conflictOption the conflict option value associated with selecting this row\u0027s radio button.\n@param listener listener to be notified when the radio button is selected.",
      "static": false,
      "params": [
        {
          "name": "items",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "the text for each column."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name for the radio button component."
        },
        {
          "name": "conflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": "the conflict option value associated with selecting this row\u0027s radio button."
        },
        {
          "name": "listener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "listener to be notified when the radio button is selected."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addCheckBoxRow",
      "comment": "Adds a row with the items in each column. The first item\u0027s component is a check box.",
      "javadoc": "Adds a row with the items in each column. The first item\u0027s component is a check box.\n@param items the text for each column.\n@param name the name for the check box component.\n@param conflictOption the conflict option value associated with selecting this row\u0027s check box.\n@param listener listener to be notified when the check box is selected or not selected.",
      "static": false,
      "params": [
        {
          "name": "items",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "the text for each column."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name for the check box component."
        },
        {
          "name": "conflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": "the conflict option value associated with selecting this row\u0027s check box."
        },
        {
          "name": "listener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "listener to be notified when the check box is selected or not selected."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addInfoRow",
      "comment": "Adds a row to the table that doesn\u0027t provide any choices. \n Instead this row just provides information.",
      "javadoc": "Adds a row to the table that doesn\u0027t provide any choices. \n Instead this row just provides information.\n@param items the text for each column.",
      "static": false,
      "params": [
        {
          "name": "items",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "the text for each column."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Removes header text for this panel and all table/row information.\n It also sets the columnCount back to 1.",
      "javadoc": "Removes header text for this panel and all table/row information.\n It also sets the columnCount back to 1.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponentName",
      "comment": "Gets a generic name for a component in the table.",
      "javadoc": "Gets a generic name for a component in the table.\n@param row the row of the table\n@param column the column of the table\n@return the default name of the indicated component in the table.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row of the table"
        },
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column of the table"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the default name of the indicated component in the table."
      },
      "throws": []
    },
    {
      "name": "allChoicesAreResolved",
      "comment": "Returns true if the user made a selection for every conflict in the table.",
      "javadoc": "Returns true if the user made a selection for every conflict in the table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumConflictsResolved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSelectedOptions",
      "comment": "",
      "javadoc": "@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponent",
      "comment": "",
      "javadoc": "@param row\n@param i\n@return ",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "column",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.JComponent",
        "type_short": "JComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "allChoicesAreSame",
      "comment": "Returns true if the user made a selection for every conflict in the table and \n made the same choice for every row.",
      "javadoc": "Returns true if the user made a selection for every conflict in the table and \n made the same choice for every row.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUseForAllChoice",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAllListeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasChoice",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
