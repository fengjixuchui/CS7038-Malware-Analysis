{
  "name": "FunctionVariableStorageConflicts",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.util.VariableStorageConflicts",
  "fields": [
    {
      "name": "function1",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Function",
      "type_short": "Function",
      "constant_value": null
    },
    {
      "name": "function2",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Function",
      "type_short": "Function",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a VariableStorageConflicts object for the variables contained within two\n functions.",
      "javadoc": "Construct a VariableStorageConflicts object for the variables contained within two\n functions.\n@param function1\n@param function2\n@param ignoreParamToParamConflicts if true param-to-param overlaps will be ignored unless\n a param-to-local overlap occurs in which case all params will be pulled in to the\n overlap.  If true, it is assumed that the current overlap iteration was initiated by\n a parameter overlap check.\n@param monitor\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "function1",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "function2",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "ignoreParamToParamConflicts",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true param-to-param overlaps will be ignored unless\n a param-to-local overlap occurs in which case all params will be pulled in to the\n overlap.  If true, it is assumed that the current overlap iteration was initiated by\n a parameter overlap check."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isConflicted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "var1",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": ""
        },
        {
          "name": "var2",
          "type_long": "ghidra.program.model.listing.Variable",
          "type_short": "Variable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
