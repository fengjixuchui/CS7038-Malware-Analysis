{
  "name": "AbstractListingMerger",
  "comment": "AbstractListingMerger is an abstract class that each type of\n listing merge manager can extend to gain access to commonly needed information\n such as the programs, the listing merge panel,\n Diffs for Latest-Original and My-Original and Latest-My, etc.",
  "javadoc": "\u003ccode\u003eAbstractListingMerger\u003c/code\u003e is an abstract class that each type of\n listing merge manager can extend to gain access to commonly needed information\n such as the programs, the listing merge panel,\n Diffs for Latest-Original and My-Original and Latest-My, etc.",
  "static": false,
  "implements": [
    "ghidra.app.merge.listing.ListingMerger",
    "ghidra.app.merge.listing.ListingMergeConstants"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "RESULT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "LATEST",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "MY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "ORIGINAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "MERGE_HIGHLIGHT_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "mergeManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.merge.ProgramMultiUserMergeManager",
      "type_short": "ProgramMultiUserMergeManager",
      "constant_value": null
    },
    {
      "name": "listingMergeMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.merge.listing.ListingMergeManager",
      "type_short": "ListingMergeManager",
      "constant_value": null
    },
    {
      "name": "listingMergePanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.merge.tool.ListingMergePanel",
      "type_short": "ListingMergePanel",
      "constant_value": null
    },
    {
      "name": "conflictInfoPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.merge.listing.ConflictInfoPanel",
      "type_short": "ConflictInfoPanel",
      "constant_value": null
    },
    {
      "name": "conflictOption",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "currentAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "currentMonitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    },
    {
      "name": "resultPgm",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "originalPgm",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "latestPgm",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "myPgm",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "resultAddressFactory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressFactory",
      "type_short": "AddressFactory",
      "constant_value": null
    },
    {
      "name": "diffOriginalLatest",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.ProgramDiff",
      "type_short": "ProgramDiff",
      "constant_value": null
    },
    {
      "name": "diffOriginalMy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.ProgramDiff",
      "type_short": "ProgramDiff",
      "constant_value": null
    },
    {
      "name": "diffLatestMy",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.ProgramDiff",
      "type_short": "ProgramDiff",
      "constant_value": null
    },
    {
      "name": "errorBuf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.StringBuffer",
      "type_short": "StringBuffer",
      "constant_value": null
    },
    {
      "name": "infoBuf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.StringBuffer",
      "type_short": "StringBuffer",
      "constant_value": null
    },
    {
      "name": "totalChanges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "changeNum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "minPhaseProgressPercentage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "maxPhaseProgressPercentage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "currentConflictPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.merge.listing.ConflictPanel",
      "type_short": "ConflictPanel",
      "constant_value": null
    },
    {
      "name": "numConflictsResolved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a generic type of Listing merger. This should be called by any\n listing merger that extends this class. It can be called from the\n constructor as super(listingMergeManager);",
      "javadoc": "Constructs a generic type of Listing merger. This should be called by any\n listing merger that extends this class. It can be called from the\n constructor as \u003ccode\u003esuper(listingMergeManager);\u003c/code\u003e\n@param listingMergeMgr the overall manager for the associated listing merge.\n@param monitor monitor for indicating merge progress to the user and to provide Cancel.\n@throws CancelledException if the user Cancels.",
      "static": false,
      "params": [
        {
          "name": "listingMergeMgr",
          "type_long": "ghidra.app.merge.listing.ListingMergeManager",
          "type_short": "ListingMergeManager",
          "comment": "the overall manager for the associated listing merge."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "init",
      "comment": "Initializes the four programs and each of the ProgramDiffs\n typically needed to perform the merge.\n Note: If you override this method, it should be the first method you call\n as \"super.init()\" to setup the common listing merge information.",
      "javadoc": "Initializes the four programs and each of the ProgramDiffs\n typically needed to perform the merge.\n \u003cbr\u003eNote: If you override this method, it should be the first method you call\n as \"super.init()\" to setup the common listing merge information.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeAutoMerge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "progressMessage",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "progressMin",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "progressMax",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgramIndex",
      "comment": "Gets the merge constant associated with the indicated program.",
      "javadoc": "Gets the merge constant associated with the indicated program.\n@param pgm the program\n@return RESULT, LATEST, MY, ORIGINAL, or -1.\n A value of -1 indicates the program is not one of the four versioned programs.\n@see MergeConstants",
      "static": false,
      "params": [
        {
          "name": "pgm",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "RESULT, LATEST, MY, ORIGINAL, or -1.\n A value of -1 indicates the program is not one of the four versioned programs."
      },
      "throws": []
    },
    {
      "name": "getProgramForConflictOption",
      "comment": "Gets the program associated with the indicated conflictOption",
      "javadoc": "Gets the program associated with the indicated conflictOption\n@param chosenConflictOption PICK_LATEST, PICK_MY or PICK_ORIGINAL\n@return the program for the option or null",
      "static": false,
      "params": [
        {
          "name": "chosenConflictOption",
          "type_long": "int",
          "type_short": "int",
          "comment": "PICK_LATEST, PICK_MY or PICK_ORIGINAL"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the program for the option or null"
      },
      "throws": []
    },
    {
      "name": "limitToStartofCodeUnits",
      "comment": "Gets an address set indicating all addresses in the initial set that are the\n minimum address of a code unit in the specified program\u0027s listing.",
      "javadoc": "Gets an address set indicating all addresses in the initial set that are the\n minimum address of a code unit in the specified program\u0027s listing.\n@param program the program to check for the start of each code unit.\n@param initialSet the initial address set to be checked for the starts of code units.\n@return the address set of all code unit min addresses in the initial set.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to check for the start of each code unit."
        },
        {
          "name": "initialSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the initial address set to be checked for the starts of code units."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": "the address set of all code unit min addresses in the initial set."
      },
      "throws": []
    },
    {
      "name": "getCodeUnitAddressSet",
      "comment": "Return an address set that contains all addresses that make up the code\n units containing the indicated address in the LATEST, MY, and ORIGINAL programs.",
      "javadoc": "Return an address set that contains all addresses that make up the code\n units containing the indicated address in the LATEST, MY, and ORIGINAL programs.\n@param addr the address\n@return the code unit address set",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "the code unit address set"
      },
      "throws": []
    },
    {
      "name": "getCodeUnitAddressSet",
      "comment": "Return an address set that contains all addresses that make up the code\n units containing the indicated addresses in the LATEST, MY, and ORIGINAL programs.",
      "javadoc": "Return an address set that contains all addresses that make up the code\n units containing the indicated addresses in the LATEST, MY, and ORIGINAL programs.\n@param addrs the addresses\n@return the code unit address set",
      "static": false,
      "params": [
        {
          "name": "addrs",
          "type_long": "ghidra.program.model.address.AddressSet",
          "type_short": "AddressSet",
          "comment": "the addresses"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "the code unit address set"
      },
      "throws": []
    },
    {
      "name": "clearResolveErrors",
      "comment": "Clears all text from the error buffer.",
      "javadoc": "Clears all text from the error buffer.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showResolveErrors",
      "comment": "This is a generic method for displaying the contents of the error\n buffer to the user.",
      "javadoc": "This is a generic method for displaying the contents of the error\n buffer to the user.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearResolveInfo",
      "comment": "Clears all text from the information buffer.",
      "javadoc": "Clears all text from the information buffer.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showResolveInfo",
      "comment": "This is a generic method for displaying the contents of the information\n buffer to the user.",
      "javadoc": "This is a generic method for displaying the contents of the information\n buffer to the user.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "same",
      "comment": "Returns whether or not the two indicated objects are equal. It allows\n either or both of the specified objects to be null.",
      "javadoc": "Returns whether or not the two indicated objects are equal. It allows\n either or both of the specified objects to be null.\n@param o1 the first object or null\n@param o2 the second object or null\n@return true if the objects are equal.",
      "static": true,
      "params": [
        {
          "name": "o1",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the first object or null"
        },
        {
          "name": "o2",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the second object or null"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the objects are equal."
      },
      "throws": []
    },
    {
      "name": "apply",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cancel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumConflictsResolved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "incrementProgress",
      "comment": "Updates the progress bar associated with this phase of the merge.\n Before beginning to auto-merge the totalChanges and changeNum must be set.\n This method should then be called as changes are made to update the change bar.\n This assumes that each change is equivalent in terms of shown progress.",
      "javadoc": "Updates the progress bar associated with this phase of the merge.\n Before beginning to auto-merge the \u003ccode\u003etotalChanges\u003c/code\u003e and \u003ccode\u003echangeNum\u003c/code\u003e must be set.\n This method should then be called as changes are made to update the change bar.\n This assumes that each change is equivalent in terms of shown progress.\n@param increment the number of changes completed relative to the total\n number of changes for this auto-merger.",
      "static": false,
      "params": [
        {
          "name": "increment",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of changes completed relative to the total\n number of changes for this auto-merger."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateProgressMessage",
      "comment": "Updates the progress message details associated with this phase of the merge.",
      "javadoc": "Updates the progress message details associated with this phase of the merge.\n@param message a message indicating what is currently occurring in this phase.\n Null indicates to use the default message.",
      "static": false,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a message indicating what is currently occurring in this phase.\n Null indicates to use the default message."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateProgress",
      "comment": "Updates the progress bar associated with this phase of the merge.",
      "javadoc": "Updates the progress bar associated with this phase of the merge.\n@param myPercentComplete the progress percentage completed for this merger.\n This should be a value from 0 to 100.",
      "static": false,
      "params": [
        {
          "name": "myPercentComplete",
          "type_long": "int",
          "type_short": "int",
          "comment": "the progress percentage completed for this merger.\n This should be a value from 0 to 100."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateProgress",
      "comment": "Updates the progress bar and the progress message details associated with this\n phase of the merge.",
      "javadoc": "Updates the progress bar and the progress message details associated with this\n phase of the merge.\n@param myPercentComplete the progress percentage completed for this merger.\n This should be a value from 0 to 100.\n@param message a message indicating what is currently occurring in this phase.\n Null indicates to use the default message.",
      "static": false,
      "params": [
        {
          "name": "myPercentComplete",
          "type_long": "int",
          "type_short": "int",
          "comment": "the progress percentage completed for this merger.\n This should be a value from 0 to 100."
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "a message indicating what is currently occurring in this phase.\n Null indicates to use the default message."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
