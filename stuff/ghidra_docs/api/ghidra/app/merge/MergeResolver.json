{
  "name": "MergeResolver",
  "comment": "Interface for resolving domain object merge conflicts.",
  "javadoc": "Interface for resolving domain object merge conflicts.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getName",
      "comment": "Get the name of this MergeResolver.",
      "javadoc": "Get the name of this MergeResolver.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "Get the description of what this MergeResolver does.",
      "javadoc": "Get the description of what this MergeResolver does.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "apply",
      "comment": "Notification that the apply button was hit.",
      "javadoc": "Notification that the apply button was hit.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cancel",
      "comment": "Notification that the merge process was canceled.",
      "javadoc": "Notification that the merge process was canceled.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "merge",
      "comment": "Perform the merge process.",
      "javadoc": "Perform the merge process.\n@param monitor monitor that allows the user to cancel the merge\n operation\n@throws Exception if the merge encounters an error and the merge process\n should not continue.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "monitor that allows the user to cancel the merge\n operation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if the merge encounters an error and the merge process\n should not continue."
        }
      ]
    },
    {
      "name": "getPhases",
      "comment": "Gets identifiers for the merge phases handled by this MergeResolver.\n If the merge has no sub-phases then return an array with a single string array. \n Each inner String array indicates a path for a single merge phase.\n Each outer array element represents a phase whose progress we wish to indicate.\n Examples:\n So for a simple phase which has no sub-phases return \n \n new String[][] {new String[] {\"Phase A\"}}\n \n So for a phase with 2 sub-phases return \n \n new String[][] { new String[] {\"Phase A\"}, \n                  new String[] {\"Phase A\", \"Sub-Phase 1},\n                  new String[] {\"Phase A\", \"Sub-Phase 2} }\n .",
      "javadoc": "Gets identifiers for the merge phases handled by this MergeResolver.\n If the merge has no sub-phases then return an array with a single string array. \n Each inner String array indicates a path for a single merge phase.\n Each outer array element represents a phase whose progress we wish to indicate.\n \u003cbr\u003eExamples:\n \u003cbr\u003eSo for a simple phase which has no sub-phases return \n \u003ccode\u003e\n new String[][] {new String[] {\"Phase A\"}}\n \u003c/code\u003e\n \u003cbr\u003eSo for a phase with 2 sub-phases return \n \u003ccode\u003e\n new String[][] { new String[] {\"Phase A\"}, \n                  new String[] {\"Phase A\", \"Sub-Phase 1},\n                  new String[] {\"Phase A\", \"Sub-Phase 2} }\n \u003c/code\u003e.\n@return an array of phases.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[][]",
        "type_short": "java.lang.String[][]",
        "comment": "an array of phases."
      },
      "throws": []
    }
  ]
}
