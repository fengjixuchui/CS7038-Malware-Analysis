{
  "name": "DataTypeMergeManager",
  "comment": "Manager for merging category and data type changes",
  "javadoc": "Manager for merging category and data type changes",
  "static": false,
  "implements": [
    "ghidra.app.merge.MergeResolver"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DATA_TYPES_PHASE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "RESULT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "ORIGINAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "LATEST",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "MY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "CANCELED",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-2"
    },
    {
      "name": "ASK_USER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "OPTION_LATEST",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "OPTION_MY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "OPTION_ORIGINAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "mergeManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.data.DomainObjectMergeManager",
      "type_short": "DomainObjectMergeManager",
      "constant_value": null
    },
    {
      "name": "domainObjects",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataTypeManagerDomainObject[]",
      "type_short": "ghidra.program.model.data.DataTypeManagerDomainObject[]",
      "constant_value": null
    },
    {
      "name": "dtms",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataTypeManager[]",
      "type_short": "ghidra.program.model.data.DataTypeManager[]",
      "constant_value": null
    },
    {
      "name": "currentMonitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    },
    {
      "name": "originalConflictOption",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "conflictOption",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "dirtyMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cghidra.util.UniversalID,java.lang.Boolean\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "myArchiveAddedList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Long\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "myArchiveChangeList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Long\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "archiveConflictList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Long\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "archiveMergePanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.merge.datatypes.SourceArchiveMergePanel",
      "type_short": "SourceArchiveMergePanel",
      "constant_value": null
    },
    {
      "name": "myCatAddedList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Long\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "myCatChangeList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Long\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "catConflictList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Long\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "catMergePanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.merge.datatypes.CategoryMergePanel",
      "type_short": "CategoryMergePanel",
      "constant_value": null
    },
    {
      "name": "myDtAddedList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Long\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "myDtChangeList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Long\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "dtConflictList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Long\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "dtSourceConflictList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Long\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "origDtConflictList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Long\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "dtMergePanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.merge.datatypes.DataTypeMergePanel",
      "type_short": "DataTypeMergePanel",
      "constant_value": null
    },
    {
      "name": "totalConflictCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "currentConflictIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "myResolvedDts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "latestResolvedDts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "origResolvedDts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "fixUpList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.merge.datatypes.DataTypeMergeManager.FixUpInfo\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "fixUpIDSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashSet\u003cjava.lang.Long\u003e",
      "type_short": "HashSet",
      "constant_value": null
    },
    {
      "name": "cleanupPlaceHolderList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.app.merge.datatypes.DataTypeMergeManager.CleanUpInfo\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "progressIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "categoryChoice",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "dataTypeChoice",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "sourceArchiveChoice",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Manager for merging the data types using the four programs.",
      "javadoc": "Manager for merging the data types using the four programs.\n@param mergeManager overall merge manager for domain object\n@param resultDomainObject the program to be updated with the result of the merge.\n This is the program that will actually get checked in.\n@param myDomainObject the program requesting to be checked in.\n@param originalDomainObject the program that was checked out.\n@param latestDomainObject the latest checked-in version of the program.\n@param latestChanges the address set of changes between original and latest versioned program.\n@param myChanges the address set of changes between original and my modified program.",
      "static": false,
      "params": [
        {
          "name": "mergeManager",
          "type_long": "ghidra.framework.data.DomainObjectMergeManager",
          "type_short": "DomainObjectMergeManager",
          "comment": "overall merge manager for domain object"
        },
        {
          "name": "resultDomainObject",
          "type_long": "ghidra.program.model.data.DataTypeManagerDomainObject",
          "type_short": "DataTypeManagerDomainObject",
          "comment": "the program to be updated with the result of the merge.\n This is the program that will actually get checked in."
        },
        {
          "name": "myDomainObject",
          "type_long": "ghidra.program.model.data.DataTypeManagerDomainObject",
          "type_short": "DataTypeManagerDomainObject",
          "comment": "the program requesting to be checked in."
        },
        {
          "name": "originalDomainObject",
          "type_long": "ghidra.program.model.data.DataTypeManagerDomainObject",
          "type_short": "DataTypeManagerDomainObject",
          "comment": "the program that was checked out."
        },
        {
          "name": "latestDomainObject",
          "type_long": "ghidra.program.model.data.DataTypeManagerDomainObject",
          "type_short": "DataTypeManagerDomainObject",
          "comment": "the latest checked-in version of the program."
        },
        {
          "name": "latestChanges",
          "type_long": "ghidra.program.model.listing.DataTypeChangeSet",
          "type_short": "DataTypeChangeSet",
          "comment": "the address set of changes between original and latest versioned program."
        },
        {
          "name": "myChanges",
          "type_long": "ghidra.program.model.listing.DataTypeChangeSet",
          "type_short": "DataTypeChangeSet",
          "comment": "the address set of changes between original and my modified program."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "apply",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cancel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "merge",
      "comment": "Merge the data types using the four programs.",
      "javadoc": "Merge the data types using the four programs.\n@param monitor merge task monitor\n@see MergeConstants",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "merge task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setConflictResolution",
      "comment": "For JUnit testing only, set the option for resolving a conflict.",
      "javadoc": "For JUnit testing only, set the option for resolving a conflict.\n@param option forced conflict resolution option",
      "static": false,
      "params": [
        {
          "name": "option",
          "type_long": "int",
          "type_short": "int",
          "comment": "forced conflict resolution option"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processSourceArchiveChanges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "updateSourceArchive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateSourceName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "resultSourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processSourceArchiveAdditions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addSourceArchive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "mySourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeSourceArchive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "universalID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustTime",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "resultSourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        },
        {
          "name": "mySourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixupDirtyFlags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processSourceArchiveConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "handleSourceArchiveConflict",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "conflictIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processCategoriesAdded",
      "comment": "Add new categories.",
      "javadoc": "Add new categories.\n@throws CancelledException if task cancelled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if task cancelled"
        }
      ]
    },
    {
      "name": "processCategoryConflicts",
      "comment": "Process conflicts for categories.",
      "javadoc": "Process conflicts for categories.\n@throws CancelledException task was cancelled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "task was cancelled"
        }
      ]
    },
    {
      "name": "handleCategoryConflict",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "conflictIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processCategoryChanges",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processCategoriesDeleted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processDataTypeConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "handleDataTypeConflict",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "conflictIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "applyDataTypeConflict",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSourceDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "myID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "changeSourceArchive",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dtID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeRenamedOrMoved",
      "comment": "Process data type moved or renamed.",
      "javadoc": "Process data type moved or renamed.\n@param id data type ID\n@return true if the data type was added because it was deleted\n in RESULT; false if the data type did not have to be added",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "data type ID"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the data type was added because it was deleted\n in RESULT; false if the data type did not have to be added"
      },
      "throws": []
    },
    {
      "name": "updateDataTypeName",
      "comment": "Update the data type name/category path in RESULT if it exists.\n If it does not exist, add it to RESULT.",
      "javadoc": "Update the data type name/category path in RESULT if it exists.\n If it does not exist, add it to RESULT.\n@param id id of data type\n@param dt data type to use as the source name and category path\n@param resolvedDataTypes hashtable that has resolved data types\n@return the new data type if one had to be added to RESULT; null if\n the data type existed",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "id of data type"
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "data type to use as the source name and category path"
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": "hashtable that has resolved data types"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the new data type if one had to be added to RESULT; null if\n the data type existed"
      },
      "throws": []
    },
    {
      "name": "dataTypeDeleted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCategoryPath",
      "comment": "Set category path.  If name conflict occurs within new category\n the specified dt will remain within its current category",
      "javadoc": "Set category path.  If name conflict occurs within new category\n the specified dt will remain within its current category\n@param dt datatype whose category is to changed\n@param newPath new category path",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "datatype whose category is to changed"
        },
        {
          "name": "newPath",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "new category path"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "updatePath",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateDataTypeSource",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDataType",
      "comment": "",
      "javadoc": "@param dataTypeID the ID (key) of the data type to be added.\n@param dataType the data type to be added.\n@param resolvedDataTypes table which maps the dataTypeID to the resulting data type within\n this data type manager.\n@return the resulting data type in this data type manager.",
      "static": false,
      "params": [
        {
          "name": "dataTypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the ID (key) of the data type to be added."
        },
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type to be added."
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": "table which maps the dataTypeID to the resulting data type within\n this data type manager."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the resulting data type in this data type manager."
      },
      "throws": []
    },
    {
      "name": "getResolvedBaseType",
      "comment": "Get the resolved data type from the given table;\n If the data type has not been resolved yet, then use the one from\n the results if the id was not added in MY program.",
      "javadoc": "Get the resolved data type from the given table;\n If the data type has not been resolved yet, then use the one from\n the results if the id was not added in MY program.\n@param id id of data type\n@param dt the data type\n@return resolved data type that corresponds to id",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "id of data type"
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type"
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "resolved data type that corresponds to id"
      },
      "throws": []
    },
    {
      "name": "createPointer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "pointerDt",
          "type_long": "ghidra.program.model.data.Pointer",
          "type_short": "Pointer",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createTypeDef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "originalTypeDef",
          "type_long": "ghidra.program.model.data.TypeDef",
          "type_short": "TypeDef",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createArray",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "array",
          "type_long": "ghidra.program.model.data.Array",
          "type_short": "Array",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addComposite",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "myDt",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addFunctionDef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "myDt",
          "type_long": "ghidra.program.model.data.FunctionDefinition",
          "type_short": "FunctionDefinition",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateHashTables",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "newDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getResolvedComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "compID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeFixUps",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceDtID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateStructure",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceDtID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "sourceDt",
          "type_long": "ghidra.program.model.data.Structure",
          "type_short": "Structure",
          "comment": ""
        },
        {
          "name": "destStruct",
          "type_long": "ghidra.program.model.data.Structure",
          "type_short": "Structure",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustStructureSize",
      "comment": "Bitfield insertions can cause excess growth of structure which must be trimmed.",
      "javadoc": "Bitfield insertions can cause excess growth of structure which must be trimmed.\n@param struct structure to be trimmed\n@param preferredSize preferred structure size",
      "static": true,
      "params": [
        {
          "name": "struct",
          "type_long": "ghidra.program.model.data.Structure",
          "type_short": "Structure",
          "comment": "structure to be trimmed"
        },
        {
          "name": "preferredSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "preferred structure size"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "displayError",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "destComposite",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        },
        {
          "name": "e",
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateUnion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceDtID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "sourceDt",
          "type_long": "ghidra.program.model.data.Union",
          "type_short": "Union",
          "comment": ""
        },
        {
          "name": "destUnion",
          "type_long": "ghidra.program.model.data.Union",
          "type_short": "Union",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceDt",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        },
        {
          "name": "destinationDt",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateComposite",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceDtID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "sourceDt",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        },
        {
          "name": "destDt",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateFunctionDef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceFunctionDefDtID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "sourceFunctionDefDt",
          "type_long": "ghidra.program.model.data.FunctionDefinition",
          "type_short": "FunctionDefinition",
          "comment": ""
        },
        {
          "name": "destDt",
          "type_long": "ghidra.program.model.data.FunctionDefinition",
          "type_short": "FunctionDefinition",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getResolvedParam",
      "comment": "Get the resolved data type for either the return type or a variable.",
      "javadoc": "Get the resolved data type for either the return type or a variable.\n@param id id of FunctionDefinition\n@param paramDatatypeID ID of either the return or variable dataty type ID\n@param index \u0026gt;\u003d0 is the index of the variable; \u003c0 means the paramID is\n the return type\n@param resolvedDataTypes hashtable to use for resolving\n@return resolved data type or the default data type if the data type\n has not been resolved yet",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "id of FunctionDefinition"
        },
        {
          "name": "paramDatatypeID",
          "type_long": "long",
          "type_short": "long",
          "comment": "ID of either the return or variable dataty type ID"
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "\u003d0 is the index of the variable; 0 means the paramID is\n the return type"
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": "hashtable to use for resolving"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "resolved data type or the default data type if the data type\n has not been resolved yet"
      },
      "throws": []
    },
    {
      "name": "processDataTypeChanges",
      "comment": "Process data types that were changed (renamed, moved, or edited) in\n MY program, but are not conflicts, i.e., not renamed, moved or edited\n in LATEST. The corresponding data type in RESULT program is updated.",
      "javadoc": "Process data types that were changed (renamed, moved, or edited) in\n MY program, but are not conflicts, i.e., not renamed, moved or edited\n in LATEST. The corresponding data type in RESULT program is updated.\n@throws CancelledException if task is cancelled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if task is cancelled"
        }
      ]
    },
    {
      "name": "processCategoryRenamed",
      "comment": "Process categories that were renamed in MY program, but are not\n conflicts, i.e., not renamed, moved, or deleted in LATEST.",
      "javadoc": "Process categories that were renamed in MY program, but are not\n conflicts, i.e., not renamed, moved, or deleted in LATEST.\n@param id category ID",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "category ID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processCategoryMoved",
      "comment": "Process categories that were moved in MY program, but are not\n conflicts, i.e., not renamed, moved, or deleted in LATEST.",
      "javadoc": "Process categories that were moved in MY program, but are not\n conflicts, i.e., not renamed, moved, or deleted in LATEST.\n@param id category ID",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "category ID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processCategoryDeleted",
      "comment": "Process categories that were deleted in MY program, but are not\n conflicts, i.e., not renamed, moved, or deleted in LATEST.",
      "javadoc": "Process categories that were deleted in MY program, but are not\n conflicts, i.e., not renamed, moved, or deleted in LATEST.\n@param id category ID",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "category ID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isParent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "catPath",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveCategory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newParent",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        },
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCategoryName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "category",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        },
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDataTypeName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "newName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "categoryWasMoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm1",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        },
        {
          "name": "dtm2",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "categoryWasMoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "categoryWasRenamed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm1",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        },
        {
          "name": "dtm2",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "categoryWasRenamed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeWasMoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeWasMoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm1",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        },
        {
          "name": "dtm2",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeWasRenamed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeWasRenamed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm1",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        },
        {
          "name": "dtm2",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeWasChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeWasChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm1",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        },
        {
          "name": "dtm2",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumDefinedComponents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "c",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compositeDataTypeWasChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "c1",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        },
        {
          "name": "c2",
          "type_long": "ghidra.program.model.data.Composite",
          "type_short": "Composite",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isChangedComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dtc1",
          "type_long": "ghidra.program.model.data.DataTypeComponent",
          "type_short": "DataTypeComponent",
          "comment": ""
        },
        {
          "name": "dtc2",
          "type_long": "ghidra.program.model.data.DataTypeComponent",
          "type_short": "DataTypeComponent",
          "comment": ""
        },
        {
          "name": "dtm1",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        },
        {
          "name": "dtm2",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        },
        {
          "name": "checkOffsets",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeSourceWasChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeSourceWasChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm1",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        },
        {
          "name": "dtm2",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dataTypeWasDeleted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "categoryRenamedOrMoved",
      "comment": "Handle conflicts with name changes; also determine whether the category\n was moved; if so, move the category according to the conflictOption\n selected. Moves are handled here because a rename and a move is\n considered to be a single conflict.",
      "javadoc": "Handle conflicts with name changes; also determine whether the category\n was moved; if so, move the category according to the conflictOption\n selected. Moves are handled here because a rename and a move is\n considered to be a single conflict.\n@param id category ID\n@throws CancelledException if task is cancelled",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "category ID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if task is cancelled"
        }
      ]
    },
    {
      "name": "useOriginalCategoryName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "useMyCategoryName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "categoryDeleted",
      "comment": "Handle conflicts on a category that was deleted in one program, and\n renamed or moved in another program.",
      "javadoc": "Handle conflicts on a category that was deleted in one program, and\n renamed or moved in another program.\n@param id category ID\n@throws CancelledException if operation is cancelled",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "category ID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if operation is cancelled"
        }
      ]
    },
    {
      "name": "deleteLatestCategory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "latestCat",
          "type_long": "ghidra.program.model.data.Category",
          "type_short": "Category",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showArchiveMergePanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "conflictIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showCategoryMergePanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "conflictIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showDataTypeMergePanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "conflictIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "latestDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "myDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "origDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processDataTypesDeleted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processDataTypesAdded",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "equivalentDataTypeFound",
      "comment": "See if there is a data type in the result file that matches My data type based on\n name, path and contents.\n If there is a data type that is the same then return true.",
      "javadoc": "See if there is a data type in the result file that matches My data type based on\n name, path and contents.\n If there is a data type that is the same then return true.\n@param myDtID the database ID (key) for My data type.\n@param myDt My data type.\n@return true if the same named and equivalent data type is found in the result\n data type manager.",
      "static": false,
      "params": [
        {
          "name": "myDtID",
          "type_long": "long",
          "type_short": "long",
          "comment": "the database ID (key) for My data type."
        },
        {
          "name": "myDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "My data type."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the same named and equivalent data type is found in the result\n data type manager."
      },
      "throws": []
    },
    {
      "name": "cleanUpDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixUpDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixUpFunctionDef",
      "comment": "Fix up the function definition using the fix up info for a component.",
      "javadoc": "Fix up the function definition using the fix up info for a component.\n@param info fixup info\n@param fd function definition to be fixed-up\n@return true if fixup successfully processed else false",
      "static": false,
      "params": [
        {
          "name": "info",
          "type_long": "ghidra.app.merge.datatypes.DataTypeMergeManager.FixUpInfo",
          "type_short": "FixUpInfo",
          "comment": "fixup info"
        },
        {
          "name": "fd",
          "type_long": "ghidra.program.model.data.FunctionDefinition",
          "type_short": "FunctionDefinition",
          "comment": "function definition to be fixed-up"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if fixup successfully processed else false"
      },
      "throws": []
    },
    {
      "name": "fixUpAlignedStructureComponent",
      "comment": "Process fixup for aligned structure component",
      "javadoc": "Process fixup for aligned structure component\n@param info fixup info\n@param struct result structure\n@param dt component datatype\n@return false if component not found, else true",
      "static": false,
      "params": [
        {
          "name": "info",
          "type_long": "ghidra.app.merge.datatypes.DataTypeMergeManager.FixUpInfo",
          "type_short": "FixUpInfo",
          "comment": "fixup info"
        },
        {
          "name": "struct",
          "type_long": "ghidra.program.model.data.Structure",
          "type_short": "Structure",
          "comment": "result structure"
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "component datatype"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "false if component not found, else true"
      },
      "throws": []
    },
    {
      "name": "fixUpNonPackedStructureComponent",
      "comment": "Process fixup for non-packed structure component",
      "javadoc": "Process fixup for non-packed structure component\n@param info fixup info\n@param struct result structure\n@param dt component datatype\n@return false if component not found, else true",
      "static": false,
      "params": [
        {
          "name": "info",
          "type_long": "ghidra.app.merge.datatypes.DataTypeMergeManager.FixUpInfo",
          "type_short": "FixUpInfo",
          "comment": "fixup info"
        },
        {
          "name": "struct",
          "type_long": "ghidra.program.model.data.Structure",
          "type_short": "Structure",
          "comment": "result structure"
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "component datatype"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "false if component not found, else true"
      },
      "throws": []
    },
    {
      "name": "fixUpStructure",
      "comment": "Fix up the structure using the fix up info for a component.",
      "javadoc": "Fix up the structure using the fix up info for a component.\n@param info fixup info\n@param struct structure to be fixed-up\n@return true if fixup successfully processed else false",
      "static": false,
      "params": [
        {
          "name": "info",
          "type_long": "ghidra.app.merge.datatypes.DataTypeMergeManager.FixUpInfo",
          "type_short": "FixUpInfo",
          "comment": "fixup info"
        },
        {
          "name": "struct",
          "type_long": "ghidra.program.model.data.Structure",
          "type_short": "Structure",
          "comment": "structure to be fixed-up"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if fixup successfully processed else false"
      },
      "throws": []
    },
    {
      "name": "getNumUndefinedBytes",
      "comment": "Determines the number of contiguous undefined bytes in this structure starting\n at the indicated component ordinal.",
      "javadoc": "Determines the number of contiguous undefined bytes in this structure starting\n at the indicated component ordinal.\n@param struct the structure to check.\n@param ordinal the ordinal of the component where checking for undefined bytes should begin.\n@return the number of contiguous undefined bytes or 0.",
      "static": false,
      "params": [
        {
          "name": "struct",
          "type_long": "ghidra.program.model.data.Structure",
          "type_short": "Structure",
          "comment": "the structure to check."
        },
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": "the ordinal of the component where checking for undefined bytes should begin."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of contiguous undefined bytes or 0."
      },
      "throws": []
    },
    {
      "name": "addToCleanupList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "info",
          "type_long": "ghidra.app.merge.datatypes.DataTypeMergeManager.FixUpInfo",
          "type_short": "FixUpInfo",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixUpUnionComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "union",
          "type_long": "ghidra.program.model.data.Union",
          "type_short": "Union",
          "comment": ""
        },
        {
          "name": "info",
          "type_long": "ghidra.app.merge.datatypes.DataTypeMergeManager.FixUpInfo",
          "type_short": "FixUpInfo",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fixUpUnion",
      "comment": "Fix up the Union by going through all of the fix up info objects that\n have the given ID.",
      "javadoc": "Fix up the Union by going through all of the fix up info objects that\n have the given ID.\n@param id id of the Union\n@param union union that is updated\n@param firstFixupIndex first applicable fixupList entry index\n@param fixupCount total number of fixup entries to be applied\n@param unresolvedFixups list to which unprocessed fixups should be added",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": "id of the Union"
        },
        {
          "name": "union",
          "type_long": "ghidra.program.model.data.Union",
          "type_short": "Union",
          "comment": "union that is updated"
        },
        {
          "name": "firstFixupIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "first applicable fixupList entry index"
        },
        {
          "name": "fixupCount",
          "type_long": "int",
          "type_short": "int",
          "comment": "total number of fixup entries to be applied"
        },
        {
          "name": "unresolvedFixups",
          "type_long": "java.util.ArrayList\u003cghidra.app.merge.datatypes.DataTypeMergeManager.FixUpInfo\u003e",
          "type_short": "ArrayList",
          "comment": "list to which unprocessed fixups should be added"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolve",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        },
        {
          "name": "resolvedDataTypes",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processDataTypeSourceChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processDataTypeRenamed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processDataTypeEdited",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processDataTypeDeleted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "myDtID",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processDataTypeMoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setupSourceArchiveChanges",
      "comment": "Determines myDtChangeList, myDtAddedList, dtConflictList and number of data type conflicts\n - myDtChangeList \u003d My data types that changed and are not in conflict.\n - myDtAddedList \u003d My data types that were added and are not in conflict.\n - dtConflictList \u003d conflicting categories where My and Latest both changed the data type.",
      "javadoc": "Determines myDtChangeList, myDtAddedList, dtConflictList and number of data type conflicts\n \u003cbr\u003e- myDtChangeList \u003d My data types that changed and are not in conflict.\n \u003cbr\u003e- myDtAddedList \u003d My data types that were added and are not in conflict.\n \u003cbr\u003e- dtConflictList \u003d conflicting categories where My and Latest both changed the data type.\n@param latestChanges data type changes for the Latest domain object\n@param myChanges data type changes for My domain object",
      "static": false,
      "params": [
        {
          "name": "latestChanges",
          "type_long": "ghidra.program.model.listing.DataTypeChangeSet",
          "type_short": "DataTypeChangeSet",
          "comment": "data type changes for the Latest domain object"
        },
        {
          "name": "myChanges",
          "type_long": "ghidra.program.model.listing.DataTypeChangeSet",
          "type_short": "DataTypeChangeSet",
          "comment": "data type changes for My domain object"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "determineSourceArchiveChangeConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "latestArchiveChanges",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": ""
        },
        {
          "name": "myArchiveChanges",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "determineSourceArchiveAddConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "latestArchiveAdds",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": ""
        },
        {
          "name": "myArchiveAdds",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadDirtyMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sourceID",
          "type_long": "ghidra.util.UniversalID",
          "type_short": "UniversalID",
          "comment": ""
        },
        {
          "name": "mySourceArchive",
          "type_long": "ghidra.program.model.data.SourceArchive",
          "type_short": "SourceArchive",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setupDataTypeChanges",
      "comment": "Determines myDtChangeList, myDtAddedList, dtConflictList and number of data type conflicts\n - myDtChangeList \u003d My data types that changed and are not in conflict.\n - myDtAddedList \u003d My data types that were added and are not in conflict.\n - dtConflictList \u003d conflicting categories where My and Latest both changed the data type.",
      "javadoc": "Determines myDtChangeList, myDtAddedList, dtConflictList and number of data type conflicts\n \u003cbr\u003e- myDtChangeList \u003d My data types that changed and are not in conflict.\n \u003cbr\u003e- myDtAddedList \u003d My data types that were added and are not in conflict.\n \u003cbr\u003e- dtConflictList \u003d conflicting categories where My and Latest both changed the data type.\n@param latestChanges data type changes for the Latest domain object\n@param myChanges data type changes for My domain object",
      "static": false,
      "params": [
        {
          "name": "latestChanges",
          "type_long": "ghidra.program.model.listing.DataTypeChangeSet",
          "type_short": "DataTypeChangeSet",
          "comment": "data type changes for the Latest domain object"
        },
        {
          "name": "myChanges",
          "type_long": "ghidra.program.model.listing.DataTypeChangeSet",
          "type_short": "DataTypeChangeSet",
          "comment": "data type changes for My domain object"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processAddIDs",
      "comment": "Processes my data types that were added and determines whether each is actually a\n conflict, an added data type, or a changed data type relative to the Latest check in.",
      "javadoc": "Processes my data types that were added and determines whether each is actually a\n conflict, an added data type, or a changed data type relative to the Latest check in.\n@param myDtAdds the data type IDs",
      "static": false,
      "params": [
        {
          "name": "myDtAdds",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": "the data type IDs"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "eliminateFakeConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setupCategoryChanges",
      "comment": "Determines myCatChangeList, myCatAddedList, catConflictList and number of category conflicts\n - myCatChangeList \u003d My categories that changed and are not in conflict.\n - myCatAddedList \u003d Latest categories that changed and are not in conflict.\n - catConflictList \u003d conflicting categories where My and Latest both changed the category.",
      "javadoc": "Determines myCatChangeList, myCatAddedList, catConflictList and number of category conflicts\n \u003cbr\u003e- myCatChangeList \u003d My categories that changed and are not in conflict.\n \u003cbr\u003e- myCatAddedList \u003d Latest categories that changed and are not in conflict.\n \u003cbr\u003e- catConflictList \u003d conflicting categories where My and Latest both changed the category.\n@param latestChanges category changes for the Latest domain object\n@param myChanges category changes for My domain object",
      "static": false,
      "params": [
        {
          "name": "latestChanges",
          "type_long": "ghidra.program.model.listing.DataTypeChangeSet",
          "type_short": "DataTypeChangeSet",
          "comment": "category changes for the Latest domain object"
        },
        {
          "name": "myChanges",
          "type_long": "ghidra.program.model.listing.DataTypeChangeSet",
          "type_short": "DataTypeChangeSet",
          "comment": "category changes for My domain object"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBaseDataType",
      "comment": "Gets the base data type of the specified data type.",
      "javadoc": "Gets the base data type of the specified data type.\n@param dt the data type whose base data type we want.\n@return the base data type",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type whose base data type we want."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the base data type"
      },
      "throws": []
    },
    {
      "name": "resetOption",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showMessage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "msg",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPhases",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[][]",
        "type_short": "java.lang.String[][]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTypeManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataTypeMap",
          "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.program.model.data.DataType\u003e",
          "type_short": "Map",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeManager",
        "type_short": "DataTypeManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponentFixupIndex",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dtc",
          "type_long": "ghidra.program.model.data.DataTypeComponent",
          "type_short": "DataTypeComponent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
