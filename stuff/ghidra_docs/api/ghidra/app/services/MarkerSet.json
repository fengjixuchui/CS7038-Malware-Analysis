{
  "name": "MarkerSet",
  "comment": "Defines methods for working with a set of addresses that correspond to markers.",
  "javadoc": "Defines methods for working with a set of addresses that correspond to markers.\n@see MarkerService",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "fields": [],
  "methods": [
    {
      "name": "add",
      "comment": "Add a marker at the address",
      "javadoc": "Add a marker at the address\n@param addr the address",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Add the range given the start and end of the range",
      "javadoc": "Add the range given the start and end of the range\n@param start the start address\n@param end the end address",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address"
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Add a marker across the address range",
      "javadoc": "Add a marker across the address range\n@param range the addresses",
      "static": false,
      "params": [
        {
          "name": "range",
          "type_long": "ghidra.program.model.address.AddressRange",
          "type_short": "AddressRange",
          "comment": "the addresses"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setAddressSetCollection",
      "comment": "Sets the AddressSetCollection to be used for this this marker set.\n  \n Warning! \n Using this method will cause this MarkerSet to directly use the given AddressSetCollection.\n If the given AddressSetCollection is not an instance of ModifiableAddressSetCollection,\n then the markerSet methods that add and remove addresses will thrown an\n IllegalArgumentException.",
      "javadoc": "Sets the AddressSetCollection to be used for this this marker set.\n  \n \u003cp\u003e\u003cstrong\u003eWarning!\u003c/strong\u003e \n Using this method will cause this MarkerSet to directly use the given AddressSetCollection.\n If the given AddressSetCollection is not an instance of ModifiableAddressSetCollection,\n then the markerSet methods that add and remove addresses will thrown an\n IllegalArgumentException.\n@param set the addressSetCollection to use as this markerSet\u0027s addressSetCollection.",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetCollection",
          "type_short": "AddressSetCollection",
          "comment": "the addressSetCollection to use as this markerSet\u0027s addressSetCollection."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setAddressSet",
      "comment": "Clears the current set off addresses in this markerSet and adds in the addresses\n from the given AddressSet",
      "javadoc": "Clears the current set off addresses in this markerSet and adds in the addresses\n from the given AddressSet\n@param set the set of addresses to use in this marker set",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the set of addresses to use in this marker set"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Add a marker at each address in the given address set",
      "javadoc": "Add a marker at each address in the given address set\n@param addrSet the addresses",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the addresses"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Determine if this marker set contains the specified address",
      "javadoc": "Determine if this marker set contains the specified address\n@param addr address\n@return true if marker set contains addr",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if marker set contains addr"
      },
      "throws": []
    },
    {
      "name": "getAddressSet",
      "comment": "Return the address set for this marker set",
      "javadoc": "Return the address set for this marker set\n@return the addresses",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSet",
        "type_short": "AddressSet",
        "comment": "the addresses"
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Clear any marker at the address",
      "javadoc": "Clear any marker at the address\n@param addr the address",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Clear any marker across the address range",
      "javadoc": "Clear any marker across the address range\n@param range the addresses",
      "static": false,
      "params": [
        {
          "name": "range",
          "type_long": "ghidra.program.model.address.AddressRange",
          "type_short": "AddressRange",
          "comment": "the addresses"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Remove the given range from the marker set",
      "javadoc": "Remove the given range from the marker set\n@param start the start of the range to remove\n@param end the end of the range to remove",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start of the range to remove"
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end of the range to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "Clear any marker at each address in the address set",
      "javadoc": "Clear any marker at each address in the address set\n@param addrSet the addresses",
      "static": false,
      "params": [
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the addresses"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Return the name of this MarkerSet",
      "javadoc": "Return the name of this MarkerSet\n@return the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "clearAll",
      "comment": "Clear all defined markers",
      "javadoc": "Clear all defined markers",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPriority",
      "comment": "Get display priority",
      "javadoc": "Get display priority\n@return the priority",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the priority"
      },
      "throws": []
    },
    {
      "name": "isPreferred",
      "comment": "Gets whether this marker is in the preferred group when determining display priority.\n Typically point markers are in the preferred group and area markers are not.",
      "javadoc": "Gets whether this marker is in the preferred group when determining display priority.\n Typically point markers are in the preferred group and area markers are not.\n@return true if preferred",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if preferred"
      },
      "throws": []
    },
    {
      "name": "setActive",
      "comment": "Return true if this marker set is active",
      "javadoc": "Return true if this marker set is active\n@param state the state",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "the state"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMarkerColor",
      "comment": "Get the color for the marker",
      "javadoc": "Get the color for the marker\n@return the color",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "the color"
      },
      "throws": []
    },
    {
      "name": "setMarkerColor",
      "comment": "Set the color for the marker",
      "javadoc": "Set the color for the marker\n@param color marker color",
      "static": false,
      "params": [
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "marker color"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMarkerDescriptor",
      "comment": "Set the marker manager listener to use for user interaction\n with markers owned by this manager.",
      "javadoc": "Set the marker manager listener to use for user interaction\n with markers owned by this manager.\n@param markerDescriptor the descriptor",
      "static": false,
      "params": [
        {
          "name": "markerDescriptor",
          "type_long": "ghidra.app.services.MarkerDescriptor",
          "type_short": "MarkerDescriptor",
          "comment": "the descriptor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isDisplayedInNavigationBar",
      "comment": "True if this marker manager displays in the right hand navigation bar",
      "javadoc": "True if this marker manager displays in the right hand navigation bar\n@return true if this marker manager displays in the right hand navigation bar",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this marker manager displays in the right hand navigation bar"
      },
      "throws": []
    },
    {
      "name": "displayInMarkerBar",
      "comment": "True if this marker manager displays in the left hand marker bar",
      "javadoc": "True if this marker manager displays in the left hand marker bar\n@return true if this marker manager displays in the left hand marker bar",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this marker manager displays in the left hand marker bar"
      },
      "throws": []
    },
    {
      "name": "isColoringBackground",
      "comment": "Returns true if this MarkerSet is coloring the background in the listing for locations\n contained in this MarkerSet",
      "javadoc": "Returns true if this MarkerSet is coloring the background in the listing for locations\n contained in this MarkerSet\n@return true if coloring background",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if coloring background"
      },
      "throws": []
    },
    {
      "name": "isActive",
      "comment": "Returns true if this MarkerSet is active.  Being \"active\" means that it is displayed\n in the listing",
      "javadoc": "Returns true if this MarkerSet is active.  Being \"active\" means that it is displayed\n in the listing\n@return true if active",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if active"
      },
      "throws": []
    },
    {
      "name": "setColoringBackground",
      "comment": "Sets whether or not the MarkerSet is coloring the background of areas in the listing\n contained in this MarkerSet.",
      "javadoc": "Sets whether or not the MarkerSet is coloring the background of areas in the listing\n contained in this MarkerSet.\n@param b true to color the background.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to color the background."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinAddress",
      "comment": "Returns the minimum Address in this MarkerSet;",
      "javadoc": "Returns the minimum Address in this MarkerSet;\n@return the minimum Address in this MarkerSet;",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the minimum Address in this MarkerSet;"
      },
      "throws": []
    },
    {
      "name": "getMaxAddress",
      "comment": "Returns the maximum Address in this MarkerSet;",
      "javadoc": "Returns the maximum Address in this MarkerSet;\n@return the maximum Address in this MarkerSet;",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the maximum Address in this MarkerSet;"
      },
      "throws": []
    },
    {
      "name": "intersects",
      "comment": "Returns true if any address in this MarkerSet is contained in the range defined by\n start and end.",
      "javadoc": "Returns true if any address in this MarkerSet is contained in the range defined by\n start and end.\n@param start the start address of the range to check for intersection.\n@param end the end address of the range to check for intersection.\n@return true if the set of addresses contained in this MarkerSet intersects the given range.",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the range to check for intersection."
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end address of the range to check for intersection."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the set of addresses contained in this MarkerSet intersects the given range."
      },
      "throws": []
    }
  ]
}
