{
  "name": "EclipseIntegrationService",
  "comment": "Service that provides Eclipse-related functionality.",
  "javadoc": "Service that provides Eclipse-related functionality.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getEclipseIntegrationOptions",
      "comment": "Gets the Eclipse Integration options.",
      "javadoc": "Gets the Eclipse Integration options.\n@return The Eclipse Integration options.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.framework.options.ToolOptions",
        "type_short": "ToolOptions",
        "comment": "The Eclipse Integration options."
      },
      "throws": []
    },
    {
      "name": "getEclipseExecutableFile",
      "comment": "Gets the Eclipse executable file.",
      "javadoc": "Gets the Eclipse executable file.\n@return The Eclipse executable file.\n@throws FileNotFoundException if the executable file does not exist.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "The Eclipse executable file."
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if the executable file does not exist."
        }
      ]
    },
    {
      "name": "getEclipseWorkspaceDir",
      "comment": "Gets the Eclipse workspace directory.  If it is defined, the directory may or may not exist.\n If it is undefined, Eclipse will be in control of selecting a workspace directory to use.",
      "javadoc": "Gets the Eclipse workspace directory.  If it is defined, the directory may or may not exist.\n If it is undefined, Eclipse will be in control of selecting a workspace directory to use.\n@return The Eclipse workspace directory. The directory may or may not exist.  Could return\n   null if the workspace directory is undefined.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "The Eclipse workspace directory. The directory may or may not exist.  Could return\n   null if the workspace directory is undefined."
      },
      "throws": []
    },
    {
      "name": "isEclipseFeatureInstalled",
      "comment": "Checks to see if a feature is installed in Eclipse.",
      "javadoc": "Checks to see if a feature is installed in Eclipse.\n@param filter A filename filter that matches the feature file to check.\n@return True if the specified feature is installed.\n@throws FileNotFoundException if Eclipse is not installed.",
      "static": false,
      "params": [
        {
          "name": "filter",
          "type_long": "java.io.FilenameFilter",
          "type_short": "FilenameFilter",
          "comment": "A filename filter that matches the feature file to check."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if the specified feature is installed."
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": "if Eclipse is not installed."
        }
      ]
    },
    {
      "name": "connectToEclipse",
      "comment": "Attempts to connect to Eclipse on the given port.  This may result in Eclipse\n being launched.  If the launch and/or connection fails, an error message will\n be displayed.",
      "javadoc": "Attempts to connect to Eclipse on the given port.  This may result in Eclipse\n being launched.  If the launch and/or connection fails, an error message will\n be displayed.\n@param port The port to connect to.\n@return The (possibly failed) connection.  Check the status of the {@link EclipseConnection}\n   for details on the connection.",
      "static": false,
      "params": [
        {
          "name": "port",
          "type_long": "int",
          "type_short": "int",
          "comment": "The port to connect to."
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.core.eclipse.EclipseConnection",
        "type_short": "EclipseConnection",
        "comment": "The (possibly failed) connection.  Check the status of the EclipseConnection\n   for details on the connection."
      },
      "throws": []
    },
    {
      "name": "offerGhidraDevInstallation",
      "comment": "Offers to install GhidraDev into Eclipse\u0027s dropins directory.",
      "javadoc": "Offers to install GhidraDev into Eclipse\u0027s dropins directory.\n@param monitor The task monitor used to cancel the installation.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "The task monitor used to cancel the installation."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleEclipseError",
      "comment": "Displays the given Eclipse related error message in an error dialog.",
      "javadoc": "Displays the given Eclipse related error message in an error dialog.\n@param error The error message to display in a dialog.\n@param askAboutOptions True if we should ask the user if they want to be taken to the Eclipse\n   options; otherwise, false.\n@param t An optional throwable to tie to the message.",
      "static": false,
      "params": [
        {
          "name": "error",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The error message to display in a dialog."
        },
        {
          "name": "askAboutOptions",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if we should ask the user if they want to be taken to the Eclipse\n   options; otherwise, false."
        },
        {
          "name": "t",
          "type_long": "java.lang.Throwable",
          "type_short": "Throwable",
          "comment": "An optional throwable to tie to the message."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
