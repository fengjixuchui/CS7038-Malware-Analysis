{
  "name": "FunctionComparisonService",
  "comment": "Allows users to create comparisons between functions which will be displayed\n side-by-side in a FunctionComparisonProvider. Each side in the \n display will allow the user to select one or more functions \n \n Concurrent usage: All work performed by this service will be done on the Swing thread.  \n Further, all calls that do not return a value will be run immediately if the caller is on \n the Swing thread; otherwise, the work will be done on the Swing thread at a later time.  \n Contrastingly, any method on this interface that returns a value will be run immediately,\n regardless of whether the call is on the Swing thread.  Thus, the methods that return a value\n will always be blocking calls; methods that do not return a value may or may not block, \n depending on the client\u0027s thread.",
  "javadoc": "Allows users to create comparisons between functions which will be displayed\n side-by-side in a {@link FunctionComparisonProvider}. Each side in the \n display will allow the user to select one or more functions \n \n \u003cp\u003eConcurrent usage: All work performed by this service will be done on the Swing thread.  \n Further, all calls that do not return a value will be run immediately if the caller is on \n the Swing thread; otherwise, the work will be done on the Swing thread at a later time.  \n Contrastingly, any method on this interface that returns a value will be run immediately,\n regardless of whether the call is on the Swing thread.  Thus, the methods that return a value\n will always be blocking calls; methods that do not return a value may or may not block, \n depending on the client\u0027s thread.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "compareFunctions",
      "comment": "Creates a comparison between a set of functions, where each function\n in the list can be compared against any other.\n \n eg: Given a set of 3 functions (f1, f2, f3), the comparison dialog will\n allow the user to display either f1, f2 or f3 on EITHER side of the\n comparison.\n \n Note that this method will always create a new provider; if you want to \n add functions to an existing comparison, use\n #compareFunctions(Set, FunctionComparisonProvider)\n variant that takes a provider.",
      "javadoc": "Creates a comparison between a set of functions, where each function\n in the list can be compared against any other.\n \u003cp\u003e\n eg: Given a set of 3 functions (f1, f2, f3), the comparison dialog will\n allow the user to display either f1, f2 or f3 on EITHER side of the\n comparison.\n \u003cp\u003e\n Note that this method will always create a new provider; if you want to \n add functions to an existing comparison, use\n {@link #compareFunctions(Set, FunctionComparisonProvider) this}\n variant that takes a provider.\n@param functions the functions to compare\n@return the new comparison provider",
      "static": false,
      "params": [
        {
          "name": "functions",
          "type_long": "java.util.Set\u003cghidra.program.model.listing.Function\u003e",
          "type_short": "Set",
          "comment": "the functions to compare"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.core.functioncompare.FunctionComparisonProvider",
        "type_short": "FunctionComparisonProvider",
        "comment": "the new comparison provider"
      },
      "throws": []
    },
    {
      "name": "compareFunctions",
      "comment": "Creates a comparison between two functions, where the source function\n will be shown on the left side of the comparison dialog and the target \n on the right. \n \n Note that this will always create a new provider; if you want to add \n functions to an existing comparison, use \n #compareFunctions(Function, Function, FunctionComparisonProvider)\n variant that takes a provider.",
      "javadoc": "Creates a comparison between two functions, where the source function\n will be shown on the left side of the comparison dialog and the target \n on the right. \n \u003cp\u003e\n Note that this will always create a new provider; if you want to add \n functions to an existing comparison, use \n {@link #compareFunctions(Function, Function, FunctionComparisonProvider) this}\n variant that takes a provider.\n@param source a function in the comparison\n@param target a function in the comparison\n@return the new comparison provider",
      "static": false,
      "params": [
        {
          "name": "source",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "a function in the comparison"
        },
        {
          "name": "target",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "a function in the comparison"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.core.functioncompare.FunctionComparisonProvider",
        "type_short": "FunctionComparisonProvider",
        "comment": "the new comparison provider"
      },
      "throws": []
    },
    {
      "name": "compareFunctions",
      "comment": "Creates a comparison between a set of functions, adding them to the \n given comparison provider. Each function in the given set will be added \n to both sides of the comparison, allowing users to compare any functions\n in the existing provider with the new set.",
      "javadoc": "Creates a comparison between a set of functions, adding them to the \n given comparison provider. Each function in the given set will be added \n to both sides of the comparison, allowing users to compare any functions\n in the existing provider with the new set.\n@see #compareFunctions(Set)\n@param functions the functions to compare\n@param provider the provider to add the comparisons to",
      "static": false,
      "params": [
        {
          "name": "functions",
          "type_long": "java.util.Set\u003cghidra.program.model.listing.Function\u003e",
          "type_short": "Set",
          "comment": "the functions to compare"
        },
        {
          "name": "provider",
          "type_long": "ghidra.app.plugin.core.functioncompare.FunctionComparisonProvider",
          "type_short": "FunctionComparisonProvider",
          "comment": "the provider to add the comparisons to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareFunctions",
      "comment": "Creates a comparison between two functions and adds it to a given\n comparison provider. The existing comparisons in the provider will not\n be affected, unless the provider already contains a comparison with \n the same source function; in this case the given target will be added\n to that comparisons\u0027 list of targets.",
      "javadoc": "Creates a comparison between two functions and adds it to a given\n comparison provider. The existing comparisons in the provider will not\n be affected, unless the provider already contains a comparison with \n the same source function; in this case the given target will be added\n to that comparisons\u0027 list of targets.\n@see #compareFunctions(Function, Function)\n@param source a function in the comparison\n@param target a function in the comparison\n@param provider the provider to add the comparison to",
      "static": false,
      "params": [
        {
          "name": "source",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "a function in the comparison"
        },
        {
          "name": "target",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "a function in the comparison"
        },
        {
          "name": "provider",
          "type_long": "ghidra.app.plugin.core.functioncompare.FunctionComparisonProvider",
          "type_short": "FunctionComparisonProvider",
          "comment": "the provider to add the comparison to"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeFunction",
      "comment": "Removes a given function from all comparisons across all comparison \n providers",
      "javadoc": "Removes a given function from all comparisons across all comparison \n providers\n@param function the function to remove",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeFunction",
      "comment": "Removes a given function from all comparisons in the given comparison\n provider only",
      "javadoc": "Removes a given function from all comparisons in the given comparison\n provider only\n@param function the function to remove\n@param provider the comparison provider to remove functions from",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function to remove"
        },
        {
          "name": "provider",
          "type_long": "ghidra.app.plugin.core.functioncompare.FunctionComparisonProvider",
          "type_short": "FunctionComparisonProvider",
          "comment": "the comparison provider to remove functions from"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addFunctionComparisonProviderListener",
      "comment": "Adds the given listener to the list of subscribers who wish to be \n notified of provider activation events (eg: provider open/close)",
      "javadoc": "Adds the given listener to the list of subscribers who wish to be \n notified of provider activation events (eg: provider open/close)\n@param listener the listener to be added",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "docking.ComponentProviderActivationListener",
          "type_short": "ComponentProviderActivationListener",
          "comment": "the listener to be added"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeFunctionComparisonProviderListener",
      "comment": "Removes a listener from the list of provider activation event subscribers",
      "javadoc": "Removes a listener from the list of provider activation event subscribers\n@param listener the listener to remove",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "docking.ComponentProviderActivationListener",
          "type_short": "ComponentProviderActivationListener",
          "comment": "the listener to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
