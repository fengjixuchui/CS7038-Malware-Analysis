{
  "name": "GraphDisplayBroker",
  "comment": "Ghidra service interface for managing and directing graph output.  It purpose is to discover\n available graphing display providers and (if more than one) allow the user to select the currently\n active graph consumer.  Clients that generate graphs don\u0027t have to worry about how to display them\n or export graphs. They simply send their graphs to the broker and register for graph events if\n they want interactive support.",
  "javadoc": "Ghidra service interface for managing and directing graph output.  It purpose is to discover\n available graphing display providers and (if more than one) allow the user to select the currently\n active graph consumer.  Clients that generate graphs don\u0027t have to worry about how to display them\n or export graphs. They simply send their graphs to the broker and register for graph events if\n they want interactive support.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getDefaultGraphDisplayProvider",
      "comment": "Gets the currently active GraphDisplayProvider that will be used to display/export graphs",
      "javadoc": "Gets the currently active GraphDisplayProvider that will be used to display/export graphs\n@return the currently active GraphDisplayProvider",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.service.graph.GraphDisplayProvider",
        "type_short": "GraphDisplayProvider",
        "comment": "the currently active GraphDisplayProvider"
      },
      "throws": []
    },
    {
      "name": "addGraphDisplayBrokerListener",
      "comment": "Adds a listener for notification when the set of graph display providers change or the currently\n active graph display provider changes",
      "javadoc": "Adds a listener for notification when the set of graph display providers change or the currently\n active graph display provider changes\n@param listener the listener to be notified",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.app.plugin.core.graph.GraphDisplayBrokerListener",
          "type_short": "GraphDisplayBrokerListener",
          "comment": "the listener to be notified"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeGraphDisplayBrokerLisetener",
      "comment": "Removes the given listener",
      "javadoc": "Removes the given listener\n@param listener the listener to no longer be notified of changes",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.app.plugin.core.graph.GraphDisplayBrokerListener",
          "type_short": "GraphDisplayBrokerListener",
          "comment": "the listener to no longer be notified of changes"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultGraphDisplay",
      "comment": "A convenience method for getting a GraphDisplay from the currently active provider",
      "javadoc": "A convenience method for getting a {@link GraphDisplay} from the currently active provider\n@param reuseGraph if true, the provider will attempt to re-use a current graph display\n@param monitor the {@link TaskMonitor} that can be used to cancel the operation\n@return a {@link GraphDisplay} object to sends graphs to be displayed or exported.\n@throws GraphException thrown if an error occurs trying to get a graph display",
      "static": false,
      "params": [
        {
          "name": "reuseGraph",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the provider will attempt to re-use a current graph display"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the TaskMonitor that can be used to cancel the operation"
        }
      ],
      "return": {
        "type_long": "ghidra.service.graph.GraphDisplay",
        "type_short": "GraphDisplay",
        "comment": "a GraphDisplay object to sends graphs to be displayed or exported."
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.GraphException",
          "type_short": "GraphException",
          "comment": "thrown if an error occurs trying to get a graph display"
        }
      ]
    },
    {
      "name": "hasDefaultGraphDisplayProvider",
      "comment": "Checks if there is at least one GraphDisplayProvider in the system.",
      "javadoc": "Checks if there is at least one {@link GraphDisplayProvider} in the system.\n@return true if there is at least one {@link GraphDisplayProvider}",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there is at least one GraphDisplayProvider"
      },
      "throws": []
    },
    {
      "name": "getGraphDisplayProvider",
      "comment": "Gets the GraphDisplayProvider with the given name",
      "javadoc": "Gets the {@link GraphDisplayProvider} with the given name\n@param name the name of the GraphDisplayProvider to get\n@return the GraphDisplayProvider with the given name or null if none with that name exists.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the GraphDisplayProvider to get"
        }
      ],
      "return": {
        "type_long": "ghidra.service.graph.GraphDisplayProvider",
        "type_short": "GraphDisplayProvider",
        "comment": "the GraphDisplayProvider with the given name or null if none with that name exists."
      },
      "throws": []
    },
    {
      "name": "getGraphExporters",
      "comment": "Returns a list of all discovered AttributedGraphExporter.",
      "javadoc": "Returns a list of all discovered {@link AttributedGraphExporter}.\n@return a list of all discovered {@link AttributedGraphExporter}.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.service.graph.AttributedGraphExporter\u003e",
        "type_short": "List",
        "comment": "a list of all discovered AttributedGraphExporter."
      },
      "throws": []
    },
    {
      "name": "getGraphExporters",
      "comment": "Returns the AttributedGraphExporter with the given name or null in no exporter with\n that name is known",
      "javadoc": "Returns the {@link AttributedGraphExporter} with the given name or null in no exporter with\n that name is known\n@param name the name of the exporter to retrieve\n@return the {@link AttributedGraphExporter} with the given name or null if no exporter with\n that name is known",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the exporter to retrieve"
        }
      ],
      "return": {
        "type_long": "ghidra.service.graph.AttributedGraphExporter",
        "type_short": "AttributedGraphExporter",
        "comment": "the AttributedGraphExporter with the given name or null if no exporter with\n that name is known"
      },
      "throws": []
    }
  ]
}
