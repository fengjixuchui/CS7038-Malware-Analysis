{
  "name": "FunctionComparisonModel",
  "comment": "A collection of FunctionComparison \n objects that describe how functions may be compared. Each comparison object\n is a mapping of a function (source) to a list of functions (targets). \n \n This model is intended to be used by the FunctionComparisonProvider \n as the basis for its display. It should never be created manually, and should\n only be accessed via the FunctionComparisonService. \n \n Note: Subscribers may register to be informed of changes to this model via the\n FunctionComparisonModelListener interface.",
  "javadoc": "A collection of {@link FunctionComparison function comparison} \n objects that describe how functions may be compared. Each comparison object\n is a mapping of a function (source) to a list of functions (targets). \n \u003cp\u003e\n This model is intended to be used by the {@link FunctionComparisonProvider} \n as the basis for its display. It should never be created manually, and should\n only be accessed via the {@link FunctionComparisonService}. \n \u003cp\u003e\n Note: Subscribers may register to be informed of changes to this model via the\n {@link FunctionComparisonModelListener comparison model listener} interface.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "comparisons",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.plugin.core.functioncompare.FunctionComparison\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "listeners",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.plugin.core.functioncompare.FunctionComparisonModelListener\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addFunctionComparisonModelListener",
      "comment": "Adds the given subscriber to the list of those to be notified of model\n changes",
      "javadoc": "Adds the given subscriber to the list of those to be notified of model\n changes\n@param listener the model change subscriber",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.app.plugin.core.functioncompare.FunctionComparisonModelListener",
          "type_short": "FunctionComparisonModelListener",
          "comment": "the model change subscriber"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComparisons",
      "comment": "Returns a list of all comparisons in the model, in sorted order by \n source function name",
      "javadoc": "Returns a list of all comparisons in the model, in sorted order by \n source function name\n@return a list of all comparisons in the model",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.plugin.core.functioncompare.FunctionComparison\u003e",
        "type_short": "List",
        "comment": "a list of all comparisons in the model"
      },
      "throws": []
    },
    {
      "name": "setComparisons",
      "comment": "Replaces the current model with the comparisons provided",
      "javadoc": "Replaces the current model with the comparisons provided\n@param comparisons the new comparison model",
      "static": false,
      "params": [
        {
          "name": "comparisons",
          "type_long": "java.util.List\u003cghidra.app.plugin.core.functioncompare.FunctionComparison\u003e",
          "type_short": "List",
          "comment": "the new comparison model"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addComparison",
      "comment": "Adds a single comparison to the model",
      "javadoc": "Adds a single comparison to the model\n@param comparison the comparison to add",
      "static": false,
      "params": [
        {
          "name": "comparison",
          "type_long": "ghidra.app.plugin.core.functioncompare.FunctionComparison",
          "type_short": "FunctionComparison",
          "comment": "the comparison to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTargets",
      "comment": "Returns a list of all targets in the model (across all comparisons) for\n a given source function",
      "javadoc": "Returns a list of all targets in the model (across all comparisons) for\n a given source function\n@param source the source function\n@return list of associated target functions",
      "static": false,
      "params": [
        {
          "name": "source",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the source function"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.listing.Function\u003e",
        "type_short": "Set",
        "comment": "list of associated target functions"
      },
      "throws": []
    },
    {
      "name": "compareFunctions",
      "comment": "Updates the model with a set of functions to compare. This will add the\n functions to any existing FunctionComparison in the \n model and create new comparisons for functions not represented.\n \n Note: It is assumed that when using this method, all functions can be\n compared with all other functions; meaning each function will be added as \n both a source AND a target. To specify a specific source/target\n relationship, use #compareFunctions(Function, Function).",
      "javadoc": "Updates the model with a set of functions to compare. This will add the\n functions to any existing {@link FunctionComparison comparisons} in the \n model and create new comparisons for functions not represented.\n \u003cp\u003e\n Note: It is assumed that when using this method, all functions can be\n compared with all other functions; meaning each function will be added as \n both a source AND a target. To specify a specific source/target\n relationship, use {@link #compareFunctions(Function, Function)}.\n@param functions the set of functions to compare",
      "static": false,
      "params": [
        {
          "name": "functions",
          "type_long": "java.util.Set\u003cghidra.program.model.listing.Function\u003e",
          "type_short": "Set",
          "comment": "the set of functions to compare"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareFunctions",
      "comment": "Compares two functions. If a comparison already exists in the model for\n the given source, the target will simply be added to it; otherwise a\n new comparison will be created.",
      "javadoc": "Compares two functions. If a comparison already exists in the model for\n the given source, the target will simply be added to it; otherwise a\n new comparison will be created.\n@param source the source function\n@param target the target function",
      "static": false,
      "params": [
        {
          "name": "source",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the source function"
        },
        {
          "name": "target",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the target function"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeFunction",
      "comment": "Removes the given function from all comparisons in the model, whether\n stored as a source or target",
      "javadoc": "Removes the given function from all comparisons in the model, whether\n stored as a source or target\n@param function the function to remove",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeFunctions",
      "comment": "Removes all functions in the model that come from the given\n program",
      "javadoc": "Removes all functions in the model that come from the given\n program\n@param program the program to remove functions from",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to remove functions from"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSourceFunctions",
      "comment": "Returns all source functions in the model",
      "javadoc": "Returns all source functions in the model\n@return a set of all source functions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.listing.Function\u003e",
        "type_short": "Set",
        "comment": "a set of all source functions"
      },
      "throws": []
    },
    {
      "name": "getTargetFunctions",
      "comment": "Returns all target functions in the model",
      "javadoc": "Returns all target functions in the model\n@return a set of all target functions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.listing.Function\u003e",
        "type_short": "Set",
        "comment": "a set of all target functions"
      },
      "throws": []
    },
    {
      "name": "getTargetFunctions",
      "comment": "Returns a set of all target functions for a given source",
      "javadoc": "Returns a set of all target functions for a given source\n@param source the source function to search for\n@return the set of associated target functions",
      "static": false,
      "params": [
        {
          "name": "source",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the source function to search for"
        }
      ],
      "return": {
        "type_long": "java.util.Set\u003cghidra.program.model.listing.Function\u003e",
        "type_short": "Set",
        "comment": "the set of associated target functions"
      },
      "throws": []
    },
    {
      "name": "createNewComparisons",
      "comment": "Creates a FunctionComparison for each function\n given, such that each comparison will have every other function as its \n targets. For example, given three functions, f1, f2, and f3, this is what the\n model will look like after this call:\n comparison 1:\n    \n     source: f1\n     targets: f2, f3\n    \n comparison 2:\n    \n     source: f2\n     targets: f1, f3\n    \n comparison 3:\n    \n     source: f3\n     targets: f1, f2\n    \n   \n If this model already contains a comparison for a given function \n (meaning the model contains a comparison with the function as the \n source) then that function is skipped. \n \n Note that this could be a long-running process if many (thousands) \n functions are chosen to compare, hence the monitored task. In practice \n this should never be the case, as users will likely not be\n comparing more than a handful of functions at any given time.",
      "javadoc": "Creates a {@link FunctionComparison comparison} for each function\n given, such that each comparison will have every other function as its \n targets. For example, given three functions, f1, f2, and f3, this is what the\n model will look like after this call:\n \u003cli\u003ecomparison 1:\u003c/li\u003e\n    \u003cul\u003e\n    \u003cli\u003e source: f1\u003c/li\u003e\n    \u003cli\u003e targets: f2, f3\u003c/li\u003e\n    \u003c/ul\u003e\n \u003cli\u003ecomparison 2:\u003c/li\u003e\n    \u003cul\u003e\n    \u003cli\u003e source: f2\u003c/li\u003e\n    \u003cli\u003e targets: f1, f3\u003c/li\u003e\n    \u003c/ul\u003e\n \u003cli\u003ecomparison 3:\u003c/li\u003e\n    \u003cul\u003e\n    \u003cli\u003e source: f3\u003c/li\u003e\n    \u003cli\u003e targets: f1, f2\u003c/li\u003e\n    \u003c/ul\u003e\n   \n If this model already contains a comparison for a given function \n (meaning the model contains a comparison with the function as the \n source) then that function is skipped. \n \u003cp\u003e\n Note that this could be a long-running process if many (thousands) \n functions are chosen to compare, hence the monitored task. In practice \n this should never be the case, as users will likely not be\n comparing more than a handful of functions at any given time.\n@param functions the set of functions to create comparisons for",
      "static": false,
      "params": [
        {
          "name": "functions",
          "type_long": "java.util.Set\u003cghidra.program.model.listing.Function\u003e",
          "type_short": "Set",
          "comment": "the set of functions to create comparisons for"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOrCreateComparison",
      "comment": "Searches the model for a comparison that has the given function as its\n source; if not found, a new comparison is created",
      "javadoc": "Searches the model for a comparison that has the given function as its\n source; if not found, a new comparison is created\n@param source the source function to search for\n@return a function comparison object for the given source",
      "static": false,
      "params": [
        {
          "name": "source",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the source function to search for"
        }
      ],
      "return": {
        "type_long": "ghidra.app.plugin.core.functioncompare.FunctionComparison",
        "type_short": "FunctionComparison",
        "comment": "a function comparison object for the given source"
      },
      "throws": []
    },
    {
      "name": "addToExistingComparisons",
      "comment": "Adds a given set of functions to every target list in every \n comparison in the model",
      "javadoc": "Adds a given set of functions to every target list in every \n comparison in the model\n@param functions the functions to add",
      "static": false,
      "params": [
        {
          "name": "functions",
          "type_long": "java.util.Set\u003cghidra.program.model.listing.Function\u003e",
          "type_short": "Set",
          "comment": "the functions to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fireModelChanged",
      "comment": "Sends model-change notifications to all subscribers. The updated model\n is sent in the callback.",
      "javadoc": "Sends model-change notifications to all subscribers. The updated model\n is sent in the callback.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
