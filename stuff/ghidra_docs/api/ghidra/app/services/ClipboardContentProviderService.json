{
  "name": "ClipboardContentProviderService",
  "comment": "Determines what types of transfer data can be placed on the clipboard, as well as if \n cut, copy, and paste operations are supported",
  "javadoc": "Determines what types of transfer data can be placed on the clipboard, as well as if \n cut, copy, and paste operations are supported",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "getComponentProvider",
      "comment": "Returns the component provider associated with this service",
      "javadoc": "Returns the component provider associated with this service\n@return the provider",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.ComponentProvider",
        "type_short": "ComponentProvider",
        "comment": "the provider"
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "Triggers the default copy operation",
      "javadoc": "Triggers the default copy operation\n@param monitor monitor that shows progress of the copy to clipboard, and\n may be canceled\n@return the created transferable; null if the copy was unsuccessful",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "monitor that shows progress of the copy to clipboard, and\n may be canceled"
        }
      ],
      "return": {
        "type_long": "java.awt.datatransfer.Transferable",
        "type_short": "Transferable",
        "comment": "the created transferable; null if the copy was unsuccessful"
      },
      "throws": []
    },
    {
      "name": "copySpecial",
      "comment": "Triggers a special copy with the specified copy type.",
      "javadoc": "Triggers a special copy with the specified copy type.\n@param copyType contains the data flavor of the clipboard contents\n@param monitor monitor that shows progress of the copy to clipboard, and\n may be canceled\n@return the created transferable; null if the copy was unsuccessful",
      "static": false,
      "params": [
        {
          "name": "copyType",
          "type_long": "ghidra.app.util.ClipboardType",
          "type_short": "ClipboardType",
          "comment": "contains the data flavor of the clipboard contents"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "monitor that shows progress of the copy to clipboard, and\n may be canceled"
        }
      ],
      "return": {
        "type_long": "java.awt.datatransfer.Transferable",
        "type_short": "Transferable",
        "comment": "the created transferable; null if the copy was unsuccessful"
      },
      "throws": []
    },
    {
      "name": "paste",
      "comment": "Triggers the default paste operation for the given transferable",
      "javadoc": "Triggers the default paste operation for the given transferable\n@param pasteData the paste transferable\n@return true of the paste was successful",
      "static": false,
      "params": [
        {
          "name": "pasteData",
          "type_long": "java.awt.datatransfer.Transferable",
          "type_short": "Transferable",
          "comment": "the paste transferable"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true of the paste was successful"
      },
      "throws": []
    },
    {
      "name": "getCurrentCopyTypes",
      "comment": "Gets the currently active ClipboardTypes for copying with the current context",
      "javadoc": "Gets the currently active ClipboardTypes for copying with the current context\n@return the types",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.ClipboardType\u003e",
        "type_short": "List",
        "comment": "the types"
      },
      "throws": []
    },
    {
      "name": "isValidContext",
      "comment": "Return whether the given context is valid for actions on popup menus.",
      "javadoc": "Return whether the given context is valid for actions on popup menus.\n@param context the context of where the popup menu will be positioned.\n@return true if valid",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": "the context of where the popup menu will be positioned."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if valid"
      },
      "throws": []
    },
    {
      "name": "enableCopy",
      "comment": "Returns true if copy should be enabled; false if it should be disabled.  This method can\n be used in conjunction with #copy(TaskMonitor) in order to add menu items to\n popup menus but to have them enabled when appropriate.",
      "javadoc": "Returns true if copy should be enabled; false if it should be disabled.  This method can\n be used in conjunction with {@link #copy(TaskMonitor)} in order to add menu items to\n popup menus but to have them enabled when appropriate.\n@return true if copy should be enabled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if copy should be enabled"
      },
      "throws": []
    },
    {
      "name": "enableCopySpecial",
      "comment": "Returns true if copySpecial actions should be enabled;",
      "javadoc": "Returns true if copySpecial actions should be enabled;\n@return true if copySpecial actions should be enabled;",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if copySpecial actions should be enabled;"
      },
      "throws": []
    },
    {
      "name": "enablePaste",
      "comment": "Returns true if paste should be enabled; false if it should be disabled.  This method can\n be used in conjunction with #paste(Transferable) in order to add menu items to\n popup menus but to have them enabled when appropriate.",
      "javadoc": "Returns true if paste should be enabled; false if it should be disabled.  This method can\n be used in conjunction with {@link #paste(Transferable)} in order to add menu items to\n popup menus but to have them enabled when appropriate.\n@return true if paste should be enabled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if paste should be enabled"
      },
      "throws": []
    },
    {
      "name": "lostOwnership",
      "comment": "Notification that the clipboard owner has lost its ownership.",
      "javadoc": "Notification that the clipboard owner has lost its ownership.\n@param transferable the contents which the owner had placed on the clipboard",
      "static": false,
      "params": [
        {
          "name": "transferable",
          "type_long": "java.awt.datatransfer.Transferable",
          "type_short": "Transferable",
          "comment": "the contents which the owner had placed on the clipboard"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addChangeListener",
      "comment": "Adds a change listener that will be notified when the state of the service provider changes\n such that the ability to perform some actions has changed.  For example, the given\n listener will be called when a copy action can be performed when it was previously not\n possible.",
      "javadoc": "Adds a change listener that will be notified when the state of the service provider changes\n such that the ability to perform some actions has changed.  For example, the given\n listener will be called when a copy action can be performed when it was previously not\n possible.\n@param listener The listener to add.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "The listener to add."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeChangeListener",
      "comment": "Removes the given change listener.",
      "javadoc": "Removes the given change listener.\n@param listener The listener to remove.\n@see #addChangeListener(ChangeListener)",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "The listener to remove."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "canPaste",
      "comment": "Returns true if the service can perform a paste operation using the given transferable.",
      "javadoc": "Returns true if the service can perform a paste operation using the given transferable.\n@param availableFlavors data flavors available for the current clipboard transferable\n@return true if the service can perform a paste operation using the given transferable.",
      "static": false,
      "params": [
        {
          "name": "availableFlavors",
          "type_long": "java.awt.datatransfer.DataFlavor[]",
          "type_short": "java.awt.datatransfer.DataFlavor[]",
          "comment": "data flavors available for the current clipboard transferable"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the service can perform a paste operation using the given transferable."
      },
      "throws": []
    },
    {
      "name": "canCopy",
      "comment": "Returns true if the given service provider can currently perform a copy operation.",
      "javadoc": "Returns true if the given service provider can currently perform a copy operation.\n@return true if the given service provider can currently perform a copy operation.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the given service provider can currently perform a copy operation."
      },
      "throws": []
    },
    {
      "name": "canCopySpecial",
      "comment": "Returns true if the given service provider can currently perform a \u0027copy special\u0027 \n operation.",
      "javadoc": "Returns true if the given service provider can currently perform a \u0027copy special\u0027 \n operation.\n@return true if copy special is enabled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if copy special is enabled"
      },
      "throws": []
    }
  ]
}
