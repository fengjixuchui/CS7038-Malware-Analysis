{
  "name": "MarkerService",
  "comment": "\n Service to manage navigation markers displayed around a scrollable window like the Listing.\n The navigation bar displays the general location of markers for the entire view. The marker bar\n displays a marker at each marked address visible within the view.\n \n \n The interface defines priorities for display of markers in Marker Margin and colored bars in\n Navigation Margin. The higher the priority, the more likely the marker/bar will be displayed on\n the top. Areas will always be lower than marker priorities.\n \n  Recommended Usage\n Recommended Usage\n The service used to work independently of Programs.  In order to work effectively this\n service has been changed to associate created markers with individual programs.  Thus, it is\n up to the clients of this class perform lifecycle management of markers created by this\n service.  For example, a client that creates a marker from\n #createAreaMarker(String, String, Program, int, boolean, boolean, boolean, Color) should \n call #removeMarker(MarkerSet, Program) when the markers are no longer used, such as when\n a program has become deactivated.  In this example usage markers are added and removed as the\n user tabs through open programs.",
  "javadoc": "\u003cp\u003e\n Service to manage navigation markers displayed around a scrollable window like the Listing.\n The navigation bar displays the general location of markers for the entire view. The marker bar\n displays a marker at each marked address visible within the view.\n \u003c/p\u003e\n \u003cp\u003e\n The interface defines priorities for display of markers in Marker Margin and colored bars in\n Navigation Margin. The higher the priority, the more likely the marker/bar will be displayed on\n the top. Areas will always be lower than marker priorities.\n \u003c/p\u003e\n \u003ca name\u003d\"usage\"\u003e\u003c/a\u003e \u003cu\u003eRecommended Usage\u003c/u\u003e\u003cbr\u003e\n \u003cu\u003eRecommended Usage\u003c/u\u003e\u003cbr\u003e\n The service used to work independently of {@link Program}s.  In order to work effectively this\n service has been changed to associate created markers with individual programs.  Thus, it is\n up to the clients of this class perform lifecycle management of markers created by this\n service.  For example, a client that creates a marker from\n {@link #createAreaMarker(String, String, Program, int, boolean, boolean, boolean, Color)} should \n call {@link #removeMarker(MarkerSet, Program)} when the markers are no longer used, such as when\n a program has become deactivated.  In this example usage markers are added and removed as the\n user tabs through open programs.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "SELECTION_PRIORITY",
      "comment": "Display priority for marking the selection.",
      "javadoc": "Display priority for marking the selection.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "100"
    },
    {
      "name": "HIGHLIGHT_PRIORITY",
      "comment": "Display priority for marking the highlight.",
      "javadoc": "Display priority for marking the highlight.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "50"
    },
    {
      "name": "CHANGE_PRIORITY",
      "comment": "Display priority for marking a change set.",
      "javadoc": "Display priority for marking a change set.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-50"
    },
    {
      "name": "GROUP_PRIORITY",
      "comment": "Display priority for marking a change set for members in a group.",
      "javadoc": "Display priority for marking a change set for members in a group.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-25"
    },
    {
      "name": "CURSOR_PRIORITY",
      "comment": "Display priority for marking the cursor location.",
      "javadoc": "Display priority for marking the cursor location.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "200"
    },
    {
      "name": "FUNCTION_COMPARE_CURSOR_PRIORITY",
      "comment": "Display priority for marking the cursor location.",
      "javadoc": "Display priority for marking the cursor location.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "49"
    },
    {
      "name": "SEARCH_PRIORITY",
      "comment": "Display priority for marking locations of search hits.",
      "javadoc": "Display priority for marking locations of search hits.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "75"
    },
    {
      "name": "BREAKPOINT_PRIORITY",
      "comment": "Display priority for marking locations of breakpoints.",
      "javadoc": "Display priority for marking locations of breakpoints.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "50"
    },
    {
      "name": "BOOKMARK_PRIORITY",
      "comment": "Display priority for bookmark locations.",
      "javadoc": "Display priority for bookmark locations.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "PROPERTY_PRIORITY",
      "comment": "Display priority for marking locations where a property exists.",
      "javadoc": "Display priority for marking locations where a property exists.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "75"
    },
    {
      "name": "DIFF_PRIORITY",
      "comment": "Display priority for marking locations where a program diff difference exists.",
      "javadoc": "Display priority for marking locations where a program diff difference exists.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "80"
    },
    {
      "name": "REFERENCE_PRIORITY",
      "comment": "Display priority for marking references.",
      "javadoc": "Display priority for marking references.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-10"
    },
    {
      "name": "HIGHLIGHT_GROUP",
      "comment": "A group name for highlights.  This is intended to be used with\n #setMarkerForGroup(String, MarkerSet, Program) and\n #removeMarkerForGroup(String, MarkerSet, Program)",
      "javadoc": "A group name for highlights.  This is intended to be used with\n {@link #setMarkerForGroup(String, MarkerSet, Program)} and\n {@link #removeMarkerForGroup(String, MarkerSet, Program)}",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"HIGHLIGHT_GROUP\""
    }
  ],
  "methods": [
    {
      "name": "createAreaMarker",
      "comment": "Create a Marker display which shows area type markers.",
      "javadoc": "Create a Marker display which shows area type markers.\n@param name name of the navigation markers\n@param markerDescription description of the navigation markers\n@param program The program with which the created markers will be associated.\n@param priority to sort out what displays on top, higher is more likely to be on top\n@param showMarkers true indicates to show area markers (on the left side of the browser.)\n@param showNavigation true indicates to show area navigation markers (on the right side of the browser.)\n@param colorBackground if true, then the browser\u0027s background color will reflect the marker.\n@param color the color of marked areas.\n@return set of navigation markers",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the navigation markers"
        },
        {
          "name": "markerDescription",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "description of the navigation markers"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program with which the created markers will be associated."
        },
        {
          "name": "priority",
          "type_long": "int",
          "type_short": "int",
          "comment": "to sort out what displays on top, higher is more likely to be on top"
        },
        {
          "name": "showMarkers",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates to show area markers (on the left side of the browser.)"
        },
        {
          "name": "showNavigation",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates to show area navigation markers (on the right side of the browser.)"
        },
        {
          "name": "colorBackground",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, then the browser\u0027s background color will reflect the marker."
        },
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the color of marked areas."
        }
      ],
      "return": {
        "type_long": "ghidra.app.services.MarkerSet",
        "type_short": "MarkerSet",
        "comment": "set of navigation markers"
      },
      "throws": []
    },
    {
      "name": "createAreaMarker",
      "comment": "Create a Marker display which shows area type markers.",
      "javadoc": "Create a Marker display which shows area type markers.\n@param name name of the navigation markers\n@param markerDescription description of the navigation markers\n@param program The program with which the created markers will be associated.\n@param priority to sort out what displays on top, higher is more likely to be on top\n@param showMarkers true indicates to show area markers (on the left side of the browser.)\n@param showNavigation true indicates to show area navigation markers (on the right side of the browser.)\n@param colorBackground if true, then the browser\u0027s background color will reflect the marker.\n@param color the color of marked areas.\n@param isPreferred true indicates higher priority than all non-preferred MarkerSets\n@return set of navigation markers",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the navigation markers"
        },
        {
          "name": "markerDescription",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "description of the navigation markers"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program with which the created markers will be associated."
        },
        {
          "name": "priority",
          "type_long": "int",
          "type_short": "int",
          "comment": "to sort out what displays on top, higher is more likely to be on top"
        },
        {
          "name": "showMarkers",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates to show area markers (on the left side of the browser.)"
        },
        {
          "name": "showNavigation",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates to show area navigation markers (on the right side of the browser.)"
        },
        {
          "name": "colorBackground",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, then the browser\u0027s background color will reflect the marker."
        },
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the color of marked areas."
        },
        {
          "name": "isPreferred",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates higher priority than all non-preferred MarkerSets"
        }
      ],
      "return": {
        "type_long": "ghidra.app.services.MarkerSet",
        "type_short": "MarkerSet",
        "comment": "set of navigation markers"
      },
      "throws": []
    },
    {
      "name": "createPointMarker",
      "comment": "Create a Marker display which shows point type markers.",
      "javadoc": "Create a Marker display which shows point type markers.\n@param name name of the navigation markers\n@param markerDescription description of the navigation markers\n@param program The program with which the created markers will be associated.\n@param priority to sort out what displays on top, higher is more likely to be on top\n@param showMarkers true indicates to show area markers (on the left side of the browser.)\n@param showNavigation true indicates to show area navigation markers (on the right side of the browser.)\n@param colorBackground if true, then the browser\u0027s background color will reflect the marker.\n@param color the color of marked areas in navigation bar\n@param icon icon to display in marker bar\n@return set of navigation markers",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the navigation markers"
        },
        {
          "name": "markerDescription",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "description of the navigation markers"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program with which the created markers will be associated."
        },
        {
          "name": "priority",
          "type_long": "int",
          "type_short": "int",
          "comment": "to sort out what displays on top, higher is more likely to be on top"
        },
        {
          "name": "showMarkers",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates to show area markers (on the left side of the browser.)"
        },
        {
          "name": "showNavigation",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates to show area navigation markers (on the right side of the browser.)"
        },
        {
          "name": "colorBackground",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, then the browser\u0027s background color will reflect the marker."
        },
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the color of marked areas in navigation bar"
        },
        {
          "name": "icon",
          "type_long": "javax.swing.ImageIcon",
          "type_short": "ImageIcon",
          "comment": "icon to display in marker bar"
        }
      ],
      "return": {
        "type_long": "ghidra.app.services.MarkerSet",
        "type_short": "MarkerSet",
        "comment": "set of navigation markers"
      },
      "throws": []
    },
    {
      "name": "createPointMarker",
      "comment": "Create a Marker display which shows point type markers.",
      "javadoc": "Create a Marker display which shows point type markers.\n@param name name of the navigation markers\n@param markerDescription description of the navigation markers\n@param program The program with which the created markers will be associated.\n@param priority to sort out what displays on top, higher is more likely to be on top\n@param showMarkers true indicates to show area markers (on the left side of the browser.)\n@param showNavigation true indicates to show area navigation markers (on the right side of the browser.)\n@param colorBackground if true, then the browser\u0027s background color will reflect the marker.\n@param color the color of marked areas in navigation bar\n@param icon icon to display in marker bar\n@param isPreferred is prioritized over non-preferred MarkersSets\n@return set of navigation markers",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of the navigation markers"
        },
        {
          "name": "markerDescription",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "description of the navigation markers"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program with which the created markers will be associated."
        },
        {
          "name": "priority",
          "type_long": "int",
          "type_short": "int",
          "comment": "to sort out what displays on top, higher is more likely to be on top"
        },
        {
          "name": "showMarkers",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates to show area markers (on the left side of the browser.)"
        },
        {
          "name": "showNavigation",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates to show area navigation markers (on the right side of the browser.)"
        },
        {
          "name": "colorBackground",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, then the browser\u0027s background color will reflect the marker."
        },
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": "the color of marked areas in navigation bar"
        },
        {
          "name": "icon",
          "type_long": "javax.swing.ImageIcon",
          "type_short": "ImageIcon",
          "comment": "icon to display in marker bar"
        },
        {
          "name": "isPreferred",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "is prioritized over non-preferred MarkersSets"
        }
      ],
      "return": {
        "type_long": "ghidra.app.services.MarkerSet",
        "type_short": "MarkerSet",
        "comment": "set of navigation markers"
      },
      "throws": []
    },
    {
      "name": "removeMarker",
      "comment": "Remove the marker set",
      "javadoc": "Remove the marker set\n@param markerSet marker set to be removed from navigation bars.\n@param program The program with which the markers are associated.",
      "static": false,
      "params": [
        {
          "name": "markerSet",
          "type_long": "ghidra.app.services.MarkerSet",
          "type_short": "MarkerSet",
          "comment": "marker set to be removed from navigation bars."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program with which the markers are associated."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMarkerSet",
      "comment": "Return the marker set with the given name;",
      "javadoc": "Return the marker set with the given name;\n@param name The name of the marker set for which to search\n@param program The program with which the created markers will be associated.\n@return the markerset with the given name;",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the marker set for which to search"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program with which the created markers will be associated."
        }
      ],
      "return": {
        "type_long": "ghidra.app.services.MarkerSet",
        "type_short": "MarkerSet",
        "comment": "the markerset with the given name;"
      },
      "throws": []
    },
    {
      "name": "setMarkerForGroup",
      "comment": "Sets a marker set for a given group name.  Any previous marker set associated with the\n given group name will be removed from this marker service.  This method is used to ensure\n that only one marker set is used at any time for a give group.",
      "javadoc": "Sets a marker set for a given group name.  Any previous marker set associated with the\n given group name will be removed from this marker service.  This method is used to ensure\n that only one marker set is used at any time for a give group.\n@param groupName The name to associate the marker set with.\n@param markerSet The marker set to add to this service\n@param program The program with which the markers are associated.\n@see #removeMarkerForGroup(String, MarkerSet, Program)",
      "static": false,
      "params": [
        {
          "name": "groupName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name to associate the marker set with."
        },
        {
          "name": "markerSet",
          "type_long": "ghidra.app.services.MarkerSet",
          "type_short": "MarkerSet",
          "comment": "The marker set to add to this service"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program with which the markers are associated."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeMarkerForGroup",
      "comment": "Removes a marker set for a given group name.  If the given marker set is not the marker\n set associated with the given group name, then no action will be taken.",
      "javadoc": "Removes a marker set for a given group name.  If the given marker set is not the marker\n set associated with the given group name, then no action will be taken.\n@param groupName The name associated the marker set with.\n@param markerSet The marker set to add to this service\n@param program The program with which the markers are associated.  May be null if the\n        marker is\n@see #setMarkerForGroup(String, MarkerSet, Program)",
      "static": false,
      "params": [
        {
          "name": "groupName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name associated the marker set with."
        },
        {
          "name": "markerSet",
          "type_long": "ghidra.app.services.MarkerSet",
          "type_short": "MarkerSet",
          "comment": "The marker set to add to this service"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program with which the markers are associated.  May be null if the\n        marker is"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBackgroundColor",
      "comment": "Returns the background color associated with the given address.  Each markerSet that supports\n background coloring is checked in priority order to see if it wants to specify a background\n color for the given address.",
      "javadoc": "Returns the background color associated with the given address.  Each markerSet that supports\n background coloring is checked in priority order to see if it wants to specify a background\n color for the given address.\n@param address the address to check for a background color.\n@return the background color to use for that address or null if no markers contain that address.",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to check for a background color."
        }
      ],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "the background color to use for that address or null if no markers contain that address."
      },
      "throws": []
    },
    {
      "name": "getBackgroundColor",
      "comment": "Returns the background color associated with the given program and address. Each markerSet\n that supports background coloring is checked in priority order to see if it wants to specify\n a background color for the given address.\n \n If  is the current program, this is equivalent to\n  #getBackgroundColor(Address).",
      "javadoc": "Returns the background color associated with the given program and address. Each markerSet\n that supports background coloring is checked in priority order to see if it wants to specify\n a background color for the given address.\n \n If {@code program} is the current program, this is equivalent to\n  {@link #getBackgroundColor(Address)}.\n@param program the program to check for a background color.\n@param address the address to check for a background color.\n@return the background color to use for that address or null if no markers contain that\n         address.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to check for a background color."
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to check for a background color."
        }
      ],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "the background color to use for that address or null if no markers contain that\n         address."
      },
      "throws": []
    },
    {
      "name": "addChangeListener",
      "comment": "Adds a change listener to be notified when markers are added/removed or the addresses in any\n current markerSets are changed",
      "javadoc": "Adds a change listener to be notified when markers are added/removed or the addresses in any\n current markerSets are changed\n@param listener the listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeChangeListener",
      "comment": "Removes the given change listener from the list of listeners to be notified of changes",
      "javadoc": "Removes the given change listener from the list of listeners to be notified of changes\n@param listener the listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMarkerClickedListener",
      "comment": "Sets the listener to be notified when the user double-clicks in the Marker Margin area. Note\n that only one listener is allowed to be set at a time. If an attempt to set a second listener\n occurs, then an IllegalStateException is thrown.",
      "javadoc": "Sets the listener to be notified when the user double-clicks in the Marker Margin area. Note\n that only one listener is allowed to be set at a time. If an attempt to set a second listener\n occurs, then an IllegalStateException is thrown.\n@param listener the listener to be notified or null to remove the current listener\n@throws IllegalStateException if a listener is already set.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.app.util.viewer.listingpanel.MarkerClickedListener",
          "type_short": "MarkerClickedListener",
          "comment": "the listener to be notified or null to remove the current listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
