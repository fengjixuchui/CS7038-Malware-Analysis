{
  "name": "CodeViewerService",
  "comment": "Service provided by a plugin that shows the listing from a Program, i.e., a\n Code Viewer. The service allows other plugins to add components and \n actions local to the Code Viewer.",
  "javadoc": "Service provided by a plugin that shows the listing from a Program, i.e., a\n Code Viewer. The service allows other plugins to add components and \n actions local to the Code Viewer.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "addOverviewProvider",
      "comment": "Add a provider that shows an overview of the program.",
      "javadoc": "Add a provider that shows an overview of the program.\n@param overviewProvider provider to add",
      "static": false,
      "params": [
        {
          "name": "overviewProvider",
          "type_long": "ghidra.app.util.viewer.listingpanel.OverviewProvider",
          "type_short": "OverviewProvider",
          "comment": "provider to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeOverviewProvider",
      "comment": "Remove a provider that shows an overview of the program.",
      "javadoc": "Remove a provider that shows an overview of the program.\n@param overviewProvider provider to remove",
      "static": false,
      "params": [
        {
          "name": "overviewProvider",
          "type_long": "ghidra.app.util.viewer.listingpanel.OverviewProvider",
          "type_short": "OverviewProvider",
          "comment": "provider to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addMarginProvider",
      "comment": "Add a provider that shows markers in a program for the portion \n that is visible.",
      "javadoc": "Add a provider that shows markers in a program for the portion \n that is visible.\n@param marginProvider provider to add",
      "static": false,
      "params": [
        {
          "name": "marginProvider",
          "type_long": "ghidra.app.util.viewer.listingpanel.MarginProvider",
          "type_short": "MarginProvider",
          "comment": "provider to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeMarginProvider",
      "comment": "Remove a provider that shows markers in a program for the portion \n that is visible.",
      "javadoc": "Remove a provider that shows markers in a program for the portion \n that is visible.\n@param marginProvider provider to remove",
      "static": false,
      "params": [
        {
          "name": "marginProvider",
          "type_long": "ghidra.app.util.viewer.listingpanel.MarginProvider",
          "type_short": "MarginProvider",
          "comment": "provider to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addLocalAction",
      "comment": "Add an action that is local to the Code Viewer.",
      "javadoc": "Add an action that is local to the Code Viewer.\n@param action local action to add",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingAction",
          "type_short": "DockingAction",
          "comment": "local action to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeLocalAction",
      "comment": "Remove the local action from the Code Viewer.",
      "javadoc": "Remove the local action from the Code Viewer.\n@param action local action to remove",
      "static": false,
      "params": [
        {
          "name": "action",
          "type_long": "docking.action.DockingAction",
          "type_short": "DockingAction",
          "comment": "local action to remove"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addProgramDropProvider",
      "comment": "Add a provider that will be notified for drag and drop actions.",
      "javadoc": "Add a provider that will be notified for drag and drop actions.\n@param provider for drag and drop",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.ProgramDropProvider",
          "type_short": "ProgramDropProvider",
          "comment": "for drag and drop"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addButtonPressedListener",
      "comment": "Add a listener that is notified when a mouse button is pressed.",
      "javadoc": "Add a listener that is notified when a mouse button is pressed.\n@param listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.app.services.ButtonPressedListener",
          "type_short": "ButtonPressedListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeButtonPressedListener",
      "comment": "Remove the button pressed listener.",
      "javadoc": "Remove the button pressed listener.\n@param listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.app.services.ButtonPressedListener",
          "type_short": "ButtonPressedListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setHighlightProvider",
      "comment": "Set the highlight  provider. The existing provider is replaced\n with the given provider.",
      "javadoc": "Set the highlight  provider. The existing provider is replaced\n with the given provider.\n@param provider The provider to set.\n@param program The program with which to associate the given provider.",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.HighlightProvider",
          "type_short": "HighlightProvider",
          "comment": "The provider to set."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program with which to associate the given provider."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeHighlightProvider",
      "comment": "Remove the highlight provider.",
      "javadoc": "Remove the highlight provider.\n@param provider the provider to remove.\n@param program the program associated with the given provider.",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.HighlightProvider",
          "type_short": "HighlightProvider",
          "comment": "the provider to remove."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program associated with the given provider."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setListingPanel",
      "comment": "Set a listing panel on the code viewer.",
      "javadoc": "Set a listing panel on the code viewer.\n@param listingPanel the panel to add.",
      "static": false,
      "params": [
        {
          "name": "listingPanel",
          "type_long": "ghidra.app.util.viewer.listingpanel.ListingPanel",
          "type_short": "ListingPanel",
          "comment": "the panel to add."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCoordinatedListingPanelListener",
      "comment": "Set the CoordinatedListingPanelListener for this listing.",
      "javadoc": "Set the {@link CoordinatedListingPanelListener} for this listing.\n@param listener the listener to add.",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.app.services.CoordinatedListingPanelListener",
          "type_short": "CoordinatedListingPanelListener",
          "comment": "the listener to add."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeListingPanel",
      "comment": "Remove the given listing panel from the code viewer.",
      "javadoc": "Remove the given listing panel from the code viewer.",
      "static": false,
      "params": [
        {
          "name": "listingPanel",
          "type_long": "ghidra.app.util.viewer.listingpanel.ListingPanel",
          "type_short": "ListingPanel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getView",
      "comment": "Get Current view that the CodeViewer is showing.",
      "javadoc": "Get Current view that the CodeViewer is showing.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "goTo",
      "comment": "Commands the code viewer to position the cursor at the given location.",
      "javadoc": "Commands the code viewer to position the cursor at the given location.\n@param loc the location at which to position the cursor.\n@param centerOnScreen if true, the location will be placed in the center of the display\n window\n@return true if the location exists.",
      "static": false,
      "params": [
        {
          "name": "loc",
          "type_long": "ghidra.program.util.ProgramLocation",
          "type_short": "ProgramLocation",
          "comment": "the location at which to position the cursor."
        },
        {
          "name": "centerOnScreen",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the location will be placed in the center of the display\n window"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the location exists."
      },
      "throws": []
    },
    {
      "name": "getFieldPanel",
      "comment": "Return the fieldPanel.",
      "javadoc": "Return the fieldPanel.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.fieldpanel.FieldPanel",
        "type_short": "FieldPanel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressIndexMap",
      "comment": "Returns the current address-index-map",
      "javadoc": "Returns the current address-index-map",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.util.AddressIndexMap",
        "type_short": "AddressIndexMap",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFormatManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.format.FormatManager",
        "type_short": "FormatManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setNorthComponent",
      "comment": "Place a component in the North area of the CodeViewer.",
      "javadoc": "Place a component in the North area of the CodeViewer.\n@param comp component to place in the North area of the CodeViewer",
      "static": false,
      "params": [
        {
          "name": "comp",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": "component to place in the North area of the CodeViewer"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateDisplay",
      "comment": "tells the browser to rebuild the display.",
      "javadoc": "tells the browser to rebuild the display.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getListingModel",
      "comment": "Gets the current ListingLayoutModel;",
      "javadoc": "Gets the current ListingLayoutModel;\n@return the current ListingLayoutModel;",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.listingpanel.ListingModel",
        "type_short": "ListingModel",
        "comment": "the current ListingLayoutModel;"
      },
      "throws": []
    },
    {
      "name": "getNavigatable",
      "comment": "Gets the navigatable for the code viewer service.",
      "javadoc": "Gets the navigatable for the code viewer service.\n@return the navigatable for the code viewer service.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.nav.Navigatable",
        "type_short": "Navigatable",
        "comment": "the navigatable for the code viewer service."
      },
      "throws": []
    },
    {
      "name": "getListingPanel",
      "comment": "Get the main Listing panel for the code viewer service.",
      "javadoc": "Get the main Listing panel for the code viewer service.\n@return the listing panel.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.listingpanel.ListingPanel",
        "type_short": "ListingPanel",
        "comment": "the listing panel."
      },
      "throws": []
    },
    {
      "name": "getCurrentFieldTextSelection",
      "comment": "Returns a String representing the current character-based selection of the currently \n selected field.  If there is no selection, or if there is a ProgramSelection \n (which spans multiple fields), then this method will return null.   \n \n To know which field contains the selection,",
      "javadoc": "Returns a String representing the current character-based selection of the currently \n selected field.  If there is no selection, or if there is a {@link ProgramSelection} \n (which spans multiple fields), then this method will return null.   \n \u003cp\u003e\n To know which field contains the selection,\n@return the currently selected text \u003cb\u003ewithin a given field\u003c/b\u003e",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the currently selected text within a given field"
      },
      "throws": []
    },
    {
      "name": "getCurrentField",
      "comment": "Returns the current field under the cursor.",
      "javadoc": "Returns the current field under the cursor.\n@return the current field under the cursor.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.fieldpanel.field.Field",
        "type_short": "Field",
        "comment": "the current field under the cursor."
      },
      "throws": []
    },
    {
      "name": "getCurrentLocation",
      "comment": "Returns the current cursor location.",
      "javadoc": "Returns the current cursor location.\n@return the current cursor location.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.util.ProgramLocation",
        "type_short": "ProgramLocation",
        "comment": "the current cursor location."
      },
      "throws": []
    },
    {
      "name": "getCurrentSelection",
      "comment": "Returns the current program selection (which crosses multiple fields).",
      "javadoc": "Returns the current program selection (which crosses multiple fields).\n@return the current program selection.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.util.ProgramSelection",
        "type_short": "ProgramSelection",
        "comment": "the current program selection."
      },
      "throws": []
    },
    {
      "name": "addListingDisplayListener",
      "comment": "Adds a listener to be notified when the set of visible addresses change.",
      "javadoc": "Adds a listener to be notified when the set of visible addresses change.\n@param listener the listener to be notified;",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.app.util.viewer.listingpanel.AddressSetDisplayListener",
          "type_short": "AddressSetDisplayListener",
          "comment": "the listener to be notified;"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeListingDisplayListener",
      "comment": "Removes listener from being notified when the set of visible addresses change.",
      "javadoc": "Removes listener from being notified when the set of visible addresses change.\n@param listener the listener to be notified;",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.app.util.viewer.listingpanel.AddressSetDisplayListener",
          "type_short": "AddressSetDisplayListener",
          "comment": "the listener to be notified;"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
