{
  "name": "ProgramManager",
  "comment": "Service for managing programs. Multiple programs may be open in a tool, but only one is active at\n any given time.",
  "javadoc": "Service for managing programs. Multiple programs may be open in a tool, but only one is active at\n any given time.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "OPEN_HIDDEN",
      "comment": "Program will be open in a Hidden state if not already open. This mode is generally used in\n conjunction with a persistent program owner.",
      "javadoc": "Program will be open in a Hidden state if not already open. This mode is generally used in\n conjunction with a persistent program owner.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "OPEN_CURRENT",
      "comment": "Program will be open as the currently active program within the tool.",
      "javadoc": "Program will be open as the currently active program within the tool.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "OPEN_VISIBLE",
      "comment": "Program will be open within the tool but no change will be made to the currently active\n program. If this is the only program open, it will become the currently active program.",
      "javadoc": "Program will be open within the tool but no change will be made to the currently active\n program. If this is the only program open, it will become the currently active program.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    }
  ],
  "methods": [
    {
      "name": "getCurrentProgram",
      "comment": "Return the program that is currently active.",
      "javadoc": "Return the program that is currently active.\n@return may return null if no program is open",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "may return null if no program is open"
      },
      "throws": []
    },
    {
      "name": "isVisible",
      "comment": "Returns true if the specified program is open and considered visible to the user.",
      "javadoc": "Returns true if the specified program is open and considered visible to the user.\n@param program the program\n@return true if the specified program is open and considered visible to the user",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the specified program is open and considered visible to the user"
      },
      "throws": []
    },
    {
      "name": "closeProgram",
      "comment": "Closes the currently active program",
      "javadoc": "Closes the currently active program\n@return true if the close is successful. false if the close fails or if there is no program\n         currently active.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the close is successful. false if the close fails or if there is no program\n         currently active."
      },
      "throws": []
    },
    {
      "name": "openProgram",
      "comment": "Open the program corresponding to the given url.",
      "javadoc": "Open the program corresponding to the given url.\n@param ghidraURL valid server-based program URL\n@param state initial open state (OPEN_HIDDEN, OPEN_CURRENT, OPEN_VISIBLE). The visibility\n            states will be ignored if the program is already open.\n@return null if the user canceled the \"open\" for the new program or an error occurred and was\n         displayed.\n@see GhidraURL",
      "static": false,
      "params": [
        {
          "name": "ghidraURL",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": "valid server-based program URL"
        },
        {
          "name": "state",
          "type_long": "int",
          "type_short": "int",
          "comment": "initial open state (OPEN_HIDDEN, OPEN_CURRENT, OPEN_VISIBLE). The visibility\n            states will be ignored if the program is already open."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "null if the user canceled the \"open\" for the new program or an error occurred and was\n         displayed."
      },
      "throws": []
    },
    {
      "name": "openProgram",
      "comment": "Open the program for the given domainFile. Once open it will become the active program.",
      "javadoc": "Open the program for the given domainFile. Once open it will become the active program.\n@param domainFile domain file that has the program\n@return null if the user canceled the \"open\" for the new program",
      "static": false,
      "params": [
        {
          "name": "domainFile",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": "domain file that has the program"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "null if the user canceled the \"open\" for the new program"
      },
      "throws": []
    },
    {
      "name": "openProgram",
      "comment": "Open the program for the given domainFile. Once open it will become the active program.\n \n \n Note: this method functions exactly as #openProgram(DomainFile)",
      "javadoc": "Open the program for the given domainFile. Once open it will become the active program.\n \n \u003cP\u003e\n Note: this method functions exactly as {@link #openProgram(DomainFile)}\n@param domainFile domain file that has the program\n@param dialogParent unused\n@return the program\n@deprecated deprecated for 10.1; removal for 10.3 or later; use\n             {@link #openProgram(DomainFile)}",
      "static": false,
      "params": [
        {
          "name": "domainFile",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": "domain file that has the program"
        },
        {
          "name": "dialogParent",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "unused"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the program"
      },
      "throws": []
    },
    {
      "name": "openProgram",
      "comment": "Opens the specified version of the program represented by the given DomainFile. This method\n should be used for shared DomainFiles. The newly opened file will be made the active program.",
      "javadoc": "Opens the specified version of the program represented by the given DomainFile. This method\n should be used for shared DomainFiles. The newly opened file will be made the active program.\n@param df the DomainFile to open\n@param version the version of the Program to open\n@return the opened program or null if the given version does not exist.",
      "static": false,
      "params": [
        {
          "name": "df",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": "the DomainFile to open"
        },
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "the version of the Program to open"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the opened program or null if the given version does not exist."
      },
      "throws": []
    },
    {
      "name": "openProgram",
      "comment": "Open the program for the given domainFile",
      "javadoc": "Open the program for the given domainFile\n@param domainFile domain file that has the program\n@param version the version of the Program to open. Specify DomainFile.DEFAULT_VERSION for\n            file update mode.\n@param state initial open state (OPEN_HIDDEN, OPEN_CURRENT, OPEN_VISIBLE). The visibility\n            states will be ignored if the program is already open.\n@return null if the user canceled the \"open\" for the new program or an error occurred and was\n         displayed.",
      "static": false,
      "params": [
        {
          "name": "domainFile",
          "type_long": "ghidra.framework.model.DomainFile",
          "type_short": "DomainFile",
          "comment": "domain file that has the program"
        },
        {
          "name": "version",
          "type_long": "int",
          "type_short": "int",
          "comment": "the version of the Program to open. Specify DomainFile.DEFAULT_VERSION for\n            file update mode."
        },
        {
          "name": "state",
          "type_long": "int",
          "type_short": "int",
          "comment": "initial open state (OPEN_HIDDEN, OPEN_CURRENT, OPEN_VISIBLE). The visibility\n            states will be ignored if the program is already open."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "null if the user canceled the \"open\" for the new program or an error occurred and was\n         displayed."
      },
      "throws": []
    },
    {
      "name": "openProgram",
      "comment": "Opens the program to the tool. In this case the program is already open, but this tool may\n not have it registered as open. The program is made the active program.",
      "javadoc": "Opens the program to the tool. In this case the program is already open, but this tool may\n not have it registered as open. The program is made the active program.\n@param program the program to register as open with the tool.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to register as open with the tool."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "openProgram",
      "comment": "Opens the program to the tool. In this case the program is already open, but this tool may\n not have it registered as open. The program is made the active program.",
      "javadoc": "Opens the program to the tool. In this case the program is already open, but this tool may\n not have it registered as open. The program is made the active program.\n@param program the program to register as open with the tool.\n@param current if true, the program is made the current active program. If false, then the\n            program is made active only if it the first open program in the tool.\n@deprecated use openProgram(Program program, int state) instead.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to register as open with the tool."
        },
        {
          "name": "current",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the program is made the current active program. If false, then the\n            program is made active only if it the first open program in the tool."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "openProgram",
      "comment": "Open the specified program in the tool.",
      "javadoc": "Open the specified program in the tool.\n@param program the program\n@param state initial open state (OPEN_HIDDEN, OPEN_CURRENT, OPEN_VISIBLE). The visibility\n            states will be ignored if the program is already open.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "state",
          "type_long": "int",
          "type_short": "int",
          "comment": "initial open state (OPEN_HIDDEN, OPEN_CURRENT, OPEN_VISIBLE). The visibility\n            states will be ignored if the program is already open."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveProgram",
      "comment": "Saves the current program, possibly prompting the user for a new name.",
      "javadoc": "Saves the current program, possibly prompting the user for a new name.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveProgram",
      "comment": "Saves the specified program, possibly prompting the user for a new name.",
      "javadoc": "Saves the specified program, possibly prompting the user for a new name.\n@param program the program",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveProgramAs",
      "comment": "Prompts the user to save the current program to a selected file.",
      "javadoc": "Prompts the user to save the current program to a selected file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveProgramAs",
      "comment": "Prompts the user to save the specified program to a selected file.",
      "javadoc": "Prompts the user to save the specified program to a selected file.\n@param program the program",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPersistentOwner",
      "comment": "Establish a persistent owner on an open program. This will cause the program manager to imply\n make a program hidden if it is closed.",
      "javadoc": "Establish a persistent owner on an open program. This will cause the program manager to imply\n make a program hidden if it is closed.\n@param program the program\n@param owner the owner\n@return true if program is open and another object is not already the owner, or the specified\n         owner is already the owner.\n@see #releaseProgram(Program, Object)",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "owner",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the owner"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if program is open and another object is not already the owner, or the specified\n         owner is already the owner."
      },
      "throws": []
    },
    {
      "name": "releaseProgram",
      "comment": "Release the persistent ownership of a program.\n \n The program will automatically be closed if it is hidden or was marked as temporary. If any\n of these closures corresponds to a program with changes the user will be given an opportunity\n to save or keep the program open.\n \n If persistentOwner is not the correct owner, the method will have no affect.",
      "javadoc": "Release the persistent ownership of a program.\n \u003cp\u003e\n The program will automatically be closed if it is hidden or was marked as temporary. If any\n of these closures corresponds to a program with changes the user will be given an opportunity\n to save or keep the program open.\n \u003cp\u003e\n If persistentOwner is not the correct owner, the method will have no affect.\n@param program the program\n@param persistentOwner the owner defined by {@link #setPersistentOwner(Program, Object)}",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "persistentOwner",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the owner defined by #setPersistentOwner(Program, Object)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "closeProgram",
      "comment": "Closes the given program with the option of saving any changes. The exact behavior of this\n method depends on several factors. First of all, if any other tool has this program open,\n then the program is closed for this tool only and the user is not prompted to save the\n program regardless of the ignoreChanges flag. Otherwise, if ignoreChanges is false and\n changes have been made, the user is prompted to save the program.",
      "javadoc": "Closes the given program with the option of saving any changes. The exact behavior of this\n method depends on several factors. First of all, if any other tool has this program open,\n then the program is closed for this tool only and the user is not prompted to save the\n program regardless of the ignoreChanges flag. Otherwise, if ignoreChanges is false and\n changes have been made, the user is prompted to save the program.\n@param program the program to close.\n@param ignoreChanges if true, the program is closed without saving any changes.\n@return true if the program was closed. Returns false if the user canceled the close while\n         being prompted to save. Also returns false if the program passed in as a parameter is\n         null.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to close."
        },
        {
          "name": "ignoreChanges",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the program is closed without saving any changes."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the program was closed. Returns false if the user canceled the close while\n         being prompted to save. Also returns false if the program passed in as a parameter is\n         null."
      },
      "throws": []
    },
    {
      "name": "closeOtherPrograms",
      "comment": "Closes all open programs in this tool except the current program. If this tool is the only\n tool with a program open and that program has changes, then the user will be prompted to\n close each such file. (Providing the ignoreChanges flag is false)",
      "javadoc": "Closes all open programs in this tool except the current program. If this tool is the only\n tool with a program open and that program has changes, then the user will be prompted to\n close each such file. (Providing the ignoreChanges flag is false)\n@param ignoreChanges if true, the programs will be closed without saving changes.\n@return true if all other programs were closed. Returns false if the user canceled the close\n         while being prompted to save.",
      "static": false,
      "params": [
        {
          "name": "ignoreChanges",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the programs will be closed without saving changes."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if all other programs were closed. Returns false if the user canceled the close\n         while being prompted to save."
      },
      "throws": []
    },
    {
      "name": "closeAllPrograms",
      "comment": "Closes all open programs in this tool. If this tool is the only tool with a program open and\n that program has changes, then the user will be prompted to close each such file. (Providing\n the ignoreChanges flag is false)",
      "javadoc": "Closes all open programs in this tool. If this tool is the only tool with a program open and\n that program has changes, then the user will be prompted to close each such file. (Providing\n the ignoreChanges flag is false)\n@param ignoreChanges if true, the programs will be closed without saving changes.\n@return true if all programs were closed. Returns false if the user canceled the close while\n         being prompted to save.",
      "static": false,
      "params": [
        {
          "name": "ignoreChanges",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the programs will be closed without saving changes."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if all programs were closed. Returns false if the user canceled the close while\n         being prompted to save."
      },
      "throws": []
    },
    {
      "name": "setCurrentProgram",
      "comment": "Sets the given program to be the current active program in the tool.",
      "javadoc": "Sets the given program to be the current active program in the tool.\n@param p the program to make active.",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to make active."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "Returns the first program in the list of open programs that contains the given address.\n Programs are searched in the order they were opened within a given priority. Program are\n initially opened with the PRIORITY_NORMAL priority, but can be set to have PRIORITY_HIGH or\n PRIORITY_LOW.",
      "javadoc": "Returns the first program in the list of open programs that contains the given address.\n Programs are searched in the order they were opened within a given priority. Program are\n initially opened with the PRIORITY_NORMAL priority, but can be set to have PRIORITY_HIGH or\n PRIORITY_LOW.\n@param addr the address for which to search.\n@return the first program that can be found to contain the given address.",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address for which to search."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the first program that can be found to contain the given address."
      },
      "throws": []
    },
    {
      "name": "getAllOpenPrograms",
      "comment": "Returns a list of all open program.",
      "javadoc": "Returns a list of all open program.\n@return the programs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program[]",
        "type_short": "ghidra.program.model.listing.Program[]",
        "comment": "the programs"
      },
      "throws": []
    },
    {
      "name": "lockDown",
      "comment": "Allows program manager state to be locked/unlocked. While locked, the program manager will\n not support opening additional programs.",
      "javadoc": "Allows program manager state to be locked/unlocked. While locked, the program manager will\n not support opening additional programs.\n@param state locked if true, unlocked if false\n@deprecated deprecated for 10.1; removal for 10.3 or later",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "locked if true, unlocked if false"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isLocked",
      "comment": "Returns true if program manager is in the locked state",
      "javadoc": "Returns true if program manager is in the locked state\n@return true if program manager is in the locked state\n@deprecated deprecated for 10.1; removal for 10.3 or later",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if program manager is in the locked state"
      },
      "throws": []
    }
  ]
}
