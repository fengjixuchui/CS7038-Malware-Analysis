{
  "name": "Analyzer",
  "comment": "NOTE:  ALL ANALYZER CLASSES MUST END IN \"Analyzer\".  If not,\n the ClassSearcher will not find them.\n \n Interface to perform automatic analysis.",
  "javadoc": "NOTE:  ALL ANALYZER CLASSES MUST END IN \"Analyzer\".  If not,\n the ClassSearcher will not find them.\n \n Interface to perform automatic analysis.",
  "static": false,
  "implements": [
    "ghidra.util.classfinder.ExtensionPoint"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getName",
      "comment": "Get the name of this analyzer",
      "javadoc": "Get the name of this analyzer\n@return analyzer name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "analyzer name"
      },
      "throws": []
    },
    {
      "name": "getAnalysisType",
      "comment": "Get the type of analysis this analyzer performs",
      "javadoc": "Get the type of analysis this analyzer performs\n@return analyze type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.services.AnalyzerType",
        "type_short": "AnalyzerType",
        "comment": "analyze type"
      },
      "throws": []
    },
    {
      "name": "getDefaultEnablement",
      "comment": "Returns true if this analyzer should be enabled by default.  Generally useful\n analyzers should return true. Specialized analyzers should return false;",
      "javadoc": "Returns true if this analyzer should be enabled by default.  Generally useful\n analyzers should return true. Specialized analyzers should return false;",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "supportsOneTimeAnalysis",
      "comment": "Returns true if it makes sense for this analyzer to directly invoked on an address or\n addressSet.  The AutoAnalyzer plug-in will automatically create an action for each\n analyzer that returns true.",
      "javadoc": "Returns true if it makes sense for this analyzer to directly invoked on an address or\n addressSet.  The AutoAnalyzer plug-in will automatically create an action for each\n analyzer that returns true.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "Get a longer description of what this analyzer does.",
      "javadoc": "Get a longer description of what this analyzer does.\n@return analyzer description",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "analyzer description"
      },
      "throws": []
    },
    {
      "name": "getPriority",
      "comment": "Get the priority that this analyzer should run at.",
      "javadoc": "Get the priority that this analyzer should run at.\n@return analyzer priority",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.services.AnalysisPriority",
        "type_short": "AnalysisPriority",
        "comment": "analyzer priority"
      },
      "throws": []
    },
    {
      "name": "canAnalyze",
      "comment": "Can this analyzer work on this program.",
      "javadoc": "Can this analyzer work on this program.\n@param program program to be analyzed\n@return true if this analyzer can analyze this program",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program to be analyzed"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this analyzer can analyze this program"
      },
      "throws": []
    },
    {
      "name": "added",
      "comment": "Called when the requested information type has been added.\n (ie: function added.)",
      "javadoc": "Called when the requested information type has been added.\n (ie: function added.)\n@param program program to analyze\n@param set AddressSet of locations that have been added\n@param monitor monitor that indicates progress and indicates whether\n the user canceled the analysis\n@param log a message log to record analysis information\n@return true if the analysis succeeded",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program to analyze"
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "AddressSet of locations that have been added"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "monitor that indicates progress and indicates whether\n the user canceled the analysis"
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "a message log to record analysis information"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the analysis succeeded"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "removed",
      "comment": "Called when the requested information type has been removed.\n (ie: function removed.)",
      "javadoc": "Called when the requested information type has been removed.\n (ie: function removed.)\n@param program program to analyze\n@param set AddressSet of locations that have been added\n@param monitor monitor that indicates progress and indicates whether\n the user canceled the analysis\n@param log a message log to record analysis information\n@return true if the analysis succeeded",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program to analyze"
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "AddressSet of locations that have been added"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "monitor that indicates progress and indicates whether\n the user canceled the analysis"
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "a message log to record analysis information"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the analysis succeeded"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "registerOptions",
      "comment": "Analyzers should register their options with associated default value, help content and\n description",
      "javadoc": "Analyzers should register their options with associated default value, help content and\n description\n@param options the program options/property list that contains the options\n@param program program to be analyzed",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": "the program options/property list that contains the options"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program to be analyzed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "optionsChanged",
      "comment": "Analyzers should initialize their options from the values in the given Options, \n providing appropriate default values.",
      "javadoc": "Analyzers should initialize their options from the values in the given Options, \n providing appropriate default values.\n@param options the program options/property list that contains the options\n@param program program to be analyzed",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": "the program options/property list that contains the options"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "program to be analyzed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "analysisEnded",
      "comment": "Called when an auto-analysis session ends. This notifies the analyzer so it can clean up any \n resources that only needed to be maintained during a single auto-analysis session.",
      "javadoc": "Called when an auto-analysis session ends. This notifies the analyzer so it can clean up any \n resources that only needed to be maintained during a single auto-analysis session.\n@param program the program that was just completed being analyzed",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program that was just completed being analyzed"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPrototype",
      "comment": "Returns true if this analyzer is a prototype.",
      "javadoc": "Returns true if this analyzer is a prototype.\n@return true if this analyzer is a prototype",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this analyzer is a prototype"
      },
      "throws": []
    }
  ]
}
