{
  "name": "CodeComparisonPanel",
  "comment": "The CodeComparisonPanel class should be extended by any class that is to be \n discovered by the FunctionComparisonPanel class and included as a \n form of comparing two sections of code within the same or different programs\n \n NOTE: ALL CodeComparisonPanel CLASSES MUST END IN\n CodeComparisonPanel so they are discoverable by the \n ClassSearcher",
  "javadoc": "The CodeComparisonPanel class should be extended by any class that is to be \n discovered by the {@link FunctionComparisonPanel} class and included as a \n form of comparing two sections of code within the same or different programs\n \u003cp\u003e\n NOTE: ALL CodeComparisonPanel CLASSES MUST END IN\n \u003ccode\u003eCodeComparisonPanel\u003c/code\u003e so they are discoverable by the \n {@link ClassSearcher}",
  "static": false,
  "implements": [
    "ghidra.util.classfinder.ExtensionPoint",
    "java.awt.event.FocusListener"
  ],
  "extends": "javax.swing.JPanel",
  "fields": [
    {
      "name": "MINIMUM_PANEL_WIDTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "50"
    },
    {
      "name": "LEFT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "RIGHT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "BUBBLE_GUM_PINK_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "FOCUS_BORDER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.border.Border",
      "type_short": "Border",
      "constant_value": null
    },
    {
      "name": "NON_FOCUS_BORDER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.border.Border",
      "type_short": "Border",
      "constant_value": null
    },
    {
      "name": "EMPTY_ADDRESS_SET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.address.AddressSetView",
      "type_short": "AddressSetView",
      "constant_value": null
    },
    {
      "name": "owner",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "tool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.PluginTool",
      "type_short": "PluginTool",
      "constant_value": null
    },
    {
      "name": "topComp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JComponent",
      "type_short": "JComponent",
      "constant_value": null
    },
    {
      "name": "bottomComp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JComponent",
      "type_short": "JComponent",
      "constant_value": null
    },
    {
      "name": "titlePanels",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.util.TitledPanel[]",
      "type_short": "ghidra.app.util.viewer.util.TitledPanel[]",
      "constant_value": null
    },
    {
      "name": "leftTitlePrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "rightTitlePrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "currProgramIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "programs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program[]",
      "type_short": "ghidra.program.model.listing.Program[]",
      "constant_value": null
    },
    {
      "name": "functions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Function[]",
      "type_short": "ghidra.program.model.listing.Function[]",
      "constant_value": null
    },
    {
      "name": "data",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Data[]",
      "type_short": "ghidra.program.model.listing.Data[]",
      "constant_value": null
    },
    {
      "name": "showTitles",
      "comment": "If true, the title of each comparison panel will be shown",
      "javadoc": "If true, the title of each comparison panel will be shown",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "syncScrolling",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "fieldPanelCoordinator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "T",
      "type_short": "T",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param owner the name of the owner of this component\n@param tool the tool that contains the component",
      "static": false,
      "params": [
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the owner of this component"
        },
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "the tool that contains the component"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponent",
      "comment": "The GUI component for this CodeComparisonPanel",
      "javadoc": "The GUI component for this CodeComparisonPanel\n@return the component",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JComponent",
        "type_short": "JComponent",
        "comment": "the component"
      },
      "throws": []
    },
    {
      "name": "getTitle",
      "comment": "The title for this code comparison panel",
      "javadoc": "The title for this code comparison panel\n@return the title",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the title"
      },
      "throws": []
    },
    {
      "name": "setPrograms",
      "comment": "Specifies the two programs to be compared by this panel",
      "javadoc": "Specifies the two programs to be compared by this panel\n@param leftProgram the program for the left side\n@param rightProgram the program for the right side",
      "static": false,
      "params": [
        {
          "name": "leftProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for the left side"
        },
        {
          "name": "rightProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for the right side"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadFunctions",
      "comment": "Displays a comparison of two program\u0027s functions",
      "javadoc": "Displays a comparison of two program\u0027s functions\n@param leftFunction the function to show in the left side of the code comparison view\n@param rightFunction the function to show in the right side of the code comparison view",
      "static": false,
      "params": [
        {
          "name": "leftFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function to show in the left side of the code comparison view"
        },
        {
          "name": "rightFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function to show in the right side of the code comparison view"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadData",
      "comment": "Displays a comparison of two program\u0027s data items",
      "javadoc": "Displays a comparison of two program\u0027s data items\n@param leftData the data item to show in the left side of the code comparison view\n@param rightData the data item to show in the right side of the code comparison view",
      "static": false,
      "params": [
        {
          "name": "leftData",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": "the data item to show in the left side of the code comparison view"
        },
        {
          "name": "rightData",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": "the data item to show in the right side of the code comparison view"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadAddresses",
      "comment": "Displays program information for a particular set of addresses in the two programs \n being compared",
      "javadoc": "Displays program information for a particular set of addresses in the two programs \n being compared\n@param leftProgram the program in the left side of the code comparison view\n@param rightProgram the program in the right side of the code comparison view\n@param leftAddresses the addresses of the program info to show in the left side\n@param rightAddresses the addresses of the program info to show in the right side",
      "static": false,
      "params": [
        {
          "name": "leftProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program in the left side of the code comparison view"
        },
        {
          "name": "rightProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program in the right side of the code comparison view"
        },
        {
          "name": "leftAddresses",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the addresses of the program info to show in the left side"
        },
        {
          "name": "rightAddresses",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "the addresses of the program info to show in the right side"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "Cleans up resources when this panel is no longer needed",
      "javadoc": "Cleans up resources when this panel is no longer needed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMouseNavigationEnabled",
      "comment": "Enable/disable navigation in this panel using the mouse",
      "javadoc": "Enable/disable navigation in this panel using the mouse\n@param enabled false disables mouse navigation",
      "static": false,
      "params": [
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "false disables mouse navigation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getActions",
      "comment": "Returns the actions for this panel",
      "javadoc": "Returns the actions for this panel\n@return an array of docking actions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.DockingAction[]",
        "type_short": "docking.action.DockingAction[]",
        "comment": "an array of docking actions"
      },
      "throws": []
    },
    {
      "name": "getShowTitles",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setShowTitles",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "showTitles",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPanelThisSupersedes",
      "comment": "Determines if this panel is intended to take the place of another and if so it returns \n the class of the panel to be superseded.",
      "javadoc": "Determines if this panel is intended to take the place of another and if so it returns \n the class of the panel to be superseded.\n@return the class for the CodeComparisonPanel that this one supersedes \n or null if it doesn\u0027t supersede another panel.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003c? extends ghidra.app.util.viewer.util.CodeComparisonPanel\u003cT\u003e\u003e",
        "type_short": "Class",
        "comment": "the class for the CodeComparisonPanel that this one supersedes \n or null if it doesn\u0027t supersede another panel."
      },
      "throws": []
    },
    {
      "name": "getActionContext",
      "comment": "Returns the context object which corresponds to the area of focus within this provider\u0027s \n component. Null is returned when there is no context.",
      "javadoc": "Returns the context object which corresponds to the area of focus within this provider\u0027s \n component. Null is returned when there is no context.\n@param componentProvider the provider that includes this code comparison component.\n@param event mouse event which corresponds to this request.\n May be null for key-stroke or other non-mouse event.\n@return the action context for the area of focus in this component.",
      "static": false,
      "params": [
        {
          "name": "componentProvider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": "the provider that includes this code comparison component."
        },
        {
          "name": "event",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": "mouse event which corresponds to this request.\n May be null for key-stroke or other non-mouse event."
        }
      ],
      "return": {
        "type_long": "docking.ActionContext",
        "type_short": "ActionContext",
        "comment": "the action context for the area of focus in this component."
      },
      "throws": []
    },
    {
      "name": "programRestored",
      "comment": "Called when the indicated program has been restored because of an Undo/Redo.\n This method allows this CodeComparisonPanel to take an appropriate action (such as\n refreshing itself) to respond to the program changing.",
      "javadoc": "Called when the indicated program has been restored because of an Undo/Redo.\n This method allows this CodeComparisonPanel to take an appropriate action (such as\n refreshing itself) to respond to the program changing.\n@param program the program that was restored.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program that was restored."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "leftPanelHasFocus",
      "comment": "Determines if the left code panel currently has focus.",
      "javadoc": "Determines if the left code panel currently has focus.\n@return true if the left side of the code comparison has focus.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the left side of the code comparison has focus."
      },
      "throws": []
    },
    {
      "name": "setTitlePrefixes",
      "comment": "A CodeComparisonPanel should provide a title based on what the code comparison panel\n is displaying. This method sets a prefix string that should be prepended to each\n of the code comparison panel\u0027s titles.",
      "javadoc": "A CodeComparisonPanel should provide a title based on what the code comparison panel\n is displaying. This method sets a prefix string that should be prepended to each\n of the code comparison panel\u0027s titles.\n@param leftTitlePrefix the prefix string to prepend to the left panel\u0027s title.\n@param rightTitlePrefix the prefix string to prepend to the right panel\u0027s title.",
      "static": false,
      "params": [
        {
          "name": "leftTitlePrefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the prefix string to prepend to the left panel\u0027s title."
        },
        {
          "name": "rightTitlePrefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the prefix string to prepend to the right panel\u0027s title."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLeftProgram",
      "comment": "Gets the program being viewed in the left side of this panel.",
      "javadoc": "Gets the program being viewed in the left side of this panel.\n@return the program or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the program or null"
      },
      "throws": []
    },
    {
      "name": "getRightProgram",
      "comment": "Gets the program being viewed in the right side of this panel.",
      "javadoc": "Gets the program being viewed in the right side of this panel.\n@return the program or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the program or null"
      },
      "throws": []
    },
    {
      "name": "getLeftFunction",
      "comment": "Gets the function loaded in the left side of this panel.",
      "javadoc": "Gets the function loaded in the left side of this panel.\n@return the function or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "the function or null"
      },
      "throws": []
    },
    {
      "name": "getRightFunction",
      "comment": "Gets the function loaded in the right side of this panel.",
      "javadoc": "Gets the function loaded in the right side of this panel.\n@return the function or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "the function or null"
      },
      "throws": []
    },
    {
      "name": "getLeftData",
      "comment": "Gets the data loaded in the left side of this panel.",
      "javadoc": "Gets the data loaded in the left side of this panel.\n@return the data or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the data or null"
      },
      "throws": []
    },
    {
      "name": "getRightData",
      "comment": "Gets the data loaded in the right side of this panel.",
      "javadoc": "Gets the data loaded in the right side of this panel.\n@return the data or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the data or null"
      },
      "throws": []
    },
    {
      "name": "getLeftAddresses",
      "comment": "Gets the addresses loaded in the left side of this panel.",
      "javadoc": "Gets the addresses loaded in the left side of this panel.\n@return the addresses or an empty set",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "the addresses or an empty set"
      },
      "throws": []
    },
    {
      "name": "getRightAddresses",
      "comment": "Gets the addresses loaded in the right side of this panel.",
      "javadoc": "Gets the addresses loaded in the right side of this panel.\n@return the addresses or an empty set",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "the addresses or an empty set"
      },
      "throws": []
    },
    {
      "name": "refreshLeftPanel",
      "comment": "Refreshes the left side of this panel.",
      "javadoc": "Refreshes the left side of this panel.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "refreshRightPanel",
      "comment": "Refreshes the right side of this panel.",
      "javadoc": "Refreshes the right side of this panel.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "focusLost",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.FocusEvent",
          "type_short": "FocusEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateActionEnablement",
      "comment": "Updates the enablement for any actions created by this code comparison panel.",
      "javadoc": "Updates the enablement for any actions created by this code comparison panel.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFieldPanelCoordinator",
      "comment": "Sets the coordinator for the two views within this code comparison panel. It coordinates\n their scrolling and location synchronization.",
      "javadoc": "Sets the coordinator for the two views within this code comparison panel. It coordinates\n their scrolling and location synchronization.\n@param fieldPanelCoordinator the coordinator for the two views",
      "static": false,
      "params": [
        {
          "name": "fieldPanelCoordinator",
          "type_long": "T",
          "type_short": "T",
          "comment": "the coordinator for the two views"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFieldPanelCoordinator",
      "comment": "Gets the current field panel coordinator used to synchronize scrolling between the \n left and right view for this CodeComparisonPanel.",
      "javadoc": "Gets the current field panel coordinator used to synchronize scrolling between the \n left and right view for this CodeComparisonPanel.\n@return the current FieldPanelCoordinator. Otherwise, null if scrolling is not \n currently synchronized.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "the current FieldPanelCoordinator. Otherwise, null if scrolling is not \n currently synchronized."
      },
      "throws": []
    },
    {
      "name": "createFieldPanelCoordinator",
      "comment": "Creates a new FieldPanelCoordinator used to synchronize scrolling between the \n left and right view for this CodeComparisonPanel.",
      "javadoc": "Creates a new FieldPanelCoordinator used to synchronize scrolling between the \n left and right view for this CodeComparisonPanel.\n@return a new FieldPanelCoordinator",
      "static": false,
      "params": [],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": "a new FieldPanelCoordinator"
      },
      "throws": []
    },
    {
      "name": "getLeftFieldPanel",
      "comment": "Gets the left field panel for this CodeComparisonPanel.",
      "javadoc": "Gets the left field panel for this CodeComparisonPanel.\n@return the left FieldPanel.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.fieldpanel.FieldPanel",
        "type_short": "FieldPanel",
        "comment": "the left FieldPanel."
      },
      "throws": []
    },
    {
      "name": "getRightFieldPanel",
      "comment": "Gets the right field panel for this CodeComparisonPanel.",
      "javadoc": "Gets the right field panel for this CodeComparisonPanel.\n@return the right FieldPanel.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.fieldpanel.FieldPanel",
        "type_short": "FieldPanel",
        "comment": "the right FieldPanel."
      },
      "throws": []
    },
    {
      "name": "isScrollingSynced",
      "comment": "Determines if the layouts of the views are synchronized with respect to scrolling and\n location.",
      "javadoc": "Determines if the layouts of the views are synchronized with respect to scrolling and\n location.\n@return true if scrolling is synchronized between the two views.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if scrolling is synchronized between the two views."
      },
      "throws": []
    },
    {
      "name": "setScrollingSyncState",
      "comment": "Sets whether or not scrolling is synchronized.",
      "javadoc": "Sets whether or not scrolling is synchronized.\n@param syncScrolling true means synchronize scrolling and location between the two views.",
      "static": false,
      "params": [
        {
          "name": "syncScrolling",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means synchronize scrolling and location between the two views."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
