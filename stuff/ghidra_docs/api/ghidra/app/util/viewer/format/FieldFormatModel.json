{
  "name": "FieldFormatModel",
  "comment": "Maintains the size and ordering for a layout of fields.",
  "javadoc": "Maintains the size and ordering for a layout of fields.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "COMPARATOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.Comparator\u003cghidra.app.util.viewer.field.FieldFactory\u003e",
      "type_short": "Comparator",
      "constant_value": null
    },
    {
      "name": "DIVIDER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "PLATE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "FUNCTION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "FUNCTION_VARS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "INSTRUCTION_OR_DATA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "OPEN_DATA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "ARRAY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "baseRowID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "formatMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.format.FormatManager",
      "type_short": "FormatManager",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "width",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "rows",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.viewer.format.Row\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "factories",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.field.FieldFactory[]",
      "type_short": "ghidra.app.util.viewer.field.FieldFactory[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "formatMgr",
          "type_long": "ghidra.app.util.viewer.format.FormatManager",
          "type_short": "FormatManager",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "categoryID",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "proxyObjectClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "factorys",
          "type_long": "ghidra.app.util.viewer.field.FieldFactory[]",
          "type_short": "ghidra.app.util.viewer.field.FieldFactory[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setBaseRowID",
      "comment": "Sets the base id for this model. Each row in a model gets an id which must\n be unique across all models.",
      "javadoc": "Sets the base id for this model. Each row in a model gets an id which must\n be unique across all models.\n@param id the base id for this format.",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "int",
          "type_short": "int",
          "comment": "the base id for this format."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "update",
      "comment": "Updates users of the formatMgr to indicate the format has changed.",
      "javadoc": "Updates users of the formatMgr to indicate the format has changed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFormatManager",
      "comment": "Returns the formatMgr that is managing this model.",
      "javadoc": "Returns the formatMgr that is managing this model.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.format.FormatManager",
        "type_short": "FormatManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addLayouts",
      "comment": "Generates the layout objects for the given index and proxy object",
      "javadoc": "Generates the layout objects for the given index and proxy object\n@param list the list to add layouts to\n@param index the index (represents address)\n@param proxy the object to get layouts for.",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cdocking.widgets.fieldpanel.support.RowLayout\u003e",
          "type_short": "List",
          "comment": "the list to add layouts to"
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index (represents address)"
        },
        {
          "name": "proxy",
          "type_long": "ghidra.app.util.viewer.proxy.ProxyObj\u003c?\u003e",
          "type_short": "ProxyObj",
          "comment": "the object to get layouts for."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addRow",
      "comment": "Adds new empty row at the given position.  The position must be in the\n interval [0,numRows].",
      "javadoc": "Adds new empty row at the given position.  The position must be in the\n interval [0,numRows].\n@exception IllegalArgumentException thrown if the position is outside the\n interval [0,numRows].",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeRow",
      "comment": "Removes the row currently at the given position.",
      "javadoc": "Removes the row currently at the given position.\n@param index the index of the row to remove.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the row to remove."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findWidth",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addFactory",
      "comment": "Adds a new field to this format.",
      "javadoc": "Adds a new field to this format.\n@param factory the FieldFactory to add\n@param rowIndex the row to add the field to\n@param colIndex the position in the row for the new field.",
      "static": false,
      "params": [
        {
          "name": "factory",
          "type_long": "ghidra.app.util.viewer.field.FieldFactory",
          "type_short": "FieldFactory",
          "comment": "the FieldFactory to add"
        },
        {
          "name": "rowIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row to add the field to"
        },
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the position in the row for the new field."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeFactory",
      "comment": "Removes a field from the format.",
      "javadoc": "Removes a field from the format.\n@param rowIndex the row index of the field to remove.\n@param colIndex the column index of the field to remove.",
      "static": false,
      "params": [
        {
          "name": "rowIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row index of the field to remove."
        },
        {
          "name": "colIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column index of the field to remove."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "modelChanged",
      "comment": "Notifies the formatMgr that this format model has changed.",
      "javadoc": "Notifies the formatMgr that this format model has changed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumRows",
      "comment": "Returns the number of rows in the model.",
      "javadoc": "Returns the number of rows in the model.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the name of this format model.",
      "javadoc": "Returns the name of this format model.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumFactorys",
      "comment": "Returns the number of FieldFactorys on any given row.",
      "javadoc": "Returns the number of FieldFactorys on any given row.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFactorys",
      "comment": "Returns the FieldFactorys on a given row.",
      "javadoc": "Returns the FieldFactorys on a given row.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.viewer.field.FieldFactory[]",
        "type_short": "ghidra.app.util.viewer.field.FieldFactory[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFactorys",
      "comment": "Returns the list factories valid for this format.",
      "javadoc": "Returns the list factories valid for this format.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.field.FieldFactory[]",
        "type_short": "ghidra.app.util.viewer.field.FieldFactory[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "moveFactory",
      "comment": "Moves the Field at (oldrow,oldCol) to (row,col)",
      "javadoc": "Moves the Field at (oldrow,oldCol) to (row,col)\n@param oldRowIndex the row containing the field to be moved.\n@param oldColIndex the column index of the field to be moved.\n@param newRowIndex the row to move to.\n@param newColIndex the column to move to.\n@exception IllegalArgumentException thrown if any of the parameters don\u0027t\n map to a valid grid position.",
      "static": false,
      "params": [
        {
          "name": "oldRowIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row containing the field to be moved."
        },
        {
          "name": "oldColIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column index of the field to be moved."
        },
        {
          "name": "newRowIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row to move to."
        },
        {
          "name": "newColIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the column to move to."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWidth",
      "comment": "Returns the width of this model",
      "javadoc": "Returns the width of this model",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateRow",
      "comment": "Updates the fields on the given row.",
      "javadoc": "Updates the fields on the given row.\n@param index the row to update.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row to update."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "servicesChanged",
      "comment": "Notifies each row that the services have changed.",
      "javadoc": "Notifies each row that the services have changed.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveToXml",
      "comment": "Saves this format to XML.",
      "javadoc": "Saves this format to XML.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "org.jdom.Element",
        "type_short": "Element",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreFromXml",
      "comment": "Restores the format for this model from XML.",
      "javadoc": "Restores the format for this model from XML.\n@param root the root XML element from which to get the format information.",
      "static": false,
      "params": [
        {
          "name": "root",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": "the root XML element from which to get the format information."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createRow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rowElement",
          "type_long": "org.jdom.Element",
          "type_short": "Element",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.viewer.format.Row",
        "type_short": "Row",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNewFieldFactoryInstance",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "factoryPrototype",
          "type_long": "ghidra.app.util.viewer.field.FieldFactory",
          "type_short": "FieldFactory",
          "comment": ""
        },
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.viewer.field.FieldFactory",
        "type_short": "FieldFactory",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addAllFactories",
      "comment": "Adds all unused fields to this model.",
      "javadoc": "Adds all unused fields to this model.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUnusedFactories",
      "comment": "Returns a list of unused valid fields for this model",
      "javadoc": "Returns a list of unused valid fields for this model\n@return a list of unused valid fields for this model",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.field.FieldFactory[]",
        "type_short": "ghidra.app.util.viewer.field.FieldFactory[]",
        "comment": "a list of unused valid fields for this model"
      },
      "throws": []
    },
    {
      "name": "getAllFactories",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.field.FieldFactory[]",
        "type_short": "ghidra.app.util.viewer.field.FieldFactory[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeAllFactories",
      "comment": "Removes all fields from this model.",
      "javadoc": "Removes all fields from this model.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "optionsChanged",
      "comment": "Notifies that the options have changed.",
      "javadoc": "Notifies that the options have changed.\n@param options the Options object that changed.\n@param optionName the name of the property that changed.\n@param oldValue the old value of the property.\n@param newValue the new value of the property.",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": "the Options object that changed."
        },
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property that changed."
        },
        {
          "name": "oldValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the old value of the property."
        },
        {
          "name": "newValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the new value of the property."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
