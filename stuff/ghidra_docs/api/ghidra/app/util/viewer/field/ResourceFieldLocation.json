{
  "name": "ResourceFieldLocation",
  "comment": "A ProgramLocation of an item that is a Resource \n embedded in a binary (ie. a embedded graphic image)",
  "javadoc": "A {@link ProgramLocation} of an item that is a Resource \n embedded in a binary (ie. a embedded graphic image)",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.util.OperandFieldLocation",
  "fields": [
    {
      "name": "data",
      "comment": "Cached here because users will probably need to query its details during\n action enablement",
      "javadoc": "Cached here because users will probably need to query its details during\n action enablement",
      "static": false,
      "type_long": "ghidra.program.model.listing.Data",
      "type_short": "Data",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates an ResourceFieldLocation",
      "javadoc": "Creates an ResourceFieldLocation\n@param program the program\n@param address the address of the location\n@param componentPath the data component path\n@param displayValue the text being displayed in the text.\n@param opIndex the index of the operand at this location.\n@param characterOffset the character position from the beginning of the operand.\n@param data Data instance at the specified address / component path",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address of the location"
        },
        {
          "name": "componentPath",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": "the data component path"
        },
        {
          "name": "displayValue",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text being displayed in the text."
        },
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the operand at this location."
        },
        {
          "name": "characterOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the character position from the beginning of the operand."
        },
        {
          "name": "data",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": "Data instance at the specified address / component path"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Default constructor needed for restoring from XML.",
      "javadoc": "Default constructor needed for restoring from XML.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getResourceData",
      "comment": "Returns the resource\u0027s Data instance.",
      "javadoc": "Returns the resource\u0027s Data instance.\n@return the resource\u0027s Data instance",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the resource\u0027s Data instance"
      },
      "throws": []
    },
    {
      "name": "isDataImageResource",
      "comment": "Returns true if this resource is a DataImage.",
      "javadoc": "Returns true if this resource is a {@link DataImage}.\n@return true if this resource is a {@link DataImage}",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this resource is a DataImage"
      },
      "throws": []
    }
  ]
}
