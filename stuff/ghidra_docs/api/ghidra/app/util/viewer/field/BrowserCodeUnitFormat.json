{
  "name": "BrowserCodeUnitFormat",
  "comment": "BrowserCodeUnitFormat provides a code unit format based upon\n a common set of viewer Options for specific Tool.  The associated options correspond to\n the Browser Operand Fields category.",
  "javadoc": "\u003ccode\u003eBrowserCodeUnitFormat\u003c/code\u003e provides a code unit format based upon\n a common set of viewer Options for specific Tool.  The associated options correspond to\n the Browser Operand Fields category.",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.listing.CodeUnitFormat",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct code unit format for specified serviceProvider with autoUpdate enabled.",
      "javadoc": "Construct code unit format for specified serviceProvider with autoUpdate enabled.\n@param serviceProvider service provider (e.g., Tool)",
      "static": false,
      "params": [
        {
          "name": "serviceProvider",
          "type_long": "ghidra.framework.plugintool.ServiceProvider",
          "type_short": "ServiceProvider",
          "comment": "service provider (e.g., Tool)"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct code unit format for specified serviceProvider.",
      "javadoc": "Construct code unit format for specified serviceProvider.\n@param serviceProvider service provider (e.g., Tool)\n@param autoUpdate if true format will auto update if associated options are changed.",
      "static": false,
      "params": [
        {
          "name": "serviceProvider",
          "type_long": "ghidra.framework.plugintool.ServiceProvider",
          "type_short": "ServiceProvider",
          "comment": "service provider (e.g., Tool)"
        },
        {
          "name": "autoUpdate",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true format will auto update if associated options are changed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct code unit format for specified field options.\n This constructor must be used by the field factory since an OptionsService may\n not obtainable at the time they are constructed.",
      "javadoc": "Construct code unit format for specified field options.\n This constructor must be used by the field factory since an OptionsService may\n not obtainable at the time they are constructed.\n@param fieldOptions field options\n@param autoUpdate if true format will auto update if associated options are changed, in \n addition any listeners will be notified when this format is updated.",
      "static": false,
      "params": [
        {
          "name": "fieldOptions",
          "type_long": "ghidra.framework.options.ToolOptions",
          "type_short": "ToolOptions",
          "comment": "field options"
        },
        {
          "name": "autoUpdate",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true format will auto update if associated options are changed, in \n addition any listeners will be notified when this format is updated."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFieldOptions",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "serviceProvider",
          "type_long": "ghidra.framework.plugintool.ServiceProvider",
          "type_short": "ServiceProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.options.ToolOptions",
        "type_short": "ToolOptions",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addChangeListener",
      "comment": "Add a change listener to the underlying format options.  When a format change\n occurs the listener may wish to trigger a refresh of of any formatted code units.",
      "javadoc": "Add a change listener to the underlying format options.  When a format change\n occurs the listener may wish to trigger a refresh of of any formatted code units.\n@param listener change listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "change listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeChangeListener",
      "comment": "Remove an existing change listener from the underlying format options.",
      "javadoc": "Remove an existing change listener from the underlying format options.\n@param listener change listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "javax.swing.event.ChangeListener",
          "type_short": "ChangeListener",
          "comment": "change listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
