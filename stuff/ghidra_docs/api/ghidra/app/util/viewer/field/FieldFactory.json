{
  "name": "FieldFactory",
  "comment": "NOTE:  ALL FIELDFACTORY CLASSES MUST END IN \"FieldFactory\".  If not,\n the ClassSearcher will not find them.\n\n Base class for Field Factories.",
  "javadoc": "NOTE:  ALL FIELDFACTORY CLASSES MUST END IN \"FieldFactory\".  If not,\n the ClassSearcher will not find them.\n\n Base class for Field Factories.",
  "static": false,
  "implements": [
    "ghidra.util.classfinder.ExtensionPoint"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "FONT_OPTION_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"BASE FONT\""
    },
    {
      "name": "DEFAULT_FIELD_FONT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.awt.Font",
      "type_short": "Font",
      "constant_value": null
    },
    {
      "name": "model",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.format.FieldFormatModel",
      "type_short": "FieldFormatModel",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "startX",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "width",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "color",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "underlineColor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "defaultMetrics",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.FontMetrics",
      "type_short": "FontMetrics",
      "constant_value": null
    },
    {
      "name": "fontMetrics",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.FontMetrics[]",
      "type_short": "java.awt.FontMetrics[]",
      "constant_value": null
    },
    {
      "name": "baseFont",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Font",
      "type_short": "Font",
      "constant_value": null
    },
    {
      "name": "style",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "enabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "hlProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.HighlightProvider",
      "type_short": "HighlightProvider",
      "constant_value": null
    },
    {
      "name": "colorOptionName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "styleOptionName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "displayOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.options.Options",
      "type_short": "Options",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Base constructor",
      "javadoc": "Base constructor\n@param name the name of the field\n@param model the model that the field belongs to.\n@param highlightProvider the HightLightStringProvider.\n@param displayOptions the Options for display properties.\n@param fieldOptions the Options for field specific properties.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the field"
        },
        {
          "name": "model",
          "type_long": "ghidra.app.util.viewer.format.FieldFormatModel",
          "type_short": "FieldFormatModel",
          "comment": "the model that the field belongs to."
        },
        {
          "name": "highlightProvider",
          "type_long": "ghidra.app.util.HighlightProvider",
          "type_short": "HighlightProvider",
          "comment": "the HightLightStringProvider."
        },
        {
          "name": "displayOptions",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": "the Options for display properties."
        },
        {
          "name": "fieldOptions",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": "the Options for field specific properties."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initDisplayOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a FieldFactory with given name.  Used only as potential field.",
      "javadoc": "Constructs a FieldFactory with given name.  Used only as potential field.\n@param name the name of the field.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the field."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "optionsChanged",
      "comment": "Notification that the Options have changed.",
      "javadoc": "Notification that the Options have changed.\n@param options the Options object that changed. Will be either the display\n options or the field options.\n@param optionName the name of the property that changed.\n@param oldValue the old value of the property.\n@param newValue the new value of the property.",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": "the Options object that changed. Will be either the display\n options or the field options."
        },
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property that changed."
        },
        {
          "name": "oldValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the old value of the property."
        },
        {
          "name": "newValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the new value of the property."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "servicesChanged",
      "comment": "Notification the services changed. Subclasses should override this method\n if they care about service changes.",
      "javadoc": "Notification the services changed. Subclasses should override this method\n if they care about service changes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newInstance",
      "comment": "Returns a new instance of this FieldFactory that can be used to generate fields\n instead of being used as a prototype.",
      "javadoc": "Returns a new instance of this FieldFactory that can be used to generate fields\n instead of being used as a prototype.\n@param formatModel the model that the field belongs to.\n@param highlightProvider the HightLightProvider.\n@param options the Options for display properties.\n@param fieldOptions the Options for field specific properties.",
      "static": false,
      "params": [
        {
          "name": "formatModel",
          "type_long": "ghidra.app.util.viewer.format.FieldFormatModel",
          "type_short": "FieldFormatModel",
          "comment": "the model that the field belongs to."
        },
        {
          "name": "highlightProvider",
          "type_long": "ghidra.app.util.HighlightProvider",
          "type_short": "HighlightProvider",
          "comment": "the HightLightProvider."
        },
        {
          "name": "options",
          "type_long": "ghidra.framework.options.ToolOptions",
          "type_short": "ToolOptions",
          "comment": "the Options for display properties."
        },
        {
          "name": "fieldOptions",
          "type_long": "ghidra.framework.options.ToolOptions",
          "type_short": "ToolOptions",
          "comment": "the Options for field specific properties."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.viewer.field.FieldFactory",
        "type_short": "FieldFactory",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "displayOptionsChanged",
      "comment": "Notifications that the display options changed.",
      "javadoc": "Notifications that the display options changed.\n@param options the Display Options object that changed.\n@param optionName the name of the property that changed.\n@param oldValue the old value of the property.\n@param newValue the new value of the property.",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": "the Display Options object that changed."
        },
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property that changed."
        },
        {
          "name": "oldValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the old value of the property."
        },
        {
          "name": "newValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the new value of the property."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "fieldOptionsChanged",
      "comment": "Notifications that the field options changed.",
      "javadoc": "Notifications that the field options changed.\n@param options the Field Options object that changed.\n@param optionName the name of the property that changed.\n@param oldValue the old value of the property.\n@param newValue the new value of the property.",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.framework.options.Options",
          "type_short": "Options",
          "comment": "the Field Options object that changed."
        },
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property that changed."
        },
        {
          "name": "oldValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the old value of the property."
        },
        {
          "name": "newValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "the new value of the property."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFieldName",
      "comment": "Returns the Field name.",
      "javadoc": "Returns the Field name.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultColor",
      "comment": "Returns the default field color.",
      "javadoc": "Returns the default field color.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStartX",
      "comment": "Returns the starting x position for the fields generated by this\n factory.",
      "javadoc": "Returns the starting x position for the fields generated by this\n factory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStartX",
      "comment": "Sets the starting x position for the fields generated by this factory.",
      "javadoc": "Sets the starting x position for the fields generated by this factory.",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWidth",
      "comment": "Returns the width of the fields generated by this factory.",
      "javadoc": "Returns the width of the fields generated by this factory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setWidth",
      "comment": "Sets the width of the fields generated by this factory.",
      "javadoc": "Sets the width of the fields generated by this factory.",
      "static": false,
      "params": [
        {
          "name": "w",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFieldModel",
      "comment": "Returns the FieldModel that this factory belongs to.",
      "javadoc": "Returns the FieldModel that this factory belongs to.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.format.FieldFormatModel",
        "type_short": "FieldFormatModel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEnabled",
      "comment": "Returns true if this FieldFactory is currently enabled to generate Fields.",
      "javadoc": "Returns true if this FieldFactory is currently enabled to generate Fields.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setEnabled",
      "comment": "Turns on or off the generating of Fields by this FieldFactory.",
      "javadoc": "Turns on or off the generating of Fields by this FieldFactory.\n@param state if true, this factory will generate fields.",
      "static": false,
      "params": [
        {
          "name": "state",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, this factory will generate fields."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getField",
      "comment": "Generates a Field based on the given information.",
      "javadoc": "Generates a Field based on the given information.\n@param obj The object that the generated field will report some information about.\n@param varWidth the additional distance along the x axis to place the generated field.\n@return the newly generated FactoryField that shows some property or information about\n the given object.",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.app.util.viewer.proxy.ProxyObj\u003c?\u003e",
          "type_short": "ProxyObj",
          "comment": "The object that the generated field will report some information about."
        },
        {
          "name": "varWidth",
          "type_long": "int",
          "type_short": "int",
          "comment": "the additional distance along the x axis to place the generated field."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.viewer.field.ListingField",
        "type_short": "ListingField",
        "comment": "the newly generated FactoryField that shows some property or information about\n the given object."
      },
      "throws": []
    },
    {
      "name": "getFieldLocation",
      "comment": "Return a FieldLocation that corresponds to the given index, fieldNum, and ProgramLocation\n IF and ONLY IF the given programLocation is the type generated by this class\u0027s\n #getFieldLocation(ListingField, BigInteger, int, ProgramLocation).  Each FieldFactory\n should generate and process a unique ProgramLocation class.",
      "javadoc": "Return a FieldLocation that corresponds to the given index, fieldNum, and ProgramLocation\n IF and ONLY IF the given programLocation is the type generated by this class\u0027s\n {@link #getFieldLocation(ListingField, BigInteger, int, ProgramLocation)}.  Each FieldFactory\n should generate and process a unique ProgramLocation class.\n@param bf the ListingField at the current cursor.\n@param index the line index (corresponds to an address)\n@param fieldNum the index of field within the layout to try and get a FieldLocation.\n@param loc the ProgramLocation to be converted into a FieldLocation.",
      "static": false,
      "params": [
        {
          "name": "bf",
          "type_long": "ghidra.app.util.viewer.field.ListingField",
          "type_short": "ListingField",
          "comment": "the ListingField at the current cursor."
        },
        {
          "name": "index",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "the line index (corresponds to an address)"
        },
        {
          "name": "fieldNum",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of field within the layout to try and get a FieldLocation."
        },
        {
          "name": "loc",
          "type_long": "ghidra.program.util.ProgramLocation",
          "type_short": "ProgramLocation",
          "comment": "the ProgramLocation to be converted into a FieldLocation."
        }
      ],
      "return": {
        "type_long": "docking.widgets.fieldpanel.support.FieldLocation",
        "type_short": "FieldLocation",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgramLocation",
      "comment": "Returns the Program location for the given object, row, col, and groupPath",
      "javadoc": "Returns the Program location for the given object, row, col, and groupPath\n@param row the row within this field\n@param col the col on the given row within this field.\n@param bf the ListingField containing the cursor.",
      "static": false,
      "params": [
        {
          "name": "row",
          "type_long": "int",
          "type_short": "int",
          "comment": "the row within this field"
        },
        {
          "name": "col",
          "type_long": "int",
          "type_short": "int",
          "comment": "the col on the given row within this field."
        },
        {
          "name": "bf",
          "type_long": "ghidra.app.util.viewer.field.ListingField",
          "type_short": "ListingField",
          "comment": "the ListingField containing the cursor."
        }
      ],
      "return": {
        "type_long": "ghidra.program.util.ProgramLocation",
        "type_short": "ProgramLocation",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "acceptsType",
      "comment": "Used to specify which format models this field can belong to.",
      "javadoc": "Used to specify which format models this field can belong to.\n@param category the category for this field\n@param proxyObjectClass the type of proxy object used by this field\n@return true if this class accepts the given category.",
      "static": false,
      "params": [
        {
          "name": "category",
          "type_long": "int",
          "type_short": "int",
          "comment": "the category for this field"
        },
        {
          "name": "proxyObjectClass",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "the type of proxy object used by this field"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this class accepts the given category."
      },
      "throws": []
    },
    {
      "name": "hasSamePath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "bf",
          "type_long": "ghidra.app.util.viewer.field.ListingField",
          "type_short": "ListingField",
          "comment": ""
        },
        {
          "name": "loc",
          "type_long": "ghidra.program.util.ProgramLocation",
          "type_short": "ProgramLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFieldText",
      "comment": "Returns a description of the fields generated by this factory.",
      "javadoc": "Returns a description of the fields generated by this factory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMetrics",
      "comment": "Returns the font metrics used by this field factory",
      "javadoc": "Returns the font metrics used by this field factory",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.FontMetrics",
        "type_short": "FontMetrics",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMetrics",
      "comment": "",
      "javadoc": "@return Returns the metrics.",
      "static": false,
      "params": [
        {
          "name": "fontStyle",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.FontMetrics",
        "type_short": "FontMetrics",
        "comment": "Returns the metrics."
      },
      "throws": []
    },
    {
      "name": "setMetrics",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newFont",
          "type_long": "java.awt.Font",
          "type_short": "Font",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
