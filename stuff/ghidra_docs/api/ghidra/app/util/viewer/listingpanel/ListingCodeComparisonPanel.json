{
  "name": "ListingCodeComparisonPanel",
  "comment": "Panel that displays two listings for comparison.",
  "javadoc": "Panel that displays two listings for comparison.",
  "static": false,
  "implements": [
    "ghidra.app.util.viewer.format.FormatModelListener",
    "ghidra.app.services.CodeFormatService",
    "ghidra.app.util.viewer.listingpanel.ListingDiffChangeListener",
    "ghidra.framework.options.OptionsChangeListener"
  ],
  "extends": "ghidra.app.util.viewer.util.CodeComparisonPanel",
  "fields": [
    {
      "name": "DUAL_LISTING_HEADER_SHOWING",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"DUAL_LISTING_HEADER_SHOWING\""
    },
    {
      "name": "DUAL_LISTING_SIDE_BY_SIDE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"DUAL_LISTING_SIDE_BY_SIDE\""
    },
    {
      "name": "NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"DualListing\""
    },
    {
      "name": "TITLE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Listing View\""
    },
    {
      "name": "help",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "docking.help.HelpService",
      "type_short": "HelpService",
      "constant_value": null
    },
    {
      "name": "DUAL_LISTING_HELP_TOPIC",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"FunctionComparison\""
    },
    {
      "name": "DUAL_LISTING_ACTION_GROUP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"DualListing\""
    },
    {
      "name": "DIFF_NAVIGATE_GROUP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"A2_DiffNavigate\""
    },
    {
      "name": "HOVER_GROUP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"A5_Hovers\""
    },
    {
      "name": "PROPERTIES_GROUP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"B1_Properties\""
    },
    {
      "name": "NEXT_DIFF_ICON",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    },
    {
      "name": "PREVIOUS_DIFF_ICON",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    },
    {
      "name": "bothIcon",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    },
    {
      "name": "unmatchedIcon",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    },
    {
      "name": "diffsIcon",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    },
    {
      "name": "ALL_AREA_MARKERS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"All Area Markers\""
    },
    {
      "name": "UNMATCHED_AREA_MARKERS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Unmatched Area Markers\""
    },
    {
      "name": "DIFF_AREA_MARKERS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Diff Area Markers\""
    },
    {
      "name": "nextPreviousAreaType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "HOVER_ON_ICON",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    },
    {
      "name": "HOVER_OFF_ICON",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.Icon",
      "type_short": "Icon",
      "constant_value": null
    },
    {
      "name": "listingPanels",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingPanel[]",
      "type_short": "ghidra.app.util.viewer.listingpanel.ListingPanel[]",
      "constant_value": null
    },
    {
      "name": "listingDiff",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.ListingDiff",
      "type_short": "ListingDiff",
      "constant_value": null
    },
    {
      "name": "diffActionManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingDiffActionManager",
      "type_short": "ListingDiffActionManager",
      "constant_value": null
    },
    {
      "name": "dualListingServiceProviders",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.DualListingServiceProvider[]",
      "type_short": "ghidra.app.util.viewer.listingpanel.DualListingServiceProvider[]",
      "constant_value": null
    },
    {
      "name": "navigatables",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.DualListingNavigator[]",
      "type_short": "ghidra.app.util.viewer.listingpanel.DualListingNavigator[]",
      "constant_value": null
    },
    {
      "name": "fieldNavigators",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.util.FieldNavigator[]",
      "type_short": "ghidra.app.util.viewer.util.FieldNavigator[]",
      "constant_value": null
    },
    {
      "name": "indexMaps",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.util.AddressIndexMap[]",
      "type_short": "ghidra.app.util.viewer.util.AddressIndexMap[]",
      "constant_value": null
    },
    {
      "name": "addressSets",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSetView[]",
      "type_short": "ghidra.program.model.address.AddressSetView[]",
      "constant_value": null
    },
    {
      "name": "markerManagers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.core.marker.MarkerManager[]",
      "type_short": "ghidra.app.plugin.core.marker.MarkerManager[]",
      "constant_value": null
    },
    {
      "name": "unmatchedCodeMarkers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.services.MarkerSet[]",
      "type_short": "ghidra.app.services.MarkerSet[]",
      "constant_value": null
    },
    {
      "name": "diffMarkers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.services.MarkerSet[]",
      "type_short": "ghidra.app.services.MarkerSet[]",
      "constant_value": null
    },
    {
      "name": "currentCursorMarkers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.services.MarkerSet[]",
      "type_short": "ghidra.app.services.MarkerSet[]",
      "constant_value": null
    },
    {
      "name": "CURSOR_LINE_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "CURSOR_LOC_ICON",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.ImageIcon",
      "type_short": "ImageIcon",
      "constant_value": null
    },
    {
      "name": "cursorHighlightColor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "isShowingEntireListing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isSideBySide",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "fieldLocationChanging",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "leftLocationListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingCodeComparisonPanel.LeftLocationListener",
      "type_short": "LeftLocationListener",
      "constant_value": null
    },
    {
      "name": "rightLocationListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingCodeComparisonPanel.RightLocationListener",
      "type_short": "RightLocationListener",
      "constant_value": null
    },
    {
      "name": "toggleHeaderAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingCodeComparisonPanel.ToggleHeaderAction",
      "type_short": "ToggleHeaderAction",
      "constant_value": null
    },
    {
      "name": "toggleOrientationAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingCodeComparisonPanel.ToggleOrientationAction",
      "type_short": "ToggleOrientationAction",
      "constant_value": null
    },
    {
      "name": "toggleHoverAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingCodeComparisonPanel.ToggleHoverAction",
      "type_short": "ToggleHoverAction",
      "constant_value": null
    },
    {
      "name": "nextPreviousAreaMarkerAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingCodeComparisonPanel.NextPreviousAreaMarkerAction",
      "type_short": "NextPreviousAreaMarkerAction",
      "constant_value": null
    },
    {
      "name": "nextDiffAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingCodeComparisonPanel.NextDiffAction",
      "type_short": "NextDiffAction",
      "constant_value": null
    },
    {
      "name": "previousDiffAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingCodeComparisonPanel.PreviousDiffAction",
      "type_short": "PreviousDiffAction",
      "constant_value": null
    },
    {
      "name": "optionsAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingCodeComparisonPanel.ListingCodeComparisonOptionsAction",
      "type_short": "ListingCodeComparisonOptionsAction",
      "constant_value": null
    },
    {
      "name": "diffActions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "docking.action.DockingAction[]",
      "type_short": "docking.action.DockingAction[]",
      "constant_value": null
    },
    {
      "name": "applyFunctionSignatureAction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ApplyFunctionSignatureAction",
      "type_short": "ApplyFunctionSignatureAction",
      "constant_value": null
    },
    {
      "name": "splitPane",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "javax.swing.JSplitPane",
      "type_short": "JSplitPane",
      "constant_value": null
    },
    {
      "name": "leftDiffHighlightProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingDiffHighlightProvider",
      "type_short": "ListingDiffHighlightProvider",
      "constant_value": null
    },
    {
      "name": "rightDiffHighlightProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingDiffHighlightProvider",
      "type_short": "ListingDiffHighlightProvider",
      "constant_value": null
    },
    {
      "name": "correlator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.util.FunctionAddressCorrelation",
      "type_short": "FunctionAddressCorrelation",
      "constant_value": null
    },
    {
      "name": "adjustingLeftLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "adjustingRightLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "referenceHoverService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.core.codebrowser.hover.ReferenceListingHover",
      "type_short": "ReferenceListingHover",
      "constant_value": null
    },
    {
      "name": "dataTypeHoverService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.core.codebrowser.hover.DataTypeListingHover",
      "type_short": "DataTypeListingHover",
      "constant_value": null
    },
    {
      "name": "truncatedTextHoverService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.core.codebrowser.hover.TruncatedTextListingHover",
      "type_short": "TruncatedTextListingHover",
      "constant_value": null
    },
    {
      "name": "functionNameHoverService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.plugin.core.codebrowser.hover.FunctionNameListingHover",
      "type_short": "FunctionNameListingHover",
      "constant_value": null
    },
    {
      "name": "leftTitle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "rightTitle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "comparisonOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.ListingCodeComparisonOptions",
      "type_short": "ListingCodeComparisonOptions",
      "constant_value": null
    },
    {
      "name": "coordinatorLockedAddresses",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address[]",
      "type_short": "ghidra.program.model.address.Address[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a comparison panel with two listings.",
      "javadoc": "Creates a comparison panel with two listings.\n@param owner the owner of this panel\n@param tool the tool displaying this panel",
      "static": false,
      "params": [
        {
          "name": "owner",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the owner of this panel"
        },
        {
          "name": "tool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": "the tool displaying this panel"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "optionsChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.framework.options.ToolOptions",
          "type_short": "ToolOptions",
          "comment": ""
        },
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "oldValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "newValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "javax.swing.JComponent",
        "type_short": "JComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTitle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVisible",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "aFlag",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createFormatManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftOrRight",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.viewer.format.FormatManager",
        "type_short": "FormatManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeGoToServiceProviders",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeListingFieldPanels",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFieldPanelCoordinator",
      "comment": "Sets the coordinator for the two listings within this code comparison panel. It coordinates\n their scrolling and location synchronization.",
      "javadoc": "Sets the coordinator for the two listings within this code comparison panel. It coordinates\n their scrolling and location synchronization.\n@param listingFieldPanelCoordinator the coordinator for the two listings",
      "static": false,
      "params": [
        {
          "name": "listingFieldPanelCoordinator",
          "type_long": "ghidra.app.util.viewer.listingpanel.ListingComparisonFieldPanelCoordinator",
          "type_short": "ListingComparisonFieldPanelCoordinator",
          "comment": "the coordinator for the two listings"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addHighlightProviders",
      "comment": "Adds the indicated highlight providers for the left and right listing panels.",
      "javadoc": "Adds the indicated highlight providers for the left and right listing panels.\n@param leftHighlightProvider the highlight provider for the left side\u0027s listing.\n@param rightHighlightProvider the highlight provider for the right side\u0027s listing.",
      "static": false,
      "params": [
        {
          "name": "leftHighlightProvider",
          "type_long": "ghidra.app.util.HighlightProvider",
          "type_short": "HighlightProvider",
          "comment": "the highlight provider for the left side\u0027s listing."
        },
        {
          "name": "rightHighlightProvider",
          "type_long": "ghidra.app.util.HighlightProvider",
          "type_short": "HighlightProvider",
          "comment": "the highlight provider for the right side\u0027s listing."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addLeftHighlightProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftHighlightProvider",
          "type_long": "ghidra.app.util.HighlightProvider",
          "type_short": "HighlightProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addRightHighlightProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rightHighlightProvider",
          "type_long": "ghidra.app.util.HighlightProvider",
          "type_short": "HighlightProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeHighlightProviders",
      "comment": "Removes the indicated highlight providers from the left and right listing panels.",
      "javadoc": "Removes the indicated highlight providers from the left and right listing panels.\n@param leftHighlightProvider the highlight provider for the left side\u0027s listing.\n@param rightHighlightProvider the highlight provider for the right side\u0027s listing.",
      "static": false,
      "params": [
        {
          "name": "leftHighlightProvider",
          "type_long": "ghidra.app.util.HighlightProvider",
          "type_short": "HighlightProvider",
          "comment": "the highlight provider for the left side\u0027s listing."
        },
        {
          "name": "rightHighlightProvider",
          "type_long": "ghidra.app.util.HighlightProvider",
          "type_short": "HighlightProvider",
          "comment": "the highlight provider for the right side\u0027s listing."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeLeftHighlightProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftHighlightProvider",
          "type_long": "ghidra.app.util.HighlightProvider",
          "type_short": "HighlightProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeRightHighlightProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rightHighlightProvider",
          "type_long": "ghidra.app.util.HighlightProvider",
          "type_short": "HighlightProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPrograms",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "rightProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateLeftListingTitle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLeftProgramName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateRightListingTitle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRightProgramName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeListingFieldNavigation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeListingFieldNavigation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftOrRight",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFocusedNavigatable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.nav.Navigatable",
        "type_short": "Navigatable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeListingHoverService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initializeListingHoverService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftOrRight",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLeftProgramLocationListener",
      "comment": "Sets a listener for program location changes for the left side\u0027s listing panel.",
      "javadoc": "Sets a listener for program location changes for the left side\u0027s listing panel.\n@param programLocationListener the listener",
      "static": false,
      "params": [
        {
          "name": "programLocationListener",
          "type_long": "ghidra.app.util.viewer.listingpanel.ProgramLocationListener",
          "type_short": "ProgramLocationListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRightProgramLocationListener",
      "comment": "Sets a listener for program location changes for the right side\u0027s listing panel.",
      "javadoc": "Sets a listener for program location changes for the right side\u0027s listing panel.\n@param programLocationListener the listener",
      "static": false,
      "params": [
        {
          "name": "programLocationListener",
          "type_long": "ghidra.app.util.viewer.listingpanel.ProgramLocationListener",
          "type_short": "ProgramLocationListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createActions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getListingDiffActions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.DockingAction[]",
        "type_short": "docking.action.DockingAction[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getActions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.action.DockingAction[]",
        "type_short": "docking.action.DockingAction[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateActionEnablement",
      "comment": "Updates the enablement for all actions provided by this panel.",
      "javadoc": "Updates the enablement for all actions provided by this panel.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setHoverEnabled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValidPanelContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "context",
          "type_long": "docking.ActionContext",
          "type_short": "ActionContext",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "nextAreaDiff",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "currentUserData",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "outputNoNextPreviousMessage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "forward",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "isFirstListing",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCurrentAreaMarkerType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEntireListingShowing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showEntireListing",
      "comment": "Sets whether or not the entire programs are displayed in the listings or only\n the addresses in the limited set.",
      "javadoc": "Sets whether or not the entire programs are displayed in the listings or only\n the addresses in the limited set.\n@param show if true, the entire program will be shown. Otherwise the listings will only\n show the limited addresses.",
      "static": false,
      "params": [
        {
          "name": "show",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the entire program will be shown. Otherwise the listings will only\n show the limited addresses."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isHeaderShowing",
      "comment": "Determines if the listing\u0027s layout field header is currently showing.",
      "javadoc": "Determines if the listing\u0027s layout field header is currently showing.\n@return true if the header is showing.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the header is showing."
      },
      "throws": []
    },
    {
      "name": "setHeaderShowing",
      "comment": "Shows or hides the listing\u0027s layout field header.",
      "javadoc": "Shows or hides the listing\u0027s layout field header.\n@param show true means show the field header. false means hide the header.",
      "static": false,
      "params": [
        {
          "name": "show",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means show the field header. false means hide the header."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSideBySide",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "showSideBySide",
      "comment": "Sets whether or not the listings are displayed side by side.",
      "javadoc": "Sets whether or not the listings are displayed side by side.\n@param sideBySide if true, the listings are side by side, otherwise one is above the other.",
      "static": false,
      "params": [
        {
          "name": "sideBySide",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the listings are side by side, otherwise one is above the other."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadEntirePrograms",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadLimitedAddresses",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadFunctions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "rightFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLeftFunction",
      "comment": "Gets the function loaded in the left listing panel.",
      "javadoc": "Gets the function loaded in the left listing panel.\n@return the function or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "the function or null"
      },
      "throws": []
    },
    {
      "name": "getRightFunction",
      "comment": "Gets the function loaded in the right listing panel.",
      "javadoc": "Gets the function loaded in the right listing panel.\n@return the function or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": "the function or null"
      },
      "throws": []
    },
    {
      "name": "setFunctions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "rightFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadCursorArrow",
      "comment": "Establishes the location and display of the arrow cursor. This method should be called\n after the function comparison window is loaded with functions, data, etc.",
      "javadoc": "Establishes the location and display of the arrow cursor. This method should be called\n after the function comparison window is loaded with functions, data, etc.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgramLocation",
      "comment": "Gets an equivalent left side program location when given a right side program location or\n vice versa. The intent of this method is to translate a location from one side of the\n dual listing to an equivalent location for the other side if possible.",
      "javadoc": "Gets an equivalent left side program location when given a right side program location or\n vice versa. The intent of this method is to translate a location from one side of the\n dual listing to an equivalent location for the other side if possible.\n@param leftOrRight LEFT or RIGHT indicating which side\u0027s program location is needed.\n@param programLocation the program location for the other side.\n@return a program location for the desired side. Otherwise, null.",
      "static": false,
      "params": [
        {
          "name": "leftOrRight",
          "type_long": "int",
          "type_short": "int",
          "comment": "LEFT or RIGHT indicating which side\u0027s program location is needed."
        },
        {
          "name": "programLocation",
          "type_long": "ghidra.program.util.ProgramLocation",
          "type_short": "ProgramLocation",
          "comment": "the program location for the other side."
        }
      ],
      "return": {
        "type_long": "ghidra.program.util.ProgramLocation",
        "type_short": "ProgramLocation",
        "comment": "a program location for the desired side. Otherwise, null."
      },
      "throws": []
    },
    {
      "name": "adjustSymbolPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "saveState",
          "type_long": "ghidra.framework.options.SaveState",
          "type_short": "SaveState",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "desiredAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "byteAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "desiredByteAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "desiredProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "adjustSymbolRow",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "saveState",
          "type_long": "ghidra.framework.options.SaveState",
          "type_short": "SaveState",
          "comment": ""
        },
        {
          "name": "symbols",
          "type_long": "ghidra.program.model.symbol.Symbol[]",
          "type_short": "ghidra.program.model.symbol.Symbol[]",
          "comment": ""
        },
        {
          "name": "desiredSymbols",
          "type_long": "ghidra.program.model.symbol.Symbol[]",
          "type_short": "ghidra.program.model.symbol.Symbol[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDesiredSymbolIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "desiredSymbols",
          "type_long": "ghidra.program.model.symbol.Symbol[]",
          "type_short": "ghidra.program.model.symbol.Symbol[]",
          "comment": ""
        },
        {
          "name": "desiredRow",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbolPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "desiredSymbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.SymbolPath",
        "type_short": "SymbolPath",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "inferDesiredByteAddress",
      "comment": "Infers a desired byte address based on the specified byteAddress as well \n as the address and desiredAddress that were matched.",
      "javadoc": "Infers a desired byte address based on the specified \u003ccode\u003ebyteAddress\u003c/code\u003e as well \n as the \u003ccode\u003eaddress\u003c/code\u003e and \u003ccode\u003edesiredAddress\u003c/code\u003e that were matched.\n@param address matches up with the \u003ccode\u003edesiredAddress\u003c/code\u003e from the other function/data.\n@param desiredAddress matches up with the \u003ccode\u003eaddress\u003c/code\u003e from the other function/data.\n@param byteAddress the byte address that is associated with \u003ccode\u003eaddress\u003c/code\u003e\n@param program the program for the \u003ccode\u003eaddress\u003c/code\u003e and \u003ccode\u003ebyteAddress\u003c/code\u003e.\n@param desiredProgram the program for the \u003ccode\u003edesiredAddress\u003c/code\u003e and \n \u003ccode\u003edesiredByteAddress\u003c/code\u003e.\n@return the desired byte address that matches up with the indicated \u003ccode\u003ebyteAddress\u003c/code\u003e\n or null if it can\u0027t be determined.",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "matches up with the desiredAddress from the other function/data."
        },
        {
          "name": "desiredAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "matches up with the address from the other function/data."
        },
        {
          "name": "byteAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the byte address that is associated with address"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for the address and byteAddress."
        },
        {
          "name": "desiredProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for the desiredAddress and \n desiredByteAddress."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the desired byte address that matches up with the indicated byteAddress\n or null if it can\u0027t be determined."
      },
      "throws": []
    },
    {
      "name": "inferDesiredDataAddress",
      "comment": "This infers the desired byte address within Data based on the code units at \n codeUnitAddress and desiredCodeUnitAddress.\n The inferred address will be at an offset from the desiredCodeUnitAddress \n that is the same distance the byteAddress is from the codeUnitAddress.",
      "javadoc": "This infers the desired byte address within Data based on the code units at \n \u003ccode\u003ecodeUnitAddress\u003c/code\u003e and \u003ccode\u003edesiredCodeUnitAddress\u003c/code\u003e.\n The inferred address will be at an offset from the \u003ccode\u003edesiredCodeUnitAddress\u003c/code\u003e \n that is the same distance the \u003ccode\u003ebyteAddress\u003c/code\u003e is from the \u003ccode\u003ecodeUnitAddress\u003c/code\u003e.\n@param codeUnitAddress matches up with the \u003ccode\u003edesiredCodeUnitAddress\u003c/code\u003e from \n the other data.\n@param desiredCodeUnitAddress matches up with the \u003ccode\u003ecodeUnitAddress\u003c/code\u003e from \n the other data.\n@param byteAddress the byte address that is associated with \u003ccode\u003ecodeUnitAddress\u003c/code\u003e\n@param program the program for the \u003ccode\u003ecodeUnitAddress\u003c/code\u003e and \u003ccode\u003ebyteAddress\u003c/code\u003e.\n@param desiredProgram the program for the \u003ccode\u003edesiredCodeUnitAddress\u003c/code\u003e and \n \u003ccode\u003edesiredByteAddress\u003c/code\u003e.\n@return the desired byte address within the data that matches up with the indicated \n \u003ccode\u003ebyteAddress\u003c/code\u003e or null if it can\u0027t be determined.",
      "static": false,
      "params": [
        {
          "name": "codeUnitAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "matches up with the desiredCodeUnitAddress from \n the other data."
        },
        {
          "name": "desiredCodeUnitAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "matches up with the codeUnitAddress from \n the other data."
        },
        {
          "name": "byteAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the byte address that is associated with codeUnitAddress"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for the codeUnitAddress and byteAddress."
        },
        {
          "name": "desiredProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for the desiredCodeUnitAddress and \n desiredByteAddress."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the desired byte address within the data that matches up with the indicated \n byteAddress or null if it can\u0027t be determined."
      },
      "throws": []
    },
    {
      "name": "inferDesiredFunctionAddress",
      "comment": "This infers the desired byte address within a function based on the code units at \n address and desiredAddress.\n If the inferred address would be beyond the last byte of the code unit then it \n will get set to the last byte of the code unit at the desiredAddress.",
      "javadoc": "This infers the desired byte address within a function based on the code units at \n \u003ccode\u003eaddress\u003c/code\u003e and \u003ccode\u003edesiredAddress\u003c/code\u003e.\n If the inferred address would be beyond the last byte of the code unit then it \n will get set to the last byte of the code unit at the \u003ccode\u003edesiredAddress\u003c/code\u003e.\n@param address matches up with the \u003ccode\u003edesiredAddress\u003c/code\u003e from the other function.\n@param desiredAddress matches up with the \u003ccode\u003eaddress\u003c/code\u003e from the other function.\n@param byteAddress the byte address that is associated with \u003ccode\u003eaddress\u003c/code\u003e\n@param program the program for the \u003ccode\u003eaddress\u003c/code\u003e and \u003ccode\u003ebyteAddress\u003c/code\u003e.\n@param desiredProgram the program for the \u003ccode\u003edesiredAddress\u003c/code\u003e and \n \u003ccode\u003edesiredByteAddress\u003c/code\u003e.\n@return the desired byte address within the data that matches up with the indicated \n \u003ccode\u003ebyteAddress\u003c/code\u003e or null if it can\u0027t be determined.",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "matches up with the desiredAddress from the other function."
        },
        {
          "name": "desiredAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "matches up with the address from the other function."
        },
        {
          "name": "byteAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the byte address that is associated with address"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for the address and byteAddress."
        },
        {
          "name": "desiredProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for the desiredAddress and \n desiredByteAddress."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the desired byte address within the data that matches up with the indicated \n byteAddress or null if it can\u0027t be determined."
      },
      "throws": []
    },
    {
      "name": "getVariableLocation",
      "comment": "Gets an equivalent left side variable location when given a right side variable location or\n vice versa. The intent of this method is to translate a variable location from one side of\n the dual listing to an equivalent variable location for the other side if possible.",
      "javadoc": "Gets an equivalent left side variable location when given a right side variable location or\n vice versa. The intent of this method is to translate a variable location from one side of\n the dual listing to an equivalent variable location for the other side if possible.\n@param leftOrRight LEFT or RIGHT indicating which side\u0027s variable location is needed.\n@param variableLocation the variable location for the other side.\n@return a variable location for the desired side. Otherwise, null.",
      "static": false,
      "params": [
        {
          "name": "leftOrRight",
          "type_long": "int",
          "type_short": "int",
          "comment": "LEFT or RIGHT indicating which side\u0027s variable location is needed."
        },
        {
          "name": "variableLocation",
          "type_long": "ghidra.program.util.VariableLocation",
          "type_short": "VariableLocation",
          "comment": "the variable location for the other side."
        }
      ],
      "return": {
        "type_long": "ghidra.program.util.ProgramLocation",
        "type_short": "ProgramLocation",
        "comment": "a variable location for the desired side. Otherwise, null."
      },
      "throws": []
    },
    {
      "name": "clearMarkers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearUnmatchedCodeMarkers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearDiffMarkers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCursorMarkers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftOrRight",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "location",
          "type_long": "ghidra.program.util.ProgramLocation",
          "type_short": "ProgramLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearCursorMarkers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFunctionTitles",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionTitle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "function",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDataTitles",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTitle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "currentData",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setAddressesTitles",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressesTitle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addresses",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDiffHighlights",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFunctionComparisonDiffHighlights",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDiffAreaMarkers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setUnmatchedCodeUnitAreaMarkers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setupMarkerManagers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setupMarkerManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftOrRight",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setupAreaMarkerSets",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setupCursorMarkerSets",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doLoadFunctions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "rightFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "goToLeftFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "goToRightFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rightFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateLeftAddressSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateRightAddressSet",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rightFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadAddresses",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "rightProgram",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "leftAddresses",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "rightAddresses",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLocation",
      "comment": "Sets the cursor location in the left and right listing at the specified functions.",
      "javadoc": "Sets the cursor location in the left and right listing at the specified functions.\n@param leftFunction the function in the left listing panel.\n@param rightFunction the function in the right listing panel.",
      "static": false,
      "params": [
        {
          "name": "leftFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function in the left listing panel."
        },
        {
          "name": "rightFunction",
          "type_long": "ghidra.program.model.listing.Function",
          "type_short": "Function",
          "comment": "the function in the right listing panel."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLeftLocation",
      "comment": "Sets the cursor in the left side\u0027s listing to the specified location.",
      "javadoc": "Sets the cursor in the left side\u0027s listing to the specified location.\n@param program the left side\u0027s program\n@param location the location",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the left side\u0027s program"
        },
        {
          "name": "location",
          "type_long": "ghidra.program.util.ProgramLocation",
          "type_short": "ProgramLocation",
          "comment": "the location"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRightLocation",
      "comment": "Sets the cursor in the right side\u0027s listing to the specified location.",
      "javadoc": "Sets the cursor in the right side\u0027s listing to the specified location.\n@param program the right side\u0027s program\n@param location the location",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the right side\u0027s program"
        },
        {
          "name": "location",
          "type_long": "ghidra.program.util.ProgramLocation",
          "type_short": "ProgramLocation",
          "comment": "the location"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "goToLeftLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "location",
          "type_long": "ghidra.program.util.ProgramLocation",
          "type_short": "ProgramLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "goToRightLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "location",
          "type_long": "ghidra.program.util.ProgramLocation",
          "type_short": "ProgramLocation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTitle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "titlePanel",
          "type_long": "ghidra.app.util.viewer.util.TitledPanel",
          "type_short": "TitledPanel",
          "comment": ""
        },
        {
          "name": "titlePrefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "title",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setLeftTitle",
      "comment": "Sets the title for the left side\u0027s listing.",
      "javadoc": "Sets the title for the left side\u0027s listing.\n@param leftTitle the title",
      "static": false,
      "params": [
        {
          "name": "leftTitle",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRightTitle",
      "comment": "Sets the title for the right side\u0027s listing.",
      "javadoc": "Sets the title for the right side\u0027s listing.\n@param rightTitle the title",
      "static": false,
      "params": [
        {
          "name": "rightTitle",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the title"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTopComponent",
      "comment": "Sets the component displayed in the top of this panel.",
      "javadoc": "Sets the component displayed in the top of this panel.\n@param comp the component.",
      "static": false,
      "params": [
        {
          "name": "comp",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": "the component."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setBottomComponent",
      "comment": "Sets the component displayed in the bottom of this panel.",
      "javadoc": "Sets the component displayed in the bottom of this panel.\n@param comp the component.",
      "static": false,
      "params": [
        {
          "name": "comp",
          "type_long": "javax.swing.JComponent",
          "type_short": "JComponent",
          "comment": "the component."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFocusedProgram",
      "comment": "Gets the program from the left or right side that has or last had focus.",
      "javadoc": "Gets the program from the left or right side that has or last had focus.\n@return the program from the side of this panel with focus or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the program from the side of this panel with focus or null"
      },
      "throws": []
    },
    {
      "name": "getLeftProgram",
      "comment": "Gets the program in the left listing panel.",
      "javadoc": "Gets the program in the left listing panel.\n@return the left program or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the left program or null"
      },
      "throws": []
    },
    {
      "name": "getRightProgram",
      "comment": "Gets the program in the right listing panel.",
      "javadoc": "Gets the program in the right listing panel.\n@return the right program or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the right program or null"
      },
      "throws": []
    },
    {
      "name": "getLeftAddresses",
      "comment": "Gets the addresses in the left listing panel.",
      "javadoc": "Gets the addresses in the left listing panel.\n@return the addresses",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "the addresses"
      },
      "throws": []
    },
    {
      "name": "getRightAddresses",
      "comment": "Gets the addresses in the right listing panel.",
      "javadoc": "Gets the addresses in the right listing panel.\n@return the addresses",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSetView",
        "type_short": "AddressSetView",
        "comment": "the addresses"
      },
      "throws": []
    },
    {
      "name": "getFocusedListingPanel",
      "comment": "Get the left or right listing panel that has or last had focus.",
      "javadoc": "Get the left or right listing panel that has or last had focus.\n@return the listing panel with focus.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.listingpanel.ListingPanel",
        "type_short": "ListingPanel",
        "comment": "the listing panel with focus."
      },
      "throws": []
    },
    {
      "name": "getLeftPanel",
      "comment": "Get the left side\u0027s listing panel.",
      "javadoc": "Get the left side\u0027s listing panel.\n@return the left panel",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.listingpanel.ListingPanel",
        "type_short": "ListingPanel",
        "comment": "the left panel"
      },
      "throws": []
    },
    {
      "name": "getRightPanel",
      "comment": "Get the right side\u0027s listing panel.",
      "javadoc": "Get the right side\u0027s listing panel.\n@return the right panel",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.listingpanel.ListingPanel",
        "type_short": "ListingPanel",
        "comment": "the right panel"
      },
      "throws": []
    },
    {
      "name": "goTo",
      "comment": "Go to the indicated address in the listing that last had focus.",
      "javadoc": "Go to the indicated address in the listing that last had focus.\n@param addr the cursor should go to this address\n@return true if the location changed",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the cursor should go to this address"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the location changed"
      },
      "throws": []
    },
    {
      "name": "goTo",
      "comment": "Go to the indicated location in the listing that last had focus.",
      "javadoc": "Go to the indicated location in the listing that last had focus.\n@param loc the cursor should go to this location.\n@param centerOnScreen true indicates that the location should be centered in the listing\u0027s\n viewport.\n@return true if the location changed",
      "static": false,
      "params": [
        {
          "name": "loc",
          "type_long": "ghidra.program.util.ProgramLocation",
          "type_short": "ProgramLocation",
          "comment": "the cursor should go to this location."
        },
        {
          "name": "centerOnScreen",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates that the location should be centered in the listing\u0027s\n viewport."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the location changed"
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "focusGained",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.awt.event.FocusEvent",
          "type_short": "FocusEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDualPanelFocus",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftOrRight",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getActionContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": ""
        },
        {
          "name": "event",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "docking.ActionContext",
        "type_short": "ActionContext",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContextForMarginPanels",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "lp",
          "type_long": "ghidra.app.util.viewer.listingpanel.ListingPanel",
          "type_short": "ListingPanel",
          "comment": ""
        },
        {
          "name": "event",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addButtonPressedListener",
      "comment": "Adds the indicated button press listener to both listing panels in this code comparison panel.",
      "javadoc": "Adds the indicated button press listener to both listing panels in this code comparison panel.\n@param listener the listener",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.app.services.ButtonPressedListener",
          "type_short": "ButtonPressedListener",
          "comment": "the listener"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updateListings",
      "comment": "Repaints both the left and right listing panels if they are visible.",
      "javadoc": "Repaints both the left and right listing panels if they are visible.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Gets the indicated (LEFT or RIGHT) side\u0027s address that is equivalent to the other side\u0027s\n address.",
      "javadoc": "Gets the indicated (LEFT or RIGHT) side\u0027s address that is equivalent to the other side\u0027s\n address.\n@param leftOrRight LEFT or RIGHT indicating which side\u0027s address is needed.\n@param otherSidesAddress the address for the other side. If leftOrRight \u003d LEFT, then this\n should be a right side address. If leftOrRight \u003d RIGHT, then this should be a left side address.\n@return an address for the indicated side (LEFT or RIGHT) that is equivalent to the other\n side\u0027s address that is specified. Otherwise, null.",
      "static": false,
      "params": [
        {
          "name": "leftOrRight",
          "type_long": "int",
          "type_short": "int",
          "comment": "LEFT or RIGHT indicating which side\u0027s address is needed."
        },
        {
          "name": "otherSidesAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address for the other side. If leftOrRight \u003d LEFT, then this\n should be a right side address. If leftOrRight \u003d RIGHT, then this should be a left side address."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "an address for the indicated side (LEFT or RIGHT) that is equivalent to the other\n side\u0027s address that is specified. Otherwise, null."
      },
      "throws": []
    },
    {
      "name": "getFunctionAddress",
      "comment": "Gets an address in the program indicated by leftOrRight that matches the \n otherSidesAddress that is an address in a function in the other program.",
      "javadoc": "Gets an address in the program indicated by \u003ccode\u003eleftOrRight\u003c/code\u003e that matches the \n \u003ccode\u003eotherSidesAddress\u003c/code\u003e that is an address in a function in the other program.\n@param leftOrRight indicates whether to get the address from the LEFT or RIGHT program.\n@param otherSidesAddress address in the other program that is equivalent to the \n desired address.\n@return the matching address in the indicated program or null.",
      "static": false,
      "params": [
        {
          "name": "leftOrRight",
          "type_long": "int",
          "type_short": "int",
          "comment": "indicates whether to get the address from the LEFT or RIGHT program."
        },
        {
          "name": "otherSidesAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address in the other program that is equivalent to the \n desired address."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the matching address in the indicated program or null."
      },
      "throws": []
    },
    {
      "name": "getDataAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftOrRight",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "otherSidesAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isFunctionCompare",
      "comment": "Is this panel currently comparing a function match?",
      "javadoc": "Is this panel currently comparing a function match?\n@return true if comparing functions.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if comparing functions."
      },
      "throws": []
    },
    {
      "name": "isDataCompare",
      "comment": "Is this panel currently comparing a data match?",
      "javadoc": "Is this panel currently comparing a data match?\n@return true if comparing data.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if comparing data."
      },
      "throws": []
    },
    {
      "name": "getLeftCorrelatedAddress",
      "comment": "Gets the left side address that is equivalent to the indicated right side address.",
      "javadoc": "Gets the left side address that is equivalent to the indicated right side address.\n@param rightByteAddress the right side address\n@return the left side address or null.",
      "static": false,
      "params": [
        {
          "name": "rightByteAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the right side address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the left side address or null."
      },
      "throws": []
    },
    {
      "name": "getRightCorrelatedAddress",
      "comment": "Gets the right side address that is equivalent to the indicated left side address.",
      "javadoc": "Gets the right side address that is equivalent to the indicated left side address.\n@param leftByteAddress the left side address\n@return the right side address or null.",
      "static": false,
      "params": [
        {
          "name": "leftByteAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the left side address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the right side address or null."
      },
      "throws": []
    },
    {
      "name": "getLeftFunctionAddress",
      "comment": "Gets the left side function\u0027s entry point address.",
      "javadoc": "Gets the left side function\u0027s entry point address.\n@return the left side function\u0027s entry point address or null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the left side function\u0027s entry point address or null."
      },
      "throws": []
    },
    {
      "name": "getRightFunctionAddress",
      "comment": "Gets the right side function\u0027s entry point address.",
      "javadoc": "Gets the right side function\u0027s entry point address.\n@return the right side function\u0027s entry point address or null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the right side function\u0027s entry point address or null."
      },
      "throws": []
    },
    {
      "name": "getLeftDataAddress",
      "comment": "Gets the left side data\u0027s minimum address.",
      "javadoc": "Gets the left side data\u0027s minimum address.\n@return the left side data\u0027s minimum address or null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the left side data\u0027s minimum address or null."
      },
      "throws": []
    },
    {
      "name": "getRightDataAddress",
      "comment": "Gets the right side data\u0027s minimum address.",
      "javadoc": "Gets the right side data\u0027s minimum address.\n@return the right side data\u0027s minimum address or null.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the right side data\u0027s minimum address or null."
      },
      "throws": []
    },
    {
      "name": "formatModelAdded",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "ghidra.app.util.viewer.format.FieldFormatModel",
          "type_short": "FieldFormatModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "formatModelChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "ghidra.app.util.viewer.format.FieldFormatModel",
          "type_short": "FieldFormatModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "formatModelRemoved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "ghidra.app.util.viewer.format.FieldFormatModel",
          "type_short": "FieldFormatModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "changeRightToMatchLeftFormat",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "model",
          "type_long": "ghidra.app.util.viewer.format.FieldFormatModel",
          "type_short": "FieldFormatModel",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getListingPanel",
      "comment": "Gets the left or right listing panel that contains the indicated field panel.",
      "javadoc": "Gets the left or right listing panel that contains the indicated field panel.\n@param fieldPanel the field panel\n@return the listing panel or null.",
      "static": false,
      "params": [
        {
          "name": "fieldPanel",
          "type_long": "docking.widgets.fieldpanel.FieldPanel",
          "type_short": "FieldPanel",
          "comment": "the field panel"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.viewer.listingpanel.ListingPanel",
        "type_short": "ListingPanel",
        "comment": "the listing panel or null."
      },
      "throws": []
    },
    {
      "name": "getFormatManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.format.FormatManager",
        "type_short": "FormatManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMouseNavigationEnabled",
      "comment": "Disable mouse navigation from within this dual listing panel.",
      "javadoc": "Disable mouse navigation from within this dual listing panel.\n@param enabled false disables navigation",
      "static": false,
      "params": [
        {
          "name": "enabled",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "false disables navigation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftData",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": ""
        },
        {
          "name": "rightData",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaxOffset",
      "comment": "Gets the maximum offset based on the larger data that is passed to this method.",
      "javadoc": "Gets the maximum offset based on the larger data that is passed to this method.\n@param leftData the left view\u0027s data\n@param rightData the right view\u0027s data\n@return the maximum offset (one less than the larger data item\u0027s size).",
      "static": false,
      "params": [
        {
          "name": "leftData",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": "the left view\u0027s data"
        },
        {
          "name": "rightData",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": "the right view\u0027s data"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the maximum offset (one less than the larger data item\u0027s size)."
      },
      "throws": []
    },
    {
      "name": "getEndAddress",
      "comment": "Gets the ending address to be displayed. It tries to get an ending address that is\n maxOffset number of bytes beyond the minAddress without leaving the memory block\n that contains the minAddress. If the maxOffset is beyond the end of the block then\n the end of the block is returned. For an externalAddress the minAddress is returned.",
      "javadoc": "Gets the ending address to be displayed. It tries to get an ending address that is\n maxOffset number of bytes beyond the minAddress without leaving the memory block\n that contains the minAddress. If the maxOffset is beyond the end of the block then\n the end of the block is returned. For an externalAddress the minAddress is returned.\n@param program the program containing the data\n@param maxOffset the max offset\n@param minAddress the minimum address of the data\n@return the end address to display",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the data"
        },
        {
          "name": "maxOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "the max offset"
        },
        {
          "name": "minAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the minimum address of the data"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the end address to display"
      },
      "throws": []
    },
    {
      "name": "clearCorrelation",
      "comment": "Clears the address correlation being used with the ListingDiff and the dual listing\n field panel coordinator.",
      "javadoc": "Clears the address correlation being used with the ListingDiff and the dual listing\n field panel coordinator.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLeftData",
      "comment": "Gets the data loaded in the left listing panel.",
      "javadoc": "Gets the data loaded in the left listing panel.\n@return the data or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the data or null"
      },
      "throws": []
    },
    {
      "name": "getRightData",
      "comment": "Gets the data loaded in the right listing panel.",
      "javadoc": "Gets the data loaded in the right listing panel.\n@return the data or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": "the data or null"
      },
      "throws": []
    },
    {
      "name": "getPanelThisSupersedes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Class\u003c? extends ghidra.app.util.viewer.util.CodeComparisonPanel\u003cghidra.app.util.viewer.listingpanel.ListingComparisonFieldPanelCoordinator\u003e\u003e",
        "type_short": "Class",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "listingDiffChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStatusInfo",
      "comment": "Displays the indicated text int the tool\u0027s status area.",
      "javadoc": "Displays the indicated text int the tool\u0027s status area.\n@param text the message to display",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the message to display"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "refreshLeftPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "refreshRightPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "programRestored",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "leftPanelHasFocus",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTitlePrefixes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "leftTitlePrefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "rightTitlePrefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGoToService",
      "comment": "Gets the GoToService that is used for either the left listing or the right listing.",
      "javadoc": "Gets the GoToService that is used for either the left listing or the right listing.\n@param isLeftSide true means get the GoToService for the left side listing.\n false means get it for the right side listing.\n@return the goToService",
      "static": false,
      "params": [
        {
          "name": "isLeftSide",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means get the GoToService for the left side listing.\n false means get it for the right side listing."
        }
      ],
      "return": {
        "type_long": "ghidra.app.services.GoToService",
        "type_short": "GoToService",
        "comment": "the goToService"
      },
      "throws": []
    },
    {
      "name": "getActionContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "event",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": ""
        },
        {
          "name": "provider",
          "type_long": "docking.ComponentProvider",
          "type_short": "ComponentProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "docking.ActionContext",
        "type_short": "ActionContext",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContextObjectForMarginPanels",
      "comment": "Gets a marker margin or overview margin context object if the mouse event occurred on one\n of the GUI components for the indicated listing panel\u0027s marker margin (left edge of listing)\n or overview margin (right edge of listing).",
      "javadoc": "Gets a marker margin or overview margin context object if the mouse event occurred on one\n of the GUI components for the indicated listing panel\u0027s marker margin (left edge of listing)\n or overview margin (right edge of listing).\n@param lp The listing panel to check\n@param event the mouse event\n@return a marker margin context object if the event was on a margin.",
      "static": false,
      "params": [
        {
          "name": "lp",
          "type_long": "ghidra.app.util.viewer.listingpanel.ListingPanel",
          "type_short": "ListingPanel",
          "comment": "The listing panel to check"
        },
        {
          "name": "event",
          "type_long": "java.awt.event.MouseEvent",
          "type_short": "MouseEvent",
          "comment": "the mouse event"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "a marker margin context object if the event was on a margin."
      },
      "throws": []
    },
    {
      "name": "getLeftFieldPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.fieldpanel.FieldPanel",
        "type_short": "FieldPanel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRightFieldPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "docking.widgets.fieldpanel.FieldPanel",
        "type_short": "FieldPanel",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createFieldPanelCoordinator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.viewer.listingpanel.ListingComparisonFieldPanelCoordinator",
        "type_short": "ListingComparisonFieldPanelCoordinator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readConfigState",
      "comment": "Restores this panel to the indicated saved configuration state.",
      "javadoc": "Restores this panel to the indicated saved configuration state.\n@param prefix identifier to prepend to any save state names to make them unique.\n@param saveState the configuration state to restore",
      "static": false,
      "params": [
        {
          "name": "prefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "identifier to prepend to any save state names to make them unique."
        },
        {
          "name": "saveState",
          "type_long": "ghidra.framework.options.SaveState",
          "type_short": "SaveState",
          "comment": "the configuration state to restore"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "writeConfigState",
      "comment": "Saves the current configuration state of this panel.",
      "javadoc": "Saves the current configuration state of this panel.\n@param prefix identifier to prepend to any save state names to make them unique.\n@param saveState the new configuration state",
      "static": false,
      "params": [
        {
          "name": "prefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "identifier to prepend to any save state names to make them unique."
        },
        {
          "name": "saveState",
          "type_long": "ghidra.framework.options.SaveState",
          "type_short": "SaveState",
          "comment": "the new configuration state"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setScrollingSyncState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "syncScrolling",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasMatchingLocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "saveCoordinatorState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "restoreCoordinatorState",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
