{
  "name": "DualListingServiceProvider",
  "comment": "This provides services, but overrides and implements its own goTo for one of the listing \n panels in a dual listing code comparison panel.\n If a goTo service is requested, this provides a goTo service that limits where you can go.\n It constrains the goTo to addresses that are currently in the indicated listing panel of \n the dual listing code comparison panel.",
  "javadoc": "This provides services, but overrides and implements its own goTo for one of the listing \n panels in a dual listing code comparison panel.\n If a goTo service is requested, this provides a goTo service that limits where you can go.\n It constrains the goTo to addresses that are currently in the indicated listing panel of \n the dual listing code comparison panel.",
  "static": false,
  "implements": [
    "ghidra.framework.plugintool.ServiceProvider"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "serviceProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.ServiceProvider",
      "type_short": "ServiceProvider",
      "constant_value": null
    },
    {
      "name": "dualListingGoToService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.viewer.listingpanel.DualListingGoToService",
      "type_short": "DualListingGoToService",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor for a DualListingServiceProvider.",
      "javadoc": "Constructor for a DualListingServiceProvider.\n@param serviceProvider the service provider to use for acquiring services other than goTo.\n@param panel the dual listing code comparison panel.\n@param isLeftPanel true indicates this is the left listing panel of the dual panel. \n false indicates the right panel.",
      "static": false,
      "params": [
        {
          "name": "serviceProvider",
          "type_long": "ghidra.framework.plugintool.ServiceProvider",
          "type_short": "ServiceProvider",
          "comment": "the service provider to use for acquiring services other than goTo."
        },
        {
          "name": "panel",
          "type_long": "ghidra.app.util.viewer.listingpanel.ListingCodeComparisonPanel",
          "type_short": "ListingCodeComparisonPanel",
          "comment": "the dual listing code comparison panel."
        },
        {
          "name": "isLeftPanel",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates this is the left listing panel of the dual panel. \n false indicates the right panel."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addServiceListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.plugintool.util.ServiceListener",
          "type_short": "ServiceListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getService",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "serviceClass",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeServiceListener",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "listener",
          "type_long": "ghidra.framework.plugintool.util.ServiceListener",
          "type_short": "ServiceListener",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
