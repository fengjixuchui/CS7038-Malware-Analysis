{
  "name": "DecompilerConcurrentQ",
  "comment": "A class to perform some of the boilerplate setup of the ConcurrentQ that is shared\n amongst clients that perform decompilation in parallel.\n \n This class can be used in a blocking or non-blocking fashion.  \n \n \n \t\tFor blocking usage, call\n \t\tone of the  methods to put items in the queue and then call \n \t\t#waitForResults().  \n \t\tFor non-blocking usage, simply call \n \t\t#process(Iterator, Consumer), passing the consumer of the results.\n \n ",
  "javadoc": "A class to perform some of the boilerplate setup of the {@link ConcurrentQ} that is shared\n amongst clients that perform decompilation in parallel.\n \n \u003cp\u003eThis class can be used in a blocking or non-blocking fashion.  \n \n \u003cul\u003e\n \t\t\u003cli\u003eFor blocking usage, call\n \t\tone of the \u003cu\u003e{@code add}\u003c/u\u003e methods to put items in the queue and then call \n \t\t{@link #waitForResults()}.\u003c/li\u003e  \n \t\t\u003cli\u003eFor non-blocking usage, simply call \n \t\t{@link #process(Iterator, Consumer)}, passing the consumer of the results.\u003c/li\u003e\n \u003c/ol\u003e\n \u003cp\u003e\n@param \u003cI\u003e The input data needed by the supplied {@link QCallback}\n@param \u003cR\u003e The result data (can be the same as {@code I} if there is no result) returned\n            by the {@link QCallback#process(Object, TaskMonitor)} method.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "queue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.concurrent.ConcurrentQ\u003cI,R\u003e",
      "type_short": "ConcurrentQ",
      "constant_value": null
    },
    {
      "name": "resultConsumer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.function.Consumer\u003cR\u003e",
      "type_short": "Consumer",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "callback",
          "type_long": "generic.concurrent.QCallback\u003cI,R\u003e",
          "type_short": "QCallback",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "callback",
          "type_long": "generic.concurrent.QCallback\u003cI,R\u003e",
          "type_short": "QCallback",
          "comment": ""
        },
        {
          "name": "threadPoolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "callback",
          "type_long": "generic.concurrent.QCallback\u003cI,R\u003e",
          "type_short": "QCallback",
          "comment": ""
        },
        {
          "name": "pool",
          "type_long": "generic.concurrent.GThreadPool",
          "type_short": "GThreadPool",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addAll",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "collection",
          "type_long": "java.util.Collection\u003cI\u003e",
          "type_short": "Collection",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addAll",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "iterator",
          "type_long": "java.util.Iterator\u003cI\u003e",
          "type_short": "Iterator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "I",
          "type_short": "I",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "process",
      "comment": "Adds all items to the queue for processing.  The results will be passed to the given consumer\n as they are produced.",
      "javadoc": "Adds all items to the queue for processing.  The results will be passed to the given consumer\n as they are produced.\n@param functions the functions to process\n@param consumer the results consumer",
      "static": false,
      "params": [
        {
          "name": "functions",
          "type_long": "java.util.Iterator\u003cI\u003e",
          "type_short": "Iterator",
          "comment": "the functions to process"
        },
        {
          "name": "consumer",
          "type_long": "java.util.function.Consumer\u003cR\u003e",
          "type_short": "Consumer",
          "comment": "the results consumer"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "waitForResults",
      "comment": "Waits for all results to be delivered.  The client is responsible for processing the\n results and handling any exceptions that may have occurred.",
      "javadoc": "Waits for all results to be delivered.  The client is responsible for processing the\n results and handling any exceptions that may have occurred.\n@return all results\n@throws InterruptedException if interrupted while waiting",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cgeneric.concurrent.QResult\u003cI,R\u003e\u003e",
        "type_short": "Collection",
        "comment": "all results"
      },
      "throws": [
        {
          "type_long": "java.lang.InterruptedException",
          "type_short": "InterruptedException",
          "comment": "if interrupted while waiting"
        }
      ]
    },
    {
      "name": "waitUntilDone",
      "comment": "Waits for all work to finish. Any exception encountered will trigger all processing to \n stop.  If you wish for the work to continue despite exceptions, then use \n #waitForResults().",
      "javadoc": "Waits for all work to finish. Any exception encountered will trigger all processing to \n stop.  If you wish for the work to continue despite exceptions, then use \n {@link #waitForResults()}.\n@throws InterruptedException if interrupted while waiting\n@throws Exception any exception that is encountered while processing items.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.InterruptedException",
          "type_short": "InterruptedException",
          "comment": "if interrupted while waiting"
        },
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "any exception that is encountered while processing items."
        }
      ]
    },
    {
      "name": "dispose",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "Calls dispose on the queue being processed.  Further, the call will block for up to \n timeoutSeconds while waiting for the queue to finish processing.",
      "javadoc": "Calls dispose on the queue being processed.  Further, the call will block for up to \n \u003ctt\u003etimeoutSeconds\u003c/tt\u003e while waiting for the queue to finish processing.\n@param timeoutSeconds the number of seconds to wait for the disposed queue to finish\n        processing",
      "static": false,
      "params": [
        {
          "name": "timeoutSeconds",
          "type_long": "long",
          "type_short": "long",
          "comment": "the number of seconds to wait for the disposed queue to finish\n        processing"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
