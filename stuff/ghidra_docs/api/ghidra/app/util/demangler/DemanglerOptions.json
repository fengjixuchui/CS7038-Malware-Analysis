{
  "name": "DemanglerOptions",
  "comment": "A simple class to contain the various settings for demangling",
  "javadoc": "A simple class to contain the various settings for demangling",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "applySignature",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "doDisassembly",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "demangleOnlyKnownPatterns",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "copy",
          "type_long": "ghidra.app.util.demangler.DemanglerOptions",
          "type_short": "DemanglerOptions",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applySignature",
      "comment": "Checks if the apply signature option is currently set",
      "javadoc": "Checks if the apply signature option is currently set\n@return true if set to apply function signatures that are demangled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if set to apply function signatures that are demangled"
      },
      "throws": []
    },
    {
      "name": "setApplySignature",
      "comment": "Set the option to apply function signatures that are demangled",
      "javadoc": "Set the option to apply function signatures that are demangled\n@param applySignature true to apply function signatures that are demangled",
      "static": false,
      "params": [
        {
          "name": "applySignature",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to apply function signatures that are demangled"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "doDisassembly",
      "comment": "Checks if the option to perform disassembly for known data structures (like functions) when\n demangling is set",
      "javadoc": "Checks if the option to perform disassembly for known data structures (like functions) when\n demangling is set\n@return true if the option is set",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the option is set"
      },
      "throws": []
    },
    {
      "name": "setDoDisassembly",
      "comment": "Sets the option to perform disassembly for known data structures (like functions) when\n demangling",
      "javadoc": "Sets the option to perform disassembly for known data structures (like functions) when\n demangling\n@param doDisassembly true to perform disassembly when demangling",
      "static": false,
      "params": [
        {
          "name": "doDisassembly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to perform disassembly when demangling"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "demangleOnlyKnownPatterns",
      "comment": "Checks if the option to only demangle known mangled patterns is set",
      "javadoc": "Checks if the option to only demangle known mangled patterns is set\n@return true if only known mangled patterns will be demangled",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if only known mangled patterns will be demangled"
      },
      "throws": []
    },
    {
      "name": "setDemangleOnlyKnownPatterns",
      "comment": "Sets the option to only demangle known mangled patterns. Setting this to false causes\n most symbols to be demangled, which may result in some symbols getting demangled that were\n not actually mangled symbols.\n\n Generally, a demangler will report an error if a symbol fails to demangle.   Hence,\n clients can use this flag to prevent such errors, signalling to the demangler to only\n attempt those symbols that have a known start pattern.  If the known start pattern list\n becomes comprehensive, then this flag can go away.",
      "javadoc": "Sets the option to only demangle known mangled patterns. Setting this to false causes\n most symbols to be demangled, which may result in some symbols getting demangled that were\n not actually mangled symbols.\n\n \u003cP\u003eGenerally, a demangler will report an error if a symbol fails to demangle.   Hence,\n clients can use this flag to prevent such errors, signalling to the demangler to only\n attempt those symbols that have a known start pattern.  If the known start pattern list\n becomes comprehensive, then this flag can go away.\n@param demangleOnlyKnownPatterns true to only demangle known mangled patterns",
      "static": false,
      "params": [
        {
          "name": "demangleOnlyKnownPatterns",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to only demangle known mangled patterns"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
