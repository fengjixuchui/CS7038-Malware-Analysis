{
  "name": "DemangledString",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.util.demangler.DemangledObject",
  "fields": [
    {
      "name": "string",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "unicode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct demangled string.",
      "javadoc": "Construct demangled string.\n@param mangled the source mangled string\n@param originalDemangled the original demangled string\n@param name name associated with this object\n@param string string text associated with this object or null.  This is used to establish\n label and plate comment if specified.  If null, name will be used as symbol name.\n@param length length of string or -1.  Actual string data type applied currently\n assumes null terminated string.\n@param unicode true if string is a Unicode string.",
      "static": false,
      "params": [
        {
          "name": "mangled",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the source mangled string"
        },
        {
          "name": "originalDemangled",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the original demangled string"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name associated with this object"
        },
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string text associated with this object or null.  This is used to establish\n label and plate comment if specified.  If null, name will be used as symbol name."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "length of string or -1.  Actual string data type applied currently\n assumes null terminated string."
        },
        {
          "name": "unicode",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if string is a Unicode string."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSignature",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "format",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasLabel",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "ghidra.app.util.demangler.DemanglerOptions",
          "type_short": "DemanglerOptions",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "buildStringLabel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getString",
      "comment": "Returns the demangled string.",
      "javadoc": "Returns the demangled string.\n@return the demangled string",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the demangled string"
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Returns the length in bytes of the demangled string.",
      "javadoc": "Returns the length in bytes of the demangled string.\n@return the length in bytes of the demangled string",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length in bytes of the demangled string"
      },
      "throws": []
    },
    {
      "name": "isUnicode",
      "comment": "Returns true if the demangled string is unicode.",
      "javadoc": "Returns true if the demangled string is unicode.\n@return true if the demangled string is unicode",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the demangled string is unicode"
      },
      "throws": []
    }
  ]
}
