{
  "name": "DemangledObject",
  "comment": "A class to represent a demangled object.",
  "javadoc": "A class to represent a demangled object.",
  "static": false,
  "implements": [
    "ghidra.app.util.demangler.Demangled"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "SPACE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\" \""
    },
    {
      "name": "SPACE_PATTERN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.regex.Pattern",
      "type_short": "Pattern",
      "constant_value": null
    },
    {
      "name": "NAMESPACE_SEPARATOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"::\""
    },
    {
      "name": "EMPTY_STRING",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\""
    },
    {
      "name": "mangled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "originalDemangled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "specialPrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "namespace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.demangler.Demangled",
      "type_short": "Demangled",
      "constant_value": null
    },
    {
      "name": "visibility",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "storageClass",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "isStatic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isVirtual",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "demangledName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "isConst",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isVolatile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isPointer64",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isThunk",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isUnaligned",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isRestrict",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "basedName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "memberScope",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "plateComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "demangledNameSucceeded",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "mangled",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "originalDemangled",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDemangledName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isConst",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setConst",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "isConst",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isVolatile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVolatile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "isVolatile",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPointer64",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPointer64",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "isPointer64",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isStatic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStatic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "isStatic",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isVirtual",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVirtual",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "isVirtual",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isThunk",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setThunk",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "isThunk",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setUnaligned",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isUnaligned",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRestrict",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isRestrict",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBasedName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setBasedName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "basedName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMemberScope",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMemberScope",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "memberScope",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setName",
      "comment": "Sets the name of the demangled object",
      "javadoc": "Sets the name of the demangled object\n@param name the new name",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the new name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "demangledNameSuccessfully",
      "comment": "Returns the success state of converting a mangled String into a demangled String",
      "javadoc": "Returns the success state of converting a mangled String into a demangled String\n@return true succeeded creating demangled String",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true succeeded creating demangled String"
      },
      "throws": []
    },
    {
      "name": "getMangledString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOriginalDemangled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNamespace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.demangler.Demangled",
        "type_short": "Demangled",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setNamespace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "namespace",
          "type_long": "ghidra.app.util.demangler.Demangled",
          "type_short": "Demangled",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVisibility",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVisibilty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "visibility",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStorageClass",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStorageClass",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "storageClass",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSpecialPrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSpecialPrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "special",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSignature",
      "comment": "Returns a complete signature for the demangled symbol.\n For example:\n            \"unsigned long foo\"\n            \"unsigned char * ClassA::getFoo(float, short *)\"\n            \"void * getBar(int **, MyStruct )\"\n Note: based on the underlying mangling scheme, the\n return type may or may not be specified in the signature.",
      "javadoc": "Returns a complete signature for the demangled symbol.\n \u003cbr\u003eFor example:\n            \"unsigned long foo\"\n            \"unsigned char * ClassA::getFoo(float, short *)\"\n            \"void * getBar(int **, MyStruct \u0026amp;)\"\n \u003cbr\u003e\u003cb\u003eNote: based on the underlying mangling scheme, the\n return type may or may not be specified in the signature.\u003c/b\u003e\n@param format true if signature should be pretty printed\n@return a complete signature for the demangled symbol",
      "static": false,
      "params": [
        {
          "name": "format",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if signature should be pretty printed"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a complete signature for the demangled symbol"
      },
      "throws": []
    },
    {
      "name": "getSignature",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNamespaceName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNamespaceString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isAlreadyDemangled",
      "comment": "Determine if the symbol at address has already been demangled.  While memory symbols\n check for presence of demangledName, external symbols simply check if demangled/alternate\n name has already been assigned.",
      "javadoc": "Determine if the symbol at address has already been demangled.  While memory symbols\n check for presence of demangledName, external symbols simply check if demangled/alternate\n name has already been assigned.\n@param program the program being modified\n@param address address of demangled symbol\n@return true if symbol at address has already been demangled",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program being modified"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of demangled symbol"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if symbol at address has already been demangled"
      },
      "throws": []
    },
    {
      "name": "applyTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "ghidra.app.util.demangler.DemanglerOptions",
          "type_short": "DemanglerOptions",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "applyPlateCommentOnly",
      "comment": "",
      "javadoc": "@param program The program for which to apply the comment\n@param address The address for the comment\n@return {@code true} if a comment was applied\n@throws Exception if the symbol could not be demangled or if the address is invalid",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program for which to apply the comment"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The address for the comment"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": " if a comment was applied"
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if the symbol could not be demangled or if the address is invalid"
        }
      ]
    },
    {
      "name": "setBackupPlateComment",
      "comment": "Sets the plate comment to be used if the #getOriginalDemangled() string is not \n available",
      "javadoc": "Sets the plate comment to be used if the {@link #getOriginalDemangled()} string is not \n available\n@param plateComment the plate comment text",
      "static": false,
      "params": [
        {
          "name": "plateComment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the plate comment text"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generatePlateComment",
      "comment": "Creates descriptive text that is intended to be used as documentation.  The text defaults\n to the original demangled text.  If that is not available, then any text set by\n #setBackupPlateComment(String) will be used.  The last choice for this text is\n the signature generated by #getSignature(boolean).",
      "javadoc": "Creates descriptive text that is intended to be used as documentation.  The text defaults\n to the original demangled text.  If that is not available, then any text set by\n {@link #setBackupPlateComment(String)} will be used.  The last choice for this text is\n the signature generated by {@link #getSignature(boolean)}.\n@return the text",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the text"
      },
      "throws": []
    },
    {
      "name": "applyDemangledName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "setPrimary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "functionNamespacePermitted",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "applyDemangledName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "symbolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "setPrimary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "functionNamespacePermitted",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "updateExternalSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "externalAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "symbolName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "demangledNamespace",
          "type_long": "ghidra.app.util.demangler.Demangled",
          "type_short": "Demangled",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNamespaceList",
      "comment": "Build namespace name list",
      "javadoc": "Build namespace name list\n@param typeNamespace demangled namespace object\n@return list of namespace names",
      "static": true,
      "params": [
        {
          "name": "typeNamespace",
          "type_long": "ghidra.app.util.demangler.Demangled",
          "type_short": "Demangled",
          "comment": "demangled namespace object"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "list of namespace names"
      },
      "throws": []
    },
    {
      "name": "createNamespace",
      "comment": "Get or create the specified typeNamespace.  The returned namespace may only be a partial\n namespace if errors occurred.  The caller should check the returned namespace and adjust\n any symbol creation accordingly.",
      "javadoc": "Get or create the specified typeNamespace.  The returned namespace may only be a partial\n namespace if errors occurred.  The caller should check the returned namespace and adjust\n any symbol creation accordingly.\n@param program the program\n@param typeNamespace demangled namespace\n@param parentNamespace root namespace to be used (e.g., library, global, etc.)\n@param functionPermitted if true an existing function may be used as a namespace\n@return namespace or partial namespace if error occurs",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "typeNamespace",
          "type_long": "ghidra.app.util.demangler.Demangled",
          "type_short": "Demangled",
          "comment": "demangled namespace"
        },
        {
          "name": "parentNamespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": "root namespace to be used (e.g., library, global, etc.)"
        },
        {
          "name": "functionPermitted",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true an existing function may be used as a namespace"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Namespace",
        "type_short": "Namespace",
        "comment": "namespace or partial namespace if error occurs"
      },
      "throws": []
    },
    {
      "name": "isPermittedNamespaceType",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "symbolType",
          "type_long": "ghidra.program.model.symbol.SymbolType",
          "type_short": "SymbolType",
          "comment": ""
        },
        {
          "name": "functionPermitted",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "ensureNameLength",
      "comment": "Ensure name does not pass the limit defined by Ghidra",
      "javadoc": "Ensure name does not pass the limit defined by Ghidra\n@param name the name whose length to restrict\n@return the name, updated as needed",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name whose length to restrict"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name, updated as needed"
      },
      "throws": []
    }
  ]
}
