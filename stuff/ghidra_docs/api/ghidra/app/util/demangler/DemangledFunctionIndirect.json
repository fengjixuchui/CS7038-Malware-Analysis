{
  "name": "DemangledFunctionIndirect",
  "comment": "A class to represent a demangled function indirect.  A function indirect is\n similar to a function pointer or a function reference except that it does\n not have the start (*) for a pointer or ampersand () for a reference, but\n is still an indirect definition (not a regular function definition).  The\n function indirect is prevalent in the Microsoft model, if not other models.",
  "javadoc": "A class to represent a demangled function indirect.  A function indirect is\n similar to a function pointer or a function reference except that it does\n not have the start (*) for a pointer or ampersand (\u0026amp;) for a reference, but\n is still an indirect definition (not a regular function definition).  The\n function indirect is prevalent in the Microsoft model, if not other models.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.util.demangler.AbstractDemangledFunctionDefinitionDataType",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "mangled",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "originalDemangled",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTypeString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addFunctionPointerParens",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        },
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
