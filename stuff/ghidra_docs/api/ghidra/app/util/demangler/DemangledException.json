{
  "name": "DemangledException",
  "comment": "A class to handle exceptions that occur demangling.",
  "javadoc": "A class to handle exceptions that occur demangling.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Exception",
  "fields": [
    {
      "name": "invalidMangledName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Use this constructor to indicate a demangler exception\n due to an exception thrown during the demangling process.",
      "javadoc": "Use this constructor to indicate a demangler exception\n due to an exception thrown during the demangling process.\n@param cause the exception thrown during the demangling process",
      "static": false,
      "params": [
        {
          "name": "cause",
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "the exception thrown during the demangling process"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Use this constructor to indicate a demangler exception\n due to some general invalid or unsupported mangled string\n characteristic. For example, unrecognized datatype.",
      "javadoc": "Use this constructor to indicate a demangler exception\n due to some general invalid or unsupported mangled string\n characteristic. For example, unrecognized datatype.\n@param message the invalid or unsupported mangled message",
      "static": false,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the invalid or unsupported mangled message"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Use this constructor to indicate the demangler failed\n because the string to demangle does not appear to represent\n a valid mangled name.",
      "javadoc": "Use this constructor to indicate the demangler failed\n because the string to demangle does not appear to represent\n a valid mangled name.\n@param invalidMangledName true to indicate the string to \n demangle does not appear to represent a valid mangled name",
      "static": false,
      "params": [
        {
          "name": "invalidMangledName",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to indicate the string to \n demangle does not appear to represent a valid mangled name"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInvalidMangledName",
      "comment": "Returns true if the string to demangle does not appear to represent\n a valid mangled name",
      "javadoc": "Returns true if the string to demangle does not appear to represent\n a valid mangled name\n@return true if the string to demangle does not appear to represent\n a valid mangled name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the string to demangle does not appear to represent\n a valid mangled name"
      },
      "throws": []
    }
  ]
}
