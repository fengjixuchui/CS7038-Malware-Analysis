{
  "name": "SymbolPath",
  "comment": "A convenience object for parsing a namespace path to a symbol.\n \n For example, if a SymbolPath is constructed with \"foo::bar::baz\", then \"baz\" is the\n name of a symbol in the \"bar\" namespace, which is in the \"foo\" namespace.\n \n \n #getName() will return \"baz\".\n #getParentPath() will return \"foo:bar\".\n #getPath() will return \"foo::bar::baz\".\n ",
  "javadoc": "A convenience object for parsing a namespace path to a symbol.\n \u003cP\u003e\n For example, if a SymbolPath is constructed with \"foo::bar::baz\", then \"baz\" is the\n name of a symbol in the \"bar\" namespace, which is in the \"foo\" namespace.\n \u003cP\u003e\n \u003cUL\u003e\n \u003cLI\u003e{@link #getName()} will return \"baz\".\n \u003cLI\u003e{@link #getParentPath()} will return \"foo:bar\".\n \u003cLI\u003e{@link #getPath()} will return \"foo::bar::baz\".\n \u003c/UL\u003e",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "parentPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.SymbolPath",
      "type_short": "SymbolPath",
      "constant_value": null
    },
    {
      "name": "symbolName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a SymbolPath from a string containing NAMESPACE_DELIMITER (\"::\") sequences to\n separate the namespace names.  This is the only constructor that employs special\n string-based namespace parsing.",
      "javadoc": "Construct a SymbolPath from a string containing NAMESPACE_DELIMITER (\"::\") sequences to\n separate the namespace names.  This is the only constructor that employs special\n string-based namespace parsing.\n@param symbolPathString the string to parse as a sequence of namespace names separated by\n \"::\".",
      "static": false,
      "params": [
        {
          "name": "symbolPathString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the string to parse as a sequence of namespace names separated by\n \"::\"."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a SymbolPath from an array of strings where each string is the name of a namespace\n in the symbol path.",
      "javadoc": "Construct a SymbolPath from an array of strings where each string is the name of a namespace\n in the symbol path.\n@param symbolPath the array of names of namespaces.",
      "static": false,
      "params": [
        {
          "name": "symbolPath",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "the array of names of namespaces."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a SymbolPath from a list of strings where each string is the name of a namespace\n in the symbol path.",
      "javadoc": "Construct a SymbolPath from a list of strings where each string is the name of a namespace\n in the symbol path.\n@param symbolList the array of names of namespaces.\n@throws IllegalArgumentException if the given list is null or empty.",
      "static": false,
      "params": [
        {
          "name": "symbolList",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": "the array of names of namespaces."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new SymbolPath for the given symbol.",
      "javadoc": "Constructs a new SymbolPath for the given symbol.\n@param symbol the symbol to get a SymbolPath for.",
      "static": false,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to get a SymbolPath for."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new SymbolPath for the given symbol with the option to exclude a beginning\n library name.",
      "javadoc": "Constructs a new SymbolPath for the given symbol with the option to exclude a beginning\n library name.\n@param symbol the symbol to get a SymbolPath for.\n@param excludeLibrary if true, any library name at the front of the path will be removed.",
      "static": false,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to get a SymbolPath for."
        },
        {
          "name": "excludeLibrary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, any library name at the front of the path will be removed."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a Symbol from a parent SymbolPath and a symbol name.",
      "javadoc": "Creates a Symbol from a parent SymbolPath and a symbol name.\n@param parent the parent SymbolPath. Can be null if the name is in the global space.\n@param name the name of the symbol. This can\u0027t be null;",
      "static": false,
      "params": [
        {
          "name": "parent",
          "type_long": "ghidra.app.util.SymbolPath",
          "type_short": "SymbolPath",
          "comment": "the parent SymbolPath. Can be null if the name is in the global space."
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the symbol. This can\u0027t be null;"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "replaceInvalidChars",
      "comment": "Returns a new SymbolPath in which invalid characters are replaced\n with underscores.",
      "javadoc": "Returns a new SymbolPath in which invalid characters are replaced\n with underscores.\n@return the new SymbolPath with replaced characters.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.SymbolPath",
        "type_short": "SymbolPath",
        "comment": "the new SymbolPath with replaced characters."
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the name of the symbol;",
      "javadoc": "Returns the name of the symbol;\n@return the symbol name as string without any path information.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the symbol name as string without any path information."
      },
      "throws": []
    },
    {
      "name": "getParent",
      "comment": "Returns the SymbolPath for the parent namespace or null if the parent is the global space.",
      "javadoc": "Returns the SymbolPath for the parent namespace or null if the parent is the global space.\n@return the SymbolPath for the parent namespace or null if the parent is the global space.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.SymbolPath",
        "type_short": "SymbolPath",
        "comment": "the SymbolPath for the parent namespace or null if the parent is the global space."
      },
      "throws": []
    },
    {
      "name": "getParentPath",
      "comment": "Returns null if the parent is null or global; otherwise returns the path as a string of the\n parent namespace path.",
      "javadoc": "Returns null if the parent is null or global; otherwise returns the path as a string of the\n parent namespace path.\n@return the path of the parent namespace as string. Returns null if the parent is null or global.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the path of the parent namespace as string. Returns null if the parent is null or global."
      },
      "throws": []
    },
    {
      "name": "getPath",
      "comment": "Returns the full symbol path as a string.",
      "javadoc": "Returns the full symbol path as a string.\n@return the SymbolPath for the complete name as string, including namespace.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the SymbolPath for the complete name as string, including namespace."
      },
      "throws": []
    },
    {
      "name": "append",
      "comment": "Creates a new SymbolPath composed of the list of names in this path followed by the\n list of names in the given path.",
      "javadoc": "Creates a new SymbolPath composed of the list of names in this path followed by the\n list of names in the given path.\n@param path the path of names to append to this path.\n@return a new SymbolPath that appends the given path to this path.",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.app.util.SymbolPath",
          "type_short": "SymbolPath",
          "comment": "the path of names to append to this path."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.SymbolPath",
        "type_short": "SymbolPath",
        "comment": "a new SymbolPath that appends the given path to this path."
      },
      "throws": []
    },
    {
      "name": "containsPathEntry",
      "comment": "Returns true if this path contains any path entry matching the given text",
      "javadoc": "Returns true if this path contains any path entry matching the given text\n@param text the text for which to search\n@return true if any path entry matches the given text",
      "static": false,
      "params": [
        {
          "name": "text",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the text for which to search"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if any path entry matches the given text"
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "matchesPathOf",
      "comment": "A convenience method to check if the given symbol\u0027s symbol path matches this path",
      "javadoc": "A convenience method to check if the given symbol\u0027s symbol path matches this path\n@param s the symbol to check\n@return true if the symbol paths match",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the symbol paths match"
      },
      "throws": []
    },
    {
      "name": "asList",
      "comment": "Returns a list of names of the symbols in the symbol path, starting with the name just\n below the global namespace.",
      "javadoc": "Returns a list of names of the symbols in the symbol path, starting with the name just\n below the global namespace.\n@return a list of names of the symbols in the symbol path.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "a list of names of the symbols in the symbol path."
      },
      "throws": []
    },
    {
      "name": "asArray",
      "comment": "Returns an array of names of the symbols in the symbol path, starting with the name just\n below the global namespace.",
      "javadoc": "Returns an array of names of the symbols in the symbol path, starting with the name just\n below the global namespace.\n@return an array of names of the symbols in the symbol path.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "an array of names of the symbols in the symbol path."
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addToList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "list",
          "type_long": "java.util.List\u003cjava.lang.String\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkGlobal",
      "comment": "Some existing code might include \"Global\" at the beginning of their path.  This\n method will eliminate any \"Global\" at the beginning of the path.",
      "javadoc": "Some existing code might include \"Global\" at the beginning of their path.  This\n method will eliminate any \"Global\" at the beginning of the path.\n@param path the path to check for \"Global\"\n@return the given path if it is not global; otherwise returns null.",
      "static": false,
      "params": [
        {
          "name": "path",
          "type_long": "ghidra.app.util.SymbolPath",
          "type_short": "SymbolPath",
          "comment": "the path to check for \"Global\""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.SymbolPath",
        "type_short": "SymbolPath",
        "comment": "the given path if it is not global; otherwise returns null."
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "o",
          "type_long": "ghidra.app.util.SymbolPath",
          "type_short": "SymbolPath",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
