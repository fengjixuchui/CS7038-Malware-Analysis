{
  "name": "XmlProgramOptions",
  "comment": "A class to hold XML options.",
  "javadoc": "A class to hold XML options.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "OPT_MEMORY_BLOCKS",
      "comment": "Flag to indicate reading/writing memory blocks",
      "javadoc": "Flag to indicate reading/writing memory blocks",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "OPT_MEMORY_CONTENTS",
      "comment": "Flag to indicate reading/writing memory contents",
      "javadoc": "Flag to indicate reading/writing memory contents",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "2"
    },
    {
      "name": "OPT_CODE",
      "comment": "Flag to indicate reading/writing instructions",
      "javadoc": "Flag to indicate reading/writing instructions",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "4"
    },
    {
      "name": "OPT_DATA",
      "comment": "Flag to indicate reading/writing data",
      "javadoc": "Flag to indicate reading/writing data",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "8"
    },
    {
      "name": "OPT_SYMBOLS",
      "comment": "Flag to indicate reading/writing symbols",
      "javadoc": "Flag to indicate reading/writing symbols",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "16"
    },
    {
      "name": "OPT_EQUATES",
      "comment": "Flag to indicate reading/writing equates",
      "javadoc": "Flag to indicate reading/writing equates",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "32"
    },
    {
      "name": "OPT_COMMENTS",
      "comment": "Flag to indicate reading/writing comments",
      "javadoc": "Flag to indicate reading/writing comments",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "64"
    },
    {
      "name": "OPT_PROPERTIES",
      "comment": "Flag to indicate reading/writing properties",
      "javadoc": "Flag to indicate reading/writing properties",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "128"
    },
    {
      "name": "OPT_TREES",
      "comment": "Flag to indicate reading/writing trees",
      "javadoc": "Flag to indicate reading/writing trees",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "256"
    },
    {
      "name": "OPT_EMPTY_TREE_NODES",
      "comment": "Flag to indicate reading/writing empty program tree nodes",
      "javadoc": "Flag to indicate reading/writing empty program tree nodes",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "512"
    },
    {
      "name": "OPT_REFERENCES",
      "comment": "Flag to indicate reading/writing references",
      "javadoc": "Flag to indicate reading/writing references",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1024"
    },
    {
      "name": "OPT_FUNCTIONS",
      "comment": "Flag to indicate reading/writing functions",
      "javadoc": "Flag to indicate reading/writing functions",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "2048"
    },
    {
      "name": "OVERWRITE_SYMBOLS",
      "comment": "Used to signify that symbols should be overwritten when\n necessary. This value is not being included in\n the ALL constant.",
      "javadoc": "Used to signify that symbols should be overwritten when\n necessary. This value is not being included in\n the \u003ccode\u003eALL\u003c/code\u003e constant.",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "536870912"
    },
    {
      "name": "OVERWRITE_REFS",
      "comment": "Used to signify that references should be overwritten when\n necessary. This value is not being included in\n the ALL constant.",
      "javadoc": "Used to signify that references should be overwritten when\n necessary. This value is not being included in\n the \u003ccode\u003eALL\u003c/code\u003e constant.",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1073741824"
    },
    {
      "name": "ADD_2_PROG",
      "comment": "Used to signify that an existing program is being\n updated. This value is not being included in\n the ALL constant.",
      "javadoc": "Used to signify that an existing program is being\n updated. This value is not being included in\n the \u003ccode\u003eALL\u003c/code\u003e constant.",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "2147483648"
    },
    {
      "name": "addToProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "memoryBlocks",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "memoryContents",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "overwriteMemoryConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "instructions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "overwriteDataConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "data",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "symbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "overwriteSymbolConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "equates",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "comments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "properties",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "overwritePropertyConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "bookmarks",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "overwriteBookmarkConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "trees",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "references",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "overwriteReferenceConflicts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "functions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "registers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "relocationTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "entryPoints",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "externalLibraries",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOptions",
      "comment": "Returns an array of importer options representing\n the flags in this class.",
      "javadoc": "Returns an array of importer options representing\n the flags in this class.\n@param isAddToProgram if true then adding to existing program\n@return the array of importer options",
      "static": false,
      "params": [
        {
          "name": "isAddToProgram",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true then adding to existing program"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
        "type_short": "List",
        "comment": "the array of importer options"
      },
      "throws": []
    },
    {
      "name": "setOptions",
      "comment": "Sets the options. This method is not for defining the options, but\n rather for setting the values of options. If invalid options\n are passed in, then OptionException should be thrown.",
      "javadoc": "Sets the options. This method is not for defining the options, but\n rather for setting the values of options. If invalid options\n are passed in, then OptionException should be thrown.\n@param options the option values for XML\n@throws OptionException if invalid options are passed in",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": "the option values for XML"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.util.OptionException",
          "type_short": "OptionException",
          "comment": "if invalid options are passed in"
        }
      ]
    },
    {
      "name": "isAddToProgram",
      "comment": "Returns true if importing to an existing program.\n Importing to an existing program creates a new\n set of potential conflicts. For example, memory block\n may collide. When this options is true, additional\n options are visible.",
      "javadoc": "Returns true if importing to an existing program.\n Importing to an existing program creates a new\n set of potential conflicts. For example, memory block\n may collide. When this options is true, additional\n options are visible.\n@return true if importing to an existing program",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if importing to an existing program"
      },
      "throws": []
    },
    {
      "name": "isInstructions",
      "comment": "If true, then instructions should be read/written.",
      "javadoc": "If true, then instructions should be read/written.\n@return true if instructions should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if instructions should be read/written"
      },
      "throws": []
    },
    {
      "name": "isComments",
      "comment": "If true, then comments should be read/written.",
      "javadoc": "If true, then comments should be read/written.\n@return true if comments should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if comments should be read/written"
      },
      "throws": []
    },
    {
      "name": "isData",
      "comment": "If true, then data should be read/written.",
      "javadoc": "If true, then data should be read/written.\n@return true if data should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if data should be read/written"
      },
      "throws": []
    },
    {
      "name": "isEquates",
      "comment": "If true, then equates should be read/written.",
      "javadoc": "If true, then equates should be read/written.\n@return true if equates should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if equates should be read/written"
      },
      "throws": []
    },
    {
      "name": "isFunctions",
      "comment": "If true, then functions should be read/written.",
      "javadoc": "If true, then functions should be read/written.\n@return true if functions should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if functions should be read/written"
      },
      "throws": []
    },
    {
      "name": "isMemoryBlocks",
      "comment": "If true, then memory blocks should be read/written.",
      "javadoc": "If true, then memory blocks should be read/written.\n@return true if memory blocks should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if memory blocks should be read/written"
      },
      "throws": []
    },
    {
      "name": "isMemoryContents",
      "comment": "If true, then memory contents should be read/written.",
      "javadoc": "If true, then memory contents should be read/written.\n@return true if memory contents should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if memory contents should be read/written"
      },
      "throws": []
    },
    {
      "name": "isProperties",
      "comment": "If true, then properties should be read/written.",
      "javadoc": "If true, then properties should be read/written.\n@return true if properties should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if properties should be read/written"
      },
      "throws": []
    },
    {
      "name": "isReferences",
      "comment": "If true, then references (memory, stack, external) should be read/written.",
      "javadoc": "If true, then references (memory, stack, external) should be read/written.\n@return true if references should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if references should be read/written"
      },
      "throws": []
    },
    {
      "name": "isSymbols",
      "comment": "If true, then symbols should be read/written.",
      "javadoc": "If true, then symbols should be read/written.\n@return true if symbols should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if symbols should be read/written"
      },
      "throws": []
    },
    {
      "name": "isTrees",
      "comment": "If true, then program trees should be read/written.",
      "javadoc": "If true, then program trees should be read/written.\n@return true if program trees should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if program trees should be read/written"
      },
      "throws": []
    },
    {
      "name": "setInstructions",
      "comment": "Sets instructions to be read/written.",
      "javadoc": "Sets instructions to be read/written.\n@param b true if instructions should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if instructions should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setComments",
      "comment": "Sets comments to be read/written.",
      "javadoc": "Sets comments to be read/written.\n@param b true if comments should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if comments should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setData",
      "comment": "Sets data to be read/written.",
      "javadoc": "Sets data to be read/written.\n@param b true if data should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if data should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setEquates",
      "comment": "Sets equates to be read/written.",
      "javadoc": "Sets equates to be read/written.\n@param b true if equates should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if equates should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setFunctions",
      "comment": "Sets functions to be read/written.",
      "javadoc": "Sets functions to be read/written.\n@param b true if functions should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if functions should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMemoryBlocks",
      "comment": "Sets memory blocks to be read/written.",
      "javadoc": "Sets memory blocks to be read/written.\n@param b true if memory blocks should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if memory blocks should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMemoryContents",
      "comment": "Sets memory contents to be read/written.",
      "javadoc": "Sets memory contents to be read/written.\n@param b true if memory contents should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if memory contents should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProperties",
      "comment": "Sets properties to be read/written.",
      "javadoc": "Sets properties to be read/written.\n@param b true if properties should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if properties should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setReferences",
      "comment": "Sets references to be read/written.",
      "javadoc": "Sets references to be read/written.\n@param b true if references should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if references should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSymbols",
      "comment": "Sets symbols to be read/written.",
      "javadoc": "Sets symbols to be read/written.\n@param b true if symbols should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if symbols should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTrees",
      "comment": "Sets program trees to be read/written.",
      "javadoc": "Sets program trees to be read/written.\n@param b true if program trees should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if program trees should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isBookmarks",
      "comment": "If true, then bookmarks should be read/written.",
      "javadoc": "If true, then bookmarks should be read/written.\n@return true if bookmarks should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if bookmarks should be read/written"
      },
      "throws": []
    },
    {
      "name": "isRegisters",
      "comment": "If true, then registers should be read/written.",
      "javadoc": "If true, then registers should be read/written.\n@return true if registers should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if registers should be read/written"
      },
      "throws": []
    },
    {
      "name": "isRelocationTable",
      "comment": "If true, then the relocation table should be read/written.",
      "javadoc": "If true, then the relocation table should be read/written.\n@return true if the relocation table should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the relocation table should be read/written"
      },
      "throws": []
    },
    {
      "name": "setBookmarks",
      "comment": "Sets bookmarks to be read/written.",
      "javadoc": "Sets bookmarks to be read/written.\n@param b true if bookmarks should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if bookmarks should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRegisters",
      "comment": "Sets registers to be read/written.",
      "javadoc": "Sets registers to be read/written.\n@param b true if registers should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if registers should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRelocationTable",
      "comment": "Sets relocation tables to be read/written.",
      "javadoc": "Sets relocation tables to be read/written.\n@param b true if relocation table should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if relocation table should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEntryPoints",
      "comment": "If true, then the entry points should be read/written.",
      "javadoc": "If true, then the entry points should be read/written.\n@return true if the entry points should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the entry points should be read/written"
      },
      "throws": []
    },
    {
      "name": "isExternalLibraries",
      "comment": "If true, then the external libraries should be read/written.",
      "javadoc": "If true, then the external libraries should be read/written.\n@return true if the external libraries should be read/written",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the external libraries should be read/written"
      },
      "throws": []
    },
    {
      "name": "setEntryPoints",
      "comment": "Sets entry points to be read/written.",
      "javadoc": "Sets entry points to be read/written.\n@param b true if entry points should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if entry points should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setExternalLibraries",
      "comment": "Sets external libraries to be read/written.",
      "javadoc": "Sets external libraries to be read/written.\n@param b true if external libraries should read/written",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if external libraries should read/written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOverwritePropertyConflicts",
      "comment": "If true, then property conflicts will be overwritten.",
      "javadoc": "If true, then property conflicts will be overwritten.\n@return true if property conflicts will be overwritten",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if property conflicts will be overwritten"
      },
      "throws": []
    },
    {
      "name": "isOverwriteBookmarkConflicts",
      "comment": "If true, then bookmark conflicts will be overwritten.",
      "javadoc": "If true, then bookmark conflicts will be overwritten.\n@return true if bookmark conflicts will be overwritten",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if bookmark conflicts will be overwritten"
      },
      "throws": []
    },
    {
      "name": "isOverwriteSymbolConflicts",
      "comment": "If true, then symbol conflicts will be overwritten.",
      "javadoc": "If true, then symbol conflicts will be overwritten.\n@return true if symbol conflicts will be overwritten",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if symbol conflicts will be overwritten"
      },
      "throws": []
    },
    {
      "name": "isOverwriteReferenceConflicts",
      "comment": "If true, then reference conflicts will be overwritten.",
      "javadoc": "If true, then reference conflicts will be overwritten.\n@return true if reference conflicts will be overwritten",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if reference conflicts will be overwritten"
      },
      "throws": []
    },
    {
      "name": "isOverwriteMemoryConflicts",
      "comment": "If true, then memory conflicts will be overwritten.",
      "javadoc": "If true, then memory conflicts will be overwritten.\n@return true if memory conflicts will be overwritten",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if memory conflicts will be overwritten"
      },
      "throws": []
    },
    {
      "name": "isOverwriteDataConflicts",
      "comment": "If true, then data conflicts will be overwritten.",
      "javadoc": "If true, then data conflicts will be overwritten.\n@return true if data conflicts will be overwritten",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if data conflicts will be overwritten"
      },
      "throws": []
    },
    {
      "name": "setOverwriteBookmarkConflicts",
      "comment": "Sets bookmark conflicts to always be overwritten.",
      "javadoc": "Sets bookmark conflicts to always be overwritten.\n@param b true if bookmark conflicts should always be overwritten",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if bookmark conflicts should always be overwritten"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setOverwriteMemoryConflicts",
      "comment": "Sets memory conflicts to always be overwritten.",
      "javadoc": "Sets memory conflicts to always be overwritten.\n@param b true if memory conflicts should always be overwritten",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if memory conflicts should always be overwritten"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setOverwriteDataConflicts",
      "comment": "Sets data conflicts to always be overwritten.",
      "javadoc": "Sets data conflicts to always be overwritten.\n@param b true if data conflicts should always be overwritten",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if data conflicts should always be overwritten"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setOverwritePropertyConflicts",
      "comment": "Sets property conflicts to always be overwritten.",
      "javadoc": "Sets property conflicts to always be overwritten.\n@param b true if property conflicts should always be overwritten",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if property conflicts should always be overwritten"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setOverwriteReferenceConflicts",
      "comment": "Sets reference conflicts to always be overwritten.",
      "javadoc": "Sets reference conflicts to always be overwritten.\n@param b true if reference conflicts should always be overwritten",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if reference conflicts should always be overwritten"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setOverwriteSymbolConflicts",
      "comment": "Sets symbol conflicts to always be overwritten.",
      "javadoc": "Sets symbol conflicts to always be overwritten.\n@param b true if symbol conflicts should always be overwritten",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if symbol conflicts should always be overwritten"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setAddToProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addToProgram",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
