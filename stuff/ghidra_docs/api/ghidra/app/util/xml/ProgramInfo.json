{
  "name": "ProgramInfo",
  "comment": "This class stores values pulled from the\n PROGRAM, INFO_SOURCE, and LANGUAGE tag inside a ghidra program XML file.\n \n Please see PROGRAM.DTD",
  "javadoc": "This class stores values pulled from the\n PROGRAM, INFO_SOURCE, and LANGUAGE tag inside a ghidra program XML file.\n \n Please see PROGRAM.DTD",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "family",
      "comment": "The family name of the program\u0027s processor (eg, \"Intel\").",
      "javadoc": "The family name of the program\u0027s processor (eg, \"Intel\").",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "processorName",
      "comment": "The program\u0027s processor (eg, Processor.PROCESSOR_X86).",
      "javadoc": "The program\u0027s processor (eg, Processor.PROCESSOR_X86).",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "languageID",
      "comment": "The program\u0027s language id, e.g. \"x86:LE:32:default\".",
      "javadoc": "The program\u0027s language id, e.g. \"x86:LE:32:default\".",
      "static": false,
      "type_long": "ghidra.program.model.lang.LanguageID",
      "type_short": "LanguageID",
      "constant_value": null
    },
    {
      "name": "compilerSpecID",
      "comment": "The program\u0027s compilerSpec id, e.g. \"gcc\".",
      "javadoc": "The program\u0027s compilerSpec id, e.g. \"gcc\".",
      "static": false,
      "type_long": "ghidra.program.model.lang.CompilerSpecID",
      "type_short": "CompilerSpecID",
      "constant_value": null
    },
    {
      "name": "programName",
      "comment": "The preferred name of the Program when loaded back into Ghidra.",
      "javadoc": "The preferred name of the Program when loaded back into Ghidra.",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "timestamp",
      "comment": "The timestamp of when the XML file was created.",
      "javadoc": "The timestamp of when the XML file was created.",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "user",
      "comment": "The ID of the user that created the XML file.",
      "javadoc": "The ID of the user that created the XML file.",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "tool",
      "comment": "The tool that generated the XML file (eg, \"Ghidra\", etc.).",
      "javadoc": "The tool that generated the XML file (eg, \"Ghidra\", etc.).",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "normalizedExternalToolName",
      "comment": "This is the name of the tool normalized into known categories (\"IDA-PRO\" or \"GHIDRA\") if appropriate.",
      "javadoc": "This is the name of the tool normalized into known categories (\"IDA-PRO\" or \"GHIDRA\") if appropriate.",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "version",
      "comment": "The XML version. @deprecated since version 2.1.",
      "javadoc": "The XML version. @deprecated since version 2.1.",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "addressModel",
      "comment": "The size of the addressing (eg, \"32 bit\"). @deprecated since version 2.1.",
      "javadoc": "The size of the addressing (eg, \"32 bit\"). @deprecated since version 2.1.",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "endian",
      "comment": "The endianess (eg, big or little).",
      "javadoc": "The endianess (eg, big or little).",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "exePath",
      "comment": "The absolute path of where the original executable was imported.",
      "javadoc": "The absolute path of where the original executable was imported.",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "exeFormat",
      "comment": "The format of the original executable (eg, PE or ELF).",
      "javadoc": "The format of the original executable (eg, PE or ELF).",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "imageBase",
      "comment": "The image base of the program.",
      "javadoc": "The image base of the program.",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "shouldProcessStack",
      "comment": "whether the XmlMgr should process stack frames and references.",
      "javadoc": "whether the XmlMgr should process stack frames and references.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isIdaPro",
      "comment": "Returns true if the tool was IDA-PRO.",
      "javadoc": "Returns true if the tool was IDA-PRO.\n@return true if the tool was IDA-PRO",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the tool was IDA-PRO"
      },
      "throws": []
    },
    {
      "name": "isGhidra",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "translateCompiler",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "compiler",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCompilerSpecID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "compiler",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "translateIDACompilerName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "compiler",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTool",
      "comment": "Returns tool field.  This is the name of the tool exactly as written in the XML being imported.",
      "javadoc": "Returns tool field.  This is the name of the tool exactly as written in the XML being imported.\n@return tool field",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "tool field"
      },
      "throws": []
    },
    {
      "name": "setTool",
      "comment": "Sets tool field.\n Also sets normalizedExternalToolName to normalized tool names \"IDA-PRO\" or \"GHIDRA\" if appropriate, or just sets it to the value of tool.",
      "javadoc": "Sets tool field.\n Also sets normalizedExternalToolName to normalized tool names \"IDA-PRO\" or \"GHIDRA\" if appropriate, or just sets it to the value of tool.",
      "static": false,
      "params": [
        {
          "name": "tool",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNormalizedExternalToolName",
      "comment": "Returns normalizedExternalToolName field.  This is the name of the tool normalized into known categories (\"IDA-PRO\" or \"GHIDRA\") if appropriate.",
      "javadoc": "Returns normalizedExternalToolName field.  This is the name of the tool normalized into known categories (\"IDA-PRO\" or \"GHIDRA\") if appropriate.\n@return normalizedExternalToolName",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "normalizedExternalToolName"
      },
      "throws": []
    }
  ]
}
