{
  "name": "ProgramXmlMgr",
  "comment": "The manager responsible for reading and writing a program in XML.",
  "javadoc": "The manager responsible for reading and writing a program in XML.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "PROGRAM_DTD",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"program_dtd\""
    },
    {
      "name": "dtdVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "info",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.xml.ProgramInfo",
      "type_short": "ProgramInfo",
      "constant_value": null
    },
    {
      "name": "file",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.File",
      "type_short": "File",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new program XML manager using the specified file.\n The file should be an XML file.",
      "javadoc": "Constructs a new program XML manager using the specified file.\n The file should be an XML file.\n@param file the XML file",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the XML file"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new program XML manager using the specified ByteProvider.\n \n If ByteProvider has a FSRL and it is a simple local filepath,\n convert that to a normal local java.io.File instance instead of using the\n ByteProvider\u0027s File property which is probably located in the\n FileSystemService filecache directory, which will break the ability\n to find the *.bytes file associated with this .xml file.\n \n This workaround will not help xml files that are truly embedded in a GFileSystem\n (ie. in a .zip file).",
      "javadoc": "Constructs a new program XML manager using the specified {@link ByteProvider}.\n \u003cp\u003e\n If {@link ByteProvider} has a {@link FSRL} and it is a simple local filepath,\n convert that to a normal local java.io.File instance instead of using the\n {@link ByteProvider}\u0027s File property which is probably located in the\n {@link FileSystemService} filecache directory, which will break the ability\n to find the *.bytes file associated with this .xml file.\n \u003cp\u003e\n This workaround will not help xml files that are truly embedded in a GFileSystem\n (ie. in a .zip file).\n@param bp",
      "static": false,
      "params": [
        {
          "name": "bp",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgramInfo",
      "comment": "Returns the program info from the underlying file. T``his method\n does not make sense to invoke if a write is being performed\n to a new file.",
      "javadoc": "Returns the program info from the underlying file. T``his method\n does not make sense to invoke if a write is being performed\n to a new file.\n@return the program info\n@throws SAXException if an XML error occurs\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.xml.ProgramInfo",
        "type_short": "ProgramInfo",
        "comment": "the program info"
      },
      "throws": [
        {
          "type_long": "org.xml.sax.SAXException",
          "type_short": "SAXException",
          "comment": "if an XML error occurs"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "getForCompilerTag",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "read",
      "comment": "Reads from the underlying XML file and populates the specified program.",
      "javadoc": "Reads from the underlying XML file and populates the specified program.\n@param program the program to load the XML into\n@param monitor the task monitor\n@param options the XML options, which features to load and to ignore\n@return the message log containing any warning/error messages\n@throws SAXException if an XML error occurs\n@throws IOException if an I/O occurs\n@throws AddressFormatException if an invalid address is specified in the XML",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to load the XML into"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        },
        {
          "name": "options",
          "type_long": "ghidra.app.util.xml.XmlProgramOptions",
          "type_short": "XmlProgramOptions",
          "comment": "the XML options, which features to load and to ignore"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.importer.MessageLog",
        "type_short": "MessageLog",
        "comment": "the message log containing any warning/error messages"
      },
      "throws": [
        {
          "type_long": "org.xml.sax.SAXException",
          "type_short": "SAXException",
          "comment": "if an XML error occurs"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O occurs"
        },
        {
          "type_long": "ghidra.program.model.address.AddressFormatException",
          "type_short": "AddressFormatException",
          "comment": "if an invalid address is specified in the XML"
        }
      ]
    },
    {
      "name": "getStandardName",
      "comment": "Converts from a generic format name to standard Ghidra names;",
      "javadoc": "Converts from a generic format name to standard Ghidra names;\n@param name the generic format name\n@return the equivalent Ghidra name",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the generic format name"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the equivalent Ghidra name"
      },
      "throws": []
    },
    {
      "name": "isOldXml",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createDefaultTree",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "ghidra.app.util.xml.XmlProgramOptions",
          "type_short": "XmlProgramOptions",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "write",
      "comment": "Writes the specified program in XML into the underlying file.",
      "javadoc": "Writes the specified program in XML into the underlying file.\n@param program the program to write into XML\n@param addrSet an address set to limit areas of program that written, or null for entire program\n@param monitor the task monitor\n@param options the XML options to limit what is and is not written out\n@return the message log containing any warning/error messages\n@throws IOException if an I/O occurs\n@throws CancelledException if the user cancels the read",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program to write into XML"
        },
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "an address set to limit areas of program that written, or null for entire program"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        },
        {
          "name": "options",
          "type_long": "ghidra.app.util.xml.XmlProgramOptions",
          "type_short": "XmlProgramOptions",
          "comment": "the XML options to limit what is and is not written out"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.importer.MessageLog",
        "type_short": "MessageLog",
        "comment": "the message log containing any warning/error messages"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O occurs"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels the read"
        }
      ]
    },
    {
      "name": "writeProgramElements",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addrSet",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "writer",
          "type_long": "ghidra.util.xml.XmlWriter",
          "type_short": "XmlWriter",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "ghidra.app.util.xml.XmlProgramOptions",
          "type_short": "XmlProgramOptions",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeInfoSource",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "writer",
          "type_long": "ghidra.util.xml.XmlWriter",
          "type_short": "XmlWriter",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "writeProcessor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "writer",
          "type_long": "ghidra.util.xml.XmlWriter",
          "type_short": "XmlWriter",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
