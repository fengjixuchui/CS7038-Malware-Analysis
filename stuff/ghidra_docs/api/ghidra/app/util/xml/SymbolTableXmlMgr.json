{
  "name": "SymbolTableXmlMgr",
  "comment": "XML manager for the Symbol Table.",
  "javadoc": "XML manager for the Symbol Table.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "symbolTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.symbol.SymbolTable",
      "type_short": "SymbolTable",
      "constant_value": null
    },
    {
      "name": "log",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.importer.MessageLog",
      "type_short": "MessageLog",
      "constant_value": null
    },
    {
      "name": "factory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressFactory",
      "type_short": "AddressFactory",
      "constant_value": null
    },
    {
      "name": "overwritePrimary",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "secondPassRequired",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSecondPassRequired",
      "comment": "Following the use of read on the SYMBOL_TABLE element, this method should be invoked\n to determine if a second pass is required to process local.",
      "javadoc": "Following the use of read on the SYMBOL_TABLE element, this method should be invoked\n to determine if a second pass is required to process local.\n@return true if a second pass is required",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a second pass is required"
      },
      "throws": []
    },
    {
      "name": "read",
      "comment": "Process the symbol table section of the XML file.",
      "javadoc": "Process the symbol table section of the XML file.\n@param parser xml reader\n@param isOverwritePrimary true means to overwrite the primary symbol\n if one already exists\n@param monitor monitor that can be canceled",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "xml reader"
        },
        {
          "name": "isOverwritePrimary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to overwrite the primary symbol\n if one already exists"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "monitor that can be canceled"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readPass2",
      "comment": "Process the symbol table section of the XML file.",
      "javadoc": "Process the symbol table section of the XML file.\n@param parser xml reader\n@param isOverwritePrimary true means to overwrite the primary symbol\n if one already exists\n@param monitor monitor that can be canceled",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": "xml reader"
        },
        {
          "name": "isOverwritePrimary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true means to overwrite the primary symbol\n if one already exists"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "monitor that can be canceled"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "read",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "isOverwritePrimary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "passNumber",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "write",
      "comment": "Write out the XML for the symbol table.",
      "javadoc": "Write out the XML for the symbol table.\n@param writer writer for XML\n@param monitor monitor that can be canceled\n should be written\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "writer",
          "type_long": "ghidra.util.xml.XmlWriter",
          "type_short": "XmlWriter",
          "comment": "writer for XML"
        },
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "monitor that can be canceled\n should be written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "checkGlobal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNamespace",
      "comment": "Returns the name of symbol qualified with\n any namespace information.\n For example, \"User32.dll::SomeClass::printf\".",
      "javadoc": "Returns the name of symbol qualified with\n any namespace information.\n For example, \"User32.dll::SomeClass::printf\".",
      "static": false,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "element",
          "type_long": "ghidra.xml.XmlElement",
          "type_short": "XmlElement",
          "comment": ""
        },
        {
          "name": "parser",
          "type_long": "ghidra.xml.XmlPullParser",
          "type_short": "XmlPullParser",
          "comment": ""
        },
        {
          "name": "passNumber",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
