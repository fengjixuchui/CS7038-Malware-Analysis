{
  "name": "StructConverter",
  "comment": "Allows a class to create a structure\n datatype equivalent to its class members.",
  "javadoc": "Allows a class to create a structure\n datatype equivalent to its class members.",
  "static": false,
  "implements": [],
  "fields": [
    {
      "name": "BYTE",
      "comment": "Reusable BYTE datatype.",
      "javadoc": "Reusable BYTE datatype.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "WORD",
      "comment": "Reusable WORD datatype.",
      "javadoc": "Reusable WORD datatype.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "DWORD",
      "comment": "Reusable DWORD datatype.",
      "javadoc": "Reusable DWORD datatype.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "QWORD",
      "comment": "Reusable QWORD datatype.",
      "javadoc": "Reusable QWORD datatype.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "ASCII",
      "comment": "Reusable ASCII datatype.",
      "javadoc": "Reusable ASCII datatype.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "STRING",
      "comment": "Reusable STRING datatype.",
      "javadoc": "Reusable STRING datatype.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "UTF8",
      "comment": "Reusable UTF8 string datatype.",
      "javadoc": "Reusable UTF8 string datatype.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "UTF16",
      "comment": "Reusable UTF16 string datatype.",
      "javadoc": "Reusable UTF16 string datatype.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "POINTER",
      "comment": "Reusable POINTER datatype.",
      "javadoc": "Reusable POINTER datatype.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "VOID",
      "comment": "Reusable VOID datatype.",
      "javadoc": "Reusable VOID datatype.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "IBO32",
      "comment": "Reusable 32-bit image base offset datatype.",
      "javadoc": "Reusable 32-bit image base offset datatype.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "IBO64",
      "comment": "Reusable 64-bit image base offset datatype.",
      "javadoc": "Reusable 64-bit image base offset datatype.",
      "static": true,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "toDataType",
      "comment": "Returns a structure datatype representing the\n contents of the implementor of this interface.\n  \n For example, given:\n \n class A {\n     int foo;\n     double bar;\n }\n \n \n The return value should be a structure data type with two \n data type components; an INT and a DOUBLE. The structure \n should contain field names and, if possible,\n field comments.",
      "javadoc": "Returns a structure datatype representing the\n contents of the implementor of this interface.\n \u003cp\u003e \n For example, given:\n \u003cpre\u003e\n class A {\n     int foo;\n     double bar;\n }\n \u003c/pre\u003e\n \u003cp\u003e\n The return value should be a structure data type with two \n data type components; an INT and a DOUBLE. The structure \n should contain field names and, if possible,\n field comments.\n@return returns a structure datatype representing\n         the implementor of this interface\n@throws DuplicateNameException when a datatype of the same name already exists\n@see ghidra.program.model.data.StructureDataType",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "returns a structure datatype representing\n         the implementor of this interface"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": "when a datatype of the same name already exists"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
