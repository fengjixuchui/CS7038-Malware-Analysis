{
  "name": "GhidraRandomAccessFile",
  "comment": "Instances of this class support both reading and writing to a\n random access file. A random access file behaves like a large\n array of bytes stored in the file system. There is a kind of cursor,\n or index into the implied array, called the file pointer.\n This implementation relies on java.net.RandomAccessFile,\n but adds buffering to limit the amount.",
  "javadoc": "Instances of this class support both reading and writing to a\n random access file. A random access file behaves like a large\n array of bytes stored in the file system. There is a kind of cursor,\n or index into the implied array, called the \u003cem\u003efile pointer\u003c/em\u003e.\n This implementation relies on java.net.RandomAccessFile,\n but adds buffering to limit the amount.",
  "static": false,
  "implements": [
    "java.lang.AutoCloseable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "EMPTY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "BUFFER_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1048576"
    },
    {
      "name": "file",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.File",
      "type_short": "File",
      "constant_value": null
    },
    {
      "name": "randomAccessFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.RandomAccessFile",
      "type_short": "RandomAccessFile",
      "constant_value": null
    },
    {
      "name": "buffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "bufferOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "bufferFileStartIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "lastbuffer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "lastbufferOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "lastbufferFileStartIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "open",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "checkOpen",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a random access file stream to read from, and optionally to\n write to, the file specified by the File argument.  A new FileDescriptor object is created to represent this file connection.\n\n \n This implementation relies on java.net.RandomAccessFile,\n but adds buffering to limit the amount.\n \n\n  The mode argument specifies the access mode\n in which the file is to be opened.  The permitted values and their\n meanings are:\n\n Access mode permitted values and meanings\n ValueMeaning\n \"r\"\n      Open for reading only.  Invoking any of the write\n     methods of the resulting object will cause an java.io.IOException to be thrown. \n \"rw\"\n      Open for reading and writing.  If the file does not already\n     exist then an attempt will be made to create it. \n \"rws\"\n      Open for reading and writing, as with \"rw\", and also\n     require that every update to the file\u0027s content or metadata be\n     written synchronously to the underlying storage device.  \n \"rwd\"\n      Open for reading and writing, as with \"rw\", and also\n     require that every update to the file\u0027s content be written\n     synchronously to the underlying storage device. \n ",
      "javadoc": "Creates a random access file stream to read from, and optionally to\n write to, the file specified by the {@link File} argument.  A new {@link FileDescriptor} object is created to represent this file connection.\n\n \u003cp\u003e\n This implementation relies on java.net.RandomAccessFile,\n but adds buffering to limit the amount.\n \u003cp\u003e\n\n \u003ca id\u003d\"mode\"\u003e\u003c/a\u003e\u003cp\u003e The \u003ccode\u003emode\u003c/code\u003e argument specifies the access mode\n in which the file is to be opened.  The permitted values and their\n meanings are:\n\n \u003cblockquote\u003e\u003ctable\u003e\u003ccaption style\u003d\"visibility:hidden;font-size:0px\"\u003eAccess mode permitted values and meanings\u003c/caption\u003e\n \u003ctr\u003e\u003cth\u003e\u003cp style\u003d\"text-align:left\"\u003eValue\u003c/p\u003e\u003c/th\u003e\u003cth\u003e\u003cp style\u003d\"text-align:left\"\u003eMeaning\u003c/p\u003e\u003c/th\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\"r\"\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e Open for reading only.  Invoking any of the \u003ccode\u003ewrite\u003c/code\u003e\n     methods of the resulting object will cause an {@link java.io.IOException} to be thrown. \u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\"rw\"\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e Open for reading and writing.  If the file does not already\n     exist then an attempt will be made to create it. \u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\"rws\"\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e Open for reading and writing, as with \u003ccode\u003e\"rw\"\u003c/code\u003e, and also\n     require that every update to the file\u0027s content or metadata be\n     written synchronously to the underlying storage device.  \u003c/td\u003e\u003c/tr\u003e\n \u003ctr\u003e\u003ctd style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\"rwd\"\u0026nbsp;\u0026nbsp;\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e Open for reading and writing, as with \u003ccode\u003e\"rw\"\u003c/code\u003e, and also\n     require that every update to the file\u0027s content be written\n     synchronously to the underlying storage device. \u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\u003c/blockquote\u003e\n@param file the file object\n@param mode the access mode, as described\n                    \u003ca href\u003d\"#mode\"\u003eabove\u003c/a\u003e\n@exception IllegalArgumentException if the mode argument is not equal\n               to one of \u003ccode\u003e\"r\"\u003c/code\u003e, \u003ccode\u003e\"rw\"\u003c/code\u003e, \u003ccode\u003e\"rws\"\u003c/code\u003e, or\n               \u003ccode\u003e\"rwd\"\u003c/code\u003e\n@exception FileNotFoundException that name cannot be created, or if some other error occurs\n            while opening or creating the file",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file object"
        },
        {
          "name": "mode",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the access mode, as described\n                    above"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.FileNotFoundException",
          "type_short": "FileNotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "finalize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "Closes this random access file stream and releases any system\n resources associated with the stream. A closed random access\n file cannot perform input or output operations and cannot be\n reopened.\n \n If this file has an associated channel then the channel is closed as well.",
      "javadoc": "Closes this random access file stream and releases any system\n resources associated with the stream. A closed random access\n file cannot perform input or output operations and cannot be\n reopened.\n \u003cp\u003e\n If this file has an associated channel then the channel is closed as well.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "length",
      "comment": "Returns the length of this file.",
      "javadoc": "Returns the length of this file.\n@return the length of this file, measured in bytes.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the length of this file, measured in bytes."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "seek",
      "comment": "Sets the file-pointer offset, measured from the beginning of this\n file, at which the next read or write occurs.  The offset may be\n set beyond the end of the file. Setting the offset beyond the end\n of the file does not change the file length.  The file length will\n change only by writing after the offset has been set beyond the end\n of the file.",
      "javadoc": "Sets the file-pointer offset, measured from the beginning of this\n file, at which the next read or write occurs.  The offset may be\n set beyond the end of the file. Setting the offset beyond the end\n of the file does not change the file length.  The file length will\n change only by writing after the offset has been set beyond the end\n of the file.\n@param pos the offset position, measured in bytes from the\n                   beginning of the file, at which to set the file\n                   pointer.\n@throws IOException if \u003ccode\u003epos\u003c/code\u003e is less than\n                          \u003ccode\u003e0\u003c/code\u003e or if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "pos",
          "type_long": "long",
          "type_short": "long",
          "comment": "the offset position, measured in bytes from the\n                   beginning of the file, at which to set the file\n                   pointer."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if pos is less than\n                          0 or if an I/O error occurs."
        }
      ]
    },
    {
      "name": "readByte",
      "comment": "This method reads a byte from the file, starting from the current file pointer.\n \n This method blocks until the byte is read, the end of the stream\n is detected, or an exception is thrown.",
      "javadoc": "This method reads a byte from the file, starting from the current file pointer.\n \u003cp\u003e\n This method blocks until the byte is read, the end of the stream\n is detected, or an exception is thrown.\n@return the next byte of this file as a signed eight-bit\n             \u003ccode\u003ebyte\u003c/code\u003e.\n@exception EOFException if this file has reached the end.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the next byte of this file as a signed eight-bit\n             byte."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "read",
      "comment": "Reads up to b.length bytes of data from this file\n into an array of bytes. This method blocks until at least one byte\n of input is available.",
      "javadoc": "Reads up to \u003ccode\u003eb.length\u003c/code\u003e bytes of data from this file\n into an array of bytes. This method blocks until at least one byte\n of input is available.\n@param b the buffer into which the data is read.\n@return the total number of bytes read into the buffer, or\n             \u003ccode\u003e-1\u003c/code\u003e if there is no more data because the end of\n             this file has been reached.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the buffer into which the data is read."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             this file has been reached."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "read",
      "comment": "Reads up to length bytes of data from this file into an\n array of bytes. This method blocks until at least one byte of input\n is available.",
      "javadoc": "Reads up to \u003ccode\u003elength\u003c/code\u003e bytes of data from this file into an\n array of bytes. This method blocks until at least one byte of input\n is available.\n@param b the buffer into which the data is read.\n@param offset the start offset of the data.\n@param length the maximum number of bytes read.\n@return the total number of bytes read into the buffer, or\n             \u003ccode\u003e-1\u003c/code\u003e if there is no more data because the end of\n             the file has been reached.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the buffer into which the data is read."
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the start offset of the data."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the maximum number of bytes read."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             the file has been reached."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "write",
      "comment": "Writes a byte to this file, starting at the current file pointer.",
      "javadoc": "Writes a byte to this file, starting at the current file pointer.\n@param b the data.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "the data."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "write",
      "comment": "Writes b.length bytes from the specified byte array\n to this file, starting at the current file pointer.",
      "javadoc": "Writes \u003ccode\u003eb.length\u003c/code\u003e bytes from the specified byte array\n to this file, starting at the current file pointer.\n@param b the data.\n@exception IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the data."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "write",
      "comment": "Writes a sub array as a sequence of bytes.",
      "javadoc": "Writes a sub array as a sequence of bytes.\n@param b the data to be written\n@param offset the start offset in the data\n@param length the number of bytes that are written\n@exception IOException If an I/O error has occurred.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the data to be written"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the start offset in the data"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes that are written"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "ensure",
      "comment": "Ensures that enough bytes are cached to\n satisfy the next request to read.",
      "javadoc": "Ensures that enough bytes are cached to\n satisfy the next request to read.",
      "static": false,
      "params": [
        {
          "name": "bytesNeeded",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "swapInLast",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
