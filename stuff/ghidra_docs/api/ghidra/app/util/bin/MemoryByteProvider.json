{
  "name": "MemoryByteProvider",
  "comment": "A ByteProvider implementation based on Memory.",
  "javadoc": "A {@link ByteProvider} implementation based on {@link Memory}.",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.ByteProvider"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "memory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.mem.Memory",
      "type_short": "Memory",
      "constant_value": null
    },
    {
      "name": "baseAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createMemoryBlockByteProvider",
      "comment": "Create a ByteProvider that is limited to the specified MemoryBlock.",
      "javadoc": "Create a {@link ByteProvider} that is limited to the specified {@link MemoryBlock}.\n@param memory {@link Memory} of the program\n@param block {@link MemoryBlock} to read from\n@return new {@link ByteProvider} that contains the bytes of the specified MemoryBlock",
      "static": true,
      "params": [
        {
          "name": "memory",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": "Memory of the program"
        },
        {
          "name": "block",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": "MemoryBlock to read from"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.ByteProvider",
        "type_short": "ByteProvider",
        "comment": "new ByteProvider that contains the bytes of the specified MemoryBlock"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new MemoryByteProvider for a specific AddressSpace.  Bytes will be\n provided starting at address 0 in the space.",
      "javadoc": "Constructs a new {@link MemoryByteProvider} for a specific {@link AddressSpace}.  Bytes will be\n provided starting at address 0 in the space.\n@param memory the {@link Memory}\n@param space the {@link AddressSpace}",
      "static": false,
      "params": [
        {
          "name": "memory",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": "the Memory"
        },
        {
          "name": "space",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "the AddressSpace"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new MemoryByteProvider relative to the specified base address.",
      "javadoc": "Constructs a new {@link MemoryByteProvider} relative to the specified base address.\n@param memory the {@link Memory}\n@param baseAddress the base address",
      "static": false,
      "params": [
        {
          "name": "memory",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": "the Memory"
        },
        {
          "name": "baseAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the base address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Converts an index into this ByteProvider into an Address.\n ",
      "javadoc": "Converts an index into this ByteProvider into an {@link Address}.\n \u003cp\u003e\n@param index absolute index in this ByteProvider to convert into an Address\n@return {@link Address}\n@throws AddressOutOfBoundsException if wrapping is not supported by the \n corresponding address space and the addition causes an out-of-bounds\n error",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": "absolute index in this ByteProvider to convert into an Address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address"
      },
      "throws": []
    },
    {
      "name": "getInputStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAbsolutePath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isValidIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readByte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "close",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
