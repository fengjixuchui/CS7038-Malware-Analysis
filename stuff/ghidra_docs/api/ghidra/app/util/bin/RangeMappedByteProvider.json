{
  "name": "RangeMappedByteProvider",
  "comment": "A ByteProvider that is a concatenation of sub-ranges of another ByteProvider, also\n allowing for non-initialized (sparse) regions.\n  \n Not thread-safe when ranges are being added.\n \n Does not assume ownership of wrapped ByteProvider.",
  "javadoc": "A {@link ByteProvider} that is a concatenation of sub-ranges of another ByteProvider, also\n allowing for non-initialized (sparse) regions.\n \u003cp\u003e \n Not thread-safe when ranges are being added.\n \u003cp\u003e\n Does not assume ownership of wrapped ByteProvider.",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.ByteProvider"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "delegate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.ByteProvider",
      "type_short": "ByteProvider",
      "constant_value": null
    },
    {
      "name": "offsetMap",
      "comment": "TreeMap of this-provider offsets to the delegate-provider\u0027s offsets.\n \n Each range in the delegate provider is defined by the gap between\n adjacent offsetMap entries.  The last entry is bounded by the total\n length of the provider as specified by the length field.",
      "javadoc": "TreeMap of this-provider offsets to the delegate-provider\u0027s offsets.\n \u003cp\u003e\n Each range in the delegate provider is defined by the gap between\n adjacent offsetMap entries.  The last entry is bounded by the total\n length of the provider as specified by the length field.",
      "static": false,
      "type_long": "java.util.TreeMap\u003cjava.lang.Long,java.lang.Long\u003e",
      "type_short": "TreeMap",
      "constant_value": null
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "fsrl",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.formats.gfilesystem.FSRL",
      "type_short": "FSRL",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new RangeMappedByteProvider.",
      "javadoc": "Creates a new {@link RangeMappedByteProvider}.\n@param provider {@link ByteProvider} to wrap\n@param fsrl {@link FSRL} of this new byte provider",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "ByteProvider to wrap"
        },
        {
          "name": "fsrl",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "FSRL of this new byte provider"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addRange",
      "comment": "Adds a range to the current end of this instance.\n \n If the new range immediately follows the previous range, the new range is merged\n into the previous entry.",
      "javadoc": "Adds a range to the current end of this instance.\n \u003cp\u003e\n If the new range immediately follows the previous range, the new range is merged\n into the previous entry.\n@param offset long byte offset in the delegate ByteProvider, -1 indicates a sparse\n range with no storage\n@param rangeLen long length of the range in the delegate ByteProvider",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "long byte offset in the delegate ByteProvider, -1 indicates a sparse\n range with no storage"
        },
        {
          "name": "rangeLen",
          "type_long": "long",
          "type_short": "long",
          "comment": "long length of the range in the delegate ByteProvider"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addSparseRange",
      "comment": "Adds a sparse range to the current end of this instance.",
      "javadoc": "Adds a sparse range to the current end of this instance.\n@param rangeLen long length of the sparse range",
      "static": false,
      "params": [
        {
          "name": "rangeLen",
          "type_long": "long",
          "type_short": "long",
          "comment": "long length of the sparse range"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRangeCount",
      "comment": "Return the number of ranges.  Adjacent ranges that were merged\n will count as a single range.",
      "javadoc": "Return the number of ranges.  Adjacent ranges that were merged\n will count as a single range.\n@return number of ranges",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of ranges"
      },
      "throws": []
    },
    {
      "name": "getFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFSRL",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRL",
        "type_short": "FSRL",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAbsolutePath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isValidIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readByte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "longCount",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readBytes",
      "comment": "Read bytes at the specified index into the given byte array.\n \n See InputStream#read(byte[], int, int).\n ",
      "javadoc": "Read bytes at the specified index into the given byte array.\n \u003cp\u003e\n See {@link InputStream#read(byte[], int, int)}.\n \u003cp\u003e\n@param index file offset to start reading\n@param buffer byte array that will receive the bytes\n@param offset offset inside the byte array to place the bytes\n@param len number of bytes to read\n@return number of actual bytes read\n@throws IOException if error",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": "file offset to start reading"
        },
        {
          "name": "buffer",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array that will receive the bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset inside the byte array to place the bytes"
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes to read"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of actual bytes read"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        }
      ]
    },
    {
      "name": "ensureBounds",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "count",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
