{
  "name": "BaseRelocationDataDirectory",
  "comment": "Points to the base relocation information.",
  "javadoc": "Points to the base relocation information.",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.ByteArrayConverter"
  ],
  "extends": "ghidra.app.util.bin.format.pe.DataDirectory",
  "fields": [
    {
      "name": "NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"IMAGE_DIRECTORY_ENTRY_BASERELOC\""
    },
    {
      "name": "relocs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.BaseRelocation[]",
      "type_short": "ghidra.app.util.bin.format.pe.BaseRelocation[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createBaseRelocationDataDirectory",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.BaseRelocationDataDirectory",
        "type_short": "BaseRelocationDataDirectory",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initBaseRelocationDataDirectory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDirectoryName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "isBinary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parse",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBaseRelocations",
      "comment": "Returns the array of base relocations defined in this base relocation data directory.",
      "javadoc": "Returns the array of base relocations defined in this base relocation data directory.\n@return the array of base relocations defined in this base relocation data directory",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.BaseRelocation[]",
        "type_short": "ghidra.app.util.bin.format.pe.BaseRelocation[]",
        "comment": "the array of base relocations defined in this base relocation data directory"
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.StructConverter#toDataType()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "removeAllRelocations",
      "comment": "Removes all base relocations from this base relocation\n directory.",
      "javadoc": "Removes all base relocations from this base relocation\n directory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createBaseRelocation",
      "comment": "Create a new base relocation using the specified\n virtual address.",
      "javadoc": "Create a new base relocation using the specified\n virtual address.\n@param va the virtual address of the new base relocation\n@return the new base relocation",
      "static": false,
      "params": [
        {
          "name": "va",
          "type_long": "int",
          "type_short": "int",
          "comment": "the virtual address of the new base relocation"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.BaseRelocation",
        "type_short": "BaseRelocation",
        "comment": "the new base relocation"
      },
      "throws": []
    },
    {
      "name": "addBaseRelocation",
      "comment": "Adds the specified base relocation.",
      "javadoc": "Adds the specified base relocation.\n@param reloc the new base relocation",
      "static": false,
      "params": [
        {
          "name": "reloc",
          "type_long": "ghidra.app.util.bin.format.pe.BaseRelocation",
          "type_short": "BaseRelocation",
          "comment": "the new base relocation"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toBytes",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.ByteArrayConverter#toBytes(ghidra.util.DataConverter)",
      "static": false,
      "params": [
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    }
  ]
}
