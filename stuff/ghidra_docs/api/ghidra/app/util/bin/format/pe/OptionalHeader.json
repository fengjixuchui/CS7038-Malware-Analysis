{
  "name": "OptionalHeader",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "fields": [
    {
      "name": "IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA",
      "comment": "ASLR with 64 bit address space.",
      "javadoc": "ASLR with 64 bit address space.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32"
    },
    {
      "name": "IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE",
      "comment": "The DLL can be relocated at load time.",
      "javadoc": "The DLL can be relocated at load time.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "64"
    },
    {
      "name": "IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY",
      "comment": "Code integrity checks are forced.",
      "javadoc": "Code integrity checks are forced.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "128"
    },
    {
      "name": "IMAGE_DLLCHARACTERISTICS_NX_COMPAT",
      "comment": "The image is compatible with data execution prevention (DEP)",
      "javadoc": "The image is compatible with data execution prevention (DEP)",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "256"
    },
    {
      "name": "IMAGE_DLLCHARACTERISTICS_NO_ISOLATION",
      "comment": "The image is isolation aware, but should not be isolated.",
      "javadoc": "The image is isolation aware, but should not be isolated.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "512"
    },
    {
      "name": "IMAGE_DLLCHARACTERISTICS_NO_SEH",
      "comment": "The image does not use structured exception handling (SEH).",
      "javadoc": "The image does not use structured exception handling (SEH).",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1024"
    },
    {
      "name": "IMAGE_DLLCHARACTERISTICS_NO_BIND",
      "comment": "Do not bind the image.",
      "javadoc": "Do not bind the image.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2048"
    },
    {
      "name": "IMAGE_DLLCHARACTERISTICS_APPCONTAINER",
      "comment": "Image should execute in an AppContainer.",
      "javadoc": "Image should execute in an AppContainer.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4096"
    },
    {
      "name": "IMAGE_DLLCHARACTERISTICS_WDM_DRIVER",
      "comment": "A WDM driver.",
      "javadoc": "A WDM driver.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8192"
    },
    {
      "name": "IMAGE_DLLCHARACTERISTICS_GUARD_CF",
      "comment": "Image supports Control Flow Guard.",
      "javadoc": "Image supports Control Flow Guard.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16384"
    },
    {
      "name": "IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE",
      "comment": "The image is terminal server aware.",
      "javadoc": "The image is terminal server aware.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32768"
    },
    {
      "name": "IMAGE_NUMBEROF_DIRECTORY_ENTRIES",
      "comment": "The count of data directories in the optional header.",
      "javadoc": "The count of data directories in the optional header.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "16"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_EXPORT",
      "comment": "Export directory index",
      "javadoc": "Export directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "0"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_IMPORT",
      "comment": "Import directory index",
      "javadoc": "Import directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "1"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_RESOURCE",
      "comment": "Resource directory index",
      "javadoc": "Resource directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "2"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_EXCEPTION",
      "comment": "Exception directory index",
      "javadoc": "Exception directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "3"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_SECURITY",
      "comment": "Security directory index",
      "javadoc": "Security directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "4"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_BASERELOC",
      "comment": "Base Relocation Table directory index",
      "javadoc": "Base Relocation Table directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "5"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_DEBUG",
      "comment": "Debug directory index",
      "javadoc": "Debug directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "6"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_ARCHITECTURE",
      "comment": "Architecture Specific Data directory index",
      "javadoc": "Architecture Specific Data directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "7"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_GLOBALPTR",
      "comment": "Global Pointer directory index",
      "javadoc": "Global Pointer directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "8"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_TLS",
      "comment": "TLS directory index",
      "javadoc": "TLS directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "9"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG",
      "comment": "Load Configuration directory index",
      "javadoc": "Load Configuration directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "10"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT",
      "comment": "Bound Import directory  index",
      "javadoc": "Bound Import directory  index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "11"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_IAT",
      "comment": "Import Address Table directory index",
      "javadoc": "Import Address Table directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "12"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT",
      "comment": "Delay Load Import Descriptors directory index",
      "javadoc": "Delay Load Import Descriptors directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "13"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR",
      "comment": "COM Runtime Descriptor directory index",
      "javadoc": "COM Runtime Descriptor directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "14"
    },
    {
      "name": "IMAGE_DIRECTORY_ENTRY_COMHEADER",
      "comment": "New name for the COM Descriptor directory index",
      "javadoc": "New name for the COM Descriptor directory index",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "14"
    }
  ],
  "methods": [
    {
      "name": "is64bit",
      "comment": "Returns true of this optional header is 64-bit.",
      "javadoc": "Returns true of this optional header is 64-bit.\n@return true of this optional header is 64-bit",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true of this optional header is 64-bit"
      },
      "throws": []
    },
    {
      "name": "getMajorLinkerVersion",
      "comment": "Return the major version number of the linker that built this binary.",
      "javadoc": "Return the major version number of the linker that built this binary.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinorLinkerVersion",
      "comment": "Return the minor version number of the linker that built this binary.",
      "javadoc": "Return the minor version number of the linker that built this binary.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMajorOperatingSystemVersion",
      "comment": "Return the major version number of the required operating system.",
      "javadoc": "Return the major version number of the required operating system.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinorOperatingSystemVersion",
      "comment": "Return the minor version number of the required operating system.",
      "javadoc": "Return the minor version number of the required operating system.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMajorImageVersion",
      "comment": "Get the major version number of the image.",
      "javadoc": "Get the major version number of the image.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinorImageVersion",
      "comment": "Get the minor version number of the image.",
      "javadoc": "Get the minor version number of the image.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMajorSubsystemVersion",
      "comment": "Get the major version number of the subsystem.",
      "javadoc": "Get the major version number of the subsystem.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinorSubsystemVersion",
      "comment": "Get the minor version number of the subsystem.",
      "javadoc": "Get the minor version number of the subsystem.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getWin32VersionValue",
      "comment": "This value is reserved, and must be 0",
      "javadoc": "This value is reserved, and must be 0",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getChecksum",
      "comment": "Get the image file checksum.",
      "javadoc": "Get the image file checksum.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSubsystem",
      "comment": "Get the subsystem that is required to run this image.",
      "javadoc": "Get the subsystem that is required to run this image.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDllCharacteristics",
      "comment": "Return flags that describe properties of and features of this binary.",
      "javadoc": "Return flags that describe properties of and features of this binary.\n@see ghidra.app.util.bin.format.pe.DllCharacteristics\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeOfStackReserve",
      "comment": "Return the size of the stack reservation",
      "javadoc": "Return the size of the stack reservation\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeOfStackCommit",
      "comment": "Return the size of the stack to commit",
      "javadoc": "Return the size of the stack to commit\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeOfHeapReserve",
      "comment": "Return the size of the heap reservation",
      "javadoc": "Return the size of the heap reservation\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeOfHeapCommit",
      "comment": "Return the size of the heap to commit",
      "javadoc": "Return the size of the heap to commit\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLoaderFlags",
      "comment": "Return the flags passed to the loader. Obsolete.",
      "javadoc": "Return the flags passed to the loader. Obsolete.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressOfEntryPoint",
      "comment": "",
      "javadoc": "@return the RVA of the first code byte in the file that will be executed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the RVA of the first code byte in the file that will be executed"
      },
      "throws": []
    },
    {
      "name": "getImageBase",
      "comment": "",
      "javadoc": "@return the preferred load address of this file in memory",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the preferred load address of this file in memory"
      },
      "throws": []
    },
    {
      "name": "getOriginalImageBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "wasRebased",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeOfImage",
      "comment": "",
      "javadoc": "@return the RVA that would be assigned to the next section following the last section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the RVA that would be assigned to the next section following the last section"
      },
      "throws": []
    },
    {
      "name": "setSizeOfImage",
      "comment": "",
      "javadoc": "@see #getSizeOfImage()",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeOfHeaders",
      "comment": "",
      "javadoc": "@return the combined size of all headers",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the combined size of all headers"
      },
      "throws": []
    },
    {
      "name": "setSizeOfHeaders",
      "comment": "",
      "javadoc": "@see #getSizeOfHeaders()",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeOfCode",
      "comment": "Returns the combined total size of all sections with\n the IMAGE_SCN_CNT_CODE attribute.",
      "javadoc": "Returns the combined total size of all sections with\n the \u003ccode\u003eIMAGE_SCN_CNT_CODE\u003c/code\u003e attribute.\n@return the combined total size of all sections with\n the \u003ccode\u003eIMAGE_SCN_CNT_CODE\u003c/code\u003e attribute.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the combined total size of all sections with\n the IMAGE_SCN_CNT_CODE attribute."
      },
      "throws": []
    },
    {
      "name": "setSizeOfCode",
      "comment": "",
      "javadoc": "@see #getSizeOfCode()",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumberOfRvaAndSizes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeOfInitializedData",
      "comment": "Returns the combined size of all initialized data sections.",
      "javadoc": "Returns the combined size of all initialized data sections.\n@return the combined size of all initialized data sections",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the combined size of all initialized data sections"
      },
      "throws": []
    },
    {
      "name": "setSizeOfInitializedData",
      "comment": "",
      "javadoc": "@see #getSizeOfInitializedData()",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeOfUninitializedData",
      "comment": "Returns the size of all sections with the uninitialized\n data attributes.",
      "javadoc": "Returns the size of all sections with the uninitialized\n data attributes.\n@return the size of all sections with the uninitialized data attributes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the size of all sections with the uninitialized data attributes"
      },
      "throws": []
    },
    {
      "name": "setSizeOfUninitializedData",
      "comment": "",
      "javadoc": "@see #getSizeOfUninitializedData()",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBaseOfCode",
      "comment": "Returns the RVA of the first byte of code when loaded in memory.",
      "javadoc": "Returns the RVA of the first byte of code when loaded in memory.\n@return the RVA of the first byte of code when loaded in memory",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the RVA of the first byte of code when loaded in memory"
      },
      "throws": []
    },
    {
      "name": "getBaseOfData",
      "comment": "",
      "javadoc": "@return the RVA of the first byte of data when loaded into memory",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the RVA of the first byte of data when loaded into memory"
      },
      "throws": []
    },
    {
      "name": "processDataDirectories",
      "comment": "This methods tells this optional header to process its data directories.",
      "javadoc": "This methods tells this optional header to process its data directories.",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDataDirectories",
      "comment": "Returns the array of data directories.",
      "javadoc": "Returns the array of data directories.\n@return the array of data directories",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.DataDirectory[]",
        "type_short": "ghidra.app.util.bin.format.pe.DataDirectory[]",
        "comment": "the array of data directories"
      },
      "throws": []
    },
    {
      "name": "getSectionAlignment",
      "comment": "",
      "javadoc": "@return the section alignment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the section alignment"
      },
      "throws": []
    },
    {
      "name": "getFileAlignment",
      "comment": "",
      "javadoc": "@return the file alignment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the file alignment"
      },
      "throws": []
    },
    {
      "name": "writeHeader",
      "comment": "Writes this optional header to the specified random access file.",
      "javadoc": "Writes this optional header to the specified random access file.\n@param raf the random access file\n@param dc the data converter\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "raf",
          "type_long": "java.io.RandomAccessFile",
          "type_short": "RandomAccessFile",
          "comment": "the random access file"
        },
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": "the data converter"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "validateDataDirectories",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCLI",
      "comment": "",
      "javadoc": "@return true if the PE uses predominantly CLI code; otherwise, false.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the PE uses predominantly CLI code; otherwise, false."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
