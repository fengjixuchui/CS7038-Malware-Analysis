{
  "name": "SectionHeader",
  "comment": "A class to the represent the IMAGE_SECTION_HEADER\n struct as defined in winnt.h.\n \n \n typedef struct _IMAGE_SECTION_HEADER {\n    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];\n    union {\n            DWORD   PhysicalAddress;\n            DWORD   VirtualSize;\t\t\t// MANDATORY\n    } Misc;\n    DWORD   VirtualAddress;\t\t\t\t// MANDATORY\n    DWORD   SizeOfRawData;\t\t\t\t// MANDATORY\n    DWORD   PointerToRawData;\t\t\t\t// MANDATORY\n    DWORD   PointerToRelocations;\n    DWORD   PointerToLinenumbers;\n    WORD    NumberOfRelocations;\n    WORD    NumberOfLinenumbers;\n    DWORD   Characteristics;\t\t\t\t// MANDATORY\n } IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; * \n \n \n #define IMAGE_SIZEOF_SECTION_HEADER 40 *",
  "javadoc": "A class to the represent the IMAGE_SECTION_HEADER\n struct as defined in \u003ccode\u003ewinnt.h\u003c/code\u003e.\n \u003cbr\u003e\n \u003cpre\u003e\n typedef struct _IMAGE_SECTION_HEADER {\n    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];\n    union {\n            DWORD   PhysicalAddress;\n            DWORD   VirtualSize;\t\t\t// MANDATORY\n    } Misc;\n    DWORD   VirtualAddress;\t\t\t\t// MANDATORY\n    DWORD   SizeOfRawData;\t\t\t\t// MANDATORY\n    DWORD   PointerToRawData;\t\t\t\t// MANDATORY\n    DWORD   PointerToRelocations;\n    DWORD   PointerToLinenumbers;\n    WORD    NumberOfRelocations;\n    WORD    NumberOfLinenumbers;\n    DWORD   Characteristics;\t\t\t\t// MANDATORY\n } IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; * \n \u003c/pre\u003e\n \u003cbr\u003e\n \u003ccode\u003e#define IMAGE_SIZEOF_SECTION_HEADER 40\u003c/code\u003e *",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter",
    "ghidra.app.util.bin.ByteArrayConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NAME",
      "comment": "The name to use when converting into a structure data type.",
      "javadoc": "The name to use when converting into a structure data type.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"IMAGE_SECTION_HEADER\""
    },
    {
      "name": "IMAGE_SIZEOF_SHORT_NAME",
      "comment": "The size of the section header short name.",
      "javadoc": "The size of the section header short name.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "IMAGE_SIZEOF_SECTION_HEADER",
      "comment": "The size of the section header.",
      "javadoc": "The size of the section header.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "40"
    },
    {
      "name": "IMAGE_SCN_CNT_CODE",
      "comment": "Section contains code.",
      "javadoc": "Section contains code.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32"
    },
    {
      "name": "IMAGE_SCN_CNT_INITIALIZED_DATA",
      "comment": "Section contains initialized data.",
      "javadoc": "Section contains initialized data.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "64"
    },
    {
      "name": "IMAGE_SCN_CNT_UNINITIALIZED_DATA",
      "comment": "Section contains uninitialized data.",
      "javadoc": "Section contains uninitialized data.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "128"
    },
    {
      "name": "IMAGE_SCN_LNK_INFO",
      "comment": "Section contains information for use by the linker. \n Only exists in OBJs.",
      "javadoc": "Section contains information for use by the linker. \n Only exists in OBJs.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "512"
    },
    {
      "name": "IMAGE_SCN_LNK_REMOVE",
      "comment": "Section contents will not become part of the image. \n This only appears in OBJ files.",
      "javadoc": "Section contents will not become part of the image. \n This only appears in OBJ files.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2048"
    },
    {
      "name": "IMAGE_SCN_LNK_COMDAT",
      "comment": "Section contents is communal data (comdat). \n Communal data is data (or code) that can be \n defined in multiple OBJs. The linker will select \n one copy to include in the executable. Comdats \n are vital for support of C++ template functions \n and function-level linking. Comdat sections only \n appear in OBJ files.",
      "javadoc": "Section contents is communal data (comdat). \n Communal data is data (or code) that can be \n defined in multiple OBJs. The linker will select \n one copy to include in the executable. Comdats \n are vital for support of C++ template functions \n and function-level linking. Comdat sections only \n appear in OBJ files.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4096"
    },
    {
      "name": "IMAGE_SCN_NO_DEFER_SPEC_EXC",
      "comment": "Reset speculative exceptions handling bits in the TLB entries for this section.",
      "javadoc": "Reset speculative exceptions handling bits in the TLB entries for this section.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16384"
    },
    {
      "name": "IMAGE_SCN_GPREL",
      "comment": "Section content can be accessed relative to GP.",
      "javadoc": "Section content can be accessed relative to GP.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32768"
    },
    {
      "name": "IMAGE_SCN_ALIGN_1BYTES",
      "comment": "Align on 1-byte boundary.",
      "javadoc": "Align on 1-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1048576"
    },
    {
      "name": "IMAGE_SCN_ALIGN_2BYTES",
      "comment": "Align on 2-byte boundary.",
      "javadoc": "Align on 2-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2097152"
    },
    {
      "name": "IMAGE_SCN_ALIGN_4BYTES",
      "comment": "Align on 4-byte boundary.",
      "javadoc": "Align on 4-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3145728"
    },
    {
      "name": "IMAGE_SCN_ALIGN_8BYTES",
      "comment": "Align on 8-byte boundary.",
      "javadoc": "Align on 8-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4194304"
    },
    {
      "name": "IMAGE_SCN_ALIGN_16BYTES",
      "comment": "Align on 16-byte boundary.",
      "javadoc": "Align on 16-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5242880"
    },
    {
      "name": "IMAGE_SCN_ALIGN_32BYTES",
      "comment": "Align on 32-byte boundary.",
      "javadoc": "Align on 32-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6291456"
    },
    {
      "name": "IMAGE_SCN_ALIGN_64BYTES",
      "comment": "Align on 64-byte boundary.",
      "javadoc": "Align on 64-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "7340032"
    },
    {
      "name": "IMAGE_SCN_ALIGN_128BYTES",
      "comment": "Align on 128-byte boundary.",
      "javadoc": "Align on 128-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8388608"
    },
    {
      "name": "IMAGE_SCN_ALIGN_256BYTES",
      "comment": "Align on 256-byte boundary.",
      "javadoc": "Align on 256-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "9437184"
    },
    {
      "name": "IMAGE_SCN_ALIGN_512BYTES",
      "comment": "Align on 512-byte boundary.",
      "javadoc": "Align on 512-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "10485760"
    },
    {
      "name": "IMAGE_SCN_ALIGN_1024BYTES",
      "comment": "Align on 1024-byte boundary.",
      "javadoc": "Align on 1024-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "11534336"
    },
    {
      "name": "IMAGE_SCN_ALIGN_2048BYTES",
      "comment": "Align on 2048-byte boundary.",
      "javadoc": "Align on 2048-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "12582912"
    },
    {
      "name": "IMAGE_SCN_ALIGN_4096BYTES",
      "comment": "Align on 4096-byte boundary.",
      "javadoc": "Align on 4096-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "13631488"
    },
    {
      "name": "IMAGE_SCN_ALIGN_8192BYTES",
      "comment": "Align on 8192-byte boundary.",
      "javadoc": "Align on 8192-byte boundary.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "14680064"
    },
    {
      "name": "IMAGE_SCN_LNK_NRELOC_OVFL",
      "comment": "Section contains extended relocations.",
      "javadoc": "Section contains extended relocations.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16777216"
    },
    {
      "name": "IMAGE_SCN_MEM_DISCARDABLE",
      "comment": "The section can be discarded from the final executable. \n Used to hold information for the linker\u0027s use, \n including the .debug$ sections.",
      "javadoc": "The section can be discarded from the final executable. \n Used to hold information for the linker\u0027s use, \n including the .debug$ sections.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "33554432"
    },
    {
      "name": "IMAGE_SCN_MEM_NOT_CACHED",
      "comment": "Section is not cachable.",
      "javadoc": "Section is not cachable.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "67108864"
    },
    {
      "name": "IMAGE_SCN_MEM_NOT_PAGED",
      "comment": "The section is not pageable, so it should \n always be physically present in memory. \n Often used for kernel-mode drivers.",
      "javadoc": "The section is not pageable, so it should \n always be physically present in memory. \n Often used for kernel-mode drivers.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "134217728"
    },
    {
      "name": "IMAGE_SCN_MEM_SHARED",
      "comment": "Section is shareable. The physical pages containing this \n section\u0027s data will be shared between all processes \n that have this executable loaded. Thus, every process \n will see the exact same values for data in this section. \n Useful for making global variables shared between all \n instances of a process. To make a section shared, \n use the /section:name,S linker switch.",
      "javadoc": "Section is shareable. The physical pages containing this \n section\u0027s data will be shared between all processes \n that have this executable loaded. Thus, every process \n will see the exact same values for data in this section. \n Useful for making global variables shared between all \n instances of a process. To make a section shared, \n use the /section:name,S linker switch.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "268435456"
    },
    {
      "name": "IMAGE_SCN_MEM_EXECUTE",
      "comment": "Section is executable.",
      "javadoc": "Section is executable.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "536870912"
    },
    {
      "name": "IMAGE_SCN_MEM_READ",
      "comment": "Section is readable.",
      "javadoc": "Section is readable.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1073741824"
    },
    {
      "name": "IMAGE_SCN_MEM_WRITE",
      "comment": "Section is writeable.",
      "javadoc": "Section is writeable.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-2147483648"
    },
    {
      "name": "NOT_SET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-1"
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "physicalAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "virtualSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "virtualAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "sizeOfRawData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "pointerToRawData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "pointerToRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "pointerToLinenumbers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "numberOfRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "numberOfLinenumbers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "characteristics",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.BinaryReader",
      "type_short": "BinaryReader",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "readSectionHeader",
      "comment": "Read a SectionHeader from the specified stream starting at .",
      "javadoc": "Read a {@link SectionHeader} from the specified stream starting at {@code index}.\n@param reader {@link BinaryReader} to read from\n@param index long offset in the reader where the section header starts\n@param stringTableOffset offset of the string table, or -1 if not available\n@return new {@link SectionHeader}\n@throws IOException if error reading data",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader to read from"
        },
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": "long offset in the reader where the section header starts"
        },
        {
          "name": "stringTableOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "offset of the string table, or -1 if not available"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.SectionHeader",
        "type_short": "SectionHeader",
        "comment": "new SectionHeader"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error reading data"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": ""
        },
        {
          "name": "optHeader",
          "type_long": "ghidra.app.util.bin.format.pe.OptionalHeader",
          "type_short": "OptionalHeader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the ASCII name of the section. A \n section name is not guaranteed to be \n null-terminated. If you specify a section name \n longer than eight characters, the linker \n truncates it to eight characters in the \n executable. A mechanism exists for allowing \n longer section names in OBJ files. Section \n names often start with a period, but this is \n not a requirement. Section names with a $ in \n the name get special treatment from the linker. \n Sections with identical names prior to the $ \n character are merged. The characters following \n the $ provide an alphabetic ordering for how the \n merged sections appear in the final section. \n There\u0027s quite a bit more to the subject of sections \n with $ in the name and how they\u0027re combined, but \n the details are outside the scope of this article",
      "javadoc": "Returns the ASCII name of the section. A \n section name is not guaranteed to be \n null-terminated. If you specify a section name \n longer than eight characters, the linker \n truncates it to eight characters in the \n executable. A mechanism exists for allowing \n longer section names in OBJ files. Section \n names often start with a period, but this is \n not a requirement. Section names with a $ in \n the name get special treatment from the linker. \n Sections with identical names prior to the $ \n character are merged. The characters following \n the $ provide an alphabetic ordering for how the \n merged sections appear in the final section. \n There\u0027s quite a bit more to the subject of sections \n with $ in the name and how they\u0027re combined, but \n the details are outside the scope of this article\n@return the ASCII name of the section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the ASCII name of the section"
      },
      "throws": []
    },
    {
      "name": "getReadableName",
      "comment": "Returns a readable ascii version of the name.\n All non-readable characters\n are replaced with underscores.",
      "javadoc": "Returns a readable ascii version of the name.\n All non-readable characters\n are replaced with underscores.\n@return a readable ascii version of the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a readable ascii version of the name"
      },
      "throws": []
    },
    {
      "name": "getPhysicalAddress",
      "comment": "Returns the physical (file) address of this section.",
      "javadoc": "Returns the physical (file) address of this section.\n@return the physical (file) address of this section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the physical (file) address of this section"
      },
      "throws": []
    },
    {
      "name": "getVirtualAddress",
      "comment": "In executables, returns the RVA where \n the section begins in memory. Should be set to 0 in OBJs.\n this section should be loaded into memory.",
      "javadoc": "In executables, returns the RVA where \n the section begins in memory. Should be set to 0 in OBJs.\n this section should be loaded into memory.\n@return the RVA where the section begins in memory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the RVA where the section begins in memory."
      },
      "throws": []
    },
    {
      "name": "getVirtualSize",
      "comment": "Returns the actual, used size of the section. \n This field may be larger or \n smaller than the SizeOfRawData field. \n If the VirtualSize is larger, the \n SizeOfRawData field is the size of the \n initialized data from the executable, \n and the remaining bytes up to the VirtualSize \n should be zero-padded. This field is set \n to 0 in OBJ files.",
      "javadoc": "Returns the actual, used size of the section. \n This field may be larger or \n smaller than the SizeOfRawData field. \n If the VirtualSize is larger, the \n SizeOfRawData field is the size of the \n initialized data from the executable, \n and the remaining bytes up to the VirtualSize \n should be zero-padded. This field is set \n to 0 in OBJ files.\n@return the actual, used size of the section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the actual, used size of the section"
      },
      "throws": []
    },
    {
      "name": "getSizeOfRawData",
      "comment": "Returns the size (in bytes) of data stored for the section \n in the executable or OBJ.",
      "javadoc": "Returns the size (in bytes) of data stored for the section \n in the executable or OBJ.\n@return the size (in bytes) of data stored for the section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size (in bytes) of data stored for the section"
      },
      "throws": []
    },
    {
      "name": "getPointerToRawData",
      "comment": "Returns the file offset where the data \n for the section begins. For executables, \n this value must be a multiple of the file \n alignment given in the PE header.\n \n If a section is uninitialized, this value will be 0.",
      "javadoc": "Returns the file offset where the data \n for the section begins. For executables, \n this value must be a multiple of the file \n alignment given in the PE header.\n \u003cp\u003e\n If a section is uninitialized, this value will be 0.\n@return the file offset where the data for the section begins",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the file offset where the data for the section begins"
      },
      "throws": []
    },
    {
      "name": "getPointerToRelocations",
      "comment": "Returns the file offset of relocations for this section.",
      "javadoc": "Returns the file offset of relocations for this section.\n@return the file offset of relocations for this section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the file offset of relocations for this section"
      },
      "throws": []
    },
    {
      "name": "getNumberOfRelocations",
      "comment": "Returns the number of relocations pointed \n to by the PointerToRelocations field.",
      "javadoc": "Returns the number of relocations pointed \n to by the PointerToRelocations field.\n@return the number of relocations",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of relocations"
      },
      "throws": []
    },
    {
      "name": "getPointerToLinenumbers",
      "comment": "Return the file offset for COFF-style line \n numbers for this section.",
      "javadoc": "Return the file offset for COFF-style line \n numbers for this section.\n@return the file offset for COFF-style line numbers for this section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the file offset for COFF-style line numbers for this section"
      },
      "throws": []
    },
    {
      "name": "getCharacteristics",
      "comment": "Returns the flags OR\u0027ed together, indicating the \n attributes of this section. Many of these flags \n can be set with the linker\u0027s /SECTION option. \n Common values include those listed in Figure 7.",
      "javadoc": "Returns the flags OR\u0027ed together, indicating the \n attributes of this section. Many of these flags \n can be set with the linker\u0027s /SECTION option. \n Common values include those listed in Figure 7.\n@return the flags OR\u0027ed together, indicating the attributes of this section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the flags OR\u0027ed together, indicating the attributes of this section"
      },
      "throws": []
    },
    {
      "name": "getNumberOfLinenumbers",
      "comment": "Returns the number of line numbers pointed to by the \n NumberOfRelocations field.",
      "javadoc": "Returns the number of line numbers pointed to by the \n NumberOfRelocations field.\n@return the number of line numbers",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of line numbers"
      },
      "throws": []
    },
    {
      "name": "toBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDataStream",
      "comment": "Returns an input stream to underlying bytes of this section.",
      "javadoc": "Returns an input stream to underlying bytes of this section.\n@return an input stream to underlying bytes of this section\n@throws IOException if an i/o error occurs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": "an input stream to underlying bytes of this section"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an i/o error occurs."
        }
      ]
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "@see java.lang.Object#toString()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeHeader",
      "comment": "Writes this section header to the specified random access file.",
      "javadoc": "Writes this section header to the specified random access file.\n@param raf the random access file\n@param dc the data converter\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [
        {
          "name": "raf",
          "type_long": "java.io.RandomAccessFile",
          "type_short": "RandomAccessFile",
          "comment": "the random access file"
        },
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": "the data converter"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "writeBytes",
      "comment": "Writes the bytes from this section into the specified random access file.\n The bytes will be written starting at the byte position\n specified by getPointerToRawData().",
      "javadoc": "Writes the bytes from this section into the specified random access file.\n The bytes will be written starting at the byte position\n specified by \u003ccode\u003egetPointerToRawData()\u003c/code\u003e.\n@param raf the random access file\n@param rafIndex the index into the RAF where the bytes will be written\n@param dc the data converter\n@param block the memory block corresponding to this section\n@param useBlockBytes if true, then use the bytes from the memory block, \n                      otherwise use the bytes from this section.\n@throws IOException if there are errors writing to the file\n@throws MemoryAccessException if the byte from the memory block cannot be accesses",
      "static": false,
      "params": [
        {
          "name": "raf",
          "type_long": "java.io.RandomAccessFile",
          "type_short": "RandomAccessFile",
          "comment": "the random access file"
        },
        {
          "name": "rafIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index into the RAF where the bytes will be written"
        },
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": "the data converter"
        },
        {
          "name": "block",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": "the memory block corresponding to this section"
        },
        {
          "name": "useBlockBytes",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, then use the bytes from the memory block, \n                      otherwise use the bytes from this section."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there are errors writing to the file"
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if the byte from the memory block cannot be accesses"
        }
      ]
    },
    {
      "name": "updatePointers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setVirtualSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSizeOfRawData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
