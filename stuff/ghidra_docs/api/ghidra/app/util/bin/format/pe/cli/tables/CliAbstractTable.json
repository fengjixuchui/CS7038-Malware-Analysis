{
  "name": "CliAbstractTable",
  "comment": "Generic Metadata table.  Subclasses should provided implementations for the actual\n tables.",
  "javadoc": "Generic Metadata table.  Subclasses should provided implementations for the actual\n tables.",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter",
    "ghidra.app.util.bin.format.pe.PeMarkupable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "PATH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"/PE/CLI/Metadata/Tables\""
    },
    {
      "name": "readerOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "tableType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable",
      "type_short": "CliTypeTable",
      "constant_value": null
    },
    {
      "name": "numRows",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "rows",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.pe.cli.tables.CliAbstractTableRow\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "metadataStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata",
      "type_short": "CliStreamMetadata",
      "constant_value": null
    },
    {
      "name": "strings",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cjava.lang.Integer\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "blobs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cjava.lang.Integer\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "userStrings",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cjava.lang.Integer\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new generic CLI metadata table.  This is intended to be called by a subclass\n metadata table during its creation.",
      "javadoc": "Creates a new generic CLI metadata table.  This is intended to be called by a subclass\n metadata table during its creation.\n@param reader A reader that is used to read the table.\n@param metadataStream The metadata stream that the table lives in.\n@param tableType The type of table to create.",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "A reader that is used to read the table."
        },
        {
          "name": "metadataStream",
          "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata",
          "type_short": "CliStreamMetadata",
          "comment": "The metadata stream that the table lives in."
        },
        {
          "name": "tableType",
          "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable",
          "type_short": "CliTypeTable",
          "comment": "The type of table to create."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableType",
      "comment": "Gets this table\u0027s table type.",
      "javadoc": "Gets this table\u0027s table type.\n@return This table\u0027s table type.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable",
        "type_short": "CliTypeTable",
        "comment": "This table\u0027s table type."
      },
      "throws": []
    },
    {
      "name": "getNumRows",
      "comment": "Gets the number of rows in this table.\n \n return The number of rows in this table.",
      "javadoc": "Gets the number of rows in this table.\n \n return The number of rows in this table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRowSize",
      "comment": "Gets the size in bytes of a row in this table.\n \n return The size in bytes of a row in this table.",
      "javadoc": "Gets the size in bytes of a row in this table.\n \n return The size in bytes of a row in this table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableSize",
      "comment": "Gets the size in bytes of this table.",
      "javadoc": "Gets the size in bytes of this table.\n@return The size in bytes of this table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The size in bytes of this table."
      },
      "throws": []
    },
    {
      "name": "getRow",
      "comment": "Gets the row at the given index.\n \n NOTE: Per ISO/IEC 23271:2012(E) III.1.9, Row indices start from 1, while heap/stream indices start from 0.",
      "javadoc": "Gets the row at the given index.\n \u003cp\u003e\n NOTE: Per ISO/IEC 23271:2012(E) III.1.9, Row indices start from 1, while heap/stream indices start from 0.\n@param rowIndex The index of the row to get (starting at 1).\n@return The row at the given index.\n@throws IndexOutOfBoundsException if the row index is invalid.",
      "static": false,
      "params": [
        {
          "name": "rowIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "The index of the row to get (starting at 1)."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliAbstractTableRow",
        "type_short": "CliAbstractTableRow",
        "comment": "The row at the given index."
      },
      "throws": [
        {
          "type_long": "java.lang.IndexOutOfBoundsException",
          "type_short": "IndexOutOfBoundsException",
          "comment": "if the row index is invalid."
        }
      ]
    },
    {
      "name": "markup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "isBinary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getRowDataType",
      "comment": "Gets the data type of a row in this table.",
      "javadoc": "Gets the data type of a row in this table.\n@return The data type of a row in this table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "The data type of a row in this table."
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readBlobIndex",
      "comment": "Reads the blob index that the reader is positioned at.",
      "javadoc": "Reads the blob index that the reader is positioned at.\n@param reader A reader that is positioned at the blob index to read.\n@return The blob index that the reader is positioned at.\n@throws IOException if there is a problem reading the blob index.",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "A reader that is positioned at the blob index to read."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The blob index that the reader is positioned at."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem reading the blob index."
        }
      ]
    },
    {
      "name": "readStringIndex",
      "comment": "Reads the string index that the reader is positioned at.",
      "javadoc": "Reads the string index that the reader is positioned at.\n@param reader A reader that is positioned at the string index to read.\n@return The string index that the reader is positioned at.\n@throws IOException if there is a problem reading the string index.",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "A reader that is positioned at the string index to read."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The string index that the reader is positioned at."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem reading the string index."
        }
      ]
    },
    {
      "name": "readGuidIndex",
      "comment": "Reads the GUID index that the reader is positioned at.",
      "javadoc": "Reads the GUID index that the reader is positioned at.\n@param reader A reader that is positioned at the GUID index to read.\n@return The GUID index that the reader is positioned at.\n@throws IOException if there is a problem reading the GUID index.",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "A reader that is positioned at the GUID index to read."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The GUID index that the reader is positioned at."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem reading the GUID index."
        }
      ]
    },
    {
      "name": "readTableIndex",
      "comment": "Reads the table index that the reader is positioned at.",
      "javadoc": "Reads the table index that the reader is positioned at.\n@param reader A reader that is positioned at the table index to read.\n@return The table index that the reader is positioned at.\n@throws IOException if there is a problem reading the table index.",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "A reader that is positioned at the table index to read."
        },
        {
          "name": "table",
          "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable",
          "type_short": "CliTypeTable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The table index that the reader is positioned at."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem reading the table index."
        }
      ]
    },
    {
      "name": "getRowRepresentationSafe",
      "comment": "Convenience method for getting the row representation of a table.",
      "javadoc": "Convenience method for getting the row representation of a table.\n@param table The table that has the row.\n@param index The index of the row.\n@return The row representation of a table.",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable",
          "type_short": "CliTypeTable",
          "comment": "The table that has the row."
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "The index of the row."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The row representation of a table."
      },
      "throws": []
    },
    {
      "name": "getRowShortRepSafe",
      "comment": "Convenience method for getting a safe row representation of a table.",
      "javadoc": "Convenience method for getting a safe row representation of a table.\n@param otherTable The table that has the row.\n@param index The index of the row.\n@return The safe row representation of a table.",
      "static": false,
      "params": [
        {
          "name": "otherTable",
          "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable",
          "type_short": "CliTypeTable",
          "comment": "The table that has the row."
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "The index of the row."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The safe row representation of a table."
      },
      "throws": []
    }
  ]
}
