{
  "name": "OmfSegmentHeader",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.util.bin.format.omf.OmfRecord",
  "fields": [
    {
      "name": "segAttr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "frameNumber",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "segmentLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "segmentNameIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "classNameIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "overlayNameIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "segmentName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "className",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "overlayName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "isCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isReadable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isWritable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isExecutable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "vma",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "dataBlocks",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfData\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "num",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "datatype",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isCode",
      "comment": "",
      "javadoc": "@return true if this is a code segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is a code segment"
      },
      "throws": []
    },
    {
      "name": "isReadable",
      "comment": "",
      "javadoc": "@return true if this segment is readable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this segment is readable"
      },
      "throws": []
    },
    {
      "name": "isWritable",
      "comment": "",
      "javadoc": "@return true if this segment is writable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this segment is writable"
      },
      "throws": []
    },
    {
      "name": "isExecutable",
      "comment": "",
      "javadoc": "@return true if this segment is executable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this segment is executable"
      },
      "throws": []
    },
    {
      "name": "getFrameDatum",
      "comment": "",
      "javadoc": "@return the segment selector needed for this object",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the segment selector needed for this object"
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "",
      "javadoc": "@param language is the Program language for this binary\n@return the starting Address for this segment",
      "static": false,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "is the Program language for this binary"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the starting Address for this segment"
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "@return the name of this segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of this segment"
      },
      "throws": []
    },
    {
      "name": "getClassName",
      "comment": "",
      "javadoc": "@return the class name of this segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the class name of this segment"
      },
      "throws": []
    },
    {
      "name": "getOverlayName",
      "comment": "",
      "javadoc": "@return the name of the overlay, or the empty string",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the overlay, or the empty string"
      },
      "throws": []
    },
    {
      "name": "getStartAddress",
      "comment": "",
      "javadoc": "@return the load image address for this segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the load image address for this segment"
      },
      "throws": []
    },
    {
      "name": "getSegmentLength",
      "comment": "",
      "javadoc": "@return the length of the segment in bytes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the length of the segment in bytes"
      },
      "throws": []
    },
    {
      "name": "getAlignment",
      "comment": "",
      "javadoc": "@return the alignment required for this segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the alignment required for this segment"
      },
      "throws": []
    },
    {
      "name": "getCombine",
      "comment": "",
      "javadoc": "@return special combining rules for this segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "special combining rules for this segment"
      },
      "throws": []
    },
    {
      "name": "hasNonZeroData",
      "comment": "",
      "javadoc": "@return true if this block uses filler other than zero bytes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this block uses filler other than zero bytes"
      },
      "throws": []
    },
    {
      "name": "sortData",
      "comment": "Sort the data-blocks within this segment",
      "javadoc": "Sort the data-blocks within this segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRawDataStream",
      "comment": "Get an InputStream that reads in the raw data for this segment",
      "javadoc": "Get an InputStream that reads in the raw data for this segment\n@param reader is the image file reader\n@param log the log\n@return the InputStream\n@throws IOException for problems reading from the image file",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "is the image file reader"
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "the log"
        }
      ],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": "the InputStream"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for problems reading from the image file"
        }
      ]
    },
    {
      "name": "relocateSegment",
      "comment": "Given the first possible address where this segment can reside, relocate the\n segment based on this address and alignment considerations.",
      "javadoc": "Given the first possible address where this segment can reside, relocate the\n segment based on this address and alignment considerations.\n@param firstValidAddress is the first possible Address for the segment\n@param alignOverride if non-negative, overrides alignment info from the segment header\n@return the next possible address for following segments\n@throws OmfException for bad alignment information",
      "static": false,
      "params": [
        {
          "name": "firstValidAddress",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the first possible Address for the segment"
        },
        {
          "name": "alignOverride",
          "type_long": "int",
          "type_short": "int",
          "comment": "if non-negative, overrides alignment info from the segment header"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the next possible address for following segments"
      },
      "throws": [
        {
          "type_long": "ghidra.app.util.bin.format.omf.OmfException",
          "type_short": "OmfException",
          "comment": "for bad alignment information"
        }
      ]
    },
    {
      "name": "resolveNames",
      "comment": "Resolve special names from the name list such as: segment, class, overlay, names.\n This routine also determines the read/write/execute permissions for the segment\n based on the class name.",
      "javadoc": "Resolve special names from the name list such as: segment, class, overlay, names.\n This routine also determines the read/write/execute permissions for the segment\n based on the class name.\n@param nameList is the array of names associated with the file\n@throws OmfException for improper name indices",
      "static": false,
      "params": [
        {
          "name": "nameList",
          "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
          "type_short": "ArrayList",
          "comment": "is the array of names associated with the file"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.util.bin.format.omf.OmfException",
          "type_short": "OmfException",
          "comment": "for improper name indices"
        }
      ]
    },
    {
      "name": "addEnumeratedData",
      "comment": "Add an explicit data-block to this segment.",
      "javadoc": "Add an explicit data-block to this segment.\n@param rec is the data-block",
      "static": false,
      "params": [
        {
          "name": "rec",
          "type_long": "ghidra.app.util.bin.format.omf.OmfEnumeratedData",
          "type_short": "OmfEnumeratedData",
          "comment": "is the data-block"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "appendEnumeratedData",
      "comment": "Add an explicit data-block to this segment that might extend\n the length of this segment.  Borland compilers in particular produce\n data-blocks that can extend the segment in this way.",
      "javadoc": "Add an explicit data-block to this segment that might extend\n the length of this segment.  Borland compilers in particular produce\n data-blocks that can extend the segment in this way.\n@param rec is the data-block",
      "static": false,
      "params": [
        {
          "name": "rec",
          "type_long": "ghidra.app.util.bin.format.omf.OmfEnumeratedData",
          "type_short": "OmfEnumeratedData",
          "comment": "is the data-block"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addIteratedData",
      "comment": "Add a compressed-form data-block to this segment",
      "javadoc": "Add a compressed-form data-block to this segment\n@param rec is the data-block",
      "static": false,
      "params": [
        {
          "name": "rec",
          "type_long": "ghidra.app.util.bin.format.omf.OmfIteratedData",
          "type_short": "OmfIteratedData",
          "comment": "is the data-block"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
