{
  "name": "RichHeader",
  "comment": "The \"Rich\" header contains encoded metadata about the tool chain used to generate the binary.\n This class decodes and writes the Rich header (if it exists).",
  "javadoc": "The \"Rich\" header contains encoded metadata about the tool chain used to generate the binary.\n This class decodes and writes the Rich header (if it exists).",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter",
    "ghidra.app.util.bin.format.Writeable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "IMAGE_RICH_SIGNATURE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1751345490"
    },
    {
      "name": "IMAGE_DANS_SIGNATURE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1399742788"
    },
    {
      "name": "NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"IMAGE_RICH_HEADER\""
    },
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
      "type_short": "FactoryBundledWithBinaryReader",
      "constant_value": null
    },
    {
      "name": "table",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.RichTable",
      "type_short": "RichTable",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createRichHeader",
      "comment": "Create and returns the Rich header found from the given reader.  The reader should be\n positioned directly after the DOS header.",
      "javadoc": "Create and returns the Rich header found from the given reader.  The reader should be\n positioned directly after the DOS header.\n@param reader The reader to read the PE with.\n@return The Rich header associated with the given reader.",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": "The reader to read the PE with."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.RichHeader",
        "type_short": "RichHeader",
        "comment": "The Rich header associated with the given reader."
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Do not directly call this constructor.\n   \n Use #createRichHeader(FactoryBundledWithBinaryReader)",
      "javadoc": "Do not directly call this constructor.\n \u003cp\u003e  \n Use {@link #createRichHeader(FactoryBundledWithBinaryReader)}",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initRichHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "binaryReader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parse",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOffset",
      "comment": "Gets the offset of the Rich header.",
      "javadoc": "Gets the offset of the Rich header.\n@return the offset of the Rich header, or -1 if a Rich header was not found.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the offset of the Rich header, or -1 if a Rich header was not found."
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "Gets the size of the Rich header.",
      "javadoc": "Gets the size of the Rich header.\n@return the size of the Rich header.  Will be 0 if a Rich header was not found.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of the Rich header.  Will be 0 if a Rich header was not found."
      },
      "throws": []
    },
    {
      "name": "getMask",
      "comment": "Gets the Rich header mask.",
      "javadoc": "Gets the Rich header mask.\n@return the Rich header mask, or -1 if a Rich header was not found.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the Rich header mask, or -1 if a Rich header was not found."
      },
      "throws": []
    },
    {
      "name": "getRecords",
      "comment": "Gets the Rich header records.",
      "javadoc": "Gets the Rich header records.\n@return the Rich header records.  Could be empty if a Rich header was not found.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.rich.RichHeaderRecord[]",
        "type_short": "ghidra.app.util.bin.format.pe.rich.RichHeaderRecord[]",
        "comment": "the Rich header records.  Could be empty if a Rich header was not found."
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "write",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "raf",
          "type_long": "java.io.RandomAccessFile",
          "type_short": "RandomAccessFile",
          "comment": ""
        },
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
