{
  "name": "ElfDynamic",
  "comment": "A class to represent the Elf32_Dyn data structure.\n \n \n typedef  int32_t  Elf32_Sword;\n typedef uint32_t  Elf32_Word;\n typedef uint32_t  Elf32_Addr;\n \n  typedef struct {\n      Elf32_Sword     d_tag;\n      union {\n          Elf32_Word  d_val;\n          Elf32_Addr  d_ptr;\n      } d_un;\n  } Elf32_Dyn;\n \n typedef   int64_t  Elf64_Sxword;\n typedef  uint64_t  Elf64_Xword;\n typedef  uint64_t  Elf64_Addr;\n \n typedef struct {\n     Elf64_Sxword\t   d_tag;     //Dynamic entry type\n     union {\n         Elf64_Xword d_val;     //Integer value\n         Elf64_Addr  d_ptr;     //Address value\n     } d_un;\n } Elf64_Dyn;\n \n ",
  "javadoc": "A class to represent the Elf\u003ccode\u003e32\u003c/code\u003e_Dyn data structure.\n \n \u003cpre\u003e\u003ccode\u003e\n typedef  int32_t  Elf32_Sword;\n typedef uint32_t  Elf32_Word;\n typedef uint32_t  Elf32_Addr;\n \n  typedef struct {\n      Elf32_Sword     d_tag;\n      union {\n          Elf32_Word  d_val;\n          Elf32_Addr  d_ptr;\n      } d_un;\n  } Elf32_Dyn;\n \n typedef   int64_t  Elf64_Sxword;\n typedef  uint64_t  Elf64_Xword;\n typedef  uint64_t  Elf64_Addr;\n \n typedef struct {\n     Elf64_Sxword\t   d_tag;     //Dynamic entry type\n     union {\n         Elf64_Xword d_val;     //Integer value\n         Elf64_Addr  d_ptr;     //Address value\n     } d_un;\n } Elf64_Dyn;\n \n \u003c/code\u003e\u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.ByteArrayConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "elf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
      "type_short": "ElfHeader",
      "constant_value": null
    },
    {
      "name": "d_tag",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "d_val",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createElfDynamic",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "elf",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfDynamic",
        "type_short": "ElfDynamic",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initElfDynamic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "elf",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new ELF dynamic with the specified tag and value.",
      "javadoc": "Constructs a new ELF dynamic with the specified tag and value.\n@param tag the tag (or type) of this dynamic\n@param value the value (or pointer) of this dynamic\n@param elf the elf header",
      "static": false,
      "params": [
        {
          "name": "tag",
          "type_long": "int",
          "type_short": "int",
          "comment": "the tag (or type) of this dynamic"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the value (or pointer) of this dynamic"
        },
        {
          "name": "elf",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": "the elf header"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new ELF dynamic with the specified (enum) tag and value.",
      "javadoc": "Constructs a new ELF dynamic with the specified (enum) tag and value.\n@param tag the (enum) tag (or type) of this dynamic\n@param value the value (or pointer) of this dynamic\n@param elf the elf header",
      "static": false,
      "params": [
        {
          "name": "tag",
          "type_long": "ghidra.app.util.bin.format.elf.ElfDynamicType",
          "type_short": "ElfDynamicType",
          "comment": "the (enum) tag (or type) of this dynamic"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the value (or pointer) of this dynamic"
        },
        {
          "name": "elf",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": "the elf header"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTag",
      "comment": "Returns the value that controls the interpretation of the \n the d_val and/or d_ptr.",
      "javadoc": "Returns the value that controls the interpretation of the \n the d_val and/or d_ptr.\n@return the tag (or type) of this dynamic",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the tag (or type) of this dynamic"
      },
      "throws": []
    },
    {
      "name": "getTagType",
      "comment": "Returns the enum value that controls the interpretation of the \n the d_val and/or d_ptr (or null if unknown).",
      "javadoc": "Returns the enum value that controls the interpretation of the \n the d_val and/or d_ptr (or null if unknown).\n@return the enum tag (or type) of this dynamic or null if unknown",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfDynamicType",
        "type_short": "ElfDynamicType",
        "comment": "the enum tag (or type) of this dynamic or null if unknown"
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "Returns the object whose integer values represent various interpretations.\n For example, if d_tag \u003d\u003d DT_SYMTAB, then d_val holds the address of the symbol table.\n But, if d_tag \u003d\u003d DT_SYMENT, then d_val holds the size of each symbol entry.",
      "javadoc": "Returns the object whose integer values represent various interpretations.\n For example, if d_tag \u003d\u003d DT_SYMTAB, then d_val holds the address of the symbol table.\n But, if d_tag \u003d\u003d DT_SYMENT, then d_val holds the size of each symbol entry.\n@return the Elf32_Word object represent integer values with various interpretations",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the Elf32_Word object represent integer values with various interpretations"
      },
      "throws": []
    },
    {
      "name": "setValue",
      "comment": "Sets the value of this dynamic. The value could be an address or a number.",
      "javadoc": "Sets the value of this dynamic. The value could be an address or a number.\n@param value the new value dynamic",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the new value dynamic"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setValue",
      "comment": "Sets the value of this dynamic. The value could be an address or a number.",
      "javadoc": "Sets the value of this dynamic. The value could be an address or a number.\n@param value the new value dynamic",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new value dynamic"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTagAsString",
      "comment": "A convenience method for getting a string representing the d_tag value.\n For example, if d_tag \u003d\u003d DT_SYMTAB, then this method returns \"DT_SYMTAB\".",
      "javadoc": "A convenience method for getting a string representing the d_tag value.\n For example, if d_tag \u003d\u003d DT_SYMTAB, then this method returns \"DT_SYMTAB\".\n@return a string representing the d_tag value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a string representing the d_tag value"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toBytes",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.ByteArrayConverter#toBytes(ghidra.util.DataConverter)",
      "static": false,
      "params": [
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "write",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "data",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.ArrayIndexOutOfBoundsException",
          "type_short": "ArrayIndexOutOfBoundsException",
          "comment": ""
        }
      ]
    },
    {
      "name": "sizeof",
      "comment": "Returns the size in bytes of this object.",
      "javadoc": "Returns the size in bytes of this object.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
