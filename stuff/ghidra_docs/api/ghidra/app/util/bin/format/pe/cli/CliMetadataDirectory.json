{
  "name": "CliMetadataDirectory",
  "comment": "The Metadata directory pointed found in ImageCor20Header.",
  "javadoc": "The Metadata directory pointed found in {@link ImageCor20Header}.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.util.bin.format.pe.DataDirectory",
  "fields": [
    {
      "name": "NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"CLI_METADATA_DIRECTORY\""
    },
    {
      "name": "metadataRoot",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.CliMetadataRoot",
      "type_short": "CliMetadataRoot",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createCliMetadataDirectory",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.CliMetadataDirectory",
        "type_short": "CliMetadataDirectory",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initCliMetadataDirectory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getMetadataRoot",
      "comment": "Gets the Metadata root.",
      "javadoc": "Gets the Metadata root.\n@return header The Metadata root.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.CliMetadataRoot",
        "type_short": "CliMetadataRoot",
        "comment": "header The Metadata root."
      },
      "throws": []
    },
    {
      "name": "getDirectoryName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parse",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "markup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "isBinary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    }
  ]
}
