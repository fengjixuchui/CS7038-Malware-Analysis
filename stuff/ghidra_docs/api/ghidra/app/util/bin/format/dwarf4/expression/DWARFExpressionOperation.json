{
  "name": "DWARFExpressionOperation",
  "comment": "An immutable representation of a single DWARFExpression instruction and its operands.\n \n A DWARF expression operation can take 0, 1, or 2 operands.\n ",
  "javadoc": "An immutable representation of a single {@link DWARFExpression} instruction and its operands.\n \u003cp\u003e\n A DWARF expression operation can take 0, 1, or 2 operands.\n \u003cp\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "opcode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "operandTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionOperandType[]",
      "type_short": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionOperandType[]",
      "constant_value": null
    },
    {
      "name": "operands",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long[]",
      "type_short": "long[]",
      "constant_value": null
    },
    {
      "name": "blob",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new DWARF expression opcode element.",
      "javadoc": "Create a new DWARF expression opcode element.\n@param opcode numeric value of the opcode, ie. DW_OP_not from {@link DWARFExpressionOpCodes}\n@param operandTypes \u0027datatype\u0027 of the operands\n@param operands value of the operands, pre-converted into longs.\n@param blob if an operand is a byte array (ie. for DW_OP_implicit_value), this is the bytes\n@param offset byte offset of this operation from the start of the DWARF expression.",
      "static": false,
      "params": [
        {
          "name": "opcode",
          "type_long": "int",
          "type_short": "int",
          "comment": "numeric value of the opcode, ie. DW_OP_not from DWARFExpressionOpCodes"
        },
        {
          "name": "operandTypes",
          "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionOperandType[]",
          "type_short": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionOperandType[]",
          "comment": "\u0027datatype\u0027 of the operands"
        },
        {
          "name": "operands",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": "value of the operands, pre-converted into longs."
        },
        {
          "name": "blob",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "if an operand is a byte array (ie. for DW_OP_implicit_value), this is the bytes"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "byte offset of this operation from the start of the DWARF expression."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOpCode",
      "comment": "See DWARFExpressionOpCodes for list of opcodes.",
      "javadoc": "See {@link DWARFExpressionOpCodes} for list of opcodes.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOperandValue",
      "comment": "Get the operand value.",
      "javadoc": "Get the operand value.\n@param opindex which operand to fetch.\n@return value of operand as a long.",
      "static": false,
      "params": [
        {
          "name": "opindex",
          "type_long": "int",
          "type_short": "int",
          "comment": "which operand to fetch."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "value of operand as a long."
      },
      "throws": []
    },
    {
      "name": "getRelativeOpCodeOffset",
      "comment": "Calculates the relative opcode number of this opcode, as compared to a base opcode.\n \n Ie. If this opcode was DW_OP_reg12 (0x5c), and the base op code was DW_OP_reg0 (0x50),\n the result value would be 12.\n ",
      "javadoc": "Calculates the relative opcode number of this opcode, as compared to a base opcode.\n \u003cp\u003e\n Ie. If this opcode was DW_OP_reg12 (0x5c), and the base op code was DW_OP_reg0 (0x50),\n the result value would be 12.\n \u003cp\u003e\n@param baseOpCode Ordinal value of the opcode that this opcode is being compared ot.\n@return numeric difference between this opcode and the base opcode.",
      "static": false,
      "params": [
        {
          "name": "baseOpCode",
          "type_long": "int",
          "type_short": "int",
          "comment": "Ordinal value of the opcode that this opcode is being compared ot."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "numeric difference between this opcode and the base opcode."
      },
      "throws": []
    },
    {
      "name": "getBlob",
      "comment": "Return the byte array that contains the bytes of the blob operand.",
      "javadoc": "Return the byte array that contains the bytes of the blob operand.\n@return byte array",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "byte array"
      },
      "throws": []
    },
    {
      "name": "getOffset",
      "comment": "The offset of this opcode, relative to the start of the DWARFExpression.",
      "javadoc": "The offset of this opcode, relative to the start of the {@link DWARFExpression}.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
