{
  "name": "BaseRelocation",
  "comment": "A class to represent the IMAGE_BASE_RELOCATION\n data structure defined in winnt.h.\n \n typedef struct _IMAGE_BASE_RELOCATION {\n     DWORD   VirtualAddress;\n     DWORD   SizeOfBlock;\n //  WORD    TypeOffset[1];\n } IMAGE_BASE_RELOCATION;\n typedef IMAGE_BASE_RELOCATION UNALIGNED * PIMAGE_BASE_RELOCATION;\n ",
  "javadoc": "A class to represent the \u003ccode\u003eIMAGE_BASE_RELOCATION\u003c/code\u003e\n data structure defined in \u003cb\u003e\u003ccode\u003ewinnt.h\u003c/code\u003e\u003c/b\u003e.\n \u003cpre\u003e\n typedef struct _IMAGE_BASE_RELOCATION {\n     DWORD   VirtualAddress;\n     DWORD   SizeOfBlock;\n //  WORD    TypeOffset[1];\n } IMAGE_BASE_RELOCATION;\n typedef IMAGE_BASE_RELOCATION UNALIGNED * PIMAGE_BASE_RELOCATION;\n \u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter",
    "ghidra.app.util.bin.ByteArrayConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NAME",
      "comment": "The name to use when converting into a structure data type.",
      "javadoc": "The name to use when converting into a structure data type.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"IMAGE_BASE_RELOCATION\""
    },
    {
      "name": "IMAGE_SIZEOF_BASE_RELOCATION",
      "comment": "The size of the IMAGE_BASE_RELOCATION in bytes.",
      "javadoc": "The size of the \u003ccode\u003eIMAGE_BASE_RELOCATION\u003c/code\u003e in bytes.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "IMAGE_REL_BASED_NOOP",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "IMAGE_REL_BASED_ABSOLUTE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "IMAGE_REL_BASED_HIGH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "IMAGE_REL_BASED_LOW",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "IMAGE_REL_BASED_HIGHLOW",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "IMAGE_REL_BASED_HIGHADJ",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "IMAGE_REL_BASED_MIPS_JMPADDR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "IMAGE_REL_BASED_SECTION",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "IMAGE_REL_BASED_REL32",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "7"
    },
    {
      "name": "IMAGE_REL_BASED_MIPS_JMPADDR16",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "9"
    },
    {
      "name": "IMAGE_REL_BASED_IA64_IMM64",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "9"
    },
    {
      "name": "IMAGE_REL_BASED_DIR64",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "10"
    },
    {
      "name": "IMAGE_REL_BASED_HIGH3ADJ",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "11"
    },
    {
      "name": "TYPE_STRINGS",
      "comment": "Names of the available base relocations.",
      "javadoc": "Names of the available base relocations.",
      "static": true,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "virtualAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "sizeOfBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "typeOffsetList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.pe.BaseRelocation.TypeOffset\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createBaseRelocation",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.BaseRelocation",
        "type_short": "BaseRelocation",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initBaseRelocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "virtualAddress",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addRelocation",
      "comment": "Adds a relocation to this base relocation block.",
      "javadoc": "Adds a relocation to this base relocation block.\n@param type the relocation type\n@param offset the relocation offset",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": "the relocation type"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the relocation offset"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVirtualAddress",
      "comment": "Returns the base address of the relocations in this block.",
      "javadoc": "Returns the base address of the relocations in this block.\n@return the base address of the relocations in this block",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the base address of the relocations in this block"
      },
      "throws": []
    },
    {
      "name": "getSizeOfBlock",
      "comment": "Returns the size (in bytes) of this relocation block.",
      "javadoc": "Returns the size (in bytes) of this relocation block.\n@return the size (in bytes) of this relocation block",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size (in bytes) of this relocation block"
      },
      "throws": []
    },
    {
      "name": "getCount",
      "comment": "Returns the number of relocation in this block.",
      "javadoc": "Returns the number of relocation in this block.\n@return the number of relocation in this block",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of relocation in this block"
      },
      "throws": []
    },
    {
      "name": "getOffset",
      "comment": "Returns the lower 12 bits of the offset.",
      "javadoc": "Returns the lower 12 bits of the offset.\n@param index the ith relocation\n@return int the offset of the relocation",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the ith relocation"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int the offset of the relocation"
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "Returns the upper 4 bits of the offset.",
      "javadoc": "Returns the upper 4 bits of the offset.\n@param index the ith relocation\n@return int the type of the relocation\n,",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the ith relocation"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int the type of the relocation\n,"
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.StructConverter#toDataType()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toBytes",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.ByteArrayConverter#toBytes(ghidra.util.DataConverter)",
      "static": false,
      "params": [
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    }
  ]
}
