{
  "name": "OMFSrcModule",
  "comment": "A class to represent the Object Module Format (OMF) Source Module data structure.\n \n short cFile \t\t  - Number of source files contributing code to segments\n \n short cSeg\t\t  - Number of code segments receiving code from module\n \n int [] baseSrcFile -  An array of base offsets\n \n int [] starts \t  - start offset within the segment of the first byte of code from the module\n \n int [] ends        - ending address of code from the module\n \n short [] segs      - Array of segment indicies that receive code from the module",
  "javadoc": "A class to represent the Object Module Format (OMF) Source Module data structure.\n \u003cbr\u003e\n short cFile \t\t  - Number of source files contributing code to segments\n \u003cbr\u003e\n short cSeg\t\t  - Number of code segments receiving code from module\n \u003cbr\u003e\n int [] baseSrcFile -  An array of base offsets\n \u003cbr\u003e\n int [] starts \t  - start offset within the segment of the first byte of code from the module\n \u003cbr\u003e\n int [] ends        - ending address of code from the module\n \u003cbr\u003e\n short [] segs      - Array of segment indicies that receive code from the module",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "cFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "cSeg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "baseSrcFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "starts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "ends",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "segs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short[]",
      "type_short": "short[]",
      "constant_value": null
    },
    {
      "name": "moduleFileList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.pe.debug.OMFSrcModuleFile\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createOMFSrcModule",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.OMFSrcModule",
        "type_short": "OMFSrcModule",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initOMFSrcModule",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getOMFSrcModuleFiles",
      "comment": "Returns the array of source files.",
      "javadoc": "Returns the array of source files.\n@return the array of source files",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.OMFSrcModuleFile[]",
        "type_short": "ghidra.app.util.bin.format.pe.debug.OMFSrcModuleFile[]",
        "comment": "the array of source files"
      },
      "throws": []
    },
    {
      "name": "getBaseSrcFile",
      "comment": "Returns an array of base offsets.",
      "javadoc": "Returns an array of base offsets.\n@return an array of base offsets",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "an array of base offsets"
      },
      "throws": []
    },
    {
      "name": "getFileCount",
      "comment": "Returns the number of source files contributing code to segments.",
      "javadoc": "Returns the number of source files contributing code to segments.\n@return the number of source files contributing code to segments",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of source files contributing code to segments"
      },
      "throws": []
    },
    {
      "name": "getSegmentCount",
      "comment": "Returns the number of code segments receiving code from module.",
      "javadoc": "Returns the number of code segments receiving code from module.\n@return the number of code segments receiving code from module",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of code segments receiving code from module"
      },
      "throws": []
    },
    {
      "name": "getEnds",
      "comment": "Returns an array of ending addresses of code from the module.",
      "javadoc": "Returns an array of ending addresses of code from the module.\n@return an array of ending addresses of code from the module",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "an array of ending addresses of code from the module"
      },
      "throws": []
    },
    {
      "name": "getSegments",
      "comment": "Returns an array of segment indicies that receive code from the module.",
      "javadoc": "Returns an array of segment indicies that receive code from the module.\n@return an array of segment indicies that receive code from the module",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short[]",
        "type_short": "short[]",
        "comment": "an array of segment indicies that receive code from the module"
      },
      "throws": []
    },
    {
      "name": "getStarts",
      "comment": "Returns an array of start offsets within the segment of the first byte of code from the module.",
      "javadoc": "Returns an array of start offsets within the segment of the first byte of code from the module.\n@return an array of start offsets within the segment of the first byte of code from the module",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "an array of start offsets within the segment of the first byte of code from the module"
      },
      "throws": []
    }
  ]
}
