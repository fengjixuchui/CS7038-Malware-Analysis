{
  "name": "ExternalDebugInfo",
  "comment": "Metadata needed to find an ELF/DWARF external debug file, retrieved from an ELF binary\u0027s\n \".gnu_debuglink\" section and/or \".note.gnu.build-id\" section.  \n \n The debuglink can provide a filename and crc of the external debug file, while the build-id\n can provide a hash that is converted to a filename that identifies the external debug file.",
  "javadoc": "Metadata needed to find an ELF/DWARF external debug file, retrieved from an ELF binary\u0027s\n \".gnu_debuglink\" section and/or \".note.gnu.build-id\" section.  \n \u003cp\u003e\n The debuglink can provide a filename and crc of the external debug file, while the build-id\n can provide a hash that is converted to a filename that identifies the external debug file.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "filename",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "crc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "hash",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "fromProgram",
      "comment": "Create a new ExternalDebugInfo from information found in the specified program.",
      "javadoc": "Create a new {@link ExternalDebugInfo} from information found in the specified program.\n@param program {@link Program} to query\n@return new {@link ExternalDebugInfo} or null if no external debug metadata found in\n program",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "Program to query"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.external.ExternalDebugInfo",
        "type_short": "ExternalDebugInfo",
        "comment": "new ExternalDebugInfo or null if no external debug metadata found in\n program"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor to create an ExternalDebugInfo instance.",
      "javadoc": "Constructor to create an {@link ExternalDebugInfo} instance.\n@param filename filename of external debug file, or null\n@param crc crc32 of external debug file, or 0 if no filename\n@param hash build-id hash digest found in \".note.gnu.build-id\" section, or null if\n not present",
      "static": false,
      "params": [
        {
          "name": "filename",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "filename of external debug file, or null"
        },
        {
          "name": "crc",
          "type_long": "int",
          "type_short": "int",
          "comment": "crc32 of external debug file, or 0 if no filename"
        },
        {
          "name": "hash",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "build-id hash digest found in \".note.gnu.build-id\" section, or null if\n not present"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasFilename",
      "comment": "Return true if there is a filename",
      "javadoc": "Return true if there is a filename\n@return boolean true if filename is available, false if not",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if filename is available, false if not"
      },
      "throws": []
    },
    {
      "name": "getFilename",
      "comment": "Return the filename of the external debug file, or null if not specified.",
      "javadoc": "Return the filename of the external debug file, or null if not specified.\n@return String filename of external debug file, or null if not specified",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String filename of external debug file, or null if not specified"
      },
      "throws": []
    },
    {
      "name": "getCrc",
      "comment": "Return the crc of the external debug file.  Not valid if filename is missing.",
      "javadoc": "Return the crc of the external debug file.  Not valid if filename is missing.\n@return int crc32 of external debug file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int crc32 of external debug file."
      },
      "throws": []
    },
    {
      "name": "getHash",
      "comment": "Return the build-id hash digest.",
      "javadoc": "Return the build-id hash digest.\n@return byte array containing the build-id hash (usually 20 bytes)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "byte array containing the build-id hash (usually 20 bytes)"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
