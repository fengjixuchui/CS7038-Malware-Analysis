{
  "name": "CliAbstractStream",
  "comment": "A abstract CLI stream type for convenience.  Streams that we support should subclass \n this class and override the #parse, #markup, and #toDataType \n methods appropriately.  \n \n When streams are laid down in memory they are referred to as heaps, but we\u0027ll just stick \n with calling them streams because using both terms can get confusing.",
  "javadoc": "A abstract CLI stream type for convenience.  Streams that we support should subclass \n this class and override the {@link #parse}, {@link #markup}, and {@link #toDataType} \n methods appropriately.  \n \u003cp\u003e\n When streams are laid down in memory they are referred to as heaps, but we\u0027ll just stick \n with calling them streams because using both terms can get confusing.",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter",
    "ghidra.app.util.bin.format.pe.PeMarkupable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "PATH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"/PE/CLI/Streams\""
    },
    {
      "name": "header",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.CliStreamHeader",
      "type_short": "CliStreamHeader",
      "constant_value": null
    },
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "rva",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.BinaryReader",
      "type_short": "BinaryReader",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new generic CLI stream type.  This is intended to be called by a subclass\n stream during its creation.",
      "javadoc": "Creates a new generic CLI stream type.  This is intended to be called by a subclass\n stream during its creation.\n@param header The stream header associated with this stream.\n@param offset The reader offset where this stream starts.\n@param rva The relative virtual address where this stream starts.\n@param reader A reader that is used to read the stream.\n@throws IOException if there is a problem reading the stream.",
      "static": false,
      "params": [
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.pe.cli.CliStreamHeader",
          "type_short": "CliStreamHeader",
          "comment": "The stream header associated with this stream."
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "The reader offset where this stream starts."
        },
        {
          "name": "rva",
          "type_long": "int",
          "type_short": "int",
          "comment": "The relative virtual address where this stream starts."
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "A reader that is used to read the stream."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem reading the stream."
        }
      ]
    },
    {
      "name": "parse",
      "comment": "Parses this stream.",
      "javadoc": "Parses this stream.\n@return True if parsing completed successfully; otherwise, false.\n@throws IOException If there was an IO problem while parsing.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if parsing completed successfully; otherwise, false."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "If there was an IO problem while parsing."
        }
      ]
    },
    {
      "name": "markup",
      "comment": "Does basic markup that all streams will want:\n \n   Set monitor message\n   Validate addresses\n   Add bookmark\n   Add symbol\n   Create data type\n \n Subclass should first call this and then provide any custom markup they need.",
      "javadoc": "Does basic markup that all streams will want:\n \u003cul\u003e\n   \u003cli\u003eSet monitor message\u003c/li\u003e\n   \u003cli\u003eValidate addresses\u003c/li\u003e\n   \u003cli\u003eAdd bookmark\u003c/li\u003e\n   \u003cli\u003eAdd symbol\u003c/li\u003e\n   \u003cli\u003eCreate data type\u003c/li\u003e\n \u003c/ul\u003e\n Subclass should first call this and then provide any custom markup they need.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "isBinary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getStreamHeader",
      "comment": "Gets this stream\u0027s header.",
      "javadoc": "Gets this stream\u0027s header.\n@return This stream\u0027s header.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.CliStreamHeader",
        "type_short": "CliStreamHeader",
        "comment": "This stream\u0027s header."
      },
      "throws": []
    },
    {
      "name": "getStreamMarkupAddress",
      "comment": "Gets the markup address of an offset in a given stream.",
      "javadoc": "Gets the markup address of an offset in a given stream.\n@param program\n@param isBinary\n@param monitor\n@param log\n@param ntHeader\n@param stream The stream to offset into.\n@param streamIndex The index into the stream.\n@return The markup address of the given offset in the provided stream.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "isBinary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        },
        {
          "name": "stream",
          "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliAbstractStream",
          "type_short": "CliAbstractStream",
          "comment": "The stream to offset into."
        },
        {
          "name": "streamIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "The index into the stream."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "The markup address of the given offset in the provided stream."
      },
      "throws": []
    }
  ]
}
