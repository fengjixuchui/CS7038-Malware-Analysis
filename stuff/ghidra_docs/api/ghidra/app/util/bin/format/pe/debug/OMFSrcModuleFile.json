{
  "name": "OMFSrcModuleFile",
  "comment": "A class to represent the Object Module Format (OMF) Source Module File data structure. \n \n This class describes the code segments that receive code from a source file.\n \n short cSeg \t\t- Number of segments that receive code from the source file.\n \n short pad \t\t- pad field to maintain alignment\n \n int [] baseSrcLn - array of offsets for the line or address mapping for each segment that receives code from the source file.\n \n int [] starts \t- starting addresses within the segment of the first byte of code from the module.\n \n int [] ends \t\t- ending addresses of the code from the module.\n \n byte cbName \t\t- count or number of bytes in source file name.\n \n String name \t\t- name of source file.\n ",
  "javadoc": "A class to represent the Object Module Format (OMF) Source Module File data structure. \n \u003cbr\u003e\n This class describes the code segments that receive code from a source file.\n \u003cbr\u003e\n short cSeg \t\t- Number of segments that receive code from the source file.\n \u003cbr\u003e\n short pad \t\t- pad field to maintain alignment\n \u003cbr\u003e\n int [] baseSrcLn - array of offsets for the line or address mapping for each segment that receives code from the source file.\n \u003cbr\u003e\n int [] starts \t- starting addresses within the segment of the first byte of code from the module.\n \u003cbr\u003e\n int [] ends \t\t- ending addresses of the code from the module.\n \u003cbr\u003e\n byte cbName \t\t- count or number of bytes in source file name.\n \u003cbr\u003e\n String name \t\t- name of source file.\n \u003cbr\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "cSeg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "pad",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "baseSrcLn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "starts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "ends",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "cbName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "moduleLineList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.pe.debug.OMFSrcModuleLine\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createOMFSrcModuleFile",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.OMFSrcModuleFile",
        "type_short": "OMFSrcModuleFile",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initOMFSrcModuleFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getOMFSrcModuleLines",
      "comment": "Returns an array of the source module lines.",
      "javadoc": "Returns an array of the source module lines.\n@return an array of the source module lines",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.OMFSrcModuleLine[]",
        "type_short": "ghidra.app.util.bin.format.pe.debug.OMFSrcModuleLine[]",
        "comment": "an array of the source module lines"
      },
      "throws": []
    },
    {
      "name": "getBaseSrcLn",
      "comment": "Returns an array of offsets for the line or address mapping for each segment \n that receives code from the source file.",
      "javadoc": "Returns an array of offsets for the line or address mapping for each segment \n that receives code from the source file.\n@return an array of offsets for the line or address mapping for each segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "an array of offsets for the line or address mapping for each segment"
      },
      "throws": []
    },
    {
      "name": "getSegmentCount",
      "comment": "Returns the number of segments that receive code from the source file.",
      "javadoc": "Returns the number of segments that receive code from the source file.\n@return the number of segments that receive code from the source file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of segments that receive code from the source file"
      },
      "throws": []
    },
    {
      "name": "getEnds",
      "comment": "Returns the ending addresses of the code from the module.",
      "javadoc": "Returns the ending addresses of the code from the module.\n@return the ending addresses of the code from the module",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "the ending addresses of the code from the module"
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the name of source file.",
      "javadoc": "Returns the name of source file.\n@return the name of source file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of source file"
      },
      "throws": []
    },
    {
      "name": "getPad",
      "comment": "Returns the pad field to maintain alignment.",
      "javadoc": "Returns the pad field to maintain alignment.\n@return the pad field to maintain alignment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the pad field to maintain alignment"
      },
      "throws": []
    },
    {
      "name": "getStarts",
      "comment": "Returns the starting addresses within the segment of the first byte of code from the module.",
      "javadoc": "Returns the starting addresses within the segment of the first byte of code from the module.\n@return the starting addresses within the segment of the first byte of code from the module",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "the starting addresses within the segment of the first byte of code from the module"
      },
      "throws": []
    }
  ]
}
