{
  "name": "CliStreamMetadata",
  "comment": "The Metadata stream is giant and complicated.  It is made up of CliAbstractTables.",
  "javadoc": "The Metadata stream is giant and complicated.  It is made up of {@link CliAbstractTable}s.\n@see CliTypeTable",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.util.bin.format.pe.cli.streams.CliAbstractStream",
  "fields": [
    {
      "name": "majorVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "minorVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "heapSizes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "valid",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "sorted",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "rows",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cghidra.app.util.bin.format.pe.cli.tables.CliTypeTable,java.lang.Integer\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "tables",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.pe.cli.tables.CliAbstractTable\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "guidStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamGuid",
      "type_short": "CliStreamGuid",
      "constant_value": null
    },
    {
      "name": "userStringsStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamUserStrings",
      "type_short": "CliStreamUserStrings",
      "constant_value": null
    },
    {
      "name": "stringsStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamStrings",
      "type_short": "CliStreamStrings",
      "constant_value": null
    },
    {
      "name": "blobStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamBlob",
      "type_short": "CliStreamBlob",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getName",
      "comment": "Gets the name of this stream.",
      "javadoc": "Gets the name of this stream.\n@return The name of this stream.",
      "static": true,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The name of this stream."
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new Metadata stream.",
      "javadoc": "Creates a new Metadata stream.\n@param header The stream header associated with this stream.\n@param guidStream The GUID stream.\n@param userStringsStream The user strings stream.\n@param stringsStream The strings stream.\n@param blobStream The blob stream.\n@param fileOffset The file offset where this stream starts.\n@param rva The relative virtual address where this stream starts.\n@param reader A reader that is set to the start of the stream.\n@throws IOException if there is a problem reading the stream.",
      "static": false,
      "params": [
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.pe.cli.CliStreamHeader",
          "type_short": "CliStreamHeader",
          "comment": "The stream header associated with this stream."
        },
        {
          "name": "guidStream",
          "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamGuid",
          "type_short": "CliStreamGuid",
          "comment": "The GUID stream."
        },
        {
          "name": "userStringsStream",
          "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamUserStrings",
          "type_short": "CliStreamUserStrings",
          "comment": "The user strings stream."
        },
        {
          "name": "stringsStream",
          "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamStrings",
          "type_short": "CliStreamStrings",
          "comment": "The strings stream."
        },
        {
          "name": "blobStream",
          "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamBlob",
          "type_short": "CliStreamBlob",
          "comment": "The blob stream."
        },
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "The file offset where this stream starts."
        },
        {
          "name": "rva",
          "type_long": "int",
          "type_short": "int",
          "comment": "The relative virtual address where this stream starts."
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "A reader that is set to the start of the stream."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem reading the stream."
        }
      ]
    },
    {
      "name": "parse",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getGuidStream",
      "comment": "Gets the GUID stream.",
      "javadoc": "Gets the GUID stream.\n@return The GUID stream.  Could be null if one doesn\u0027t exist.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamGuid",
        "type_short": "CliStreamGuid",
        "comment": "The GUID stream.  Could be null if one doesn\u0027t exist."
      },
      "throws": []
    },
    {
      "name": "getUserStringsStream",
      "comment": "Gets the user strings stream.",
      "javadoc": "Gets the user strings stream.\n@return The user strings stream.  Could be null if one doesn\u0027t exist.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamUserStrings",
        "type_short": "CliStreamUserStrings",
        "comment": "The user strings stream.  Could be null if one doesn\u0027t exist."
      },
      "throws": []
    },
    {
      "name": "getStringsStream",
      "comment": "Gets the strings stream.",
      "javadoc": "Gets the strings stream.\n@return The strings stream.  Could be null if one doesn\u0027t exist.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamStrings",
        "type_short": "CliStreamStrings",
        "comment": "The strings stream.  Could be null if one doesn\u0027t exist."
      },
      "throws": []
    },
    {
      "name": "getBlobStream",
      "comment": "Gets the blob stream.",
      "javadoc": "Gets the blob stream.\n@return The blob stream.  Could be null if one doesn\u0027t exist.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamBlob",
        "type_short": "CliStreamBlob",
        "comment": "The blob stream.  Could be null if one doesn\u0027t exist."
      },
      "throws": []
    },
    {
      "name": "createTableObject",
      "comment": "Creates a new CliAbstractTable from the table at the current reader index\n with the given table type.",
      "javadoc": "Creates a new {@link CliAbstractTable} from the table at the current reader index\n with the given table type.\n@param tableType The type of table to create.\n@return A new table with the given type.  Could be null if we don\u0027t support the table type.\n@throws IOException if there was an issue reading the new table.",
      "static": false,
      "params": [
        {
          "name": "tableType",
          "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable",
          "type_short": "CliTypeTable",
          "comment": "The type of table to create."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliAbstractTable",
        "type_short": "CliAbstractTable",
        "comment": "A new table with the given type.  Could be null if we don\u0027t support the table type."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was an issue reading the new table."
        }
      ]
    },
    {
      "name": "getMajorVersion",
      "comment": "Gets the major version.",
      "javadoc": "Gets the major version.\n@return The major version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "The major version."
      },
      "throws": []
    },
    {
      "name": "getMinorVersion",
      "comment": "Gets the minor version.",
      "javadoc": "Gets the minor version.\n@return The minor version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "The minor version."
      },
      "throws": []
    },
    {
      "name": "getSorted",
      "comment": "Gets the sorted field.",
      "javadoc": "Gets the sorted field.\n@return The sorted field.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The sorted field."
      },
      "throws": []
    },
    {
      "name": "getValid",
      "comment": "Gets the valid field.",
      "javadoc": "Gets the valid field.\n@return The valid field.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The valid field."
      },
      "throws": []
    },
    {
      "name": "getTable",
      "comment": "Gets the table with the provided table type from the metadata stream.",
      "javadoc": "Gets the table with the provided table type from the metadata stream.\n@param tableType The type of table to get.\n@return The table with the provided table type.  Could be null if it doesn\u0027t exist.",
      "static": false,
      "params": [
        {
          "name": "tableType",
          "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable",
          "type_short": "CliTypeTable",
          "comment": "The type of table to get."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliAbstractTable",
        "type_short": "CliAbstractTable",
        "comment": "The table with the provided table type.  Could be null if it doesn\u0027t exist."
      },
      "throws": []
    },
    {
      "name": "getTable",
      "comment": "Gets the table with the provided table type id from the metadata stream.",
      "javadoc": "Gets the table with the provided table type id from the metadata stream.\n@param tableId The id of the table type to get.\n@return The table with the provided table id.  Could be null if it doesn\u0027t exist.",
      "static": false,
      "params": [
        {
          "name": "tableId",
          "type_long": "int",
          "type_short": "int",
          "comment": "The id of the table type to get."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliAbstractTable",
        "type_short": "CliAbstractTable",
        "comment": "The table with the provided table id.  Could be null if it doesn\u0027t exist."
      },
      "throws": []
    },
    {
      "name": "getNumberRowsForTable",
      "comment": "Gets the number of rows in the table with the given table type.",
      "javadoc": "Gets the number of rows in the table with the given table type.\n@param tableType The type of table to get the number of rows of.\n@return The number of rows in the table with the given table type.  Could be 0 if\n   the table of the given type was not found.",
      "static": false,
      "params": [
        {
          "name": "tableType",
          "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable",
          "type_short": "CliTypeTable",
          "comment": "The type of table to get the number of rows of."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The number of rows in the table with the given table type.  Could be 0 if\n   the table of the given type was not found."
      },
      "throws": []
    },
    {
      "name": "getStringIndexDataType",
      "comment": "Gets the data type of the index into the string stream.  Will be either\n DWordDataType or WordDataType.",
      "javadoc": "Gets the data type of the index into the string stream.  Will be either\n {@link DWordDataType} or {@link WordDataType}.\n@return The data type of the index into the string stream.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "The data type of the index into the string stream."
      },
      "throws": []
    },
    {
      "name": "getGuidIndexDataType",
      "comment": "Gets the data type of the index into the GUID stream.  Will be either\n DWordDataType or WordDataType.",
      "javadoc": "Gets the data type of the index into the GUID stream.  Will be either\n {@link DWordDataType} or {@link WordDataType}.\n@return The data type of the index into the string stream.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "The data type of the index into the string stream."
      },
      "throws": []
    },
    {
      "name": "getBlobIndexDataType",
      "comment": "Gets the data type of the index into the Blob stream.  Will be either\n DWordDataType or WordDataType.",
      "javadoc": "Gets the data type of the index into the Blob stream.  Will be either\n {@link DWordDataType} or {@link WordDataType}.\n@return The data type of the index into the string stream.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "The data type of the index into the string stream."
      },
      "throws": []
    },
    {
      "name": "getTableIndexDataType",
      "comment": "Gets the data type of the index into a metadata table.  Will be either\n DWordDataType or WordDataType.",
      "javadoc": "Gets the data type of the index into a metadata table.  Will be either\n {@link DWordDataType} or {@link WordDataType}.\n@return The data type of the index into the string stream.",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable",
          "type_short": "CliTypeTable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "The data type of the index into the string stream."
      },
      "throws": []
    },
    {
      "name": "markup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "isBinary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isTablePresent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "tableType",
          "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable",
          "type_short": "CliTypeTable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable",
          "type_short": "CliTypeTable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPresentTableIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "table",
          "type_long": "ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable",
          "type_short": "CliTypeTable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
