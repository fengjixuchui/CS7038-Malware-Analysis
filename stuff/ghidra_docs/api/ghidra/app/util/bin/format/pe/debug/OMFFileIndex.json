{
  "name": "OMFFileIndex",
  "comment": "A class to represent the Object Module Format (OMF) File Index data structure.\n \n \n short cMod \t\t - Count or number of modules in the executable.\n short cRef \t\t - Count or number of file name references.\n short [] modStart - array of indices into the nameoffset table for each module.  Each index is the start of the file name references for each module.\n short cRefCnt \t - number of file name references per module.\n int [] nameRef \t - array of offsets in to the names table.  For each module the offset to the first references file name is at nameRef[modStart] and continues for cRefCnt entries.\n String names \t - file names.\n ",
  "javadoc": "A class to represent the Object Module Format (OMF) File Index data structure.\n \u003cbr\u003e\n \u003cpre\u003e\n short cMod \t\t - Count or number of modules in the executable.\n short cRef \t\t - Count or number of file name references.\n short [] modStart - array of indices into the nameoffset table for each module.  Each index is the start of the file name references for each module.\n short cRefCnt \t - number of file name references per module.\n int [] nameRef \t - array of offsets in to the names table.  For each module the offset to the first references file name is at nameRef[modStart] and continues for cRefCnt entries.\n String names \t - file names.\n \u003c/pre\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "cMod",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "cRef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "modStart",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short[]",
      "type_short": "short[]",
      "constant_value": null
    },
    {
      "name": "cRefCnt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short[]",
      "type_short": "short[]",
      "constant_value": null
    },
    {
      "name": "nameRef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "names",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createOMFFileIndex",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.OMFFileIndex",
        "type_short": "OMFFileIndex",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initOMFFileIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getCMod",
      "comment": "Returns the number of modules in the executable.",
      "javadoc": "Returns the number of modules in the executable.\n@return the number of modules in the executable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of modules in the executable"
      },
      "throws": []
    },
    {
      "name": "getCRef",
      "comment": "Returns the number of file name references in the executable.",
      "javadoc": "Returns the number of file name references in the executable.\n@return the number of file name references in the executable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of file name references in the executable"
      },
      "throws": []
    },
    {
      "name": "getNameRef",
      "comment": "Returns the array of offsets into the names table.",
      "javadoc": "Returns the array of offsets into the names table.\n@return the array of offsets in to the names table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "the array of offsets in to the names table"
      },
      "throws": []
    },
    {
      "name": "getNames",
      "comment": "Returns the file names referenced in the executable.",
      "javadoc": "Returns the file names referenced in the executable.\n@return the file names referenced in the executable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "the file names referenced in the executable"
      },
      "throws": []
    },
    {
      "name": "getCRefCnt",
      "comment": "Returns the indices into the nameoffset table for each file.",
      "javadoc": "Returns the indices into the nameoffset table for each file.\n@return the indices into the nameoffset table for each file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short[]",
        "type_short": "short[]",
        "comment": "the indices into the nameoffset table for each file"
      },
      "throws": []
    },
    {
      "name": "getModStart",
      "comment": "Returns the array of indices into the nameoffset table for each module.",
      "javadoc": "Returns the array of indices into the nameoffset table for each module.\n@return the array of indices into the nameoffset table for each module",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short[]",
        "type_short": "short[]",
        "comment": "the array of indices into the nameoffset table for each module"
      },
      "throws": []
    }
  ]
}
