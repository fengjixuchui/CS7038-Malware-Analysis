{
  "name": "ElfRelocationContext",
  "comment": "ElfRelocationContext provides a relocation handler context related\n to the processing of entries contained within a specific relocation table.",
  "javadoc": "\u003ccode\u003eElfRelocationContext\u003c/code\u003e provides a relocation handler context related\n to the processing of entries contained within a specific relocation table.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "handler",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.relocation.ElfRelocationHandler",
      "type_short": "ElfRelocationHandler",
      "constant_value": null
    },
    {
      "name": "loadHelper",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
      "type_short": "ElfLoadHelper",
      "constant_value": null
    },
    {
      "name": "relocationTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfRelocationTable",
      "type_short": "ElfRelocationTable",
      "constant_value": null
    },
    {
      "name": "symbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol[]",
      "type_short": "ghidra.app.util.bin.format.elf.ElfSymbol[]",
      "constant_value": null
    },
    {
      "name": "symbolMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cghidra.app.util.bin.format.elf.ElfSymbol,ghidra.program.model.address.Address\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Relocation context for a specific Elf image and relocation table",
      "javadoc": "Relocation context for a specific Elf image and relocation table\n@param handler relocation handler or null if not available\n@param loadHelper the elf load helper\n@param relocationTable Elf relocation table\n@param symbolMap Elf symbol placement map",
      "static": false,
      "params": [
        {
          "name": "handler",
          "type_long": "ghidra.app.util.bin.format.elf.relocation.ElfRelocationHandler",
          "type_short": "ElfRelocationHandler",
          "comment": "relocation handler or null if not available"
        },
        {
          "name": "loadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": "the elf load helper"
        },
        {
          "name": "relocationTable",
          "type_long": "ghidra.app.util.bin.format.elf.ElfRelocationTable",
          "type_short": "ElfRelocationTable",
          "comment": "Elf relocation table"
        },
        {
          "name": "symbolMap",
          "type_long": "java.util.Map\u003cghidra.app.util.bin.format.elf.ElfSymbol,ghidra.program.model.address.Address\u003e",
          "type_short": "Map",
          "comment": "Elf symbol placement map"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processRelocation",
      "comment": "Process a relocation from the relocation table which corresponds to this context.\n All relocation entries must be processed in the order they appear within the table.",
      "javadoc": "Process a relocation from the relocation table which corresponds to this context.\n All relocation entries must be processed in the order they appear within the table.\n@param relocation\n@param relocationAddress",
      "static": false,
      "params": [
        {
          "name": "relocation",
          "type_long": "ghidra.app.util.bin.format.elf.ElfRelocation",
          "type_short": "ElfRelocation",
          "comment": ""
        },
        {
          "name": "relocationAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRelrRelocationType",
      "comment": "Get the RELR relocation type associated with the underlying\n relocation handler.",
      "javadoc": "Get the RELR relocation type associated with the underlying\n relocation handler.\n@return RELR relocation type or 0 if not supported",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "RELR relocation type or 0 if not supported"
      },
      "throws": []
    },
    {
      "name": "handleUnsupportedTLSRelocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "relocation",
          "type_long": "ghidra.app.util.bin.format.elf.ElfRelocation",
          "type_short": "ElfRelocation",
          "comment": ""
        },
        {
          "name": "relocationAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleNoHandlerError",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "relocation",
          "type_long": "ghidra.app.util.bin.format.elf.ElfRelocation",
          "type_short": "ElfRelocation",
          "comment": ""
        },
        {
          "name": "relocationAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRelocationContext",
      "comment": "Get a relocation context for a specfic Elf image and relocation table",
      "javadoc": "Get a relocation context for a specfic Elf image and relocation table\n@param loadHelper Elf load helper\n@param relocationTable Elf relocation table\n@param symbolMap Elf symbol placement map\n@return relocation context or null",
      "static": true,
      "params": [
        {
          "name": "loadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": "Elf load helper"
        },
        {
          "name": "relocationTable",
          "type_long": "ghidra.app.util.bin.format.elf.ElfRelocationTable",
          "type_short": "ElfRelocationTable",
          "comment": "Elf relocation table"
        },
        {
          "name": "symbolMap",
          "type_long": "java.util.Map\u003cghidra.app.util.bin.format.elf.ElfSymbol,ghidra.program.model.address.Address\u003e",
          "type_short": "Map",
          "comment": "Elf symbol placement map"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.relocation.ElfRelocationContext",
        "type_short": "ElfRelocationContext",
        "comment": "relocation context or null"
      },
      "throws": []
    },
    {
      "name": "hasRelocationHandler",
      "comment": "",
      "javadoc": "@return true if a relocation handler was found",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a relocation handler was found"
      },
      "throws": []
    },
    {
      "name": "getImageBaseWordAdjustmentOffset",
      "comment": "Get image base addressable word adjustment value to be applied to any pre-linked address values\n such as those contained with the dynamic table. (Applies to default address space only)",
      "javadoc": "Get image base addressable word adjustment value to be applied to any pre-linked address values\n such as those contained with the dynamic table. (Applies to default address space only)\n@return image base adjustment value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "image base adjustment value"
      },
      "throws": []
    },
    {
      "name": "extractAddend",
      "comment": "Determine if addend data must be extracted",
      "javadoc": "Determine if addend data must be extracted\n@return true if relocation does not provide addend data and it must be\n extracted from relocation target if appropriate",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if relocation does not provide addend data and it must be\n extracted from relocation target if appropriate"
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isBigEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getElfHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
        "type_short": "ElfHeader",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLoadHelper",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
        "type_short": "ElfLoadHelper",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLoadAdapter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.extend.ElfLoadAdapter",
        "type_short": "ElfLoadAdapter",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLog",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.importer.MessageLog",
        "type_short": "MessageLog",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbol",
      "comment": "Get the Elf symbol which corresponds to the specified index.  Each relocation table\n corresponds to a specific symbol table to which the specified symbolIndex will be\n applied.",
      "javadoc": "Get the Elf symbol which corresponds to the specified index.  Each relocation table\n corresponds to a specific symbol table to which the specified symbolIndex will be\n applied.\n@param symbolIndex\n@return Elf symbol which corresponds to symbol index",
      "static": false,
      "params": [
        {
          "name": "symbolIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
        "type_short": "ElfSymbol",
        "comment": "Elf symbol which corresponds to symbol index"
      },
      "throws": []
    },
    {
      "name": "getSymbolAddress",
      "comment": "Get the program address at which the specified Elf symbol was placed.",
      "javadoc": "Get the program address at which the specified Elf symbol was placed.\n@param symbol Elf symbol\n@return program address",
      "static": false,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": "Elf symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "program address"
      },
      "throws": []
    },
    {
      "name": "getSymbolValue",
      "comment": "Get the adjusted symbol value based upon its placement within the program.\n This value may differ from symbol.getValue() and will reflect the addressable\n unit/word offset of it program address.",
      "javadoc": "Get the adjusted symbol value based upon its placement within the program.\n This value may differ from symbol.getValue() and will reflect the addressable\n unit/word offset of it program address.\n@param symbol Elf symbol\n@return adjusted Elf symbol value or 0 if symbol mapping not found",
      "static": false,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": "Elf symbol"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "adjusted Elf symbol value or 0 if symbol mapping not found"
      },
      "throws": []
    },
    {
      "name": "getGOTValue",
      "comment": "Returns the appropriate .got section using the\n DT_PLTGOT value defined in the .dynamic section.\n If no such dynamic value defined, the symbol offset for _GLOBAL_OFFSET_TABLE_\n will be used, otherwise a NotFoundException will be thrown.",
      "javadoc": "Returns the appropriate .got section using the\n DT_PLTGOT value defined in the .dynamic section.\n If no such dynamic value defined, the symbol offset for _GLOBAL_OFFSET_TABLE_\n will be used, otherwise a NotFoundException will be thrown.\n@return the .got section address offset\n@throws NotFoundException if the dynamic DT_PLTGOT not defined and \n _GLOBAL_OFFSET_TABLE_ symbol not defined",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the .got section address offset"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": "if the dynamic DT_PLTGOT not defined and \n _GLOBAL_OFFSET_TABLE_ symbol not defined"
        }
      ]
    },
    {
      "name": "dispose",
      "comment": "Dispose relocation context when processing of corresponding relocation table is complete.\n Instance should be disposed to allow all program changes to be flushed prior to processing\n a subsequent relocation table.",
      "javadoc": "Dispose relocation context when processing of corresponding relocation table is complete.\n Instance should be disposed to allow all program changes to be flushed prior to processing\n a subsequent relocation table.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRelocationAddress",
      "comment": "Get relocation address",
      "javadoc": "Get relocation address\n@param baseAddress base address\n@param relocOffset relocation offset relative to baseAddress\n@return relocation address",
      "static": false,
      "params": [
        {
          "name": "baseAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "base address"
        },
        {
          "name": "relocOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "relocation offset relative to baseAddress"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "relocation address"
      },
      "throws": []
    }
  ]
}
