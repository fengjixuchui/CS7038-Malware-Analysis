{
  "name": "DebugCOFFSymbolAux",
  "comment": "A class to represent the COFF Auxiliary Symbol data structure.\n \n \n typedef union _IMAGE_AUX_SYMBOL {\n     struct {\n         DWORD    TagIndex;                      // struct, union, or enum tag index\n         union {\n             struct {\n                 WORD    Linenumber;             // declaration line number\n                 WORD    Size;                   // size of struct, union, or enum\n             } LnSz;\n            DWORD    TotalSize;\n         }Misc;\n         union {\n             struct {                            // if ISFCN, tag, or .bb\n                 DWORD    PointerToLinenumber;\n                 DWORD    PointerToNextFunction;\n             } Function;\n             struct {                            // if ISARY, up to 4 dimen.\n                 WORD     Dimension[4];\n             } Array;\n         } FcnAry;\n         WORD    TvIndex;                        // tv index\n     } Sym;\n     struct {\n         BYTE    Name[IMAGE_SIZEOF_SYMBOL];\n     } File;\n     struct {\n         DWORD   Length;                         // section length\n         WORD    NumberOfRelocations;            // number of relocation entries\n         WORD    NumberOfLinenumbers;            // number of line numbers\n         DWORD   CheckSum;                       // checksum for communal\n         SHORT   Number;                         // section number to associate with\n         BYTE    Selection;                      // communal selection type\n     } Section;\n } IMAGE_AUX_SYMBOL;\n ",
  "javadoc": "A class to represent the COFF Auxiliary Symbol data structure.\n \u003cbr\u003e\n \u003cpre\u003e\n typedef union _IMAGE_AUX_SYMBOL {\n     struct {\n         DWORD    TagIndex;                      // struct, union, or enum tag index\n         union {\n             struct {\n                 WORD    Linenumber;             // declaration line number\n                 WORD    Size;                   // size of struct, union, or enum\n             } LnSz;\n            DWORD    TotalSize;\n         }Misc;\n         union {\n             struct {                            // if ISFCN, tag, or .bb\n                 DWORD    PointerToLinenumber;\n                 DWORD    PointerToNextFunction;\n             } Function;\n             struct {                            // if ISARY, up to 4 dimen.\n                 WORD     Dimension[4];\n             } Array;\n         } FcnAry;\n         WORD    TvIndex;                        // tv index\n     } Sym;\n     struct {\n         BYTE    Name[IMAGE_SIZEOF_SYMBOL];\n     } File;\n     struct {\n         DWORD   Length;                         // section length\n         WORD    NumberOfRelocations;            // number of relocation entries\n         WORD    NumberOfLinenumbers;            // number of line numbers\n         DWORD   CheckSum;                       // checksum for communal\n         SHORT   Number;                         // section number to associate with\n         BYTE    Selection;                      // communal selection type\n     } Section;\n } IMAGE_AUX_SYMBOL;\n \u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "IMAGE_SIZEOF_AUX_SYMBOL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "18"
    },
    {
      "name": "sym",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.debug.DebugCOFFSymbolAux.AuxSym",
      "type_short": "AuxSym",
      "constant_value": null
    },
    {
      "name": "file",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.debug.DebugCOFFSymbolAux.AuxFile",
      "type_short": "AuxFile",
      "constant_value": null
    },
    {
      "name": "section",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.debug.DebugCOFFSymbolAux.AuxSection",
      "type_short": "AuxSection",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createDebugCOFFSymbolAux",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "symbol",
          "type_long": "ghidra.app.util.bin.format.pe.debug.DebugCOFFSymbol",
          "type_short": "DebugCOFFSymbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.DebugCOFFSymbolAux",
        "type_short": "DebugCOFFSymbolAux",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initDebugCOFFSymbolAux",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "symbol",
          "type_long": "ghidra.app.util.bin.format.pe.debug.DebugCOFFSymbol",
          "type_short": "DebugCOFFSymbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "@see java.lang.Object#toString()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
