{
  "name": "PortableExecutable",
  "comment": "A class to manage loading Portable Executables (PE).",
  "javadoc": "A class to manage loading Portable Executables (PE).",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"PORTABLE_EXECUTABLE\""
    },
    {
      "name": "DEBUG",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
      "type_short": "FactoryBundledWithBinaryReader",
      "constant_value": null
    },
    {
      "name": "dosHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.mz.DOSHeader",
      "type_short": "DOSHeader",
      "constant_value": null
    },
    {
      "name": "richHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.RichHeader",
      "type_short": "RichHeader",
      "constant_value": null
    },
    {
      "name": "ntHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
      "type_short": "NTHeader",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createPortableExecutable",
      "comment": "Constructs a new Portable Executable using the specified byte provider and layout.\n  \n Same as calling createFileAlignedPortableExecutable(factory, bp, layout, true, false)",
      "javadoc": "Constructs a new Portable Executable using the specified byte provider and layout.\n  \u003cp\u003e\n Same as calling \u003ccode\u003ecreateFileAlignedPortableExecutable(factory, bp, layout, true, false)\u003c/code\u003e\n@param factory generic factory instance\n@param bp the byte provider\n@param layout specifies the layout of the underlying provider and governs RVA resolution\n@throws IOException if an I/O error occurs.\n@see #createPortableExecutable(GenericFactory, ByteProvider, SectionLayout, boolean, boolean)",
      "static": true,
      "params": [
        {
          "name": "factory",
          "type_long": "generic.continues.GenericFactory",
          "type_short": "GenericFactory",
          "comment": "generic factory instance"
        },
        {
          "name": "bp",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "the byte provider"
        },
        {
          "name": "layout",
          "type_long": "ghidra.app.util.bin.format.pe.PortableExecutable.SectionLayout",
          "type_short": "SectionLayout",
          "comment": "specifies the layout of the underlying provider and governs RVA resolution"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.PortableExecutable",
        "type_short": "PortableExecutable",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs."
        }
      ]
    },
    {
      "name": "createPortableExecutable",
      "comment": "Constructs a new Portable Executable using the specified byte provider and layout.",
      "javadoc": "Constructs a new Portable Executable using the specified byte provider and layout.\n@param factory generic factory instance\n@param bp the byte provider\n@param layout specifies the layout of the underlying provider and governs RVA resolution\n@param advancedProcess if true, the data directories are also processed\n@param parseCliHeaders if true, CLI headers are parsed (if present)\n@throws IOException if an I/O error occurs.",
      "static": true,
      "params": [
        {
          "name": "factory",
          "type_long": "generic.continues.GenericFactory",
          "type_short": "GenericFactory",
          "comment": "generic factory instance"
        },
        {
          "name": "bp",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "the byte provider"
        },
        {
          "name": "layout",
          "type_long": "ghidra.app.util.bin.format.pe.PortableExecutable.SectionLayout",
          "type_short": "SectionLayout",
          "comment": "specifies the layout of the underlying provider and governs RVA resolution"
        },
        {
          "name": "advancedProcess",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, the data directories are also processed"
        },
        {
          "name": "parseCliHeaders",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, CLI headers are parsed (if present)"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.PortableExecutable",
        "type_short": "PortableExecutable",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs."
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initPortableExecutable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "factory",
          "type_long": "generic.continues.GenericFactory",
          "type_short": "GenericFactory",
          "comment": ""
        },
        {
          "name": "bp",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "layout",
          "type_long": "ghidra.app.util.bin.format.pe.PortableExecutable.SectionLayout",
          "type_short": "SectionLayout",
          "comment": ""
        },
        {
          "name": "advancedProcess",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "parseCliHeaders",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDOSHeader",
      "comment": "Returns the DOS header from the PE image.",
      "javadoc": "Returns the DOS header from the PE image.\n@return the DOS header from the PE image",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.mz.DOSHeader",
        "type_short": "DOSHeader",
        "comment": "the DOS header from the PE image"
      },
      "throws": []
    },
    {
      "name": "getRichHeader",
      "comment": "Returns the Rich header from the PE image.",
      "javadoc": "Returns the Rich header from the PE image.\n@return the Rich header from the PE image",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.RichHeader",
        "type_short": "RichHeader",
        "comment": "the Rich header from the PE image"
      },
      "throws": []
    },
    {
      "name": "getNTHeader",
      "comment": "Returns the NT header from the PE image.",
      "javadoc": "Returns the NT header from the PE image.\n@return the NT header from the PE image",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
        "type_short": "NTHeader",
        "comment": "the NT header from the PE image"
      },
      "throws": []
    },
    {
      "name": "writeHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "raf",
          "type_long": "java.io.RandomAccessFile",
          "type_short": "RandomAccessFile",
          "comment": ""
        },
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "computeAlignment",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFileLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    }
  ]
}
