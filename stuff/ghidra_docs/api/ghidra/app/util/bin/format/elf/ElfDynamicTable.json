{
  "name": "ElfDynamicTable",
  "comment": "If an object file participates in dynamic linking, its program header table \n will have an element of type PT_DYNAMIC. This \"segment\" contains the \".dynamic\" section. \n A special symbol, _DYNAMIC, labels the section, which contains an array of the \n Elf32_Dyn or Elf64_Dyn structures.\n \n All address entries contained within this table should adjusted for pre-linking \n using ElfHeader#adjustAddressForPrelink(long).  If a pre-link adjustment is not applicable, \n this adjustment will have no affect.",
  "javadoc": "If an object file participates in dynamic linking, its program header table \n will have an element of type PT_DYNAMIC. This \"segment\" contains the \".dynamic\" section. \n A special symbol, _DYNAMIC, labels the section, which contains an array of the \n Elf32_Dyn or Elf64_Dyn structures.\n \u003cp\u003e\n All address entries contained within this table should adjusted for pre-linking \n using {@link ElfHeader#adjustAddressForPrelink(long)}.  If a pre-link adjustment is not applicable, \n this adjustment will have no affect.",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.format.elf.ElfFileSection"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "dynamics",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.elf.ElfDynamic\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "header",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
      "type_short": "ElfHeader",
      "constant_value": null
    },
    {
      "name": "fileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "addrOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createDynamicTable",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": ""
        },
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "addrOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfDynamicTable",
        "type_short": "ElfDynamicTable",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initDynamicTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": ""
        },
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "addrOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addDynamic",
      "comment": "Adds the new dynamic at the specified index.",
      "javadoc": "Adds the new dynamic at the specified index.\n@param dyn the new dynamic\n@param index the new index",
      "static": false,
      "params": [
        {
          "name": "dyn",
          "type_long": "ghidra.app.util.bin.format.elf.ElfDynamic",
          "type_short": "ElfDynamic",
          "comment": "the new dynamic"
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new index"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDynamics",
      "comment": "Returns an array of the dynamics defined this dynamic header.",
      "javadoc": "Returns an array of the dynamics defined this dynamic header.\n@return an array of the dynamics defined this dynamic header",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfDynamic[]",
        "type_short": "ghidra.app.util.bin.format.elf.ElfDynamic[]",
        "comment": "an array of the dynamics defined this dynamic header"
      },
      "throws": []
    },
    {
      "name": "getDynamics",
      "comment": "Returns an array of the dynamics defined this dynamic header\n with the specified type.",
      "javadoc": "Returns an array of the dynamics defined this dynamic header\n with the specified type.\n@param type the desired dynamic type, e.g., DT_NEEDED\n@return an array of the dynamics defined this dynamic header",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "long",
          "type_short": "long",
          "comment": "the desired dynamic type, e.g., DT_NEEDED"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfDynamic[]",
        "type_short": "ghidra.app.util.bin.format.elf.ElfDynamic[]",
        "comment": "an array of the dynamics defined this dynamic header"
      },
      "throws": []
    },
    {
      "name": "getDynamics",
      "comment": "Returns an array of the dynamics defined this dynamic header\n with the specified (enum) type.",
      "javadoc": "Returns an array of the dynamics defined this dynamic header\n with the specified (enum) type.\n@param type the desired dynamic type, e.g., DT_NEEDED\n@return an array of the dynamics defined this dynamic header",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.app.util.bin.format.elf.ElfDynamicType",
          "type_short": "ElfDynamicType",
          "comment": "the desired dynamic type, e.g., DT_NEEDED"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfDynamic[]",
        "type_short": "ghidra.app.util.bin.format.elf.ElfDynamic[]",
        "comment": "an array of the dynamics defined this dynamic header"
      },
      "throws": []
    },
    {
      "name": "setDynamicValue",
      "comment": "Sets the dynamic with the specified type to the specified value.",
      "javadoc": "Sets the dynamic with the specified type to the specified value.\n@param type the dynamic type\n@param value the new value",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "long",
          "type_short": "long",
          "comment": "the dynamic type"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the new value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setDynamicValue",
      "comment": "Sets the dynamic with the specified (enum) type to the specified value.",
      "javadoc": "Sets the dynamic with the specified (enum) type to the specified value.\n@param type the dynamic (enum) type\n@param value the new value",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.app.util.bin.format.elf.ElfDynamicType",
          "type_short": "ElfDynamicType",
          "comment": "the dynamic (enum) type"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "the new value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDynamicValue",
      "comment": "Returns the value of the specified dynamic type.",
      "javadoc": "Returns the value of the specified dynamic type.\n@param type the dynamic type\n@return the dynamic value",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "long",
          "type_short": "long",
          "comment": "the dynamic type"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the dynamic value"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "containsDynamicValue",
      "comment": "Returns true if the specified dynamic (enum) type has a value.",
      "javadoc": "Returns true if the specified dynamic (enum) type has a value.\n@param type the dynamic (enum) type\n@return true if dynamic value exists",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.app.util.bin.format.elf.ElfDynamicType",
          "type_short": "ElfDynamicType",
          "comment": "the dynamic (enum) type"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if dynamic value exists"
      },
      "throws": []
    },
    {
      "name": "containsDynamicValue",
      "comment": "Returns true if the specified dynamic type has a value.",
      "javadoc": "Returns true if the specified dynamic type has a value.\n@param type the dynamic type\n@return true if dynamic value exists",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "long",
          "type_short": "long",
          "comment": "the dynamic type"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if dynamic value exists"
      },
      "throws": []
    },
    {
      "name": "getDynamicValue",
      "comment": "Returns the value of the specified dynamic (enum) type.",
      "javadoc": "Returns the value of the specified dynamic (enum) type.\n@param type the dynamic (enum) type\n@return the dynamic value",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.app.util.bin.format.elf.ElfDynamicType",
          "type_short": "ElfDynamicType",
          "comment": "the dynamic (enum) type"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the dynamic value"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getTagDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEntrySize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toBytes",
      "comment": "Get this dynamic table data as a byte array",
      "javadoc": "Get this dynamic table data as a byte array\n@param dc data converter\n@return data array",
      "static": false,
      "params": [
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": "data converter"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "data array"
      },
      "throws": [
        {
          "type_long": "java.lang.ArrayIndexOutOfBoundsException",
          "type_short": "ArrayIndexOutOfBoundsException",
          "comment": ""
        }
      ]
    }
  ]
}
