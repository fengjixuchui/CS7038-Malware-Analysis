{
  "name": "ControlFlowGuard",
  "comment": "ControlFlowGuard is a platform security feature that was created to combat memory\n corruption vulnerabilities.\n \n ReturnFlowGuard was introduced as an addition to ControlFlowGuard in the Windows 10\n Creator\u0027s update.",
  "javadoc": "ControlFlowGuard is a platform security feature that was created to combat memory\n corruption vulnerabilities.\n \u003cp\u003e\n ReturnFlowGuard was introduced as an addition to ControlFlowGuard in the Windows 10\n Creator\u0027s update.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "GuardCFFunctionTableName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "GuardCFAddressTakenIatTableName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "GuardCfgTableEntryName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markup",
      "comment": "Perform markup on the supported ControlFlowGuard and ReturnFlowGuard functions and \n tables, if they exist.",
      "javadoc": "Perform markup on the supported ControlFlowGuard and ReturnFlowGuard functions and \n tables, if they exist.\n@param lcd The PE LoadConfigDirectory.\n@param program The program.\n@param log The log.\n@param ntHeader The PE NTHeader.",
      "static": true,
      "params": [
        {
          "name": "lcd",
          "type_long": "ghidra.app.util.bin.format.pe.LoadConfigDirectory",
          "type_short": "LoadConfigDirectory",
          "comment": "The PE LoadConfigDirectory."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program."
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The log."
        },
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": "The PE NTHeader."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupCfgCheckFunction",
      "comment": "Performs markup on the ControlFlowGuard check function, if it exists.",
      "javadoc": "Performs markup on the ControlFlowGuard check function, if it exists.\n@param lcd The PE LoadConfigDirectory.\n@param program The program.\n@param is64bit True if the PE is 64-bit; false if it\u0027s 32-bit.\n@param space The program\u0027s address space.\n@param mem The program\u0027s memory.\n@param symbolTable The program\u0027s symbol table.",
      "static": true,
      "params": [
        {
          "name": "lcd",
          "type_long": "ghidra.app.util.bin.format.pe.LoadConfigDirectory",
          "type_short": "LoadConfigDirectory",
          "comment": "The PE LoadConfigDirectory."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program."
        },
        {
          "name": "is64bit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if the PE is 64-bit; false if it\u0027s 32-bit."
        },
        {
          "name": "space",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "The program\u0027s address space."
        },
        {
          "name": "mem",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": "The program\u0027s memory."
        },
        {
          "name": "symbolTable",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": "The program\u0027s symbol table."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupCfgDispatchFunction",
      "comment": "Performs markup on the ControlFlowGuard dispatch function, if it exists.",
      "javadoc": "Performs markup on the ControlFlowGuard dispatch function, if it exists.\n@param lcd The PE LoadConfigDirectory.\n@param program The program.\n@param is64bit True if the PE is 64-bit; false if it\u0027s 32-bit.\n@param space The program\u0027s address space.\n@param mem The program\u0027s memory.\n@param symbolTable The program\u0027s symbol table.",
      "static": true,
      "params": [
        {
          "name": "lcd",
          "type_long": "ghidra.app.util.bin.format.pe.LoadConfigDirectory",
          "type_short": "LoadConfigDirectory",
          "comment": "The PE LoadConfigDirectory."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program."
        },
        {
          "name": "is64bit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if the PE is 64-bit; false if it\u0027s 32-bit."
        },
        {
          "name": "space",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "The program\u0027s address space."
        },
        {
          "name": "mem",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": "The program\u0027s memory."
        },
        {
          "name": "symbolTable",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": "The program\u0027s symbol table."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupCfgFunctionTable",
      "comment": "Performs markup on the ControlFlowGuard function table, if it exists.",
      "javadoc": "Performs markup on the ControlFlowGuard function table, if it exists.\n@param lcd The PE LoadConfigDirectory.\n@param program The program.\n@param log The log.",
      "static": true,
      "params": [
        {
          "name": "lcd",
          "type_long": "ghidra.app.util.bin.format.pe.LoadConfigDirectory",
          "type_short": "LoadConfigDirectory",
          "comment": "The PE LoadConfigDirectory."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program."
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The log."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createCfgFunctions",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "tableData",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFunctionAddressesFromTable",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "table",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupCfgAddressTakenIatEntryTable",
      "comment": "Performs markup on the ControlFlowGuard address taken IAT table, if it exists.",
      "javadoc": "Performs markup on the ControlFlowGuard address taken IAT table, if it exists.\n@param lcd The PE LoadConfigDirectory.\n@param program The program.\n@param log The log.",
      "static": true,
      "params": [
        {
          "name": "lcd",
          "type_long": "ghidra.app.util.bin.format.pe.LoadConfigDirectory",
          "type_short": "LoadConfigDirectory",
          "comment": "The PE LoadConfigDirectory."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program."
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The log."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupRfgFailureRoutine",
      "comment": "Performs markup on the ReturnFlowGuard failure routine, if it exists.",
      "javadoc": "Performs markup on the ReturnFlowGuard failure routine, if it exists.\n@param lcd The PE LoadConfigDirectory.\n@param program The program\n@param space The program\u0027s address space.\n@param symbolTable The program\u0027s symbol table.",
      "static": true,
      "params": [
        {
          "name": "lcd",
          "type_long": "ghidra.app.util.bin.format.pe.LoadConfigDirectory",
          "type_short": "LoadConfigDirectory",
          "comment": "The PE LoadConfigDirectory."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program"
        },
        {
          "name": "space",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "The program\u0027s address space."
        },
        {
          "name": "symbolTable",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": "The program\u0027s symbol table."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupRfgDefaultFailureRoutine",
      "comment": "Performs markup on the ReturnFlowGuard \"default\" failure routine function, if it exists.",
      "javadoc": "Performs markup on the ReturnFlowGuard \"default\" failure routine function, if it exists.\n@param lcd The PE LoadConfigDirectory.\n@param program The program\n@param is64bit True if the PE is 64-bit; false if it\u0027s 32-bit.\n@param space The program\u0027s address space.\n@param mem The program\u0027s memory.\n@param symbolTable The program\u0027s symbol table.",
      "static": true,
      "params": [
        {
          "name": "lcd",
          "type_long": "ghidra.app.util.bin.format.pe.LoadConfigDirectory",
          "type_short": "LoadConfigDirectory",
          "comment": "The PE LoadConfigDirectory."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program"
        },
        {
          "name": "is64bit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if the PE is 64-bit; false if it\u0027s 32-bit."
        },
        {
          "name": "space",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "The program\u0027s address space."
        },
        {
          "name": "mem",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": "The program\u0027s memory."
        },
        {
          "name": "symbolTable",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": "The program\u0027s symbol table."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupRfgDefaultStackPointerFunction",
      "comment": "Performs markup on the ReturnFlowGuard verify stack pointer function, if it exists.",
      "javadoc": "Performs markup on the ReturnFlowGuard verify stack pointer function, if it exists.\n@param lcd The PE LoadConfigDirectory.\n@param program The program\n@param is64bit True if the PE is 64-bit; false if it\u0027s 32-bit.\n@param space The program\u0027s address space.\n@param mem The program\u0027s memory.\n@param symbolTable The program\u0027s symbol table.",
      "static": true,
      "params": [
        {
          "name": "lcd",
          "type_long": "ghidra.app.util.bin.format.pe.LoadConfigDirectory",
          "type_short": "LoadConfigDirectory",
          "comment": "The PE LoadConfigDirectory."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program"
        },
        {
          "name": "is64bit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if the PE is 64-bit; false if it\u0027s 32-bit."
        },
        {
          "name": "space",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "The program\u0027s address space."
        },
        {
          "name": "mem",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": "The program\u0027s memory."
        },
        {
          "name": "symbolTable",
          "type_long": "ghidra.program.model.symbol.SymbolTable",
          "type_short": "SymbolTable",
          "comment": "The program\u0027s symbol table."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
