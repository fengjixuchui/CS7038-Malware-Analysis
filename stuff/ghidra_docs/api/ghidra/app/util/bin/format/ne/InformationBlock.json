{
  "name": "InformationBlock",
  "comment": "\n A class to represent the Information Block\n defined in the Windows new-style executable.\n \n \n ...as defined in WINNT.H\n \n \n typedef struct _IMAGE_OS2_HEADER {      // OS/2 .EXE header\n     WORD   ne_magic;                    // Magic number\n     CHAR   ne_ver;                      // Version number\n     CHAR   ne_rev;                      // Revision number\n     WORD   ne_enttab;                   // Offset of Entry Table\n     WORD   ne_cbenttab;                 // Number of bytes in Entry Table\n     LONG   ne_crc;                      // Checksum of whole file\n     WORD   ne_flags;                    // Flag word\n     WORD   ne_autodata;                 // Automatic data segment number\n     WORD   ne_heap;                     // Initial heap allocation\n     WORD   ne_stack;                    // Initial stack allocation\n     LONG   ne_csip;                     // Initial CS:IP setting\n     LONG   ne_sssp;                     // Initial SS:SP setting\n     WORD   ne_cseg;                     // Count of file segments\n     WORD   ne_cmod;                     // Entries in Module Reference Table\n     WORD   ne_cbnrestab;                // Size of non-resident name table\n     WORD   ne_segtab;                   // Offset of Segment Table\n     WORD   ne_rsrctab;                  // Offset of Resource Table\n     WORD   ne_restab;                   // Offset of resident name table\n     WORD   ne_modtab;                   // Offset of Module Reference Table\n     WORD   ne_imptab;                   // Offset of Imported Names Table\n     LONG   ne_nrestab;                  // Offset of Non-resident Names Table\n     WORD   ne_cmovent;                  // Count of movable entries\n     WORD   ne_align;                    // Segment alignment shift count\n     WORD   ne_cres;                     // Count of resource segments\n     BYTE   ne_exetyp;                   // Target Operating system\n     BYTE   ne_flagsothers;              // Other .EXE flags\n     WORD   ne_pretthunks;               // offset to return thunks\n     WORD   ne_psegrefbytes;             // offset to segment ref. bytes\n     WORD   ne_swaparea;                 // Minimum code swap area size\n     WORD   ne_expver;                   // Expected Windows version number\n } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;\n ",
  "javadoc": "\u003cp\u003e\n A class to represent the Information Block\n defined in the Windows new-style executable.\n \u003c/p\u003e\n \u003cp\u003e\n ...as defined in WINNT.H\n \u003c/p\u003e\n \u003cpre\u003e\n typedef struct _IMAGE_OS2_HEADER {      // OS/2 .EXE header\n     WORD   ne_magic;                    // Magic number\n     CHAR   ne_ver;                      // Version number\n     CHAR   ne_rev;                      // Revision number\n     WORD   ne_enttab;                   // Offset of Entry Table\n     WORD   ne_cbenttab;                 // Number of bytes in Entry Table\n     LONG   ne_crc;                      // Checksum of whole file\n     WORD   ne_flags;                    // Flag word\n     WORD   ne_autodata;                 // Automatic data segment number\n     WORD   ne_heap;                     // Initial heap allocation\n     WORD   ne_stack;                    // Initial stack allocation\n     LONG   ne_csip;                     // Initial CS:IP setting\n     LONG   ne_sssp;                     // Initial SS:SP setting\n     WORD   ne_cseg;                     // Count of file segments\n     WORD   ne_cmod;                     // Entries in Module Reference Table\n     WORD   ne_cbnrestab;                // Size of non-resident name table\n     WORD   ne_segtab;                   // Offset of Segment Table\n     WORD   ne_rsrctab;                  // Offset of Resource Table\n     WORD   ne_restab;                   // Offset of resident name table\n     WORD   ne_modtab;                   // Offset of Module Reference Table\n     WORD   ne_imptab;                   // Offset of Imported Names Table\n     LONG   ne_nrestab;                  // Offset of Non-resident Names Table\n     WORD   ne_cmovent;                  // Count of movable entries\n     WORD   ne_align;                    // Segment alignment shift count\n     WORD   ne_cres;                     // Count of resource segments\n     BYTE   ne_exetyp;                   // Target Operating system\n     BYTE   ne_flagsothers;              // Other .EXE flags\n     WORD   ne_pretthunks;               // offset to return thunks\n     WORD   ne_psegrefbytes;             // offset to segment ref. bytes\n     WORD   ne_swaparea;                 // Minimum code swap area size\n     WORD   ne_expver;                   // Expected Windows version number\n } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;\n \u003c/pre\u003e\n@see \u003ca href\u003d\"https://www.fileformat.info/format/exe/corion-ne.htm\"\u003eThe NE EXE File Format\u003c/a\u003e\n@see \u003ca href\u003d\"https://www.pcjs.org/pubs/pc/reference/microsoft/mspl13/msdos/encyclopedia/appendix-k/\"\u003eSegmented (New) .EXE File Header Format\u003c/a\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "TAB",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"        \""
    },
    {
      "name": "FLAGS_PROG_NO_AUTO_DATA",
      "comment": "Program flags: no auto data segments",
      "javadoc": "Program flags: no auto data segments",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "0"
    },
    {
      "name": "FLAGS_PROG_SINGLE_DATA",
      "comment": "Program flags: single data segment",
      "javadoc": "Program flags: single data segment",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "1"
    },
    {
      "name": "FLAGS_PROG_MULTIPLE_DATA",
      "comment": "Program flags: multiple data segments",
      "javadoc": "Program flags: multiple data segments",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "2"
    },
    {
      "name": "FLAGS_PROG_GLOBAL_INIT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "4"
    },
    {
      "name": "FLAGS_PROG_PROTECTED_MODE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "8"
    },
    {
      "name": "FLAGS_PROG_8086",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "16"
    },
    {
      "name": "FLAGS_PROG_80286",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "32"
    },
    {
      "name": "FLAGS_PROG_80386",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "64"
    },
    {
      "name": "FLAGS_PROG_80x87",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "-128"
    },
    {
      "name": "FLAGS_APP_FULL_SCREEN",
      "comment": "Is application full screen?",
      "javadoc": "Is application full screen?",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "1"
    },
    {
      "name": "FLAGS_APP_WIN_PM_COMPATIBLE",
      "comment": "Is application compatible with Windows Program Manager?",
      "javadoc": "Is application compatible with Windows Program Manager?",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "2"
    },
    {
      "name": "FLAGS_APP_WINDOWS_PM",
      "comment": "Does application use Windows Program Manager?",
      "javadoc": "Does application use Windows Program Manager?",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "3"
    },
    {
      "name": "FLAGS_APP_LOAD_CODE",
      "comment": "Does the first segment contain code that loads the application?",
      "javadoc": "Does the first segment contain code that loads the application?",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "8"
    },
    {
      "name": "FLAGS_APP_LINK_ERRS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "32"
    },
    {
      "name": "FLAGS_APP_NONCONFORMING_PROG",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "64"
    },
    {
      "name": "FLAGS_APP_LIBRARY_MODULE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "-128"
    },
    {
      "name": "EXETYPE_UNKNOWN",
      "comment": "Unknown executable type",
      "javadoc": "Unknown executable type",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "0"
    },
    {
      "name": "EXETYPE_OS2",
      "comment": "OS/2 executable",
      "javadoc": "OS/2 executable",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "1"
    },
    {
      "name": "EXETYPE_WINDOWS",
      "comment": "Windows executable",
      "javadoc": "Windows executable",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "2"
    },
    {
      "name": "EXETYPE_EUROPEAN_DOS_4",
      "comment": "European DOS 4.x executable",
      "javadoc": "European DOS 4.x executable",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "4"
    },
    {
      "name": "EXETYPE_RESERVED4",
      "comment": "Reserved executable Type",
      "javadoc": "Reserved executable Type",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "8"
    },
    {
      "name": "EXETYPE_WINDOWS_386",
      "comment": "Windows 386 executable",
      "javadoc": "Windows 386 executable",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "4"
    },
    {
      "name": "EXETYPE_BOSS",
      "comment": "Borland Operating System Services executable",
      "javadoc": "Borland Operating System Services executable",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "5"
    },
    {
      "name": "EXETYPE_PHARLAP_286_OS2",
      "comment": "Pharlap 286 OS/2 executable",
      "javadoc": "Pharlap 286 OS/2 executable",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "-127"
    },
    {
      "name": "EXETYPE_PHARLAP_286_WIN",
      "comment": "Pharlap 386 Windows executable",
      "javadoc": "Pharlap 386 Windows executable",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "-126"
    },
    {
      "name": "OTHER_FLAGS_SUPPORTS_LONG_NAMES",
      "comment": "Supports long names",
      "javadoc": "Supports long names",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "0"
    },
    {
      "name": "OTHER_FLAGS_PROTECTED_MODE",
      "comment": "Protected mode",
      "javadoc": "Protected mode",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "1"
    },
    {
      "name": "OTHER_FLAGS_PROPORTIONAL_FONT",
      "comment": "Proportional font",
      "javadoc": "Proportional font",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "2"
    },
    {
      "name": "OTHER_FLAGS_GANGLOAD_AREA",
      "comment": "Gangload area",
      "javadoc": "Gangload area",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "4"
    },
    {
      "name": "ne_magic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_ver",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "ne_rev",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "ne_enttab",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_cbenttab",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_crc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "ne_flags_prog",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "ne_flags_app",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "ne_autodata",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_heap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_stack",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_csip",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "ne_sssp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "ne_cseg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_cmod",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_cbnrestab",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_segtab",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_rsrctab",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_restab",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_modtab",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_imptab",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_nrestab",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "ne_cmovent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_align",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_cres",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_exetyp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "ne_flagsothers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "ne_pretthunks",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_psegrefbytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_swaparea",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ne_expver",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "short",
          "type_short": "short",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.util.bin.format.ne.InvalidWindowsHeaderException",
          "type_short": "InvalidWindowsHeaderException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getMagicNumber",
      "comment": "Returns the magic number.",
      "javadoc": "Returns the magic number.\n@return the magic number",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the magic number"
      },
      "throws": []
    },
    {
      "name": "getVersion",
      "comment": "Returns the version number.",
      "javadoc": "Returns the version number.\n@return the version number",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the version number"
      },
      "throws": []
    },
    {
      "name": "getRevision",
      "comment": "Returns the revision number.",
      "javadoc": "Returns the revision number.\n@return the revision number",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the revision number"
      },
      "throws": []
    },
    {
      "name": "getChecksum",
      "comment": "Returns the checksum.",
      "javadoc": "Returns the checksum.\n@return the checksum",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the checksum"
      },
      "throws": []
    },
    {
      "name": "getInitialHeapSize",
      "comment": "Returns the initial heap size.",
      "javadoc": "Returns the initial heap size.\n@return the initial heap size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the initial heap size"
      },
      "throws": []
    },
    {
      "name": "getInitialStackSize",
      "comment": "Returns the initial stack size.",
      "javadoc": "Returns the initial stack size.\n@return the initial stack size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the initial stack size"
      },
      "throws": []
    },
    {
      "name": "getTargetOpSys",
      "comment": "Returns the target operating system.",
      "javadoc": "Returns the target operating system.\n@return the target operating system",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the target operating system"
      },
      "throws": []
    },
    {
      "name": "getMinCodeSwapSize",
      "comment": "Returns the minimum code swap size.",
      "javadoc": "Returns the minimum code swap size.\n@return the minimum code swap size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the minimum code swap size"
      },
      "throws": []
    },
    {
      "name": "getExpectedWindowsVersion",
      "comment": "Returns the expected windows version.",
      "javadoc": "Returns the expected windows version.\n@return the expected windows version",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the expected windows version"
      },
      "throws": []
    },
    {
      "name": "getAutomaticDataSegment",
      "comment": "Returns the automatic data segment.",
      "javadoc": "Returns the automatic data segment.\n@return the automatic data segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the automatic data segment"
      },
      "throws": []
    },
    {
      "name": "getOtherFlags",
      "comment": "Returns the other flags.",
      "javadoc": "Returns the other flags.\n@return the other flags",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the other flags"
      },
      "throws": []
    },
    {
      "name": "getOtherFlagsAsString",
      "comment": "Returns a string representation of the other flags.",
      "javadoc": "Returns a string representation of the other flags.\n@return a string representation of the other flags",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a string representation of the other flags"
      },
      "throws": []
    },
    {
      "name": "getProgramFlags",
      "comment": "Returns the program flags.",
      "javadoc": "Returns the program flags.\n@return the program flags",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the program flags"
      },
      "throws": []
    },
    {
      "name": "getApplicationFlags",
      "comment": "Returns the application flags.",
      "javadoc": "Returns the application flags.\n@return the application flags",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the application flags"
      },
      "throws": []
    },
    {
      "name": "getEntryPointSegment",
      "comment": "Returns the segment portion of the entry point.",
      "javadoc": "Returns the segment portion of the entry point.\n@return the segment portion of the entry point",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the segment portion of the entry point"
      },
      "throws": []
    },
    {
      "name": "getEntryPointOffset",
      "comment": "Returns the offset portion of the entry point.",
      "javadoc": "Returns the offset portion of the entry point.\n@return the offset portion of the entry point",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the offset portion of the entry point"
      },
      "throws": []
    },
    {
      "name": "getStackPointerSegment",
      "comment": "Returns the segment portion of the stack pointer.",
      "javadoc": "Returns the segment portion of the stack pointer.\n@return the segment portion of the stack pointer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the segment portion of the stack pointer"
      },
      "throws": []
    },
    {
      "name": "getStackPointerOffset",
      "comment": "Returns the offset portion of the stack pointer.",
      "javadoc": "Returns the offset portion of the stack pointer.\n@return the offset portion of the stack pointer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the offset portion of the stack pointer"
      },
      "throws": []
    },
    {
      "name": "getSegmentTableOffset",
      "comment": "Returns the index to the start of the segment table,\n relative to the beginning of the NE windows header.",
      "javadoc": "Returns the index to the start of the segment table,\n relative to the beginning of the NE windows header.\n@return the index of start of the segment table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the index of start of the segment table"
      },
      "throws": []
    },
    {
      "name": "getSegmentCount",
      "comment": "Returns the number of segments in the segment table.",
      "javadoc": "Returns the number of segments in the segment table.\n@return the number of segments in the segment table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of segments in the segment table"
      },
      "throws": []
    },
    {
      "name": "getSegmentAlignmentShiftCount",
      "comment": "Returns a shift count that is used to align the logical sector.\n \n This count is log2 of the segment sector size.\n This value corresponds to the Alignment [/a] linker\n switch.\n It is typically 4, but the default is 9.\n When the linker command line contains a/: 16, the shift count is 4.\n When the linker command line contains a/:256, the shift count is 9.",
      "javadoc": "Returns a shift count that is used to align the logical sector.\n \u003cbr\u003e\n This count is log2 of the segment sector size.\n This value corresponds to the Alignment [/a] linker\n switch.\n It is typically 4, but the default is 9.\n When the linker command line contains a/: 16, the shift count is 4.\n When the linker command line contains a/:256, the shift count is 9.\n@return a shift count that is used to align the logical sector",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "a shift count that is used to align the logical sector"
      },
      "throws": []
    },
    {
      "name": "getResourceTableOffset",
      "comment": "Returns the index to the start of the resource table,\n relative to the beginning of the NE windows header.",
      "javadoc": "Returns the index to the start of the resource table,\n relative to the beginning of the NE windows header.\n@return the index to the start of the resource table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the index to the start of the resource table"
      },
      "throws": []
    },
    {
      "name": "getResidentNameTableOffset",
      "comment": "Returns the index to the start of the resident name table,\n relative to the beginning of the NE windows header.",
      "javadoc": "Returns the index to the start of the resident name table,\n relative to the beginning of the NE windows header.\n@return the index to the start of the resident name table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the index to the start of the resident name table"
      },
      "throws": []
    },
    {
      "name": "getModuleReferenceTableOffset",
      "comment": "Returns the index to the start of the modules reference table,\n relative to the beginning of the NE windows header.",
      "javadoc": "Returns the index to the start of the modules reference table,\n relative to the beginning of the NE windows header.\n@return the index to the start of the modules reference table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the index to the start of the modules reference table"
      },
      "throws": []
    },
    {
      "name": "getModuleReferenceTableCount",
      "comment": "Returns the number of entries in the module reference table.",
      "javadoc": "Returns the number of entries in the module reference table.\n@return the number of entries in the module reference table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of entries in the module reference table"
      },
      "throws": []
    },
    {
      "name": "getImportedNamesTableOffset",
      "comment": "Returns the index to the start of the imported names table,\n relative to the beginning of the NE windows header.",
      "javadoc": "Returns the index to the start of the imported names table,\n relative to the beginning of the NE windows header.\n@return the index to the start of the imported names table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the index to the start of the imported names table"
      },
      "throws": []
    },
    {
      "name": "getEntryTableOffset",
      "comment": "Returns the index to the start of the entry table,\n relative to the beginning of the NE windows header.",
      "javadoc": "Returns the index to the start of the entry table,\n relative to the beginning of the NE windows header.\n@return the index to the start of the entry table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the index to the start of the entry table"
      },
      "throws": []
    },
    {
      "name": "getEntryTableSize",
      "comment": "Returns the number of bytes in the entry table.",
      "javadoc": "Returns the number of bytes in the entry table.\n@return the number of bytes in the entry table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of bytes in the entry table"
      },
      "throws": []
    },
    {
      "name": "getNonResidentNameTableOffset",
      "comment": "Returns the index to the start of the segment table,\n relative to the beginning of the file.",
      "javadoc": "Returns the index to the start of the segment table,\n relative to the beginning of the file.\n@return the index to the start of the segment table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index to the start of the segment table"
      },
      "throws": []
    },
    {
      "name": "getNonResidentNameTableSize",
      "comment": "Returns the number of bytes in the non-resident name table.",
      "javadoc": "Returns the number of bytes in the non-resident name table.\n@return the number of bytes in the non-resident name table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of bytes in the non-resident name table"
      },
      "throws": []
    },
    {
      "name": "getMoveableEntriesCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getResourceSegmentCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReturnOffsetThunk",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSegmentRefByteOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTargetOpSysAsString",
      "comment": "Returns a string representation of the target operating system.",
      "javadoc": "Returns a string representation of the target operating system.\n@return a string representation of the target operating system",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a string representation of the target operating system"
      },
      "throws": []
    },
    {
      "name": "getApplicationFlagsAsString",
      "comment": "Returns a string representation of the application flags.",
      "javadoc": "Returns a string representation of the application flags.\n@return a string representation of the application flags",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a string representation of the application flags"
      },
      "throws": []
    },
    {
      "name": "getProgramFlagsAsString",
      "comment": "Returns a string representation of the program flags.",
      "javadoc": "Returns a string representation of the program flags.\n@return a string representation of the program flags",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a string representation of the program flags"
      },
      "throws": []
    }
  ]
}
