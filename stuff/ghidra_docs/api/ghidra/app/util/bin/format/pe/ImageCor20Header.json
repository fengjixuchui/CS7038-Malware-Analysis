{
  "name": "ImageCor20Header",
  "comment": "typedef struct IMAGE_COR20_HEADER\n {\n     // Header versioning\n    DWORD                   cb;                      // Size of the structure\n    WORD                    MajorRuntimeVersion;     // Version of the CLR Runtime\n    WORD                    MinorRuntimeVersion;     // Version of the CLR Runtime\n\n    // Symbol table and startup information\n    IMAGE_DATA_DIRECTORY    MetaData;                // A Data Directory giving RVA and Size of MetaData\n    DWORD                   Flags;\n    union {\n      DWORD                 EntryPointRVA;           // Points to the .NET native EntryPoint method\n      DWORD                 EntryPointToken;         // Points to the .NET IL EntryPoint method\n    };\n\n    // Binding information\n    IMAGE_DATA_DIRECTORY    Resources;               // A Data Directory for Resources, which are referenced in the MetaData\n    IMAGE_DATA_DIRECTORY    StrongNameSignature;     // A Data Directory for unique .NET assembly signatures\n\n    // Regular fixup and binding information\n    IMAGE_DATA_DIRECTORY    CodeManagerTable;        // Always 0\n    IMAGE_DATA_DIRECTORY    VTableFixups;            // Not well documented VTable used by languages who don\u0027t follow the common type system runtime model\n    IMAGE_DATA_DIRECTORY    ExportAddressTableJumps; // Always 0 in normal .NET assemblies, only present in native images\n\n    // Precompiled image info (internal use only - set to zero)\n    IMAGE_DATA_DIRECTORY    ManagedNativeHeader;\n\n};\n",
  "javadoc": "typedef struct IMAGE_COR20_HEADER\n {\n     // Header versioning\n    DWORD                   cb;                      // Size of the structure\n    WORD                    MajorRuntimeVersion;     // Version of the CLR Runtime\n    WORD                    MinorRuntimeVersion;     // Version of the CLR Runtime\n\n    // Symbol table and startup information\n    IMAGE_DATA_DIRECTORY    MetaData;                // A Data Directory giving RVA and Size of MetaData\n    DWORD                   Flags;\n    union {\n      DWORD                 EntryPointRVA;           // Points to the .NET native EntryPoint method\n      DWORD                 EntryPointToken;         // Points to the .NET IL EntryPoint method\n    };\n\n    // Binding information\n    IMAGE_DATA_DIRECTORY    Resources;               // A Data Directory for Resources, which are referenced in the MetaData\n    IMAGE_DATA_DIRECTORY    StrongNameSignature;     // A Data Directory for unique .NET assembly signatures\n\n    // Regular fixup and binding information\n    IMAGE_DATA_DIRECTORY    CodeManagerTable;        // Always 0\n    IMAGE_DATA_DIRECTORY    VTableFixups;            // Not well documented VTable used by languages who don\u0027t follow the common type system runtime model\n    IMAGE_DATA_DIRECTORY    ExportAddressTableJumps; // Always 0 in normal .NET assemblies, only present in native images\n\n    // Precompiled image info (internal use only - set to zero)\n    IMAGE_DATA_DIRECTORY    ManagedNativeHeader;\n\n};\n\u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter",
    "ghidra.app.util.bin.format.pe.PeMarkupable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"IMAGE_COR20_HEADER\""
    },
    {
      "name": "cb",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "majorRuntimeVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "minorRuntimeVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "metadata",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.CliMetadataDirectory",
      "type_short": "CliMetadataDirectory",
      "constant_value": null
    },
    {
      "name": "flags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "entryPointToken",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "entryPointVA",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "resources",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.DefaultDataDirectory",
      "type_short": "DefaultDataDirectory",
      "constant_value": null
    },
    {
      "name": "strongNameSignature",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.DefaultDataDirectory",
      "type_short": "DefaultDataDirectory",
      "constant_value": null
    },
    {
      "name": "codeManagerTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.DefaultDataDirectory",
      "type_short": "DefaultDataDirectory",
      "constant_value": null
    },
    {
      "name": "vTableFixups",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.DefaultDataDirectory",
      "type_short": "DefaultDataDirectory",
      "constant_value": null
    },
    {
      "name": "exportAddressTableJumps",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.DefaultDataDirectory",
      "type_short": "DefaultDataDirectory",
      "constant_value": null
    },
    {
      "name": "managedNativeHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.DefaultDataDirectory",
      "type_short": "DefaultDataDirectory",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createImageCor20Header",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.ImageCor20Header",
        "type_short": "ImageCor20Header",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initIMAGE_COR20_HEADER",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parse",
      "comment": "Parses this header",
      "javadoc": "Parses this header\n@return True if parsing completed successfully; otherwise, false.\n@throws IOException If there was an IO problem while parsing.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if parsing completed successfully; otherwise, false."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "If there was an IO problem while parsing."
        }
      ]
    },
    {
      "name": "markup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "isBinary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getCb",
      "comment": "Gets the size of this structure in bytes.",
      "javadoc": "Gets the size of this structure in bytes.\n@return The size of this structure in bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The size of this structure in bytes."
      },
      "throws": []
    },
    {
      "name": "getMajorRuntimeVersion",
      "comment": "Gets the major runtime version.",
      "javadoc": "Gets the major runtime version.\n@return The major runtime version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "The major runtime version."
      },
      "throws": []
    },
    {
      "name": "getMinorRuntimeVersion",
      "comment": "Gets the major runtime version.",
      "javadoc": "Gets the major runtime version.\n@return The major runtime version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "The major runtime version."
      },
      "throws": []
    },
    {
      "name": "getMetadata",
      "comment": "Gets the MetaData directory.",
      "javadoc": "Gets the MetaData directory.\n@return The MetaData directory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.CliMetadataDirectory",
        "type_short": "CliMetadataDirectory",
        "comment": "The MetaData directory."
      },
      "throws": []
    },
    {
      "name": "getFlags",
      "comment": "Gets the flags.",
      "javadoc": "Gets the flags.\n@return The flags.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The flags."
      },
      "throws": []
    },
    {
      "name": "getEntryPointToken",
      "comment": "Gets the entry point token.",
      "javadoc": "Gets the entry point token.\n@return The entry point token.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The entry point token."
      },
      "throws": []
    },
    {
      "name": "getEntryPointVA",
      "comment": "Gets the entry point virtual address.",
      "javadoc": "Gets the entry point virtual address.\n@return The entry point address.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "The entry point address."
      },
      "throws": []
    },
    {
      "name": "getResources",
      "comment": "Gets the Resources directory.",
      "javadoc": "Gets the Resources directory.\n@return The Resources directory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.DefaultDataDirectory",
        "type_short": "DefaultDataDirectory",
        "comment": "The Resources directory."
      },
      "throws": []
    },
    {
      "name": "getStrongNameSignature",
      "comment": "Gets the StrongNameSignature directory.",
      "javadoc": "Gets the StrongNameSignature directory.\n@return The StrongNameSignature directory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.DefaultDataDirectory",
        "type_short": "DefaultDataDirectory",
        "comment": "The StrongNameSignature directory."
      },
      "throws": []
    },
    {
      "name": "getCodeManagerTable",
      "comment": "Gets the CodeManagerTable directory.",
      "javadoc": "Gets the CodeManagerTable directory.\n@return The CodeManagerTable directory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.DefaultDataDirectory",
        "type_short": "DefaultDataDirectory",
        "comment": "The CodeManagerTable directory."
      },
      "throws": []
    },
    {
      "name": "getVTableFixups",
      "comment": "Gets the VTableFixups directory.",
      "javadoc": "Gets the VTableFixups directory.\n@return The VTableFixups directory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.DefaultDataDirectory",
        "type_short": "DefaultDataDirectory",
        "comment": "The VTableFixups directory."
      },
      "throws": []
    },
    {
      "name": "getExportAddressTableJumps",
      "comment": "Gets the ExportAddressTableJumps directory.",
      "javadoc": "Gets the ExportAddressTableJumps directory.\n@return The ExportAddressTableJumps directory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.DefaultDataDirectory",
        "type_short": "DefaultDataDirectory",
        "comment": "The ExportAddressTableJumps directory."
      },
      "throws": []
    },
    {
      "name": "getManagedNativeHeader",
      "comment": "Gets the ManagedNativeHeader directory.",
      "javadoc": "Gets the ManagedNativeHeader directory.\n@return The ManagedNativeHeader directory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.DefaultDataDirectory",
        "type_short": "DefaultDataDirectory",
        "comment": "The ManagedNativeHeader directory."
      },
      "throws": []
    }
  ]
}
