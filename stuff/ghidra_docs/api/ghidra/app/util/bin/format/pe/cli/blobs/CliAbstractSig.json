{
  "name": "CliAbstractSig",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.format.pe.cli.CliRepresentable"
  ],
  "extends": "ghidra.app.util.bin.format.pe.cli.blobs.CliBlob",
  "fields": [
    {
      "name": "PATH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"/PE/CLI/Blobs/Signatures\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "blob",
          "type_long": "ghidra.app.util.bin.format.pe.cli.blobs.CliBlob",
          "type_short": "CliBlob",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContentsDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContentsName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContentsComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepresentationCommon",
      "comment": "This is the method that subclasses should override. If stream is null, the method must not cause a NullPointerException,\n i.e. it must handle this as if there was no stream to begin with.",
      "javadoc": "This is the method that subclasses should override. If stream is null, the method must not cause a NullPointerException,\n i.e. it must handle this as if there was no stream to begin with.",
      "static": false,
      "params": [
        {
          "name": "stream",
          "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata",
          "type_short": "CliStreamMetadata",
          "comment": ""
        },
        {
          "name": "isShort",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepresentation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getShortRepresentation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepresentation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "stream",
          "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata",
          "type_short": "CliStreamMetadata",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getShortRepresentation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "stream",
          "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata",
          "type_short": "CliStreamMetadata",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepresentationOf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "ghidra.app.util.bin.format.pe.cli.CliRepresentable",
          "type_short": "CliRepresentable",
          "comment": ""
        },
        {
          "name": "stream",
          "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata",
          "type_short": "CliStreamMetadata",
          "comment": ""
        },
        {
          "name": "isShort",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "convertTypeCodeToDataType",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "typeCode",
          "type_long": "ghidra.app.util.bin.format.pe.cli.blobs.CliAbstractSig.CliElementType",
          "type_short": "CliElementType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readCliType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.blobs.CliAbstractSig.CliSigType",
        "type_short": "CliSigType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    }
  ]
}
