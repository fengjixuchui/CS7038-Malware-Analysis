{
  "name": "OMFSegMapDesc",
  "comment": "A class to represent the Object Module Format (OMF) Segment Mapping Descriptor data structure.\n \n \n typedef struct OMFSegMapDesc {\n     unsigned short  flags;       // descriptor flags bit field\n     unsigned short  ovl;         // the logical overlay number\n     unsigned short  group;       // group index into the descriptor array\n     unsigned short  frame;       // logical segment index - interpreted via flags\n     unsigned short  iSegName;    // segment or group name - index into sstSegName\n     unsigned short  iClassName;  // class name - index into sstSegName\n     unsigned long   offset;      // byte offset of the logical within the physical segment\n     unsigned long   cbSeg;       // byte count of the logical segment or group\n } OMFSegMapDesc;\n ",
  "javadoc": "A class to represent the Object Module Format (OMF) Segment Mapping Descriptor data structure.\n \u003cbr\u003e\n \u003cpre\u003e\n typedef struct OMFSegMapDesc {\n     unsigned short  flags;       // descriptor flags bit field\n     unsigned short  ovl;         // the logical overlay number\n     unsigned short  group;       // group index into the descriptor array\n     unsigned short  frame;       // logical segment index - interpreted via flags\n     unsigned short  iSegName;    // segment or group name - index into sstSegName\n     unsigned short  iClassName;  // class name - index into sstSegName\n     unsigned long   offset;      // byte offset of the logical within the physical segment\n     unsigned long   cbSeg;       // byte count of the logical segment or group\n } OMFSegMapDesc;\n \u003c/pre\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "IMAGE_SIZEOF_OMF_SEG_MAP_DESC",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "20"
    },
    {
      "name": "flags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "ovl",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "group",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "frame",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "iSegName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "iClassName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "cbSeg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createOMFSegMapDesc",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.OMFSegMapDesc",
        "type_short": "OMFSegMapDesc",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initOMFSegMapDesc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFlags",
      "comment": "Returns the descriptor flags bit field.",
      "javadoc": "Returns the descriptor flags bit field.\n@return the descriptor flags bit field",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the descriptor flags bit field"
      },
      "throws": []
    },
    {
      "name": "getLogicalOverlayNumber",
      "comment": "Returns the logical overlay number.",
      "javadoc": "Returns the logical overlay number.\n@return the logical overlay number",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the logical overlay number"
      },
      "throws": []
    },
    {
      "name": "getGroupIndex",
      "comment": "Returns the group index into the descriptor array.",
      "javadoc": "Returns the group index into the descriptor array.\n@return the group index into the descriptor array",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the group index into the descriptor array"
      },
      "throws": []
    },
    {
      "name": "getLogicalSegmentIndex",
      "comment": "Returns the logical segment index - interpreted via flags.",
      "javadoc": "Returns the logical segment index - interpreted via flags.\n@return the logical segment index - interpreted via flags",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the logical segment index - interpreted via flags"
      },
      "throws": []
    },
    {
      "name": "getSegmentName",
      "comment": "Returns the segment or group name - index into sstSegName.",
      "javadoc": "Returns the segment or group name - index into sstSegName.\n@return the segment or group name - index into sstSegName",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the segment or group name - index into sstSegName"
      },
      "throws": []
    },
    {
      "name": "getClassName",
      "comment": "Returns the class name - index into sstSegName.",
      "javadoc": "Returns the class name - index into sstSegName.\n@return the class name - index into sstSegName",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the class name - index into sstSegName"
      },
      "throws": []
    },
    {
      "name": "getByteOffset",
      "comment": "Returns the byte offset of the logical within the physical segment.",
      "javadoc": "Returns the byte offset of the logical within the physical segment.\n@return the byte offset of the logical within the physical segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the byte offset of the logical within the physical segment"
      },
      "throws": []
    },
    {
      "name": "getByteCount",
      "comment": "Returns the byte count of the logical segment or group.",
      "javadoc": "Returns the byte count of the logical segment or group.\n@return the byte count of the logical segment or group",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the byte count of the logical segment or group"
      },
      "throws": []
    }
  ]
}
