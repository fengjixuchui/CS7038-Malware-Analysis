{
  "name": "MachoRelocationHandler",
  "comment": "An abstract class used to perform Mach-O relocations.  Classes should extend this class to\n provide relocations in a machine/processor specific way.",
  "javadoc": "An abstract class used to perform Mach-O relocations.  Classes should extend this class to\n provide relocations in a machine/processor specific way.\n@see \u003ca href\u003d\"https://opensource.apple.com/source/xnu/xnu-7195.81.3/EXTERNAL_HEADERS/mach-o/reloc.h.auto.html\"\u003emach-o/reloc.h\u003c/a\u003e",
  "static": false,
  "implements": [
    "ghidra.util.classfinder.ExtensionPoint"
  ],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "canRelocate",
      "comment": "Checks to see whether or not an instance of this Mach-O relocation handler can handle \n relocating the Mach-O defined by the provided file header",
      "javadoc": "Checks to see whether or not an instance of this Mach-O relocation handler can handle \n relocating the Mach-O defined by the provided file header\n@param header The header associated with the Mach-O to relocate\n@return True if this relocation handler can do the relocation; otherwise, false",
      "static": false,
      "params": [
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.macho.MachHeader",
          "type_short": "MachHeader",
          "comment": "The header associated with the Mach-O to relocate"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if this relocation handler can do the relocation; otherwise, false"
      },
      "throws": []
    },
    {
      "name": "isPairedRelocation",
      "comment": "Checks to see if the given relocation is a \"paired\" relocation.  A paired relocation has a \n certain expectation from the relocation that follows it.",
      "javadoc": "Checks to see if the given relocation is a \"paired\" relocation.  A paired relocation has a \n certain expectation from the relocation that follows it.\n@param relocation The relocation to check\n@return True if the given relocation is a \"paired\" relocation; otherwise, false",
      "static": false,
      "params": [
        {
          "name": "relocation",
          "type_long": "ghidra.app.util.bin.format.macho.RelocationInfo",
          "type_short": "RelocationInfo",
          "comment": "The relocation to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if the given relocation is a \"paired\" relocation; otherwise, false"
      },
      "throws": []
    },
    {
      "name": "relocate",
      "comment": "Performs a relocation",
      "javadoc": "Performs a relocation\n@param relocation The relocation to perform\n@throws MemoryAccessException If there is a problem accessing memory during the relocation\n@throws NotFoundException If this handler didn\u0027t find a way to perform the relocation",
      "static": false,
      "params": [
        {
          "name": "relocation",
          "type_long": "ghidra.app.util.bin.format.macho.relocation.MachoRelocation",
          "type_short": "MachoRelocation",
          "comment": "The relocation to perform"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "If there is a problem accessing memory during the relocation"
        },
        {
          "type_long": "ghidra.util.exception.NotFoundException",
          "type_short": "NotFoundException",
          "comment": "If this handler didn\u0027t find a way to perform the relocation"
        }
      ]
    },
    {
      "name": "read",
      "comment": "Reads bytes at the given address.  The size of the read is determined by the length of the \n relocation info.",
      "javadoc": "Reads bytes at the given address.  The size of the read is determined by the length of the \n relocation info.\n@param relocation The relocation to read\n@return The read bytes\n@throws MemoryAccessException If there is a problem accessing memory during the read",
      "static": true,
      "params": [
        {
          "name": "relocation",
          "type_long": "ghidra.app.util.bin.format.macho.relocation.MachoRelocation",
          "type_short": "MachoRelocation",
          "comment": "The relocation to read"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The read bytes"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "If there is a problem accessing memory during the read"
        }
      ]
    },
    {
      "name": "write",
      "comment": "Writes bytes at the given address.  The size of the write is determined by the length of the \n relocation info.",
      "javadoc": "Writes bytes at the given address.  The size of the write is determined by the length of the \n relocation info.\n@param relocation The relocation to write\n@param value The value to write\n@throws MemoryAccessException If there is a problem accessing memory during the write",
      "static": true,
      "params": [
        {
          "name": "relocation",
          "type_long": "ghidra.app.util.bin.format.macho.relocation.MachoRelocation",
          "type_short": "MachoRelocation",
          "comment": "The relocation to write"
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "The value to write"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "If there is a problem accessing memory during the write"
        }
      ]
    }
  ]
}
