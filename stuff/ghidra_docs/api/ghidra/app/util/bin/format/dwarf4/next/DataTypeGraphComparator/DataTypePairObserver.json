{
  "name": "DataTypePairObserver",
  "comment": "",
  "javadoc": "",
  "static": true,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "observe",
      "comment": "Callback method called with a DataType from the first/left/src graph and\n its matching DataType element from the second/right/dest graph.\n \n This callback can choose to abort traversing the tree of child types if it returns\n false.  (ie. if this was a Pointer DataType, returning false would stop\n the graph comparator from comparing the DataType pointed to by this Pointer)\n ",
      "javadoc": "Callback method called with a {@link DataType} from the first/left/src graph and\n its matching DataType element from the second/right/dest graph.\n \u003cp\u003e\n This callback can choose to abort traversing the tree of child types if it returns\n false.  (ie. if this was a Pointer DataType, returning false would stop\n the graph comparator from comparing the DataType pointed to by this Pointer)\n \u003cp\u003e\n@param dt1 element from the first/left/src DataType graph\n@param dt2 matching element from the second/right/dest DataType graph\n@return false if abort this subtree, true if continue",
      "static": false,
      "params": [
        {
          "name": "dt1",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "element from the first/left/src DataType graph"
        },
        {
          "name": "dt2",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "matching element from the second/right/dest DataType graph"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "false if abort this subtree, true if continue"
      },
      "throws": []
    }
  ]
}
