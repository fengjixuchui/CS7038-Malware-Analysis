{
  "name": "StatementProgramPrologue",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "TOTAL_LENGTH_FIELD_LEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "PRE_PROLOGUE_LEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "10"
    },
    {
      "name": "totalLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "version",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "prologueLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "minimumInstructionLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "defaultIsStatement",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "lineBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "lineRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "opcodeBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "standardOpcodeLengths",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "includeDirectories",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cjava.lang.String\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "fileNames",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.dwarf.line.FileEntry\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getTotalLength",
      "comment": "Returns the size in bytes of the statement information for this \n compilation unit (not including the total_length field itself).",
      "javadoc": "Returns the size in bytes of the statement information for this \n compilation unit (not including the total_length field itself).\n@return size in bytes of the statement information",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "size in bytes of the statement information"
      },
      "throws": []
    },
    {
      "name": "getVersion",
      "comment": "Returns the version identifier for the statement information format.",
      "javadoc": "Returns the version identifier for the statement information format.\n@return the version identifier for the statement information format",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the version identifier for the statement information format"
      },
      "throws": []
    },
    {
      "name": "getPrologueLength",
      "comment": "Returns the number of bytes following the prologue_length field to the \n beginning of the first byte of the statement program itself.",
      "javadoc": "Returns the number of bytes following the prologue_length field to the \n beginning of the first byte of the statement program itself.\n@return the number of bytes following the prologue_length",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of bytes following the prologue_length"
      },
      "throws": []
    },
    {
      "name": "getMinimumInstructionLength",
      "comment": "Returns the size in bytes of the smallest target machine instruction. \n Statement program opcodes that alter the address register first \n multiply their operands by this value.",
      "javadoc": "Returns the size in bytes of the smallest target machine instruction. \n Statement program opcodes that alter the address register first \n multiply their operands by this value.\n@return the size in bytes of the smallest target machine instruction",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size in bytes of the smallest target machine instruction"
      },
      "throws": []
    },
    {
      "name": "isDefaultIsStatement",
      "comment": "Returns the initial value of the is_stmt register.",
      "javadoc": "Returns the initial value of the is_stmt register.\n@return the initial value of the is_stmt register",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "the initial value of the is_stmt register"
      },
      "throws": []
    },
    {
      "name": "getLineBase",
      "comment": "Returns the line base value.\n This parameter affects the meaning of the special opcodes. See below.",
      "javadoc": "Returns the line base value.\n This parameter affects the meaning of the special opcodes. See below.\n@return the line base value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the line base value"
      },
      "throws": []
    },
    {
      "name": "getLineRange",
      "comment": "Returns the line range value.\n This parameter affects the meaning of the special opcodes. See below.",
      "javadoc": "Returns the line range value.\n This parameter affects the meaning of the special opcodes. See below.\n@return the line range value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the line range value"
      },
      "throws": []
    },
    {
      "name": "getOpcodeBase",
      "comment": "Returns the number assigned to the first special opcode.",
      "javadoc": "Returns the number assigned to the first special opcode.\n@return the number assigned to the first special opcode",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number assigned to the first special opcode"
      },
      "throws": []
    },
    {
      "name": "getStandardOpcodeLengths",
      "comment": "return the array for each of the standard opcodes",
      "javadoc": "return the array for each of the standard opcodes\n@return the array for each of the standard opcodes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the array for each of the standard opcodes"
      },
      "throws": []
    },
    {
      "name": "getIncludeDirectories",
      "comment": "",
      "javadoc": "@return each path that was searched for included source files",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "each path that was searched for included source files"
      },
      "throws": []
    },
    {
      "name": "getFileNames",
      "comment": "",
      "javadoc": "@return an entry for each source file that contributed to the statement",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.dwarf.line.FileEntry\u003e",
        "type_short": "List",
        "comment": "an entry for each source file that contributed to the statement"
      },
      "throws": []
    },
    {
      "name": "getFileNameByIndex",
      "comment": "Returns the file entry at the given index.",
      "javadoc": "Returns the file entry at the given index.\n@param fileIndex the file index\n@return the file entry at the given index",
      "static": false,
      "params": [
        {
          "name": "fileIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "the file index"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf.line.FileEntry",
        "type_short": "FileEntry",
        "comment": "the file entry at the given index"
      },
      "throws": []
    },
    {
      "name": "getDirectoryByIndex",
      "comment": "The directory index represents an entry in the \n include directories section. If the directoryIndex\n is LEB128(0), then the file was found in the current\n directory.",
      "javadoc": "The directory index represents an entry in the \n include directories section. If the directoryIndex\n is LEB128(0), then the file was found in the current\n directory.\n@param directoryIndex the directory index\n@return the directory or current directory",
      "static": false,
      "params": [
        {
          "name": "directoryIndex",
          "type_long": "long",
          "type_short": "long",
          "comment": "the directory index"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the directory or current directory"
      },
      "throws": []
    }
  ]
}
