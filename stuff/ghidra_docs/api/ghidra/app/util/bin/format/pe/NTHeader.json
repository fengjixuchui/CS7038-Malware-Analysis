{
  "name": "NTHeader",
  "comment": "A class to represent the IMAGE_NT_HEADERS32 and\n IMAGE_NT_HEADERS64 structs as defined in\n winnt.h.\n \n typedef struct _IMAGE_NT_HEADERS {\n    DWORD Signature;\n    IMAGE_FILE_HEADER FileHeader;\n    IMAGE_OPTIONAL_HEADER32 OptionalHeader;\n };\n ",
  "javadoc": "A class to represent the \u003cb\u003e\u003ccode\u003eIMAGE_NT_HEADERS32\u003c/code\u003e\u003c/b\u003e and\n IMAGE_NT_HEADERS64 structs as defined in\n \u003ccode\u003ewinnt.h\u003c/code\u003e.\n \u003cpre\u003e\n typedef struct _IMAGE_NT_HEADERS {\n    DWORD Signature;\n    IMAGE_FILE_HEADER FileHeader;\n    IMAGE_OPTIONAL_HEADER32 OptionalHeader;\n };\n \u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter",
    "ghidra.app.util.bin.format.pe.OffsetValidator"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "SIZEOF_SIGNATURE",
      "comment": "The size of the NT header signature.",
      "javadoc": "The size of the NT header signature.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "MAX_SANE_COUNT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "65536"
    },
    {
      "name": "signature",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "fileHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.FileHeader",
      "type_short": "FileHeader",
      "constant_value": null
    },
    {
      "name": "optionalHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.OptionalHeader",
      "type_short": "OptionalHeader",
      "constant_value": null
    },
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
      "type_short": "FactoryBundledWithBinaryReader",
      "constant_value": null
    },
    {
      "name": "index",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "advancedProcess",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "parseCliHeaders",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "layout",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.PortableExecutable.SectionLayout",
      "type_short": "SectionLayout",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createNTHeader",
      "comment": "Constructs a new NT header.",
      "javadoc": "Constructs a new NT header.\n@param reader the binary reader\n@param index the index into the reader to the start of the NT header\n@param advancedProcess if true, information rafside of the base header will be processed\n@param parseCliHeaders if true, CLI headers are parsed (if present)\n@throws InvalidNTHeaderException if the bytes the specified index\n do not constitute an accurate NT header.",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": "the binary reader"
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index into the reader to the start of the NT header"
        },
        {
          "name": "layout",
          "type_long": "ghidra.app.util.bin.format.pe.PortableExecutable.SectionLayout",
          "type_short": "SectionLayout",
          "comment": ""
        },
        {
          "name": "advancedProcess",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, information rafside of the base header will be processed"
        },
        {
          "name": "parseCliHeaders",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, CLI headers are parsed (if present)"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
        "type_short": "NTHeader",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.util.bin.format.pe.InvalidNTHeaderException",
          "type_short": "InvalidNTHeaderException",
          "comment": "if the bytes the specified index\n do not constitute an accurate NT header."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initNTHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "layout",
          "type_long": "ghidra.app.util.bin.format.pe.PortableExecutable.SectionLayout",
          "type_short": "SectionLayout",
          "comment": ""
        },
        {
          "name": "advancedProcess",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "parseCliHeaders",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.util.bin.format.pe.InvalidNTHeaderException",
          "type_short": "InvalidNTHeaderException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getName",
      "comment": "Returns the name to use when converting into a structure data type.",
      "javadoc": "Returns the name to use when converting into a structure data type.\n@return the name to use when converting into a structure data type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name to use when converting into a structure data type"
      },
      "throws": []
    },
    {
      "name": "isRVAResoltionSectionAligned",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFileHeader",
      "comment": "Returns the file header.",
      "javadoc": "Returns the file header.\n@return the file header",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.FileHeader",
        "type_short": "FileHeader",
        "comment": "the file header"
      },
      "throws": []
    },
    {
      "name": "getOptionalHeader",
      "comment": "Returns the optional header.",
      "javadoc": "Returns the optional header.\n@return the optional header",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.OptionalHeader",
        "type_short": "OptionalHeader",
        "comment": "the optional header"
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.StructConverter#toDataType()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "rvaToPointer",
      "comment": "Converts a relative virtual address (RVA) into a pointer.",
      "javadoc": "Converts a relative virtual address (RVA) into a pointer.\n@see #rvaToPointer(long)",
      "static": false,
      "params": [
        {
          "name": "rva",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "rvaToPointer",
      "comment": "",
      "javadoc": "@param rva the relative virtual address\n@return the pointer into binary image, 0 if not valid",
      "static": false,
      "params": [
        {
          "name": "rva",
          "type_long": "long",
          "type_short": "long",
          "comment": "the relative virtual address"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the pointer into binary image, 0 if not valid"
      },
      "throws": []
    },
    {
      "name": "checkPointer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ptr",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkRVA",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "rva",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "vaToPointer",
      "comment": "Converts a virtual address (VA) into a pointer.",
      "javadoc": "Converts a virtual address (VA) into a pointer.\n@see #vaToPointer(long)",
      "static": false,
      "params": [
        {
          "name": "va",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "vaToPointer",
      "comment": "",
      "javadoc": "@param va the virtual address\n@return the pointer into binary image, 0 if not valid",
      "static": false,
      "params": [
        {
          "name": "va",
          "type_long": "long",
          "type_short": "long",
          "comment": "the virtual address"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the pointer into binary image, 0 if not valid"
      },
      "throws": []
    },
    {
      "name": "parse",
      "comment": "",
      "javadoc": "@throws InvalidNTHeaderException\n@throws IOException",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.util.bin.format.pe.InvalidNTHeaderException",
          "type_short": "InvalidNTHeaderException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "raf",
          "type_long": "java.io.RandomAccessFile",
          "type_short": "RandomAccessFile",
          "comment": ""
        },
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "shouldParseCliHeaders",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
