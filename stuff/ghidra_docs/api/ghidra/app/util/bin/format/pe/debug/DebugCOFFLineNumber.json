{
  "name": "DebugCOFFLineNumber",
  "comment": "A class to represent the COFF Line number data structure.\n \n \n typedef struct _IMAGE_LINENUMBER {\n    union {\n        DWORD   SymbolTableIndex; // Symbol table index of function name if Linenumber is 0.\n        DWORD   VirtualAddress;   // Virtual address of line number.\n    } Type;\n    WORD    Linenumber;           // Line number.\n } IMAGE_LINENUMBER;\n ",
  "javadoc": "A class to represent the COFF Line number data structure.\n \u003cbr\u003e\n \u003cpre\u003e\n typedef struct _IMAGE_LINENUMBER {\n    union {\n        DWORD   SymbolTableIndex; // Symbol table index of function name if Linenumber is 0.\n        DWORD   VirtualAddress;   // Virtual address of line number.\n    } Type;\n    WORD    Linenumber;           // Line number.\n } IMAGE_LINENUMBER;\n \u003c/pre\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "IMAGE_SIZEOF_LINENUMBER",
      "comment": "The size of the IMAGE_LINENUMBER structure.",
      "javadoc": "The size of the \u003ccode\u003eIMAGE_LINENUMBER\u003c/code\u003e structure.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "6"
    },
    {
      "name": "symbolTableIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "virtualAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "lineNumber",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createDebugCOFFLineNumber",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.DebugCOFFLineNumber",
        "type_short": "DebugCOFFLineNumber",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initDebugCOFFLineNumber",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getSymbolTableIndex",
      "comment": "Returns the symbol table index of function name, if linenumber is 0.",
      "javadoc": "Returns the symbol table index of function name, if linenumber is 0.\n@return the symbol table index of function name, if linenumber is 0",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the symbol table index of function name, if linenumber is 0"
      },
      "throws": []
    },
    {
      "name": "getVirtualAddress",
      "comment": "Returns the virtual address of the line number.",
      "javadoc": "Returns the virtual address of the line number.\n@return the virtual address of the line number",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the virtual address of the line number"
      },
      "throws": []
    },
    {
      "name": "getLineNumber",
      "comment": "Returns the line number.",
      "javadoc": "Returns the line number.\n@return the line number",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the line number"
      },
      "throws": []
    }
  ]
}
