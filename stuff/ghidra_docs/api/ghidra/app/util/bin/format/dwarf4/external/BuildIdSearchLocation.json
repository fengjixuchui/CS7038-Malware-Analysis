{
  "name": "BuildIdSearchLocation",
  "comment": "A SearchLocation that expects the external debug files to be named using the hexadecimal\n value of the hash of the file, and to be arranged in a bucketed directory hierarchy using the\n first 2 hexdigits of the hash.\n \n For example, the debug file with hash  would\n be stored as \"6a/ddc39dc19c1b45f9ba70baf7fd81ea6508ea7f.debug\" (under some root directory).",
  "javadoc": "A {@link SearchLocation} that expects the external debug files to be named using the hexadecimal\n value of the hash of the file, and to be arranged in a bucketed directory hierarchy using the\n first 2 hexdigits of the hash.\n \u003cp\u003e\n For example, the debug file with hash {@code 6addc39dc19c1b45f9ba70baf7fd81ea6508ea7f} would\n be stored as \"6a/ddc39dc19c1b45f9ba70baf7fd81ea6508ea7f.debug\" (under some root directory).",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.format.dwarf4.external.SearchLocation"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "BUILD_ID_PREFIX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"build-id://\""
    },
    {
      "name": "rootDir",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.io.File",
      "type_short": "File",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "isBuildIdSearchLocation",
      "comment": "Returns true if the specified location string specifies a BuildIdSearchLocation.",
      "javadoc": "Returns true if the specified location string specifies a BuildIdSearchLocation.\n@param locString string to test\n@return boolean true if locString specifies a BuildId location",
      "static": true,
      "params": [
        {
          "name": "locString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string to test"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if locString specifies a BuildId location"
      },
      "throws": []
    },
    {
      "name": "create",
      "comment": "Creates a new BuildIdSearchLocation instance using the specified location string.",
      "javadoc": "Creates a new {@link BuildIdSearchLocation} instance using the specified location string.\n@param locString string, earlier returned from {@link #getName()}\n@param context {@link SearchLocationCreatorContext} to allow accessing information outside\n of the location string that might be needed to create a new instance\n@return new {@link BuildIdSearchLocation} instance",
      "static": true,
      "params": [
        {
          "name": "locString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string, earlier returned from #getName()"
        },
        {
          "name": "context",
          "type_long": "ghidra.app.util.bin.format.dwarf4.external.SearchLocationCreatorContext",
          "type_short": "SearchLocationCreatorContext",
          "comment": "SearchLocationCreatorContext to allow accessing information outside\n of the location string that might be needed to create a new instance"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.external.BuildIdSearchLocation",
        "type_short": "BuildIdSearchLocation",
        "comment": "new BuildIdSearchLocation instance"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new BuildIdSearchLocation at the specified location.",
      "javadoc": "Creates a new {@link BuildIdSearchLocation} at the specified location.\n@param rootDir path to the root directory of the build-id directory (typically ends with\n \"./build-id\")",
      "static": false,
      "params": [
        {
          "name": "rootDir",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "path to the root directory of the build-id directory (typically ends with\n \"./build-id\")"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDescriptiveName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findDebugFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "debugInfo",
          "type_long": "ghidra.app.util.bin.format.dwarf4.external.ExternalDebugInfo",
          "type_short": "ExternalDebugInfo",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRL",
        "type_short": "FSRL",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    }
  ]
}
