{
  "name": "NewExecutable",
  "comment": "A class to manage loading New Executables (NE).",
  "javadoc": "A class to manage loading New Executables (NE).",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
      "type_short": "FactoryBundledWithBinaryReader",
      "constant_value": null
    },
    {
      "name": "dosHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.mz.DOSHeader",
      "type_short": "DOSHeader",
      "constant_value": null
    },
    {
      "name": "winHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.ne.WindowsHeader",
      "type_short": "WindowsHeader",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new instance of an new executable.",
      "javadoc": "Constructs a new instance of an new executable.\n@param factory is the object factory to bundle with the reader\n@param bp the byte provider\n@param baseAddr the image base of the executable\n@throws IOException if an I/O error occurs.",
      "static": false,
      "params": [
        {
          "name": "factory",
          "type_long": "generic.continues.GenericFactory",
          "type_short": "GenericFactory",
          "comment": "is the object factory to bundle with the reader"
        },
        {
          "name": "bp",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "the byte provider"
        },
        {
          "name": "baseAddr",
          "type_long": "ghidra.program.model.address.SegmentedAddress",
          "type_short": "SegmentedAddress",
          "comment": "the image base of the executable"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs."
        }
      ]
    },
    {
      "name": "getBinaryReader",
      "comment": "Returns the underlying binary reader.",
      "javadoc": "Returns the underlying binary reader.\n@return the underlying binary reader",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
        "type_short": "FactoryBundledWithBinaryReader",
        "comment": "the underlying binary reader"
      },
      "throws": []
    },
    {
      "name": "getDOSHeader",
      "comment": "Returns the DOS header from the new executable.",
      "javadoc": "Returns the DOS header from the new executable.\n@return the DOS header from the new executable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.mz.DOSHeader",
        "type_short": "DOSHeader",
        "comment": "the DOS header from the new executable"
      },
      "throws": []
    },
    {
      "name": "getWindowsHeader",
      "comment": "Returns the Windows header from the new executable.",
      "javadoc": "Returns the Windows header from the new executable.\n@return the Windows header from the new executable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.ne.WindowsHeader",
        "type_short": "WindowsHeader",
        "comment": "the Windows header from the new executable"
      },
      "throws": []
    }
  ]
}
