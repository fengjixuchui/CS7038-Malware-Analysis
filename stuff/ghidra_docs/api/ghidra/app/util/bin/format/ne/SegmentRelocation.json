{
  "name": "SegmentRelocation",
  "comment": "A class to represent a new-executable segment relocation.",
  "javadoc": "A class to represent a new-executable segment relocation.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "VALUES_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "5"
    },
    {
      "name": "MOVEABLE",
      "comment": "Moveable relocation.",
      "javadoc": "Moveable relocation.",
      "static": true,
      "type_long": "short",
      "type_short": "short",
      "constant_value": "255"
    },
    {
      "name": "TYPE_MASK",
      "comment": "A mask indicating that the low-order nibble is the type.",
      "javadoc": "A mask indicating that the low-order nibble is the type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "15"
    },
    {
      "name": "TYPE_LO_BYTE",
      "comment": "low byte at the specified address.",
      "javadoc": "low byte at the specified address.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "0"
    },
    {
      "name": "TYPE_SEGMENT",
      "comment": "16-bit selector.",
      "javadoc": "16-bit selector.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "2"
    },
    {
      "name": "TYPE_FAR_ADDR",
      "comment": "32-bit pointer.",
      "javadoc": "32-bit pointer.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "3"
    },
    {
      "name": "TYPE_OFFSET",
      "comment": "16-bit pointer.",
      "javadoc": "16-bit pointer.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "5"
    },
    {
      "name": "TYPE_FAR_ADDR_48",
      "comment": "48-bit pointer.",
      "javadoc": "48-bit pointer.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "12"
    },
    {
      "name": "TYPE_OFFSET_32",
      "comment": "32-bit offset.",
      "javadoc": "32-bit offset.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "13"
    },
    {
      "name": "TYPE_STRINGS",
      "comment": "The names of the available relocations.",
      "javadoc": "The names of the available relocations.",
      "static": true,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "TYPE_LENGTHS",
      "comment": "The number of bytes required to perform relocation",
      "javadoc": "The number of bytes required to perform relocation",
      "static": true,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "FLAG_TARGET_MASK",
      "comment": "A mask indicating that the low-order two-bits is the type.",
      "javadoc": "A mask indicating that the low-order two-bits is the type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "3"
    },
    {
      "name": "FLAG_INTERNAL_REF",
      "comment": "Internal reference relocation.",
      "javadoc": "Internal reference relocation.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "0"
    },
    {
      "name": "FLAG_IMPORT_ORDINAL",
      "comment": "Import ordinal relocation.",
      "javadoc": "Import ordinal relocation.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "1"
    },
    {
      "name": "FLAG_IMPORT_NAME",
      "comment": "Import name relocation.",
      "javadoc": "Import name relocation.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "2"
    },
    {
      "name": "FLAG_OS_FIXUP",
      "comment": "Operating system fixup relocation.",
      "javadoc": "Operating system fixup relocation.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "3"
    },
    {
      "name": "FLAG_ADDITIVE",
      "comment": "Additive relocaiton.",
      "javadoc": "Additive relocaiton.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "4"
    },
    {
      "name": "segment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "type",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "flagbyte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "targetSegment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "targetOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constucts a new segment relocation.",
      "javadoc": "Constucts a new segment relocation.\n@param reader the binary reader",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": "the binary reader"
        },
        {
          "name": "segment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "type",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        },
        {
          "name": "values",
          "type_long": "long[]",
          "type_short": "long[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInternalRef",
      "comment": "Returns true if this relocation is an internal reference.",
      "javadoc": "Returns true if this relocation is an internal reference.\n@return true if this relocation is an internal reference",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this relocation is an internal reference"
      },
      "throws": []
    },
    {
      "name": "isImportOrdinal",
      "comment": "Returns true if this relocation is an import by ordinal.",
      "javadoc": "Returns true if this relocation is an import by ordinal.\n@return true if this relocation is an import by ordinal",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this relocation is an import by ordinal"
      },
      "throws": []
    },
    {
      "name": "isImportName",
      "comment": "Returns true if this relocation is an import by name.",
      "javadoc": "Returns true if this relocation is an import by name.\n@return true if this relocation is an import by name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this relocation is an import by name"
      },
      "throws": []
    },
    {
      "name": "isOpSysFixup",
      "comment": "Returns true if this relocation is an operating system fixup.",
      "javadoc": "Returns true if this relocation is an operating system fixup.\n@return true if this relocation is an operating system fixup",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this relocation is an operating system fixup"
      },
      "throws": []
    },
    {
      "name": "isAdditive",
      "comment": "Returns true if this relocation is additive.\n If this bit is set, then add relocation to existing value.\n Otherwise overwrite the existing value.",
      "javadoc": "Returns true if this relocation is additive.\n If this bit is set, then add relocation to existing value.\n Otherwise overwrite the existing value.\n@return true if this relocation is additive.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this relocation is additive."
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "Returns the relocation type.",
      "javadoc": "Returns the relocation type.\n@return the relocation type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the relocation type"
      },
      "throws": []
    },
    {
      "name": "getFlagByte",
      "comment": "Returns the relocation flags.",
      "javadoc": "Returns the relocation flags.\n@return the relocation flags",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the relocation flags"
      },
      "throws": []
    },
    {
      "name": "getOffset",
      "comment": "Returns the relocation offset.",
      "javadoc": "Returns the relocation offset.\n@return the relocation offset",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the relocation offset"
      },
      "throws": []
    },
    {
      "name": "getTargetSegment",
      "comment": "Returns the relocation target segment.",
      "javadoc": "Returns the relocation target segment.\n@return the relocation target segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the relocation target segment"
      },
      "throws": []
    },
    {
      "name": "getTargetOffset",
      "comment": "Returns the relocation target offset.",
      "javadoc": "Returns the relocation target offset.\n@return the relocation target offset",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the relocation target offset"
      },
      "throws": []
    },
    {
      "name": "getValues",
      "comment": "Returns values required to reconstruct this object.",
      "javadoc": "Returns values required to reconstruct this object.\n@return values required to reconstruct this object",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long[]",
        "type_short": "long[]",
        "comment": "values required to reconstruct this object"
      },
      "throws": []
    }
  ]
}
