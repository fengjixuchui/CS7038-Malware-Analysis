{
  "name": "LoadCommand",
  "comment": "Represents a load_command structure.",
  "javadoc": "Represents a load_command structure.\n@see \u003ca href\u003d\"https://opensource.apple.com/source/xnu/xnu-4570.71.2/EXTERNAL_HEADERS/mach-o/loader.h.auto.html\"\u003emach-o/loader.h\u003c/a\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "startIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "cmd",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "cmdsize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initLoadCommand",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getStartIndex",
      "comment": "Returns the binary start index of this load command.",
      "javadoc": "Returns the binary start index of this load command.\n@return the binary start index of this load command",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the binary start index of this load command"
      },
      "throws": []
    },
    {
      "name": "getCommandType",
      "comment": "Type of load command",
      "javadoc": "Type of load command\n@return type of load command",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "type of load command"
      },
      "throws": []
    },
    {
      "name": "getCommandSize",
      "comment": "Total size of command in bytes",
      "javadoc": "Total size of command in bytes\n@return total size of command in bytes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "total size of command in bytes"
      },
      "throws": []
    },
    {
      "name": "getCommandName",
      "comment": "Returns the name of this command.",
      "javadoc": "Returns the name of this command.\n@return the name of this command",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of this command"
      },
      "throws": []
    },
    {
      "name": "markup",
      "comment": "Mark-up the program with the data structures for this load command.",
      "javadoc": "Mark-up the program with the data structures for this load command.\n@param header the mach header\n@param api the flat program api\n@param baseAddress the base address to apply the mark-up\n@param isBinary true if mach-o was loaded as binary\n@param parentModule parent module to create fragments\n@param monitor the task monitor\n@param log the message logS",
      "static": false,
      "params": [
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.macho.MachHeader",
          "type_short": "MachHeader",
          "comment": "the mach header"
        },
        {
          "name": "api",
          "type_long": "ghidra.program.flatapi.FlatProgramAPI",
          "type_short": "FlatProgramAPI",
          "comment": "the flat program api"
        },
        {
          "name": "baseAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the base address to apply the mark-up"
        },
        {
          "name": "isBinary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if mach-o was loaded as binary"
        },
        {
          "name": "parentModule",
          "type_long": "ghidra.program.model.listing.ProgramModule",
          "type_short": "ProgramModule",
          "comment": "parent module to create fragments"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "the task monitor"
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "the message logS"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createFragment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "api",
          "type_long": "ghidra.program.flatapi.FlatProgramAPI",
          "type_short": "FlatProgramAPI",
          "comment": ""
        },
        {
          "name": "baseAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "module",
          "type_long": "ghidra.program.model.listing.ProgramModule",
          "type_short": "ProgramModule",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramFragment",
        "type_short": "ProgramFragment",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "updateMonitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
