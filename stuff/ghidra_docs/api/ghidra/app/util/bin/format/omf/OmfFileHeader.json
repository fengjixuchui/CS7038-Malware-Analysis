{
  "name": "OmfFileHeader",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.util.bin.format.omf.OmfRecord",
  "fields": [
    {
      "name": "objectName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "libModuleName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "translator",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "isLittleEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "nameList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.String\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "segments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfSegmentHeader\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "groups",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfGroupRecord\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "externsymbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfExternalSymbol\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "symbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfSymbolRecord\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "fixup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfFixupRecord\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "extraSeg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfSegmentHeader\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getName",
      "comment": "This is usually the original source filename",
      "javadoc": "This is usually the original source filename\n@return the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "getLibraryModuleName",
      "comment": "The name of the object module (within a library)",
      "javadoc": "The name of the object module (within a library)\n@return the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name"
      },
      "throws": []
    },
    {
      "name": "getMachineName",
      "comment": "",
      "javadoc": "@return the string identifying the architecture this object was compiled for",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the string identifying the architecture this object was compiled for"
      },
      "throws": []
    },
    {
      "name": "getTranslator",
      "comment": "If the OMF file contains a \"translator\" record, this is usually a string\n indicating the compiler which produced the file.",
      "javadoc": "If the OMF file contains a \"translator\" record, this is usually a string\n indicating the compiler which produced the file.\n@return the translator for this file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the translator for this file"
      },
      "throws": []
    },
    {
      "name": "isLittleEndian",
      "comment": "",
      "javadoc": "@return true if the file describes the load image for a little endian architecture",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the file describes the load image for a little endian architecture"
      },
      "throws": []
    },
    {
      "name": "getSegments",
      "comment": "",
      "javadoc": "@return the list of segments in this file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfSegmentHeader\u003e",
        "type_short": "ArrayList",
        "comment": "the list of segments in this file"
      },
      "throws": []
    },
    {
      "name": "getExtraSegments",
      "comment": "",
      "javadoc": "@return the list of segments which are Borland extensions",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfSegmentHeader\u003e",
        "type_short": "ArrayList",
        "comment": "the list of segments which are Borland extensions"
      },
      "throws": []
    },
    {
      "name": "getGroups",
      "comment": "",
      "javadoc": "@return the list of group records for this file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfGroupRecord\u003e",
        "type_short": "ArrayList",
        "comment": "the list of group records for this file"
      },
      "throws": []
    },
    {
      "name": "getExternalSymbols",
      "comment": "",
      "javadoc": "@return the list of symbols that are external to this file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfExternalSymbol\u003e",
        "type_short": "ArrayList",
        "comment": "the list of symbols that are external to this file"
      },
      "throws": []
    },
    {
      "name": "getPublicSymbols",
      "comment": "",
      "javadoc": "@return the list of symbols exported by this file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfSymbolRecord\u003e",
        "type_short": "ArrayList",
        "comment": "the list of symbols exported by this file"
      },
      "throws": []
    },
    {
      "name": "getFixups",
      "comment": "",
      "javadoc": "@return the list of relocation records for this file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfFixupRecord\u003e",
        "type_short": "ArrayList",
        "comment": "the list of relocation records for this file"
      },
      "throws": []
    },
    {
      "name": "sortSegmentDataBlocks",
      "comment": "Sort the explicit data-blocks for each segment into address order.",
      "javadoc": "Sort the explicit data-blocks for each segment into address order.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addEnumeratedBlock",
      "comment": "Add a freshly parsed LEDATA record to its correct segment",
      "javadoc": "Add a freshly parsed LEDATA record to its correct segment\n@param datablock is the LEDATA record\n@throws OmfException for a malformed segment index",
      "static": false,
      "params": [
        {
          "name": "datablock",
          "type_long": "ghidra.app.util.bin.format.omf.OmfEnumeratedData",
          "type_short": "OmfEnumeratedData",
          "comment": "is the LEDATA record"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.util.bin.format.omf.OmfException",
          "type_short": "OmfException",
          "comment": "for a malformed segment index"
        }
      ]
    },
    {
      "name": "resolveSegment",
      "comment": "Given an index, retrieve the specific segment it refers to. This\n incorporates the special Borland segments, where the index has \n the bit 0x4000 set.",
      "javadoc": "Given an index, retrieve the specific segment it refers to. This\n incorporates the special Borland segments, where the index has \n the bit 0x4000 set.\n@param index identifies the segment\n@return the corresponding OmfSegmentHeader\n@throws OmfException if the index is malformed",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "identifies the segment"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.omf.OmfSegmentHeader",
        "type_short": "OmfSegmentHeader",
        "comment": "the corresponding OmfSegmentHeader"
      },
      "throws": [
        {
          "type_long": "ghidra.app.util.bin.format.omf.OmfException",
          "type_short": "OmfException",
          "comment": "if the index is malformed"
        }
      ]
    },
    {
      "name": "resolveNames",
      "comment": "Resolve special names associated with each segment: segment, class, overlay names\n and group: group name\n For each segment, the read/write/execute permissions are also determined",
      "javadoc": "Resolve special names associated with each segment: segment, class, overlay names\n and group: group name\n For each segment, the read/write/execute permissions are also determined\n@throws OmfException if any name indices are malformed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.util.bin.format.omf.OmfException",
          "type_short": "OmfException",
          "comment": "if any name indices are malformed"
        }
      ]
    },
    {
      "name": "createOrFindBorlandSegment",
      "comment": "Given an index, either find an existing Borland segment, or create a new one.\n Borland compilers can introduce special segments with a separate indexing\n scheme. These need to be stored in a separate list, while the loader needs\n to look up segments by index.",
      "javadoc": "Given an index, either find an existing Borland segment, or create a new one.\n Borland compilers can introduce special segments with a separate indexing\n scheme. These need to be stored in a separate list, while the loader needs\n to look up segments by index.\n@param index is the segment index\n@param datatype is the type of (new) segment\n@return the corresponding OmfSegmentHeader",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the segment index"
        },
        {
          "name": "datatype",
          "type_long": "int",
          "type_short": "int",
          "comment": "is the type of (new) segment"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.omf.OmfSegmentHeader",
        "type_short": "OmfSegmentHeader",
        "comment": "the corresponding OmfSegmentHeader"
      },
      "throws": []
    },
    {
      "name": "evaluateComdef",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "comdef",
          "type_long": "ghidra.app.util.bin.format.omf.OmfComdefRecord",
          "type_short": "OmfComdefRecord",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "scan",
      "comment": "Scan the object file, for the main header and comment records. Other records are parsed but not saved",
      "javadoc": "Scan the object file, for the main header and comment records. Other records are parsed but not saved\n@param reader is the byte stream\n@param monitor is checked for cancellation\n@param initialCommentsOnly is true if we only want to scan the header and the initial comments,\n@return the header record\n@throws IOException for problems reading program data\n@throws OmfException for malformed records",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "is the byte stream"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "is checked for cancellation"
        },
        {
          "name": "initialCommentsOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "is true if we only want to scan the header and the initial comments,"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.omf.OmfFileHeader",
        "type_short": "OmfFileHeader",
        "comment": "the header record"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for problems reading program data"
        },
        {
          "type_long": "ghidra.app.util.bin.format.omf.OmfException",
          "type_short": "OmfException",
          "comment": "for malformed records"
        }
      ]
    },
    {
      "name": "parse",
      "comment": "Parse the entire object file",
      "javadoc": "Parse the entire object file\n@param reader is the byte stream\n@param monitor is checked for cancel button\n@return the header record as root of object\n@throws IOException for problems reading data\n@throws OmfException for malformed records",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "is the byte stream"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "is checked for cancel button"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.omf.OmfFileHeader",
        "type_short": "OmfFileHeader",
        "comment": "the header record as root of object"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for problems reading data"
        },
        {
          "type_long": "ghidra.app.util.bin.format.omf.OmfException",
          "type_short": "OmfException",
          "comment": "for malformed records"
        }
      ]
    },
    {
      "name": "doLinking",
      "comment": "Assign a load image address to each segment. Follow OMF rules for grouping and ordering\n the segments in memory.",
      "javadoc": "Assign a load image address to each segment. Follow OMF rules for grouping and ordering\n the segments in memory.\n@param startAddress is the base memory address for the load image\n@param segments is the list of segments\n@param groups is the list of specific segments that are grouped together in memory\n@throws OmfException for malformed index/alignment/combining fields",
      "static": true,
      "params": [
        {
          "name": "startAddress",
          "type_long": "long",
          "type_short": "long",
          "comment": "is the base memory address for the load image"
        },
        {
          "name": "segments",
          "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfSegmentHeader\u003e",
          "type_short": "ArrayList",
          "comment": "is the list of segments"
        },
        {
          "name": "groups",
          "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.omf.OmfGroupRecord\u003e",
          "type_short": "ArrayList",
          "comment": "is the list of specific segments that are grouped together in memory"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.util.bin.format.omf.OmfException",
          "type_short": "OmfException",
          "comment": "for malformed index/alignment/combining fields"
        }
      ]
    },
    {
      "name": "checkMagicNumber",
      "comment": "Check that the file has the specific OMF magic number",
      "javadoc": "Check that the file has the specific OMF magic number\n@param reader accesses the bytes of the file\n@return true if the magic number matches\n@throws IOException for problems reading bytes",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "accesses the bytes of the file"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the magic number matches"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "for problems reading bytes"
        }
      ]
    },
    {
      "name": "createReader",
      "comment": "Create a reader for a specific OMF file",
      "javadoc": "Create a reader for a specific OMF file\n@param provider is the underlying ByteProvider\n@return the new reader",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "is the underlying ByteProvider"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.BinaryReader",
        "type_short": "BinaryReader",
        "comment": "the new reader"
      },
      "throws": []
    }
  ]
}
