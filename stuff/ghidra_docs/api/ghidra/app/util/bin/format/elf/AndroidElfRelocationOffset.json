{
  "name": "AndroidElfRelocationOffset",
  "comment": "AndroidElfRelocationOffset provides a dynamic LEB128 relocation \n offset adjustment component for packed Android ELF Relocation Table groups.\n See AndroidElfRelocationGroup.  The offset adjustment provided\n by the LEB128 memory data is added to the associated baseOffset to obtain\n the corresponding relocation offset/address.\n \n Secondary purpose is to retain the relocation offset associated with a \n component instance.  This functionality relies on the 1:1 relationship\n between this dynamic datatype and the single component which references it.",
  "javadoc": "\u003ccode\u003eAndroidElfRelocationOffset\u003c/code\u003e provides a dynamic LEB128 relocation \n offset adjustment component for packed Android ELF Relocation Table groups.\n See {@link AndroidElfRelocationGroup}.  The offset adjustment provided\n by the LEB128 memory data is added to the associated baseOffset to obtain\n the corresponding relocation offset/address.\n \u003cbr\u003e\n Secondary purpose is to retain the relocation offset associated with a \n component instance.  This functionality relies on the 1:1 relationship\n between this dynamic datatype and the single component which references it.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.plugin.exceptionhandlers.gcc.datatype.AbstractLeb128DataType",
  "fields": [
    {
      "name": "baseOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "relocationOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a packed relocation offset data type based upon a signed LEB128\n value adjusted by baseOffset.",
      "javadoc": "Creates a packed relocation offset data type based upon a signed LEB128\n value adjusted by baseOffset.\n@param dtm the data type manager to associate with this data type.\n@param baseOffset base offset to which LEB128 offset data should be added\n@param relocationOffset the actual relocation offset value assciated with this\n instance (used by {@link #getValue(MemBuffer, Settings, int)} and \n returned by {@link #getRelocationOffset()}.  This value should equals \n \u003ccode\u003ebaseOffset\u003c/code\u003e plus decoded value of sleb128 data.",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "the data type manager to associate with this data type."
        },
        {
          "name": "baseOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "base offset to which LEB128 offset data should be added"
        },
        {
          "name": "relocationOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "the actual relocation offset value assciated with this\n instance (used by #getValue(MemBuffer, Settings, int) and \n returned by #getRelocationOffset().  This value should equals \n baseOffset plus decoded value of sleb128 data."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clone",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMnemonic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultLabelPrefix",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBuiltInSettingsDefinitions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.docking.settings.SettingsDefinition[]",
        "type_short": "ghidra.docking.settings.SettingsDefinition[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValueClass",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Class\u003c?\u003e",
        "type_short": "Class",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getImageBaseAdjustment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepresentation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        },
        {
          "name": "settings",
          "type_long": "ghidra.docking.settings.Settings",
          "type_short": "Settings",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRelocationOffset",
      "comment": "Get the stashed relocation offset associated with this data item",
      "javadoc": "Get the stashed relocation offset associated with this data item\n@return the relocation offset associated with this data item",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the relocation offset associated with this data item"
      },
      "throws": []
    }
  ]
}
