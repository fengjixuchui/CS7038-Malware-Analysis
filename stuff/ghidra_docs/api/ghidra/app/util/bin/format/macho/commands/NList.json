{
  "name": "NList",
  "comment": "Represents an nlist and nlist_64 structure.",
  "javadoc": "Represents an nlist and nlist_64 structure.\n@see \u003ca href\u003d\"https://opensource.apple.com/source/xnu/xnu-4570.71.2/EXTERNAL_HEADERS/mach-o/nlist.h.auto.html\"\u003emach-o/nlist.h\u003c/a\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "n_strx",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "n_type",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "n_sect",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "n_desc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "n_value",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "string",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "is32bit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createNList",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "is32bit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.macho.commands.NList",
        "type_short": "NList",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initNList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "is32bit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "initString",
      "comment": "Initialize the string from the string table.\n \n You MUST call this method after the NLIST element is created!\n \n Reading a large NList table can cause a large performance issue if the strings\n are initialized as the NList entry is created.  The string table indexes are\n scattered.  Initializing the strings linearly from the string table is much\n faster.",
      "javadoc": "Initialize the string from the string table.\n \u003cp\u003e\n You MUST call this method after the NLIST element is created!\n \u003cp\u003e\n Reading a large NList table can cause a large performance issue if the strings\n are initialized as the NList entry is created.  The string table indexes are\n scattered.  Initializing the strings linearly from the string table is much\n faster.\n@param reader\n@param stringTableOffset offset of the string table",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "stringTableOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "offset of the string table"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getString",
      "comment": "Returns the symbol string defined at the symbol table command\n string table offset plus n_strx.",
      "javadoc": "Returns the symbol string defined at the symbol table command\n string table offset plus n_strx.\n@return the symbol string",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the symbol string"
      },
      "throws": []
    },
    {
      "name": "getStringTableIndex",
      "comment": "Returns the index into the string table.",
      "javadoc": "Returns the index into the string table.\n@return the index into the string table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index into the string table"
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "Returns the symbol type flag.",
      "javadoc": "Returns the symbol type flag.\n@return the symbol type flag",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the symbol type flag"
      },
      "throws": []
    },
    {
      "name": "isTypeUndefined",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isTypeAbsolute",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isTypePreboundUndefined",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isIndirect",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSymbolicDebugging",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPrivateExternal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isExternal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isLazyBind",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isThumbSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSection",
      "comment": "An integer specifying the number of the section that this\n symbol can be found in, or NO_SECT if\n symbol is not found in a section of this image.",
      "javadoc": "An integer specifying the number of the section that this\n symbol can be found in, or NO_SECT if\n symbol is not found in a section of this image.\n@return the number of the section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the number of the section"
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "A 16-bit value providing additional information about this symbol.",
      "javadoc": "A 16-bit value providing additional information about this symbol.\n@return a 16-bit value providing additional information about this symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "a 16-bit value providing additional information about this symbol"
      },
      "throws": []
    },
    {
      "name": "getValue",
      "comment": "An integer that contains the value of this symbol.\n The format of this value is different for each type of symbol.",
      "javadoc": "An integer that contains the value of this symbol.\n The format of this value is different for each type of symbol.\n@return the value of this symbol",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the value of this symbol"
      },
      "throws": []
    },
    {
      "name": "getLibraryOrdinal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
