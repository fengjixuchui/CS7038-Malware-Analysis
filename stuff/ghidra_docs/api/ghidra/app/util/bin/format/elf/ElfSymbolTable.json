{
  "name": "ElfSymbolTable",
  "comment": "A container class to hold ELF symbols.",
  "javadoc": "A container class to hold ELF symbols.",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.format.elf.ElfFileSection",
    "ghidra.app.util.bin.ByteArrayConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "stringTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfStringTable",
      "type_short": "ElfStringTable",
      "constant_value": null
    },
    {
      "name": "symbolTableSection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
      "type_short": "ElfSectionHeader",
      "constant_value": null
    },
    {
      "name": "fileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "addrOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "entrySize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "symbolCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "is32bit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isDynamic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "symbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol[]",
      "type_short": "ghidra.app.util.bin.format.elf.ElfSymbol[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createElfSymbolTable",
      "comment": "Create and parse an Elf symbol table",
      "javadoc": "Create and parse an Elf symbol table\n@param reader\n@param header elf header\n@param symbolTableSection string table section header or null if associated with a dynamic table entry\n@param fileOffset symbol table file offset\n@param addrOffset memory address of symbol table (should already be adjusted for prelink)\n@param length length of symbol table in bytes of -1 if unknown\n@param entrySize size of each symbol entry in bytes\n@param stringTable associated string table\n@param isDynamic true if symbol table is the dynamic symbol table\n@return Elf symbol table object\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": "elf header"
        },
        {
          "name": "symbolTableSection",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": "string table section header or null if associated with a dynamic table entry"
        },
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "symbol table file offset"
        },
        {
          "name": "addrOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "memory address of symbol table (should already be adjusted for prelink)"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "length of symbol table in bytes of -1 if unknown"
        },
        {
          "name": "entrySize",
          "type_long": "long",
          "type_short": "long",
          "comment": "size of each symbol entry in bytes"
        },
        {
          "name": "stringTable",
          "type_long": "ghidra.app.util.bin.format.elf.ElfStringTable",
          "type_short": "ElfStringTable",
          "comment": "associated string table"
        },
        {
          "name": "isDynamic",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if symbol table is the dynamic symbol table"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfSymbolTable",
        "type_short": "ElfSymbolTable",
        "comment": "Elf symbol table object"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initElfSymbolTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": ""
        },
        {
          "name": "symbolTableSection",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": ""
        },
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "addrOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "entrySize",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "stringTable",
          "type_long": "ghidra.app.util.bin.format.elf.ElfStringTable",
          "type_short": "ElfStringTable",
          "comment": ""
        },
        {
          "name": "isDynamic",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isDynamic",
      "comment": "Returns true if this is the dynamic symbol table",
      "javadoc": "Returns true if this is the dynamic symbol table\n@return true if this is the dynamic symbol table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is the dynamic symbol table"
      },
      "throws": []
    },
    {
      "name": "getStringTable",
      "comment": "Returns the associated string table section.",
      "javadoc": "Returns the associated string table section.\n@return the associated string table section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfStringTable",
        "type_short": "ElfStringTable",
        "comment": "the associated string table section"
      },
      "throws": []
    },
    {
      "name": "getSymbolCount",
      "comment": "",
      "javadoc": "@return number of symbols",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of symbols"
      },
      "throws": []
    },
    {
      "name": "getSymbols",
      "comment": "Returns all of the symbols defined in this symbol table.",
      "javadoc": "Returns all of the symbols defined in this symbol table.\n@return all of the symbols defined in this symbol table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol[]",
        "type_short": "ghidra.app.util.bin.format.elf.ElfSymbol[]",
        "comment": "all of the symbols defined in this symbol table"
      },
      "throws": []
    },
    {
      "name": "getSymbolIndex",
      "comment": "Returns the index of the specified symbol in this\n symbol table.",
      "javadoc": "Returns the index of the specified symbol in this\n symbol table.\n@param symbol the symbol\n@return the index of the specified symbol",
      "static": false,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": "the symbol"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the index of the specified symbol"
      },
      "throws": []
    },
    {
      "name": "getSymbolAt",
      "comment": "Returns the symbol at the specified address.",
      "javadoc": "Returns the symbol at the specified address.\n@param addr the symbol address\n@return the symbol at the specified address",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "long",
          "type_short": "long",
          "comment": "the symbol address"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
        "type_short": "ElfSymbol",
        "comment": "the symbol at the specified address"
      },
      "throws": []
    },
    {
      "name": "getGlobalSymbols",
      "comment": "Returns all of the global symbols.",
      "javadoc": "Returns all of the global symbols.\n@return all of the global symbols",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol[]",
        "type_short": "ghidra.app.util.bin.format.elf.ElfSymbol[]",
        "comment": "all of the global symbols"
      },
      "throws": []
    },
    {
      "name": "getSourceFiles",
      "comment": "Returns all of the sources file names.",
      "javadoc": "Returns all of the sources file names.\n@return all of the sources file names",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "all of the sources file names"
      },
      "throws": []
    },
    {
      "name": "addSymbol",
      "comment": "Adds the specified symbol into this symbol table.",
      "javadoc": "Adds the specified symbol into this symbol table.\n@param symbol the new symbol to add",
      "static": false,
      "params": [
        {
          "name": "symbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": "the new symbol to add"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toBytes",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.ByteArrayConverter#toBytes(ghidra.util.DataConverter)",
      "static": false,
      "params": [
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableSectionHeader",
      "comment": "Get the section header which corresponds to this table, or null\n if only associated with a dynamic table entry",
      "javadoc": "Get the section header which corresponds to this table, or null\n if only associated with a dynamic table entry\n@return symbol table section header or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
        "type_short": "ElfSectionHeader",
        "comment": "symbol table section header or null"
      },
      "throws": []
    },
    {
      "name": "getFileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEntrySize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    }
  ]
}
