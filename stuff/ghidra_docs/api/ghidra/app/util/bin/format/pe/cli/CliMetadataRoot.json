{
  "name": "CliMetadataRoot",
  "comment": "The header of a CliMetadataDirectory.",
  "javadoc": "The header of a {@link CliMetadataDirectory}.",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter",
    "ghidra.app.util.bin.format.pe.PeMarkupable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"CLI_METADATA_HEADER\""
    },
    {
      "name": "PATH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"/PE/CLI\""
    },
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.BinaryReader",
      "type_short": "BinaryReader",
      "constant_value": null
    },
    {
      "name": "fileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "rva",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "signature",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "majorVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "minorVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "reserved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "versionLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "version",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "flags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "streamsCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "streamHeaderMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,ghidra.app.util.bin.format.pe.cli.CliStreamHeader\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "metadataHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.CliStreamHeader",
      "type_short": "CliStreamHeader",
      "constant_value": null
    },
    {
      "name": "guidStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamGuid",
      "type_short": "CliStreamGuid",
      "constant_value": null
    },
    {
      "name": "userStringsStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamUserStrings",
      "type_short": "CliStreamUserStrings",
      "constant_value": null
    },
    {
      "name": "stringsStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamStrings",
      "type_short": "CliStreamStrings",
      "constant_value": null
    },
    {
      "name": "blobStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamBlob",
      "type_short": "CliStreamBlob",
      "constant_value": null
    },
    {
      "name": "metadataStream",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata",
      "type_short": "CliStreamMetadata",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new CLI Metadata Root datatype. Matches ISO 23271 II.24.2.",
      "javadoc": "Constructs a new CLI Metadata Root datatype. Matches ISO 23271 II.24.2.\n@param reader A binary reader set to start reading at the start of this header.\n@param rva The RVA of this header.\n@throws IOException if there is a problem reading the header.",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "A binary reader set to start reading at the start of this header."
        },
        {
          "name": "rva",
          "type_long": "int",
          "type_short": "int",
          "comment": "The RVA of this header."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem reading the header."
        }
      ]
    },
    {
      "name": "parse",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "markup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "isBinary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getFileOffset",
      "comment": "Gets the file offset of this header.",
      "javadoc": "Gets the file offset of this header.\n@return The file offset of this header.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The file offset of this header."
      },
      "throws": []
    },
    {
      "name": "getRva",
      "comment": "Gets the relative virtual address of this header.",
      "javadoc": "Gets the relative virtual address of this header.\n@return The relative virtual address of this header.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The relative virtual address of this header."
      },
      "throws": []
    },
    {
      "name": "getSignature",
      "comment": "Gets the signature.  \n \n Should always be 0x424a5342.",
      "javadoc": "Gets the signature.  \n \u003cp\u003e\n Should always be 0x424a5342.\n@return The signature.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The signature."
      },
      "throws": []
    },
    {
      "name": "getMajorVersion",
      "comment": "Gets the major version.",
      "javadoc": "Gets the major version.\n@return The major version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "The major version."
      },
      "throws": []
    },
    {
      "name": "getMinorVersion",
      "comment": "Gets the minor version.",
      "javadoc": "Gets the minor version.\n@return The minor version.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "The minor version."
      },
      "throws": []
    },
    {
      "name": "getReserved",
      "comment": "Gets the reserved field.  \n \n Should always be 0.",
      "javadoc": "Gets the reserved field.  \n \u003cp\u003e\n Should always be 0.\n@return The reserved field.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The reserved field."
      },
      "throws": []
    },
    {
      "name": "getVersionLength",
      "comment": "Gets the length of the version string that follows the length field.",
      "javadoc": "Gets the length of the version string that follows the length field.\n@return The length of the version string that follows the length field.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The length of the version string that follows the length field."
      },
      "throws": []
    },
    {
      "name": "getVersion",
      "comment": "Gets the version string.",
      "javadoc": "Gets the version string.\n@return The version string.  Could be null if the version length appeared\n   too long during parsing of the header.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The version string.  Could be null if the version length appeared\n   too long during parsing of the header."
      },
      "throws": []
    },
    {
      "name": "getFlags",
      "comment": "Gets the flags.\n \n Should always be 0.",
      "javadoc": "Gets the flags.\n \u003cp\u003e\n Should always be 0.\n@return The flags.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "The flags."
      },
      "throws": []
    },
    {
      "name": "getStreamsCount",
      "comment": "Gets the number of streams present in the metadata.",
      "javadoc": "Gets the number of streams present in the metadata.\n@return The number of streams present in the metadata.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "The number of streams present in the metadata."
      },
      "throws": []
    },
    {
      "name": "getGuidStream",
      "comment": "Gets the GUID stream.",
      "javadoc": "Gets the GUID stream.\n@return The GUID stream.  Could be null if it did not parse correctly.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamGuid",
        "type_short": "CliStreamGuid",
        "comment": "The GUID stream.  Could be null if it did not parse correctly."
      },
      "throws": []
    },
    {
      "name": "getUserStringsStream",
      "comment": "Gets the user strings stream.",
      "javadoc": "Gets the user strings stream.\n@return The user strings stream.  Could be null if it did not parse correctly.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamUserStrings",
        "type_short": "CliStreamUserStrings",
        "comment": "The user strings stream.  Could be null if it did not parse correctly."
      },
      "throws": []
    },
    {
      "name": "getStringsStream",
      "comment": "Gets the strings stream.",
      "javadoc": "Gets the strings stream.\n@return The strings stream.  Could be null if it did not parse correctly.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamStrings",
        "type_short": "CliStreamStrings",
        "comment": "The strings stream.  Could be null if it did not parse correctly."
      },
      "throws": []
    },
    {
      "name": "getBlobStream",
      "comment": "Gets the blob stream.",
      "javadoc": "Gets the blob stream.\n@return The blob stream.  Could be null if it did not parse correctly.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamBlob",
        "type_short": "CliStreamBlob",
        "comment": "The blob stream.  Could be null if it did not parse correctly."
      },
      "throws": []
    },
    {
      "name": "getMetadataStream",
      "comment": "Gets the Metadata stream.",
      "javadoc": "Gets the Metadata stream.\n@return The Metadata stream.  Could be null if it did not parse correctly.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata",
        "type_short": "CliStreamMetadata",
        "comment": "The Metadata stream.  Could be null if it did not parse correctly."
      },
      "throws": []
    },
    {
      "name": "getStreamHeaders",
      "comment": "Gets the stream headers.",
      "javadoc": "Gets the stream headers.\n@return A collection of stream headers.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.util.bin.format.pe.cli.CliStreamHeader\u003e",
        "type_short": "Collection",
        "comment": "A collection of stream headers."
      },
      "throws": []
    },
    {
      "name": "getStreamHeader",
      "comment": "Gets the stream header with the given name.",
      "javadoc": "Gets the stream header with the given name.\n@param name The name of the stream header to get.\n@return The stream header that matches the given name, or null if it wasn\u0027t found.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the stream header to get."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.CliStreamHeader",
        "type_short": "CliStreamHeader",
        "comment": "The stream header that matches the given name, or null if it wasn\u0027t found."
      },
      "throws": []
    },
    {
      "name": "getBlobOffsetAtIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
