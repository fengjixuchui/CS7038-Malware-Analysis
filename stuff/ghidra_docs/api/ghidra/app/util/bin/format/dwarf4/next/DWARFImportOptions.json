{
  "name": "DWARFImportOptions",
  "comment": "Import options exposed by the DWARFAnalyzer",
  "javadoc": "Import options exposed by the {@link DWARFAnalyzer}",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DEFAULT_IMPORT_LIMIT_DIE_COUNT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2000000"
    },
    {
      "name": "outputDWARFLocationInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "outputDWARFDIEInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "elideTypedefsWithSameName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "importDataTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "importFuncs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "importLimitDIECount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "nameLengthCutoff",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "preloadAllDIEs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "outputInlineFuncComments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "outputLexicalBlockComments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "copyRenameAnonTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "createFuncSignatures",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "organizeTypesBySourceFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOutputSourceLocationInfo",
      "comment": "Option to control tagging data types and functions with their source code\n location (ie. filename : line number ) if the information is present in the DWARF record.",
      "javadoc": "Option to control tagging data types and functions with their source code\n location (ie. filename : line number ) if the information is present in the DWARF record.\n@return boolean true if the DWARF importer should tag items with their source code location\n info.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the DWARF importer should tag items with their source code location\n info."
      },
      "throws": []
    },
    {
      "name": "setOutputSourceLocationInfo",
      "comment": "Option to control tagging data types and functions with their source code\n location (ie. filename : line number ) if the information is present in the DWARF record.",
      "javadoc": "Option to control tagging data types and functions with their source code\n location (ie. filename : line number ) if the information is present in the DWARF record.\n@param output_DWARF_location_info boolean to set",
      "static": false,
      "params": [
        {
          "name": "output_DWARF_location_info",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean to set"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOutputDIEInfo",
      "comment": "Option to control tagging data types and functions with their DWARF DIE\n record number.",
      "javadoc": "Option to control tagging data types and functions with their DWARF DIE\n record number.\n@return boolean true if the DWARF importer should tag items with their DIE record\n number.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the DWARF importer should tag items with their DIE record\n number."
      },
      "throws": []
    },
    {
      "name": "setOutputDIEInfo",
      "comment": "Option to control tagging data types and functions with their DWARF DIE\n record number.",
      "javadoc": "Option to control tagging data types and functions with their DWARF DIE\n record number.\n@param output_DWARF_die_info boolean to set",
      "static": false,
      "params": [
        {
          "name": "output_DWARF_die_info",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean to set"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isElideTypedefsWithSameName",
      "comment": "Option to control eliding typedef creation if the dest type has the same name.",
      "javadoc": "Option to control eliding typedef creation if the dest type has the same name.\n@return boolean true if the DWARF importer should skip creating a typedef if its\n dest has the same name.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the DWARF importer should skip creating a typedef if its\n dest has the same name."
      },
      "throws": []
    },
    {
      "name": "setElideTypedefsWithSameName",
      "comment": "Option to control eliding typedef creation if the dest type has the same name.",
      "javadoc": "Option to control eliding typedef creation if the dest type has the same name.\n@param elide_typedefs_with_same_name boolean to set",
      "static": false,
      "params": [
        {
          "name": "elide_typedefs_with_same_name",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean to set"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isImportDataTypes",
      "comment": "Option to turn on/off the import of data types.",
      "javadoc": "Option to turn on/off the import of data types.\n@return boolean true if import should import data types.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if import should import data types."
      },
      "throws": []
    },
    {
      "name": "setImportDataTypes",
      "comment": "Option to turn on/off the import of data types.",
      "javadoc": "Option to turn on/off the import of data types.\n@param importDataTypes boolean to set",
      "static": false,
      "params": [
        {
          "name": "importDataTypes",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean to set"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isImportFuncs",
      "comment": "Option to turn on/off the import of funcs.",
      "javadoc": "Option to turn on/off the import of funcs.\n@return boolean true if import should import funcs.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if import should import funcs."
      },
      "throws": []
    },
    {
      "name": "setImportFuncs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "output_Funcs",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getImportLimitDIECount",
      "comment": "Option to skip DWARF import if the DWARF record count is too large.",
      "javadoc": "Option to skip DWARF import if the DWARF record count is too large.\n@return integer count of the max number of DWARF records that will be attempted to import.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "integer count of the max number of DWARF records that will be attempted to import."
      },
      "throws": []
    },
    {
      "name": "setImportLimitDIECount",
      "comment": "Option to skip DWARF import if the DWARF record count is too large.",
      "javadoc": "Option to skip DWARF import if the DWARF record count is too large.\n@param import_limit_die_count integer record count",
      "static": false,
      "params": [
        {
          "name": "import_limit_die_count",
          "type_long": "int",
          "type_short": "int",
          "comment": "integer record count"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNameLengthCutoff",
      "comment": "Option to control how long DWARF symbol names are allowed to be before being truncated.",
      "javadoc": "Option to control how long DWARF symbol names are allowed to be before being truncated.\n@return integer max length of symbol names from DWARF.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "integer max length of symbol names from DWARF."
      },
      "throws": []
    },
    {
      "name": "setNameLengthCutoff",
      "comment": "Option to control how long DWARF symbol names are allowed to be before being truncated.",
      "javadoc": "Option to control how long DWARF symbol names are allowed to be before being truncated.\n@param name_length_cutoff integer max length.",
      "static": false,
      "params": [
        {
          "name": "name_length_cutoff",
          "type_long": "int",
          "type_short": "int",
          "comment": "integer max length."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isPreloadAllDIEs",
      "comment": "Option to cause the DWARF parser to load all DWARF records into memory, instead of\n processing one compile unit at a time.  Needed to handle binaries created by some\n toolchains.  The import pre-check will warn the user if this needs to be turned on.",
      "javadoc": "Option to cause the DWARF parser to load all DWARF records into memory, instead of\n processing one compile unit at a time.  Needed to handle binaries created by some\n toolchains.  The import pre-check will warn the user if this needs to be turned on.\n@return boolean flag",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean flag"
      },
      "throws": []
    },
    {
      "name": "setPreloadAllDIEs",
      "comment": "Option to cause the DWARF parser to load all DWARF records into memory, instead of\n processing one compile unit at a time.  Needed to handle binaries created by some\n toolchains.  The import pre-check will warn the user if this needs to be turned on.",
      "javadoc": "Option to cause the DWARF parser to load all DWARF records into memory, instead of\n processing one compile unit at a time.  Needed to handle binaries created by some\n toolchains.  The import pre-check will warn the user if this needs to be turned on.\n@param b boolean flag to set",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag to set"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOutputInlineFuncComments",
      "comment": "Option to control tagging inlined-functions with comments.",
      "javadoc": "Option to control tagging inlined-functions with comments.\n@return boolean flag.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean flag."
      },
      "throws": []
    },
    {
      "name": "setOutputInlineFuncComments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "output_InlineFunc_comments",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOutputLexicalBlockComments",
      "comment": "Option to control tagging lexical blocks with Ghidra comments.",
      "javadoc": "Option to control tagging lexical blocks with Ghidra comments.\n@return boolean flag.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean flag."
      },
      "throws": []
    },
    {
      "name": "setOutputLexicalBlockComments",
      "comment": "Option to control tagging lexical blocks with Ghidra comments.",
      "javadoc": "Option to control tagging lexical blocks with Ghidra comments.\n@param output_LexicalBlock_comments boolean flag to set.",
      "static": false,
      "params": [
        {
          "name": "output_LexicalBlock_comments",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag to set."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCopyRenameAnonTypes",
      "comment": "Option to control a feature that copies anonymous types into a structure\u0027s \"namespace\"\n CategoryPath and giving that anonymous type a new name based on the structure\u0027s field\u0027s\n name.",
      "javadoc": "Option to control a feature that copies anonymous types into a structure\u0027s \"namespace\"\n CategoryPath and giving that anonymous type a new name based on the structure\u0027s field\u0027s\n name.\n@return boolean flag.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean flag."
      },
      "throws": []
    },
    {
      "name": "setCopyRenameAnonTypes",
      "comment": "Option to control a feature that copies anonymous types into a structure\u0027s \"namespace\"\n CategoryPath and giving that anonymous type a new name based on the structure\u0027s field\u0027s\n name.",
      "javadoc": "Option to control a feature that copies anonymous types into a structure\u0027s \"namespace\"\n CategoryPath and giving that anonymous type a new name based on the structure\u0027s field\u0027s\n name.\n@param b boolean flag to set.",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag to set."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCreateFuncSignatures",
      "comment": "Option to control creating FunctionSignature datatypes for each function defintion\n found in the DWARF debug data.",
      "javadoc": "Option to control creating FunctionSignature datatypes for each function defintion\n found in the DWARF debug data.\n@return boolean flag.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean flag."
      },
      "throws": []
    },
    {
      "name": "setCreateFuncSignatures",
      "comment": "Option to control creating FunctionSignature datatypes for each function defintion\n found in the DWARF debug data.",
      "javadoc": "Option to control creating FunctionSignature datatypes for each function defintion\n found in the DWARF debug data.\n@param createFuncSignatures boolean flag to set.",
      "static": false,
      "params": [
        {
          "name": "createFuncSignatures",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag to set."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isOrganizeTypesBySourceFile",
      "comment": "Option to organize imported datatypes into sub-folders based on their source file name.",
      "javadoc": "Option to organize imported datatypes into sub-folders based on their source file name.\n@return boolean flag",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean flag"
      },
      "throws": []
    },
    {
      "name": "setOrganizeTypesBySourceFile",
      "comment": "Option to organize imported datatypes into sub-folders based on their source file name.",
      "javadoc": "Option to organize imported datatypes into sub-folders based on their source file name.\n@param organizeTypesBySourceFile boolean flag to set.",
      "static": false,
      "params": [
        {
          "name": "organizeTypesBySourceFile",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "boolean flag to set."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
