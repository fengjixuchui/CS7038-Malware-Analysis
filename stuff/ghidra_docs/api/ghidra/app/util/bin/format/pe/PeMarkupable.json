{
  "name": "PeMarkupable",
  "comment": "Common interface for standardizing the markup of a PE structure.",
  "javadoc": "Common interface for standardizing the markup of a PE structure.",
  "static": false,
  "implements": [],
  "fields": [],
  "methods": [
    {
      "name": "markup",
      "comment": "Marks up a PE structure.",
      "javadoc": "Marks up a PE structure.\n@param program The program to markup.\n@param isBinary True if the program is binary; otherwise, false.\n@param monitor The monitor.\n@param log The log.\n@param ntHeader The PE\u0027s NT Header structure.\n@throws DuplicateNameException\n@throws CodeUnitInsertionException\n@throws IOException\n@throws MemoryAccessException",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program to markup."
        },
        {
          "name": "isBinary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if the program is binary; otherwise, false."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "The monitor."
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The log."
        },
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": "The PE\u0027s NT Header structure."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    }
  ]
}
