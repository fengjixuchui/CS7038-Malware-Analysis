{
  "name": "BoundImportDescriptor",
  "comment": "A class to represent the \n IMAGE_BOUND_IMPORT_DESCRIPTOR\n data structure defined in winnt.h.\n \n \n typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {\n     DWORD   TimeDateStamp;\n     WORD    OffsetModuleName;\n     WORD    NumberOfModuleForwarderRefs;\n     // Array of zero or more IMAGE_BOUND_FORWARDER_REF follows\n } IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;\n ",
  "javadoc": "A class to represent the \n \u003ccode\u003eIMAGE_BOUND_IMPORT_DESCRIPTOR\u003c/code\u003e\n data structure defined in \u003cb\u003e\u003ccode\u003ewinnt.h\u003c/code\u003e\u003c/b\u003e.\n \u003cp\u003e\n \u003cpre\u003e\n typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {\n     DWORD   TimeDateStamp;\n     WORD    OffsetModuleName;\n     WORD    NumberOfModuleForwarderRefs;\n     // Array of zero or more IMAGE_BOUND_FORWARDER_REF follows\n } IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;\n \u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter",
    "ghidra.app.util.bin.ByteArrayConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NAME",
      "comment": "The name to use when converting into a structure data type.",
      "javadoc": "The name to use when converting into a structure data type.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"IMAGE_BOUND_IMPORT_DESCRIPTOR\""
    },
    {
      "name": "IMAGE_SIZEOF_BOUND_IMPORT_DESCRIPTOR",
      "comment": "The size of the IMAGE_BOUND_IMPORT_DESCRIPTOR in bytes.",
      "javadoc": "The size of the \u003ccode\u003eIMAGE_BOUND_IMPORT_DESCRIPTOR\u003c/code\u003e in bytes.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "moduleName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "timeDateStamp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "offsetModuleName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "numberOfModuleForwarderRefs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "forwarders",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.pe.BoundImportForwarderRef\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createBoundImportDescriptor",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "readerIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "biddIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.BoundImportDescriptor",
        "type_short": "BoundImportDescriptor",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initBoundImportDescriptor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "readerIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "biddIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "timeDateStamp",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTimeDateStamp",
      "comment": "Returns the time/data stamp of the imported DLL.",
      "javadoc": "Returns the time/data stamp of the imported DLL.\n@return the time/data stamp of the imported DLL",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the time/data stamp of the imported DLL"
      },
      "throws": []
    },
    {
      "name": "getOffsetModuleName",
      "comment": "Returns an offset to a string with the name of the imported DLL.",
      "javadoc": "Returns an offset to a string with the name of the imported DLL.\n@return an offset to a string with the name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "an offset to a string with the name"
      },
      "throws": []
    },
    {
      "name": "setOffsetModuleName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "short",
          "type_short": "short",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumberOfModuleForwarderRefs",
      "comment": "Returns the number of IMAGE_BOUND_FORWARDER_REF \n structures that immediately follow this structure.",
      "javadoc": "Returns the number of IMAGE_BOUND_FORWARDER_REF \n structures that immediately follow this structure.\n@return the number of IMAGE_BOUND_FORWARDER_REF structures that immediately follow this structure",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of IMAGE_BOUND_FORWARDER_REF structures that immediately follow this structure"
      },
      "throws": []
    },
    {
      "name": "getModuleName",
      "comment": "Returns the module name of the imported DLL.",
      "javadoc": "Returns the module name of the imported DLL.\n@return the module name of the imported DLL",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the module name of the imported DLL"
      },
      "throws": []
    },
    {
      "name": "getBoundImportForwarderRef",
      "comment": "Returns the forwarder ref at the specified index",
      "javadoc": "Returns the forwarder ref at the specified index\n@param index the index of the forwarder ref\n@return the forwarder ref at the specified index",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "the index of the forwarder ref"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.BoundImportForwarderRef",
        "type_short": "BoundImportForwarderRef",
        "comment": "the forwarder ref at the specified index"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "@see java.lang.Object#toString()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.StructConverter#toDataType()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toBytes",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.ByteArrayConverter#toBytes(ghidra.util.DataConverter)",
      "static": false,
      "params": [
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    }
  ]
}
