{
  "name": "XCoffOptionalHeader",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "char",
      "type_short": "char",
      "constant_value": "\n"
    },
    {
      "name": "AOUTHDRSZ",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "72"
    },
    {
      "name": "o_magic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "o_vstamp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "o_tsize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "o_dsize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "o_bsize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "o_entry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "o_text_start",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "o_data_start",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "o_toc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "o_snentry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "o_sntext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "o_sndata",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "o_sntoc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "o_snloader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "o_snbss",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "o_algntext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "o_algndata",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "o_modtype",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "o_cpuflag",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "o_cputype",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "o_maxstack",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "o_maxdata",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "o_debugger",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "o_flags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "o_sntdata",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "o_sntbss",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.xcoff.XCoffFileHeader",
          "type_short": "XCoffFileHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMagic",
      "comment": "Returns the magic value. The binder assigns the following value: 0x010b.",
      "javadoc": "Returns the magic value. The binder assigns the following value: 0x010b.\n@return the magic value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the magic value"
      },
      "throws": []
    },
    {
      "name": "getVersionStamp",
      "comment": "Returns the format version for this auxiliary header.\n The only valid value is 1.",
      "javadoc": "Returns the format version for this auxiliary header.\n The only valid value is 1.\n@return the format version for this auxiliary header",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the format version for this auxiliary header"
      },
      "throws": []
    },
    {
      "name": "getTextSize",
      "comment": "Returns the size (in bytes) of the raw data for the .text section.",
      "javadoc": "Returns the size (in bytes) of the raw data for the .text section.\n@return the size (in bytes) of the raw data for the .text section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the size (in bytes) of the raw data for the .text section"
      },
      "throws": []
    },
    {
      "name": "getInitializedDataSize",
      "comment": "Returns the size (in bytes) of the raw data for the .data section.",
      "javadoc": "Returns the size (in bytes) of the raw data for the .data section.\n@return the size (in bytes) of the raw data for the .data section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the size (in bytes) of the raw data for the .data section"
      },
      "throws": []
    },
    {
      "name": "getUninitializedDataSize",
      "comment": "Returns the size (in bytes) of the .bss section.\n No raw data exists in the file for the .bss section.",
      "javadoc": "Returns the size (in bytes) of the .bss section.\n No raw data exists in the file for the .bss section.\n@return the size (in bytes) of the .bss section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the size (in bytes) of the .bss section"
      },
      "throws": []
    },
    {
      "name": "getEntry",
      "comment": "Returns the virtual address of the entry point.",
      "javadoc": "Returns the virtual address of the entry point.\n@return the virtual address of the entry point",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the virtual address of the entry point"
      },
      "throws": []
    },
    {
      "name": "getTextStart",
      "comment": "Returns the virtual address of the .text section.",
      "javadoc": "Returns the virtual address of the .text section.\n@return the virtual address of the .text section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the virtual address of the .text section"
      },
      "throws": []
    },
    {
      "name": "getDataStart",
      "comment": "Returns the virtual address of the .data section.",
      "javadoc": "Returns the virtual address of the .data section.\n@return the virtual address of the .data section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the virtual address of the .data section"
      },
      "throws": []
    },
    {
      "name": "getTOC",
      "comment": "Returns the virtual address of the TOC anchor.",
      "javadoc": "Returns the virtual address of the TOC anchor.\n@return the virtual address of the TOC anchor",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the virtual address of the TOC anchor"
      },
      "throws": []
    },
    {
      "name": "getSectionNumberForEntry",
      "comment": "Returns the number of the section that contains the entry point.\n The entry point must be in the .text or .data section.",
      "javadoc": "Returns the number of the section that contains the entry point.\n The entry point must be in the .text or .data section.\n@return the number of the section that contains the entry point",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of the section that contains the entry point"
      },
      "throws": []
    },
    {
      "name": "getSectionNumberForText",
      "comment": "Returns the number of the .text section.",
      "javadoc": "Returns the number of the .text section.\n@return the number of the .text section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of the .text section"
      },
      "throws": []
    },
    {
      "name": "getSectionNumberForData",
      "comment": "Returns the number of the .data section.",
      "javadoc": "Returns the number of the .data section.\n@return the number of the .data section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of the .data section"
      },
      "throws": []
    },
    {
      "name": "getSectionNumberForTOC",
      "comment": "Returns the number of the section that contains the TOC.",
      "javadoc": "Returns the number of the section that contains the TOC.\n@return the number of the section that contains the TOC",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of the section that contains the TOC"
      },
      "throws": []
    },
    {
      "name": "getSectionNumberForLoader",
      "comment": "Returns the number of the section that contains the system loader information.",
      "javadoc": "Returns the number of the section that contains the system loader information.\n@return the number of the section that contains the system loader information",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of the section that contains the system loader information"
      },
      "throws": []
    },
    {
      "name": "getSectionNumberForBss",
      "comment": "Returns the number of the .bss section.",
      "javadoc": "Returns the number of the .bss section.\n@return the number of the .bss section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of the .bss section"
      },
      "throws": []
    },
    {
      "name": "getMaxAlignmentForText",
      "comment": "Returns log (base-2) of the maximum alignment needed for \n any csect in the .text section.",
      "javadoc": "Returns log (base-2) of the maximum alignment needed for \n any csect in the .text section.\n@return the maximum alignment for the .text section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the maximum alignment for the .text section"
      },
      "throws": []
    },
    {
      "name": "getMaxAlignmentForData",
      "comment": "Returns log (base-2) of the maximum alignment needed for \n any csect in the .data or .bss section.",
      "javadoc": "Returns log (base-2) of the maximum alignment needed for \n any csect in the .data or .bss section.\n@return the maximum alignment for the .data or .bss section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the maximum alignment for the .data or .bss section"
      },
      "throws": []
    },
    {
      "name": "getModuleType",
      "comment": "Returns the module type.\n Valid module types:\n \t\tRO - Specifies a read-only module.",
      "javadoc": "Returns the module type.\n Valid module types:\n \t\tRO - Specifies a read-only module.\n@return the module type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the module type"
      },
      "throws": []
    },
    {
      "name": "getCpuFlag",
      "comment": "Returns the CPU bit flags.",
      "javadoc": "Returns the CPU bit flags.\n@return the CPU bit flags",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the CPU bit flags"
      },
      "throws": []
    },
    {
      "name": "getCpuType",
      "comment": "Reserved. Always returns 0.",
      "javadoc": "Reserved. Always returns 0.\n@return always returns 0",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "always returns 0"
      },
      "throws": []
    },
    {
      "name": "getMaxStackSize",
      "comment": "Returns the maximum stack size allowed for this executable.\n If the value is 0, then the default value is used.",
      "javadoc": "Returns the maximum stack size allowed for this executable.\n If the value is 0, then the default value is used.\n@return the maximum stack size allow for this executable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the maximum stack size allow for this executable"
      },
      "throws": []
    },
    {
      "name": "getMaxDataSize",
      "comment": "Returns the maximum data size allowed for this executable.\n If the value is 0, then the default value is used.",
      "javadoc": "Returns the maximum data size allowed for this executable.\n If the value is 0, then the default value is used.\n@return the maximum data size allow for this executable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the maximum data size allow for this executable"
      },
      "throws": []
    },
    {
      "name": "getDebugger",
      "comment": "This field should be 0. When the loaded program\n is being debugged, the memory image of this field\n may be modified by the debugger to insert\n a trap instruction.",
      "javadoc": "This field should be 0. When the loaded program\n is being debugged, the memory image of this field\n may be modified by the debugger to insert\n a trap instruction.\n@return should return 0",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "should return 0"
      },
      "throws": []
    },
    {
      "name": "getFlags",
      "comment": "This field consists of 4 1-bit flags and a 4-bit .tdata alignment.",
      "javadoc": "This field consists of 4 1-bit flags and a 4-bit .tdata alignment.\n@return the flags",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the flags"
      },
      "throws": []
    },
    {
      "name": "getSectionNumberForTData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSectionNumberForTBss",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
