{
  "name": "StringTable",
  "comment": "A offset-to-String string table backed by a simple byte array (encoded as UTF-8).\n \n Requested strings are instantiated when requested.",
  "javadoc": "A offset-to-String string table backed by a simple byte array (encoded as UTF-8).\n \u003cp\u003e\n Requested strings are instantiated when requested.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "bytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "readStringTable",
      "comment": "Create a StringTable by reading the entire contents of a ByteProvider\n into memory.\n \n If the specified ByteProvider is null, an empty string table will be constructed.\n ",
      "javadoc": "Create a {@link StringTable} by reading the entire contents of a {@link ByteProvider}\n into memory.\n \u003cp\u003e\n If the specified {@link ByteProvider} is null, an empty string table will be constructed.\n \u003cp\u003e\n@param bp\n@return \n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "bp",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.StringTable",
        "type_short": "StringTable",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a StringTable using the bytes contained in the supplied array.",
      "javadoc": "Creates a StringTable using the bytes contained in the supplied array.",
      "static": false,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValid",
      "comment": "Returns true if the specified offset is a valid offset for this string table.\n ",
      "javadoc": "Returns true if the specified offset is a valid offset for this string table.\n \u003cp\u003e\n@param offset\n@return ",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clear",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStringAtOffset",
      "comment": "Returns the string found at offset, or throws an IOException\n if the offset is out of bounds.",
      "javadoc": "Returns the string found at \u003ccode\u003eoffset\u003c/code\u003e, or throws an {@link IOException}\n if the offset is out of bounds.\n@param offset\n@return a string, never null.\n@throws IOException if not found",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a string, never null."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if not found"
        }
      ]
    },
    {
      "name": "getNullTermStringLen",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "startOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getByteCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "Modifies the string table to add a string at a specified offset, growing the\n internal byte[] storage as necessary to accommodate the string at the offset.\n \n Used for unit tests to construct a custom string table for test cases.\n ",
      "javadoc": "Modifies the string table to add a string at a specified offset, growing the\n internal byte[] storage as necessary to accommodate the string at the offset.\n \u003cp\u003e\n Used for unit tests to construct a custom string table for test cases.\n \u003cp\u003e\n@param offset where to place the string in the table\n@param s string to insert into table",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "where to place the string in the table"
        },
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string to insert into table"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
