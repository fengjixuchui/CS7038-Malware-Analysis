{
  "name": "DWARFCompileUnit",
  "comment": "DWARFCompileUnit hold some values retrieved from a DWARF DW_TAG_compile_unit DIE.\n ",
  "javadoc": "DWARFCompileUnit hold some values retrieved from a DWARF DW_TAG_compile_unit DIE.\n \u003cp\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "producer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "comp_dir",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "high_pc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Number",
      "type_short": "Number",
      "constant_value": null
    },
    {
      "name": "low_pc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Number",
      "type_short": "Number",
      "constant_value": null
    },
    {
      "name": "language",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Number",
      "type_short": "Number",
      "constant_value": null
    },
    {
      "name": "identifier_case",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.dwarf4.encoding.DWARFIdentifierCase",
      "type_short": "DWARFIdentifierCase",
      "constant_value": null
    },
    {
      "name": "hasDWO",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "line",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.dwarf4.DWARFLine",
      "type_short": "DWARFLine",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "read",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.DWARFCompileUnit",
        "type_short": "DWARFCompileUnit",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.DWARFException",
          "type_short": "DWARFException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "producer",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "comp_dir",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "low_pc",
          "type_long": "java.lang.Number",
          "type_short": "Number",
          "comment": ""
        },
        {
          "name": "high_pc",
          "type_long": "java.lang.Number",
          "type_short": "Number",
          "comment": ""
        },
        {
          "name": "language",
          "type_long": "java.lang.Number",
          "type_short": "Number",
          "comment": ""
        },
        {
          "name": "identifier_case",
          "type_long": "ghidra.app.util.bin.format.dwarf4.encoding.DWARFIdentifierCase",
          "type_short": "DWARFIdentifierCase",
          "comment": ""
        },
        {
          "name": "hasDWO",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "line",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DWARFLine",
          "type_short": "DWARFLine",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Get the name of the compile unit",
      "javadoc": "Get the name of the compile unit\n@return the name of the compile unit",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the compile unit"
      },
      "throws": []
    },
    {
      "name": "getFileName",
      "comment": "Get the filename of the compile unit",
      "javadoc": "Get the filename of the compile unit\n@return the filename of the compile unit",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the filename of the compile unit"
      },
      "throws": []
    },
    {
      "name": "getFullFileByIndex",
      "comment": "Get a file name with the full path included based on a file index.",
      "javadoc": "Get a file name with the full path included based on a file index.\n@param index index of the file\n@return file name with full path or null if line information does not exist\n@throws IllegalArgumentException if a negative or invalid file index is given",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of the file"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "file name with full path or null if line information does not exist"
      },
      "throws": []
    },
    {
      "name": "getFileByIndex",
      "comment": "Get a file name based on a file index.",
      "javadoc": "Get a file name based on a file index.\n@param index index of the file\n@return file name or null if line information does not exist\n@throws IllegalArgumentException if a negative or invalid file index is given",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "index of the file"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "file name or null if line information does not exist"
      },
      "throws": []
    },
    {
      "name": "getProducer",
      "comment": "Get the producer of the compile unit",
      "javadoc": "Get the producer of the compile unit\n@return the producer of the compile unit",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the producer of the compile unit"
      },
      "throws": []
    },
    {
      "name": "getCompileDirectory",
      "comment": "Get the compile directory of the compile unit",
      "javadoc": "Get the compile directory of the compile unit\n@return the compile directory of the compile unit",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the compile directory of the compile unit"
      },
      "throws": []
    },
    {
      "name": "getHighPC",
      "comment": "Get the high PC value of the compile unit",
      "javadoc": "Get the high PC value of the compile unit\n@return the high PC value of the compile unit",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Number",
        "type_short": "Number",
        "comment": "the high PC value of the compile unit"
      },
      "throws": []
    },
    {
      "name": "getLowPC",
      "comment": "Get the low PC value of the compile unit",
      "javadoc": "Get the low PC value of the compile unit\n@return the low PC value of the compile unit",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Number",
        "type_short": "Number",
        "comment": "the low PC value of the compile unit"
      },
      "throws": []
    },
    {
      "name": "getLanguage",
      "comment": "Get the source language of the compile unit.\n \n See DWARFSourceLanguage for values.",
      "javadoc": "Get the source language of the compile unit.\n \u003cp\u003e\n See {@link DWARFSourceLanguage} for values.\n@return the source language of the compile unit",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the source language of the compile unit"
      },
      "throws": []
    },
    {
      "name": "getIdentifierCase",
      "comment": "Get the identifier case of the compile unit",
      "javadoc": "Get the identifier case of the compile unit\n@return the identifier case of the compile unit",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.encoding.DWARFIdentifierCase",
        "type_short": "DWARFIdentifierCase",
        "comment": "the identifier case of the compile unit"
      },
      "throws": []
    },
    {
      "name": "hasDWO",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
