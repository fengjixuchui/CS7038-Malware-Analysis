{
  "name": "EntryTableBundle",
  "comment": "A class to represent a new-executable entry table bundle.",
  "javadoc": "A class to represent a new-executable entry table bundle.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "UNUSED",
      "comment": "Marker denoting an unused entry table bundle.",
      "javadoc": "Marker denoting an unused entry table bundle.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "0"
    },
    {
      "name": "MOVEABLE",
      "comment": "Segment is moveable.",
      "javadoc": "Segment is moveable.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "-1"
    },
    {
      "name": "CONSTANT",
      "comment": "Refers to a constant defined in module.",
      "javadoc": "Refers to a constant defined in module.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "-2"
    },
    {
      "name": "count",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "type",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "entryPoints",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.ne.EntryPoint[]",
      "type_short": "ghidra.app.util.bin.format.ne.EntryPoint[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new entry table bundle.",
      "javadoc": "Constructs a new entry table bundle.\n@param reader the binary reader",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": "the binary reader"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isMoveable",
      "comment": "Returns true if this bundle is moveable.",
      "javadoc": "Returns true if this bundle is moveable.\n@return true if this bundle is moveable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this bundle is moveable"
      },
      "throws": []
    },
    {
      "name": "isConstant",
      "comment": "Returns true if this bundle is constant.",
      "javadoc": "Returns true if this bundle is constant.\n@return true if this bundle is constant",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this bundle is constant"
      },
      "throws": []
    },
    {
      "name": "getCount",
      "comment": "Returns the number of entries in bundle.",
      "javadoc": "Returns the number of entries in bundle.\n@return the number of entries in bundle",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the number of entries in bundle"
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "Returns the type of the bundle. For example,\n MOVEABLE, CONSTANT, or segment index.",
      "javadoc": "Returns the type of the bundle. For example,\n MOVEABLE, CONSTANT, or segment index.\n@return the type of the bundle",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the type of the bundle"
      },
      "throws": []
    },
    {
      "name": "getEntryPoints",
      "comment": "Returns the array of entry points in this bundle.",
      "javadoc": "Returns the array of entry points in this bundle.\n@return the array of entry points in this bundle",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.ne.EntryPoint[]",
        "type_short": "ghidra.app.util.bin.format.ne.EntryPoint[]",
        "comment": "the array of entry points in this bundle"
      },
      "throws": []
    }
  ]
}
