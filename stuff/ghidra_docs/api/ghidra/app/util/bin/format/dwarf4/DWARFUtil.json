{
  "name": "DWARFUtil",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "MANGLED_NESTING_REGEX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.regex.Pattern",
      "type_short": "Pattern",
      "constant_value": null
    },
    {
      "name": "OPERATOR_LT_STR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"operator\u003c\""
    },
    {
      "name": "OPERATOR_LSHIFT_STR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"operator\u003c\u003c\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Converts a integer value to its corresponding symbolic name from the set of\n \"public static final\" member variables in a class.\n \n This is a bit of a hack and probably originated from pre-java Enum days.",
      "javadoc": "Converts a integer value to its corresponding symbolic name from the set of\n \"public static final\" member variables in a class.\n \u003cp\u003e\n This is a bit of a hack and probably originated from pre-java Enum days.\n@param clazz The {@link Class} to search for the matching static value.\n@param value the integer value to search for\n@return the String name of the matching field.",
      "static": true,
      "params": [
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "The Class to search for the matching static value."
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the integer value to search for"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the String name of the matching field."
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Returns the field name of a final static variable in class clazz\n which holds a specific value.\n \n Can be thought of as an enum numeric value to to name lookup.\n ",
      "javadoc": "Returns the field name of a final static variable in class \u003ccode\u003eclazz\u003c/code\u003e\n which holds a specific value.\n \u003cp\u003e\n Can be thought of as an enum numeric value to to name lookup.\n \u003cp\u003e\n@param clazz\n@param value\n@return ",
      "static": true,
      "params": [
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStaticFinalFieldWithValue",
      "comment": "Searches a Class for a final static variable that has a specific numeric value.",
      "javadoc": "Searches a Class for a final static variable that has a specific numeric value.\n@param clazz Class to search.\n@param value numeric value to search for\n@return Java reflection {@link Field} that has the specified value or null",
      "static": true,
      "params": [
        {
          "name": "clazz",
          "type_long": "java.lang.Class\u003c?\u003e",
          "type_short": "Class",
          "comment": "Class to search."
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": "numeric value to search for"
        }
      ],
      "return": {
        "type_long": "java.lang.reflect.Field",
        "type_short": "Field",
        "comment": "Java reflection Field that has the specified value or null"
      },
      "throws": []
    },
    {
      "name": "getContainerTypeName",
      "comment": "Returns a string that describes what kind of object is specified by the DIEAggregate.\n \n Used to create a name for anonymous types.",
      "javadoc": "Returns a string that describes what kind of object is specified by the {@link DIEAggregate}.\n \u003cp\u003e\n Used to create a name for anonymous types.\n@param diea {@link DIEAggregate}\n@return String describing the type of the DIEA.",
      "static": true,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": "DIEAggregate"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "String describing the type of the DIEA."
      },
      "throws": []
    },
    {
      "name": "getSymbolTypeFromDIE",
      "comment": "Returns the SymbolType that corresponds to the specified DIEAggregate.\n \n The mapping between DIE type and SymbolType is not exact.  There is no matching\n SymbolType for a DWARF static variable, so \"LOCAL_VAR\" is used currently.\n \n This mainly is used in constructing a NamespacePath, and the only critical usage\n there is Namespace vs. Class vs. everything else.",
      "javadoc": "Returns the {@link SymbolType} that corresponds to the specified {@link DIEAggregate}.\n \u003cp\u003e\n The mapping between DIE type and SymbolType is not exact.  There is no matching\n SymbolType for a DWARF static variable, so \"LOCAL_VAR\" is used currently.\n \u003cp\u003e\n This mainly is used in constructing a NamespacePath, and the only critical usage\n there is Namespace vs. Class vs. everything else.\n@param diea {@link DIEAggregate} to query\n@return {@link SymbolType}",
      "static": true,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": "DIEAggregate to query"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.SymbolType",
        "type_short": "SymbolType",
        "comment": "SymbolType"
      },
      "throws": []
    },
    {
      "name": "parseMangledNestings",
      "comment": "A lightweight attempt to get nesting (ie. namespaces and such) information\n from gnu mangled name strings.\n \n For example, \"_ZN19class1_inline_funcs3fooEv\" -\n [19 chars]\u0027class1_inline_funcs\u0027, [3 chars]\u0027foo\u0027\n ",
      "javadoc": "A lightweight attempt to get nesting (ie. namespaces and such) information\n from gnu mangled name strings.\n \u003cp\u003e\n For example, \"_ZN19class1_inline_funcs3fooEv\" -\u0026gt;\n [19 chars]\u0027class1_inline_funcs\u0027, [3 chars]\u0027foo\u0027\n \u003cp\u003e\n@param s\n@return ",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findLinkageNameInChildren",
      "comment": "Try to find gnu mangled name nesting info in a DIE\u0027s children\u0027s linkage strings.\n ",
      "javadoc": "Try to find gnu mangled name nesting info in a DIE\u0027s children\u0027s linkage strings.\n \u003cp\u003e\n@param die\n@return a list of string of nesting names, ending with what should be the DIE parameter\u0027s\n name.",
      "static": true,
      "params": [
        {
          "name": "die",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DebugInfoEntry",
          "type_short": "DebugInfoEntry",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "a list of string of nesting names, ending with what should be the DIE parameter\u0027s\n name."
      },
      "throws": []
    },
    {
      "name": "getTemplateBaseName",
      "comment": "Determines if a name is a C++ style templated name.  If so, returns just\n the base portion of the name.\n The name must have a start and end angle bracket: \u0027\u0027 and \u0027\u0027.\n \n operator() and operator() are handled so their angle brackets\n don\u0027t trigger the template start/end angle bracket incorrectly.\n ",
      "javadoc": "Determines if a name is a C++ style templated name.  If so, returns just\n the base portion of the name.\n The name must have a start and end angle bracket: \u0027\u0026lt;\u0027 and \u0027\u0026gt;\u0027.\n \u003cp\u003e\n operator\u0026lt;() and operator\u0026lt;\u0026lt;() are handled so their angle brackets\n don\u0027t trigger the template start/end angle bracket incorrectly.\n \u003cp\u003e\n@param name symbol name with C++ template portions\n@return base portion of the symbol name without template portion",
      "static": true,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "symbol name with C++ template portions"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "base portion of the symbol name without template portion"
      },
      "throws": []
    },
    {
      "name": "getAnonNameForMeFromParentContext",
      "comment": "Creates a name for anon types based on their position in their parent\u0027s childList.\n ",
      "javadoc": "Creates a name for anon types based on their position in their parent\u0027s childList.\n \u003cp\u003e\n@param diea the die aggregate.\n@return the anonymous name of the die aggregate.",
      "static": true,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": "the die aggregate."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the anonymous name of the die aggregate."
      },
      "throws": []
    },
    {
      "name": "getAnonNameForMeFromParentContext2",
      "comment": "Creates a name for anon types based on the names of sibling entries that are using the anon type.\n \n Example: \"anon_struct_for_field1_field2\"\n \n Falls back to #getAnonNameForMeFromParentContext(DIEAggregate) if no siblings found.",
      "javadoc": "Creates a name for anon types based on the names of sibling entries that are using the anon type.\n \u003cp\u003e\n Example: \"anon_struct_for_field1_field2\"\n \u003cp\u003e\n Falls back to {@link #getAnonNameForMeFromParentContext(DIEAggregate)} if no siblings found.\n@param diea the die aggregate.\n@return the anonymous name of the die aggregate.",
      "static": true,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": "the die aggregate."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the anonymous name of the die aggregate."
      },
      "throws": []
    },
    {
      "name": "getLexicalBlockName",
      "comment": "Create a name for a lexical block, with \"_\" separated numbers indicating nesting\n information of the lexical block.",
      "javadoc": "Create a name for a lexical block, with \"_\" separated numbers indicating nesting\n information of the lexical block.\n@param diea {@link DIEAggregate} pointing to a lexical block entry.\n@return string, ie. \"lexical_block_1_2_3\"",
      "static": true,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": "DIEAggregate pointing to a lexical block entry."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "string, ie. \"lexical_block_1_2_3\""
      },
      "throws": []
    },
    {
      "name": "getLexicalBlockNameWorker",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "die",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DebugInfoEntry",
          "type_short": "DebugInfoEntry",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMyPositionInParent",
      "comment": "Returns the ordinal position of this DebugInfoEntry in it\u0027s parent.",
      "javadoc": "Returns the ordinal position of this {@link DebugInfoEntry} in it\u0027s parent.\n@param die {@link DebugInfoEntry}\n@return int index of ourself in our parent, or -1 if not found in parent.",
      "static": true,
      "params": [
        {
          "name": "die",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DebugInfoEntry",
          "type_short": "DebugInfoEntry",
          "comment": "DebugInfoEntry"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int index of ourself in our parent, or -1 if not found in parent."
      },
      "throws": []
    },
    {
      "name": "appendDescription",
      "comment": "Append a string to a DataType\u0027s description.",
      "javadoc": "Append a string to a {@link DataType}\u0027s description.\n@param dt {@link DataType}\n@param description string to append, if null or empty nothing happens.\n@param sep characters to place after previous description to separate it from the\n new portion.",
      "static": true,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "DataType"
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string to append, if null or empty nothing happens."
        },
        {
          "name": "sep",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "characters to place after previous description to separate it from the\n new portion."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "appendDescription",
      "comment": "Append a string to a description of a field in a structure.",
      "javadoc": "Append a string to a description of a field in a structure.\n@param dtc the {@link DataTypeComponent field} in a struct\n@param description string to append, if null or empty nothing happens.\n@param sep characters to place after previous description to separate it from the\n new portion.",
      "static": true,
      "params": [
        {
          "name": "dtc",
          "type_long": "ghidra.program.model.data.DataTypeComponent",
          "type_short": "DataTypeComponent",
          "comment": "the DataTypeComponent in a struct"
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "string to append, if null or empty nothing happens."
        },
        {
          "name": "sep",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "characters to place after previous description to separate it from the\n new portion."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readOffsetByDWARFformat",
      "comment": "Read an offset value who\u0027s size depends on the DWARF format: 32 vs 64.\n ",
      "javadoc": "Read an offset value who\u0027s size depends on the DWARF format: 32 vs 64.\n \u003cp\u003e\n@param reader BinaryReader pointing to the value to read\n@param dwarfFormat - See {@link DWARFCompilationUnit#DWARF_32} and {@link DWARFCompilationUnit#DWARF_64}.\n@return the offset value\n@throws IOException if an I/O error occurs or bad dwarfFormat value",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader pointing to the value to read"
        },
        {
          "name": "dwarfFormat",
          "type_long": "int",
          "type_short": "int",
          "comment": "- See DWARFCompilationUnit#DWARF_32 and DWARFCompilationUnit#DWARF_64."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the offset value"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs or bad dwarfFormat value"
        }
      ]
    },
    {
      "name": "readVarSizedULong",
      "comment": "Read a variable-sized unsigned integer and return it as a java signed long.\n ",
      "javadoc": "Read a variable-sized unsigned integer and return it as a java signed long.\n \u003cp\u003e\n@param reader {@link BinaryReader} to read the data from\n@param pointerSize number of bytes the value is stored in, must be 1, 2, 4, or 8.\n@return unsigned long integer value.\n@throws IOException if error",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader to read the data from"
        },
        {
          "name": "pointerSize",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes the value is stored in, must be 1, 2, 4, or 8."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "unsigned long integer value."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        }
      ]
    },
    {
      "name": "readVarSizedUInt",
      "comment": "Read a variable-sized unsigned integer and return it as a java signed int.\n \n Unsigned 32 bit int values larger than java\u0027s signed Integer.MAX_VALUE are not\n supported and will throw an IOException.",
      "javadoc": "Read a variable-sized unsigned integer and return it as a java signed int.\n \u003cp\u003e\n Unsigned 32 bit int values larger than java\u0027s signed Integer.MAX_VALUE are not\n supported and will throw an IOException.\n@param reader {@link BinaryReader} to read the data from\n@param size number of bytes the integer value is stored in, must be 1, 2 or 4.\n@return unsigned integer value.\n@throws IOException if error",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader to read the data from"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bytes the integer value is stored in, must be 1, 2 or 4."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "unsigned integer value."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        }
      ]
    },
    {
      "name": "readAddress",
      "comment": "Read the value of an address.",
      "javadoc": "Read the value of an address.\n@param reader BinaryReader pointing to the value to read\n@param pointerSize the size of a pointer\n@return the address value\n@throws IOException if an I/O error occurs\n@throws IllegalArgumentException if an unknown pointer size is given",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader pointing to the value to read"
        },
        {
          "name": "pointerSize",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "the size of a pointer"
        }
      ],
      "return": {
        "type_long": "java.lang.Number",
        "type_short": "Number",
        "comment": "the address value"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "readAddressAsLong",
      "comment": "Reads a variable-sized unsigned \u0027address\u0027 value from a BinaryReader and\n returns it as a 64 bit java long.\n \n The valid pointerSizes are 1, 2, 4, and 8.\n ",
      "javadoc": "Reads a variable-sized unsigned \u0027address\u0027 value from a {@link BinaryReader} and\n returns it as a 64 bit java long.\n \u003cp\u003e\n The valid pointerSizes are 1, 2, 4, and 8.\n \u003cp\u003e\n@param reader {@link BinaryReader} to read the data from\n@param pointerSize number of bytes the value is stored in, must be 1, 2, 4, or 8.\n@return unsigned long value.\n@throws IOException if error",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader to read the data from"
        },
        {
          "name": "pointerSize",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "number of bytes the value is stored in, must be 1, 2, 4, or 8."
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "unsigned long value."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        }
      ]
    },
    {
      "name": "isThisParam",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "paramDIEA",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferringTypedef",
      "comment": "Returns the DIEAggregate of a typedef that points to the specified datatype.\n \n Returns null if there is no typedef pointing to the specified DIEA or if there are\n multiple.",
      "javadoc": "Returns the {@link DIEAggregate} of a typedef that points to the specified datatype.\n \u003cp\u003e\n Returns null if there is no typedef pointing to the specified DIEA or if there are\n multiple.\n@param diea {@link DIEAggregate} of a data type that might be the target of typedefs.\n@return {@link DIEAggregate} of the singular typedef that points to the arg, otherwise\n null if none or multiple found.",
      "static": true,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": "DIEAggregate of a data type that might be the target of typedefs."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
        "type_short": "DIEAggregate",
        "comment": "DIEAggregate of the singular typedef that points to the arg, otherwise\n null if none or multiple found."
      },
      "throws": []
    },
    {
      "name": "readLength",
      "comment": "Read a variable-length length value from the stream.\n ",
      "javadoc": "Read a variable-length length value from the stream.\n \u003cp\u003e\n@param reader {@link BinaryReader} stream to read from\n@param program Ghidra {@link Program}\n@return new {@link LengthResult}, never null; length \u003d\u003d 0 should be checked for and treated\n specially\n@throws IOException if io error\n@throws DWARFException if invalid values",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader stream to read from"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "Ghidra Program"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.DWARFUtil.LengthResult",
        "type_short": "LengthResult",
        "comment": "new LengthResult, never null; length \u003d\u003d 0 should be checked for and treated\n specially"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if io error"
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.DWARFException",
          "type_short": "DWARFException",
          "comment": "if invalid values"
        }
      ]
    }
  ]
}
