{
  "name": "DWARFSectionProviderFactory",
  "comment": "Auto-detects which DWARFSectionProvider matches a Ghidra program.",
  "javadoc": "Auto-detects which {@link DWARFSectionProvider} matches a Ghidra program.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "sectionProviderFactoryFuncs",
      "comment": "A list of references to static methods that will create a DWARFSectionProvider.\n \n The method should return null if it can\u0027t parse the data it found in the Program.\n \n The method does NOT need to worry about validating the presence of DWARF debug info\n sections, as that will be done in #createSectionProviderFor(Program).\n \n The method should not throw anything, instead just return a NULL.",
      "javadoc": "A list of references to static methods that will create a {@link DWARFSectionProvider}.\n \u003cp\u003e\n The method should return null if it can\u0027t parse the data it found in the {@link Program}.\n \u003cp\u003e\n The method does NOT need to worry about validating the presence of DWARF debug info\n sections, as that will be done in {@link #createSectionProviderFor(Program)}.\n \u003cp\u003e\n The method should not throw anything, instead just return a NULL.",
      "static": true,
      "type_long": "java.util.List\u003cjava.util.function.Function\u003cghidra.program.model.listing.Program,ghidra.app.util.bin.format.dwarf4.next.sectionprovider.DWARFSectionProvider\u003e\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createSectionProviderFor",
      "comment": "Iterates through the statically registered #sectionProviderFactoryFuncs,\n trying each factory method until one returns a DWARFSectionProvider \n that can successfully retrieve the DWARFSectionNames#MINIMAL_DWARF_SECTIONS \n sections we need to do a DWARF import.\n \n The resulting DWARFSectionProvider is Closeable and it is the caller\u0027s\n responsibility to ensure that the object is closed when done.",
      "javadoc": "Iterates through the statically registered {@link #sectionProviderFactoryFuncs factory funcs},\n trying each factory method until one returns a {@link DWARFSectionProvider} \n that can successfully retrieve the {@link DWARFSectionNames#MINIMAL_DWARF_SECTIONS minimal} \n sections we need to do a DWARF import.\n \u003cp\u003e\n The resulting {@link DWARFSectionProvider} is {@link Closeable} and it is the caller\u0027s\n responsibility to ensure that the object is closed when done.\n@param program\n@return {@link DWARFSectionProvider} that should be closed by the caller or NULL if no\n section provider types match the specified program.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.sectionprovider.DWARFSectionProvider",
        "type_short": "DWARFSectionProvider",
        "comment": "DWARFSectionProvider that should be closed by the caller or NULL if no\n section provider types match the specified program."
      },
      "throws": []
    },
    {
      "name": "createSectionProviderFor",
      "comment": "Iterates through the statically registered #sectionProviderFactoryFuncs,\n trying each factory method until one returns a DWARFSectionProvider \n that can successfully retrieve the DWARFSectionNames#MINIMAL_DWARF_SECTIONS \n sections we need to do a DWARF import.\n \n The resulting DWARFSectionProvider is Closeable and it is the caller\u0027s\n responsibility to ensure that the object is closed when done.",
      "javadoc": "Iterates through the statically registered {@link #sectionProviderFactoryFuncs factory funcs},\n trying each factory method until one returns a {@link DWARFSectionProvider} \n that can successfully retrieve the {@link DWARFSectionNames#MINIMAL_DWARF_SECTIONS minimal} \n sections we need to do a DWARF import.\n \u003cp\u003e\n The resulting {@link DWARFSectionProvider} is {@link Closeable} and it is the caller\u0027s\n responsibility to ensure that the object is closed when done.\n@param program Ghidra {@link Program}\n@param monitor {@link TaskMonitor}\n@return {@link DWARFSectionProvider} that should be closed by the caller or NULL if no\n section provider types match the specified program.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "Ghidra Program"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "TaskMonitor"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.sectionprovider.DWARFSectionProvider",
        "type_short": "DWARFSectionProvider",
        "comment": "DWARFSectionProvider that should be closed by the caller or NULL if no\n section provider types match the specified program."
      },
      "throws": []
    }
  ]
}
