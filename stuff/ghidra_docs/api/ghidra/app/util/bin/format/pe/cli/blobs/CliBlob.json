{
  "name": "CliBlob",
  "comment": "Describes a blob in the #Blob heap. Format is a coded size then the blob contents.\n \n Paraphrasing from ISO 23271:2012 11.24.2.4 (p272):\n - If the first one byte of the \u0027blob\u0027 is 0bbbbbbb_2: size is bbbbbbb_2 bytes.\n - \n - \n The first entry in the heap is the empty \u0027blob\u0027 consisting of a single zero byte.",
  "javadoc": "Describes a blob in the #Blob heap. Format is a coded size then the blob contents.\n \u003cp\u003e\n Paraphrasing from ISO 23271:2012 11.24.2.4 (p272):\n - If the first one byte of the \u0027blob\u0027 is 0bbbbbbb_2: size is bbbbbbb_2 bytes.\n - {@literal If the first two bytes are 10bbbbbb_2 and x: size is (bbbbbb_2 \u003c\u003c 8 + x) bytes.}\n - {@literal If the first four bytes are 110bbbbb_2, x, y, and z: size is (bbbbb_2\u003c\u003c24 + x\u003c\u003c16 + y\u003c\u003c8 + z) bytes.}\n The first entry in the heap is the empty \u0027blob\u0027 consisting of a single zero byte.",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "PATH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"/PE/CLI/Blobs\""
    },
    {
      "name": "streamIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.BinaryReader",
      "type_short": "BinaryReader",
      "constant_value": null
    },
    {
      "name": "blobOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "contentsOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "contentsSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new blob from the given reader, which should be positioned at the start\n of the blob.  The reader will be positioned directly after the blob upon completion\n of the constructor.",
      "javadoc": "Creates a new blob from the given reader, which should be positioned at the start\n of the blob.  The reader will be positioned directly after the blob upon completion\n of the constructor.\n@param streamIndex The blob\u0027s stream index.\n@param reader The reader to use to read the blob.\n@throws IOException if there was a problem reading the blob.",
      "static": false,
      "params": [
        {
          "name": "streamIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "The blob\u0027s stream index."
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "The reader to use to read the blob."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was a problem reading the blob."
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new blob that is a copy of the given blob.",
      "javadoc": "Creates a new blob that is a copy of the given blob.\n@param blob The blob to copy.",
      "static": false,
      "params": [
        {
          "name": "blob",
          "type_long": "ghidra.app.util.bin.format.pe.cli.blobs.CliBlob",
          "type_short": "CliBlob",
          "comment": "The blob to copy."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new blob that is a copy of the given blob but with a new reader.  \n The provided reader must be positioned to the start of the new blob.",
      "javadoc": "Creates a new blob that is a copy of the given blob but with a new reader.  \n The provided reader must be positioned to the start of the new blob.\n@param blob The blob to copy.\n@param reader The reader to use to read the new blob.  It must be positioned\n   to the start of the new blob.",
      "static": false,
      "params": [
        {
          "name": "blob",
          "type_long": "ghidra.app.util.bin.format.pe.cli.blobs.CliBlob",
          "type_short": "CliBlob",
          "comment": "The blob to copy."
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "The reader to use to read the new blob.  It must be positioned\n   to the start of the new blob."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "Gets the blob\u0027s size in bytes (includes all fields).",
      "javadoc": "Gets the blob\u0027s size in bytes (includes all fields).\n@return The blob\u0027s size in bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The blob\u0027s size in bytes."
      },
      "throws": []
    },
    {
      "name": "getContentsReader",
      "comment": "Gets a new binary reader positioned at the start of this blob\u0027s contents.",
      "javadoc": "Gets a new binary reader positioned at the start of this blob\u0027s contents.\n@return A new binary reader positioned at the start of this blob\u0027s contents.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.BinaryReader",
        "type_short": "BinaryReader",
        "comment": "A new binary reader positioned at the start of this blob\u0027s contents."
      },
      "throws": []
    },
    {
      "name": "getContentsSize",
      "comment": "Gets the blob\u0027s contents size in bytes.",
      "javadoc": "Gets the blob\u0027s contents size in bytes.\n@return The blob\u0027s contents size in bytes.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The blob\u0027s contents size in bytes."
      },
      "throws": []
    },
    {
      "name": "getContents",
      "comment": "Gets the blob\u0027s contents.",
      "javadoc": "Gets the blob\u0027s contents.\n@return the blob\u0027s contents.  Could be null if there was a problem reading the \n   contents.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the blob\u0027s contents.  Could be null if there was a problem reading the \n   contents."
      },
      "throws": []
    },
    {
      "name": "getRepresentation",
      "comment": "Gets the string representation of this blob.",
      "javadoc": "Gets the string representation of this blob.\n@return The string representation of this blob.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The string representation of this blob."
      },
      "throws": []
    },
    {
      "name": "isLittleEndian",
      "comment": "Checks to see whether or not this blob is little endian.",
      "javadoc": "Checks to see whether or not this blob is little endian.\n@return True if this blob is little endian; false if big endian.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if this blob is little endian; false if big endian."
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStreamIndex",
      "comment": "Gets the index into the blob stream of this blob.",
      "javadoc": "Gets the index into the blob stream of this blob.\n@return The index into the blob stream of this blob.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The index into the blob stream of this blob."
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Gets the name of this blob.",
      "javadoc": "Gets the name of this blob.\n@return The name of this blob.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The name of this blob."
      },
      "throws": []
    },
    {
      "name": "getContentsName",
      "comment": "Gets the name associated with this blob\u0027s contents.",
      "javadoc": "Gets the name associated with this blob\u0027s contents.\n@return The name associated with this blob\u0027s contents.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The name associated with this blob\u0027s contents."
      },
      "throws": []
    },
    {
      "name": "getContentsDataType",
      "comment": "Gets the data type associated with this blob\u0027s contents.",
      "javadoc": "Gets the data type associated with this blob\u0027s contents.\n@return The data type associated with this blob\u0027s contents.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "The data type associated with this blob\u0027s contents."
      },
      "throws": []
    },
    {
      "name": "getContentsComment",
      "comment": "Gets the comment associated with this blob\u0027s contents.",
      "javadoc": "Gets the comment associated with this blob\u0027s contents.\n@return The comment associated with this blob\u0027s contents.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The comment associated with this blob\u0027s contents."
      },
      "throws": []
    },
    {
      "name": "getSizeDataType",
      "comment": "Gets the proper data type for the blob\u0027s size field.",
      "javadoc": "Gets the proper data type for the blob\u0027s size field.\n@return The proper data type for the blob\u0027s size field.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "The proper data type for the blob\u0027s size field."
      },
      "throws": []
    },
    {
      "name": "parseCodedSize",
      "comment": "Parses the coded blob size that the given reader is positioned at.",
      "javadoc": "Parses the coded blob size that the given reader is positioned at.\n@param reader The reader to use to read the coded blob size.\n@return The size of the blob contents in bytes.\n@throws IOException if there is a problem reading the coded size field.",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "The reader to use to read the coded blob size."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The size of the blob contents in bytes."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there is a problem reading the coded size field."
        }
      ]
    },
    {
      "name": "testSizeDecoding",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumberBytesInCodedInt",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "firstByte",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "rotateCircularRight",
      "comment": "Rotates toRotate circularly right using a maximum of bitSize bits for the numeric representation.\n Bits must be in the rightmost (least significant) positions.",
      "javadoc": "Rotates toRotate circularly right using a maximum of bitSize bits for the numeric representation.\n Bits must be in the rightmost (least significant) positions.",
      "static": true,
      "params": [
        {
          "name": "toRotate",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bitSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decodeCompressedSigned",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "codedSize",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decodeCompressedSigned",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "codedSize",
          "type_long": "short",
          "type_short": "short",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decodeCompressedSigned",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "codedSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decodeCompressedUnsigned",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "codedSize",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decodeCompressedUnsigned",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "codedSize",
          "type_long": "short",
          "type_short": "short",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decodeCompressedUnsigned",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "codedSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "decodeCompressedInt",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        },
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "decodeCompressedSignedInt",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "decodeCompressedUnsignedInt",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDataTypeForBytes",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "numBytes",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    }
  ]
}
