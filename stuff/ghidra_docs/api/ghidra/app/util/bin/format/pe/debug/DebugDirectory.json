{
  "name": "DebugDirectory",
  "comment": "A class to represent the Debug Directory data structure.\n \n \n typedef struct _IMAGE_DEBUG_DIRECTORY {\n     DWORD   Characteristics;\n     DWORD   TimeDateStamp;\n     WORD    MajorVersion;\n     WORD    MinorVersion;\n     DWORD   Type;\n     DWORD   SizeOfData;\n     DWORD   AddressOfRawData;\n     DWORD   PointerToRawData;\n } IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;\n \n ",
  "javadoc": "A class to represent the Debug Directory data structure.\n \u003cbr\u003e\n \u003cpre\u003e\n typedef struct _IMAGE_DEBUG_DIRECTORY {\n     DWORD   Characteristics;\n     DWORD   TimeDateStamp;\n     WORD    MajorVersion;\n     WORD    MinorVersion;\n     DWORD   Type;\n     DWORD   SizeOfData;\n     DWORD   AddressOfRawData;\n     DWORD   PointerToRawData;\n } IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;\n \u003c/pre\u003e\n \u003cbr\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter",
    "ghidra.app.util.bin.ByteArrayConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NAME",
      "comment": "The name to use when converting into a structure data type.",
      "javadoc": "The name to use when converting into a structure data type.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"IMAGE_DEBUG_DIRECTORY\""
    },
    {
      "name": "IMAGE_SIZEOF_DEBUG_DIRECTORY",
      "comment": "The size of the IMAGE_DEBUG_DIRECTORY, in bytes.",
      "javadoc": "The size of the \u003ccode\u003eIMAGE_DEBUG_DIRECTORY\u003c/code\u003e, in bytes.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "28"
    },
    {
      "name": "characteristics",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "timeDateStamp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "majorVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "minorVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "type",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "sizeOfData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "addressOfRawData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "pointerToRawData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "description",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "blobBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "index",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createDebugDirectory",
      "comment": "Constuctor.",
      "javadoc": "Constuctor.\n@param reader the binary reader\n@param index the index where this debug directory begins\n@param ntHeader",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": "the binary reader"
        },
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": "the index where this debug directory begins"
        },
        {
          "name": "validator",
          "type_long": "ghidra.app.util.bin.format.pe.OffsetValidator",
          "type_short": "OffsetValidator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.DebugDirectory",
        "type_short": "DebugDirectory",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initDebugDirectory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "validator",
          "type_long": "ghidra.app.util.bin.format.pe.OffsetValidator",
          "type_short": "OffsetValidator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getCharacteristics",
      "comment": "Reserved.",
      "javadoc": "Reserved.\n@return reserved value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "reserved value"
      },
      "throws": []
    },
    {
      "name": "getTimeDateStamp",
      "comment": "Returns the time and date the debugging information was created.",
      "javadoc": "Returns the time and date the debugging information was created.\n@return the time and date the debugging information was created",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the time and date the debugging information was created"
      },
      "throws": []
    },
    {
      "name": "getMajorVersion",
      "comment": "Returns the major version number of the debugging information format.",
      "javadoc": "Returns the major version number of the debugging information format.\n@return the major version number of the debugging information format",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the major version number of the debugging information format"
      },
      "throws": []
    },
    {
      "name": "getMinorVersion",
      "comment": "Returns the minor version number of the debugging information format.",
      "javadoc": "Returns the minor version number of the debugging information format.\n@return the minor version number of the debugging information format",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the minor version number of the debugging information format"
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "Returns the format of the debugging information.",
      "javadoc": "Returns the format of the debugging information.\n@return the format of the debugging information",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the format of the debugging information"
      },
      "throws": []
    },
    {
      "name": "getSizeOfData",
      "comment": "Returns the size of the debugging information, in bytes. \n This value does not include the debug directory itself.",
      "javadoc": "Returns the size of the debugging information, in bytes. \n This value does not include the debug directory itself.\n@return the size of the debugging information, in bytes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of the debugging information, in bytes"
      },
      "throws": []
    },
    {
      "name": "getAddressOfRawData",
      "comment": "Returns the address of the debugging information when the image is loaded, relative to the image base.",
      "javadoc": "Returns the address of the debugging information when the image is loaded, relative to the image base.\n@return the address of the debugging information when the image is loaded, relative to the image base",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the address of the debugging information when the image is loaded, relative to the image base"
      },
      "throws": []
    },
    {
      "name": "getPointerToRawData",
      "comment": "Returns the file pointer to the debugging information.",
      "javadoc": "Returns the file pointer to the debugging information.\n@return the file pointer to the debugging information",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the file pointer to the debugging information"
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "Returns a description of this debug directory.",
      "javadoc": "Returns a description of this debug directory.\n@return a description of this debug directory",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a description of this debug directory"
      },
      "throws": []
    },
    {
      "name": "setDescription",
      "comment": "Sets the description of this debug directory.",
      "javadoc": "Sets the description of this debug directory.\n@param desc the description of this debug directory",
      "static": false,
      "params": [
        {
          "name": "desc",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the description of this debug directory"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.StructConverter#toDataType()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "raf",
          "type_long": "java.io.RandomAccessFile",
          "type_short": "RandomAccessFile",
          "comment": ""
        },
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "updatePointers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "postOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
