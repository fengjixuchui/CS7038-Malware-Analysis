{
  "name": "ElfString",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "header",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
      "type_short": "ElfHeader",
      "constant_value": null
    },
    {
      "name": "stringOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "string",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createElfString",
      "comment": "Read an ElfString at the readers current position.  ElfString only supports\n null-terminated ASCII strings.",
      "javadoc": "Read an ElfString at the readers current position.  ElfString only supports\n null-terminated ASCII strings.\n@param reader reader positioned at start of string\n@param stringOffset string offset from start of string table\n@param header Elf header object\n@return Elf string object\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": "reader positioned at start of string"
        },
        {
          "name": "stringOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": "string offset from start of string table"
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": "Elf header object"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfString",
        "type_short": "ElfString",
        "comment": "Elf string object"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initElfString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "stringOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getString",
      "comment": "",
      "javadoc": "@return string object",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "string object"
      },
      "throws": []
    },
    {
      "name": "getStringOffset",
      "comment": "",
      "javadoc": "@return string offset within string table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "string offset within string table"
      },
      "throws": []
    }
  ]
}
