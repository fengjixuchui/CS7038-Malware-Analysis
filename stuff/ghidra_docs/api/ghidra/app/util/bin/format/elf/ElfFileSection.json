{
  "name": "ElfFileSection",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "fields": [],
  "methods": [
    {
      "name": "getAddressOffset",
      "comment": "Preferred memory address offset where data should be loaded.\n The returned offset will already have the prelink adjustment \n applied, although will not reflect any change in the image base.",
      "javadoc": "Preferred memory address offset where data should be loaded.\n The returned offset will already have the prelink adjustment \n applied, although will not reflect any change in the image base.\n@return default memory address offset where data should be loaded",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "default memory address offset where data should be loaded"
      },
      "throws": []
    },
    {
      "name": "getFileOffset",
      "comment": "Offset within file where section bytes are specified",
      "javadoc": "Offset within file where section bytes are specified\n@return offset within file where section bytes are specified",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "offset within file where section bytes are specified"
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Length of file section in bytes",
      "javadoc": "Length of file section in bytes\n@return length of file section in bytes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "length of file section in bytes"
      },
      "throws": []
    },
    {
      "name": "getEntrySize",
      "comment": "Size of each structured entry in bytes",
      "javadoc": "Size of each structured entry in bytes\n@return entry size or -1 if variable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "entry size or -1 if variable"
      },
      "throws": []
    }
  ]
}
