{
  "name": "Segment",
  "comment": "A class to represent a new-executable segment.",
  "javadoc": "A class to represent a new-executable segment.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "FLAG_DATA",
      "comment": "data segment type.",
      "javadoc": "data segment type.",
      "static": true,
      "type_long": "short",
      "type_short": "short",
      "constant_value": "1"
    },
    {
      "name": "FLAG_ALLOC",
      "comment": "loaded has allocated memory.",
      "javadoc": "loaded has allocated memory.",
      "static": true,
      "type_long": "short",
      "type_short": "short",
      "constant_value": "2"
    },
    {
      "name": "FLAG_LOADED",
      "comment": "segment is loaded.",
      "javadoc": "segment is loaded.",
      "static": true,
      "type_long": "short",
      "type_short": "short",
      "constant_value": "4"
    },
    {
      "name": "FLAG_MOVEABLE",
      "comment": "segment not fixed.",
      "javadoc": "segment not fixed.",
      "static": true,
      "type_long": "short",
      "type_short": "short",
      "constant_value": "16"
    },
    {
      "name": "FLAG_PURE",
      "comment": "pure (shareable) or impure (unshareable).",
      "javadoc": "pure (shareable) or impure (unshareable).",
      "static": true,
      "type_long": "short",
      "type_short": "short",
      "constant_value": "32"
    },
    {
      "name": "FLAG_PRELOAD",
      "comment": "preload or load-on-call.",
      "javadoc": "preload or load-on-call.",
      "static": true,
      "type_long": "short",
      "type_short": "short",
      "constant_value": "64"
    },
    {
      "name": "FLAG_EXE_ONLY",
      "comment": "if code, segment is execute-only.",
      "javadoc": "if code, segment is execute-only.",
      "static": true,
      "type_long": "short",
      "type_short": "short",
      "constant_value": "128"
    },
    {
      "name": "FLAG_READ_ONLY",
      "comment": "if data, segment is read-only.",
      "javadoc": "if data, segment is read-only.",
      "static": true,
      "type_long": "short",
      "type_short": "short",
      "constant_value": "128"
    },
    {
      "name": "FLAG_RELOC_INFO",
      "comment": "segment has relocation records.",
      "javadoc": "segment has relocation records.",
      "static": true,
      "type_long": "short",
      "type_short": "short",
      "constant_value": "256"
    },
    {
      "name": "FLAG_DISCARD",
      "comment": "segment is discardable.",
      "javadoc": "segment is discardable.",
      "static": true,
      "type_long": "short",
      "type_short": "short",
      "constant_value": "4096"
    },
    {
      "name": "FLAG_32BIT",
      "comment": "segment is 32 bit",
      "javadoc": "segment is 32 bit",
      "static": true,
      "type_long": "short",
      "type_short": "short",
      "constant_value": "8192"
    },
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
      "type_short": "FactoryBundledWithBinaryReader",
      "constant_value": null
    },
    {
      "name": "segmentID",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "flagword",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "minAllocSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "offsetAlign",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "nRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "relocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.ne.SegmentRelocation[]",
      "type_short": "ghidra.app.util.bin.format.ne.SegmentRelocation[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "segmentAlignment",
          "type_long": "short",
          "type_short": "short",
          "comment": ""
        },
        {
          "name": "segmentID",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getSegmentID",
      "comment": "Returns segment ID.",
      "javadoc": "Returns segment ID.\n@return segment ID",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "segment ID"
      },
      "throws": []
    },
    {
      "name": "is32bit",
      "comment": "Returns true if the segment should operate in 32 bit mode.",
      "javadoc": "Returns true if the segment should operate in 32 bit mode.\n@return true if the segment should operate in 32 bit mode",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the segment should operate in 32 bit mode"
      },
      "throws": []
    },
    {
      "name": "isCode",
      "comment": "Returns true if this is a code segment.",
      "javadoc": "Returns true if this is a code segment.\n@return true if this is a code segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is a code segment"
      },
      "throws": []
    },
    {
      "name": "isData",
      "comment": "Returns true if this is a data segment.",
      "javadoc": "Returns true if this is a data segment.\n@return true if this is a data segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this is a data segment"
      },
      "throws": []
    },
    {
      "name": "hasRelocation",
      "comment": "Returns true if this segment has relocations.",
      "javadoc": "Returns true if this segment has relocations.\n@return true if this segment has relocations",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this segment has relocations"
      },
      "throws": []
    },
    {
      "name": "isLoaderAllocated",
      "comment": "Returns true if this segment is loader allocated.",
      "javadoc": "Returns true if this segment is loader allocated.\n@return true if this segment is loader allocated",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this segment is loader allocated"
      },
      "throws": []
    },
    {
      "name": "isLoaded",
      "comment": "Returns true if this segment is loaded.",
      "javadoc": "Returns true if this segment is loaded.\n@return true if this segment is loaded",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this segment is loaded"
      },
      "throws": []
    },
    {
      "name": "isMoveable",
      "comment": "Returns true if this segment is moveable.",
      "javadoc": "Returns true if this segment is moveable.\n@return true if this segment is moveable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this segment is moveable"
      },
      "throws": []
    },
    {
      "name": "isPreload",
      "comment": "Returns true if this segment is preloaded.",
      "javadoc": "Returns true if this segment is preloaded.\n@return true if this segment is preloaded",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this segment is preloaded"
      },
      "throws": []
    },
    {
      "name": "isPure",
      "comment": "Returns true if this segment is pure.",
      "javadoc": "Returns true if this segment is pure.\n@return true if this segment is pure",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this segment is pure"
      },
      "throws": []
    },
    {
      "name": "isReadOnly",
      "comment": "Returns true if this segment is read-only.",
      "javadoc": "Returns true if this segment is read-only.\n@return true if this segment is read-only",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this segment is read-only"
      },
      "throws": []
    },
    {
      "name": "isExecuteOnly",
      "comment": "Returns true if this segment is execute-only.",
      "javadoc": "Returns true if this segment is execute-only.\n@return true if this segment is execute-only",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this segment is execute-only"
      },
      "throws": []
    },
    {
      "name": "isDiscardable",
      "comment": "Returns true if this segment is discardable.",
      "javadoc": "Returns true if this segment is discardable.\n@return true if this segment is discardable",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this segment is discardable"
      },
      "throws": []
    },
    {
      "name": "getFlagword",
      "comment": "Returns the flag word of this segment.",
      "javadoc": "Returns the flag word of this segment.\n@return the flag word of this segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the flag word of this segment"
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Returns the length of this segment.",
      "javadoc": "Returns the length of this segment.\n@return the length of this segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the length of this segment"
      },
      "throws": []
    },
    {
      "name": "getMinAllocSize",
      "comment": "Returns the minimum allocation size of this segment.",
      "javadoc": "Returns the minimum allocation size of this segment.\n@return the minimum allocation size of this segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the minimum allocation size of this segment"
      },
      "throws": []
    },
    {
      "name": "getOffset",
      "comment": "Returns the offset to the contents of this segment. \n NOTE: This value needs to be shift aligned.",
      "javadoc": "Returns the offset to the contents of this segment. \n NOTE: This value needs to be shift aligned.\n@return the offset to the contents of this segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the offset to the contents of this segment"
      },
      "throws": []
    },
    {
      "name": "getOffsetShiftAligned",
      "comment": "Returns the actual (shifted) offset to the contents.",
      "javadoc": "Returns the actual (shifted) offset to the contents.\n@return the actual (shifted) offset to the contents",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the actual (shifted) offset to the contents"
      },
      "throws": []
    },
    {
      "name": "getRelocations",
      "comment": "Returns an array of the relocations defined for this segment.",
      "javadoc": "Returns an array of the relocations defined for this segment.\n@return an array of the relocations defined for this segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.ne.SegmentRelocation[]",
        "type_short": "ghidra.app.util.bin.format.ne.SegmentRelocation[]",
        "comment": "an array of the relocations defined for this segment"
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Returns the bytes the comprise this segment.\n The size of the byte array is MAX(length,minalloc).",
      "javadoc": "Returns the bytes the comprise this segment.\n The size of the byte array is MAX(length,minalloc).\n@return the bytes the comprise this segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the bytes the comprise this segment"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
