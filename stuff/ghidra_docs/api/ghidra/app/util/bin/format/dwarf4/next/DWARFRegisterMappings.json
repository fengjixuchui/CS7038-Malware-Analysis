{
  "name": "DWARFRegisterMappings",
  "comment": "Immutable mapping information between DWARF and Ghidra.\n \n Use DWARFRegisterMappingsManager to get an instance for a Program\u0027s specific\n language.\n \n The data held in this class is read from DWARF register mapping information contained \n in xml files referenced from the language *.ldefs file in an\n external_name tool\u003d\"DWARF.register.mapping.file\" name\u003d\"register_mapping_filename_here\"/ \n \n The format is:\n \n dwarf\n   register_mappings\n       !-- Simple single mapping: --\n       !-- NN \u003d\u003d dwarf register number --\n       !-- RegName \u003d\u003d Ghidra register name string --\n       !-- register_mapping dwarf\u003d\"NN\" ghidra\u003d\"RegName\" / --\n       \n       !-- Example: --\n     register_mapping dwarf\u003d\"0\" ghidra\u003d\"r0\" /\n     \n       !-- Single mapping specifying stack pointer: --\n       !-- NN \u003d\u003d dwarf register number --\n       !-- RegName \u003d\u003d Ghidra register name string --\n       !-- register_mapping dwarf\u003d\"NN\" ghidra\u003d\"RegName\" stackpointer\u003d\"true\"/ --\n       \n       !-- Example: --\n     register_mapping dwarf\u003d\"4\" ghidra\u003d\"ESP\" stackpointer\u003d\"true\"/\n     \n       !-- Multiple mapping: --\n       !-- NN \u003d\u003d dwarf register number --\n       !-- XX \u003d\u003d number of times to repeat --\n       !-- RegNameYY \u003d\u003d Ghidra register name string with a mandatory integer suffix --\n       !-- register_mapping dwarf\u003d\"NN\" ghidra\u003d\"RegNameYY\" auto_count\u003d\"XX\"/ --\n       \n       !-- Example, creates mapping from 0..12 to r0..r12: --\n     register_mapping dwarf\u003d\"0\" ghidra\u003d\"r0\" auto_count\u003d\"12\"/\n     \n       !-- Example, creates mapping from 17..32 to XMM0..XMM15: --\n     register_mapping dwarf\u003d\"17\" ghidra\u003d\"XMM0\" auto_count\u003d\"16\"/\n     \n   /register_mappings\n   \n     !-- Call Frame CFA Value: --\n   call_frame_cfa value\u003d\"NN\"/\n   \n     !-- Use Formal Parameter Storage toggle: --\n   use_formal_parameter_storage/\n /dwarf\n ",
  "javadoc": "Immutable mapping information between DWARF and Ghidra.\n \u003cp\u003e\n Use {@link DWARFRegisterMappingsManager} to get an instance for a Program\u0027s specific\n language.\n \u003cp\u003e\n The data held in this class is read from DWARF register mapping information contained \n in xml files referenced from the language *.ldefs file in an\n \u0026lt;external_name tool\u003d\"DWARF.register.mapping.file\" name\u003d\"register_mapping_filename_here\"/\u0026gt; \n \u003cp\u003e\n The format is:\u003cp\u003e\n \u003cpre\u003e\n \u0026lt;dwarf\u0026gt;\n   \u0026lt;register_mappings\u0026gt;\n       \u0026lt;!-- Simple single mapping: --\u0026gt;\n       \u0026lt;!-- NN \u003d\u003d dwarf register number --\u0026gt;\n       \u0026lt;!-- RegName \u003d\u003d Ghidra register name string --\u0026gt;\n       \u0026lt;!-- \u0026lt;register_mapping dwarf\u003d\"NN\" ghidra\u003d\"RegName\" /\u0026gt; --\u0026gt;\n       \n       \u0026lt;!-- Example: --\u0026gt;\n     \u0026lt;register_mapping dwarf\u003d\"0\" ghidra\u003d\"r0\" /\u0026gt;\n     \n       \u0026lt;!-- Single mapping specifying stack pointer: --\u0026gt;\n       \u0026lt;!-- NN \u003d\u003d dwarf register number --\u0026gt;\n       \u0026lt;!-- RegName \u003d\u003d Ghidra register name string --\u0026gt;\n       \u0026lt;!-- \u0026lt;register_mapping dwarf\u003d\"NN\" ghidra\u003d\"RegName\" stackpointer\u003d\"true\"/\u0026gt; --\u0026gt;\n       \n       \u0026lt;!-- Example: --\u0026gt;\n     \u0026lt;register_mapping dwarf\u003d\"4\" ghidra\u003d\"ESP\" stackpointer\u003d\"true\"/\u0026gt;\n     \n       \u0026lt;!-- Multiple mapping: --\u0026gt;\n       \u0026lt;!-- NN \u003d\u003d dwarf register number --\u0026gt;\n       \u0026lt;!-- XX \u003d\u003d number of times to repeat --\u0026gt;\n       \u0026lt;!-- RegNameYY \u003d\u003d Ghidra register name string with a mandatory integer suffix --\u0026gt;\n       \u0026lt;!-- \u0026lt;register_mapping dwarf\u003d\"NN\" ghidra\u003d\"RegNameYY\" auto_count\u003d\"XX\"/\u0026gt; --\u0026gt;\n       \n       \u0026lt;!-- Example, creates mapping from 0..12 to r0..r12: --\u0026gt;\n     \u0026lt;register_mapping dwarf\u003d\"0\" ghidra\u003d\"r0\" auto_count\u003d\"12\"/\u0026gt;\n     \n       \u0026lt;!-- Example, creates mapping from 17..32 to XMM0..XMM15: --\u0026gt;\n     \u0026lt;register_mapping dwarf\u003d\"17\" ghidra\u003d\"XMM0\" auto_count\u003d\"16\"/\u0026gt;\n     \n   \u0026lt;/register_mappings\u0026gt;\n   \n     \u0026lt;!-- Call Frame CFA Value: --\u0026gt;\n   \u0026lt;call_frame_cfa value\u003d\"NN\"/\u0026gt;\n   \n     \u0026lt;!-- Use Formal Parameter Storage toggle: --\u0026gt;\n   \u0026lt;use_formal_parameter_storage/\u0026gt;\n \u0026lt;/dwarf\u0026gt;\n \u003c/pre\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DUMMY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFRegisterMappings",
      "type_short": "DWARFRegisterMappings",
      "constant_value": null
    },
    {
      "name": "dwarfRegisterMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Integer,ghidra.program.model.lang.Register\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "callFrameCFA",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "stackPointerIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "useFormalParameterStorage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "regmap",
          "type_long": "java.util.Map\u003cjava.lang.Integer,ghidra.program.model.lang.Register\u003e",
          "type_short": "Map",
          "comment": ""
        },
        {
          "name": "callFrameCFA",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "stackPointerIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "useFPS",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGhidraReg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dwarfRegNum",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.lang.Register",
        "type_short": "Register",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCallFrameCFA",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDWARFStackPointerRegNum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isUseFormalParameterStorage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
