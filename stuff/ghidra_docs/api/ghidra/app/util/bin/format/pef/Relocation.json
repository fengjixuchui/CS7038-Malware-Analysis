{
  "name": "Relocation",
  "comment": "The high-order 7 bits for the currently defined relocation opcode values.\n \n Binary values indicated by \"x\" are \"don\u0027t care\" \n operands. For example, any combination of the high-order 7 bits that starts \n with two zero bits (00) indicates the RelocBySectDWithSkip instruction. \n \n Relocation instructions are stored in 2-byte relocation blocks. Most instructions \n take up one block that combines an opcode and related arguments. Instructions \n that are larger than 2 bytes have an opcode and some of the operands in the \n first 2-byte block, with other operands in the following 2-byte blocks. The \n opcode occupies the upper (higher-order) bits of the block that contains it. \n Relocation instructions can be decoded from the high-order 7 bits of their first \n block. \n \n All currently defined relocation instructions relocate locations as words \n (that is, 4-byte values).",
  "javadoc": "The high-order 7 bits for the currently defined relocation opcode values.\n \n Binary values indicated by \"x\" are \"don\u0027t care\" \n operands. For example, any combination of the high-order 7 bits that starts \n with two zero bits (00) indicates the RelocBySectDWithSkip instruction. \n \n Relocation instructions are stored in 2-byte relocation blocks. Most instructions \n take up one block that combines an opcode and related arguments. Instructions \n that are larger than 2 bytes have an opcode and some of the operands in the \n first 2-byte block, with other operands in the following 2-byte blocks. The \n opcode occupies the upper (higher-order) bits of the block that contains it. \n Relocation instructions can be decoded from the high-order 7 bits of their first \n block. \n \n All currently defined relocation instructions relocate locations as words \n (that is, 4-byte values).",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "opcode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isMatch",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "apply",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "importState",
          "type_long": "ghidra.app.util.bin.format.pef.ImportStateCache",
          "type_short": "ImportStateCache",
          "comment": ""
        },
        {
          "name": "relocState",
          "type_long": "ghidra.app.util.bin.format.pef.RelocationState",
          "type_short": "RelocationState",
          "comment": ""
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.pef.ContainerHeader",
          "type_short": "ContainerHeader",
          "comment": ""
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOpcode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeInBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
