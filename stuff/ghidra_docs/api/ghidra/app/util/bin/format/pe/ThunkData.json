{
  "name": "ThunkData",
  "comment": "A class to represent the \n IMAGE_THUNK_DATA32 struct\n as defined in \n winnt.h.\n \n \n typedef struct _IMAGE_THUNK_DATA32 {\n     union {\n         DWORD ForwarderString;  // PBYTE\n         DWORD Function;         // PDWORD\n         DWORD Ordinal;\n         DWORD AddressOfData;    // PIMAGE_IMPORT_BY_NAME\n     } u1;\n } IMAGE_THUNK_DATA32;\n typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;\n \n \n \n typedef struct _IMAGE_THUNK_DATA64 {\n     union {\n         PBYTE  ForwarderString;\n         PDWORD Function;\n         ULONGLONG Ordinal;\n         PIMAGE_IMPORT_BY_NAME  AddressOfData;\n     } u1;\n } IMAGE_THUNK_DATA64;\n typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;\n ",
  "javadoc": "A class to represent the \n \u003cb\u003e\u003ccode\u003eIMAGE_THUNK_DATA32 struct\u003c/code\u003e\u003c/b\u003e\n as defined in \n \u003cb\u003e\u003ccode\u003ewinnt.h\u003c/code\u003e\u003c/b\u003e.\n \n \u003cpre\u003e\n typedef struct _IMAGE_THUNK_DATA32 {\n     union {\n         DWORD ForwarderString;  // PBYTE\n         DWORD Function;         // PDWORD\n         DWORD Ordinal;\n         DWORD AddressOfData;    // PIMAGE_IMPORT_BY_NAME\n     } u1;\n } IMAGE_THUNK_DATA32;\n typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;\n \u003c/pre\u003e\n \n \u003cpre\u003e\n typedef struct _IMAGE_THUNK_DATA64 {\n     union {\n         PBYTE  ForwarderString;\n         PDWORD Function;\n         ULONGLONG Ordinal;\n         PIMAGE_IMPORT_BY_NAME  AddressOfData;\n     } u1;\n } IMAGE_THUNK_DATA64;\n typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;\n \u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter",
    "ghidra.app.util.bin.ByteArrayConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "is64bit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "value",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "ibn",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.ImportByName",
      "type_short": "ImportByName",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createThunkData",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "is64bit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.ThunkData",
        "type_short": "ThunkData",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initThunkData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "is64bit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new thunk data with the specified value",
      "javadoc": "Constructs a new thunk data with the specified value\n@param value the new thunk value",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new thunk value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStructSize",
      "comment": "Returns the size of the thunk (in bytes) based on the size of the\n executable (32 vs 64 bit).",
      "javadoc": "Returns the size of the thunk (in bytes) based on the size of the\n executable (32 vs 64 bit).\n@return the size of the thunk (in bytes)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of the thunk (in bytes)"
      },
      "throws": []
    },
    {
      "name": "getStructName",
      "comment": "Returns the struct name.",
      "javadoc": "Returns the struct name.\n@return the struct name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the struct name"
      },
      "throws": []
    },
    {
      "name": "setValue",
      "comment": "Sets the value of the thunk.",
      "javadoc": "Sets the value of the thunk.\n@param value the new thunk value",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new thunk value"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getForwarderString",
      "comment": "Returns the forward string pointer.",
      "javadoc": "Returns the forward string pointer.\n@return the forward string pointer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the forward string pointer"
      },
      "throws": []
    },
    {
      "name": "getFunction",
      "comment": "Returns the function pointer.",
      "javadoc": "Returns the function pointer.\n@return the function pointer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the function pointer"
      },
      "throws": []
    },
    {
      "name": "getOrdinal",
      "comment": "Returns the ordinal.",
      "javadoc": "Returns the ordinal.\n@return the ordinal",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the ordinal"
      },
      "throws": []
    },
    {
      "name": "isOrdinal",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressOfData",
      "comment": "Returns the address of the data.",
      "javadoc": "Returns the address of the data.\n@return the address of the data",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the address of the data"
      },
      "throws": []
    },
    {
      "name": "setImportByName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ibn",
          "type_long": "ghidra.app.util.bin.format.pe.ImportByName",
          "type_short": "ImportByName",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getImportByName",
      "comment": "Returns the underlying import by name structure.",
      "javadoc": "Returns the underlying import by name structure.\n@return the underlying import by name structure",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.ImportByName",
        "type_short": "ImportByName",
        "comment": "the underlying import by name structure"
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.StructConverter#toDataType()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toBytes",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.ByteArrayConverter#toBytes(ghidra.util.DataConverter)",
      "static": false,
      "params": [
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    }
  ]
}
