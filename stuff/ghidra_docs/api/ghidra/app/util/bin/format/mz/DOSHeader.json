{
  "name": "DOSHeader",
  "comment": "This class represents the IMAGE_DOS_HEADER struct\n as defined in winnt.h.\n \n \n typedef struct _IMAGE_DOS_HEADER {      // DOS .EXE header\n     WORD   e_magic;                     // Magic number\t\t\t\t\t\t\t\t// MANDATORY\n     WORD   e_cblp;                      // Bytes on last page of file\n     WORD   e_cp;                        // Pages in file\n     WORD   e_crlc;                      // Relocations\n     WORD   e_cparhdr;                   // Size of header in paragraphs\n     WORD   e_minalloc;                  // Minimum extra paragraphs needed\n     WORD   e_maxalloc;                  // Maximum extra paragraphs needed\n     WORD   e_ss;                        // Initial (relative) SS value\n     WORD   e_sp;                        // Initial SP value\n     WORD   e_csum;                      // Checksum\n     WORD   e_ip;                        // Initial IP value\n     WORD   e_cs;                        // Initial (relative) CS value\n     WORD   e_lfarlc;                    // File address of relocation table\n     WORD   e_ovno;                      // Overlay number\n     WORD   e_res[4];                    // Reserved words\n     WORD   e_oemid;                     // OEM identifier (for e_oeminfo)\n     WORD   e_oeminfo;                   // OEM information; e_oemid specific\n     WORD   e_res2[10];                  // Reserved words\t\t\t\t\t\t\t// MANDATORY\n     LONG   e_lfanew;                    // File address of new exe header\n } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;\n ",
  "javadoc": "This class represents the \u003ccode\u003eIMAGE_DOS_HEADER\u003c/code\u003e struct\n as defined in \u003cb\u003e\u003ccode\u003ewinnt.h\u003c/code\u003e\u003c/b\u003e.\n \u003cbr\u003e\n \u003cpre\u003e\n typedef struct _IMAGE_DOS_HEADER {      // DOS .EXE header\n     WORD   e_magic;                     // Magic number\t\t\t\t\t\t\t\t// MANDATORY\n     WORD   e_cblp;                      // Bytes on last page of file\n     WORD   e_cp;                        // Pages in file\n     WORD   e_crlc;                      // Relocations\n     WORD   e_cparhdr;                   // Size of header in paragraphs\n     WORD   e_minalloc;                  // Minimum extra paragraphs needed\n     WORD   e_maxalloc;                  // Maximum extra paragraphs needed\n     WORD   e_ss;                        // Initial (relative) SS value\n     WORD   e_sp;                        // Initial SP value\n     WORD   e_csum;                      // Checksum\n     WORD   e_ip;                        // Initial IP value\n     WORD   e_cs;                        // Initial (relative) CS value\n     WORD   e_lfarlc;                    // File address of relocation table\n     WORD   e_ovno;                      // Overlay number\n     WORD   e_res[4];                    // Reserved words\n     WORD   e_oemid;                     // OEM identifier (for e_oeminfo)\n     WORD   e_oeminfo;                   // OEM information; e_oemid specific\n     WORD   e_res2[10];                  // Reserved words\t\t\t\t\t\t\t// MANDATORY\n     LONG   e_lfanew;                    // File address of new exe header\n } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;\n \u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter",
    "ghidra.app.util.bin.format.Writeable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NAME",
      "comment": "The name to use when converting into a structure data type.",
      "javadoc": "The name to use when converting into a structure data type.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"IMAGE_DOS_HEADER\""
    },
    {
      "name": "IMAGE_DOS_SIGNATURE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "23117"
    },
    {
      "name": "SIZEOF_DOS_HEADER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "64"
    },
    {
      "name": "e_magic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_cblp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_cp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_crlc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_cparhdr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_minalloc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_maxalloc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_ss",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_sp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_csum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_ip",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_cs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_lfarlc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_ovno",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_res",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short[]",
      "type_short": "short[]",
      "constant_value": null
    },
    {
      "name": "e_oemid",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_oeminfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "e_res2",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short[]",
      "type_short": "short[]",
      "constant_value": null
    },
    {
      "name": "e_lfanew",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "stubBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
      "type_short": "FactoryBundledWithBinaryReader",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createDOSHeader",
      "comment": "Constructs a new DOS header.",
      "javadoc": "Constructs a new DOS header.\n@param reader the binary reader",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": "the binary reader"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.mz.DOSHeader",
        "type_short": "DOSHeader",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initDOSHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getProcessorName",
      "comment": "Returns the processor name.",
      "javadoc": "Returns the processor name.\n@return the processor name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the processor name"
      },
      "throws": []
    },
    {
      "name": "e_magic",
      "comment": "Returns the magic number.",
      "javadoc": "Returns the magic number.\n@return the magic number",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the magic number"
      },
      "throws": []
    },
    {
      "name": "e_cblp",
      "comment": "Returns the number of bytes on the last page of file.",
      "javadoc": "Returns the number of bytes on the last page of file.\n@return the number of bytes on the last page of the file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of bytes on the last page of the file"
      },
      "throws": []
    },
    {
      "name": "e_cp",
      "comment": "Returns the number of pages in the file.",
      "javadoc": "Returns the number of pages in the file.\n@return the number of pages in the file",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of pages in the file"
      },
      "throws": []
    },
    {
      "name": "e_crlc",
      "comment": "Returns the number of relocations.",
      "javadoc": "Returns the number of relocations.\n@return the number of relocations",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the number of relocations"
      },
      "throws": []
    },
    {
      "name": "e_cparhdr",
      "comment": "Returns the size of header in paragraphs.",
      "javadoc": "Returns the size of header in paragraphs.\n@return the size of header in paragraphs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the size of header in paragraphs"
      },
      "throws": []
    },
    {
      "name": "e_minalloc",
      "comment": "Returns the minimum extra paragraphs needed.",
      "javadoc": "Returns the minimum extra paragraphs needed.\n@return the minimum extra paragraphs needed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the minimum extra paragraphs needed"
      },
      "throws": []
    },
    {
      "name": "e_maxalloc",
      "comment": "Returns the maximum extra paragraphs needed.",
      "javadoc": "Returns the maximum extra paragraphs needed.\n@return the maximum extra paragraphs needed",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the maximum extra paragraphs needed"
      },
      "throws": []
    },
    {
      "name": "e_ss",
      "comment": "Returns the initial (relative) SS value.",
      "javadoc": "Returns the initial (relative) SS value.\n@return the initial (relative) SS value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the initial (relative) SS value"
      },
      "throws": []
    },
    {
      "name": "e_sp",
      "comment": "Returns the initial SP value.",
      "javadoc": "Returns the initial SP value.\n@return the initial SP value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the initial SP value"
      },
      "throws": []
    },
    {
      "name": "e_csum",
      "comment": "Returns the checksum.",
      "javadoc": "Returns the checksum.\n@return the checksum",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the checksum"
      },
      "throws": []
    },
    {
      "name": "e_ip",
      "comment": "Returns the initial IP value.",
      "javadoc": "Returns the initial IP value.\n@return the initial IP value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the initial IP value"
      },
      "throws": []
    },
    {
      "name": "e_cs",
      "comment": "Returns the initial (relative) CS value.",
      "javadoc": "Returns the initial (relative) CS value.\n@return the initial (relative) CS value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the initial (relative) CS value"
      },
      "throws": []
    },
    {
      "name": "e_lfarlc",
      "comment": "Returns the file address of relocation table.",
      "javadoc": "Returns the file address of relocation table.\n@return the file address of relocation table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the file address of relocation table"
      },
      "throws": []
    },
    {
      "name": "e_ovno",
      "comment": "Returns the overlay number.",
      "javadoc": "Returns the overlay number.\n@return the overlay number",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the overlay number"
      },
      "throws": []
    },
    {
      "name": "e_res",
      "comment": "Returns the reserved words.",
      "javadoc": "Returns the reserved words.\n@return the reserved words",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short[]",
        "type_short": "short[]",
        "comment": "the reserved words"
      },
      "throws": []
    },
    {
      "name": "e_oemid",
      "comment": "Returns the OEM identifier (for e_oeminfo).",
      "javadoc": "Returns the OEM identifier (for e_oeminfo).\n@return the OEM identifier (for e_oeminfo)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the OEM identifier (for e_oeminfo)"
      },
      "throws": []
    },
    {
      "name": "e_oeminfo",
      "comment": "Returns the OEM information; e_oemid specific.",
      "javadoc": "Returns the OEM information; e_oemid specific.\n@return the OEM information; e_oemid specific",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the OEM information; e_oemid specific"
      },
      "throws": []
    },
    {
      "name": "e_res2",
      "comment": "Returns the reserved words (2).",
      "javadoc": "Returns the reserved words (2).\n@return the reserved words (2)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short[]",
        "type_short": "short[]",
        "comment": "the reserved words (2)"
      },
      "throws": []
    },
    {
      "name": "e_lfanew",
      "comment": "Returns the file address of new EXE header.",
      "javadoc": "Returns the file address of new EXE header.\n@return the file address of new EXE header",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the file address of new EXE header"
      },
      "throws": []
    },
    {
      "name": "hasNewExeHeader",
      "comment": "Returns true if a new EXE header exists.",
      "javadoc": "Returns true if a new EXE header exists.\n@return true if a new EXE header exists",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a new EXE header exists"
      },
      "throws": []
    },
    {
      "name": "hasPeHeader",
      "comment": "Returns true if a PE header exists.",
      "javadoc": "Returns true if a PE header exists.\n@return true if a PE header exists",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if a PE header exists"
      },
      "throws": []
    },
    {
      "name": "isDosSignature",
      "comment": "Returns true if the DOS magic number is correct",
      "javadoc": "Returns true if the DOS magic number is correct\n@return true if the DOS magic number is correct",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the DOS magic number is correct"
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.StructConverter#toDataType()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getProgramLen",
      "comment": "Returns the length (in bytes) of the DOS\n program.\n \n In other words:\n e_lfanew() - SIZEOF_DOS_HEADER",
      "javadoc": "Returns the length (in bytes) of the DOS\n program.\n \u003cp\u003e\n In other words:\n \u003ccode\u003ee_lfanew() - SIZEOF_DOS_HEADER\u003c/code\u003e\n@return the length (in bytes)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length (in bytes)"
      },
      "throws": []
    },
    {
      "name": "parse",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "decrementStub",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "start",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "write",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.format.Writeable#write(java.io.RandomAccessFile, ghidra.util.DataConverter)",
      "static": false,
      "params": [
        {
          "name": "raf",
          "type_long": "java.io.RandomAccessFile",
          "type_short": "RandomAccessFile",
          "comment": ""
        },
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
