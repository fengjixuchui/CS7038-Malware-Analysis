{
  "name": "DelayImportDescriptor",
  "comment": "A class to represent the \n ImgDelayDescr\n data structure defined in DELAYIMP.H.\n \n \n typedef struct ImgDelayDescr {\n     DWORD           grAttrs;        // attributes\n     LPCSTR          szName;         // pointer to dll name\n     HMODULE *       phmod;          // address of module handle\n     PImgThunkData   pIAT;           // address of the IAT\n     PCImgThunkData  pINT;           // address of the INT\n     PCImgThunkData  pBoundIAT;      // address of the optional bound IAT\n     PCImgThunkData  pUnloadIAT;     // address of optional copy of original IAT\n     DWORD           dwTimeStamp;    // 0 if not bound,\n                                     // O.W. date/time stamp of DLL bound to (old BIND)\n } ImgDelayDescr, * PImgDelayDescr;\n ",
  "javadoc": "A class to represent the \n \u003ccode\u003eImgDelayDescr\u003c/code\u003e\n data structure defined in \u003cb\u003e\u003ccode\u003eDELAYIMP.H\u003c/code\u003e\u003c/b\u003e.\n \u003cp\u003e\n \u003cpre\u003e\n typedef struct ImgDelayDescr {\n     DWORD           grAttrs;        // attributes\n     LPCSTR          szName;         // pointer to dll name\n     HMODULE *       phmod;          // address of module handle\n     PImgThunkData   pIAT;           // address of the IAT\n     PCImgThunkData  pINT;           // address of the INT\n     PCImgThunkData  pBoundIAT;      // address of the optional bound IAT\n     PCImgThunkData  pUnloadIAT;     // address of optional copy of original IAT\n     DWORD           dwTimeStamp;    // 0 if not bound,\n                                     // O.W. date/time stamp of DLL bound to (old BIND)\n } ImgDelayDescr, * PImgDelayDescr;\n \u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"ImgDelayDescr\""
    },
    {
      "name": "grAttrs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "szName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "phmod",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "pIAT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "pINT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "pBoundIAT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "pUnloadIAT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "dwTimeStamp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "dllName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "thunksIAT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.pe.ThunkData\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "thunksINT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.pe.ThunkData\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "thunksBoundIAT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.pe.ThunkData\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "thunksUnloadIAT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.pe.ThunkData\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "delayImportInfoList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.pe.ImportInfo\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "importByNameMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cghidra.app.util.bin.format.pe.ThunkData,ghidra.app.util.bin.format.pe.ImportByName\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "isValid",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createDelayImportDescriptor",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.DelayImportDescriptor",
        "type_short": "DelayImportDescriptor",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initDelayImportDescriptor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readThunks",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "isName",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.pe.ThunkData\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readFields",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isUsingRVA",
      "comment": "Returns true if the \"using relative virtual address\" is flag is set",
      "javadoc": "Returns true if the \"using relative virtual address\" is flag is set\n@return true if the \"using relative virtual address\" is flag is set",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the \"using relative virtual address\" is flag is set"
      },
      "throws": []
    },
    {
      "name": "getAttibutes",
      "comment": "Returns the attributes.",
      "javadoc": "Returns the attributes.\n@return the attributes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the attributes"
      },
      "throws": []
    },
    {
      "name": "getPointerToDLLName",
      "comment": "Returns the pointer to the DLL name.",
      "javadoc": "Returns the pointer to the DLL name.\n@return the pointer to the DLL name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the pointer to the DLL name"
      },
      "throws": []
    },
    {
      "name": "getAddressOfModuleHandle",
      "comment": "Returns the address of the module handle.",
      "javadoc": "Returns the address of the module handle.\n@return the address of the module handle",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the address of the module handle"
      },
      "throws": []
    },
    {
      "name": "getAddressOfIAT",
      "comment": "Returns the address of the import address table.",
      "javadoc": "Returns the address of the import address table.\n@return the address of the import address table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the address of the import address table"
      },
      "throws": []
    },
    {
      "name": "getAddressOfINT",
      "comment": "Returns the address of the import name table.",
      "javadoc": "Returns the address of the import name table.\n@return the address of the import name table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the address of the import name table"
      },
      "throws": []
    },
    {
      "name": "getAddressOfBoundIAT",
      "comment": "Returns the address of the optional bound IAT.",
      "javadoc": "Returns the address of the optional bound IAT.\n@return the address of the optional bound IAT",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the address of the optional bound IAT"
      },
      "throws": []
    },
    {
      "name": "getAddressOfOriginalIAT",
      "comment": "Returns the address of the optional copy of original IAT.",
      "javadoc": "Returns the address of the optional copy of original IAT.\n@return the address of the optional copy of original IAT",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the address of the optional copy of original IAT"
      },
      "throws": []
    },
    {
      "name": "getTimeStamp",
      "comment": "Returns the date/time stamp of DLL bound to (Old BIND),\n otherwise 0 if not bound.",
      "javadoc": "Returns the date/time stamp of DLL bound to (Old BIND),\n otherwise 0 if not bound.\n@return if bound returns the time stamp, otherwise 0",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "if bound returns the time stamp, otherwise 0"
      },
      "throws": []
    },
    {
      "name": "getDLLName",
      "comment": "Returns the DLL name.",
      "javadoc": "Returns the DLL name.\n@return the DLL name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the DLL name"
      },
      "throws": []
    },
    {
      "name": "getImportByNameMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Map\u003cghidra.app.util.bin.format.pe.ThunkData,ghidra.app.util.bin.format.pe.ImportByName\u003e",
        "type_short": "Map",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getImportList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.pe.ImportInfo\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getThunksIAT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.pe.ThunkData\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getThunksINT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.pe.ThunkData\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getThunksBoundIAT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.pe.ThunkData\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getThunksUnloadIAT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.pe.ThunkData\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "sizeof",
      "comment": "Returns the size of this structure. It accounts for 32 vs 64 bit.",
      "javadoc": "Returns the size of this structure. It accounts for 32 vs 64 bit.\n@return the size of this structure",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of this structure"
      },
      "throws": []
    },
    {
      "name": "isValid",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
