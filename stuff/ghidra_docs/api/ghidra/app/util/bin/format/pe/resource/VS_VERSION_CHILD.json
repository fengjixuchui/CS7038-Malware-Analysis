{
  "name": "VS_VERSION_CHILD",
  "comment": "A class to represent the VS_VERSION_CHILD data structure which generally corresponds \n to either StringFileInfo or VarFileInfo.  Only a single instance of each childName\n is expected.",
  "javadoc": "A class to represent the VS_VERSION_CHILD data structure which generally corresponds \n to either StringFileInfo or VarFileInfo.  Only a single instance of each childName\n is expected.",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "parentName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "relativeOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "childName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "childSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "childValueSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "childValueType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "childDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "valueAlignment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "childValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "children",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.pe.resource.VS_VERSION_CHILD\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "relativeOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "parentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "valueMap",
          "type_long": "java.util.HashMap\u003cjava.lang.String,java.lang.String\u003e",
          "type_short": "HashMap",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getChildren",
      "comment": "Returns the array of children",
      "javadoc": "Returns the array of children\n@return the array of children",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.resource.VS_VERSION_CHILD[]",
        "type_short": "ghidra.app.util.bin.format.pe.resource.VS_VERSION_CHILD[]",
        "comment": "the array of children"
      },
      "throws": []
    },
    {
      "name": "getRelativeOffset",
      "comment": "Return structure offset relative to parent structure start",
      "javadoc": "Return structure offset relative to parent structure start\n@return relative offset",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "relative offset"
      },
      "throws": []
    },
    {
      "name": "getChildName",
      "comment": "Returns the version child name.",
      "javadoc": "Returns the version child name.\n@return the version child name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the version child name"
      },
      "throws": []
    },
    {
      "name": "getChildSize",
      "comment": "Returns the version child size.",
      "javadoc": "Returns the version child size.\n@return the version child size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the version child size"
      },
      "throws": []
    },
    {
      "name": "getValueRelativeOffset",
      "comment": "Return value offset relative to parent structure start.",
      "javadoc": "Return value offset relative to parent structure start.\n@return relative value offset or 0 if no value exists",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "relative value offset or 0 if no value exists"
      },
      "throws": []
    },
    {
      "name": "getNameRelativeOffset",
      "comment": "Return unicode name string offset relative to parent structure start",
      "javadoc": "Return unicode name string offset relative to parent structure start\n@return relative name offset or 0 if data type is unknown",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "relative name offset or 0 if data type is unknown"
      },
      "throws": []
    },
    {
      "name": "valueIsUnicodeString",
      "comment": "",
      "javadoc": "@return true if value is unicode string",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if value is unicode string"
      },
      "throws": []
    },
    {
      "name": "valueIsDWord",
      "comment": "",
      "javadoc": "@return true if value is 4-byte integer value in memory \n while string value return by {@link DataType#getValue(ghidra.program.model.mem.MemBuffer, ghidra.docking.settings.Settings, int) DataType.getValue(MemBuffer, Settings, int)} is a numeric hex string.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if value is 4-byte integer value in memory \n while string value return by DataType#getValue(ghidra.program.model.mem.MemBuffer, ghidra.docking.settings.Settings, int) is a numeric hex string."
      },
      "throws": []
    },
    {
      "name": "hasChildren",
      "comment": "",
      "javadoc": "@return true if this child has children",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this child has children"
      },
      "throws": []
    }
  ]
}
