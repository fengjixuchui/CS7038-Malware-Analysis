{
  "name": "DWARFDataTypeImporter",
  "comment": "Creates Ghidra DataTypes using information from DWARF debug entries.  The caller\n is responsible for writing the resulting temporary DataType instances into the database.\n \n Create a new instance of this class for each DIEAggregate datatype that you wish\n to convert into a DataType.\n ",
  "javadoc": "Creates Ghidra {@link DataType}s using information from DWARF debug entries.  The caller\n is responsible for writing the resulting temporary DataType instances into the database.\n \u003cp\u003e\n Create a new instance of this class for each {@link DIEAggregate} datatype that you wish\n to convert into a DataType.\n \u003cp\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "prog",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFProgram",
      "type_short": "DWARFProgram",
      "constant_value": null
    },
    {
      "name": "dataTypeManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataTypeManager",
      "type_short": "DataTypeManager",
      "constant_value": null
    },
    {
      "name": "dwarfDTM",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeManager",
      "type_short": "DWARFDataTypeManager",
      "constant_value": null
    },
    {
      "name": "importOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFImportOptions",
      "type_short": "DWARFImportOptions",
      "constant_value": null
    },
    {
      "name": "voidDDT",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
      "type_short": "DWARFDataType",
      "constant_value": null
    },
    {
      "name": "rootDNI",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo",
      "type_short": "DWARFNameInfo",
      "constant_value": null
    },
    {
      "name": "recursionTrackingOffsetToLoopCount",
      "comment": "Tracks which DIEAggregate have been visited by #getDataTypeWorker(DIEAggregate, DataType)\n during the current #getDataType(DIEAggregate, DataType) session.\n \n Some recursive calls are permitted to handle loops in the data types, but are limited\n to 2 recursions.",
      "javadoc": "Tracks which {@link DIEAggregate DIEAs} have been visited by {@link #getDataTypeWorker(DIEAggregate, DataType)}\n during the current {@link #getDataType(DIEAggregate, DataType)} session.\n \u003cp\u003e\n Some recursive calls are permitted to handle loops in the data types, but are limited\n to 2 recursions.",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Long,java.lang.Integer\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "dieOffsetToDataTypeMap",
      "comment": "Maps DIEAggregate offset to live DataType objects, for the\n current session of this importer.",
      "javadoc": "Maps {@link DIEAggregate DIEA} offset to live {@link DataType} objects, for the\n current session of this importer.",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Long,ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "dataTypeInstanceToDDTMap",
      "comment": "Maps DataType instances to the DWARFDataType record that\n holds metadata about this datatype during the current session.\n \n This identity mapping doesn\u0027t always work because datatype instances are often clone()\u0027d\n which will break this mapping.\n \n Places where we know cloning happens the mapping is\n #updateMapping(DataType, DataType).",
      "javadoc": "Maps {@link DataType} instances to the {@link DWARFDataType} record that\n holds metadata about this datatype during the current session.\n \u003cp\u003e\n This identity mapping doesn\u0027t always work because datatype instances are often clone()\u0027d\n which will break this mapping.\n \u003cp\u003e\n Places where we know cloning happens the mapping is\n {@link #updateMapping(DataType, DataType) updated}.",
      "static": false,
      "type_long": "java.util.IdentityHashMap\u003cghidra.program.model.data.DataType,ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType\u003e",
      "type_short": "IdentityHashMap",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new data type importer.",
      "javadoc": "Create a new data type importer.\n@param prog {@link DWARFProgram} that is being imported\n@param dwarfDTM {@link DWARFDataTypeManager} helper\n@param importOptions {@link DWARFImportOptions} control optional features during import",
      "static": false,
      "params": [
        {
          "name": "prog",
          "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFProgram",
          "type_short": "DWARFProgram",
          "comment": "DWARFProgram that is being imported"
        },
        {
          "name": "dwarfDTM",
          "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeManager",
          "type_short": "DWARFDataTypeManager",
          "comment": "DWARFDataTypeManager helper"
        },
        {
          "name": "importOptions",
          "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFImportOptions",
          "type_short": "DWARFImportOptions",
          "comment": "DWARFImportOptions control optional features during import"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDDTByInstance",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dtInstance",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
        "type_short": "DWARFDataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "trackRecursion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "id",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "delta",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "Converts the specified DWARF debug entry into a Ghidra DataType (wrapped\n in a simple holder object to also return associated metadata).",
      "javadoc": "Converts the specified DWARF debug entry into a Ghidra {@link DataType} (wrapped\n in a simple holder object to also return associated metadata).\n@param diea DWARF {@link DIEAggregate} to convert into Ghidra DataType.\n@param defaultValue value to return if the specified DIEA is null or there is a problem\n with the DWARF debug data.\n@return a {@link DWARFDataType} wrapper around the new Ghidra {@link DataType}.\n@throws IOException\n@throws DWARFExpressionException",
      "static": false,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": "DWARF DIEAggregate to convert into Ghidra DataType."
        },
        {
          "name": "defaultValue",
          "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
          "type_short": "DWARFDataType",
          "comment": "value to return if the specified DIEA is null or there is a problem\n with the DWARF debug data."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
        "type_short": "DWARFDataType",
        "comment": "a DWARFDataType wrapper around the new Ghidra DataType."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException",
          "type_short": "DWARFExpressionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "shouldReuseAlreadyImportedDT",
      "comment": "Returns true if the previously imported data type should be reused.\n \n Don\u0027t re-use empty structs (isNotYetDefined) to ensure that newer\n definitions of the same struct are given a chance to be resolved() \n into the DTM.",
      "javadoc": "Returns true if the previously imported data type should be reused.\n \u003cp\u003e\n Don\u0027t re-use empty structs (isNotYetDefined) to ensure that newer\n definitions of the same struct are given a chance to be resolved() \n into the DTM.\n@param alreadyImportedDT dataType to check\n@return boolean true if its okay to reuse the data type",
      "static": false,
      "params": [
        {
          "name": "alreadyImportedDT",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "dataType to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if its okay to reuse the data type"
      },
      "throws": []
    },
    {
      "name": "updateMapping",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "prevDT",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "newDT",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "recordTempDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ddt",
          "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
          "type_short": "DWARFDataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeDataTypeForFunctionDefinition",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        },
        {
          "name": "mangleAnonFuncNames",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
        "type_short": "DWARFDataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException",
          "type_short": "DWARFExpressionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "makeDataTypeForBaseType",
      "comment": "Gets the corresponding Ghidra base type.\n ",
      "javadoc": "Gets the corresponding Ghidra base type.\n \u003cp\u003e\n@param diea\n@throws IOException\n@throws DWARFExpressionException",
      "static": false,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
        "type_short": "DWARFDataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException",
          "type_short": "DWARFExpressionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "makeDataTypeForConst",
      "comment": "Simple passthru, returns whatever type this \"const\" modifier applies to.\n ",
      "javadoc": "Simple passthru, returns whatever type this \"const\" modifier applies to.\n \u003cp\u003e\n@param diea\n@throws IOException\n@throws DWARFExpressionException",
      "static": false,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
        "type_short": "DWARFDataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException",
          "type_short": "DWARFExpressionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "makeDataTypeForEnum",
      "comment": "Creates a Ghidra Enum datatype.\n \n If an existing Enum with the same name is found in the DTM, and it doesn\u0027t have\n any conflicting enum values, merge this enum into the existing enum.\n \n This method takes liberties with the normal\n workflow to be able to merge values into previous db enum datatypes.\n ",
      "javadoc": "Creates a Ghidra {@link Enum} datatype.\n \u003cp\u003e\n If an existing Enum with the same name is found in the DTM, and it doesn\u0027t have\n any conflicting enum values, merge this enum into the existing enum.\n \u003cp\u003e\n This method takes liberties with the normal{@literal DWARF-\u003eGhidra Impl DataType-\u003eGhidra DB DataType}\n workflow to be able to merge values into previous db enum datatypes.\n \u003cp\u003e\n@param diea\n@return ",
      "static": false,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
        "type_short": "DWARFDataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "populateStubEnum",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "enumDT",
          "type_long": "ghidra.program.model.data.Enum",
          "type_short": "Enum",
          "comment": ""
        },
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mergeEnumValues",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "destEnum",
          "type_long": "ghidra.program.model.data.Enum",
          "type_short": "Enum",
          "comment": ""
        },
        {
          "name": "srcEnum",
          "type_long": "ghidra.program.model.data.Enum",
          "type_short": "Enum",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isCompatEnumValues",
      "comment": "Returns true if there are no values in destEnum that conflict with srcEnum.",
      "javadoc": "Returns true if there are no values in destEnum that conflict with srcEnum.\n@param srcEnum\n@param destEnum\n@return ",
      "static": false,
      "params": [
        {
          "name": "srcEnum",
          "type_long": "ghidra.program.model.data.Enum",
          "type_short": "Enum",
          "comment": ""
        },
        {
          "name": "destEnum",
          "type_long": "ghidra.program.model.data.Enum",
          "type_short": "Enum",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeDataTypeForStruct",
      "comment": "Creates an empty stub structure/union for the DIEA.\n \n Use #finishStruct(DIEAggregate, DataType) (which calls\n #populateStubStruct(StructureDataType, DIEAggregate) and\n #populateStubEnum(Enum, DIEAggregate)) to fill in the fields of the structure.\n \n This is done in two steps to enable ending recursive loops by publishing the empty\n struct in the #dieOffsetToDataTypeMap map, where it will be found and returned by\n #getDataTypeWorker(DIEAggregate, DataType), instead of calling back\n into this method.",
      "javadoc": "Creates an empty stub structure/union for the DIEA.\n \u003cp\u003e\n Use {@link #finishStruct(DIEAggregate, DataType)} (which calls\n {@link #populateStubStruct(StructureDataType, DIEAggregate)} and\n {@link #populateStubEnum(Enum, DIEAggregate)}) to fill in the fields of the structure.\n \u003cp\u003e\n This is done in two steps to enable ending recursive loops by publishing the empty\n struct in the {@link #dieOffsetToDataTypeMap} map, where it will be found and returned by\n {@link #getDataTypeWorker(DIEAggregate, DataType)}, instead of calling back\n into this method.\n@param diea\n@return ",
      "static": false,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
        "type_short": "DWARFDataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isStructTooBigForGhidra",
      "comment": "Returns true if the DWARF struct is larger than Ghidra allows (ie. bigger than MAX_INT).",
      "javadoc": "Returns true if the DWARF struct is larger than Ghidra allows (ie. bigger than MAX_INT).\n@param structSize long int size of the DWARF struct\n@return true if bigger than Ghidra can handle",
      "static": false,
      "params": [
        {
          "name": "structSize",
          "type_long": "long",
          "type_short": "long",
          "comment": "long int size of the DWARF struct"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if bigger than Ghidra can handle"
      },
      "throws": []
    },
    {
      "name": "finishStruct",
      "comment": "Populates stub structs or unions with there fields.",
      "javadoc": "Populates stub structs or unions with there fields.\n@param diea\n@param dataType\n@throws IOException\n@throws DWARFExpressionException",
      "static": false,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        },
        {
          "name": "ddt",
          "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
          "type_short": "DWARFDataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException",
          "type_short": "DWARFExpressionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "populateStubUnion",
      "comment": "Populates an empty UnionDataType with its fields.",
      "javadoc": "Populates an empty {@link UnionDataType} with its fields.\n@param union\n@param diea\n@param rec\n@throws IOException\n@throws DWARFExpressionException",
      "static": false,
      "params": [
        {
          "name": "ddt",
          "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
          "type_short": "DWARFDataType",
          "comment": ""
        },
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException",
          "type_short": "DWARFExpressionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "populateStubStruct",
      "comment": "Populates an empty StructureDataType with its fields.",
      "javadoc": "Populates an empty {@link StructureDataType} with its fields.\n@param structure\n@param diea\n@throws IOException\n@throws DWARFExpressionException",
      "static": false,
      "params": [
        {
          "name": "ddt",
          "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
          "type_short": "DWARFDataType",
          "comment": ""
        },
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException",
          "type_short": "DWARFExpressionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "removeUneededStructMemberShrinkage",
      "comment": "Restore structure fields to their regular size (if there is room) to ensure\n future DataType equiv and comparisons are successful.\n \n (ie. undoes #getUnpaddedDataTypeLength(DataType) if there is room)",
      "javadoc": "Restore structure fields to their regular size (if there is room) to ensure\n future DataType equiv and comparisons are successful.\n \u003cp\u003e\n (ie. undoes {@link #getUnpaddedDataTypeLength(DataType)} if there is room)\n@param structure",
      "static": false,
      "params": [
        {
          "name": "structure",
          "type_long": "ghidra.program.model.data.StructureDataType",
          "type_short": "StructureDataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUnpaddedDataTypeLength",
      "comment": "Detect the real length of a DataType (ie. drop any trailing padding).",
      "javadoc": "Detect the real length of a DataType (ie. drop any trailing padding).\n@param dt\n@return ",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "populateStubStruct_worker",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ddt",
          "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
          "type_short": "DWARFDataType",
          "comment": ""
        },
        {
          "name": "structure",
          "type_long": "ghidra.program.model.data.StructureDataType",
          "type_short": "StructureDataType",
          "comment": ""
        },
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        },
        {
          "name": "childTagType",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException",
          "type_short": "DWARFExpressionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isUndefinedOrZeroLenAtOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "struct",
          "type_long": "ghidra.program.model.data.Structure",
          "type_short": "Structure",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUndefinedOrdinalAt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "struct",
          "type_long": "ghidra.program.model.data.Structure",
          "type_short": "Structure",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "memberDesc",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "prefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "errorStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "memberName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "ddt",
          "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
          "type_short": "DWARFDataType",
          "comment": ""
        },
        {
          "name": "memberOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bitSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bitOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeDataTypeForArray",
      "comment": "Creates a Ghidra ArrayDataType.\n \n Multi-dim DWARF arrays will result in nested Ghidra array types.\n ",
      "javadoc": "Creates a Ghidra {@link ArrayDataType}.\n \u003cp\u003e\n Multi-dim DWARF arrays will result in nested Ghidra array types.\n \u003cp\u003e\n@param diea\n@throws IOException\n@throws DWARFExpressionException",
      "static": false,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
        "type_short": "DWARFDataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException",
          "type_short": "DWARFExpressionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "makeDataTypeForPointer",
      "comment": "Creates a Pointer datatype.\n \n If there is no pointer size specified in the DWARF DIE, use the default pointer size\n from the DWARF compilation unit.\n \n There is some hacky logic here to handle situations where a pointer refers back to\n itself via a struct:\n \n The struct creation code will stop the recursive loop after the second time\n makeDataTypeForPointer() is hit because there will be an empty struct in the cache.",
      "javadoc": "Creates a {@link Pointer} datatype.\n \u003cp\u003e\n If there is no pointer size specified in the DWARF DIE, use the default pointer size\n from the DWARF compilation unit.\n \u003cp\u003e\n There is some hacky logic here to handle situations where a pointer refers back to\n itself via a struct:\n \u003cpre\u003e{@literal\n   +-\u003e STRUCT1 (creates empty struct)\n         +-\u003e Field1: PTRa\n               +-\u003e STRUCT1 (empty struct returned from cache)\n               ( ptr instance created pointing to empty struct)\n         ( struct fields populated )\n }\u003c/pre\u003e\n The struct creation code will stop the recursive loop after the second time\n makeDataTypeForPointer() is hit because there will be an empty struct in the cache.\n@param diea\n@throws IOException\n@throws DWARFExpressionException",
      "static": false,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
        "type_short": "DWARFDataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException",
          "type_short": "DWARFExpressionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "makeDataTypeForPtrToMemberType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
        "type_short": "DWARFDataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException",
          "type_short": "DWARFExpressionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "makeDataTypeForTypedef",
      "comment": "Creates a TypeDef datatype.\n \n If the typedef has the same name as the destination type, create an equiv mapping\n pointing to the destination and omit creating a Ghidra typedef.\n \n If the typedef points (via a pointer) to a function definition type that doesn\u0027t\n have a name yet, update the function defintion with the name from this typedef\n and elide this typedef.",
      "javadoc": "Creates a {@link TypeDef} datatype.\n \u003cp\u003e\n If the typedef has the same name as the destination type, create an equiv mapping\n pointing to the destination and omit creating a Ghidra typedef.\n \u003cp\u003e\n If the typedef points (via a pointer) to a function definition type that doesn\u0027t\n have a name yet, update the function defintion with the name from this typedef\n and elide this typedef.\n@param diea\n@param rec\n@throws IOException\n@throws DWARFExpressionException",
      "static": false,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
        "type_short": "DWARFDataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException",
          "type_short": "DWARFExpressionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "makeDataTypeForUnspecifiedType",
      "comment": "Creates a datatype representing the string in the unspecifiedtype dwarf definition.\n \n Most likely will be a void type.",
      "javadoc": "Creates a datatype representing the string in the unspecifiedtype dwarf definition.\n \u003cp\u003e\n Most likely will be a void type.\n@param diea\n@return ",
      "static": false,
      "params": [
        {
          "name": "diea",
          "type_long": "ghidra.app.util.bin.format.dwarf4.DIEAggregate",
          "type_short": "DIEAggregate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
        "type_short": "DWARFDataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isAnonDataType",
      "comment": "Returns true if the specified DataType (or if its a pointer, the pointed to\n DataType) is a data type that did not have a name and was assigned an name in the form\n \"anon_datatype\".",
      "javadoc": "Returns true if the specified {@link DataType} (or if its a pointer, the pointed to\n DataType) is a data type that did not have a name and was assigned an name in the form\n \"anon_datatype\".\n@param dt\n@return ",
      "static": true,
      "params": [
        {
          "name": "ddt",
          "type_long": "ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeImporter.DWARFDataType",
          "type_short": "DWARFDataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copyAnonTypeForMember",
      "comment": "Copy an anon Datatype (or a chain of pointers to a anon DataType) into a new CategoryPath\n with a new name that is appropriate for a structure member field.\n \n Use this method when a struct has a field with an anon datatype.  The new copied\n datatype will be called \"anonorigname_for_structurefieldname\"\n ",
      "javadoc": "Copy an anon Datatype (or a chain of pointers to a anon DataType) into a new CategoryPath\n with a new name that is appropriate for a structure member field.\n \u003cp\u003e\n Use this method when a struct has a field with an anon datatype.  The new copied\n datatype will be called \"anonorigname_for_structurefieldname\"\n \u003cp\u003e\n@param dt - DataType to copy\n@param destCategory {@link CategoryPath} to copy to\n@param membername the name of the structure member that uses this anon datatype.\n@return new DataType that is a copy of the old type, but in a new location and name.",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "- DataType to copy"
        },
        {
          "name": "destCategory",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "CategoryPath to copy to"
        },
        {
          "name": "membername",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the structure member that uses this anon datatype."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "new DataType that is a copy of the old type, but in a new location and name."
      },
      "throws": []
    }
  ]
}
