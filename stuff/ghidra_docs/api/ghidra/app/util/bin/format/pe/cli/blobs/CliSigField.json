{
  "name": "CliSigField",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.util.bin.format.pe.cli.blobs.CliAbstractSig",
  "fields": [
    {
      "name": "type",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.cli.blobs.CliAbstractSig.CliParam",
      "type_short": "CliParam",
      "constant_value": null
    },
    {
      "name": "dataOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "CLISIGFIELD_PROLOG",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "6"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "blob",
          "type_long": "ghidra.app.util.bin.format.pe.cli.blobs.CliBlob",
          "type_short": "CliBlob",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isFieldSig",
      "comment": "Checks whether this could *possibly* be a FieldSig. Only looks at the identifier byte. Useful for signature index\n that could be to different kinds of signatures.",
      "javadoc": "Checks whether this could *possibly* be a FieldSig. Only looks at the identifier byte. Useful for signature index\n that could be to different kinds of signatures.\n@param blob\n@return \n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "blob",
          "type_long": "ghidra.app.util.bin.format.pe.cli.blobs.CliBlob",
          "type_short": "CliBlob",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.cli.blobs.CliAbstractSig.CliParam",
        "type_short": "CliParam",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContentsDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContentsName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContentsComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRepresentationCommon",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "stream",
          "type_long": "ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata",
          "type_short": "CliStreamMetadata",
          "comment": ""
        },
        {
          "name": "isShort",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
