{
  "name": "MachHeaderFlags",
  "comment": "Constants for the flags field of the mach_header",
  "javadoc": "Constants for the flags field of the mach_header",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "MH_NOUNDEFS",
      "comment": "the object file has no undefined references.",
      "javadoc": "the object file has no undefined references.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "MH_INCRLINK",
      "comment": "the object file is the output of an incremental \n link against a base file and can\u0027t be link \n edited again.",
      "javadoc": "the object file is the output of an incremental \n link against a base file and can\u0027t be link \n edited again.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "MH_DYLDLINK",
      "comment": "the object file is input for the dynamic \n linker and can\u0027t be staticly link edited again.",
      "javadoc": "the object file is input for the dynamic \n linker and can\u0027t be staticly link edited again.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "MH_BINDATLOAD",
      "comment": "the object file\u0027s undefined references \n are bound by the dynamic linker when loaded.",
      "javadoc": "the object file\u0027s undefined references \n are bound by the dynamic linker when loaded.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8"
    },
    {
      "name": "MH_PREBOUND",
      "comment": "the file has its dynamic undefined references \n prebound.",
      "javadoc": "the file has its dynamic undefined references \n prebound.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16"
    },
    {
      "name": "MH_SPLIT_SEGS",
      "comment": "the file has its read-only and read-write \n segments split.",
      "javadoc": "the file has its read-only and read-write \n segments split.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32"
    },
    {
      "name": "MH_LAZY_INIT",
      "comment": "the shared library init routine is to be \n run lazily via catching memory faults to its \n writeable segments (obsolete).",
      "javadoc": "the shared library init routine is to be \n run lazily via catching memory faults to its \n writeable segments (obsolete).",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "64"
    },
    {
      "name": "MH_TWOLEVEL",
      "comment": "the image is using two-level name space bindings.",
      "javadoc": "the image is using two-level name space bindings.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "128"
    },
    {
      "name": "MH_FORCE_FLAT",
      "comment": "the executable is forcing all images to use \n flat name space bindings.",
      "javadoc": "the executable is forcing all images to use \n flat name space bindings.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "256"
    },
    {
      "name": "MH_NOMULTIDEFS",
      "comment": "this umbrella guarantees no multiple defintions \n of symbols in its sub-images so the two-level \n namespace hints can always be used.",
      "javadoc": "this umbrella guarantees no multiple defintions \n of symbols in its sub-images so the two-level \n namespace hints can always be used.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "512"
    },
    {
      "name": "MH_NOFIXPREBINDING",
      "comment": "do not have dyld notify the prebinding \n agent about this executable.",
      "javadoc": "do not have dyld notify the prebinding \n agent about this executable.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1024"
    },
    {
      "name": "MH_PREBINDABLE",
      "comment": "the binary is not prebound but can have \n its prebinding redone. only used when \n MH_PREBOUND is not set.",
      "javadoc": "the binary is not prebound but can have \n its prebinding redone. only used when \n MH_PREBOUND is not set.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2048"
    },
    {
      "name": "MH_ALLMODSBOUND",
      "comment": "indicates that this binary binds to all \n two-level namespace modules of its dependent \n libraries. only used when MH_PREBINDABLE and \n MH_TWOLEVEL are both set.",
      "javadoc": "indicates that this binary binds to all \n two-level namespace modules of its dependent \n libraries. only used when MH_PREBINDABLE and \n MH_TWOLEVEL are both set.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4096"
    },
    {
      "name": "MH_SUBSECTIONS_VIA_SYMBOLS",
      "comment": "safe to divide up the sections into \n sub-sections via symbols for dead code \n stripping.",
      "javadoc": "safe to divide up the sections into \n sub-sections via symbols for dead code \n stripping.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8192"
    },
    {
      "name": "MH_CANONICAL",
      "comment": "the binary has been canonicalized via the unprebind operation.",
      "javadoc": "the binary has been canonicalized via the unprebind operation.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16384"
    },
    {
      "name": "MH_WEAK_DEFINES",
      "comment": "the final linked image contains external weak symbols.",
      "javadoc": "the final linked image contains external weak symbols.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "32768"
    },
    {
      "name": "MH_BINDS_TO_WEAK",
      "comment": "the final linked image uses weak symbols.",
      "javadoc": "the final linked image uses weak symbols.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "65536"
    },
    {
      "name": "MH_ALLOW_STACK_EXECUTION",
      "comment": "when this bit is set, all stacks in the task \n will be given stack execution privilege.\n only used in MH_EXECUTE filetypes.",
      "javadoc": "when this bit is set, all stacks in the task \n will be given stack execution privilege.\n only used in MH_EXECUTE filetypes.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "131072"
    },
    {
      "name": "MH_ROOT_SAFE",
      "comment": "When this bit is set, the binary declares it is safe for use in\n processes with uid zero",
      "javadoc": "When this bit is set, the binary declares it is safe for use in\n processes with uid zero",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "262144"
    },
    {
      "name": "MH_SETUID_SAFE",
      "comment": "When this bit is set, the binary declares it is safe for use in\n processes when issetugid() is true",
      "javadoc": "When this bit is set, the binary declares it is safe for use in\n processes when issetugid() is true",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "524288"
    },
    {
      "name": "MH_NO_REEXPORTED_DYLIBS",
      "comment": "When this bit is set on a dylib, the static linker does not need to\n examine dependent dylibs to see if any are re-exported",
      "javadoc": "When this bit is set on a dylib, the static linker does not need to\n examine dependent dylibs to see if any are re-exported",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1048576"
    },
    {
      "name": "MH_PIE",
      "comment": "When this bit is set, the OS will load the main executable at a\n random address.  Only used in MH_EXECUTE filetypes.",
      "javadoc": "When this bit is set, the OS will load the main executable at a\n random address.  Only used in MH_EXECUTE filetypes.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2097152"
    },
    {
      "name": "MH_DEAD_STRIPPABLE_DYLIB",
      "comment": "Only for use on dylibs. \n When linking against a dylib that\n has this bit set, the static linker will automatically not create a\n LC_LOAD_DYLIB load command to the\n dylib if no symbols are being referenced from the dylib.",
      "javadoc": "Only for use on dylibs. \n When linking against a dylib that\n has this bit set, the static linker will automatically not create a\n LC_LOAD_DYLIB load command to the\n dylib if no symbols are being referenced from the dylib.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4194304"
    },
    {
      "name": "MH_HAS_TLV_DESCRIPTORS",
      "comment": "Contains a section of type S_THREAD_LOCAL_VARIABLES.",
      "javadoc": "Contains a section of type S_THREAD_LOCAL_VARIABLES.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "8388608"
    },
    {
      "name": "MH_NO_HEAP_EXECUTION",
      "comment": "When this bit is set, the OS will run the main executable\n with a non-executable heap even on platforms ( e.g., i386 )\n that don\u0027t require it.\n Only used in MH_EXECUTE file types.",
      "javadoc": "When this bit is set, the OS will run the main executable\n with a non-executable heap even on platforms ( e.g., i386 )\n that don\u0027t require it.\n Only used in MH_EXECUTE file types.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16777216"
    },
    {
      "name": "MH_APP_EXTENSION_SAFE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "33554432"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFlags",
      "comment": "Returns string representation of the flag values.",
      "javadoc": "Returns string representation of the flag values.",
      "static": true,
      "params": [
        {
          "name": "flags",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    }
  ]
}
