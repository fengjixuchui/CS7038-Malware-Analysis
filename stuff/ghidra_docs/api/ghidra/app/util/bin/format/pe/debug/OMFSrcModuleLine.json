{
  "name": "OMFSrcModuleLine",
  "comment": "A class to represent the Object Module Format (OMF) Source Module Line data structure.\n \n short seg            - segment index.\n \n short cPair          - Count or number of source line pairs to follow.\n \n int [] offsets       - offset within the code segment of the start of the line.\n \n short [] linenumbers - line numbers that are in the source file that cause code to be emitted to the code segment.\n ",
  "javadoc": "A class to represent the Object Module Format (OMF) Source Module Line data structure.\n \u003cbr\u003e\n short seg            - segment index.\n \u003cbr\u003e\n short cPair          - Count or number of source line pairs to follow.\n \u003cbr\u003e\n int [] offsets       - offset within the code segment of the start of the line.\n \u003cbr\u003e\n short [] linenumbers - line numbers that are in the source file that cause code to be emitted to the code segment.\n \u003cbr\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "seg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "cPair",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "offsets",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int[]",
      "type_short": "int[]",
      "constant_value": null
    },
    {
      "name": "linenumbers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short[]",
      "type_short": "short[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createOMFSrcModuleLine",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.OMFSrcModuleLine",
        "type_short": "OMFSrcModuleLine",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initOMFSrcModuleLine",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getPairCount",
      "comment": "Returns the count or number of source line pairs to follow.",
      "javadoc": "Returns the count or number of source line pairs to follow.\n@return the count or number of source line pairs to follow",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the count or number of source line pairs to follow"
      },
      "throws": []
    },
    {
      "name": "getLinenumbers",
      "comment": "Returns the line numbers that are in the source file that cause code to be emitted to the code segment.",
      "javadoc": "Returns the line numbers that are in the source file that cause code to be emitted to the code segment.\n@return the line numbers that are in the source file that cause code to be emitted to the code segment",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short[]",
        "type_short": "short[]",
        "comment": "the line numbers that are in the source file that cause code to be emitted to the code segment"
      },
      "throws": []
    },
    {
      "name": "getOffsets",
      "comment": "Returns the offset within the code segment of the start of the line.",
      "javadoc": "Returns the offset within the code segment of the start of the line.\n@return the offset within the code segment of the start of the line",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int[]",
        "type_short": "int[]",
        "comment": "the offset within the code segment of the start of the line"
      },
      "throws": []
    },
    {
      "name": "getSegmentIndex",
      "comment": "Returns the segment index.",
      "javadoc": "Returns the segment index.\n@return the segment index",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "the segment index"
      },
      "throws": []
    },
    {
      "name": "getByteCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
