{
  "name": "DyldCacheMappingAndSlideInfo",
  "comment": "Represents a dyld_cache_mapping_and_slide_info structure.",
  "javadoc": "Represents a dyld_cache_mapping_and_slide_info structure.\n@see \u003ca href\u003d\"https://opensource.apple.com/source/dyld/dyld-852.2/dyld3/shared-cache/dyld_cache_format.h.auto.html\"\u003edyld3/shared-cache/dyld_cache_format.h\u003c/a\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DYLD_CACHE_MAPPING_AUTH_DATA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "DYLD_CACHE_MAPPING_DIRTY_DATA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "DYLD_CACHE_MAPPING_CONST_DATA",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "address",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "fileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "slideInfoFileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "slideInfoFileSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "flags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "maxProt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "initProt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new DyldCacheImageInfo.",
      "javadoc": "Create a new {@link DyldCacheImageInfo}.\n@param reader A {@link BinaryReader} positioned at the start of a DYLD mapping info\n@throws IOException if there was an IO-related problem creating the DYLD mapping info",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "A BinaryReader positioned at the start of a DYLD mapping info"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was an IO-related problem creating the DYLD mapping info"
        }
      ]
    },
    {
      "name": "getAddress",
      "comment": "Gets the address of the start of the mapping.",
      "javadoc": "Gets the address of the start of the mapping.\n@return The address of the start of the mapping",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The address of the start of the mapping"
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "Gets the size of the mapping.",
      "javadoc": "Gets the size of the mapping.\n@return The size of the mapping",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The size of the mapping"
      },
      "throws": []
    },
    {
      "name": "getFileOffset",
      "comment": "Gets the file offset of the start of the mapping.",
      "javadoc": "Gets the file offset of the start of the mapping.\n@return The file offset of the start of the mapping",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "The file offset of the start of the mapping"
      },
      "throws": []
    },
    {
      "name": "getSlideInfoFileOffset",
      "comment": "Get slide info file offset",
      "javadoc": "Get slide info file offset\n@return slide info file offset",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "slide info file offset"
      },
      "throws": []
    },
    {
      "name": "getSlideInfoFileSize",
      "comment": "Get slide info file size",
      "javadoc": "Get slide info file size\n@return slide info file size",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "slide info file size"
      },
      "throws": []
    },
    {
      "name": "getFlags",
      "comment": "Get slide info flags",
      "javadoc": "Get slide info flags\n@return slide info flags",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "slide info flags"
      },
      "throws": []
    },
    {
      "name": "isAuthData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isDirtyData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isConstData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isRead",
      "comment": "Returns true if the initial protections include READ.",
      "javadoc": "Returns true if the initial protections include READ.\n@return true if the initial protections include READ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the initial protections include READ"
      },
      "throws": []
    },
    {
      "name": "isWrite",
      "comment": "Returns true if the initial protections include WRITE.",
      "javadoc": "Returns true if the initial protections include WRITE.\n@return true if the initial protections include WRITE",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the initial protections include WRITE"
      },
      "throws": []
    },
    {
      "name": "isExecute",
      "comment": "Returns true if the initial protections include EXECUTE.",
      "javadoc": "Returns true if the initial protections include EXECUTE.\n@return true if the initial protections include EXECUTE",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the initial protections include EXECUTE"
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
