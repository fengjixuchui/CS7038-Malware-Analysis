{
  "name": "MachHeader",
  "comment": "Represents a mach_header structure.",
  "javadoc": "Represents a mach_header structure.\n@see \u003ca href\u003d\"https://opensource.apple.com/source/xnu/xnu-4570.71.2/EXTERNAL_HEADERS/mach-o/loader.h.auto.html\"\u003emach-o/loader.h\u003c/a\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "magic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "cpuType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "cpuSubType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "fileType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "nCmds",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "sizeOfCmds",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "flags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "reserved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "_is32bit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "_commands",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.macho.commands.LoadCommand\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "_commandIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "_reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
      "type_short": "FactoryBundledWithBinaryReader",
      "constant_value": null
    },
    {
      "name": "_machHeaderStartIndexInProvider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "_machHeaderStartIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "_parsed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "isMachHeader",
      "comment": "Returns true if the specified ByteProvider starts with a Mach header magic signature.",
      "javadoc": "Returns true if the specified ByteProvider starts with a Mach header magic signature.\n@param provider {@link ByteProvider} to check\n@return boolean true if byte provider starts with a MachHeader",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "ByteProvider to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if byte provider starts with a MachHeader"
      },
      "throws": []
    },
    {
      "name": "createMachHeader",
      "comment": "Assumes the MachHeader starts at index 0 in the ByteProvider.",
      "javadoc": "Assumes the MachHeader starts at index 0 in the ByteProvider.\n@param provider the ByteProvider\n@throws IOException if an I/O error occurs while reading from the ByteProvider\n@throws MachException if an invalid MachHeader is detected",
      "static": true,
      "params": [
        {
          "name": "factory",
          "type_long": "generic.continues.GenericFactory",
          "type_short": "GenericFactory",
          "comment": ""
        },
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "the ByteProvider"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.macho.MachHeader",
        "type_short": "MachHeader",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs while reading from the ByteProvider"
        },
        {
          "type_long": "ghidra.app.util.bin.format.macho.MachException",
          "type_short": "MachException",
          "comment": "if an invalid MachHeader is detected"
        }
      ]
    },
    {
      "name": "createMachHeader",
      "comment": "Assumes the MachHeader starts at index machHeaderStartIndexInProvider in the ByteProvider.",
      "javadoc": "Assumes the MachHeader starts at index \u003ci\u003emachHeaderStartIndexInProvider\u003c/i\u003e in the ByteProvider.\n@param provider the ByteProvider\n@param machHeaderStartIndexInProvider the index into the ByteProvider where the MachHeader begins.\n@throws IOException if an I/O error occurs while reading from the ByteProvider\n@throws MachException if an invalid MachHeader is detected",
      "static": true,
      "params": [
        {
          "name": "factory",
          "type_long": "generic.continues.GenericFactory",
          "type_short": "GenericFactory",
          "comment": ""
        },
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "the ByteProvider"
        },
        {
          "name": "machHeaderStartIndexInProvider",
          "type_long": "long",
          "type_short": "long",
          "comment": "the index into the ByteProvider where the MachHeader begins."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.macho.MachHeader",
        "type_short": "MachHeader",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs while reading from the ByteProvider"
        },
        {
          "type_long": "ghidra.app.util.bin.format.macho.MachException",
          "type_short": "MachException",
          "comment": "if an invalid MachHeader is detected"
        }
      ]
    },
    {
      "name": "createMachHeader",
      "comment": "Assumes the MachHeader starts at index machHeaderStartIndexInProvider in the ByteProvider.",
      "javadoc": "Assumes the MachHeader starts at index \u003ci\u003emachHeaderStartIndexInProvider\u003c/i\u003e in the ByteProvider.\n@param provider the ByteProvider\n@param machHeaderStartIndexInProvider the index into the ByteProvider where the MachHeader begins.\n@param isRemainingMachoRelativeToStartIndex TRUE if the rest of the macho uses relative indexing. This is common in UBI and kernel cache files.\n                                             FALSE if the rest of the file uses absolute indexing from 0. This is common in DYLD cache files.\n@throws IOException if an I/O error occurs while reading from the ByteProvider\n@throws MachException if an invalid MachHeader is detected",
      "static": true,
      "params": [
        {
          "name": "factory",
          "type_long": "generic.continues.GenericFactory",
          "type_short": "GenericFactory",
          "comment": ""
        },
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "the ByteProvider"
        },
        {
          "name": "machHeaderStartIndexInProvider",
          "type_long": "long",
          "type_short": "long",
          "comment": "the index into the ByteProvider where the MachHeader begins."
        },
        {
          "name": "isRemainingMachoRelativeToStartIndex",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "TRUE if the rest of the macho uses relative indexing. This is common in UBI and kernel cache files.\n                                             FALSE if the rest of the file uses absolute indexing from 0. This is common in DYLD cache files."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.macho.MachHeader",
        "type_short": "MachHeader",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs while reading from the ByteProvider"
        },
        {
          "type_long": "ghidra.app.util.bin.format.macho.MachException",
          "type_short": "MachException",
          "comment": "if an invalid MachHeader is detected"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initMachHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "factory",
          "type_long": "generic.continues.GenericFactory",
          "type_short": "GenericFactory",
          "comment": ""
        },
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "machHeaderStartIndexInProvider",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "isRemainingMachoRelativeToStartIndex",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.macho.MachException",
          "type_short": "MachException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parse",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.macho.MachException",
          "type_short": "MachException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getMagic",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCpuType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getImageBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCpuSubType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFileType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumberOfCommands",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSizeOfCommands",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFlags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReserved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.util.bin.format.macho.MachException",
          "type_short": "MachException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getStartIndex",
      "comment": "Returns the start index that should be used for calculating offsets.\n This will be 0 for things such as the dyld shared cache where offsets are\n based off the beginning of the file.",
      "javadoc": "Returns the start index that should be used for calculating offsets.\n This will be 0 for things such as the dyld shared cache where offsets are\n based off the beginning of the file.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStartIndexInProvider",
      "comment": "Returns offset of MachHeader in the ByteProvider",
      "javadoc": "Returns offset of MachHeader in the ByteProvider",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "is32bit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllSegments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.macho.commands.SegmentCommand\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSegment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "segmentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.macho.commands.SegmentCommand",
        "type_short": "SegmentCommand",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "segmentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "sectionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.macho.Section",
        "type_short": "Section",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAllSections",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.macho.Section\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLoadCommands",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.macho.commands.LoadCommand\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLoadCommands",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "classType",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cT\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFirstLoadCommand",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "classType",
          "type_long": "java.lang.Class\u003cT\u003e",
          "type_short": "Class",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "T",
        "type_short": "T",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isLittleEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readMagic",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "machHeaderStartIndexInProvider",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
