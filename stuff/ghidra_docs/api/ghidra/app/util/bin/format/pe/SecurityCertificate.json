{
  "name": "SecurityCertificate",
  "comment": "A class to represent the WIN_CERTIFICATE\n struct as defined in winbase.h.\n \n This structure encapsulates a signature used in verifying executables.\n \n \n typedef struct _WIN_CERTIFICATE {\n     DWORD       dwLength;\n     WORD        wRevision;\n     WORD        wCertificateType;   // WIN_CERT_TYPE_xxx\n     BYTE        bCertificate[ANYSIZE_ARRAY];\n } WIN_CERTIFICATE, *LPWIN_CERTIFICATE;\n ",
  "javadoc": "A class to represent the \u003ccode\u003eWIN_CERTIFICATE\u003c/code\u003e\n struct as defined in \u003cb\u003e\u003ccode\u003ewinbase.h\u003c/code\u003e\u003c/b\u003e.\n \u003cp\u003e\n This structure encapsulates a signature used in verifying executables.\n \u003cp\u003e\n \u003cpre\u003e\n typedef struct _WIN_CERTIFICATE {\n     DWORD       dwLength;\n     WORD        wRevision;\n     WORD        wCertificateType;   // WIN_CERT_TYPE_xxx\n     BYTE        bCertificate[ANYSIZE_ARRAY];\n } WIN_CERTIFICATE, *LPWIN_CERTIFICATE;\n \u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NAME",
      "comment": "The name to use when converting into a structure data type.",
      "javadoc": "The name to use when converting into a structure data type.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"WIN_CERTIFICATE\""
    },
    {
      "name": "WIN_CERT_REVISION_1_0",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "256"
    },
    {
      "name": "WIN_CERT_REVISION_2_0",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "512"
    },
    {
      "name": "WIN_CERT_TYPE_X509",
      "comment": "bCertificate contains an X.509 Certificate.",
      "javadoc": "bCertificate contains an X.509 Certificate.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "WIN_CERT_TYPE_PKCS_SIGNED_DATA",
      "comment": "bCertificate contains a PKCS SignedData structure.",
      "javadoc": "bCertificate contains a PKCS SignedData structure.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "WIN_CERT_TYPE_RESERVED_1",
      "comment": "Reserved.",
      "javadoc": "Reserved.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "WIN_CERT_TYPE_PKCS1_SIGN",
      "comment": "bCertificate contains PKCS1_MODULE_SIGN fields.",
      "javadoc": "bCertificate contains PKCS1_MODULE_SIGN fields.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "9"
    },
    {
      "name": "dwLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "wRevision",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "wCertificateType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "bCertificate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "read",
      "comment": "Read a SecurityCertificate.",
      "javadoc": "Read a SecurityCertificate.\n@param reader BinaryReader to use\n@param index offset where the SecurityCertificate starts\n@param sizeLimit maximum number of bytes that can be read from the reader\n@return new SecurityCertificate, or null if invalid or bad data\n@throws IOException if io error when reading data",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader to use"
        },
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": "offset where the SecurityCertificate starts"
        },
        {
          "name": "sizeLimit",
          "type_long": "int",
          "type_short": "int",
          "comment": "maximum number of bytes that can be read from the reader"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.SecurityCertificate",
        "type_short": "SecurityCertificate",
        "comment": "new SecurityCertificate, or null if invalid or bad data"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if io error when reading data"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumberOfBytesConsumed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Returns the length, in bytes, of the signature.",
      "javadoc": "Returns the length, in bytes, of the signature.\n@return the length, in bytes, of the signature",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length, in bytes, of the signature"
      },
      "throws": []
    },
    {
      "name": "getRevision",
      "comment": "Returns the certificate revision. Currently, \n the only defined certificate revision is \n WIN_CERT_REVISION_1_0 (0x0100).",
      "javadoc": "Returns the certificate revision. Currently, \n the only defined certificate revision is \n WIN_CERT_REVISION_1_0 (0x0100).\n@return the certificate revision",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the certificate revision"
      },
      "throws": []
    },
    {
      "name": "getType",
      "comment": "Returns the certificate type.",
      "javadoc": "Returns the certificate type.\n@return the certificate type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the certificate type"
      },
      "throws": []
    },
    {
      "name": "getTypeAsString",
      "comment": "Returns a string representation of the certificate type.",
      "javadoc": "Returns a string representation of the certificate type.\n@return a string representation of the certificate type",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a string representation of the certificate type"
      },
      "throws": []
    },
    {
      "name": "getData",
      "comment": "An array of certificates. The format of this member \n depends on the value of wCertificateType.",
      "javadoc": "An array of certificates. The format of this member \n depends on the value of wCertificateType.\n@return an array of certificates",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "an array of certificates"
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.StructConverter#toDataType()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    }
  ]
}
