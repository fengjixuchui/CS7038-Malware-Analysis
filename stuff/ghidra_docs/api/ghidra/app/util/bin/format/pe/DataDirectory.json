{
  "name": "DataDirectory",
  "comment": "An abstract base class to represent the\n IMAGE_DATA_DIRECTORY\n data structure defined in winnt.h.\n \n typedef struct _IMAGE_DATA_DIRECTORY {\n     DWORD   VirtualAddress;\n     DWORD   Size;\n } IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; {\n ",
  "javadoc": "An abstract base class to represent the\n \u003ccode\u003eIMAGE_DATA_DIRECTORY\u003c/code\u003e\n data structure defined in \u003cb\u003e\u003ccode\u003ewinnt.h\u003c/code\u003e\u003c/b\u003e.\n \u003cpre\u003e\n typedef struct _IMAGE_DATA_DIRECTORY {\n     DWORD   VirtualAddress;\n     DWORD   Size;\n } IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; {\n \u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter",
    "ghidra.app.util.bin.format.pe.PeMarkupable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "TITLE",
      "comment": "The name to use when converting into a structure data type.",
      "javadoc": "The name to use when converting into a structure data type.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"IMAGE_DATA_DIRECTORY\""
    },
    {
      "name": "IMAGE_SIZEOF_IMAGE_DIRECTORY_ENTRY",
      "comment": "The size of the data directory, in bytes.",
      "javadoc": "The size of the data directory, in bytes.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "8"
    },
    {
      "name": "ntHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
      "type_short": "NTHeader",
      "constant_value": null
    },
    {
      "name": "reader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
      "type_short": "FactoryBundledWithBinaryReader",
      "constant_value": null
    },
    {
      "name": "virtualAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "hasParsed",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processDataDirectory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ntHeader",
          "type_long": "ghidra.app.util.bin.format.pe.NTHeader",
          "type_short": "NTHeader",
          "comment": ""
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDirectoryName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parse",
      "comment": "Parses this data directory.",
      "javadoc": "Parses this data directory.\n@return True if parsing completed successfully; otherwise, false.\n@throws IOException If there was an IO problem while parsing.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if parsing completed successfully; otherwise, false."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "If there was an IO problem while parsing."
        }
      ]
    },
    {
      "name": "va",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "va",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "isBinary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createTerminatedString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "label",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createDirectoryBookmark",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setBookmark",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPlateComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setEolComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPreComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createFragment",
      "comment": "Creates a fragment with the given name (if it does not already exist).\n Move the address range into the fragment.\n Note: the end address is not inclusive!",
      "javadoc": "Creates a fragment with the given name (if it does not already exist).\n Move the address range into the fragment.\n Note: the end address is not inclusive!",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "fragmentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "end",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findFragment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "module",
          "type_long": "ghidra.program.model.listing.ProgramModule",
          "type_short": "ProgramModule",
          "comment": ""
        },
        {
          "name": "fragmentName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.ProgramFragment",
        "type_short": "ProgramFragment",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVirtualAddress",
      "comment": "Returns the relative virtual address of this data directory.",
      "javadoc": "Returns the relative virtual address of this data directory.\n@return the relative virtual address of this data directory",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the relative virtual address of this data directory"
      },
      "throws": []
    },
    {
      "name": "setVirtualAddress",
      "comment": "Sets the relative virtual address of this data directory.",
      "javadoc": "Sets the relative virtual address of this data directory.\n@param addr the new relative virtual address",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new relative virtual address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "Returns the size of this data directory.",
      "javadoc": "Returns the size of this data directory.\n@return the size of this data directory",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of this data directory"
      },
      "throws": []
    },
    {
      "name": "setSize",
      "comment": "Sets the size of this data directory.",
      "javadoc": "Sets the size of this data directory.\n@param size the new size of this data directory",
      "static": false,
      "params": [
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "the new size of this data directory"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "@see java.lang.Object#toString()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "rvaToPointer",
      "comment": "Converts the relative virtual address of this data directory\n into a file pointer.",
      "javadoc": "Converts the relative virtual address of this data directory\n into a file pointer.\n@return the file pointer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the file pointer"
      },
      "throws": []
    },
    {
      "name": "isContainedInSection",
      "comment": "Returns true if this data directory is contained inside of a section.\n If true, that means that the section is loaded into memory\n at runtime.",
      "javadoc": "Returns true if this data directory is contained inside of a section.\n If true, that means that the section is loaded into memory\n at runtime.\n@return true if this data directory is contained inside of a section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this data directory is contained inside of a section"
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "This method should return a datatype representing the data stored\n in this directory.",
      "javadoc": "This method should return a datatype representing the data stored\n in this directory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeBytes",
      "comment": "Directories that are not contained inside of sections\n should override this method to write their bytes into the\n specified file.",
      "javadoc": "Directories that are not contained inside of sections\n should override this method to write their bytes into the\n specified file.\n@param raf the random access file used for output\n@param dc the data converter for endianness\n@param template the original unadulterated PE\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [
        {
          "name": "raf",
          "type_long": "java.io.RandomAccessFile",
          "type_short": "RandomAccessFile",
          "comment": "the random access file used for output"
        },
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": "the data converter for endianness"
        },
        {
          "name": "template",
          "type_long": "ghidra.app.util.bin.format.pe.PortableExecutable",
          "type_short": "PortableExecutable",
          "comment": "the original unadulterated PE"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "hasParsedCorrectly",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPointer",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
