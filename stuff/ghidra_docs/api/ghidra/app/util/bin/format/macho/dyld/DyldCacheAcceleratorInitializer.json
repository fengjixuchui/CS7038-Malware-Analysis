{
  "name": "DyldCacheAcceleratorInitializer",
  "comment": "Represents a dyld_cache_accelerator_initializer structure.",
  "javadoc": "Represents a dyld_cache_accelerator_initializer structure.\n@see \u003ca href\u003d\"https://opensource.apple.com/source/dyld/dyld-852.2/dyld3/shared-cache/dyld_cache_format.h.auto.html\"\u003edyld3/shared-cache/dyld_cache_format.h\u003c/a\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "functionsOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "imageIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new DyldCacheAcceleratorInitializer.",
      "javadoc": "Create a new {@link DyldCacheAcceleratorInitializer}.\n@param reader A {@link BinaryReader} positioned at the start of a DYLD accelerator \n   initializer\n@throws IOException if there was an IO-related problem creating the DYLD accelerator\n   initializer",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "A BinaryReader positioned at the start of a DYLD accelerator \n   initializer"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was an IO-related problem creating the DYLD accelerator\n   initializer"
        }
      ]
    },
    {
      "name": "getFunctionsOffset",
      "comment": "Gets the functions offset, which is an address offset from the start of the cache mapping.",
      "javadoc": "Gets the functions offset, which is an address offset from the start of the cache mapping.\n@return The functions offset,  which is an address offset from the start of the cache \n   mapping",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The functions offset,  which is an address offset from the start of the cache \n   mapping"
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
