{
  "name": "LEB128",
  "comment": "Class to hold result of reading a LEB128 value, along with size and position metadata.\n \n Note: If a LEB128 value that would result in a native value longer than 64bits is attempted to\n be read, an IOException will be thrown, and the stream\u0027s position will be left at the last read byte.\n \n If this was a valid (but overly large) LEB128, the caller\u0027s stream will be left still pointing to LEB data.\n ",
  "javadoc": "Class to hold result of reading a LEB128 value, along with size and position metadata.\n \u003cp\u003e\n Note: If a LEB128 value that would result in a native value longer than 64bits is attempted to\n be read, an {@link IOException} will be thrown, and the stream\u0027s position will be left at the last read byte.\n \u003cp\u003e\n If this was a valid (but overly large) LEB128, the caller\u0027s stream will be left still pointing to LEB data.\n \u003cp\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "offset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "value",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "byteLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "byteLength",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "asUInt32",
      "comment": "Returns the value as an unsigned int32.  If the actual value\n is outside the positive range of a java int (ie. 0.. Integer#MAX_VALUE),\n an exception is thrown.",
      "javadoc": "Returns the value as an unsigned int32.  If the actual value\n is outside the positive range of a java int (ie. 0.. {@link Integer#MAX_VALUE}),\n an exception is thrown.\n@return int in the range of 0 to  {@link Integer#MAX_VALUE}\n@throws IOException if value is outside range",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int in the range of 0 to  Integer#MAX_VALUE"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if value is outside range"
        }
      ]
    },
    {
      "name": "asInt32",
      "comment": "Returns the value as an signed int32.  If the actual value\n is outside the range of a java int (ie.  Integer#MIN_VALUE.. Integer#MAX_VALUE),\n an exception is thrown.",
      "javadoc": "Returns the value as an signed int32.  If the actual value\n is outside the range of a java int (ie.  {@link Integer#MIN_VALUE}.. {@link Integer#MAX_VALUE}),\n an exception is thrown.\n@return int in the range of {@link Integer#MIN_VALUE} to  {@link Integer#MAX_VALUE}\n@throws IOException if value is outside range",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "int in the range of Integer#MIN_VALUE to  Integer#MAX_VALUE"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if value is outside range"
        }
      ]
    },
    {
      "name": "asLong",
      "comment": "Returns the value as a 64bit primitive long.  Interpreting the signed-ness of the\n value will depend on the way the value was read (ie. if #readSignedValue(BinaryReader)\n vs. #readUnsignedValue(BinaryReader) was used).",
      "javadoc": "Returns the value as a 64bit primitive long.  Interpreting the signed-ness of the\n value will depend on the way the value was read (ie. if {@link #readSignedValue(BinaryReader)}\n vs. {@link #readUnsignedValue(BinaryReader)} was used).\n@return long value.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "long value."
      },
      "throws": []
    },
    {
      "name": "getOffset",
      "comment": "Returns the offset of the LEB128 value in the stream it was read from.",
      "javadoc": "Returns the offset of the LEB128 value in the stream it was read from.\n@return stream offset of the LEB128 value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "stream offset of the LEB128 value"
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Returns the number of bytes that were used to store the LEB128 value in the stream\n it was read from.",
      "javadoc": "Returns the number of bytes that were used to store the LEB128 value in the stream\n it was read from.\n@return number of bytes used to store the read LEB128 value",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "number of bytes used to store the read LEB128 value"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readValue",
      "comment": "Reads a LEB128 value from the BinaryReader and returns a LEB128 instance\n that contains the value along with size and position metadata.\n \n See #readAsLong(BinaryReader, boolean).",
      "javadoc": "Reads a LEB128 value from the BinaryReader and returns a {@link LEB128} instance\n that contains the value along with size and position metadata.\n \u003cp\u003e\n See {@link #readAsLong(BinaryReader, boolean)}.\n@param reader {@link BinaryReader} to read bytes from\n@param isSigned true if the value is signed\n@return a {@link LEB128} instance with the read LEB128 value with metadata\n@throws IOException if an I/O error occurs or value is outside the range of a java\n 64 bit int",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader to read bytes from"
        },
        {
          "name": "isSigned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the value is signed"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.LEB128",
        "type_short": "LEB128",
        "comment": "a LEB128 instance with the read LEB128 value with metadata"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs or value is outside the range of a java\n 64 bit int"
        }
      ]
    },
    {
      "name": "readUnsignedValue",
      "comment": "Reads an unsigned LEB128 value from the BinaryReader and returns a LEB128 instance\n that contains the value along with size and position metadata.\n \n See #readAsLong(BinaryReader, boolean).",
      "javadoc": "Reads an unsigned LEB128 value from the BinaryReader and returns a {@link LEB128} instance\n that contains the value along with size and position metadata.\n \u003cp\u003e\n See {@link #readAsLong(BinaryReader, boolean)}.\n@param reader {@link BinaryReader} to read bytes from\n@return a {@link LEB128} instance with the read LEB128 value with metadata\n@throws IOException if an I/O error occurs or value is outside the range of a java\n 64 bit int",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader to read bytes from"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.LEB128",
        "type_short": "LEB128",
        "comment": "a LEB128 instance with the read LEB128 value with metadata"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs or value is outside the range of a java\n 64 bit int"
        }
      ]
    },
    {
      "name": "readSignedValue",
      "comment": "Reads an signed LEB128 value from the BinaryReader and returns a LEB128 instance\n that contains the value along with size and position metadata.\n \n See #readAsLong(BinaryReader, boolean).",
      "javadoc": "Reads an signed LEB128 value from the BinaryReader and returns a {@link LEB128} instance\n that contains the value along with size and position metadata.\n \u003cp\u003e\n See {@link #readAsLong(BinaryReader, boolean)}.\n@param reader {@link BinaryReader} to read bytes from\n@return a {@link LEB128} instance with the read LEB128 value with metadata\n@throws IOException if an I/O error occurs or value is outside the range of a java\n 64 bit int",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader to read bytes from"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.dwarf4.LEB128",
        "type_short": "LEB128",
        "comment": "a LEB128 instance with the read LEB128 value with metadata"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs or value is outside the range of a java\n 64 bit int"
        }
      ]
    },
    {
      "name": "readAsInt32",
      "comment": "Reads a LEB128 signed number from the BinaryReader and returns it as a java 32 bit int.\n \n If the value of the number can not fit in the int type, an IOException will\n be thrown.",
      "javadoc": "Reads a LEB128 signed number from the BinaryReader and returns it as a java 32 bit int.\n \u003cp\u003e\n If the value of the number can not fit in the int type, an {@link IOException} will\n be thrown.\n@param reader {@link BinaryReader} to read bytes from\n@return signed int32 value\n@throws IOException if error reading bytes or value is outside the\n range of a signed int32",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader to read bytes from"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "signed int32 value"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error reading bytes or value is outside the\n range of a signed int32"
        }
      ]
    },
    {
      "name": "readAsUInt32",
      "comment": "Reads a LEB128 unsigned number from the BinaryReader and returns it as a java 32 bit int.\n \n If the value of the number can not fit in the positive range of the int type,\n an IOException will be thrown.",
      "javadoc": "Reads a LEB128 unsigned number from the BinaryReader and returns it as a java 32 bit int.\n \u003cp\u003e\n If the value of the number can not fit in the positive range of the int type,\n an {@link IOException} will be thrown.\n@param reader {@link BinaryReader} to read bytes from\n@return unsigned int32 value 0..Integer.MAX_VALUE\n@throws IOException if error reading bytes or value is outside the\n positive range of a java 32 bit int (ie. 0..Integer.MAX_VALUE)",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader to read bytes from"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "unsigned int32 value 0..Integer.MAX_VALUE"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error reading bytes or value is outside the\n positive range of a java 32 bit int (ie. 0..Integer.MAX_VALUE)"
        }
      ]
    },
    {
      "name": "readAsLong",
      "comment": "Reads a LEB128 number from the BinaryReader and returns it as a java 64 bit long int.\n \n Large unsigned integers that use all 64 bits are be returned in a java native\n \u0027long\u0027 type, which is signed.  It is up to the caller to treat the value as unsigned.\n \n Large integers that use more than 64 bits will cause an IOException to be thrown.\n ",
      "javadoc": "Reads a LEB128 number from the BinaryReader and returns it as a java 64 bit long int.\n \u003cp\u003e\n Large unsigned integers that use all 64 bits are be returned in a java native\n \u0027long\u0027 type, which is signed.  It is up to the caller to treat the value as unsigned.\n \u003cp\u003e\n Large integers that use more than 64 bits will cause an IOException to be thrown.\n \u003cp\u003e\n@param reader {@link BinaryReader} to read bytes from\n@param isSigned true if the value is signed\n@return long integer value.  Caller must treat it as unsigned if isSigned parameter was\n set to false\n@throws IOException if an I/O error occurs or value is outside the range of a java\n 64 bit int",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "BinaryReader to read bytes from"
        },
        {
          "name": "isSigned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the value is signed"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "long integer value.  Caller must treat it as unsigned if isSigned parameter was\n set to false"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs or value is outside the range of a java\n 64 bit int"
        }
      ]
    },
    {
      "name": "decode",
      "comment": "Decodes a LEB128 number from a byte array and returns it as a long.\n \n See #readAsLong(BinaryReader, boolean).",
      "javadoc": "Decodes a LEB128 number from a byte array and returns it as a long.\n \u003cp\u003e\n See {@link #readAsLong(BinaryReader, boolean)}.\n@param bytes the bytes representing the LEB128 number\n@param isSigned true if the value is signed\n@return long integer value.  Caller must treat it as unsigned if isSigned parameter was\n set to false\n@throws IOException if error reading bytes or value is outside the\n range of a java 64 bit int",
      "static": true,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the bytes representing the LEB128 number"
        },
        {
          "name": "isSigned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the value is signed"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "long integer value.  Caller must treat it as unsigned if isSigned parameter was\n set to false"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error reading bytes or value is outside the\n range of a java 64 bit int"
        }
      ]
    },
    {
      "name": "decode",
      "comment": "Decodes a LEB128 number from a byte array and returns it as a long.\n \n See #readAsLong(BinaryReader, boolean).",
      "javadoc": "Decodes a LEB128 number from a byte array and returns it as a long.\n \u003cp\u003e\n See {@link #readAsLong(BinaryReader, boolean)}.\n@param bytes the bytes representing the LEB128 number\n@param offset offset in byte array of where to start reading bytes\n@param isSigned true if the value is signed\n@return long integer value.  Caller must treat it as unsigned if isSigned parameter was\n set to false\n@throws IOException if error reading bytes or value is outside the\n range of a java 64 bit int",
      "static": true,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the bytes representing the LEB128 number"
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "offset in byte array of where to start reading bytes"
        },
        {
          "name": "isSigned",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the value is signed"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "long integer value.  Caller must treat it as unsigned if isSigned parameter was\n set to false"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error reading bytes or value is outside the\n range of a java 64 bit int"
        }
      ]
    },
    {
      "name": "ensureInt32u",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "ensureInt32s",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
