{
  "name": "DebugMisc",
  "comment": "A class to represent the IMAGE_DEBUG_MISC struct\n as defined in winnt.h.\n \n \n \n typedef struct _IMAGE_DEBUG_MISC {\n     DWORD       DataType;               // type of misc data, see defines\n     DWORD       Length;                 // total length of record, rounded to four\n                                         // byte multiple.\n     BOOLEAN     Unicode;                // TRUE if data is unicode string\n     BYTE        Reserved[ 3 ];\n     BYTE        Data[ 1 ];              // Actual data\n }\n ",
  "javadoc": "A class to represent the \u003ccode\u003eIMAGE_DEBUG_MISC\u003c/code\u003e struct\n as defined in \u003cb\u003e\u003ccode\u003ewinnt.h\u003c/code\u003e\u003c/b\u003e.\n \u003cbr\u003e\n \n \u003cpre\u003e\n typedef struct _IMAGE_DEBUG_MISC {\n     DWORD       DataType;               // type of misc data, see defines\n     DWORD       Length;                 // total length of record, rounded to four\n                                         // byte multiple.\n     BOOLEAN     Unicode;                // TRUE if data is unicode string\n     BYTE        Reserved[ 3 ];\n     BYTE        Data[ 1 ];              // Actual data\n }\n \u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "NAME",
      "comment": "The name to use when converting into a structure data type.",
      "javadoc": "The name to use when converting into a structure data type.",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"IMAGE_DEBUG_MISC\""
    },
    {
      "name": "IMAGE_DEBUG_MISC_EXENAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "1"
    },
    {
      "name": "debugDir",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.debug.DebugDirectory",
      "type_short": "DebugDirectory",
      "constant_value": null
    },
    {
      "name": "dataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "unicode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "reserved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "actualData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createDebugMisc",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param reader the binary reader\n@param debugDir the debug directory associated to this MISC debug\n@param ntHeader",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": "the binary reader"
        },
        {
          "name": "debugDir",
          "type_long": "ghidra.app.util.bin.format.pe.debug.DebugDirectory",
          "type_short": "DebugDirectory",
          "comment": "the debug directory associated to this MISC debug"
        },
        {
          "name": "validator",
          "type_long": "ghidra.app.util.bin.format.pe.OffsetValidator",
          "type_short": "OffsetValidator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.DebugMisc",
        "type_short": "DebugMisc",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initDebugMisc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "debugDir",
          "type_long": "ghidra.app.util.bin.format.pe.debug.DebugDirectory",
          "type_short": "DebugDirectory",
          "comment": ""
        },
        {
          "name": "validator",
          "type_long": "ghidra.app.util.bin.format.pe.OffsetValidator",
          "type_short": "OffsetValidator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDataType",
      "comment": "Returns the data type of this misc debug.",
      "javadoc": "Returns the data type of this misc debug.\n@return the data type of this misc debug",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the data type of this misc debug"
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Returns the length of this misc debug.",
      "javadoc": "Returns the length of this misc debug.\n@return the length of this misc debug",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the length of this misc debug"
      },
      "throws": []
    },
    {
      "name": "isUnicode",
      "comment": "Returns true if this misc debug is unicode.",
      "javadoc": "Returns true if this misc debug is unicode.\n@return true if this misc debug is unicode",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this misc debug is unicode"
      },
      "throws": []
    },
    {
      "name": "getReserved",
      "comment": "Returns the array of reserved bytes.",
      "javadoc": "Returns the array of reserved bytes.\n@return the array of reserved bytes",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the array of reserved bytes"
      },
      "throws": []
    },
    {
      "name": "getActualData",
      "comment": "Returns a string equivalent of the actual misc debug data.",
      "javadoc": "Returns a string equivalent of the actual misc debug data.\n@return a string equivalent of the actual misc debug data",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a string equivalent of the actual misc debug data"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "@see java.lang.Object#toString()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDebugDirectory",
      "comment": "Returns the debug directory associated with this misc debug.",
      "javadoc": "Returns the debug directory associated with this misc debug.\n@return the debug directory associated with this misc debug",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.DebugDirectory",
        "type_short": "DebugDirectory",
        "comment": "the debug directory associated with this misc debug"
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "@see ghidra.app.util.bin.StructConverter#toDataType()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        }
      ]
    }
  ]
}
