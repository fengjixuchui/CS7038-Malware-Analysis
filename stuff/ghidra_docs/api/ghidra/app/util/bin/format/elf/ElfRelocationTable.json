{
  "name": "ElfRelocationTable",
  "comment": "A container class to hold ELF relocations.",
  "javadoc": "A container class to hold ELF relocations.",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.format.elf.ElfFileSection",
    "ghidra.app.util.bin.ByteArrayConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "format",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfRelocationTable.TableFormat",
      "type_short": "TableFormat",
      "constant_value": null
    },
    {
      "name": "sectionToBeRelocated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
      "type_short": "ElfSectionHeader",
      "constant_value": null
    },
    {
      "name": "symbolTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfSymbolTable",
      "type_short": "ElfSymbolTable",
      "constant_value": null
    },
    {
      "name": "relocTableSection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
      "type_short": "ElfSectionHeader",
      "constant_value": null
    },
    {
      "name": "fileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "addrOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "entrySize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "addendTypeReloc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "factory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "generic.continues.GenericFactory",
      "type_short": "GenericFactory",
      "constant_value": null
    },
    {
      "name": "elfHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
      "type_short": "ElfHeader",
      "constant_value": null
    },
    {
      "name": "relocs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfRelocation[]",
      "type_short": "ghidra.app.util.bin.format.elf.ElfRelocation[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createElfRelocationTable",
      "comment": "Create an Elf Relocation Table",
      "javadoc": "Create an Elf Relocation Table\n@param reader\n@param header elf header\n@param relocTableSection relocation table section header or null if associated with a dynamic table entry\n@param fileOffset relocation table file offset\n@param addrOffset memory address of relocation table (should already be adjusted for prelink)\n@param length length of relocation table in bytes\n@param entrySize size of each relocation entry in bytes\n@param addendTypeReloc true if addend type relocation table\n@param symbolTable associated symbol table\n@param sectionToBeRelocated or null for dynamic relocation table\n@param format table format\n@return Elf relocation table object\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": "elf header"
        },
        {
          "name": "relocTableSection",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": "relocation table section header or null if associated with a dynamic table entry"
        },
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "relocation table file offset"
        },
        {
          "name": "addrOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "memory address of relocation table (should already be adjusted for prelink)"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "length of relocation table in bytes"
        },
        {
          "name": "entrySize",
          "type_long": "long",
          "type_short": "long",
          "comment": "size of each relocation entry in bytes"
        },
        {
          "name": "addendTypeReloc",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if addend type relocation table"
        },
        {
          "name": "symbolTable",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbolTable",
          "type_short": "ElfSymbolTable",
          "comment": "associated symbol table"
        },
        {
          "name": "sectionToBeRelocated",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": "or null for dynamic relocation table"
        },
        {
          "name": "format",
          "type_long": "ghidra.app.util.bin.format.elf.ElfRelocationTable.TableFormat",
          "type_short": "TableFormat",
          "comment": "table format"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfRelocationTable",
        "type_short": "ElfRelocationTable",
        "comment": "Elf relocation table object"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initElfRelocationTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": ""
        },
        {
          "name": "relocTableSection",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": ""
        },
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "addrOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "entrySize",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "addendTypeReloc",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "symbolTable",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbolTable",
          "type_short": "ElfSymbolTable",
          "comment": ""
        },
        {
          "name": "sectionToBeRelocated",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": ""
        },
        {
          "name": "format",
          "type_long": "ghidra.app.util.bin.format.elf.ElfRelocationTable.TableFormat",
          "type_short": "TableFormat",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parseStandardRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.elf.ElfRelocation\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readNextRelrEntry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addRelrEntry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "relocList",
          "type_long": "java.util.List\u003cghidra.app.util.bin.format.elf.ElfRelocation\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addRelrEntries",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "baseOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "entry",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "relocList",
          "type_long": "java.util.List\u003cghidra.app.util.bin.format.elf.ElfRelocation\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseRelrRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.elf.ElfRelocation\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parseAndroidRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.elf.ElfRelocation\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "hasAddendRelocations",
      "comment": "",
      "javadoc": "@return true if has addend relocations, otherwise addend extraction from\n relocation target may be required",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if has addend relocations, otherwise addend extraction from\n relocation target may be required"
      },
      "throws": []
    },
    {
      "name": "getSectionToBeRelocated",
      "comment": "Returns the section where the relocations will be applied.\n For example, this method will return \".plt\" for \".rel.plt\"",
      "javadoc": "Returns the section where the relocations will be applied.\n For example, this method will return \".plt\" for \".rel.plt\"\n@return the section where the relocations will be applied\n or null for dynamic relocation table not associated with \n a section.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
        "type_short": "ElfSectionHeader",
        "comment": "the section where the relocations will be applied\n or null for dynamic relocation table not associated with \n a section."
      },
      "throws": []
    },
    {
      "name": "getRelocations",
      "comment": "Returns the relocations defined in this table.",
      "javadoc": "Returns the relocations defined in this table.\n@return the relocations defined in this table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfRelocation[]",
        "type_short": "ghidra.app.util.bin.format.elf.ElfRelocation[]",
        "comment": "the relocations defined in this table"
      },
      "throws": []
    },
    {
      "name": "getRelocationCount",
      "comment": "Get number of relocation entries contained within this table",
      "javadoc": "Get number of relocation entries contained within this table\n@return relocation entry count",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "relocation entry count"
      },
      "throws": []
    },
    {
      "name": "getAssociatedSymbolTable",
      "comment": "Returns the associated symbol table.\n A relocation object contains a symbol index.\n This index is into this symbol table.",
      "javadoc": "Returns the associated symbol table.\n A relocation object contains a symbol index.\n This index is into this symbol table.\n@return the associated symbol table",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfSymbolTable",
        "type_short": "ElfSymbolTable",
        "comment": "the associated symbol table"
      },
      "throws": []
    },
    {
      "name": "toBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dc",
          "type_long": "ghidra.util.DataConverter",
          "type_short": "DataConverter",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableSectionHeader",
      "comment": "Get section header which corresponds to this table, or null\n if only associated with a dynamic table entry",
      "javadoc": "Get section header which corresponds to this table, or null\n if only associated with a dynamic table entry\n@return relocation table section header or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
        "type_short": "ElfSectionHeader",
        "comment": "relocation table section header or null"
      },
      "throws": []
    },
    {
      "name": "isRelrTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEntrySize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    }
  ]
}
